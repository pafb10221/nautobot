{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Nautobot Plugin Firewall Models \u00b6 An App for Nautobot . Overview \u00b6 A plugin for Nautobot that is meant to model layer 4 firewall policies and/or extended access control lists. Screenshots \u00b6 More screenshots can be found in the Using the App page in the documentation. Here's a quick overview of some of the plugin's added functionality: Try it out! \u00b6 This App is installed in the Nautobot Community Sandbox found over at demo.nautobot.com ! For a full list of all the available always-on sandbox environments, head over to the main page on networktocode.com . Documentation \u00b6 Full documentation for this App can be found over on the Nautobot Docs website: User Guide - Overview, Using the App, Getting Started. Administrator Guide - How to Install, Configure, Upgrade, or Uninstall the App. Developer Guide - Extending the App, Code Reference, Contribution Guide. Release Notes / Changelog . Frequently Asked Questions . Contributing to the Documentation \u00b6 You can find all the Markdown source for the App documentation under the docs folder in this repository. For simple edits, a Markdown capable editor is sufficient: clone the repository and edit away. If you need to view the fully-generated documentation site, you can build it with MkDocs . A container hosting the documentation can be started using the invoke commands (details in the Development Environment Guide ) on http://localhost:8001 . Using this container, as your changes to the documentation are saved, they will be automatically rebuilt and any pages currently being viewed will be reloaded in your browser. Any PRs with fixes or improvements are very welcome! Questions \u00b6 For any questions or comments, please check the FAQ first. Feel free to also swing by the Network to Code Slack (channel #nautobot ), sign up here if you don't have an account.","title":"Overview"},{"location":"index.html#nautobot-plugin-firewall-models","text":"An App for Nautobot .","title":"Nautobot Plugin Firewall Models"},{"location":"index.html#overview","text":"A plugin for Nautobot that is meant to model layer 4 firewall policies and/or extended access control lists.","title":"Overview"},{"location":"index.html#screenshots","text":"More screenshots can be found in the Using the App page in the documentation. Here's a quick overview of some of the plugin's added functionality:","title":"Screenshots"},{"location":"index.html#try-it-out","text":"This App is installed in the Nautobot Community Sandbox found over at demo.nautobot.com ! For a full list of all the available always-on sandbox environments, head over to the main page on networktocode.com .","title":"Try it out!"},{"location":"index.html#documentation","text":"Full documentation for this App can be found over on the Nautobot Docs website: User Guide - Overview, Using the App, Getting Started. Administrator Guide - How to Install, Configure, Upgrade, or Uninstall the App. Developer Guide - Extending the App, Code Reference, Contribution Guide. Release Notes / Changelog . Frequently Asked Questions .","title":"Documentation"},{"location":"index.html#contributing-to-the-documentation","text":"You can find all the Markdown source for the App documentation under the docs folder in this repository. For simple edits, a Markdown capable editor is sufficient: clone the repository and edit away. If you need to view the fully-generated documentation site, you can build it with MkDocs . A container hosting the documentation can be started using the invoke commands (details in the Development Environment Guide ) on http://localhost:8001 . Using this container, as your changes to the documentation are saved, they will be automatically rebuilt and any pages currently being viewed will be reloaded in your browser. Any PRs with fixes or improvements are very welcome!","title":"Contributing to the Documentation"},{"location":"index.html#questions","text":"For any questions or comments, please check the FAQ first. Feel free to also swing by the Network to Code Slack (channel #nautobot ), sign up here if you don't have an account.","title":"Questions"},{"location":"admin/compatibility_matrix.html","text":"Compatibility Matrix \u00b6 Nautobot Plugin Firewall Model Version Nautobot First Support Version Nautobot Last Support Version 1.0.X 1.2.0 1.5.99 1.1.X 1.4.0 1.5.99 1.2.X 1.4.0 1.5.99 2.0.X 2.0.0 2.9999","title":"Compatibility Matrix"},{"location":"admin/compatibility_matrix.html#compatibility-matrix","text":"Nautobot Plugin Firewall Model Version Nautobot First Support Version Nautobot Last Support Version 1.0.X 1.2.0 1.5.99 1.1.X 1.4.0 1.5.99 1.2.X 1.4.0 1.5.99 2.0.X 2.0.0 2.9999","title":"Compatibility Matrix"},{"location":"admin/install.html","text":"Installing the App in Nautobot \u00b6 Here you will find detailed instructions on how to install and configure the App within your Nautobot environment. Prerequisites \u00b6 The plugin is compatible with Nautobot 2.0.0 and higher. Databases supported: PostgreSQL, MySQL Note Please check the dedicated page for a full compatibility matrix and the deprecation policy. Install Guide \u00b6 Note Plugins can be installed manually or using Python's pip . See the nautobot documentation for more details. The pip package name for this plugin is nautobot-firewall-models . The plugin is available as a Python package via PyPI and can be installed with pip : pip install nautobot-firewall-models To ensure Nautobot Plugin Firewall Model is automatically re-installed during future upgrades, create a file named local_requirements.txt (if not already existing) in the Nautobot root directory (alongside requirements.txt ) and list the nautobot-firewall-models package: echo nautobot-firewall-models >> local_requirements.txt Once installed, the plugin needs to be enabled in your Nautobot configuration. The following block of code below shows the additional configuration required to be added to your nautobot_config.py file: Append \"nautobot_firewall_models\" to the PLUGINS list. Append the \"nautobot_firewall_models\" dictionary to the PLUGINS_CONFIG dictionary and override any defaults. # In your nautobot_config.py PLUGINS = [ \"nautobot_firewall_models\" ] # PLUGINS_CONFIG = { # \"nautobot_firewall_models\": { # ADD YOUR SETTINGS HERE # } # } Once the Nautobot configuration is updated, run the Post Upgrade command ( nautobot-server post_upgrade ) to run migrations and clear any cache: nautobot-server post_upgrade Then restart (if necessary) the Nautobot services which may include: Nautobot Nautobot Workers Nautobot Scheduler sudo systemctl restart nautobot nautobot-worker nautobot-scheduler App Configuration \u00b6 Models provided by this plugin have a status attribute and the default status is set to use active . This corresponds to the pre-built Nautobot Active Status object. Use the default_status plugin configuration setting to change the default value for the status attribute. PLUGINS_CONFIG = { \"nautobot_firewall_models\" : { \"default_status\" : \"active\" \"allowed_status\" : [ \"active\" ], # default shown, `[]` allows all \"capirca_remark_pass\" : True , \"capirca_os_map\" : { \"cisco_ios\" : \"cisco\" , \"arista_eos\" : \"arista\" , }, # \"custom_capirca\": \"my.custom.func\", # provides ability to overide capirca logic } } The value assigned to default_status must match the slug of an existing Nautobot Status object. That Status object must have all of the Firewall Models listed in the Content Type associations. See examples below on selecting the Content Type(s) when creating/editing a Status object and the pre-built Active Status with firewall content types added.","title":"Install and Configure"},{"location":"admin/install.html#installing-the-app-in-nautobot","text":"Here you will find detailed instructions on how to install and configure the App within your Nautobot environment.","title":"Installing the App in Nautobot"},{"location":"admin/install.html#prerequisites","text":"The plugin is compatible with Nautobot 2.0.0 and higher. Databases supported: PostgreSQL, MySQL Note Please check the dedicated page for a full compatibility matrix and the deprecation policy.","title":"Prerequisites"},{"location":"admin/install.html#install-guide","text":"Note Plugins can be installed manually or using Python's pip . See the nautobot documentation for more details. The pip package name for this plugin is nautobot-firewall-models . The plugin is available as a Python package via PyPI and can be installed with pip : pip install nautobot-firewall-models To ensure Nautobot Plugin Firewall Model is automatically re-installed during future upgrades, create a file named local_requirements.txt (if not already existing) in the Nautobot root directory (alongside requirements.txt ) and list the nautobot-firewall-models package: echo nautobot-firewall-models >> local_requirements.txt Once installed, the plugin needs to be enabled in your Nautobot configuration. The following block of code below shows the additional configuration required to be added to your nautobot_config.py file: Append \"nautobot_firewall_models\" to the PLUGINS list. Append the \"nautobot_firewall_models\" dictionary to the PLUGINS_CONFIG dictionary and override any defaults. # In your nautobot_config.py PLUGINS = [ \"nautobot_firewall_models\" ] # PLUGINS_CONFIG = { # \"nautobot_firewall_models\": { # ADD YOUR SETTINGS HERE # } # } Once the Nautobot configuration is updated, run the Post Upgrade command ( nautobot-server post_upgrade ) to run migrations and clear any cache: nautobot-server post_upgrade Then restart (if necessary) the Nautobot services which may include: Nautobot Nautobot Workers Nautobot Scheduler sudo systemctl restart nautobot nautobot-worker nautobot-scheduler","title":"Install Guide"},{"location":"admin/install.html#app-configuration","text":"Models provided by this plugin have a status attribute and the default status is set to use active . This corresponds to the pre-built Nautobot Active Status object. Use the default_status plugin configuration setting to change the default value for the status attribute. PLUGINS_CONFIG = { \"nautobot_firewall_models\" : { \"default_status\" : \"active\" \"allowed_status\" : [ \"active\" ], # default shown, `[]` allows all \"capirca_remark_pass\" : True , \"capirca_os_map\" : { \"cisco_ios\" : \"cisco\" , \"arista_eos\" : \"arista\" , }, # \"custom_capirca\": \"my.custom.func\", # provides ability to overide capirca logic } } The value assigned to default_status must match the slug of an existing Nautobot Status object. That Status object must have all of the Firewall Models listed in the Content Type associations. See examples below on selecting the Content Type(s) when creating/editing a Status object and the pre-built Active Status with firewall content types added.","title":"App Configuration"},{"location":"admin/uninstall.html","text":"Uninstall the App from Nautobot \u00b6 Here you will find any steps necessary to cleanly remove the App from your Nautobot environment. Database Cleanup \u00b6 Prior to removing the plugin from the nautobot_config.py , run the following command to roll back any migration specific to this plugin. nautobot-server migrate nautobot_firewall_models zero Uninstall Guide \u00b6 Remove the configuration you added in nautobot_config.py from PLUGINS & PLUGINS_CONFIG .","title":"Uninstall"},{"location":"admin/uninstall.html#uninstall-the-app-from-nautobot","text":"Here you will find any steps necessary to cleanly remove the App from your Nautobot environment.","title":"Uninstall the App from Nautobot"},{"location":"admin/uninstall.html#database-cleanup","text":"Prior to removing the plugin from the nautobot_config.py , run the following command to roll back any migration specific to this plugin. nautobot-server migrate nautobot_firewall_models zero","title":"Database Cleanup"},{"location":"admin/uninstall.html#uninstall-guide","text":"Remove the configuration you added in nautobot_config.py from PLUGINS & PLUGINS_CONFIG .","title":"Uninstall Guide"},{"location":"admin/upgrade.html","text":"Upgrading the App \u00b6 Here you will find any steps necessary to upgrade the App in your Nautobot environment. Upgrade Nautobot 1.X to Nautobot 2.X \u00b6 As part of the upgrade for Nautobot 2.0 it is recommended to perform a stepped upgrade by first upgrading Nautobot the lastest stable release within these constraints >=1.6.2,<2.0.0 . After performing the initial upgrade of Nautobot you will need to run nautobot-server populate_platform_network_driver --no-use-napalm-driver-field . This will populate the network_driver attribute on Platform objects from the slug field. Upgrade Guide \u00b6 When a new release comes out it may be necessary to run a migration of the database to account for any changes in the data models used by this plugin. Execute the command nautobot-server post-upgrade within the runtime environment of your Nautobot installation after updating the nautobot-firewall-models package via pip .","title":"Upgrade"},{"location":"admin/upgrade.html#upgrading-the-app","text":"Here you will find any steps necessary to upgrade the App in your Nautobot environment.","title":"Upgrading the App"},{"location":"admin/upgrade.html#upgrade-nautobot-1x-to-nautobot-2x","text":"As part of the upgrade for Nautobot 2.0 it is recommended to perform a stepped upgrade by first upgrading Nautobot the lastest stable release within these constraints >=1.6.2,<2.0.0 . After performing the initial upgrade of Nautobot you will need to run nautobot-server populate_platform_network_driver --no-use-napalm-driver-field . This will populate the network_driver attribute on Platform objects from the slug field.","title":"Upgrade Nautobot 1.X to Nautobot 2.X"},{"location":"admin/upgrade.html#upgrade-guide","text":"When a new release comes out it may be necessary to run a migration of the database to account for any changes in the data models used by this plugin. Execute the command nautobot-server post-upgrade within the runtime environment of your Nautobot installation after updating the nautobot-firewall-models package via pip .","title":"Upgrade Guide"},{"location":"admin/release_notes/index.html","text":"Release Notes \u00b6 All the published release notes can be found via the navigation menu. All patch releases are included in the same minor release (e.g. v1.2 ) document.","title":"Release Notes"},{"location":"admin/release_notes/index.html#release-notes","text":"All the published release notes can be found via the navigation menu. All patch releases are included in the same minor release (e.g. v1.2 ) document.","title":"Release Notes"},{"location":"admin/release_notes/version_0.1.html","text":"v0.1 Release Notes \u00b6 This document describes all new features and changes in the release 1.0 . The format is based on Keep a Changelog and this project adheres to Semantic Versioning . v0.1.0-beta.3 - 2022-07-19 \u00b6 Changed \u00b6 #68 Update Policy Rules Expanded to be more intuitive #69 Change to use arrow in UI elements Added \u00b6 #63 Capirca Integration v0.1.0-beta.2 - 2022-07-10 \u00b6 Changed \u00b6 Update Serializers to current standards Update development environment to current standards Update CI matrix for better runtime & coverage of versions Fixed \u00b6 Pydocstyle.ini being properly used Dockerfile to work with NAUTOBOT_VER from build args, previously poetry superceeded the build arg. Updates for status attributes to account for defaulting. Static URLs for images in README.md to fix broken link in PyPI page rendering. Added \u00b6 Ability to expand Policy detail API view with query param deep=True . Added to_json method on Policy and PolicyRule models. Added rule_details as a helper for working with a PolicyRule Added policy_details as a helper for working with a Policy Initial scaffolding for MySQL development environment support. v0.1.0-beta.1 - 2022-07-08 \u00b6 Fixed \u00b6 Issues with docs rendering in PyPI & ReadTheDocs v0.1.0-beta.2 - 2022-07-08 \u00b6 Announcements \u00b6 Initial Release","title":"v0.1"},{"location":"admin/release_notes/version_0.1.html#v01-release-notes","text":"This document describes all new features and changes in the release 1.0 . The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"v0.1 Release Notes"},{"location":"admin/release_notes/version_0.1.html#v010-beta3-2022-07-19","text":"","title":"v0.1.0-beta.3 - 2022-07-19"},{"location":"admin/release_notes/version_0.1.html#changed","text":"#68 Update Policy Rules Expanded to be more intuitive #69 Change to use arrow in UI elements","title":"Changed"},{"location":"admin/release_notes/version_0.1.html#added","text":"#63 Capirca Integration","title":"Added"},{"location":"admin/release_notes/version_0.1.html#v010-beta2-2022-07-10","text":"","title":"v0.1.0-beta.2 - 2022-07-10"},{"location":"admin/release_notes/version_0.1.html#changed_1","text":"Update Serializers to current standards Update development environment to current standards Update CI matrix for better runtime & coverage of versions","title":"Changed"},{"location":"admin/release_notes/version_0.1.html#fixed","text":"Pydocstyle.ini being properly used Dockerfile to work with NAUTOBOT_VER from build args, previously poetry superceeded the build arg. Updates for status attributes to account for defaulting. Static URLs for images in README.md to fix broken link in PyPI page rendering.","title":"Fixed"},{"location":"admin/release_notes/version_0.1.html#added_1","text":"Ability to expand Policy detail API view with query param deep=True . Added to_json method on Policy and PolicyRule models. Added rule_details as a helper for working with a PolicyRule Added policy_details as a helper for working with a Policy Initial scaffolding for MySQL development environment support.","title":"Added"},{"location":"admin/release_notes/version_0.1.html#v010-beta1-2022-07-08","text":"","title":"v0.1.0-beta.1 - 2022-07-08"},{"location":"admin/release_notes/version_0.1.html#fixed_1","text":"Issues with docs rendering in PyPI & ReadTheDocs","title":"Fixed"},{"location":"admin/release_notes/version_0.1.html#v010-beta2-2022-07-08","text":"","title":"v0.1.0-beta.2 - 2022-07-08"},{"location":"admin/release_notes/version_0.1.html#announcements","text":"Initial Release","title":"Announcements"},{"location":"admin/release_notes/version_1.0.html","text":"v1.0 Release Notes \u00b6 This document describes all new features and changes in the release 1.0 . The format is based on Keep a Changelog and this project adheres to Semantic Versioning . v1.0.2 - 2022-09-22 \u00b6 Fixed \u00b6 #87 NestedWritabeSerializer fix for schema generation on VarBinaryField #88 Docs fix #89 Ressolve ordering when viewing PolicyRules via a Policy view. v1.0.1 - 2022-09-18 \u00b6 Fixed \u00b6 #84 Missing Index from PolicyRule form. #84 Missing Source/Destination descriptors on Service/Service Group for PolicyRule form. v1.0.0 - 2022-08-27 \u00b6 Removed \u00b6 #80 Support for Nautobot < v1.4.0 Changed \u00b6 #80 All plural attrs on PolicyRule are now represented in plural form ( source_user is now source_users etc). #80 Nav menu name from Firewall to Security . #80 Styling on PolicyRule detail tables Added \u00b6 #80 Support for Notes #80 Source Service suport #80 Security panel on homepage #80 PolicyRule detail tables convert empty value to ANY","title":"v1.0"},{"location":"admin/release_notes/version_1.0.html#v10-release-notes","text":"This document describes all new features and changes in the release 1.0 . The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"v1.0 Release Notes"},{"location":"admin/release_notes/version_1.0.html#v102-2022-09-22","text":"","title":"v1.0.2 - 2022-09-22"},{"location":"admin/release_notes/version_1.0.html#fixed","text":"#87 NestedWritabeSerializer fix for schema generation on VarBinaryField #88 Docs fix #89 Ressolve ordering when viewing PolicyRules via a Policy view.","title":"Fixed"},{"location":"admin/release_notes/version_1.0.html#v101-2022-09-18","text":"","title":"v1.0.1 - 2022-09-18"},{"location":"admin/release_notes/version_1.0.html#fixed_1","text":"#84 Missing Index from PolicyRule form. #84 Missing Source/Destination descriptors on Service/Service Group for PolicyRule form.","title":"Fixed"},{"location":"admin/release_notes/version_1.0.html#v100-2022-08-27","text":"","title":"v1.0.0 - 2022-08-27"},{"location":"admin/release_notes/version_1.0.html#removed","text":"#80 Support for Nautobot < v1.4.0","title":"Removed"},{"location":"admin/release_notes/version_1.0.html#changed","text":"#80 All plural attrs on PolicyRule are now represented in plural form ( source_user is now source_users etc). #80 Nav menu name from Firewall to Security . #80 Styling on PolicyRule detail tables","title":"Changed"},{"location":"admin/release_notes/version_1.0.html#added","text":"#80 Support for Notes #80 Source Service suport #80 Security panel on homepage #80 PolicyRule detail tables convert empty value to ANY","title":"Added"},{"location":"admin/release_notes/version_1.1.html","text":"v1.1 Release Notes \u00b6 This document describes all new features and changes in the release 1.0 . The format is based on Keep a Changelog and this project adheres to Semantic Versioning . v1.1.3 - 2022-11-16 \u00b6 Fixed \u00b6 #114 Resolved issues with status filters & deep=True method on Policy detail API view v1.1.2 - 2022-11-12 \u00b6 Added \u00b6 #108 Enable cloning for PolicyRule and NATPolicyRule models #110 Add support for port lists on ServiceObject Fixed \u00b6 #109 Resolved incorrect links in mkdocs.yml v1.1.1 - 2022-10-26 \u00b6 Fixed \u00b6 #99 Remove creation of extraneous status content types during migrations #100 Force Poetry to package the static documentation Added \u00b6 #103 Add request_id and description as available fields for the rule tables Changed \u00b6 #104 Enable brief endpoint API testing for supported models v1.1.0 - 2022-10-04 \u00b6 Fixed \u00b6 #93 Updated Capirca Documentation syntax #95 Updated CI to cancel previous run on new commit to same branch Added \u00b6 #92 Initial Addition of NAT models","title":"v1.1"},{"location":"admin/release_notes/version_1.1.html#v11-release-notes","text":"This document describes all new features and changes in the release 1.0 . The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"v1.1 Release Notes"},{"location":"admin/release_notes/version_1.1.html#v113-2022-11-16","text":"","title":"v1.1.3 - 2022-11-16"},{"location":"admin/release_notes/version_1.1.html#fixed","text":"#114 Resolved issues with status filters & deep=True method on Policy detail API view","title":"Fixed"},{"location":"admin/release_notes/version_1.1.html#v112-2022-11-12","text":"","title":"v1.1.2 - 2022-11-12"},{"location":"admin/release_notes/version_1.1.html#added","text":"#108 Enable cloning for PolicyRule and NATPolicyRule models #110 Add support for port lists on ServiceObject","title":"Added"},{"location":"admin/release_notes/version_1.1.html#fixed_1","text":"#109 Resolved incorrect links in mkdocs.yml","title":"Fixed"},{"location":"admin/release_notes/version_1.1.html#v111-2022-10-26","text":"","title":"v1.1.1 - 2022-10-26"},{"location":"admin/release_notes/version_1.1.html#fixed_2","text":"#99 Remove creation of extraneous status content types during migrations #100 Force Poetry to package the static documentation","title":"Fixed"},{"location":"admin/release_notes/version_1.1.html#added_1","text":"#103 Add request_id and description as available fields for the rule tables","title":"Added"},{"location":"admin/release_notes/version_1.1.html#changed","text":"#104 Enable brief endpoint API testing for supported models","title":"Changed"},{"location":"admin/release_notes/version_1.1.html#v110-2022-10-04","text":"","title":"v1.1.0 - 2022-10-04"},{"location":"admin/release_notes/version_1.1.html#fixed_3","text":"#93 Updated Capirca Documentation syntax #95 Updated CI to cancel previous run on new commit to same branch","title":"Fixed"},{"location":"admin/release_notes/version_1.1.html#added_2","text":"#92 Initial Addition of NAT models","title":"Added"},{"location":"admin/release_notes/version_1.2.html","text":"v1.2 Release Notes \u00b6 This document describes all new features and changes in the release 1.0 . The format is based on Keep a Changelog and this project adheres to Semantic Versioning . v1.2.1 - 2023-05-03 \u00b6 Fixed \u00b6 #135 Form fields incorrectly marked as required #136 Invalid serializers for Zone and PolicyRule APIs #145 FilterSets missing name field for PolicyRule and NATPolicyRule Changed \u00b6 #140 Doc updates #123 Doc updates Added \u00b6 #143 Allow for ORM reversibility from CapircaPolicy v1.2.0 - 2023-02-08 \u00b6 Fixed \u00b6 #120 Resolved inconsistent forms. Changed \u00b6 #108 Changed Application & Application Group migrations to allow null values. Added \u00b6 #108 Application & ApplicationGroup support v1.2.0-alpha.2 - 2022-12-07 \u00b6 Fixed \u00b6 #120 Resolved inconsistent forms. v1.2.0-alpha.1 - 2022-11-25 \u00b6 Changed \u00b6 #108 Changed Application & Application Group migrations to allow null values. v1.2.0-alpha.0 - 2022-11-22 \u00b6 Added \u00b6 #108 Application & ApplicationGroup support Fixed \u00b6 #117 Resolved main tab not loading on initial load of Policy & PolicyRule detail page Changed \u00b6 #117 Reorganized models/ folder to improve developer experience","title":"v1.2"},{"location":"admin/release_notes/version_1.2.html#v12-release-notes","text":"This document describes all new features and changes in the release 1.0 . The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"v1.2 Release Notes"},{"location":"admin/release_notes/version_1.2.html#v121-2023-05-03","text":"","title":"v1.2.1 - 2023-05-03"},{"location":"admin/release_notes/version_1.2.html#fixed","text":"#135 Form fields incorrectly marked as required #136 Invalid serializers for Zone and PolicyRule APIs #145 FilterSets missing name field for PolicyRule and NATPolicyRule","title":"Fixed"},{"location":"admin/release_notes/version_1.2.html#changed","text":"#140 Doc updates #123 Doc updates","title":"Changed"},{"location":"admin/release_notes/version_1.2.html#added","text":"#143 Allow for ORM reversibility from CapircaPolicy","title":"Added"},{"location":"admin/release_notes/version_1.2.html#v120-2023-02-08","text":"","title":"v1.2.0 - 2023-02-08"},{"location":"admin/release_notes/version_1.2.html#fixed_1","text":"#120 Resolved inconsistent forms.","title":"Fixed"},{"location":"admin/release_notes/version_1.2.html#changed_1","text":"#108 Changed Application & Application Group migrations to allow null values.","title":"Changed"},{"location":"admin/release_notes/version_1.2.html#added_1","text":"#108 Application & ApplicationGroup support","title":"Added"},{"location":"admin/release_notes/version_1.2.html#v120-alpha2-2022-12-07","text":"","title":"v1.2.0-alpha.2 - 2022-12-07"},{"location":"admin/release_notes/version_1.2.html#fixed_2","text":"#120 Resolved inconsistent forms.","title":"Fixed"},{"location":"admin/release_notes/version_1.2.html#v120-alpha1-2022-11-25","text":"","title":"v1.2.0-alpha.1 - 2022-11-25"},{"location":"admin/release_notes/version_1.2.html#changed_2","text":"#108 Changed Application & Application Group migrations to allow null values.","title":"Changed"},{"location":"admin/release_notes/version_1.2.html#v120-alpha0-2022-11-22","text":"","title":"v1.2.0-alpha.0 - 2022-11-22"},{"location":"admin/release_notes/version_1.2.html#added_2","text":"#108 Application & ApplicationGroup support","title":"Added"},{"location":"admin/release_notes/version_1.2.html#fixed_3","text":"#117 Resolved main tab not loading on initial load of Policy & PolicyRule detail page","title":"Fixed"},{"location":"admin/release_notes/version_1.2.html#changed_3","text":"#117 Reorganized models/ folder to improve developer experience","title":"Changed"},{"location":"admin/release_notes/version_2.0.html","text":"v2.0 Release Notes \u00b6 This document describes all new features and changes in the release 2.0 . The format is based on Keep a Changelog and this project adheres to Semantic Versioning . v2.0.1 - 2023-10-04 \u00b6 Fixed \u00b6 #173 Resolve issues with v2 migrations v2.0.0 - 2023-09-29 \u00b6 Changed \u00b6 #167 Nautobot 2.0.0 as minimum dependency #167 Substantial updates to API #167 on_delete=PROTECT was moved from the model custom through field to a DB signal Added \u00b6 #167 Added support for Python 3.11 Removed \u00b6 #167 Dropped support for Python 3.7","title":"v2.0"},{"location":"admin/release_notes/version_2.0.html#v20-release-notes","text":"This document describes all new features and changes in the release 2.0 . The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"v2.0 Release Notes"},{"location":"admin/release_notes/version_2.0.html#v201-2023-10-04","text":"","title":"v2.0.1 - 2023-10-04"},{"location":"admin/release_notes/version_2.0.html#fixed","text":"#173 Resolve issues with v2 migrations","title":"Fixed"},{"location":"admin/release_notes/version_2.0.html#v200-2023-09-29","text":"","title":"v2.0.0 - 2023-09-29"},{"location":"admin/release_notes/version_2.0.html#changed","text":"#167 Nautobot 2.0.0 as minimum dependency #167 Substantial updates to API #167 on_delete=PROTECT was moved from the model custom through field to a DB signal","title":"Changed"},{"location":"admin/release_notes/version_2.0.html#added","text":"#167 Added support for Python 3.11","title":"Added"},{"location":"admin/release_notes/version_2.0.html#removed","text":"#167 Dropped support for Python 3.7","title":"Removed"},{"location":"dev/contributing.html","text":"Contributing to the App \u00b6 The project is packaged with a light development environment based on docker-compose to help with the local development of the project and to run tests. The project is following Network to Code software development guidelines and is leveraging the following: Python linting and formatting: black , pylint , bandit , flake8 , and pydocstyle . YAML linting is done with yamllint . Django unit test to ensure the plugin is working properly. Documentation is built using mkdocs . The Docker based development environment automatically starts a container hosting a live version of the documentation website on http://localhost:8001 that auto-refreshes when you make any changes to your local files.","title":"Contributing to the App"},{"location":"dev/contributing.html#contributing-to-the-app","text":"The project is packaged with a light development environment based on docker-compose to help with the local development of the project and to run tests. The project is following Network to Code software development guidelines and is leveraging the following: Python linting and formatting: black , pylint , bandit , flake8 , and pydocstyle . YAML linting is done with yamllint . Django unit test to ensure the plugin is working properly. Documentation is built using mkdocs . The Docker based development environment automatically starts a container hosting a live version of the documentation website on http://localhost:8001 that auto-refreshes when you make any changes to your local files.","title":"Contributing to the App"},{"location":"dev/dev_environment.html","text":"Building Your Development Environment \u00b6 Quickstart Guide \u00b6 The development environment can be used in two ways: (Recommended) All services, including Nautobot, are spun up using Docker containers and a volume mount so you can develop locally. With a local Poetry environment if you wish to develop outside of Docker, with the caveat of using external services provided by Docker for the database (PostgreSQL by default, MySQL optionally) and Redis services. This is a quick reference guide if you're already familiar with the development environment provided, which you can read more about later in this document. Invoke \u00b6 The Invoke library is used to provide some helper commands based on the environment. There are a few configuration parameters which can be passed to Invoke to override the default configuration: nautobot_ver : the version of Nautobot to use as a base for any built docker containers (default: latest) project_name : the default docker compose project name (default: nautobot_firewall_models ) python_ver : the version of Python to use as a base for any built docker containers (default: 3.8) local : a boolean flag indicating if invoke tasks should be run on the host or inside the docker containers (default: False, commands will be run in docker containers) compose_dir : the full path to a directory containing the project compose files compose_files : a list of compose files applied in order (see Multiple Compose files for more information) Using Invoke these configuration options can be overridden using several methods . Perhaps the simplest is setting an environment variable INVOKE_NAUTOBOT_FIREWALL_MODELS_VARIABLE_NAME where VARIABLE_NAME is the variable you are trying to override. The only exception is compose_files , because it is a list it must be overridden in a YAML file. There is an example invoke.yml ( invoke.example.yml ) in this directory which can be used as a starting point. Docker Development Environment \u00b6 Tip This is the recommended option for development. This project is managed by Python Poetry and has a few requirements to setup your development environment: Install Poetry, see the Poetry Documentation for your operating system. Install Docker, see the Docker documentation for your operating system. Once you have Poetry and Docker installed you can run the following commands (in the root of the repository) to install all other development dependencies in an isolated Python virtual environment: poetry shell poetry install cp development/creds.example.env development/creds.env invoke build invoke start The Nautobot server can now be accessed at http://localhost:8080 and the live documentation at http://localhost:8001 . To either stop or destroy the development environment use the following options. invoke stop - Stop the containers, but keep all underlying systems intact invoke destroy - Stop and remove all containers, volumes, etc. (This results in data loss due to the volume being deleted) Local Poetry Development Environment \u00b6 Create an invoke.yml file with the following contents at the root of the repo and edit as necessary --- nautobot_firewall_models : local : true compose_files : - \"docker-compose.requirements.yml\" Run the following commands: poetry shell poetry install --extras nautobot export $( cat development/dev.env | xargs ) export $( cat development/creds.env | xargs ) invoke start && sleep 5 nautobot-server migrate Note If you want to develop on the latest develop branch of Nautobot, run the following command: poetry add --optional git+https://github.com/nautobot/nautobot@develop . After the @ symbol must match either a branch or a tag. You can now run nautobot-server commands as you would from the Nautobot documentation for example to start the development server: nautobot-server runserver 0 .0.0.0:8080 --insecure Nautobot server can now be accessed at http://localhost:8080 . It is typically recommended to launch the Nautobot runserver command in a separate shell so you can keep developing and manage the webserver separately. Updating the Documentation \u00b6 Documentation dependencies are pinned to exact versions to ensure consistent results. For the development environment, they are defined in the pyproject.toml file. If you need to update any of the documentation dependencies to a newer version, make sure you copy the exact same versions pinned in pyproject.toml to the docs/requirements.txt file as well. The latter is used in the automated build pipeline on ReadTheDocs to build the live version of the documentation. CLI Helper Commands \u00b6 The project features a CLI helper based on Invoke to help setup the development environment. The commands are listed below in 3 categories: dev environment utility testing Each command can be executed with invoke <command> . All commands support the arguments --nautobot-ver and --python-ver if you want to manually define the version of Python and Nautobot to use. Each command also has its own help invoke <command> --help Note To run the mysql (mariadb) development environment, set the environment variable as such export NAUTOBOT_USE_MYSQL=1 . Local Development Environment \u00b6 build Build all docker images. debug Start Nautobot and its dependencies in debug mode. destroy Destroy all containers and volumes. restart Restart Nautobot and its dependencies in detached mode. start Start Nautobot and its dependencies in detached mode. stop Stop Nautobot and its dependencies. Utility \u00b6 cli Launch a bash shell inside the running Nautobot container. create-user Create a new user in django (default: admin), will prompt for password. makemigrations Run Make Migration in Django. nbshell Launch a nbshell session. Testing \u00b6 bandit Run bandit to validate basic static code security analysis. black Run black to check that Python files adhere to its style standards. flake8 Run flake8 to check that Python files adhere to its style standards. pydocstyle Run pydocstyle to validate docstring formatting adheres to NTC defined standards. pylint Run pylint code analysis. tests Run all tests for this plugin. unittest Run Django unit tests for the plugin. Project Overview \u00b6 This project provides the ability to develop and manage the Nautobot server locally (with supporting services being Dockerized ) or by using only Docker containers to manage Nautobot. The main difference between the two environments is the ability to debug and use pdb when developing locally. Debugging with pdb within the Docker container is more complicated, but can still be accomplished by either entering into the container (via docker exec ) or attaching your IDE to the container and running the Nautobot service manually within the container. The upside to having the Nautobot service handled by Docker rather than locally is that you do not have to manage the Nautobot server. The Docker logs provide the majority of the information you will need to help troubleshoot, while getting started quickly and not requiring you to perform several manual steps and remembering to have the Nautobot server running in a separate terminal while you develop. Note The local environment still uses Docker containers for the supporting services (Postgres, Redis, and RQ Worker), but the Nautobot server is handled locally by you, the developer. Follow the directions below for the specific development environment that you choose. Poetry \u00b6 Poetry is used in lieu of the \"virtualenv\" commands and is leveraged in both environments. The virtual environment will provide all of the Python packages required to manage the development environment such as Invoke . See the Local Development Environment section to see how to install Nautobot if you're going to be developing locally (i.e. not using the Docker container). The pyproject.toml file outlines all of the relevant dependencies for the project: tool.poetry.dependencies - the main list of dependencies. tool.poetry.dev-dependencies - development dependencies, to facilitate linting, testing, and documentation building. The poetry shell command is used to create and enable a virtual environment managed by Poetry, so all commands ran going forward are executed within the virtual environment. This is similar to running the source venv/bin/activate command with virtualenvs. To install project dependencies in the virtual environment, you should run poetry install - this will install both project and development dependencies. For more details about Poetry and its commands please check out its online documentation . Full Docker Development Environment \u00b6 This project is set up with a number of Invoke tasks consumed as simple CLI commands to get developing fast. You'll use a few invoke commands to get your environment up and running. Copy the credentials file for Nautobot \u00b6 First, you need to create the development/creds.env file - it stores a bunch of private information such as passwords and tokens for your local Nautobot install. You can make a copy of the development/creds.example.env and modify it to suit you. cp development/creds.example.env development/creds.env Invoke - Building the Docker Image \u00b6 The first thing you need to do is build the necessary Docker image for Nautobot that installs the specific nautobot_ver . The image is used for Nautobot and the Celery worker service used by Docker Compose. \u279c invoke build ... <omitted for brevity> #14 exporting to image #14 sha256:e8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00 #14 exporting layers #14 exporting layers 1.2s done #14 writing image sha256:2d524bc1665327faa0d34001b0a9d2ccf450612bf8feeb969312e96a2d3e3503 done #14 naming to docker.io/nautobot-firewall-models/nautobot:latest-py3.7 done Invoke - Starting the Development Environment \u00b6 Next, you need to start up your Docker containers. \u279c invoke start Starting Nautobot in detached mode... Running docker-compose command \"up --detach\" Creating network \"nautobot_firewall_models_default\" with the default driver Creating volume \"nautobot_firewall_models_postgres_data\" with default driver Creating nautobot_firewall_models_redis_1 ... Creating nautobot_firewall_models_docs_1 ... Creating nautobot_firewall_models_postgres_1 ... Creating nautobot_firewall_models_postgres_1 ... done Creating nautobot_firewall_models_redis_1 ... done Creating nautobot_firewall_models_nautobot_1 ... Creating nautobot_firewall_models_docs_1 ... done Creating nautobot_firewall_models_nautobot_1 ... done Creating nautobot_firewall_models_worker_1 ... Creating nautobot_firewall_models_worker_1 ... done Docker Compose is now in the Docker CLI, try ` docker compose up ` This will start all of the Docker containers used for hosting Nautobot. You should see the following containers running after invoke start is finished. \u279c docker ps ****CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES ee90fbfabd77 nautobot-firewall-models/nautobot:latest-py3.7 \"nautobot-server rqw\u2026\" 16 seconds ago Up 13 seconds nautobot_firewall_models_worker_1 b8adb781d013 nautobot-firewall-models/nautobot:latest-py3.7 \"/docker-entrypoint.\u2026\" 20 seconds ago Up 15 seconds 0 .0.0.0:8080->8080/tcp, :::8080->8080/tcp nautobot_firewall_models_nautobot_1 d64ebd60675d nautobot-firewall-models/nautobot:latest-py3.7 \"mkdocs serve -v -a \u2026\" 25 seconds ago Up 18 seconds 0 .0.0.0:8001->8080/tcp, :::8001->8080/tcp nautobot_firewall_models_docs_1 e72d63129b36 postgres:13-alpine \"docker-entrypoint.s\u2026\" 25 seconds ago Up 19 seconds 0 .0.0.0:5432->5432/tcp, :::5432->5432/tcp nautobot_firewall_models_postgres_1 96c6ff66997c redis:6-alpine \"docker-entrypoint.s\u2026\" 25 seconds ago Up 21 seconds 0 .0.0.0:6379->6379/tcp, :::6379->6379/tcp nautobot_firewall_models_redis_1 Once the containers are fully up, you should be able to open up a web browser, and view: The Nautobot homepage at http://localhost:8080 A live version of the documentation at http://localhost:8001 Note Sometimes the containers take a minute to fully spin up. If the page doesn't load right away, wait a minute and try again. Invoke - Creating a Superuser \u00b6 The Nautobot development image will automatically provision a super user when specifying the following variables within creds.env which is the default when copying creds.example.env to creds.env . NAUTOBOT_CREATE_SUPERUSER=true NAUTOBOT_SUPERUSER_API_TOKEN=0123456789abcdef0123456789abcdef01234567 NAUTOBOT_SUPERUSER_PASSWORD=admin Note The default username is admin , but can be overridden by specifying NAUTOBOT_SUPERUSER_USERNAME . If you need to create additional superusers, run the follow commands. \u279c invoke createsuperuser Running docker-compose command \"ps --services --filter status=running\" Running docker-compose command \"exec nautobot nautobot-server createsuperuser --username admin\" Error: That username is already taken. Username: ntc Email address: ntc@networktocode.com Password: Password ( again ) : Superuser created successfully. Invoke - Stopping the Development Environment \u00b6 The last command to know for now is invoke stop . \u279c invoke stop Stopping Nautobot... Running docker-compose command \"down\" Stopping nautobot_firewall_models_worker_1 ... Stopping nautobot_firewall_models_nautobot_1 ... Stopping nautobot_firewall_models_docs_1 ... Stopping nautobot_firewall_models_redis_1 ... Stopping nautobot_firewall_models_postgres_1 ... Stopping nautobot_firewall_models_worker_1 ... done Stopping nautobot_firewall_models_nautobot_1 ... done Stopping nautobot_firewall_models_postgres_1 ... done Stopping nautobot_firewall_models_redis_1 ... done Stopping nautobot_firewall_models_docs_1 ... done Removing nautobot_firewall_models_worker_1 ... Removing nautobot_firewall_models_nautobot_1 ... Removing nautobot_firewall_models_docs_1 ... Removing nautobot_firewall_models_redis_1 ... Removing nautobot_firewall_models_postgres_1 ... Removing nautobot_firewall_models_postgres_1 ... done Removing nautobot_firewall_models_docs_1 ... done Removing nautobot_firewall_models_worker_1 ... done Removing nautobot_firewall_models_redis_1 ... done Removing nautobot_firewall_models_nautobot_1 ... done Removing network nautobot_firewall_models_default This will safely shut down all of your running Docker containers for this project. When you are ready to spin containers back up, it is as simple as running invoke start again as seen previously . Warning If you're wanting to reset the database and configuration settings, you can use the invoke destroy command, but you will lose any data stored in those containers , so make sure that is what you want to do. Real-Time Updates? How Cool! \u00b6 Your environment should now be fully setup, all necessary Docker containers are created and running, and you're logged into Nautobot in your web browser. Now what? Now you can start developing your plugin in the project folder! The magic here is the root directory is mounted inside your Docker containers when built and ran, so any changes made to the files in here are directly updated to the Nautobot plugin code running in Docker. This means that as you modify the code in your plugin folder, the changes will be instantly updated in Nautobot. Warning There are a few exceptions to this, as outlined in the section To Rebuild or Not To Rebuild . The back-end Django process is setup to automatically reload itself (it only takes a couple of seconds) every time a file is updated (saved). So for example, if you were to update one of the files like tables.py , then save it, the changes will be visible right away in the web browser! Note You may get connection refused while Django reloads, but it should be refreshed fairly quickly. Docker Logs \u00b6 When trying to debug an issue, one helpful thing you can look at are the logs within the Docker containers. \u279c docker logs <name of container> -f Note The -f tag will keep the logs open, and output them in realtime as they are generated. So for example, our plugin is named nautobot-firewall-models , the command would most likely be docker logs nautobot_firewall_models_nautobot_1 -f . You can find the name of all running containers via docker ps . If you want to view the logs specific to the worker container, simply use the name of that container instead. To Rebuild or Not to Rebuild \u00b6 Most of the time, you will not need to rebuild your images. Simply running invoke start and invoke stop is enough to keep your environment going. However there are a couple of instances when you will want to. Updating Environment Variables \u00b6 To add environment variables to your containers, thus allowing Nautobot to use them, you will update/add them in the development/development.env file. However, doing so is considered updating the underlying container shell, instead of Django (which auto restarts itself on changes). To get new environment variables to take effect, you will need stop any running images, rebuild the images, then restart them. This can easily be done with 3 commands: \u279c invoke stop \u279c invoke build \u279c invoke start Once completed, the new/updated environment variables should now be live. Installing Additional Python Packages \u00b6 If you want your plugin to leverage another available Nautobot plugin or another Python package, you can easily add them into your Docker environment. \u279c poetry shell \u279c poetry add <package_name> Once the dependencies are resolved, stop the existing containers, rebuild the Docker image, and then start all containers again. \u279c invoke stop \u279c invoke build \u279c invoke start Installing Additional Nautobot Plugins \u00b6 Let's say for example you want the new plugin you're creating to integrate into Slack. To do this, you will want to integrate into the existing Nautobot ChatOps Plugin. \u279c poetry shell \u279c poetry add nautobot-chatops Once you activate the virtual environment via Poetry, you then tell Poetry to install the new plugin. Before you continue, you'll need to update the file development/nautobot_config.py accordingly with the name of the new plugin under PLUGINS and any relevant settings as necessary for the plugin under PLUGINS_CONFIG . Since you're modifying the underlying OS (not just Django files), you need to rebuild the image. This is a similar process to updating environment variables, which was explained earlier. \u279c invoke stop \u279c invoke build \u279c invoke start Once the containers are up and running, you should now see the new plugin installed in your Nautobot instance. Note You can even launch an ngrok service locally on your laptop, pointing to port 8080 (such as for chatops development), and it will point traffic directly to your Docker images. Updating Python Version \u00b6 To update the Python version, you can update it within tasks.py . namespace = Collection ( \"nautobot_firewall_models\" ) namespace . configure ( { \"nautobot_firewall_models\" : { ... \"python_ver\" : \"3.7\" , ... } } ) Or set the INVOKE_NAUTOBOT_GOLDEN_CONFIG_PYTHON_VER variable. Updating Nautobot Version \u00b6 To update the Nautobot version, you can update it within tasks.py . namespace = Collection ( \"nautobot_firewall_models\" ) namespace . configure ( { \"nautobot_firewall_models\" : { ... \"nautobot_ver\" : \"1.0.2\" , ... } } ) Or set the INVOKE_NAUTOBOT_FIREWALL_MODELS_NAUTOBOT_VER variable. Other Miscellaneous Commands To Know \u00b6 Python Shell \u00b6 To drop into a Django shell for Nautobot (in the Docker container) run: \u279c invoke nbshell This is the same as running: \u279c invoke cli \u279c nautobot-server nbshell iPython Shell Plus \u00b6 Django also has a more advanced shell that uses iPython and that will automatically import all the models: \u279c invoke shell-plus This is the same as running: \u279c invoke cli \u279c nautobot-server shell_plus Tests \u00b6 To run tests against your code, you can run all of the tests that TravisCI runs against any new PR with: \u279c invoke tests To run an individual test, you can run any or all of the following: \u279c invoke unittest \u279c invoke bandit \u279c invoke black \u279c invoke flake8 \u279c invoke pydocstyle \u279c invoke pylint","title":"Development Environment"},{"location":"dev/dev_environment.html#building-your-development-environment","text":"","title":"Building Your Development Environment"},{"location":"dev/dev_environment.html#quickstart-guide","text":"The development environment can be used in two ways: (Recommended) All services, including Nautobot, are spun up using Docker containers and a volume mount so you can develop locally. With a local Poetry environment if you wish to develop outside of Docker, with the caveat of using external services provided by Docker for the database (PostgreSQL by default, MySQL optionally) and Redis services. This is a quick reference guide if you're already familiar with the development environment provided, which you can read more about later in this document.","title":"Quickstart Guide"},{"location":"dev/dev_environment.html#invoke","text":"The Invoke library is used to provide some helper commands based on the environment. There are a few configuration parameters which can be passed to Invoke to override the default configuration: nautobot_ver : the version of Nautobot to use as a base for any built docker containers (default: latest) project_name : the default docker compose project name (default: nautobot_firewall_models ) python_ver : the version of Python to use as a base for any built docker containers (default: 3.8) local : a boolean flag indicating if invoke tasks should be run on the host or inside the docker containers (default: False, commands will be run in docker containers) compose_dir : the full path to a directory containing the project compose files compose_files : a list of compose files applied in order (see Multiple Compose files for more information) Using Invoke these configuration options can be overridden using several methods . Perhaps the simplest is setting an environment variable INVOKE_NAUTOBOT_FIREWALL_MODELS_VARIABLE_NAME where VARIABLE_NAME is the variable you are trying to override. The only exception is compose_files , because it is a list it must be overridden in a YAML file. There is an example invoke.yml ( invoke.example.yml ) in this directory which can be used as a starting point.","title":"Invoke"},{"location":"dev/dev_environment.html#docker-development-environment","text":"Tip This is the recommended option for development. This project is managed by Python Poetry and has a few requirements to setup your development environment: Install Poetry, see the Poetry Documentation for your operating system. Install Docker, see the Docker documentation for your operating system. Once you have Poetry and Docker installed you can run the following commands (in the root of the repository) to install all other development dependencies in an isolated Python virtual environment: poetry shell poetry install cp development/creds.example.env development/creds.env invoke build invoke start The Nautobot server can now be accessed at http://localhost:8080 and the live documentation at http://localhost:8001 . To either stop or destroy the development environment use the following options. invoke stop - Stop the containers, but keep all underlying systems intact invoke destroy - Stop and remove all containers, volumes, etc. (This results in data loss due to the volume being deleted)","title":"Docker Development Environment"},{"location":"dev/dev_environment.html#local-poetry-development-environment","text":"Create an invoke.yml file with the following contents at the root of the repo and edit as necessary --- nautobot_firewall_models : local : true compose_files : - \"docker-compose.requirements.yml\" Run the following commands: poetry shell poetry install --extras nautobot export $( cat development/dev.env | xargs ) export $( cat development/creds.env | xargs ) invoke start && sleep 5 nautobot-server migrate Note If you want to develop on the latest develop branch of Nautobot, run the following command: poetry add --optional git+https://github.com/nautobot/nautobot@develop . After the @ symbol must match either a branch or a tag. You can now run nautobot-server commands as you would from the Nautobot documentation for example to start the development server: nautobot-server runserver 0 .0.0.0:8080 --insecure Nautobot server can now be accessed at http://localhost:8080 . It is typically recommended to launch the Nautobot runserver command in a separate shell so you can keep developing and manage the webserver separately.","title":"Local Poetry Development Environment"},{"location":"dev/dev_environment.html#updating-the-documentation","text":"Documentation dependencies are pinned to exact versions to ensure consistent results. For the development environment, they are defined in the pyproject.toml file. If you need to update any of the documentation dependencies to a newer version, make sure you copy the exact same versions pinned in pyproject.toml to the docs/requirements.txt file as well. The latter is used in the automated build pipeline on ReadTheDocs to build the live version of the documentation.","title":"Updating the Documentation"},{"location":"dev/dev_environment.html#cli-helper-commands","text":"The project features a CLI helper based on Invoke to help setup the development environment. The commands are listed below in 3 categories: dev environment utility testing Each command can be executed with invoke <command> . All commands support the arguments --nautobot-ver and --python-ver if you want to manually define the version of Python and Nautobot to use. Each command also has its own help invoke <command> --help Note To run the mysql (mariadb) development environment, set the environment variable as such export NAUTOBOT_USE_MYSQL=1 .","title":"CLI Helper Commands"},{"location":"dev/dev_environment.html#local-development-environment","text":"build Build all docker images. debug Start Nautobot and its dependencies in debug mode. destroy Destroy all containers and volumes. restart Restart Nautobot and its dependencies in detached mode. start Start Nautobot and its dependencies in detached mode. stop Stop Nautobot and its dependencies.","title":"Local Development Environment"},{"location":"dev/dev_environment.html#utility","text":"cli Launch a bash shell inside the running Nautobot container. create-user Create a new user in django (default: admin), will prompt for password. makemigrations Run Make Migration in Django. nbshell Launch a nbshell session.","title":"Utility"},{"location":"dev/dev_environment.html#testing","text":"bandit Run bandit to validate basic static code security analysis. black Run black to check that Python files adhere to its style standards. flake8 Run flake8 to check that Python files adhere to its style standards. pydocstyle Run pydocstyle to validate docstring formatting adheres to NTC defined standards. pylint Run pylint code analysis. tests Run all tests for this plugin. unittest Run Django unit tests for the plugin.","title":"Testing"},{"location":"dev/dev_environment.html#project-overview","text":"This project provides the ability to develop and manage the Nautobot server locally (with supporting services being Dockerized ) or by using only Docker containers to manage Nautobot. The main difference between the two environments is the ability to debug and use pdb when developing locally. Debugging with pdb within the Docker container is more complicated, but can still be accomplished by either entering into the container (via docker exec ) or attaching your IDE to the container and running the Nautobot service manually within the container. The upside to having the Nautobot service handled by Docker rather than locally is that you do not have to manage the Nautobot server. The Docker logs provide the majority of the information you will need to help troubleshoot, while getting started quickly and not requiring you to perform several manual steps and remembering to have the Nautobot server running in a separate terminal while you develop. Note The local environment still uses Docker containers for the supporting services (Postgres, Redis, and RQ Worker), but the Nautobot server is handled locally by you, the developer. Follow the directions below for the specific development environment that you choose.","title":"Project Overview"},{"location":"dev/dev_environment.html#poetry","text":"Poetry is used in lieu of the \"virtualenv\" commands and is leveraged in both environments. The virtual environment will provide all of the Python packages required to manage the development environment such as Invoke . See the Local Development Environment section to see how to install Nautobot if you're going to be developing locally (i.e. not using the Docker container). The pyproject.toml file outlines all of the relevant dependencies for the project: tool.poetry.dependencies - the main list of dependencies. tool.poetry.dev-dependencies - development dependencies, to facilitate linting, testing, and documentation building. The poetry shell command is used to create and enable a virtual environment managed by Poetry, so all commands ran going forward are executed within the virtual environment. This is similar to running the source venv/bin/activate command with virtualenvs. To install project dependencies in the virtual environment, you should run poetry install - this will install both project and development dependencies. For more details about Poetry and its commands please check out its online documentation .","title":"Poetry"},{"location":"dev/dev_environment.html#full-docker-development-environment","text":"This project is set up with a number of Invoke tasks consumed as simple CLI commands to get developing fast. You'll use a few invoke commands to get your environment up and running.","title":"Full Docker Development Environment"},{"location":"dev/dev_environment.html#copy-the-credentials-file-for-nautobot","text":"First, you need to create the development/creds.env file - it stores a bunch of private information such as passwords and tokens for your local Nautobot install. You can make a copy of the development/creds.example.env and modify it to suit you. cp development/creds.example.env development/creds.env","title":"Copy the credentials file for Nautobot"},{"location":"dev/dev_environment.html#invoke-building-the-docker-image","text":"The first thing you need to do is build the necessary Docker image for Nautobot that installs the specific nautobot_ver . The image is used for Nautobot and the Celery worker service used by Docker Compose. \u279c invoke build ... <omitted for brevity> #14 exporting to image #14 sha256:e8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00 #14 exporting layers #14 exporting layers 1.2s done #14 writing image sha256:2d524bc1665327faa0d34001b0a9d2ccf450612bf8feeb969312e96a2d3e3503 done #14 naming to docker.io/nautobot-firewall-models/nautobot:latest-py3.7 done","title":"Invoke - Building the Docker Image"},{"location":"dev/dev_environment.html#invoke-starting-the-development-environment","text":"Next, you need to start up your Docker containers. \u279c invoke start Starting Nautobot in detached mode... Running docker-compose command \"up --detach\" Creating network \"nautobot_firewall_models_default\" with the default driver Creating volume \"nautobot_firewall_models_postgres_data\" with default driver Creating nautobot_firewall_models_redis_1 ... Creating nautobot_firewall_models_docs_1 ... Creating nautobot_firewall_models_postgres_1 ... Creating nautobot_firewall_models_postgres_1 ... done Creating nautobot_firewall_models_redis_1 ... done Creating nautobot_firewall_models_nautobot_1 ... Creating nautobot_firewall_models_docs_1 ... done Creating nautobot_firewall_models_nautobot_1 ... done Creating nautobot_firewall_models_worker_1 ... Creating nautobot_firewall_models_worker_1 ... done Docker Compose is now in the Docker CLI, try ` docker compose up ` This will start all of the Docker containers used for hosting Nautobot. You should see the following containers running after invoke start is finished. \u279c docker ps ****CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES ee90fbfabd77 nautobot-firewall-models/nautobot:latest-py3.7 \"nautobot-server rqw\u2026\" 16 seconds ago Up 13 seconds nautobot_firewall_models_worker_1 b8adb781d013 nautobot-firewall-models/nautobot:latest-py3.7 \"/docker-entrypoint.\u2026\" 20 seconds ago Up 15 seconds 0 .0.0.0:8080->8080/tcp, :::8080->8080/tcp nautobot_firewall_models_nautobot_1 d64ebd60675d nautobot-firewall-models/nautobot:latest-py3.7 \"mkdocs serve -v -a \u2026\" 25 seconds ago Up 18 seconds 0 .0.0.0:8001->8080/tcp, :::8001->8080/tcp nautobot_firewall_models_docs_1 e72d63129b36 postgres:13-alpine \"docker-entrypoint.s\u2026\" 25 seconds ago Up 19 seconds 0 .0.0.0:5432->5432/tcp, :::5432->5432/tcp nautobot_firewall_models_postgres_1 96c6ff66997c redis:6-alpine \"docker-entrypoint.s\u2026\" 25 seconds ago Up 21 seconds 0 .0.0.0:6379->6379/tcp, :::6379->6379/tcp nautobot_firewall_models_redis_1 Once the containers are fully up, you should be able to open up a web browser, and view: The Nautobot homepage at http://localhost:8080 A live version of the documentation at http://localhost:8001 Note Sometimes the containers take a minute to fully spin up. If the page doesn't load right away, wait a minute and try again.","title":"Invoke - Starting the Development Environment"},{"location":"dev/dev_environment.html#invoke-creating-a-superuser","text":"The Nautobot development image will automatically provision a super user when specifying the following variables within creds.env which is the default when copying creds.example.env to creds.env . NAUTOBOT_CREATE_SUPERUSER=true NAUTOBOT_SUPERUSER_API_TOKEN=0123456789abcdef0123456789abcdef01234567 NAUTOBOT_SUPERUSER_PASSWORD=admin Note The default username is admin , but can be overridden by specifying NAUTOBOT_SUPERUSER_USERNAME . If you need to create additional superusers, run the follow commands. \u279c invoke createsuperuser Running docker-compose command \"ps --services --filter status=running\" Running docker-compose command \"exec nautobot nautobot-server createsuperuser --username admin\" Error: That username is already taken. Username: ntc Email address: ntc@networktocode.com Password: Password ( again ) : Superuser created successfully.","title":"Invoke - Creating a Superuser"},{"location":"dev/dev_environment.html#invoke-stopping-the-development-environment","text":"The last command to know for now is invoke stop . \u279c invoke stop Stopping Nautobot... Running docker-compose command \"down\" Stopping nautobot_firewall_models_worker_1 ... Stopping nautobot_firewall_models_nautobot_1 ... Stopping nautobot_firewall_models_docs_1 ... Stopping nautobot_firewall_models_redis_1 ... Stopping nautobot_firewall_models_postgres_1 ... Stopping nautobot_firewall_models_worker_1 ... done Stopping nautobot_firewall_models_nautobot_1 ... done Stopping nautobot_firewall_models_postgres_1 ... done Stopping nautobot_firewall_models_redis_1 ... done Stopping nautobot_firewall_models_docs_1 ... done Removing nautobot_firewall_models_worker_1 ... Removing nautobot_firewall_models_nautobot_1 ... Removing nautobot_firewall_models_docs_1 ... Removing nautobot_firewall_models_redis_1 ... Removing nautobot_firewall_models_postgres_1 ... Removing nautobot_firewall_models_postgres_1 ... done Removing nautobot_firewall_models_docs_1 ... done Removing nautobot_firewall_models_worker_1 ... done Removing nautobot_firewall_models_redis_1 ... done Removing nautobot_firewall_models_nautobot_1 ... done Removing network nautobot_firewall_models_default This will safely shut down all of your running Docker containers for this project. When you are ready to spin containers back up, it is as simple as running invoke start again as seen previously . Warning If you're wanting to reset the database and configuration settings, you can use the invoke destroy command, but you will lose any data stored in those containers , so make sure that is what you want to do.","title":"Invoke - Stopping the Development Environment"},{"location":"dev/dev_environment.html#real-time-updates-how-cool","text":"Your environment should now be fully setup, all necessary Docker containers are created and running, and you're logged into Nautobot in your web browser. Now what? Now you can start developing your plugin in the project folder! The magic here is the root directory is mounted inside your Docker containers when built and ran, so any changes made to the files in here are directly updated to the Nautobot plugin code running in Docker. This means that as you modify the code in your plugin folder, the changes will be instantly updated in Nautobot. Warning There are a few exceptions to this, as outlined in the section To Rebuild or Not To Rebuild . The back-end Django process is setup to automatically reload itself (it only takes a couple of seconds) every time a file is updated (saved). So for example, if you were to update one of the files like tables.py , then save it, the changes will be visible right away in the web browser! Note You may get connection refused while Django reloads, but it should be refreshed fairly quickly.","title":"Real-Time Updates? How Cool!"},{"location":"dev/dev_environment.html#docker-logs","text":"When trying to debug an issue, one helpful thing you can look at are the logs within the Docker containers. \u279c docker logs <name of container> -f Note The -f tag will keep the logs open, and output them in realtime as they are generated. So for example, our plugin is named nautobot-firewall-models , the command would most likely be docker logs nautobot_firewall_models_nautobot_1 -f . You can find the name of all running containers via docker ps . If you want to view the logs specific to the worker container, simply use the name of that container instead.","title":"Docker Logs"},{"location":"dev/dev_environment.html#to-rebuild-or-not-to-rebuild","text":"Most of the time, you will not need to rebuild your images. Simply running invoke start and invoke stop is enough to keep your environment going. However there are a couple of instances when you will want to.","title":"To Rebuild or Not to Rebuild"},{"location":"dev/dev_environment.html#updating-environment-variables","text":"To add environment variables to your containers, thus allowing Nautobot to use them, you will update/add them in the development/development.env file. However, doing so is considered updating the underlying container shell, instead of Django (which auto restarts itself on changes). To get new environment variables to take effect, you will need stop any running images, rebuild the images, then restart them. This can easily be done with 3 commands: \u279c invoke stop \u279c invoke build \u279c invoke start Once completed, the new/updated environment variables should now be live.","title":"Updating Environment Variables"},{"location":"dev/dev_environment.html#installing-additional-python-packages","text":"If you want your plugin to leverage another available Nautobot plugin or another Python package, you can easily add them into your Docker environment. \u279c poetry shell \u279c poetry add <package_name> Once the dependencies are resolved, stop the existing containers, rebuild the Docker image, and then start all containers again. \u279c invoke stop \u279c invoke build \u279c invoke start","title":"Installing Additional Python Packages"},{"location":"dev/dev_environment.html#installing-additional-nautobot-plugins","text":"Let's say for example you want the new plugin you're creating to integrate into Slack. To do this, you will want to integrate into the existing Nautobot ChatOps Plugin. \u279c poetry shell \u279c poetry add nautobot-chatops Once you activate the virtual environment via Poetry, you then tell Poetry to install the new plugin. Before you continue, you'll need to update the file development/nautobot_config.py accordingly with the name of the new plugin under PLUGINS and any relevant settings as necessary for the plugin under PLUGINS_CONFIG . Since you're modifying the underlying OS (not just Django files), you need to rebuild the image. This is a similar process to updating environment variables, which was explained earlier. \u279c invoke stop \u279c invoke build \u279c invoke start Once the containers are up and running, you should now see the new plugin installed in your Nautobot instance. Note You can even launch an ngrok service locally on your laptop, pointing to port 8080 (such as for chatops development), and it will point traffic directly to your Docker images.","title":"Installing Additional Nautobot Plugins"},{"location":"dev/dev_environment.html#updating-python-version","text":"To update the Python version, you can update it within tasks.py . namespace = Collection ( \"nautobot_firewall_models\" ) namespace . configure ( { \"nautobot_firewall_models\" : { ... \"python_ver\" : \"3.7\" , ... } } ) Or set the INVOKE_NAUTOBOT_GOLDEN_CONFIG_PYTHON_VER variable.","title":"Updating Python Version"},{"location":"dev/dev_environment.html#updating-nautobot-version","text":"To update the Nautobot version, you can update it within tasks.py . namespace = Collection ( \"nautobot_firewall_models\" ) namespace . configure ( { \"nautobot_firewall_models\" : { ... \"nautobot_ver\" : \"1.0.2\" , ... } } ) Or set the INVOKE_NAUTOBOT_FIREWALL_MODELS_NAUTOBOT_VER variable.","title":"Updating Nautobot Version"},{"location":"dev/dev_environment.html#other-miscellaneous-commands-to-know","text":"","title":"Other Miscellaneous Commands To Know"},{"location":"dev/dev_environment.html#python-shell","text":"To drop into a Django shell for Nautobot (in the Docker container) run: \u279c invoke nbshell This is the same as running: \u279c invoke cli \u279c nautobot-server nbshell","title":"Python Shell"},{"location":"dev/dev_environment.html#ipython-shell-plus","text":"Django also has a more advanced shell that uses iPython and that will automatically import all the models: \u279c invoke shell-plus This is the same as running: \u279c invoke cli \u279c nautobot-server shell_plus","title":"iPython Shell Plus"},{"location":"dev/dev_environment.html#tests","text":"To run tests against your code, you can run all of the tests that TravisCI runs against any new PR with: \u279c invoke tests To run an individual test, you can run any or all of the following: \u279c invoke unittest \u279c invoke bandit \u279c invoke black \u279c invoke flake8 \u279c invoke pydocstyle \u279c invoke pylint","title":"Tests"},{"location":"dev/extending.html","text":"Extending the App \u00b6 Extending the application is welcome, however it is best to open an issue first, to ensure that a PR would be accepted and makes sense in terms of features and design.","title":"Extending the App"},{"location":"dev/extending.html#extending-the-app","text":"Extending the application is welcome, however it is best to open an issue first, to ensure that a PR would be accepted and makes sense in terms of features and design.","title":"Extending the App"},{"location":"dev/models.html","text":"Firewall Models Reference \u00b6 This plugin follows hierarchical approach to the modeling of the firewall objects. The aim is to provide flexible framework for building firewall policies. Child objects associated to their parents via many-to-many relationship can be deleted only once the parent object is gone. This prevents accidental changes to firewall policies. For example, this would apply to an IP Address object used in an Address Object, which in turn is one of the descendants of a Policy object. That IP Address could NOT be deleted until one of the below happened: The relationship between IP Address and the Address Object is removed The Address Object is deleted To reiterate, this acts as a protection mechanism to prevent unintentional object deletions. All the data models introduced by the Firewall plugin support the following Nautobot features: Rest API GraphQL Custom fields Custom Links Relationships Change logging Custom data validation logic Webhooks The below diagram shows hierarchy of the models, and how they relate to one another. Policy model is at the top of the hierarchy; it has no parents. Every other model is in the child-parent relationship with the preceding model, moving from left to right. Creation Order \u00b6 The simplest approach to creating policies is to work upwards, starting with the objects at the bottom of the hierarchy. If you require Address Objects, create the underlying objects first. For example, ensure IP Address is in place before you create an Address Object for that IP. Create the bottommost child objects, Address Objects, User Objects and ServiceObjects. Optionally create groups, Address Object Groups, User Object Groups and ServiceObjectGroups. Groups are commonly used to aggregate objects of the same type in firewall policies. Create Policy Rules. Create Policy and assign indexes to rules. Add Device and/or DynamicGroup objects to a Policy. Custom Many-To-Many Models \u00b6 This plugin uses custom models to model many-to-many relationships (also known as through models). Some of these models implement the logic for deleting objects in child-parent relationships, as discussed earlier. Other models add attributes enriching relationships defined between objects. PolicyRuleM2M , PolicyDeviceM2M , PolicyDynamicGroupM2M are used for setting additional attributes and the remainder are solely defined for the disabling deleting from the bottom up. Available Models \u00b6 Policy \u00b6 A Policy models set of security rules permitting or blocking data packets. Policy is defined as a collection of Policy Rules. Policies are assigned to Devices and Dynamic Groups. You can think of a policy as roughly corresponding to access lists or policies on security appliances. Attributes \u00b6 Name (string) Description (optional, string) Policy Rules (M2M to PolicyRule via PolicyRuleM2M) Assigned Devices (M2M to Device via PolicyDeviceM2M) Assigns a Policy to a Device Assigned Dynamic Groups (M2M to DynamicGroup via PolicyDynamicGroupM2M) Assigns a Policy to a DynamicGroup which can then be used to dynamically assign to a Device/VirtualMachine or set of Devices/VirtualMachines Status (FK to Status) Tags (M2M to Tag) Examples \u00b6 Example of access list that could be translated to a Policy Extended IP access list Virtual-Access1.1#1 20 permit icmp host 1.1.1.1 any 30 deny ip host 44.33.66.36 host 1.1.1.1 40 permit udp any host 1.1.1.1 PolicyDeviceM2M \u00b6 Allows for creating a weighted value affecting how a Policy is assigned to a Device. This model is not directly exposed to the user but can be accessed via the Policy object, and the weight value is set in the Policy detail view. Attributes \u00b6 Weight (int, default=100) Meant to allow for setting priority on how a Policy is applied to a Device. Weight is not required to be unique. Weight is not required to be used if not needed. Policy (FK to Policy) Devices (FK to Device) PolicyDynamicGroupM2M \u00b6 Allows for creating a weighted value affecting how a Policy is assigned to a Dynamic Group. This model is not directly exposed to the user but can be accessed via the Policy object, and the weight value is set in the Policy detail view. Attributes \u00b6 Weight (int, default=100) Meant to allow for setting priority on how a Policy is applied to a Device. Weight is not required to be unique. Weight is not required to be used if not needed. Policy (FK to Policy) Dynamic Groups (FK to DynamicGroup) PolicyRule \u00b6 Represents a single security rule in a Policy. It is recommended to use a descriptive name to best identify a PolicyRule, otherwise the string representation of the PolicyRule if the UUID for the instance. Attributes \u00b6 Name (optional, string) Status (FK to Status) Tags (M2M to Tag) Source User (M2M to UserObject) Source User Group (M2M to UserObjectGroup) Source Address (M2M to AddressObject) Source Address Group (M2M to AddressObjectGroup) Source Zone (FK to Zone) Destination Address (M2M to AddressObject) Destination Address Group (M2M to AddressObjectGroup) Source Zone (FK to Zone) Service (M2M to ServiceObject) Service Group (M2M to ServiceObjectGroup) Action (string, choice of deny drop allow) Log (boolean) Request ID (optional, string) Meant to represent an upstream request (e.g. an service request from an ITSM solution). Index (optional, int) Sets the index of the PolicyRule in the Policy. Example 20 permit icmp host 1.1.1.1 any would have an index of 20 . Set as optional for now, will be set to required at a later date with default as the highest value + 10. Examples \u00b6 Example line in an access list that would translate to a Policy Rule: 30 deny ip host 44.33.66.36 host 1.1.1.1 ServiceObject \u00b6 Service Object represents a single destination service. For well-known ports, it is best to use the port name as the name of the object. For example, a service called HTTP should map to TCP port 80. A non-standard service on port 8898 serving HTTP traffic could be called HTTP-8898 or HTTP-SomeDescriptorForService . Attributes \u00b6 Name (string) Description (optional, string) Port (optional, int OR int range OR comma delimited list of int or int range) Must be specified as a valid layer 4 port OR port range (e.g. 80 OR 8080-8088). IP Protocol (string, choice field) IANA protocols (e.g. TCP UDP ICMP) Status (FK to Status) ServiceObjectGroup \u00b6 Represents a group of Service Objects. Attributes \u00b6 Name (string) Description (optional, string) Service Objects (M2M to ServiceObject) Status (FK to Status) UserObject \u00b6 Defines a User and is NOT related to a user in Nautobot. User Object is commonly used to identify a source for traffic on networks with roaming users. Attributes \u00b6 Name (optional, string) Signifies the name of the user, commonly first and last name (e.g. John Smith). Most likely would not be used in a policy but as a helper to identify an object. Username (string) Signifies the username in identity provider (e.g. john.smith). Status (FK to Status) UserObjectGroup \u00b6 Represents a group of User Objects. Attributes \u00b6 Name (string) Description (optional, string) User Objects (M2M to UserObject) Status (FK to Status) AddressObject \u00b6 Defines an object representation of some form of an IP object for cleaner nesting and modeling. Each Address Object can have only ONE IP object type associated to it. The Address property will return the IP object related to the Address Object (e.g. if FQDN is set, instance.address would return the FQDN object). Attributes \u00b6 Name (string) Description (optional, string) FQDN (FK to FQDN) IP Range (FK to IPRange) IP Address (FK to IPAddress) Prefix (FK to Prefix) Status (FK to Status) Address (property that returns the assigned object) AddressObjectGroup \u00b6 Represents a group of Address Objects. Attributes \u00b6 Name (string) Description (optional, string) Address Objects (M2M to AddressObject) Status (FK to Status) ApplicationObject \u00b6 Defines an Applications that are typically referenced in NextGen Firewalls. Attributes \u00b6 Name (string) Description (optional, string) Category (optional, string) Subategory (optional, string) Technology (optional, string) Risk (optional, positive integer) Default Type (optional, int OR int range OR comma delimited list of int or int range) Default IP Protocol (optional, string) Status (FK to Status) ApplicationObjectGroup \u00b6 Represents a group of Application Objects. Attributes \u00b6 Name (string) Description (optional, string) Application Objects (M2M to ApplicationObject) Status (FK to Status) FQDN \u00b6 Fully qualified domain name, can be used on some firewalls in place of a static IP(s). Attributes \u00b6 Name (string) Description (optional, string) IP Addresses (M2M to IPAddress) Not required Should be used if a firewall needs to tie a FQDN to an IP instead of on evaluating the FQDN to an IP when enforcing the PolicyRule. Status (FK to Status) IPRange \u00b6 Tracks ranges of IP addresses, it is NOT represented in the IPAM objects in Nautobot and is ONLY used inside the plugin. Attributes \u00b6 Description (optional, string) Start Address (IPv4 OR IPv6) End Address (IPv4 OR IPv6) VRF (optional, FK to VRF) Size (int, automatically set) Status (FK to Status) Zone \u00b6 Zones are common on firewalls and are typically seen as representations of area (e.g. DMZ, trust, untrust). Attributes \u00b6 Name (string) Description (optional, string) VRFs (M2M to VRF) Interfaces (M2M to Interface) Status (FK to Status) NATPolicy \u00b6 A NATPolicy models a set of network address translation (NAT) rules. NAT Policies are assigned to Devices and Dynamic Groups. Attributes \u00b6 Name (string) Description (optional, string) NAT Policy Rules (M2M to NATPolicyRule via NATPolicyRuleM2M) Assigned Devices (M2M to Device via NATPolicyDeviceM2M) Assigns a NATPolicy to a Device Assigned Dynamic Groups (M2M to DynamicGroup via NATPolicyDynamicGroupM2M) Assigns a Policy to a [DynamicGroup] (https://docs.nautobot.com/projects/core/en/stable/models/extras/dynamicgroup/) which can then be used to dynamically assign to a Device/VirtualMachine or set of Devices/VirtualMachines Status (FK to Status ) Tags (M2M to Tag ) NATPolicyRule \u00b6 Represents a single network address translation rule in a NATPolicy. It is recommended to use a descriptive name to best identify a NATPolicyRule, otherwise the string representation of the NATPolicyRule will be the UUID. Attributes \u00b6 Meta information \u00b6 Name (optional, string) Status (FK to Status) Tags (M2M to Tag) Source Zone (FK to Zone) Source Zone (FK to Zone) Request ID (optional, string) Meant to represent an upstream request (e.g. an service request from an ITSM solution). Index (optional, int) Sets the index of the PolicyRule in the Policy. Example 20 permit icmp host 1.1.1.1 any would have an index of 20 . Set as optional for now, will be set to required at a later date with default as the highest value + 10. Log (boolean) Before translation \u00b6 Original Source Address (M2M to AddressObject) Original Source Address Group (M2M to AddressObjectGroup) Original Destination Address (M2M to AddressObject) Original Destination Address Group (M2M to AddressObjectGroup) Original Source Service (M2M to ServiceObject) Original Source Service Group (M2M to ServiceObjectGroup) Original Destination Service (M2M to ServiceObject) Original Destination Service Group (M2M to ServiceObjectGroup) After translation \u00b6 Translated Source Address (M2M to AddressObject) Translated Source Address Group (M2M to AddressObjectGroup) Translated Destination Address (M2M to AddressObject) Translated Destination Address Group (M2M to AddressObjectGroup) Translated Source Service (M2M to ServiceObject) Translated Source Service Group (M2M to ServiceObjectGroup) Translated Destination Service (M2M to ServiceObject) Translated Destination Service Group (M2M to ServiceObjectGroup) NATPolicyDeviceM2M \u00b6 Allows for creating a weighted value affecting how a NATPolicy is assigned to a Device. This model is not directly exposed to the user but can be accessed via the NATPolicy object, and the weight value is set in the NATPolicy detail view. Attributes \u00b6 Weight (int, default=100) Meant to allow for setting priority on how a NATPolicy is applied to a Device. Weight is not required to be unique. Weight is not required to be used if not needed. NATPolicy (FK to NATPolicy) Devices (FK to Device) NATPolicyDynamicGroupM2M \u00b6 Allows for creating a weighted value affecting how a NATPolicy is assigned to a Dynamic Group. This model is not directly exposed to the user but can be accessed via the Policy object, and the weight value is set in the Policy detail view. Attributes \u00b6 Weight (int, default=100) Meant to allow for setting priority on how a NATPolicy is applied to a Device. Weight is not required to be unique. Weight is not required to be used if not needed. NATPolicy (FK to NATPolicy) Dynamic Groups (FK to DynamicGroup)","title":"Firewall Models Reference"},{"location":"dev/models.html#firewall-models-reference","text":"This plugin follows hierarchical approach to the modeling of the firewall objects. The aim is to provide flexible framework for building firewall policies. Child objects associated to their parents via many-to-many relationship can be deleted only once the parent object is gone. This prevents accidental changes to firewall policies. For example, this would apply to an IP Address object used in an Address Object, which in turn is one of the descendants of a Policy object. That IP Address could NOT be deleted until one of the below happened: The relationship between IP Address and the Address Object is removed The Address Object is deleted To reiterate, this acts as a protection mechanism to prevent unintentional object deletions. All the data models introduced by the Firewall plugin support the following Nautobot features: Rest API GraphQL Custom fields Custom Links Relationships Change logging Custom data validation logic Webhooks The below diagram shows hierarchy of the models, and how they relate to one another. Policy model is at the top of the hierarchy; it has no parents. Every other model is in the child-parent relationship with the preceding model, moving from left to right.","title":"Firewall Models Reference"},{"location":"dev/models.html#creation-order","text":"The simplest approach to creating policies is to work upwards, starting with the objects at the bottom of the hierarchy. If you require Address Objects, create the underlying objects first. For example, ensure IP Address is in place before you create an Address Object for that IP. Create the bottommost child objects, Address Objects, User Objects and ServiceObjects. Optionally create groups, Address Object Groups, User Object Groups and ServiceObjectGroups. Groups are commonly used to aggregate objects of the same type in firewall policies. Create Policy Rules. Create Policy and assign indexes to rules. Add Device and/or DynamicGroup objects to a Policy.","title":"Creation Order"},{"location":"dev/models.html#custom-many-to-many-models","text":"This plugin uses custom models to model many-to-many relationships (also known as through models). Some of these models implement the logic for deleting objects in child-parent relationships, as discussed earlier. Other models add attributes enriching relationships defined between objects. PolicyRuleM2M , PolicyDeviceM2M , PolicyDynamicGroupM2M are used for setting additional attributes and the remainder are solely defined for the disabling deleting from the bottom up.","title":"Custom Many-To-Many Models"},{"location":"dev/models.html#available-models","text":"","title":"Available Models"},{"location":"dev/models.html#policy","text":"A Policy models set of security rules permitting or blocking data packets. Policy is defined as a collection of Policy Rules. Policies are assigned to Devices and Dynamic Groups. You can think of a policy as roughly corresponding to access lists or policies on security appliances.","title":"Policy"},{"location":"dev/models.html#attributes","text":"Name (string) Description (optional, string) Policy Rules (M2M to PolicyRule via PolicyRuleM2M) Assigned Devices (M2M to Device via PolicyDeviceM2M) Assigns a Policy to a Device Assigned Dynamic Groups (M2M to DynamicGroup via PolicyDynamicGroupM2M) Assigns a Policy to a DynamicGroup which can then be used to dynamically assign to a Device/VirtualMachine or set of Devices/VirtualMachines Status (FK to Status) Tags (M2M to Tag)","title":"Attributes"},{"location":"dev/models.html#examples","text":"Example of access list that could be translated to a Policy Extended IP access list Virtual-Access1.1#1 20 permit icmp host 1.1.1.1 any 30 deny ip host 44.33.66.36 host 1.1.1.1 40 permit udp any host 1.1.1.1","title":"Examples"},{"location":"dev/models.html#policydevicem2m","text":"Allows for creating a weighted value affecting how a Policy is assigned to a Device. This model is not directly exposed to the user but can be accessed via the Policy object, and the weight value is set in the Policy detail view.","title":"PolicyDeviceM2M"},{"location":"dev/models.html#attributes_1","text":"Weight (int, default=100) Meant to allow for setting priority on how a Policy is applied to a Device. Weight is not required to be unique. Weight is not required to be used if not needed. Policy (FK to Policy) Devices (FK to Device)","title":"Attributes"},{"location":"dev/models.html#policydynamicgroupm2m","text":"Allows for creating a weighted value affecting how a Policy is assigned to a Dynamic Group. This model is not directly exposed to the user but can be accessed via the Policy object, and the weight value is set in the Policy detail view.","title":"PolicyDynamicGroupM2M"},{"location":"dev/models.html#attributes_2","text":"Weight (int, default=100) Meant to allow for setting priority on how a Policy is applied to a Device. Weight is not required to be unique. Weight is not required to be used if not needed. Policy (FK to Policy) Dynamic Groups (FK to DynamicGroup)","title":"Attributes"},{"location":"dev/models.html#policyrule","text":"Represents a single security rule in a Policy. It is recommended to use a descriptive name to best identify a PolicyRule, otherwise the string representation of the PolicyRule if the UUID for the instance.","title":"PolicyRule"},{"location":"dev/models.html#attributes_3","text":"Name (optional, string) Status (FK to Status) Tags (M2M to Tag) Source User (M2M to UserObject) Source User Group (M2M to UserObjectGroup) Source Address (M2M to AddressObject) Source Address Group (M2M to AddressObjectGroup) Source Zone (FK to Zone) Destination Address (M2M to AddressObject) Destination Address Group (M2M to AddressObjectGroup) Source Zone (FK to Zone) Service (M2M to ServiceObject) Service Group (M2M to ServiceObjectGroup) Action (string, choice of deny drop allow) Log (boolean) Request ID (optional, string) Meant to represent an upstream request (e.g. an service request from an ITSM solution). Index (optional, int) Sets the index of the PolicyRule in the Policy. Example 20 permit icmp host 1.1.1.1 any would have an index of 20 . Set as optional for now, will be set to required at a later date with default as the highest value + 10.","title":"Attributes"},{"location":"dev/models.html#examples_1","text":"Example line in an access list that would translate to a Policy Rule: 30 deny ip host 44.33.66.36 host 1.1.1.1","title":"Examples"},{"location":"dev/models.html#serviceobject","text":"Service Object represents a single destination service. For well-known ports, it is best to use the port name as the name of the object. For example, a service called HTTP should map to TCP port 80. A non-standard service on port 8898 serving HTTP traffic could be called HTTP-8898 or HTTP-SomeDescriptorForService .","title":"ServiceObject"},{"location":"dev/models.html#attributes_4","text":"Name (string) Description (optional, string) Port (optional, int OR int range OR comma delimited list of int or int range) Must be specified as a valid layer 4 port OR port range (e.g. 80 OR 8080-8088). IP Protocol (string, choice field) IANA protocols (e.g. TCP UDP ICMP) Status (FK to Status)","title":"Attributes"},{"location":"dev/models.html#serviceobjectgroup","text":"Represents a group of Service Objects.","title":"ServiceObjectGroup"},{"location":"dev/models.html#attributes_5","text":"Name (string) Description (optional, string) Service Objects (M2M to ServiceObject) Status (FK to Status)","title":"Attributes"},{"location":"dev/models.html#userobject","text":"Defines a User and is NOT related to a user in Nautobot. User Object is commonly used to identify a source for traffic on networks with roaming users.","title":"UserObject"},{"location":"dev/models.html#attributes_6","text":"Name (optional, string) Signifies the name of the user, commonly first and last name (e.g. John Smith). Most likely would not be used in a policy but as a helper to identify an object. Username (string) Signifies the username in identity provider (e.g. john.smith). Status (FK to Status)","title":"Attributes"},{"location":"dev/models.html#userobjectgroup","text":"Represents a group of User Objects.","title":"UserObjectGroup"},{"location":"dev/models.html#attributes_7","text":"Name (string) Description (optional, string) User Objects (M2M to UserObject) Status (FK to Status)","title":"Attributes"},{"location":"dev/models.html#addressobject","text":"Defines an object representation of some form of an IP object for cleaner nesting and modeling. Each Address Object can have only ONE IP object type associated to it. The Address property will return the IP object related to the Address Object (e.g. if FQDN is set, instance.address would return the FQDN object).","title":"AddressObject"},{"location":"dev/models.html#attributes_8","text":"Name (string) Description (optional, string) FQDN (FK to FQDN) IP Range (FK to IPRange) IP Address (FK to IPAddress) Prefix (FK to Prefix) Status (FK to Status) Address (property that returns the assigned object)","title":"Attributes"},{"location":"dev/models.html#addressobjectgroup","text":"Represents a group of Address Objects.","title":"AddressObjectGroup"},{"location":"dev/models.html#attributes_9","text":"Name (string) Description (optional, string) Address Objects (M2M to AddressObject) Status (FK to Status)","title":"Attributes"},{"location":"dev/models.html#applicationobject","text":"Defines an Applications that are typically referenced in NextGen Firewalls.","title":"ApplicationObject"},{"location":"dev/models.html#attributes_10","text":"Name (string) Description (optional, string) Category (optional, string) Subategory (optional, string) Technology (optional, string) Risk (optional, positive integer) Default Type (optional, int OR int range OR comma delimited list of int or int range) Default IP Protocol (optional, string) Status (FK to Status)","title":"Attributes"},{"location":"dev/models.html#applicationobjectgroup","text":"Represents a group of Application Objects.","title":"ApplicationObjectGroup"},{"location":"dev/models.html#attributes_11","text":"Name (string) Description (optional, string) Application Objects (M2M to ApplicationObject) Status (FK to Status)","title":"Attributes"},{"location":"dev/models.html#fqdn","text":"Fully qualified domain name, can be used on some firewalls in place of a static IP(s).","title":"FQDN"},{"location":"dev/models.html#attributes_12","text":"Name (string) Description (optional, string) IP Addresses (M2M to IPAddress) Not required Should be used if a firewall needs to tie a FQDN to an IP instead of on evaluating the FQDN to an IP when enforcing the PolicyRule. Status (FK to Status)","title":"Attributes"},{"location":"dev/models.html#iprange","text":"Tracks ranges of IP addresses, it is NOT represented in the IPAM objects in Nautobot and is ONLY used inside the plugin.","title":"IPRange"},{"location":"dev/models.html#attributes_13","text":"Description (optional, string) Start Address (IPv4 OR IPv6) End Address (IPv4 OR IPv6) VRF (optional, FK to VRF) Size (int, automatically set) Status (FK to Status)","title":"Attributes"},{"location":"dev/models.html#zone","text":"Zones are common on firewalls and are typically seen as representations of area (e.g. DMZ, trust, untrust).","title":"Zone"},{"location":"dev/models.html#attributes_14","text":"Name (string) Description (optional, string) VRFs (M2M to VRF) Interfaces (M2M to Interface) Status (FK to Status)","title":"Attributes"},{"location":"dev/models.html#natpolicy","text":"A NATPolicy models a set of network address translation (NAT) rules. NAT Policies are assigned to Devices and Dynamic Groups.","title":"NATPolicy"},{"location":"dev/models.html#attributes_15","text":"Name (string) Description (optional, string) NAT Policy Rules (M2M to NATPolicyRule via NATPolicyRuleM2M) Assigned Devices (M2M to Device via NATPolicyDeviceM2M) Assigns a NATPolicy to a Device Assigned Dynamic Groups (M2M to DynamicGroup via NATPolicyDynamicGroupM2M) Assigns a Policy to a [DynamicGroup] (https://docs.nautobot.com/projects/core/en/stable/models/extras/dynamicgroup/) which can then be used to dynamically assign to a Device/VirtualMachine or set of Devices/VirtualMachines Status (FK to Status ) Tags (M2M to Tag )","title":"Attributes"},{"location":"dev/models.html#natpolicyrule","text":"Represents a single network address translation rule in a NATPolicy. It is recommended to use a descriptive name to best identify a NATPolicyRule, otherwise the string representation of the NATPolicyRule will be the UUID.","title":"NATPolicyRule"},{"location":"dev/models.html#attributes_16","text":"","title":"Attributes"},{"location":"dev/models.html#meta-information","text":"Name (optional, string) Status (FK to Status) Tags (M2M to Tag) Source Zone (FK to Zone) Source Zone (FK to Zone) Request ID (optional, string) Meant to represent an upstream request (e.g. an service request from an ITSM solution). Index (optional, int) Sets the index of the PolicyRule in the Policy. Example 20 permit icmp host 1.1.1.1 any would have an index of 20 . Set as optional for now, will be set to required at a later date with default as the highest value + 10. Log (boolean)","title":"Meta information"},{"location":"dev/models.html#before-translation","text":"Original Source Address (M2M to AddressObject) Original Source Address Group (M2M to AddressObjectGroup) Original Destination Address (M2M to AddressObject) Original Destination Address Group (M2M to AddressObjectGroup) Original Source Service (M2M to ServiceObject) Original Source Service Group (M2M to ServiceObjectGroup) Original Destination Service (M2M to ServiceObject) Original Destination Service Group (M2M to ServiceObjectGroup)","title":"Before translation"},{"location":"dev/models.html#after-translation","text":"Translated Source Address (M2M to AddressObject) Translated Source Address Group (M2M to AddressObjectGroup) Translated Destination Address (M2M to AddressObject) Translated Destination Address Group (M2M to AddressObjectGroup) Translated Source Service (M2M to ServiceObject) Translated Source Service Group (M2M to ServiceObjectGroup) Translated Destination Service (M2M to ServiceObject) Translated Destination Service Group (M2M to ServiceObjectGroup)","title":"After translation"},{"location":"dev/models.html#natpolicydevicem2m","text":"Allows for creating a weighted value affecting how a NATPolicy is assigned to a Device. This model is not directly exposed to the user but can be accessed via the NATPolicy object, and the weight value is set in the NATPolicy detail view.","title":"NATPolicyDeviceM2M"},{"location":"dev/models.html#attributes_17","text":"Weight (int, default=100) Meant to allow for setting priority on how a NATPolicy is applied to a Device. Weight is not required to be unique. Weight is not required to be used if not needed. NATPolicy (FK to NATPolicy) Devices (FK to Device)","title":"Attributes"},{"location":"dev/models.html#natpolicydynamicgroupm2m","text":"Allows for creating a weighted value affecting how a NATPolicy is assigned to a Dynamic Group. This model is not directly exposed to the user but can be accessed via the Policy object, and the weight value is set in the Policy detail view.","title":"NATPolicyDynamicGroupM2M"},{"location":"dev/models.html#attributes_18","text":"Weight (int, default=100) Meant to allow for setting priority on how a NATPolicy is applied to a Device. Weight is not required to be unique. Weight is not required to be used if not needed. NATPolicy (FK to NATPolicy) Dynamic Groups (FK to DynamicGroup)","title":"Attributes"},{"location":"dev/models/addressobject.html","text":"AddressObject \u00b6 Defines an object representation of some form of an IP object for cleaner nesting and modeling. Each Address Object can have only ONE IP object type associated to it. The Address property will return the IP object related to the Address Object (e.g. if FQDN is set, instance.address would return the FQDN object). Attributes \u00b6 Name (string) Description (optional, string) FQDN (FK to FQDN) IP Range (FK to IPRange) IP Address (FK to IPAddress) Prefix (FK to Prefix) Status (FK to Status) Address (property that returns the assigned object)","title":"AddressObject"},{"location":"dev/models/addressobject.html#addressobject","text":"Defines an object representation of some form of an IP object for cleaner nesting and modeling. Each Address Object can have only ONE IP object type associated to it. The Address property will return the IP object related to the Address Object (e.g. if FQDN is set, instance.address would return the FQDN object).","title":"AddressObject"},{"location":"dev/models/addressobject.html#attributes","text":"Name (string) Description (optional, string) FQDN (FK to FQDN) IP Range (FK to IPRange) IP Address (FK to IPAddress) Prefix (FK to Prefix) Status (FK to Status) Address (property that returns the assigned object)","title":"Attributes"},{"location":"dev/models/addressobjectgroup.html","text":"AddressObjectGroup \u00b6 Represents a group of Address Objects. Attributes \u00b6 Name (string) Description (optional, string) Address Objects (M2M to AddressObject) Status (FK to Status)","title":"AddressObjectGroup"},{"location":"dev/models/addressobjectgroup.html#addressobjectgroup","text":"Represents a group of Address Objects.","title":"AddressObjectGroup"},{"location":"dev/models/addressobjectgroup.html#attributes","text":"Name (string) Description (optional, string) Address Objects (M2M to AddressObject) Status (FK to Status)","title":"Attributes"},{"location":"dev/models/applicationobject.html","text":"ApplicationObject \u00b6 Defines an Applications that are typically referenced in NextGen Firewalls. Attributes \u00b6 Name (string) Description (optional, string) Category (optional, string) Subategory (optional, string) Technology (optional, string) Risk (optional, positive integer) Default Type (optional, int OR int range OR comma delimited list of int or int range) Default IP Protocol (optional, string) Status (FK to Status)","title":"ApplicationObject"},{"location":"dev/models/applicationobject.html#applicationobject","text":"Defines an Applications that are typically referenced in NextGen Firewalls.","title":"ApplicationObject"},{"location":"dev/models/applicationobject.html#attributes","text":"Name (string) Description (optional, string) Category (optional, string) Subategory (optional, string) Technology (optional, string) Risk (optional, positive integer) Default Type (optional, int OR int range OR comma delimited list of int or int range) Default IP Protocol (optional, string) Status (FK to Status)","title":"Attributes"},{"location":"dev/models/applicationobjectgroup.html","text":"ApplicationObjectGroup \u00b6 Represents a group of Application Objects. Attributes \u00b6 Name (string) Description (optional, string) Application Objects (M2M to ApplicationObject) Status (FK to Status)","title":"ApplicationObjectGroup"},{"location":"dev/models/applicationobjectgroup.html#applicationobjectgroup","text":"Represents a group of Application Objects.","title":"ApplicationObjectGroup"},{"location":"dev/models/applicationobjectgroup.html#attributes","text":"Name (string) Description (optional, string) Application Objects (M2M to ApplicationObject) Status (FK to Status)","title":"Attributes"},{"location":"dev/models/fqdn.html","text":"FQDN \u00b6 Fully qualified domain name, can be used on some firewalls in place of a static IP(s). Attributes \u00b6 Name (string) Description (optional, string) IP Addresses (M2M to IPAddress) Not required Should be used if a firewall needs to tie a FQDN to an IP instead of on evaluating the FQDN to an IP when enforcing the PolicyRule. Status (FK to Status)","title":"FQDN"},{"location":"dev/models/fqdn.html#fqdn","text":"Fully qualified domain name, can be used on some firewalls in place of a static IP(s).","title":"FQDN"},{"location":"dev/models/fqdn.html#attributes","text":"Name (string) Description (optional, string) IP Addresses (M2M to IPAddress) Not required Should be used if a firewall needs to tie a FQDN to an IP instead of on evaluating the FQDN to an IP when enforcing the PolicyRule. Status (FK to Status)","title":"Attributes"},{"location":"dev/models/iprange.html","text":"IPRange \u00b6 Tracks ranges of IP addresses, it is NOT represented in the IPAM objects in Nautobot and is ONLY used inside the plugin. Attributes \u00b6 Description (optional, string) Start Address (IPv4 OR IPv6) End Address (IPv4 OR IPv6) VRF (optional, FK to VRF) Size (int, automatically set) Status (FK to Status)","title":"IPRange"},{"location":"dev/models/iprange.html#iprange","text":"Tracks ranges of IP addresses, it is NOT represented in the IPAM objects in Nautobot and is ONLY used inside the plugin.","title":"IPRange"},{"location":"dev/models/iprange.html#attributes","text":"Description (optional, string) Start Address (IPv4 OR IPv6) End Address (IPv4 OR IPv6) VRF (optional, FK to VRF) Size (int, automatically set) Status (FK to Status)","title":"Attributes"},{"location":"dev/models/natpolicy.html","text":"NATPolicy \u00b6 A NATPolicy models a set of network address translation (NAT) rules. NAT Policies are assigned to Devices and Dynamic Groups. Attributes \u00b6 Name (string) Description (optional, string) NAT Policy Rules (M2M to NATPolicyRule via NATPolicyRuleM2M) Assigned Devices (M2M to Device via NATPolicyDeviceM2M) Assigns a NATPolicy to a Device Assigned Dynamic Groups (M2M to DynamicGroup via NATPolicyDynamicGroupM2M) Assigns a Policy to a [DynamicGroup] (https://docs.nautobot.com/projects/core/en/stable/models/extras/dynamicgroup/) which can then be used to dynamically assign to a Device/VirtualMachine or set of Devices/VirtualMachines Status (FK to Status ) Tags (M2M to Tag )","title":"NATPolicy"},{"location":"dev/models/natpolicy.html#natpolicy","text":"A NATPolicy models a set of network address translation (NAT) rules. NAT Policies are assigned to Devices and Dynamic Groups.","title":"NATPolicy"},{"location":"dev/models/natpolicy.html#attributes","text":"Name (string) Description (optional, string) NAT Policy Rules (M2M to NATPolicyRule via NATPolicyRuleM2M) Assigned Devices (M2M to Device via NATPolicyDeviceM2M) Assigns a NATPolicy to a Device Assigned Dynamic Groups (M2M to DynamicGroup via NATPolicyDynamicGroupM2M) Assigns a Policy to a [DynamicGroup] (https://docs.nautobot.com/projects/core/en/stable/models/extras/dynamicgroup/) which can then be used to dynamically assign to a Device/VirtualMachine or set of Devices/VirtualMachines Status (FK to Status ) Tags (M2M to Tag )","title":"Attributes"},{"location":"dev/models/natpolicydevicem2m.html","text":"NATPolicyDeviceM2M \u00b6 Allows for creating a weighted value affecting how a NATPolicy is assigned to a Device. This model is not directly exposed to the user but can be accessed via the NATPolicy object, and the weight value is set in the NATPolicy detail view. Attributes \u00b6 Weight (int, default=100) Meant to allow for setting priority on how a NATPolicy is applied to a Device. Weight is not required to be unique. Weight is not required to be used if not needed. NATPolicy (FK to NATPolicy) Devices (FK to Device)","title":"NATPolicyDeviceM2M"},{"location":"dev/models/natpolicydevicem2m.html#natpolicydevicem2m","text":"Allows for creating a weighted value affecting how a NATPolicy is assigned to a Device. This model is not directly exposed to the user but can be accessed via the NATPolicy object, and the weight value is set in the NATPolicy detail view.","title":"NATPolicyDeviceM2M"},{"location":"dev/models/natpolicydevicem2m.html#attributes","text":"Weight (int, default=100) Meant to allow for setting priority on how a NATPolicy is applied to a Device. Weight is not required to be unique. Weight is not required to be used if not needed. NATPolicy (FK to NATPolicy) Devices (FK to Device)","title":"Attributes"},{"location":"dev/models/natpolicydynamicgroupm2m.html","text":"NATPolicyDynamicGroupM2M \u00b6 Allows for creating a weighted value affecting how a NATPolicy is assigned to a Dynamic Group. This model is not directly exposed to the user but can be accessed via the Policy object, and the weight value is set in the Policy detail view. Attributes \u00b6 Weight (int, default=100) Meant to allow for setting priority on how a NATPolicy is applied to a Device. Weight is not required to be unique. Weight is not required to be used if not needed. NATPolicy (FK to NATPolicy) Dynamic Groups (FK to DynamicGroup)","title":"NATPolicyDynamicGroupM2M"},{"location":"dev/models/natpolicydynamicgroupm2m.html#natpolicydynamicgroupm2m","text":"Allows for creating a weighted value affecting how a NATPolicy is assigned to a Dynamic Group. This model is not directly exposed to the user but can be accessed via the Policy object, and the weight value is set in the Policy detail view.","title":"NATPolicyDynamicGroupM2M"},{"location":"dev/models/natpolicydynamicgroupm2m.html#attributes","text":"Weight (int, default=100) Meant to allow for setting priority on how a NATPolicy is applied to a Device. Weight is not required to be unique. Weight is not required to be used if not needed. NATPolicy (FK to NATPolicy) Dynamic Groups (FK to DynamicGroup)","title":"Attributes"},{"location":"dev/models/natpolicyrule.html","text":"NATPolicyRule \u00b6 Represents a single network address translation rule in a NATPolicy. It is recommended to use a descriptive name to best identify a NATPolicyRule, otherwise the string representation of the NATPolicyRule will be the UUID. Attributes \u00b6 Meta information \u00b6 Name (optional, string) Status (FK to Status) Tags (M2M to Tag) Source Zone (FK to Zone) Source Zone (FK to Zone) Request ID (optional, string) Meant to represent an upstream request (e.g. an service request from an ITSM solution). Index (optional, int) Sets the index of the PolicyRule in the Policy. Example 20 permit icmp host 1.1.1.1 any would have an index of 20 . Set as optional for now, will be set to required at a later date with default as the highest value + 10. Log (boolean) Before translation \u00b6 Original Source Address (M2M to AddressObject) Original Source Address Group (M2M to AddressObjectGroup) Original Destination Address (M2M to AddressObject) Original Destination Address Group (M2M to AddressObjectGroup) Original Source Service (M2M to ServiceObject) Original Source Service Group (M2M to ServiceObjectGroup) Original Destination Service (M2M to ServiceObject) Original Destination Service Group (M2M to ServiceObjectGroup) After translation \u00b6 Translated Source Address (M2M to AddressObject) Translated Source Address Group (M2M to AddressObjectGroup) Translated Destination Address (M2M to AddressObject) Translated Destination Address Group (M2M to AddressObjectGroup) Translated Source Service (M2M to ServiceObject) Translated Source Service Group (M2M to ServiceObjectGroup) Translated Destination Service (M2M to ServiceObject) Translated Destination Service Group (M2M to ServiceObjectGroup)","title":"NATPolicyRule"},{"location":"dev/models/natpolicyrule.html#natpolicyrule","text":"Represents a single network address translation rule in a NATPolicy. It is recommended to use a descriptive name to best identify a NATPolicyRule, otherwise the string representation of the NATPolicyRule will be the UUID.","title":"NATPolicyRule"},{"location":"dev/models/natpolicyrule.html#attributes","text":"","title":"Attributes"},{"location":"dev/models/natpolicyrule.html#meta-information","text":"Name (optional, string) Status (FK to Status) Tags (M2M to Tag) Source Zone (FK to Zone) Source Zone (FK to Zone) Request ID (optional, string) Meant to represent an upstream request (e.g. an service request from an ITSM solution). Index (optional, int) Sets the index of the PolicyRule in the Policy. Example 20 permit icmp host 1.1.1.1 any would have an index of 20 . Set as optional for now, will be set to required at a later date with default as the highest value + 10. Log (boolean)","title":"Meta information"},{"location":"dev/models/natpolicyrule.html#before-translation","text":"Original Source Address (M2M to AddressObject) Original Source Address Group (M2M to AddressObjectGroup) Original Destination Address (M2M to AddressObject) Original Destination Address Group (M2M to AddressObjectGroup) Original Source Service (M2M to ServiceObject) Original Source Service Group (M2M to ServiceObjectGroup) Original Destination Service (M2M to ServiceObject) Original Destination Service Group (M2M to ServiceObjectGroup)","title":"Before translation"},{"location":"dev/models/natpolicyrule.html#after-translation","text":"Translated Source Address (M2M to AddressObject) Translated Source Address Group (M2M to AddressObjectGroup) Translated Destination Address (M2M to AddressObject) Translated Destination Address Group (M2M to AddressObjectGroup) Translated Source Service (M2M to ServiceObject) Translated Source Service Group (M2M to ServiceObjectGroup) Translated Destination Service (M2M to ServiceObject) Translated Destination Service Group (M2M to ServiceObjectGroup)","title":"After translation"},{"location":"dev/models/policy.html","text":"Policy \u00b6 A Policy models set of security rules permitting or blocking data packets. Policy is defined as a collection of Policy Rules. Policies are assigned to Devices and Dynamic Groups. You can think of a policy as roughly corresponding to access lists or policies on security appliances. Attributes \u00b6 Name (string) Description (optional, string) Policy Rules (M2M to PolicyRule via PolicyRuleM2M) Assigned Devices (M2M to Device via PolicyDeviceM2M) Assigns a Policy to a Device Assigned Dynamic Groups (M2M to DynamicGroup via PolicyDynamicGroupM2M) Assigns a Policy to a DynamicGroup which can then be used to dynamically assign to a Device/VirtualMachine or set of Devices/VirtualMachines Status (FK to Status) Tags (M2M to Tag) Examples \u00b6 Example of access list that could be translated to a Policy Extended IP access list Virtual-Access1.1#1 20 permit icmp host 1.1.1.1 any 30 deny ip host 44.33.66.36 host 1.1.1.1 40 permit udp any host 1.1.1.1","title":"Policy"},{"location":"dev/models/policy.html#policy","text":"A Policy models set of security rules permitting or blocking data packets. Policy is defined as a collection of Policy Rules. Policies are assigned to Devices and Dynamic Groups. You can think of a policy as roughly corresponding to access lists or policies on security appliances.","title":"Policy"},{"location":"dev/models/policy.html#attributes","text":"Name (string) Description (optional, string) Policy Rules (M2M to PolicyRule via PolicyRuleM2M) Assigned Devices (M2M to Device via PolicyDeviceM2M) Assigns a Policy to a Device Assigned Dynamic Groups (M2M to DynamicGroup via PolicyDynamicGroupM2M) Assigns a Policy to a DynamicGroup which can then be used to dynamically assign to a Device/VirtualMachine or set of Devices/VirtualMachines Status (FK to Status) Tags (M2M to Tag)","title":"Attributes"},{"location":"dev/models/policy.html#examples","text":"Example of access list that could be translated to a Policy Extended IP access list Virtual-Access1.1#1 20 permit icmp host 1.1.1.1 any 30 deny ip host 44.33.66.36 host 1.1.1.1 40 permit udp any host 1.1.1.1","title":"Examples"},{"location":"dev/models/policydevicem2m.html","text":"PolicyDeviceM2M \u00b6 Allows for creating a weighted value affecting how a Policy is assigned to a Device. This model is not directly exposed to the user but can be accessed via the Policy object, and the weight value is set in the Policy detail view. Attributes \u00b6 Weight (int, default=100) Meant to allow for setting priority on how a Policy is applied to a Device. Weight is not required to be unique. Weight is not required to be used if not needed. Policy (FK to Policy) Devices (FK to Device)","title":"PolicyDeviceM2M"},{"location":"dev/models/policydevicem2m.html#policydevicem2m","text":"Allows for creating a weighted value affecting how a Policy is assigned to a Device. This model is not directly exposed to the user but can be accessed via the Policy object, and the weight value is set in the Policy detail view.","title":"PolicyDeviceM2M"},{"location":"dev/models/policydevicem2m.html#attributes","text":"Weight (int, default=100) Meant to allow for setting priority on how a Policy is applied to a Device. Weight is not required to be unique. Weight is not required to be used if not needed. Policy (FK to Policy) Devices (FK to Device)","title":"Attributes"},{"location":"dev/models/policydynamicgroupm2m.html","text":"PolicyDynamicGroupM2M \u00b6 Allows for creating a weighted value affecting how a Policy is assigned to a Dynamic Group. This model is not directly exposed to the user but can be accessed via the Policy object, and the weight value is set in the Policy detail view. Attributes \u00b6 Weight (int, default=100) Meant to allow for setting priority on how a Policy is applied to a Device. Weight is not required to be unique. Weight is not required to be used if not needed. Policy (FK to Policy) Dynamic Groups (FK to DynamicGroup)","title":"PolicyDynamicGroupM2M"},{"location":"dev/models/policydynamicgroupm2m.html#policydynamicgroupm2m","text":"Allows for creating a weighted value affecting how a Policy is assigned to a Dynamic Group. This model is not directly exposed to the user but can be accessed via the Policy object, and the weight value is set in the Policy detail view.","title":"PolicyDynamicGroupM2M"},{"location":"dev/models/policydynamicgroupm2m.html#attributes","text":"Weight (int, default=100) Meant to allow for setting priority on how a Policy is applied to a Device. Weight is not required to be unique. Weight is not required to be used if not needed. Policy (FK to Policy) Dynamic Groups (FK to DynamicGroup)","title":"Attributes"},{"location":"dev/models/policyrule.html","text":"PolicyRule \u00b6 Represents a single security rule in a Policy. It is recommended to use a descriptive name to best identify a PolicyRule, otherwise the string representation of the PolicyRule if the UUID for the instance. Attributes \u00b6 Name (optional, string) Status (FK to Status) Tags (M2M to Tag) Source User (M2M to UserObject) Source User Group (M2M to UserObjectGroup) Source Address (M2M to AddressObject) Source Address Group (M2M to AddressObjectGroup) Source Zone (FK to Zone) Destination Address (M2M to AddressObject) Destination Address Group (M2M to AddressObjectGroup) Source Zone (FK to Zone) Service (M2M to ServiceObject) Service Group (M2M to ServiceObjectGroup) Action (string, choice of deny drop allow) Log (boolean) Request ID (optional, string) Meant to represent an upstream request (e.g. an service request from an ITSM solution). Index (optional, int) Sets the index of the PolicyRule in the Policy. Example 20 permit icmp host 1.1.1.1 any would have an index of 20 . Set as optional for now, will be set to required at a later date with default as the highest value + 10. Examples \u00b6 Example line in an access list that would translate to a Policy Rule: 30 deny ip host 44.33.66.36 host 1.1.1.1","title":"PolicyRule"},{"location":"dev/models/policyrule.html#policyrule","text":"Represents a single security rule in a Policy. It is recommended to use a descriptive name to best identify a PolicyRule, otherwise the string representation of the PolicyRule if the UUID for the instance.","title":"PolicyRule"},{"location":"dev/models/policyrule.html#attributes","text":"Name (optional, string) Status (FK to Status) Tags (M2M to Tag) Source User (M2M to UserObject) Source User Group (M2M to UserObjectGroup) Source Address (M2M to AddressObject) Source Address Group (M2M to AddressObjectGroup) Source Zone (FK to Zone) Destination Address (M2M to AddressObject) Destination Address Group (M2M to AddressObjectGroup) Source Zone (FK to Zone) Service (M2M to ServiceObject) Service Group (M2M to ServiceObjectGroup) Action (string, choice of deny drop allow) Log (boolean) Request ID (optional, string) Meant to represent an upstream request (e.g. an service request from an ITSM solution). Index (optional, int) Sets the index of the PolicyRule in the Policy. Example 20 permit icmp host 1.1.1.1 any would have an index of 20 . Set as optional for now, will be set to required at a later date with default as the highest value + 10.","title":"Attributes"},{"location":"dev/models/policyrule.html#examples","text":"Example line in an access list that would translate to a Policy Rule: 30 deny ip host 44.33.66.36 host 1.1.1.1","title":"Examples"},{"location":"dev/models/serviceobject.html","text":"ServiceObject \u00b6 Service Object represents a single destination service. For well-known ports, it is best to use the port name as the name of the object. For example, a service called HTTP should map to TCP port 80. A non-standard service on port 8898 serving HTTP traffic could be called HTTP-8898 or HTTP-SomeDescriptorForService . Attributes \u00b6 Name (string) Description (optional, string) Port (optional, int OR int range OR comma delimited list of int or int range) Must be specified as a valid layer 4 port OR port range (e.g. 80 OR 8080-8088). IP Protocol (string, choice field) IANA protocols (e.g. TCP UDP ICMP) Status (FK to Status)","title":"ServiceObject"},{"location":"dev/models/serviceobject.html#serviceobject","text":"Service Object represents a single destination service. For well-known ports, it is best to use the port name as the name of the object. For example, a service called HTTP should map to TCP port 80. A non-standard service on port 8898 serving HTTP traffic could be called HTTP-8898 or HTTP-SomeDescriptorForService .","title":"ServiceObject"},{"location":"dev/models/serviceobject.html#attributes","text":"Name (string) Description (optional, string) Port (optional, int OR int range OR comma delimited list of int or int range) Must be specified as a valid layer 4 port OR port range (e.g. 80 OR 8080-8088). IP Protocol (string, choice field) IANA protocols (e.g. TCP UDP ICMP) Status (FK to Status)","title":"Attributes"},{"location":"dev/models/serviceobjectgroup.html","text":"ServiceObjectGroup \u00b6 Represents a group of Service Objects. Attributes \u00b6 Name (string) Description (optional, string) Service Objects (M2M to ServiceObject) Status (FK to Status)","title":"ServiceObjectGroup"},{"location":"dev/models/serviceobjectgroup.html#serviceobjectgroup","text":"Represents a group of Service Objects.","title":"ServiceObjectGroup"},{"location":"dev/models/serviceobjectgroup.html#attributes","text":"Name (string) Description (optional, string) Service Objects (M2M to ServiceObject) Status (FK to Status)","title":"Attributes"},{"location":"dev/models/userobject.html","text":"UserObject \u00b6 Defines a User and is NOT related to a user in Nautobot. User Object is commonly used to identify a source for traffic on networks with roaming users. Attributes \u00b6 Name (optional, string) Signifies the name of the user, commonly first and last name (e.g. John Smith). Most likely would not be used in a policy but as a helper to identify an object. Username (string) Signifies the username in identity provider (e.g. john.smith). Status (FK to Status)","title":"UserObject"},{"location":"dev/models/userobject.html#userobject","text":"Defines a User and is NOT related to a user in Nautobot. User Object is commonly used to identify a source for traffic on networks with roaming users.","title":"UserObject"},{"location":"dev/models/userobject.html#attributes","text":"Name (optional, string) Signifies the name of the user, commonly first and last name (e.g. John Smith). Most likely would not be used in a policy but as a helper to identify an object. Username (string) Signifies the username in identity provider (e.g. john.smith). Status (FK to Status)","title":"Attributes"},{"location":"dev/models/userobjectgroup.html","text":"UserObjectGroup \u00b6 Represents a group of User Objects. Attributes \u00b6 Name (string) Description (optional, string) User Objects (M2M to UserObject) Status (FK to Status)","title":"UserObjectGroup"},{"location":"dev/models/userobjectgroup.html#userobjectgroup","text":"Represents a group of User Objects.","title":"UserObjectGroup"},{"location":"dev/models/userobjectgroup.html#attributes","text":"Name (string) Description (optional, string) User Objects (M2M to UserObject) Status (FK to Status)","title":"Attributes"},{"location":"dev/models/zone.html","text":"Zone \u00b6 Zones are common on firewalls and are typically seen as representations of area (e.g. DMZ, trust, untrust). Attributes \u00b6 Name (string) Description (optional, string) VRFs (M2M to VRF) Interfaces (M2M to Interface) Status (FK to Status)","title":"Zone"},{"location":"dev/models/zone.html#zone","text":"Zones are common on firewalls and are typically seen as representations of area (e.g. DMZ, trust, untrust).","title":"Zone"},{"location":"dev/models/zone.html#attributes","text":"Name (string) Description (optional, string) VRFs (M2M to VRF) Interfaces (M2M to Interface) Status (FK to Status)","title":"Attributes"},{"location":"user/app_getting_started.html","text":"Getting Started with the App \u00b6 This document provides a step-by-step tutorial on how to get the App going and how to use it. Install the App \u00b6 To install the App, please follow the instructions detailed in the Installation Guide . You can check out the Use Cases section for more examples.","title":"Getting Started"},{"location":"user/app_getting_started.html#getting-started-with-the-app","text":"This document provides a step-by-step tutorial on how to get the App going and how to use it.","title":"Getting Started with the App"},{"location":"user/app_getting_started.html#install-the-app","text":"To install the App, please follow the instructions detailed in the Installation Guide . You can check out the Use Cases section for more examples.","title":"Install the App"},{"location":"user/app_overview.html","text":"App Overview \u00b6 This document provides an overview of the App including critical information and import considerations when applying it to your Nautobot environment. Note Throughout this documentation, the terms \"app\" and \"plugin\" will be used interchangeably. Description \u00b6 A plugin for Nautobot that is meant to model any of the following: Layer 4 firewall policies Extended access control lists NAT policies Generation of firewall configurations, via Capirca Future development will include the ability to onboard an existing access list from a device and the ability to generate device configuration. Audience (User Personas) - Who should use this App? \u00b6 This app will allow network and security engineers to model policies that drive their network and security automation. Even better, the firewall models are built to take a vendor-agnostic approach; the models are robust to provide maximum flexibility. Authors and Maintainers \u00b6 Jeremy White @whitej6 Nautobot Features Used \u00b6 To view the models that are added to Nautobot please see the dedicated models page.","title":"App Overview"},{"location":"user/app_overview.html#app-overview","text":"This document provides an overview of the App including critical information and import considerations when applying it to your Nautobot environment. Note Throughout this documentation, the terms \"app\" and \"plugin\" will be used interchangeably.","title":"App Overview"},{"location":"user/app_overview.html#description","text":"A plugin for Nautobot that is meant to model any of the following: Layer 4 firewall policies Extended access control lists NAT policies Generation of firewall configurations, via Capirca Future development will include the ability to onboard an existing access list from a device and the ability to generate device configuration.","title":"Description"},{"location":"user/app_overview.html#audience-user-personas-who-should-use-this-app","text":"This app will allow network and security engineers to model policies that drive their network and security automation. Even better, the firewall models are built to take a vendor-agnostic approach; the models are robust to provide maximum flexibility.","title":"Audience (User Personas) - Who should use this App?"},{"location":"user/app_overview.html#authors-and-maintainers","text":"Jeremy White @whitej6","title":"Authors and Maintainers"},{"location":"user/app_overview.html#nautobot-features-used","text":"To view the models that are added to Nautobot please see the dedicated models page.","title":"Nautobot Features Used"},{"location":"user/app_use_cases.html","text":"Using the App \u00b6 This document describes common use-cases and scenarios for this App. General Usage \u00b6 A detailed walkthrough is provided in the Introducing Nautobot Firewall Models blog post. Assigning Policies \u00b6 There are three primary ways of assigning policies ( Policy or NATPolicy objects) to devices: Directly via the assigned_devices attribute on a policy object. Dynamically by assigning an existing DynamicGroup object to the assigned_dynamic_groups field on a policy object. By creating a new Relationship specifying additional targets for policy association. This can be, for example, used to associate a policy with an Interface object. The use of a Relationship may limit future integrations with parsing or templating. Although policies can be created without any rules it is recommended to create the required underlying objects first before moving to the policy definitions. Creation Order provides an ordered list of steps for creating and assigning, objects, needed for policy creation. Use-cases and common workflows \u00b6 For examples of REST and GraphQL API usage see the External Interactions page. Should you wish to integrate Nautobot data with firewall configuration policies, please read the Capirca Integration page. Screenshots \u00b6","title":"Using the App"},{"location":"user/app_use_cases.html#using-the-app","text":"This document describes common use-cases and scenarios for this App.","title":"Using the App"},{"location":"user/app_use_cases.html#general-usage","text":"A detailed walkthrough is provided in the Introducing Nautobot Firewall Models blog post.","title":"General Usage"},{"location":"user/app_use_cases.html#assigning-policies","text":"There are three primary ways of assigning policies ( Policy or NATPolicy objects) to devices: Directly via the assigned_devices attribute on a policy object. Dynamically by assigning an existing DynamicGroup object to the assigned_dynamic_groups field on a policy object. By creating a new Relationship specifying additional targets for policy association. This can be, for example, used to associate a policy with an Interface object. The use of a Relationship may limit future integrations with parsing or templating. Although policies can be created without any rules it is recommended to create the required underlying objects first before moving to the policy definitions. Creation Order provides an ordered list of steps for creating and assigning, objects, needed for policy creation.","title":"Assigning Policies"},{"location":"user/app_use_cases.html#use-cases-and-common-workflows","text":"For examples of REST and GraphQL API usage see the External Interactions page. Should you wish to integrate Nautobot data with firewall configuration policies, please read the Capirca Integration page.","title":"Use-cases and common workflows"},{"location":"user/app_use_cases.html#screenshots","text":"","title":"Screenshots"},{"location":"user/capirca.html","text":"Capirca Integration \u00b6 The firewall model plugin provides the ability to integrate with Capirca for configuration generation. The authors have applied a very light opinion onto the translation from the firewall models to generate valid policy ( .pol ), network ( .net ), and service ( .svc ) files that are consumed by Capirca. FW Model Capirca Name (as applicable) Header - Filter Name Zone (as applicable) Header - to-zone/from-zone Source Address / Group Term - source-address Destination Address / Group Term - destination-address Destination Service / Group Term - destination-port, protocol Action Term - action Logging Term - logging Address - IP *.net Address - Prefix *.net Address Group *.net Service - tcp/udp *.svc Service Group *.svc Note If this terminology is not familiar, please review the documentation at Capirca . Special Considerations \u00b6 Capirca does not allow special characters in a majority of the named objects, as such named objects are modified to the ouput used when processed via a modified (to allow for capital letters) Django slugify , this includes: Policy name, policy rule name, address, address group, zone, service, service group e.g. Policy called \"Allow to Internet\" will be called \"Allow-to-Internet\" Note: This will not change barring a major update from Capirca FQDN and IP Range are not supported by Capirca and will fail if attempting to use those features The zone is only used where Capirca supports it, at the time of this writing is only Palo Alto and Juniper SRX Zone based firewalls have headers on every rule Both Juniper SRX and Palo Alto support using the named zone \"all\" to represent all zones, but in all cases a zone must be set The \"Filter Name\" is a concatenation of the Policies applied to a given firewall Not all firewalls get a filter name, such as zone or direction based firewalls, which require a chd_ custom field (more details below) An object (policy, policy rule, src-addr, dst-addr, etc.) is put into and out of use based on whether or not the status is active or as defined in your plugin configuration Anything other than active or defined in plugin setting allowed_status is ignored Removing the last active object in an source-address, destination-address, or service will fail the process to avoid your policy failing open The Platform network_driver must match the Capirca generator name You can optionally provide a mapping in the settings capirca_os_map to map from the current platform name, to the Capirca generator name The action of \"remark\" on a rule is not conidered, you can set the setting capirca_remark_pass=False if you want it to fail by default rather than silently skipping In addition to the above, you can add to any header or term by creating specific custom fields on the PolicyRule data model. They must start with: chd_ - Capirca Header Data - will be applied to the header for any given rule. ctd_ - Capirca Term Data - will be applied to the term for any given rule. The process is to create a custom field, such as ctd_pan-application , this will be applied to the PolicyRule as you describe. This can become problematic if you share the model for multiple firewall OSs. This can be conditionally applied via a custom field to the Platform model. This custom field must be named capirca_allow and be of type JSON and be a single list. For each OS defined by the platform, you can allow that custom field to populate. This allows you to use the same model, and not let the custom fields for one OS conflict with another OS. capirca_allow = [ 'ctd_pan-application' , 'ctd_expiration' ] Note: This is pseudo-code and is technically the custom_field called capirca_allow that has the data [\"ctd_pan-application\", \"ctd_expiration\"] in this example. As previously mentioned, there is only a small opinion that is applied from the translation between the model and Capirca. That being said, Capirca has an opinion on how rules and objects are deployed, and within this project there is no consideration for how that may not align with anyone's intention on how Capirca should work. All such considerations should be referred to the Capirca project. There is no intention to modify the output that Capirca creates in any situation within this plugin. That being said, in an effort to provide flexibility, you can override the translation process. However, you would be responsible for that implementation. You can provide within your setting, a dotted path import_string to your own function. This is provided in the custom_capirca setting within your Plugin Configurations. The signature takes a Device object instance and must return a tuple of (pol, svc, net, cfg) , none of which are required to have data. self . pol , self . svc , self . net , self . cfg = import_string ( PLUGIN_CFG [ \"custom_capirca\" ])( self . device ) Summary \u00b6 To summarize, what this integration provides and does not provide. Provides \u00b6 Integrations with Capirca The ability to manage per platform Headers and Terms A Job that generated the configurations at the time you want The ability to override the opinionated Capirca solution Does not Provide \u00b6 An opinionated configuration management solution that matches anything other than Capirca-provided configurations The ability to push configurations directly and natively from Nautobot The immediate updating from data in a Policy or PolicyRule that gets reflected in the configuration, instead when the job is ran Any post processing of configuration or pre-validation of data (such as checking if object name starts with an integer)","title":"Capirca Integration"},{"location":"user/capirca.html#capirca-integration","text":"The firewall model plugin provides the ability to integrate with Capirca for configuration generation. The authors have applied a very light opinion onto the translation from the firewall models to generate valid policy ( .pol ), network ( .net ), and service ( .svc ) files that are consumed by Capirca. FW Model Capirca Name (as applicable) Header - Filter Name Zone (as applicable) Header - to-zone/from-zone Source Address / Group Term - source-address Destination Address / Group Term - destination-address Destination Service / Group Term - destination-port, protocol Action Term - action Logging Term - logging Address - IP *.net Address - Prefix *.net Address Group *.net Service - tcp/udp *.svc Service Group *.svc Note If this terminology is not familiar, please review the documentation at Capirca .","title":"Capirca Integration"},{"location":"user/capirca.html#special-considerations","text":"Capirca does not allow special characters in a majority of the named objects, as such named objects are modified to the ouput used when processed via a modified (to allow for capital letters) Django slugify , this includes: Policy name, policy rule name, address, address group, zone, service, service group e.g. Policy called \"Allow to Internet\" will be called \"Allow-to-Internet\" Note: This will not change barring a major update from Capirca FQDN and IP Range are not supported by Capirca and will fail if attempting to use those features The zone is only used where Capirca supports it, at the time of this writing is only Palo Alto and Juniper SRX Zone based firewalls have headers on every rule Both Juniper SRX and Palo Alto support using the named zone \"all\" to represent all zones, but in all cases a zone must be set The \"Filter Name\" is a concatenation of the Policies applied to a given firewall Not all firewalls get a filter name, such as zone or direction based firewalls, which require a chd_ custom field (more details below) An object (policy, policy rule, src-addr, dst-addr, etc.) is put into and out of use based on whether or not the status is active or as defined in your plugin configuration Anything other than active or defined in plugin setting allowed_status is ignored Removing the last active object in an source-address, destination-address, or service will fail the process to avoid your policy failing open The Platform network_driver must match the Capirca generator name You can optionally provide a mapping in the settings capirca_os_map to map from the current platform name, to the Capirca generator name The action of \"remark\" on a rule is not conidered, you can set the setting capirca_remark_pass=False if you want it to fail by default rather than silently skipping In addition to the above, you can add to any header or term by creating specific custom fields on the PolicyRule data model. They must start with: chd_ - Capirca Header Data - will be applied to the header for any given rule. ctd_ - Capirca Term Data - will be applied to the term for any given rule. The process is to create a custom field, such as ctd_pan-application , this will be applied to the PolicyRule as you describe. This can become problematic if you share the model for multiple firewall OSs. This can be conditionally applied via a custom field to the Platform model. This custom field must be named capirca_allow and be of type JSON and be a single list. For each OS defined by the platform, you can allow that custom field to populate. This allows you to use the same model, and not let the custom fields for one OS conflict with another OS. capirca_allow = [ 'ctd_pan-application' , 'ctd_expiration' ] Note: This is pseudo-code and is technically the custom_field called capirca_allow that has the data [\"ctd_pan-application\", \"ctd_expiration\"] in this example. As previously mentioned, there is only a small opinion that is applied from the translation between the model and Capirca. That being said, Capirca has an opinion on how rules and objects are deployed, and within this project there is no consideration for how that may not align with anyone's intention on how Capirca should work. All such considerations should be referred to the Capirca project. There is no intention to modify the output that Capirca creates in any situation within this plugin. That being said, in an effort to provide flexibility, you can override the translation process. However, you would be responsible for that implementation. You can provide within your setting, a dotted path import_string to your own function. This is provided in the custom_capirca setting within your Plugin Configurations. The signature takes a Device object instance and must return a tuple of (pol, svc, net, cfg) , none of which are required to have data. self . pol , self . svc , self . net , self . cfg = import_string ( PLUGIN_CFG [ \"custom_capirca\" ])( self . device )","title":"Special Considerations"},{"location":"user/capirca.html#summary","text":"To summarize, what this integration provides and does not provide.","title":"Summary"},{"location":"user/capirca.html#provides","text":"Integrations with Capirca The ability to manage per platform Headers and Terms A Job that generated the configurations at the time you want The ability to override the opinionated Capirca solution","title":"Provides"},{"location":"user/capirca.html#does-not-provide","text":"An opinionated configuration management solution that matches anything other than Capirca-provided configurations The ability to push configurations directly and natively from Nautobot The immediate updating from data in a Policy or PolicyRule that gets reflected in the configuration, instead when the job is ran Any post processing of configuration or pre-validation of data (such as checking if object name starts with an integer)","title":"Does not Provide"},{"location":"user/external_interactions.html","text":"External Interactions \u00b6 Nautobot REST API endpoints \u00b6 These examples are based on the same data used in unittesting of the plugin. To load the data for testing in a development environment use the invoke testdata command. If you are not using the local development environment you are still in luck. The invoke command is actually wrapping nautobot-server create_test_firewall_data . This management command is available to any environment that has this plugin installed and listed in PLUGINS in the nautobot_config.py . All firewall models are built with the use of both the REST API and GraphQL API available to the end user. GraphQL \u00b6 Example GraphQL query showing how to get instances for each of the models provided by this plugin: Query \u00b6 { policies { name assigned_devices { name } assigned_dynamic_groups { name } policy_rules { name request_id action log source_user { username } source_user_group { name user_objects { username } } source_zone { name } source_address { ip_address { address } ip_range { start_address end_address } } source_address_group { address_objects { ip_address { address } ip_range { start_address end_address } } } destination_zone { name } destination_address { ip_address { address } ip_range { start_address end_address } } destination_address_group { address_objects { ip_address { address } ip_range { start_address end_address } } } } } } Response \u00b6 { \"data\" : { \"policies\" : [ { \"name\" : \"Policy 1\" , \"assigned_devices\" : [ { \"name\" : \"DFW-WAN00\" }, { \"name\" : \"HOU-WAN00\" } ], \"assigned_dynamic_groups\" : [], \"policy_rules\" : [ { \"name\" : \"Policy Rule 1\" , \"request_id\" : \"req1\" , \"action\" : \"DENY\" , \"log\" : true , \"source_user\" : [ { \"username\" : \"user1\" } ], \"source_user_group\" : [ { \"name\" : \"usr group1\" , \"user_objects\" : [ { \"username\" : \"user1\" } ] } ], \"source_zone\" : null , \"source_address\" : [ { \"ip_address\" : null , \"ip_range\" : { \"start_address\" : \"192.168.0.11\" , \"end_address\" : \"192.168.0.20\" } } ], \"source_address_group\" : [ { \"address_objects\" : [ { \"ip_address\" : null , \"ip_range\" : { \"start_address\" : \"192.168.0.11\" , \"end_address\" : \"192.168.0.20\" } }, { \"ip_address\" : { \"address\" : \"10.0.0.1/32\" }, \"ip_range\" : null } ] } ], \"destination_zone\" : null , \"destination_address\" : [ { \"ip_address\" : null , \"ip_range\" : null } ], \"destination_address_group\" : [ { \"address_objects\" : [ { \"ip_address\" : null , \"ip_range\" : { \"start_address\" : \"192.168.0.11\" , \"end_address\" : \"192.168.0.20\" } }, { \"ip_address\" : null , \"ip_range\" : null }, { \"ip_address\" : null , \"ip_range\" : null }, { \"ip_address\" : { \"address\" : \"10.0.0.1/32\" }, \"ip_range\" : null } ] } ] } ] } ] } }","title":"External Interactions"},{"location":"user/external_interactions.html#external-interactions","text":"","title":"External Interactions"},{"location":"user/external_interactions.html#nautobot-rest-api-endpoints","text":"These examples are based on the same data used in unittesting of the plugin. To load the data for testing in a development environment use the invoke testdata command. If you are not using the local development environment you are still in luck. The invoke command is actually wrapping nautobot-server create_test_firewall_data . This management command is available to any environment that has this plugin installed and listed in PLUGINS in the nautobot_config.py . All firewall models are built with the use of both the REST API and GraphQL API available to the end user.","title":"Nautobot REST API endpoints"},{"location":"user/external_interactions.html#graphql","text":"Example GraphQL query showing how to get instances for each of the models provided by this plugin:","title":"GraphQL"},{"location":"user/external_interactions.html#query","text":"{ policies { name assigned_devices { name } assigned_dynamic_groups { name } policy_rules { name request_id action log source_user { username } source_user_group { name user_objects { username } } source_zone { name } source_address { ip_address { address } ip_range { start_address end_address } } source_address_group { address_objects { ip_address { address } ip_range { start_address end_address } } } destination_zone { name } destination_address { ip_address { address } ip_range { start_address end_address } } destination_address_group { address_objects { ip_address { address } ip_range { start_address end_address } } } } } }","title":"Query"},{"location":"user/external_interactions.html#response","text":"{ \"data\" : { \"policies\" : [ { \"name\" : \"Policy 1\" , \"assigned_devices\" : [ { \"name\" : \"DFW-WAN00\" }, { \"name\" : \"HOU-WAN00\" } ], \"assigned_dynamic_groups\" : [], \"policy_rules\" : [ { \"name\" : \"Policy Rule 1\" , \"request_id\" : \"req1\" , \"action\" : \"DENY\" , \"log\" : true , \"source_user\" : [ { \"username\" : \"user1\" } ], \"source_user_group\" : [ { \"name\" : \"usr group1\" , \"user_objects\" : [ { \"username\" : \"user1\" } ] } ], \"source_zone\" : null , \"source_address\" : [ { \"ip_address\" : null , \"ip_range\" : { \"start_address\" : \"192.168.0.11\" , \"end_address\" : \"192.168.0.20\" } } ], \"source_address_group\" : [ { \"address_objects\" : [ { \"ip_address\" : null , \"ip_range\" : { \"start_address\" : \"192.168.0.11\" , \"end_address\" : \"192.168.0.20\" } }, { \"ip_address\" : { \"address\" : \"10.0.0.1/32\" }, \"ip_range\" : null } ] } ], \"destination_zone\" : null , \"destination_address\" : [ { \"ip_address\" : null , \"ip_range\" : null } ], \"destination_address_group\" : [ { \"address_objects\" : [ { \"ip_address\" : null , \"ip_range\" : { \"start_address\" : \"192.168.0.11\" , \"end_address\" : \"192.168.0.20\" } }, { \"ip_address\" : null , \"ip_range\" : null }, { \"ip_address\" : null , \"ip_range\" : null }, { \"ip_address\" : { \"address\" : \"10.0.0.1/32\" }, \"ip_range\" : null } ] } ] } ] } ] } }","title":"Response"},{"location":"user/faq.html","text":"Frequently Asked Questions \u00b6","title":"Frequently Asked Questions"},{"location":"user/faq.html#frequently-asked-questions","text":"","title":"Frequently Asked Questions"}]}