{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Overview","text":"<p>Welcome to the Nautobot Core Documentation! Use the top navigation bar to read about:</p> <ul> <li>Installing Nautobot, Configuring Nautobot, Getting Started with the Web Interface, REST and GraphQL APIs, Apps, additional features and much more can be found under the Documentation section.</li> <li>Learn about how to Develop and Contribute to Nautobot, Set up your Development Environment, and more under the Development Guide section.</li> <li>Nautobot has a thriving ecosystem of Apps (also known as Plugins), developed as separate projects, for which you can find links to documentation under the Nautobot Apps section.</li> </ul>"},{"location":"index.html#what-is-nautobot","title":"What is Nautobot?","text":"<p>Nautobot is an open source Network Source of Truth and Network Automation Platform. Nautobot was initially developed as a fork of NetBox (v2.10.4), which was originally created by Jeremy Stretch at DigitalOcean and by the NetBox open source community.</p>"},{"location":"index.html#key-use-cases","title":"Key Use Cases","text":"<p>Nautobot enables three (3) key use cases.</p> <ol> <li> <p>Flexible Source of Truth for Networking - Nautobot core data models are used to define the intended state of network infrastructure enabling it as a Source of Truth. While a baseline set of models are provided (such as IP networks and addresses, devices and racks, circuits and cable, etc.) it is Nautobot's goal to offer maximum data model flexibility. This is enabled through features such as user-defined relationships, custom fields on any model, and data validation that permits users to codify everything from naming standards to having automated tests run before data can be populated into Nautobot.</p> </li> <li> <p>Extensible Data Platform for Automation - Nautobot has a rich feature set to seamlessly integrate with network automation solutions.  Nautobot offers GraphQL and native Git integration along with REST APIs and webhooks.  Git integration dynamically loads YAML data files as Nautobot config contexts.  Nautobot also has an evolving plugin system that enables users to create custom models, APIs, and UI elements.  The plugin system is also used to unify and aggregate disparate data sources creating a Single Source of Truth to streamline data management for network automation.</p> </li> <li> <p>Platform for Network Automation Apps - The Nautobot plugin system enables users to create Network Automation Apps.  Apps can be as lightweight or robust as needed based on user needs.  Using Nautobot for creating custom applications saves up to 70% development time by re-using features such as authentication, permissions, webhooks, GraphQL, change logging, etc. all while having access to the data already stored in Nautobot. Some production ready applications include:</p> <ul> <li>Golden Configuration</li> <li>Device Lifecycle</li> <li>Firewall Models</li> <li>SSoT</li> <li>ChatOps</li> <li>Circuit Maintenance</li> <li>Capacity Metrics</li> <li>Device Onboarding</li> </ul> </li> </ol>"},{"location":"index.html#design-philosophy","title":"Design Philosophy","text":"<p>The following tenets drive the direction of Nautobot.</p>"},{"location":"index.html#replicate-the-real-world","title":"Replicate the Real World","text":"<p>Careful consideration has been given to the data model to ensure that it can accurately reflect a real-world network. For instance, IP addresses are assigned not to devices, but to specific interfaces attached to a device, and an interface may have multiple IP addresses assigned to it.</p>"},{"location":"index.html#serve-as-a-source-of-truth-sot","title":"Serve as a Source of Truth (SoT)","text":"<p>Nautobot intends to represent the desired state of a network versus its operational state. While plugins and apps can be built and integrated with Nautobot to extend its capabilities to various aspects of the operational state, the core platform's focus is on the desired state.</p>"},{"location":"index.html#serve-as-a-network-automation-platform","title":"Serve as a Network Automation Platform","text":"<p>Nautobot intends to be a vehicle to deliver high-value network automation apps.  Using the extensible plugin system, users have the choice and freedom to create the integrations that make sense for them.</p>"},{"location":"index.html#ensure-maximum-flexibility-extensibility","title":"Ensure Maximum Flexibility &amp; Extensibility","text":"<p>While Nautobot intends to replicate the real world and offer opinionated models to get started defining the intended state of the network, it is understood that organizations and networks have unique design considerations that may need to be addressed in the SoT or Network Automation Platform.  Nautobot strives to enable flexibility and extensibility to power and automate all types of networks.</p>"},{"location":"index.html#keep-it-simple","title":"Keep it Simple","text":"<p>When given a choice between a relatively simple 80% solution and a much more complex complete solution, the former will typically be favored. This ensures a lean codebase with a low learning curve.</p>"},{"location":"index.html#application-stack","title":"Application Stack","text":"<p>Nautobot is built on the Django Python Web framework and requires either a PostgreSQL or MySQL database backend. It runs as a WSGI service behind your choice of HTTP server.</p> Function Component HTTP service NGINX WSGI service uWSGI or Gunicorn Application Django/Python Database PostgreSQL 9.6+ or MySQL 8.0+ Cache Django/Redis Task queuing Redis/Celery Live device access NAPALM <p>Added in version 1.1.0</p> <p>MySQL support was added.</p> <p>Removed in version 2.0.0</p> <ul> <li><code>django-rq</code> support was removed.</li> <li><code>django-cacheops</code> usage was removed and replaced with Django's native caching features.</li> </ul> <p>The following diagram displays how data travels through Nautobot's application stack.</p> <p></p>"},{"location":"index.html#supported-python-versions","title":"Supported Python Versions","text":"<p>Nautobot supports Python 3.8 through 3.11.</p> <p>Added in version 1.3.0</p> <p>Python 3.10 support was added.</p> <p>Removed in version 1.3.0</p> <p>Python 3.6 support was removed.</p> <p>Changed in version 1.6.0</p> <p>Python 3.11 support was added and Python 3.7 support was removed.</p>"},{"location":"index.html#getting-started","title":"Getting Started","text":"<p>See the installation guide for help getting Nautobot up and running quickly.</p>"},{"location":"apps/index.html","title":"Nautobot Apps Overview","text":"<p>To view and search the full list of Apps, head over to the Nautobot App Ecosystem Page on networktocode.com. Below you will only find links to the documentation for the apps listed in the table.</p>"},{"location":"apps/index.html#community-developed-nautobot-apps","title":"Community-Developed Nautobot Apps","text":"<p>Find out more about what documentation is available for the various community developed Nautobot Apps by visiting the Community Apps page.</p>"},{"location":"apps/index.html#network-to-code-nautobot-apps","title":"Network to Code Nautobot Apps","text":"<p>These Nautobot Apps have their documentation hosted as a subproject of this docs site and they are built and structured according to the Network To Code documentation standards.</p> App Name Description Nautobot ChatOps Add chatbot functionality to Nautobot to facilitate getting data from Nautobot directly from a chat platform. The ChatOps app is a multi-platform chatbot for network operations and engineering teams. It is built to seamlessly work across Slack, MS Teams, WebEx Teams, and Mattermost, but also as a framework to help developers add more chat platforms in the future. Nautobot Data Validation Engine Create custom, user-defined validation rules that can be used to enforce business constraints on the data within Nautobot. Nautobot Device Lifecycle Management Make related associations to Devices, Device Types, and Inventory Items to help provide data about the hardware end of life notices, appropriate software versions to be running on the devices, and the maintenance contracts associated with devices. Nautobot Device Onboarding Simplify the onboarding process of a new device by allowing the user to specify a small amount of info and having the plugin populate a much larger amount of device data in Nautobot. Nautobot Firewall Models Construct firewall policies in Nautobot with the help of the provided collection of relevant models. Nautobot Golden Configuration Automate configuration backups, perform configuration compliance, and generate intended configurations. Nautobot Plugin Nornir Provides a small shim layer between nornir-nautobot and other plugins. The primary abilities that the plugin provides are a native Nornir ORM based inventory and a credential manager. Nautobot Single Source of Truth (SSoT) Integrate and synchronize data between various \"source of truth\" (SoT) systems, with Nautobot acting as a central clearinghouse for data - a Single Source of Truth"},{"location":"apps/nautobot-apps.html","title":"Nautobot Community Apps","text":"<p>The following is a manually curated list of Apps/Plugins from the wider Nautobot community, which have some sort of documentation.</p> App Name Links Description Nautobot SSoT vSphere DocsGitHub A plugin for Nautobot that leverages the SSoT plugin to create Virtual Machines, VMInterfaces, IPAddresses, Clusters, and Cluster Groups from VMWare vSphere. GWDG Networking Team Plugins GitLab nautobot-movenautobot-bulk-connectnautobot-cable-utilsnautobot-evpnnautobot-sfp-inventorynautobot-type-reapplyand more."},{"location":"code-reference/nautobot/apps/__init__.html","title":"nautobot.apps","text":""},{"location":"code-reference/nautobot/apps/__init__.html#nautobot.apps","title":"<code>nautobot.apps</code>","text":"<p>Core app functionality.</p>"},{"location":"code-reference/nautobot/apps/__init__.html#nautobot.apps.nautobot_database_ready","title":"<code>nautobot.apps.nautobot_database_ready = Signal()</code>  <code>module-attribute</code>","text":"<p>Signal sent to all installed apps and plugins after the database is ready.</p> <p>Specifically this is triggered by the Django built-in <code>post_migrate</code> signal, i.e., after <code>nautobot-server migrate</code> or <code>nautobot-server post_upgrade</code> commands are run.</p> <p>In other words, this signal is not emitted during the actual server execution; rather it is emitted when setting up the database prior to running the server.</p> <p>The intended purpose of this signal is for apps and plugins that need to populate or modify the database contents (not the database schema itself!), for example to ensure the existence of certain CustomFields, Jobs, Relationships, etc.</p>"},{"location":"code-reference/nautobot/apps/__init__.html#nautobot.apps.NautobotAppConfig","title":"<code>nautobot.apps.NautobotAppConfig</code>","text":"<p>             Bases: <code>NautobotConfig</code></p> <p>Subclass of Django's built-in AppConfig class, to be used for Nautobot plugins.</p> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>class NautobotAppConfig(NautobotConfig):\n\"\"\"\n    Subclass of Django's built-in AppConfig class, to be used for Nautobot plugins.\n    \"\"\"\n# Plugin metadata\nauthor = \"\"\nauthor_email = \"\"\ndescription = \"\"\nversion = \"\"\n# Root URL path under /plugins. If not set, the plugin's label will be used.\nbase_url = None\n# Minimum/maximum compatible versions of Nautobot\nmin_version = None\nmax_version = None\n# Default configuration parameters\ndefault_settings = {}\n# Mandatory configuration parameters\nrequired_settings = []\n# Middleware classes provided by the plugin\nmiddleware = []\n# Extra installed apps provided or required by the plugin. These will be registered\n# along with the plugin.\ninstalled_apps = []\n# Default constance configuration parameters\nconstance_config = {}\n# URL reverse lookup names, a la \"plugins:myplugin:home\", \"plugins:myplugin:configure\", \"plugins:myplugin:docs\"\nhome_view_name = None\nconfig_view_name = None\ndocs_view_name = None\n# Default integration paths. Plugin authors can override these to customize the paths to\n# integrated components.\nbanner_function = \"banner.banner\"\ncustom_validators = \"custom_validators.custom_validators\"\ndatasource_contents = \"datasources.datasource_contents\"\nfilter_extensions = \"filter_extensions.filter_extensions\"\ngraphql_types = \"graphql.types.graphql_types\"\nhomepage_layout = \"homepage.layout\"\njinja_filters = \"jinja_filters\"\njobs = \"jobs.jobs\"\nmetrics = \"metrics.metrics\"\nmenu_items = \"navigation.menu_items\"\nsecrets_providers = \"secrets.secrets_providers\"\ntemplate_extensions = \"template_content.template_extensions\"\noverride_views = \"views.override_views\"\ndef ready(self):\n\"\"\"Callback after plugin app is loaded.\"\"\"\n# We don't call super().ready here because we don't need or use the on-ready behavior of a core Nautobot app\n# Introspect URL patterns and models to make available to the installed-plugins detail UI view.\nurlpatterns = import_object(f\"{self.__module__}.urls.urlpatterns\")\napi_urlpatterns = import_object(f\"{self.__module__}.api.urls.urlpatterns\")\nself.features = {\n\"api_urlpatterns\": sorted(\n(urlp for urlp in (api_urlpatterns or []) if isinstance(urlp, URLPattern)),\nkey=lambda urlp: (urlp.name, str(urlp.pattern)),\n),\n\"models\": sorted(model._meta.verbose_name for model in self.get_models()),\n\"urlpatterns\": sorted(\n(urlp for urlp in (urlpatterns or []) if isinstance(urlp, URLPattern)),\nkey=lambda urlp: (urlp.name, str(urlp.pattern)),\n),\n\"constance_config\": self.constance_config,\n}\n# Register banner function (if defined)\nbanner_function = import_object(f\"{self.__module__}.{self.banner_function}\")\nif banner_function is not None:\nregister_banner_function(banner_function)\nself.features[\"banner\"] = True\n# Register model validators (if defined)\nvalidators = import_object(f\"{self.__module__}.{self.custom_validators}\")\nif validators is not None:\nregister_custom_validators(validators)\nself.features[\"custom_validators\"] = sorted(set(validator.model for validator in validators))\n# Register datasource contents (if defined)\ndatasource_contents = import_object(f\"{self.__module__}.{self.datasource_contents}\")\nif datasource_contents is not None:\nregister_datasource_contents(datasource_contents)\nself.features[\"datasource_contents\"] = datasource_contents\n# Register GraphQL types (if defined)\ngraphql_types = import_object(f\"{self.__module__}.{self.graphql_types}\")\nif graphql_types is not None:\nregister_graphql_types(graphql_types)\n# Import jobs (if present)\njobs = import_object(f\"{self.__module__}.{self.jobs}\")\nif jobs is not None:\nregister_jobs(jobs)\nself.features[\"jobs\"] = jobs\n# Import metrics (if present)\nmetrics = import_object(f\"{self.__module__}.{self.metrics}\")\nif metrics is not None:\nregister_metrics(metrics)\nself.features[\"metrics\"] = []  # Initialize as empty, to be filled by the signal handler\n# Inject the metrics to discover into the signal handler.\nsignal_callback = partial(discover_metrics, metrics=metrics)\nnautobot_database_ready.connect(signal_callback, sender=self)\n# Register plugin navigation menu items (if defined)\nmenu_items = import_object(f\"{self.__module__}.{self.menu_items}\")\nif menu_items is not None:\nregister_plugin_menu_items(self.verbose_name, menu_items)\nself.features[\"nav_menu\"] = menu_items\nhomepage_layout = import_object(f\"{self.__module__}.{self.homepage_layout}\")\nif homepage_layout is not None:\nregister_homepage_panels(self.path, self.label, homepage_layout)\nself.features[\"home_page\"] = homepage_layout\n# Register template content (if defined)\ntemplate_extensions = import_object(f\"{self.__module__}.{self.template_extensions}\")\nif template_extensions is not None:\nregister_template_extensions(template_extensions)\nself.features[\"template_extensions\"] = sorted(set(extension.model for extension in template_extensions))\n# Register custom jinja filters\ntry:\nimport_module(f\"{self.__module__}.{self.jinja_filters}\")\nself.features[\"jinja_filters\"] = True\nexcept ModuleNotFoundError:\npass\n# Register secrets providers (if any)\nsecrets_providers = import_object(f\"{self.__module__}.{self.secrets_providers}\")\nif secrets_providers is not None:\nfor secrets_provider in secrets_providers:\nregister_secrets_provider(secrets_provider)\nself.features[\"secrets_providers\"] = secrets_providers\n# Register custom filters (if any)\nfilter_extensions = import_object(f\"{self.__module__}.{self.filter_extensions}\")\nif filter_extensions is not None:\nregister_filter_extensions(filter_extensions, self.name)\nself.features[\"filter_extensions\"] = {\"filterset_fields\": [], \"filterform_fields\": []}\nfor filter_extension in filter_extensions:\nfor filterset_field_name in filter_extension.filterset_fields.keys():\nself.features[\"filter_extensions\"][\"filterset_fields\"].append(\nf\"{filter_extension.model} -&gt; {filterset_field_name}\"\n)\nfor filterform_field_name in filter_extension.filterform_fields.keys():\nself.features[\"filter_extensions\"][\"filterform_fields\"].append(\nf\"{filter_extension.model} -&gt; {filterform_field_name}\"\n)\n# Register override view (if any)\noverride_views = import_object(f\"{self.__module__}.{self.override_views}\")\nif override_views is not None:\nfor qualified_view_name, view in override_views.items():\nself.features.setdefault(\"overridden_views\", []).append(\n(qualified_view_name, f\"{view.__module__}.{view.__name__}\")\n)\nregister_override_views(override_views, self.name)\n@classmethod\ndef validate(cls, user_config, nautobot_version):\n\"\"\"Validate the user_config for baseline correctness.\"\"\"\nplugin_name = cls.__module__\n# Enforce version constraints\ncurrent_version = version.parse(nautobot_version)\nif cls.min_version is not None:\nmin_version = version.parse(cls.min_version)\nif current_version &lt; min_version:\nraise PluginImproperlyConfigured(\nf\"Plugin {plugin_name} requires Nautobot minimum version {cls.min_version}\"\n)\nif cls.max_version is not None:\nmax_version = version.parse(cls.max_version)\nif current_version &gt; max_version:\nraise PluginImproperlyConfigured(\nf\"Plugin {plugin_name} requires Nautobot maximum version {cls.max_version}\"\n)\n# Mapping of {setting_name: setting_type} used to validate user configs\n# TODO(jathan): This is fine for now, but as we expand the functionality\n# of plugins, we'll need to consider something like pydantic or attrs.\nsetting_validations = {\n\"default_settings\": dict,\n\"installed_apps\": list,\n\"middleware\": list,\n\"required_settings\": list,\n}\n# Validate user settings\nfor setting_name, setting_type in setting_validations.items():\nif not isinstance(getattr(cls, setting_name), setting_type):\nraise PluginImproperlyConfigured(f\"Plugin {plugin_name} {setting_name} must be a {setting_type}\")\n# Validate the required_settings\nfor setting in cls.required_settings:\nif setting not in user_config:\nraise PluginImproperlyConfigured(\nf\"Plugin {plugin_name} requires '{setting}' to be present in \"\nf\"the PLUGINS_CONFIG['{plugin_name}'] section of your settings.\"\n)\n# Apply default configuration values\nfor setting, value in cls.default_settings.items():\n# user_config and constance_config take precedence\n# this is to support legacy apps that supply default_settings and constance_config\nif setting not in user_config and setting not in cls.constance_config:\nuser_config[setting] = value\n</code></pre>"},{"location":"code-reference/nautobot/apps/__init__.html#nautobot.extras.plugins.NautobotAppConfig.ready","title":"<code>ready()</code>","text":"<p>Callback after plugin app is loaded.</p> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>def ready(self):\n\"\"\"Callback after plugin app is loaded.\"\"\"\n# We don't call super().ready here because we don't need or use the on-ready behavior of a core Nautobot app\n# Introspect URL patterns and models to make available to the installed-plugins detail UI view.\nurlpatterns = import_object(f\"{self.__module__}.urls.urlpatterns\")\napi_urlpatterns = import_object(f\"{self.__module__}.api.urls.urlpatterns\")\nself.features = {\n\"api_urlpatterns\": sorted(\n(urlp for urlp in (api_urlpatterns or []) if isinstance(urlp, URLPattern)),\nkey=lambda urlp: (urlp.name, str(urlp.pattern)),\n),\n\"models\": sorted(model._meta.verbose_name for model in self.get_models()),\n\"urlpatterns\": sorted(\n(urlp for urlp in (urlpatterns or []) if isinstance(urlp, URLPattern)),\nkey=lambda urlp: (urlp.name, str(urlp.pattern)),\n),\n\"constance_config\": self.constance_config,\n}\n# Register banner function (if defined)\nbanner_function = import_object(f\"{self.__module__}.{self.banner_function}\")\nif banner_function is not None:\nregister_banner_function(banner_function)\nself.features[\"banner\"] = True\n# Register model validators (if defined)\nvalidators = import_object(f\"{self.__module__}.{self.custom_validators}\")\nif validators is not None:\nregister_custom_validators(validators)\nself.features[\"custom_validators\"] = sorted(set(validator.model for validator in validators))\n# Register datasource contents (if defined)\ndatasource_contents = import_object(f\"{self.__module__}.{self.datasource_contents}\")\nif datasource_contents is not None:\nregister_datasource_contents(datasource_contents)\nself.features[\"datasource_contents\"] = datasource_contents\n# Register GraphQL types (if defined)\ngraphql_types = import_object(f\"{self.__module__}.{self.graphql_types}\")\nif graphql_types is not None:\nregister_graphql_types(graphql_types)\n# Import jobs (if present)\njobs = import_object(f\"{self.__module__}.{self.jobs}\")\nif jobs is not None:\nregister_jobs(jobs)\nself.features[\"jobs\"] = jobs\n# Import metrics (if present)\nmetrics = import_object(f\"{self.__module__}.{self.metrics}\")\nif metrics is not None:\nregister_metrics(metrics)\nself.features[\"metrics\"] = []  # Initialize as empty, to be filled by the signal handler\n# Inject the metrics to discover into the signal handler.\nsignal_callback = partial(discover_metrics, metrics=metrics)\nnautobot_database_ready.connect(signal_callback, sender=self)\n# Register plugin navigation menu items (if defined)\nmenu_items = import_object(f\"{self.__module__}.{self.menu_items}\")\nif menu_items is not None:\nregister_plugin_menu_items(self.verbose_name, menu_items)\nself.features[\"nav_menu\"] = menu_items\nhomepage_layout = import_object(f\"{self.__module__}.{self.homepage_layout}\")\nif homepage_layout is not None:\nregister_homepage_panels(self.path, self.label, homepage_layout)\nself.features[\"home_page\"] = homepage_layout\n# Register template content (if defined)\ntemplate_extensions = import_object(f\"{self.__module__}.{self.template_extensions}\")\nif template_extensions is not None:\nregister_template_extensions(template_extensions)\nself.features[\"template_extensions\"] = sorted(set(extension.model for extension in template_extensions))\n# Register custom jinja filters\ntry:\nimport_module(f\"{self.__module__}.{self.jinja_filters}\")\nself.features[\"jinja_filters\"] = True\nexcept ModuleNotFoundError:\npass\n# Register secrets providers (if any)\nsecrets_providers = import_object(f\"{self.__module__}.{self.secrets_providers}\")\nif secrets_providers is not None:\nfor secrets_provider in secrets_providers:\nregister_secrets_provider(secrets_provider)\nself.features[\"secrets_providers\"] = secrets_providers\n# Register custom filters (if any)\nfilter_extensions = import_object(f\"{self.__module__}.{self.filter_extensions}\")\nif filter_extensions is not None:\nregister_filter_extensions(filter_extensions, self.name)\nself.features[\"filter_extensions\"] = {\"filterset_fields\": [], \"filterform_fields\": []}\nfor filter_extension in filter_extensions:\nfor filterset_field_name in filter_extension.filterset_fields.keys():\nself.features[\"filter_extensions\"][\"filterset_fields\"].append(\nf\"{filter_extension.model} -&gt; {filterset_field_name}\"\n)\nfor filterform_field_name in filter_extension.filterform_fields.keys():\nself.features[\"filter_extensions\"][\"filterform_fields\"].append(\nf\"{filter_extension.model} -&gt; {filterform_field_name}\"\n)\n# Register override view (if any)\noverride_views = import_object(f\"{self.__module__}.{self.override_views}\")\nif override_views is not None:\nfor qualified_view_name, view in override_views.items():\nself.features.setdefault(\"overridden_views\", []).append(\n(qualified_view_name, f\"{view.__module__}.{view.__name__}\")\n)\nregister_override_views(override_views, self.name)\n</code></pre>"},{"location":"code-reference/nautobot/apps/__init__.html#nautobot.extras.plugins.NautobotAppConfig.validate","title":"<code>validate(user_config, nautobot_version)</code>  <code>classmethod</code>","text":"<p>Validate the user_config for baseline correctness.</p> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>@classmethod\ndef validate(cls, user_config, nautobot_version):\n\"\"\"Validate the user_config for baseline correctness.\"\"\"\nplugin_name = cls.__module__\n# Enforce version constraints\ncurrent_version = version.parse(nautobot_version)\nif cls.min_version is not None:\nmin_version = version.parse(cls.min_version)\nif current_version &lt; min_version:\nraise PluginImproperlyConfigured(\nf\"Plugin {plugin_name} requires Nautobot minimum version {cls.min_version}\"\n)\nif cls.max_version is not None:\nmax_version = version.parse(cls.max_version)\nif current_version &gt; max_version:\nraise PluginImproperlyConfigured(\nf\"Plugin {plugin_name} requires Nautobot maximum version {cls.max_version}\"\n)\n# Mapping of {setting_name: setting_type} used to validate user configs\n# TODO(jathan): This is fine for now, but as we expand the functionality\n# of plugins, we'll need to consider something like pydantic or attrs.\nsetting_validations = {\n\"default_settings\": dict,\n\"installed_apps\": list,\n\"middleware\": list,\n\"required_settings\": list,\n}\n# Validate user settings\nfor setting_name, setting_type in setting_validations.items():\nif not isinstance(getattr(cls, setting_name), setting_type):\nraise PluginImproperlyConfigured(f\"Plugin {plugin_name} {setting_name} must be a {setting_type}\")\n# Validate the required_settings\nfor setting in cls.required_settings:\nif setting not in user_config:\nraise PluginImproperlyConfigured(\nf\"Plugin {plugin_name} requires '{setting}' to be present in \"\nf\"the PLUGINS_CONFIG['{plugin_name}'] section of your settings.\"\n)\n# Apply default configuration values\nfor setting, value in cls.default_settings.items():\n# user_config and constance_config take precedence\n# this is to support legacy apps that supply default_settings and constance_config\nif setting not in user_config and setting not in cls.constance_config:\nuser_config[setting] = value\n</code></pre>"},{"location":"code-reference/nautobot/apps/admin.html","title":"nautobot.apps.admin","text":""},{"location":"code-reference/nautobot/apps/admin.html#nautobot.apps.admin","title":"<code>nautobot.apps.admin</code>","text":"<p>Utilities for integrating with the Nautobot Admin UI.</p>"},{"location":"code-reference/nautobot/apps/admin.html#nautobot.apps.admin.NautobotModelAdmin","title":"<code>nautobot.apps.admin.NautobotModelAdmin</code>","text":"<p>             Bases: <code>ModelAdmin</code></p> <p>Extend Django's ModelAdmin to use some standard Nautobot UI widgets by default.</p> Source code in <code>nautobot/core/admin.py</code> <pre><code>class NautobotModelAdmin(ModelAdmin):\n\"\"\"Extend Django's ModelAdmin to use some standard Nautobot UI widgets by default.\"\"\"\nformfield_overrides = {\nmodels.DateField: {\"widget\": widgets.DatePicker},\nmodels.ForeignKey: {\"widget\": widgets.StaticSelect2},\nmodels.ManyToManyField: {\"widget\": widgets.StaticSelect2Multiple},\n}\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html","title":"nautobot.apps.api","text":""},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api","title":"<code>nautobot.apps.api</code>","text":"<p>Helpers for an app to implement a REST API.</p>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.APIRootView","title":"<code>nautobot.apps.api.APIRootView</code>","text":"<p>             Bases: <code>NautobotAPIVersionMixin</code>, <code>APIView</code></p> <p>This is the root of the REST API. API endpoints are arranged by app and model name; e.g. <code>/api/dcim/locations/</code>.</p> Source code in <code>nautobot/core/api/views.py</code> <pre><code>class APIRootView(NautobotAPIVersionMixin, APIView):\n\"\"\"\n    This is the root of the REST API. API endpoints are arranged by app and model name; e.g. `/api/dcim/locations/`.\n    \"\"\"\n_ignore_model_permissions = True\ndef get_view_name(self):\nreturn \"API Root\"\n@extend_schema(exclude=True)\ndef get(self, request, format=None):  # pylint: disable=redefined-builtin\nreturn Response(\nOrderedDict(\n(\n(\n\"circuits\",\nreverse(\"circuits-api:api-root\", request=request, format=format),\n),\n(\n\"dcim\",\nreverse(\"dcim-api:api-root\", request=request, format=format),\n),\n(\n\"extras\",\nreverse(\"extras-api:api-root\", request=request, format=format),\n),\n(\"graphql\", reverse(\"graphql-api\", request=request, format=format)),\n(\n\"ipam\",\nreverse(\"ipam-api:api-root\", request=request, format=format),\n),\n(\n\"plugins\",\nreverse(\"plugins-api:api-root\", request=request, format=format),\n),\n(\"status\", reverse(\"api-status\", request=request, format=format)),\n(\n\"tenancy\",\nreverse(\"tenancy-api:api-root\", request=request, format=format),\n),\n(\n\"users\",\nreverse(\"users-api:api-root\", request=request, format=format),\n),\n(\n\"virtualization\",\nreverse(\n\"virtualization-api:api-root\",\nrequest=request,\nformat=format,\n),\n),\n)\n)\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.BaseModelSerializer","title":"<code>nautobot.apps.api.BaseModelSerializer</code>","text":"<p>             Bases: <code>OptInFieldsMixin</code>, <code>serializers.HyperlinkedModelSerializer</code></p> <p>This base serializer implements common fields and logic for all ModelSerializers.</p> <p>Namely, it:</p> <ul> <li>defines the <code>display</code> field which exposes a human friendly value for the given object.</li> <li>ensures that <code>id</code> field is always present on the serializer as well.</li> <li>ensures that <code>created</code> and <code>last_updated</code> fields are always present if applicable to this model and serializer.</li> <li>ensures that <code>object_type</code> field is always present on the serializer which represents the content-type of this   serializer's associated model (e.g. \"dcim.device\"). This is required as the OpenAPI schema, using the   PolymorphicProxySerializer class defined below, relies upon this field as a way to identify to the client   which of several possible serializers are in use for a given attribute.</li> <li>supports <code>?depth</code> query parameter. It is passed in as <code>nested_depth</code> to the <code>build_nested_field()</code> function   to enable the dynamic generation of nested serializers.</li> </ul> Source code in <code>nautobot/core/api/serializers.py</code> <pre><code>class BaseModelSerializer(OptInFieldsMixin, serializers.HyperlinkedModelSerializer):\n\"\"\"\n    This base serializer implements common fields and logic for all ModelSerializers.\n    Namely, it:\n    - defines the `display` field which exposes a human friendly value for the given object.\n    - ensures that `id` field is always present on the serializer as well.\n    - ensures that `created` and `last_updated` fields are always present if applicable to this model and serializer.\n    - ensures that `object_type` field is always present on the serializer which represents the content-type of this\n      serializer's associated model (e.g. \"dcim.device\"). This is required as the OpenAPI schema, using the\n      PolymorphicProxySerializer class defined below, relies upon this field as a way to identify to the client\n      which of several possible serializers are in use for a given attribute.\n    - supports `?depth` query parameter. It is passed in as `nested_depth` to the `build_nested_field()` function\n      to enable the dynamic generation of nested serializers.\n    \"\"\"\nserializer_related_field = NautobotHyperlinkedRelatedField\ndisplay = serializers.SerializerMethodField(read_only=True, help_text=\"Human friendly display value\")\nobject_type = ObjectTypeField()\n# composite_key = serializers.SerializerMethodField()  # TODO: Revisit if we reintroduce composite keys\nnatural_keys_values = None\nnatural_slug = serializers.SerializerMethodField()\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\n# If it is not a Nested Serializer, we should set the depth argument to whatever is in the request's context\nif not self.is_nested:\nself.Meta.depth = self.context.get(\"depth\", 0)\n# Check if the request is related to CSV export;\nif self._is_csv_request() and self.instance:\n# Retrieve the natural key values of related fields in an optimized way.\nall_related_fields_natural_key_lookups = self._get_related_fields_natural_key_field_lookups()\ncase_query = self._build_query_case_for_natural_key_field_lookup(all_related_fields_natural_key_lookups)\nif isinstance(self.instance, models.QuerySet):\nqueryset = self.instance\nelse:\n# We would only need to run one additional query, making this a more efficient method of\n# obtaining all the natural key values for this instance;\nqueryset = self.Meta.model.objects.filter(pk=self.instance.pk)\nself.natural_keys_values = queryset.annotate(**case_query).values(\n*all_related_fields_natural_key_lookups, \"pk\"\n)\ndef _get_lookup_field_name_and_output_field(self, lookup_field):\n\"\"\"Get lookup field name and its corresponding output_field.\n        Used in building this lookup Case in `_build_query_case_for_natural_key_field_lookup`.\n        Example:\n            &gt;&gt;&gt; self._get_lookup_field_name_and_output_field(\"device__location__name\")\n            (\"device__location\", CharField)\n            &gt;&gt;&gt; self._get_lookup_field_name_and_output_field(\"ipaddress__parent__network\")\n            (\"ipaddress__parent\", VarbinaryIPField)\n        \"\"\"\n*field_names, lookup = lookup_field.split(\"__\")\nmodel = self.Meta.model\nfor field_component in field_names:\nmodel = model._meta.get_field(field_component).remote_field.model\nlookup = \"id\" if lookup == \"pk\" else lookup\nfield = model._meta.get_field(lookup)\n# VarbinaryIPField needs to be handled specially in `_build_query_case_for_natural_key_field_lookup`\noutput_field = field.__class__ if field.__class__ is VarbinaryIPField else models.CharField\nfield_name = \"__\".join(field_names)\nreturn field_name, output_field\ndef _build_query_case_for_natural_key_field_lookup(self, lookups):\n\"\"\"\n        Build a query using Case expressions to handle natural key field instances that do not exist.\n        This function constructs a database query with Case expressions to handle natural key lookup fields\n        that may have missing instances. In cases where the natural key field instance does not exist\n        (i.e., is None), this function replaces it with the value 'NoObject'. This is particularly\n        useful for CSV Export processes, as it allows fields with missing instances to be safely ignored.\n        Such handling is essential for CSV Import processes, as attempting to import missing instances can\n        lead to 'Object Not Found' errors, potentially causing the import to fail.\n        Example:\n            Consider a Device model with a related field 'tenant' and a 'name' attribute. In this case, the\n            function can be used as follows:\n            Device.objects.annotate(\n                tenant__name=Case(\n                    When(tenant__isnull=False, then=F(\"tenant__name\")),\n                    default=\"NoObject\"\n                )\n            ).values(\"tenant__name\")\n        Explanation:\n            - If `device.tenant` is None, the 'tenant__name' field is set to \"NoObject\".\n            - If `device.tenant` is not None, the 'tenant__name' field is set to the actual tenant name.\n        Args:\n            lookups: List of natural key lookups\n        \"\"\"\ncase_query = {}\nfor lookup_field in lookups:\nfield_name, output_field = self._get_lookup_field_name_and_output_field(lookup_field)\n# Since VarbinaryIPField cant be cast into CharField we would have to set the output_field as\n# `VarbinaryIPField`\nwhen_case = {\nf\"{field_name}__isnull\": False,\n\"then\": models.F(lookup_field)\nif output_field == VarbinaryIPField\nelse Cast(models.F(lookup_field), models.CharField()),\n}\ncase_query[lookup_field] = models.Case(\nmodels.When(**when_case),\ndefault=models.Value(constants.CSV_NO_OBJECT),\noutput_field=output_field(),\n)\nreturn case_query\ndef _get_related_fields_natural_key_field_lookups(self):\n\"\"\"Retrieve a list of field lookups for natural key fields of related models.\n        This method iterates through the related fields of the Serializer model,\n        retrieves the natural_key_field_lookups for each related model, and prepends the field name\n        to create a list of field lookups.\n        Examples:\n            &gt;&gt;&gt; # Example usage on Device\n            &gt;&gt;&gt; self._get_related_fields_natural_key_field_lookups()\n            [\n                \"tenant__name\",\n                \"status__name\",\n                \"role__name\",\n                \"location__name\",\n                \"location__parent__name\",\n                \"location__parent__parent__name\"\n                ...\n            ]\n        \"\"\"\nmodel = self.Meta.model\nfield_lookups = []\n# NOTE: M2M and One2M fields field are ignored in csv export\nfields = [\nfield\nfor field in model._meta.get_fields()\nif field.is_relation and not field.many_to_many and not field.one_to_many\n# Ignore GenericRel since its `fk` and `content_type` would be used.\nand not isinstance(field, GenericRel)\n]\n# Get each related field model's natural_key_fields and prepend field name\nfor field in fields:\n# ContentType and Group are not Nautobot Model hence do not have the `natural_key_field_lookups` attr.\n# fallback to using default behavior for these fields\nwith contextlib.suppress(AttributeError):\nfield_lookups.extend(\nf\"{field.name}__{lookup}\" for lookup in field.related_model.csv_natural_key_field_lookups()\n)\nreturn field_lookups\ndef _is_csv_request(self):\n\"\"\"Return True if this a CSV export request\"\"\"\nrequest = self.context.get(\"request\")\nreturn hasattr(request, \"accepted_media_type\") and \"text/csv\" in request.accepted_media_type\n@property\ndef is_nested(self):\n\"\"\"Return whether this is a nested serializer.\"\"\"\nreturn getattr(self.Meta, \"is_nested\", False)\n@property\ndef list_display_fields(self):\nreturn list(getattr(self.Meta, \"list_display_fields\", []))\n@property\ndef advanced_tab_fields(self):\nadvanced_fields = list(\ngetattr(\nself.Meta,\n\"advanced_tab_fields\",\n[\"id\", \"url\", \"object_type\", \"created\", \"last_updated\", \"natural_slug\"],\n)\n)\nreturn [field for field in advanced_fields if field in self.fields]\n@extend_schema_field(serializers.CharField)\ndef get_display(self, instance):\n\"\"\"\n        Return either the `display` property of the instance or `str(instance)`\n        \"\"\"\nreturn getattr(instance, \"display\", str(instance))\n# TODO(jathan): Rip out composite key after natural key fields for import/export work has been\n# completed (See: https://github.com/nautobot/nautobot/issues/4367)\n@extend_schema_field(\n{\n\"type\": \"string\",\n\"example\": constants.COMPOSITE_KEY_SEPARATOR.join([\"attribute1\", \"attribute2\"]),\n}\n)\ndef get_composite_key(self, instance):\ntry:\nreturn getattr(instance, \"composite_key\", construct_composite_key(instance.natural_key()))\nexcept (AttributeError, NotImplementedError):\nreturn \"unknown\"\n@extend_schema_field(\n{\n\"type\": \"string\",\n\"example\": constants.NATURAL_SLUG_SEPARATOR.join([\"attribute1\", \"attribute2\"]),\n}\n)\ndef get_natural_slug(self, instance):\ntry:\nreturn getattr(instance, \"natural_slug\", construct_natural_slug(instance.natural_key(), pk=instance.pk))\nexcept (AttributeError, NotImplementedError):\nreturn \"unknown\"\ndef extend_field_names(self, fields, field_name, at_start=False, opt_in_only=False):\n\"\"\"Prepend or append the given field_name to `fields` and optionally self.Meta.opt_in_fields as well.\"\"\"\nif field_name in fields:\nfields.remove(field_name)\nif at_start:\nfields.insert(0, field_name)\nelse:\nfields.append(field_name)\nif opt_in_only:\nif not getattr(self.Meta, \"opt_in_fields\", None):\nself.Meta.opt_in_fields = [field_name]\nelif field_name not in self.Meta.opt_in_fields:\nself.Meta.opt_in_fields.append(field_name)\nreturn fields\ndef get_field_names(self, declared_fields, info):\n\"\"\"\n        Override get_field_names() to add some custom logic.\n        Assuming that we follow the pattern where `fields = \"__all__\" for the vast majority of serializers in Nautobot,\n        we do not strictly need to use this method to protect against inadvertently omitting standard fields\n        like `display`, `created`, and `last_updated`. However, we continue to do as a bit of redundant safety.\n        The other purpose of this method now is to manipulate the set of fields that \"__all__\" actually means as a\n        way of *excluding* fields that we *don't* want to include by default for performance or data exposure reasons.\n        \"\"\"\nfields = list(super().get_field_names(declared_fields, info))  # Meta.fields could be defined as a tuple\n# Add initial fields in \"reverse\" order since they're each inserted at the start of the list.\nself.extend_field_names(fields, \"display\", at_start=True)\nself.extend_field_names(fields, \"object_type\", at_start=True)\n# Since we use HyperlinkedModelSerializer as our base class, \"url\" is auto-included by \"__all__\" but \"id\" isn't.\nself.extend_field_names(fields, \"id\", at_start=True)\n# Move these fields to the end\nif hasattr(self.Meta.model, \"created\"):\nself.extend_field_names(fields, \"created\")\nif hasattr(self.Meta.model, \"last_updated\"):\nself.extend_field_names(fields, \"last_updated\")\ndef filter_field(field):\n# Eliminate all field names that start with \"_\" as those fields are not user-facing\nif field.startswith(\"_\"):\nreturn False\n# These are expensive to look up, so we have decided not to include them on nested serializers\nif self.is_nested and isinstance(getattr(self.Meta.model, field, None), ManyToManyDescriptor):\nreturn False\n# Ignore M2M fields\nwith contextlib.suppress(FieldDoesNotExist):\nif self._is_csv_request():\nfield = self.Meta.model._meta.get_field(field)\n# ContentType is ManyToMany Field that is specially handled, Hence it can be exported/imported\nif field.many_to_many and field.related_model is not ContentType:\nreturn False\nreturn True\nfields = [field for field in fields if filter_field(field)]\nreturn fields\ndef determine_view_options(self, request=None):\n\"\"\"\n        Determine view options to use for rendering the list and detail views associated with this serializer.\n        \"\"\"\nlist_display = []\nfields = []\nfrom nautobot.core.api.metadata import NautobotColumnProcessor  # avoid circular import\nprocessor = NautobotColumnProcessor(self, request.parser_context if request else {})\nfield_map = dict(self.fields)\nall_fields = list(field_map)\n# Explicitly order the \"big ugly\" fields to the bottom\nprocessor.order_fields(all_fields)\nlist_display_fields = self.list_display_fields\n# Process the list_display_fields first.\nfor field_name in list_display_fields:\ntry:\nfield = field_map[field_name]\nexcept KeyError:\ncontinue  # Ignore unknown fields.\ncolumn_data = processor._get_column_properties(field, field_name)\nlist_display.append(column_data)\nfields.append(column_data)\n# Process the rest of the fields second.\nfor field_name in all_fields:\n# Don't process list display fields twice.\nif field_name in list_display_fields:\ncontinue\ntry:\nfield = field_map[field_name]\nexcept KeyError:\ncontinue  # Ignore unknown fields.\ncolumn_data = processor._get_column_properties(field, field_name)\nfields.append(column_data)\nreturn {\n\"retrieve\": {\n\"tabs\": self._determine_detail_view_tabs(),\n},\n\"list\": {\n\"default_fields\": list_display,\n\"all_fields\": fields,\n},\n}\ndef _determine_detail_view_tabs(self):\n\"\"\"Determine the layout for the detail view tabs that are intrinsic to this serializer.\"\"\"\ntabs = self.get_additional_detail_view_tabs()\nif hasattr(self.Meta, \"detail_view_config\"):\ndetail_view_config = self._validate_view_config(self.Meta.detail_view_config)\nelse:\ndetail_view_config = self._get_default_detail_view_config()\ndetail_view_config = self._refine_detail_view_config(detail_view_config, tabs)\nreturn {\nbettertitle(self.Meta.model._meta.verbose_name): detail_view_config,\n**tabs,\n}\ndef get_additional_detail_view_tabs(self):\n\"\"\"\n        Retrieve definitions of non-default detail view tabs.\n        By default provides an \"Advanced\" tab containing `self.advanced_tab_fields`, but subclasses\n        can override this to move additional serializer fields to this or other tabs.\n        Returns:\n            (dict): `{&lt;tab label&gt;: [{&lt;panel label&gt;: {\"fields\": [&lt;list of fields&gt;]}, ...}, ...], ...}`\n        \"\"\"\nreturn {\n\"Advanced\": [{\"Object Details\": {\"fields\": self.advanced_tab_fields}}],\n}\ndef _get_default_detail_view_config(self):\n\"\"\"\n        Generate detail view config for the view based on the serializer's fields.\n        Examples:\n            &gt;&gt;&gt; DeviceSerializer._get_default_detail_view_config().\n            {\n                \"layout\":[\n                    {\n                        Device: {\n                            \"fields\": [\"name\", \"subdevice_role\", \"height\", \"comments\"...]\n                        }\n                    },\n                    {\n                        Tags: {\n                            \"fields\": [\"tags\"]\n                        }\n                    }\n                ]\n            }\n        Returns:\n            (list): A list representing the view config.\n        \"\"\"\nm2m_fields, other_fields = self._get_m2m_and_non_m2m_fields()\n# TODO(timizuo): How do we get verbose_name of not model serializers?\nmodel_verbose_name = self.Meta.model._meta.verbose_name\nreturn {\n\"layout\": [\n{\nbettertitle(model_verbose_name): {\n\"fields\": [field[\"name\"] for field in other_fields],\n}\n},\n{field[\"label\"]: {\"fields\": [field[\"name\"]]} for field in m2m_fields},\n]\n}\ndef _get_m2m_and_non_m2m_fields(self):\n\"\"\"\n        Retrieve the many-to-many (m2m) fields and other non-m2m fields from the serializer.\n        Returns:\n            A tuple containing two lists: m2m_fields and non m2m fields.\n                - m2m_fields: A list of dictionaries, each containing the name and label of an m2m field.\n                - non_m2m_fields: A list of dictionaries, each containing the name and label of a non m2m field.\n        \"\"\"\nm2m_fields = []\nnon_m2m_fields = []\nfor field_name, field in self.fields.items():\nif isinstance(field, drf_relations.ManyRelatedField):\nm2m_fields.append({\"name\": field_name, \"label\": field.label or field_name})\nelse:\nnon_m2m_fields.append({\"name\": field_name, \"label\": field.label or field_name})\nreturn m2m_fields, non_m2m_fields\ndef _refine_detail_view_config(self, detail_view_config, other_tabs):\n\"\"\"\n        Refine the detail view config for the default tab (auto-generated, or as defined by Meta.detail_view_config).\n        - Remove fields that should never be present in the detail view config (e.g. `notes_url`).\n        - Ensure that fields that are already present in `other_tabs` aren't included in the detail view config.\n        - Ensure that certain fields such as `tags` are always included in the detail view config if applicable.\n        Args:\n            detail_view_config (dict): `{\"layout\": [{&lt;left-column&gt;}, {&lt;right-column}], \"include_others\": False}`\n        Returns:\n            (list): `[{\"Panel 1 Name\": {\"fields\": [\"field1\", \"field2\", ...]}, \"Panel 2 Name\": ...}, {...}]`\n        \"\"\"\nfields_to_always_move_to_right_column = [\n\"comments\",\n\"tags\",\n]\nfields_to_always_remove = [\n# always handled explicitly by the UI\n\"display\",\n\"status\",\n# not yet supported in the UI\n\"custom_fields\",\n\"relationships\",\n\"computed_fields\",\n# irrelevant to the UI\n\"notes_url\",\n]\nfields_to_remove = fields_to_always_remove + fields_to_always_move_to_right_column\n# Any field that's already present in another tab\nfor tab_layout in other_tabs.values():\nfor column in tab_layout:\nfor grouping in column.values():\nfields_to_remove += grouping[\"fields\"]\n# Make a deepcopy to avoid altering view_config\nview_config_layout = deepcopy(detail_view_config.get(\"layout\"))\n# Remove fields_to_remove from the view_config_layout\nfor column in view_config_layout:\nfor section in column.values():\nfor field in fields_to_remove:\nif field in section[\"fields\"]:\nsection[\"fields\"].remove(field)\nserializer_fields = list(self.fields)\n# Add special-cased fields to right column\nfor field in fields_to_always_move_to_right_column:\nif field in serializer_fields:\nif len(view_config_layout) &lt; 2:\nview_config_layout.append({})\nview_config_layout[1].setdefault(bettertitle(field), {}).setdefault(\"fields\", []).append(field)\n# Add fields not otherwise included in another tab, only if include_others is set to True.\nif detail_view_config.get(\"include_others\", False):\nview_config_fields = [\nfield for column in view_config_layout for section in column.values() for field in section[\"fields\"]\n]\nmissing_fields = sorted(set(serializer_fields) - set(view_config_fields) - set(fields_to_remove))\nview_config_layout[0][\"Other Fields\"] = {\"fields\": missing_fields}\nreturn view_config_layout\ndef _validate_view_config(self, view_config):\n\"\"\"Validate view config.\"\"\"\n# 1. Validate key `layout` is in view_config; as this is a required key is creating a view config\nif not view_config[\"layout\"]:\nraise ViewConfigException(\"`layout` is a required key in creating a custom view_config\")\n# 2. Validate `Other Fields` is not part of a layout group name, as this is a reserved keyword for group names\nfor col in view_config[\"layout\"]:\nfor group_name in col.keys():\nif group_name in constants.RESERVED_NAMES_FOR_OBJECT_DETAIL_VIEW_SCHEMA:\nraise ViewConfigException(f\"`{group_name}` is a reserved group name keyword.\")\nreturn view_config\ndef build_field(self, field_name, info, model_class, nested_depth):\n\"\"\"\n        Return a two tuple of (cls, kwargs) to build a serializer field with.\n        \"\"\"\nrequest = self.context.get(\"request\")\n# Make sure that PATCH/POST/PUT method response serializers are consistent\n# with depth of 0\nif request is not None and request.method != \"GET\":\nnested_depth = 0\n# For tags field, DRF does not recognize the relationship between tags and the model itself (?)\n# so instead of calling build_nested_field() it will call build_property_field() which\n# makes the field impervious to the `?depth` parameter.\n# So we intercept it here to call build_nested_field()\n# which will make the tags field be rendered with TagSerializer() and respect the `depth` parameter.\nif isinstance(getattr(model_class, field_name, None), TagsManager) and nested_depth &gt; 0:\ntags_field = getattr(model_class, field_name)\nrelation_info = RelationInfo(\nmodel_field=tags_field,\nrelated_model=Tag,\nto_many=True,\nhas_through_model=True,\nto_field=_get_to_field(tags_field),\nreverse=False,\n)\nreturn self.build_nested_field(field_name, relation_info, nested_depth)\nreturn super().build_field(field_name, info, model_class, nested_depth)\ndef _get_natural_key_lookups_value_for_field(self, field_name, natural_key_field_instance):\n\"\"\"Extract natural key field lookups for a specific field name.\n        Args:\n            field_name (str): The field name to extract lookups for.\n            natural_key_field_instance (dict): The dict containing natural key field values.\n        Example:\n            &gt;&gt;&gt; natural_key_field_instance = Device.objects.values(\"tenant__name\", \"location__name\", \"location__parent__name\", ...)\n            &gt;&gt;&gt; _get_natural_key_lookups_value_for_field(\"location\", natural_key_field_instance)\n            {\n                \"location__name\": \"Sample Location\",\n                \"location__parent__name\": \"Sample Location Parent Name\",\n                \"location__parent__parent__name\": \"NoObject\"\n                ...\n            }\n        \"\"\"\ndata = {}\nfor key, value in natural_key_field_instance.items():\nif key.startswith(f\"{field_name}__\"):\nif isinstance(value, uuid.UUID):\ndata[key] = str(value)\nelif value == constants.VARBINARY_IP_FIELD_REPR_OF_CSV_NO_OBJECT:\ndata[key] = constants.CSV_NO_OBJECT\nelif not value:\ndata[key] = constants.CSV_NULL_TYPE\nelse:\ndata[key] = value\nreturn data\ndef to_representation(self, instance):\ndata = super().to_representation(instance)\naltered_data = {}\nif self._is_csv_request() and self.natural_keys_values is not None:\nif natural_key_field_instance := [item for item in self.natural_keys_values if item[\"pk\"] == instance.pk]:\ncleaned_natural_key_field_instance = natural_key_field_instance[0]\nfor key, value in data.items():\n# FK field with natural_field_lookups\nif natural_key_field_lookups_for_field := self._get_natural_key_lookups_value_for_field(\nkey, cleaned_natural_key_field_instance\n):\naltered_data.update(natural_key_field_lookups_for_field)\nelse:\n# Not FK field\naltered_data[key] = constants.CSV_NULL_TYPE if value is None else value\nelse:\naltered_data = data\nreturn altered_data\ndef build_relational_field(self, field_name, relation_info):\n\"\"\"Override DRF's default relational-field construction to be app-aware.\"\"\"\nfield_class, field_kwargs = super().build_relational_field(field_name, relation_info)\nif \"view_name\" in field_kwargs:\nfield_kwargs[\"view_name\"] = get_route_for_model(relation_info.related_model, \"detail\", api=True)\nreturn field_class, field_kwargs\ndef build_property_field(self, field_name, model_class):\n\"\"\"\n        Create a property field for model methods and properties.\n        \"\"\"\nif isinstance(getattr(model_class, field_name, None), TagsManager):\nfield_class = NautobotHyperlinkedRelatedField\nfield_kwargs = {\n\"queryset\": Tag.objects.get_for_model(model_class),\n\"many\": True,\n\"required\": False,\n}\nreturn field_class, field_kwargs\nreturn super().build_property_field(field_name, model_class)\ndef build_nested_field(self, field_name, relation_info, nested_depth):\nreturn nested_serializer_factory(relation_info, nested_depth)\ndef build_url_field(self, field_name, model_class):\n\"\"\"Override DRF's default 'url' field construction to be app-aware.\"\"\"\nfield_class, field_kwargs = super().build_url_field(field_name, model_class)\nif \"view_name\" in field_kwargs:\nfield_kwargs[\"view_name\"] = get_route_for_model(model_class, \"detail\", api=True)\nreturn field_class, field_kwargs\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.serializers.BaseModelSerializer.is_nested","title":"<code>is_nested</code>  <code>property</code>","text":"<p>Return whether this is a nested serializer.</p>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.serializers.BaseModelSerializer.build_field","title":"<code>build_field(field_name, info, model_class, nested_depth)</code>","text":"<p>Return a two tuple of (cls, kwargs) to build a serializer field with.</p> Source code in <code>nautobot/core/api/serializers.py</code> <pre><code>def build_field(self, field_name, info, model_class, nested_depth):\n\"\"\"\n    Return a two tuple of (cls, kwargs) to build a serializer field with.\n    \"\"\"\nrequest = self.context.get(\"request\")\n# Make sure that PATCH/POST/PUT method response serializers are consistent\n# with depth of 0\nif request is not None and request.method != \"GET\":\nnested_depth = 0\n# For tags field, DRF does not recognize the relationship between tags and the model itself (?)\n# so instead of calling build_nested_field() it will call build_property_field() which\n# makes the field impervious to the `?depth` parameter.\n# So we intercept it here to call build_nested_field()\n# which will make the tags field be rendered with TagSerializer() and respect the `depth` parameter.\nif isinstance(getattr(model_class, field_name, None), TagsManager) and nested_depth &gt; 0:\ntags_field = getattr(model_class, field_name)\nrelation_info = RelationInfo(\nmodel_field=tags_field,\nrelated_model=Tag,\nto_many=True,\nhas_through_model=True,\nto_field=_get_to_field(tags_field),\nreverse=False,\n)\nreturn self.build_nested_field(field_name, relation_info, nested_depth)\nreturn super().build_field(field_name, info, model_class, nested_depth)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.serializers.BaseModelSerializer.build_property_field","title":"<code>build_property_field(field_name, model_class)</code>","text":"<p>Create a property field for model methods and properties.</p> Source code in <code>nautobot/core/api/serializers.py</code> <pre><code>def build_property_field(self, field_name, model_class):\n\"\"\"\n    Create a property field for model methods and properties.\n    \"\"\"\nif isinstance(getattr(model_class, field_name, None), TagsManager):\nfield_class = NautobotHyperlinkedRelatedField\nfield_kwargs = {\n\"queryset\": Tag.objects.get_for_model(model_class),\n\"many\": True,\n\"required\": False,\n}\nreturn field_class, field_kwargs\nreturn super().build_property_field(field_name, model_class)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.serializers.BaseModelSerializer.build_relational_field","title":"<code>build_relational_field(field_name, relation_info)</code>","text":"<p>Override DRF's default relational-field construction to be app-aware.</p> Source code in <code>nautobot/core/api/serializers.py</code> <pre><code>def build_relational_field(self, field_name, relation_info):\n\"\"\"Override DRF's default relational-field construction to be app-aware.\"\"\"\nfield_class, field_kwargs = super().build_relational_field(field_name, relation_info)\nif \"view_name\" in field_kwargs:\nfield_kwargs[\"view_name\"] = get_route_for_model(relation_info.related_model, \"detail\", api=True)\nreturn field_class, field_kwargs\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.serializers.BaseModelSerializer.build_url_field","title":"<code>build_url_field(field_name, model_class)</code>","text":"<p>Override DRF's default 'url' field construction to be app-aware.</p> Source code in <code>nautobot/core/api/serializers.py</code> <pre><code>def build_url_field(self, field_name, model_class):\n\"\"\"Override DRF's default 'url' field construction to be app-aware.\"\"\"\nfield_class, field_kwargs = super().build_url_field(field_name, model_class)\nif \"view_name\" in field_kwargs:\nfield_kwargs[\"view_name\"] = get_route_for_model(model_class, \"detail\", api=True)\nreturn field_class, field_kwargs\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.serializers.BaseModelSerializer.determine_view_options","title":"<code>determine_view_options(request=None)</code>","text":"<p>Determine view options to use for rendering the list and detail views associated with this serializer.</p> Source code in <code>nautobot/core/api/serializers.py</code> <pre><code>def determine_view_options(self, request=None):\n\"\"\"\n    Determine view options to use for rendering the list and detail views associated with this serializer.\n    \"\"\"\nlist_display = []\nfields = []\nfrom nautobot.core.api.metadata import NautobotColumnProcessor  # avoid circular import\nprocessor = NautobotColumnProcessor(self, request.parser_context if request else {})\nfield_map = dict(self.fields)\nall_fields = list(field_map)\n# Explicitly order the \"big ugly\" fields to the bottom\nprocessor.order_fields(all_fields)\nlist_display_fields = self.list_display_fields\n# Process the list_display_fields first.\nfor field_name in list_display_fields:\ntry:\nfield = field_map[field_name]\nexcept KeyError:\ncontinue  # Ignore unknown fields.\ncolumn_data = processor._get_column_properties(field, field_name)\nlist_display.append(column_data)\nfields.append(column_data)\n# Process the rest of the fields second.\nfor field_name in all_fields:\n# Don't process list display fields twice.\nif field_name in list_display_fields:\ncontinue\ntry:\nfield = field_map[field_name]\nexcept KeyError:\ncontinue  # Ignore unknown fields.\ncolumn_data = processor._get_column_properties(field, field_name)\nfields.append(column_data)\nreturn {\n\"retrieve\": {\n\"tabs\": self._determine_detail_view_tabs(),\n},\n\"list\": {\n\"default_fields\": list_display,\n\"all_fields\": fields,\n},\n}\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.serializers.BaseModelSerializer.extend_field_names","title":"<code>extend_field_names(fields, field_name, at_start=False, opt_in_only=False)</code>","text":"<p>Prepend or append the given field_name to <code>fields</code> and optionally self.Meta.opt_in_fields as well.</p> Source code in <code>nautobot/core/api/serializers.py</code> <pre><code>def extend_field_names(self, fields, field_name, at_start=False, opt_in_only=False):\n\"\"\"Prepend or append the given field_name to `fields` and optionally self.Meta.opt_in_fields as well.\"\"\"\nif field_name in fields:\nfields.remove(field_name)\nif at_start:\nfields.insert(0, field_name)\nelse:\nfields.append(field_name)\nif opt_in_only:\nif not getattr(self.Meta, \"opt_in_fields\", None):\nself.Meta.opt_in_fields = [field_name]\nelif field_name not in self.Meta.opt_in_fields:\nself.Meta.opt_in_fields.append(field_name)\nreturn fields\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.serializers.BaseModelSerializer.get_additional_detail_view_tabs","title":"<code>get_additional_detail_view_tabs()</code>","text":"<p>Retrieve definitions of non-default detail view tabs.</p> <p>By default provides an \"Advanced\" tab containing <code>self.advanced_tab_fields</code>, but subclasses can override this to move additional serializer fields to this or other tabs.</p> <p>Returns:</p> Type Description <code>dict</code> <p><code>{&lt;tab label&gt;: [{&lt;panel label&gt;: {\"fields\": [&lt;list of fields&gt;]}, ...}, ...], ...}</code></p> Source code in <code>nautobot/core/api/serializers.py</code> <pre><code>def get_additional_detail_view_tabs(self):\n\"\"\"\n    Retrieve definitions of non-default detail view tabs.\n    By default provides an \"Advanced\" tab containing `self.advanced_tab_fields`, but subclasses\n    can override this to move additional serializer fields to this or other tabs.\n    Returns:\n        (dict): `{&lt;tab label&gt;: [{&lt;panel label&gt;: {\"fields\": [&lt;list of fields&gt;]}, ...}, ...], ...}`\n    \"\"\"\nreturn {\n\"Advanced\": [{\"Object Details\": {\"fields\": self.advanced_tab_fields}}],\n}\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.serializers.BaseModelSerializer.get_display","title":"<code>get_display(instance)</code>","text":"<p>Return either the <code>display</code> property of the instance or <code>str(instance)</code></p> Source code in <code>nautobot/core/api/serializers.py</code> <pre><code>@extend_schema_field(serializers.CharField)\ndef get_display(self, instance):\n\"\"\"\n    Return either the `display` property of the instance or `str(instance)`\n    \"\"\"\nreturn getattr(instance, \"display\", str(instance))\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.serializers.BaseModelSerializer.get_field_names","title":"<code>get_field_names(declared_fields, info)</code>","text":"<p>Override get_field_names() to add some custom logic.</p> <p>Assuming that we follow the pattern where <code>fields = \"__all__\" for the vast majority of serializers in Nautobot, we do not strictly need to use this method to protect against inadvertently omitting standard fields like</code>display<code>,</code>created<code>, and</code>last_updated`. However, we continue to do as a bit of redundant safety.</p> <p>The other purpose of this method now is to manipulate the set of fields that \"all\" actually means as a way of excluding fields that we don't want to include by default for performance or data exposure reasons.</p> Source code in <code>nautobot/core/api/serializers.py</code> <pre><code>def get_field_names(self, declared_fields, info):\n\"\"\"\n    Override get_field_names() to add some custom logic.\n    Assuming that we follow the pattern where `fields = \"__all__\" for the vast majority of serializers in Nautobot,\n    we do not strictly need to use this method to protect against inadvertently omitting standard fields\n    like `display`, `created`, and `last_updated`. However, we continue to do as a bit of redundant safety.\n    The other purpose of this method now is to manipulate the set of fields that \"__all__\" actually means as a\n    way of *excluding* fields that we *don't* want to include by default for performance or data exposure reasons.\n    \"\"\"\nfields = list(super().get_field_names(declared_fields, info))  # Meta.fields could be defined as a tuple\n# Add initial fields in \"reverse\" order since they're each inserted at the start of the list.\nself.extend_field_names(fields, \"display\", at_start=True)\nself.extend_field_names(fields, \"object_type\", at_start=True)\n# Since we use HyperlinkedModelSerializer as our base class, \"url\" is auto-included by \"__all__\" but \"id\" isn't.\nself.extend_field_names(fields, \"id\", at_start=True)\n# Move these fields to the end\nif hasattr(self.Meta.model, \"created\"):\nself.extend_field_names(fields, \"created\")\nif hasattr(self.Meta.model, \"last_updated\"):\nself.extend_field_names(fields, \"last_updated\")\ndef filter_field(field):\n# Eliminate all field names that start with \"_\" as those fields are not user-facing\nif field.startswith(\"_\"):\nreturn False\n# These are expensive to look up, so we have decided not to include them on nested serializers\nif self.is_nested and isinstance(getattr(self.Meta.model, field, None), ManyToManyDescriptor):\nreturn False\n# Ignore M2M fields\nwith contextlib.suppress(FieldDoesNotExist):\nif self._is_csv_request():\nfield = self.Meta.model._meta.get_field(field)\n# ContentType is ManyToMany Field that is specially handled, Hence it can be exported/imported\nif field.many_to_many and field.related_model is not ContentType:\nreturn False\nreturn True\nfields = [field for field in fields if filter_field(field)]\nreturn fields\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.BulkDestroyModelMixin","title":"<code>nautobot.apps.api.BulkDestroyModelMixin</code>","text":"<p>Support bulk deletion of objects using the list endpoint for a model. Accepts a DELETE action with a list of one or more JSON objects, each specifying the UUID of an object to be deleted. For example:</p> <p>DELETE /api/dcim/locations/ [     {\"id\": \"3f01f169-49b9-42d5-a526-df9118635d62\"},     {\"id\": \"c27d6c5b-7ea8-41e7-b9dd-c065efd5d9cd\"} ]</p> Source code in <code>nautobot/core/api/views.py</code> <pre><code>class BulkDestroyModelMixin:\n\"\"\"\n    Support bulk deletion of objects using the list endpoint for a model. Accepts a DELETE action with a list of one\n    or more JSON objects, each specifying the UUID of an object to be deleted. For example:\n    DELETE /api/dcim/locations/\n    [\n        {\"id\": \"3f01f169-49b9-42d5-a526-df9118635d62\"},\n        {\"id\": \"c27d6c5b-7ea8-41e7-b9dd-c065efd5d9cd\"}\n    ]\n    \"\"\"\nbulk_operation_serializer_class = BulkOperationSerializer\n@extend_schema(\nrequest=BulkOperationSerializer(many=True),\n)\ndef bulk_destroy(self, request, *args, **kwargs):\nserializer = self.bulk_operation_serializer_class(data=request.data, many=True)\nserializer.is_valid(raise_exception=True)\nqs = self.get_queryset().filter(pk__in=[o[\"id\"] for o in serializer.data])\nself.perform_bulk_destroy(qs)\nreturn Response(status=status.HTTP_204_NO_CONTENT)\ndef perform_bulk_destroy(self, objects):\nwith transaction.atomic():\nfor obj in objects:\nself.perform_destroy(obj)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.BulkUpdateModelMixin","title":"<code>nautobot.apps.api.BulkUpdateModelMixin</code>","text":"<p>Support bulk modification of objects using the list endpoint for a model. Accepts a PATCH action with a list of one or more JSON objects, each specifying the UUID of an object to be updated as well as the attributes to be set. For example:</p> <p>PATCH /api/dcim/locations/ [     {         \"id\": \"1f554d07-d099-437d-8d48-7d6e35ec8fa3\",         \"name\": \"New name\"     },     {         \"id\": \"1f554d07-d099-437d-8d48-7d6e65ec8fa3\",         \"status\": \"planned\"     } ]</p> Source code in <code>nautobot/core/api/views.py</code> <pre><code>class BulkUpdateModelMixin:\n\"\"\"\n    Support bulk modification of objects using the list endpoint for a model. Accepts a PATCH action with a list of one\n    or more JSON objects, each specifying the UUID of an object to be updated as well as the attributes to be set.\n    For example:\n    PATCH /api/dcim/locations/\n    [\n        {\n            \"id\": \"1f554d07-d099-437d-8d48-7d6e35ec8fa3\",\n            \"name\": \"New name\"\n        },\n        {\n            \"id\": \"1f554d07-d099-437d-8d48-7d6e65ec8fa3\",\n            \"status\": \"planned\"\n        }\n    ]\n    \"\"\"\nbulk_operation_serializer_class = BulkOperationSerializer\ndef bulk_update(self, request, *args, **kwargs):\npartial = kwargs.pop(\"partial\", False)\nserializer = self.bulk_operation_serializer_class(data=request.data, many=True)\nserializer.is_valid(raise_exception=True)\nqs = self.get_queryset().filter(pk__in=[o[\"id\"] for o in serializer.data])\n# Map update data by object ID\nupdate_data = {obj.pop(\"id\"): obj for obj in request.data}\ndata = self.perform_bulk_update(qs, update_data, partial=partial)\n# 2.0 TODO: this should be wrapped with a paginator so as to match the same format as the list endpoint,\n# i.e. `{\"results\": [{instance}, {instance}, ...]}` instead of bare list `[{instance}, {instance}, ...]`\nreturn Response(data, status=status.HTTP_200_OK)\ndef perform_bulk_update(self, objects, update_data, partial):\nwith transaction.atomic():\ndata_list = []\nfor obj in objects:\ndata = update_data.get(str(obj.id))\nserializer = self.get_serializer(obj, data=data, partial=partial)\nserializer.is_valid(raise_exception=True)\nself.perform_update(serializer)\ndata_list.append(serializer.data)\nreturn data_list\ndef bulk_partial_update(self, request, *args, **kwargs):\nkwargs[\"partial\"] = True\nreturn self.bulk_update(request, *args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.ChoiceField","title":"<code>nautobot.apps.api.ChoiceField</code>","text":"<p>             Bases: <code>serializers.Field</code></p> <p>Represent a ChoiceField as {'value': , 'label': }. Accepts a single value on write. <p>:param choices: An iterable of choices in the form (value, key). :param allow_blank: Allow blank values in addition to the listed choices.</p> Source code in <code>nautobot/core/api/fields.py</code> <pre><code>class ChoiceField(serializers.Field):\n\"\"\"\n    Represent a ChoiceField as {'value': &lt;DB value&gt;, 'label': &lt;string&gt;}. Accepts a single value on write.\n    :param choices: An iterable of choices in the form (value, key).\n    :param allow_blank: Allow blank values in addition to the listed choices.\n    \"\"\"\ndef __init__(self, choices, allow_blank=False, **kwargs):\nself.choiceset = choices\nself.allow_blank = allow_blank\nself._choices = {}\n# Unpack grouped choices\nfor k, v in choices:\nif isinstance(v, (list, tuple)):\nfor k2, v2 in v:\nself._choices[k2] = v2\nelse:\nself._choices[k] = v\nsuper().__init__(**kwargs)\ndef validate_empty_values(self, data):\n# Convert null to an empty string unless allow_null == True\nif data is None:\nif self.allow_null:\nreturn True, None\nelse:\ndata = \"\"\nreturn super().validate_empty_values(data)\ndef to_representation(self, obj):\nif obj == \"\":\nreturn None\nreturn OrderedDict([(\"value\", obj), (\"label\", self._choices[obj])])\ndef to_internal_value(self, data):\nif data == \"\":\nif self.allow_blank:\nreturn data\nraise ValidationError(\"This field may not be blank.\")\nif isinstance(data, dict):\nif \"value\" in data:\ndata = data[\"value\"]\nelse:\nraise ValidationError(\n'Value must be passed directly (e.g. \"foo\": 123) '\n'or as a dict with key \"value\" (e.g. \"foo\": {\"value\": 123}).'\n)\n# Provide an explicit error message if the request is trying to write a dict or list\nif isinstance(data, list):\nraise ValidationError('Value must be passed directly (e.g. \"foo\": 123); do not use a list.')\n# Check for string representations of boolean/integer values\nif hasattr(data, \"lower\"):\nif data.lower() == \"true\":\ndata = True\nelif data.lower() == \"false\":\ndata = False\nelse:\ntry:\ndata = int(data)\nexcept ValueError:\npass\ntry:\nif data in self._choices:\nreturn data\nexcept TypeError:  # Input is an unhashable type\npass\nraise ValidationError(f\"{data} is not a valid choice.\")\n@property\ndef choices(self):\nreturn self._choices\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.ContentTypeField","title":"<code>nautobot.apps.api.ContentTypeField</code>","text":"<p>             Bases: <code>RelatedField</code></p> <p>Represent a ContentType as '.' Source code in <code>nautobot/core/api/fields.py</code> <pre><code>@extend_schema_field(str)\nclass ContentTypeField(RelatedField):\n\"\"\"\n    Represent a ContentType as '&lt;app_label&gt;.&lt;model&gt;'\n    \"\"\"\ndefault_error_messages = {\n\"does_not_exist\": \"Invalid content type: {content_type}\",\n\"invalid\": \"Invalid value. Specify a content type as '&lt;app_label&gt;.&lt;model_name&gt;'.\",\n}\ndef to_internal_value(self, data):\ntry:\napp_label, model = data.split(\".\")\nreturn self.queryset.get(app_label=app_label, model=model)\nexcept ObjectDoesNotExist:\nself.fail(\"does_not_exist\", content_type=data)\nexcept (AttributeError, TypeError, ValueError):\nself.fail(\"invalid\")\nreturn None\ndef to_representation(self, obj):\nreturn f\"{obj.app_label}.{obj.model}\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.CustomFieldModelSerializerMixin","title":"<code>nautobot.apps.api.CustomFieldModelSerializerMixin</code>","text":"<p>             Bases: <code>ValidatedModelSerializer</code></p> <p>Extends ModelSerializer to render any CustomFields and their values associated with an object.</p> Source code in <code>nautobot/core/api/serializers.py</code> <pre><code>class CustomFieldModelSerializerMixin(ValidatedModelSerializer):\n\"\"\"\n    Extends ModelSerializer to render any CustomFields and their values associated with an object.\n    \"\"\"\ncomputed_fields = SerializerMethodField(read_only=True)\ncustom_fields = CustomFieldsDataField(\nsource=\"_custom_field_data\",\ndefault=CreateOnlyDefault(CustomFieldDefaultValues()),\n)\n@extend_schema_field(OpenApiTypes.OBJECT)\ndef get_computed_fields(self, obj):\nreturn obj.get_computed_fields()\ndef get_field_names(self, declared_fields, info):\n\"\"\"Ensure that \"custom_fields\" and \"computed_fields\" are included appropriately.\"\"\"\nfields = list(super().get_field_names(declared_fields, info))\n# Ensure that custom_fields field appears at the end, not the start, of the fields\nself.extend_field_names(fields, \"custom_fields\")\nif not self.is_nested:\n# Only include computed_fields as opt-in.\nself.extend_field_names(fields, \"computed_fields\", opt_in_only=True)\nelse:\n# As computed fields are expensive, do not include them in nested serializers even if opted-in at the root\nif \"computed_fields\" in fields:\nfields.remove(\"computed_fields\")\nreturn fields\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.serializers.CustomFieldModelSerializerMixin.get_field_names","title":"<code>get_field_names(declared_fields, info)</code>","text":"<p>Ensure that \"custom_fields\" and \"computed_fields\" are included appropriately.</p> Source code in <code>nautobot/core/api/serializers.py</code> <pre><code>def get_field_names(self, declared_fields, info):\n\"\"\"Ensure that \"custom_fields\" and \"computed_fields\" are included appropriately.\"\"\"\nfields = list(super().get_field_names(declared_fields, info))\n# Ensure that custom_fields field appears at the end, not the start, of the fields\nself.extend_field_names(fields, \"custom_fields\")\nif not self.is_nested:\n# Only include computed_fields as opt-in.\nself.extend_field_names(fields, \"computed_fields\", opt_in_only=True)\nelse:\n# As computed fields are expensive, do not include them in nested serializers even if opted-in at the root\nif \"computed_fields\" in fields:\nfields.remove(\"computed_fields\")\nreturn fields\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.CustomFieldModelViewSet","title":"<code>nautobot.apps.api.CustomFieldModelViewSet</code>","text":"<p>             Bases: <code>ModelViewSet</code></p> <p>Include the applicable set of CustomFields in the ModelViewSet context.</p> Source code in <code>nautobot/extras/api/views.py</code> <pre><code>class CustomFieldModelViewSet(ModelViewSet):\n\"\"\"\n    Include the applicable set of CustomFields in the ModelViewSet context.\n    \"\"\"\ndef get_serializer_context(self):\n# Gather all custom fields for the model\ncontent_type = ContentType.objects.get_for_model(self.queryset.model)\ncustom_fields = content_type.custom_fields.all()\ncontext = super().get_serializer_context()\ncontext.update(\n{\n\"custom_fields\": custom_fields,\n}\n)\nreturn context\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.GetObjectCountsView","title":"<code>nautobot.apps.api.GetObjectCountsView</code>","text":"<p>             Bases: <code>NautobotAPIVersionMixin</code>, <code>APIView</code></p> <p>Enumerate the models listed on the Nautobot home page and return data structure containing verbose_name_plural, url and count.</p> Source code in <code>nautobot/core/api/views.py</code> <pre><code>class GetObjectCountsView(NautobotAPIVersionMixin, APIView):\n\"\"\"\n    Enumerate the models listed on the Nautobot home page and return data structure\n    containing verbose_name_plural, url and count.\n    \"\"\"\npermission_classes = [IsAuthenticated]\n@extend_schema(exclude=True)\ndef get(self, request):\nobject_counts = {\n\"Inventory\": [\n{\"model\": \"dcim.rack\"},\n{\"model\": \"dcim.devicetype\"},\n{\"model\": \"dcim.device\"},\n{\"model\": \"dcim.virtualchassis\"},\n{\"model\": \"dcim.deviceredundancygroup\"},\n{\"model\": \"dcim.cable\"},\n],\n\"Networks\": [\n{\"model\": \"ipam.vrf\"},\n{\"model\": \"ipam.prefix\"},\n{\"model\": \"ipam.ipaddress\"},\n{\"model\": \"ipam.vlan\"},\n],\n\"Security\": [{\"model\": \"extras.secret\"}],\n\"Platform\": [\n{\"model\": \"extras.gitrepository\"},\n{\"model\": \"extras.relationship\"},\n{\"model\": \"extras.computedfield\"},\n{\"model\": \"extras.customfield\"},\n{\"model\": \"extras.customlink\"},\n{\"model\": \"extras.tag\"},\n{\"model\": \"extras.status\"},\n{\"model\": \"extras.role\"},\n],\n}\nHIDE_RESTRICTED_UI = get_settings_or_config(\"HIDE_RESTRICTED_UI\")\nfor entry in itertools.chain(*object_counts.values()):\napp_label, model_name = entry[\"model\"].split(\".\")\nmodel = apps.get_model(app_label, model_name)\npermission = get_permission_for_model(model, \"view\")\nif HIDE_RESTRICTED_UI and not request.user.has_perm(permission):\ncontinue\ndata = {\"name\": model._meta.verbose_name_plural}\ntry:\ndata[\"url\"] = django_reverse(get_route_for_model(model, \"list\"))\nexcept NoReverseMatch:\nlogger = logging.getLogger(__name__)\nroute = get_route_for_model(model, \"list\")\nlogger.warning(f\"Handled expected exception when generating filter field: {route}\")\nmanager = model.objects\nif request.user.has_perm(permission):\nif hasattr(manager, \"restrict\"):\ndata[\"count\"] = model.objects.restrict(request.user).count()\nelse:\ndata[\"count\"] = model.objects.count()\nentry.update(data)\nreturn Response(object_counts)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.ModelViewSet","title":"<code>nautobot.apps.api.ModelViewSet</code>","text":"<p>             Bases: <code>NautobotAPIVersionMixin</code>, <code>BulkUpdateModelMixin</code>, <code>BulkDestroyModelMixin</code>, <code>ModelViewSetMixin</code>, <code>ModelViewSet_</code></p> <p>Extend DRF's ModelViewSet to support bulk update and delete functions.</p> Source code in <code>nautobot/core/api/views.py</code> <pre><code>class ModelViewSet(\nNautobotAPIVersionMixin,\nBulkUpdateModelMixin,\nBulkDestroyModelMixin,\nModelViewSetMixin,\nModelViewSet_,\n):\n\"\"\"\n    Extend DRF's ModelViewSet to support bulk update and delete functions.\n    \"\"\"\nlogger = logging.getLogger(__name__ + \".ModelViewSet\")\ndef _validate_objects(self, instance):\n\"\"\"\n        Check that the provided instance or list of instances are matched by the current queryset. This confirms that\n        any newly created or modified objects abide by the attributes granted by any applicable ObjectPermissions.\n        \"\"\"\nif isinstance(instance, list):\n# Check that all instances are still included in the view's queryset\nconforming_count = self.queryset.filter(pk__in=[obj.pk for obj in instance]).count()\nif conforming_count != len(instance):\nraise ObjectDoesNotExist\nelse:\n# Check that the instance is matched by the view's queryset\nself.queryset.get(pk=instance.pk)\ndef perform_create(self, serializer):\nmodel = self.queryset.model\nself.logger.info(f\"Creating new {model._meta.verbose_name}\")\n# Enforce object-level permissions on save()\ntry:\nwith transaction.atomic():\ninstance = serializer.save()\nself._validate_objects(instance)\nexcept ObjectDoesNotExist:\nraise PermissionDenied()\ndef perform_update(self, serializer):\nmodel = self.queryset.model\nself.logger.info(f\"Updating {model._meta.verbose_name} {serializer.instance} (PK: {serializer.instance.pk})\")\n# Enforce object-level permissions on save()\ntry:\nwith transaction.atomic():\ninstance = serializer.save()\nself._validate_objects(instance)\nexcept ObjectDoesNotExist:\nraise PermissionDenied()\ndef perform_destroy(self, instance):\nmodel = self.queryset.model\nself.logger.info(f\"Deleting {model._meta.verbose_name} {instance} (PK: {instance.pk})\")\nreturn super().perform_destroy(instance)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.ModelViewSetMixin","title":"<code>nautobot.apps.api.ModelViewSetMixin</code>","text":"Source code in <code>nautobot/core/api/views.py</code> <pre><code>class ModelViewSetMixin:\nlogger = logging.getLogger(__name__ + \".ModelViewSet\")\n# TODO: can't set lookup_value_regex globally; some models/viewsets (ContentType, Group) have integer rather than\n#       UUID PKs and also do NOT support composite-keys.\n#       The impact of NOT setting this is that per the OpenAPI schema, only UUIDs are permitted for most ViewSets;\n#       however, \"secretly\" due to our custom get_object() implementation below, you can actually also specify a\n#       composite_key value instead of a UUID. We're not currently documenting/using this feature, so OK for now\n# lookup_value_regex = r\"[^/]+\"\ndef get_object(self):\n\"\"\"Extend rest_framework.generics.GenericAPIView.get_object to allow \"pk\" lookups to use a composite-key.\"\"\"\nqueryset = self.filter_queryset(self.get_queryset())\nlookup_url_kwarg = self.lookup_url_kwarg or self.lookup_field\nassert lookup_url_kwarg in self.kwargs, (\nf\"Expected view {self.__class__.__name__} to be called with a URL keyword argument named \"\nf'\"{lookup_url_kwarg}\". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.'\n)\nif lookup_url_kwarg == \"pk\" and hasattr(queryset.model, \"composite_key\"):\n# Support lookup by either PK (UUID) or composite_key\nlookup_value = self.kwargs[\"pk\"]\nif is_uuid(lookup_value):\nobj = get_object_or_404(queryset, pk=lookup_value)\nelse:\nobj = get_object_or_404(queryset, composite_key=lookup_value)\nelse:\n# Default DRF lookup behavior, just in case a viewset has overridden `lookup_url_kwarg` for its own needs\nobj = get_object_or_404(queryset, **{self.lookup_field: self.kwargs[lookup_url_kwarg]})\nself.check_object_permissions(self.request, obj)\nreturn obj\ndef get_serializer(self, *args, **kwargs):\n# If a list of objects has been provided, initialize the serializer with many=True\nif isinstance(kwargs.get(\"data\", {}), list):\nkwargs[\"many\"] = True\nreturn super().get_serializer(*args, **kwargs)\ndef get_serializer_context(self):\ncontext = super().get_serializer_context()\nif \"text/csv\" in self.request.accepted_media_type:\n# CSV rendering should always use depth 0\ncontext[\"depth\"] = 0\nelif self.request.method == \"GET\":\n# Only allow the depth to be greater than 0 in GET requests\ndepth = 0\ntry:\ndepth = int(self.request.query_params.get(\"depth\", 0))\nexcept ValueError:\nself.logger.warning(\"The depth parameter must be an integer between 0 and 10\")\ncontext[\"depth\"] = depth\nelse:\n# Use depth=0 in all write type requests.\ncontext[\"depth\"] = 0\nreturn context\ndef restrict_queryset(self, request, *args, **kwargs):\n\"\"\"\n        Restrict the view's queryset to allow only the permitted objects for the given request.\n        Subclasses (such as nautobot.extras.api.views.JobModelViewSet) may wish to override this.\n        Called by initial(), below.\n        \"\"\"\n# Restrict the view's QuerySet to allow only the permitted objects for the given user, if applicable\nif request.user.is_authenticated:\nhttp_action = HTTP_ACTIONS[request.method]\nif http_action:\nself.queryset = self.queryset.restrict(request.user, http_action)\ndef initial(self, request, *args, **kwargs):\n\"\"\"\n        Runs anything that needs to occur prior to calling the method handler.\n        Override of internal Django Rest Framework API.\n        \"\"\"\nsuper().initial(request, *args, **kwargs)\n# Django Rest Framework stores the raw API version string e.g. \"1.2\" as request.version.\n# For convenience we split it out into integer major/minor versions as well.\nmajor, minor = request.version.split(\".\")\nrequest.major_version = int(major)\nrequest.minor_version = int(minor)\nself.restrict_queryset(request, *args, **kwargs)\ndef dispatch(self, request, *args, **kwargs):\ntry:\nreturn super().dispatch(request, *args, **kwargs)\nexcept ProtectedError as e:\nprotected_objects = list(e.protected_objects)\nmsg = f\"Unable to delete object. {len(protected_objects)} dependent objects were found: \"\nmsg += \", \".join([f\"{obj} ({obj.pk})\" for obj in protected_objects])\nself.logger.warning(msg)\nreturn self.finalize_response(request, Response({\"detail\": msg}, status=409), *args, **kwargs)\ndef finalize_response(self, request, response, *args, **kwargs):\n# In the case of certain errors, we might not even get to the point of setting request.accepted_media_type\nif hasattr(request, \"accepted_media_type\") and \"text/csv\" in request.accepted_media_type:\nfilename = f\"{settings.BRANDING_PREPENDED_FILENAME}{self.queryset.model.__name__.lower()}_data.csv\"\nresponse[\"Content-Disposition\"] = f'attachment; filename=\"{filename}\"'\nreturn super().finalize_response(request, response, *args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.views.ModelViewSetMixin.get_object","title":"<code>get_object()</code>","text":"<p>Extend rest_framework.generics.GenericAPIView.get_object to allow \"pk\" lookups to use a composite-key.</p> Source code in <code>nautobot/core/api/views.py</code> <pre><code>def get_object(self):\n\"\"\"Extend rest_framework.generics.GenericAPIView.get_object to allow \"pk\" lookups to use a composite-key.\"\"\"\nqueryset = self.filter_queryset(self.get_queryset())\nlookup_url_kwarg = self.lookup_url_kwarg or self.lookup_field\nassert lookup_url_kwarg in self.kwargs, (\nf\"Expected view {self.__class__.__name__} to be called with a URL keyword argument named \"\nf'\"{lookup_url_kwarg}\". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.'\n)\nif lookup_url_kwarg == \"pk\" and hasattr(queryset.model, \"composite_key\"):\n# Support lookup by either PK (UUID) or composite_key\nlookup_value = self.kwargs[\"pk\"]\nif is_uuid(lookup_value):\nobj = get_object_or_404(queryset, pk=lookup_value)\nelse:\nobj = get_object_or_404(queryset, composite_key=lookup_value)\nelse:\n# Default DRF lookup behavior, just in case a viewset has overridden `lookup_url_kwarg` for its own needs\nobj = get_object_or_404(queryset, **{self.lookup_field: self.kwargs[lookup_url_kwarg]})\nself.check_object_permissions(self.request, obj)\nreturn obj\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.views.ModelViewSetMixin.initial","title":"<code>initial(request, *args, **kwargs)</code>","text":"<p>Runs anything that needs to occur prior to calling the method handler.</p> <p>Override of internal Django Rest Framework API.</p> Source code in <code>nautobot/core/api/views.py</code> <pre><code>def initial(self, request, *args, **kwargs):\n\"\"\"\n    Runs anything that needs to occur prior to calling the method handler.\n    Override of internal Django Rest Framework API.\n    \"\"\"\nsuper().initial(request, *args, **kwargs)\n# Django Rest Framework stores the raw API version string e.g. \"1.2\" as request.version.\n# For convenience we split it out into integer major/minor versions as well.\nmajor, minor = request.version.split(\".\")\nrequest.major_version = int(major)\nrequest.minor_version = int(minor)\nself.restrict_queryset(request, *args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.views.ModelViewSetMixin.restrict_queryset","title":"<code>restrict_queryset(request, *args, **kwargs)</code>","text":"<p>Restrict the view's queryset to allow only the permitted objects for the given request.</p> <p>Subclasses (such as nautobot.extras.api.views.JobModelViewSet) may wish to override this.</p> <p>Called by initial(), below.</p> Source code in <code>nautobot/core/api/views.py</code> <pre><code>def restrict_queryset(self, request, *args, **kwargs):\n\"\"\"\n    Restrict the view's queryset to allow only the permitted objects for the given request.\n    Subclasses (such as nautobot.extras.api.views.JobModelViewSet) may wish to override this.\n    Called by initial(), below.\n    \"\"\"\n# Restrict the view's QuerySet to allow only the permitted objects for the given user, if applicable\nif request.user.is_authenticated:\nhttp_action = HTTP_ACTIONS[request.method]\nif http_action:\nself.queryset = self.queryset.restrict(request.user, http_action)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.MultipleChoiceJSONField","title":"<code>nautobot.apps.api.MultipleChoiceJSONField</code>","text":"<p>             Bases: <code>serializers.MultipleChoiceField</code></p> <p>A MultipleChoiceField that renders the received value as a JSON-compatible list rather than a set.</p> Source code in <code>nautobot/extras/api/fields.py</code> <pre><code>class MultipleChoiceJSONField(serializers.MultipleChoiceField):\n\"\"\"A MultipleChoiceField that renders the received value as a JSON-compatible list rather than a set.\"\"\"\ndef __init__(self, **kwargs):\n\"\"\"Overload default choices handling to also accept a callable.\"\"\"\nchoices = kwargs.get(\"choices\")\nif callable(choices):\nkwargs[\"choices\"] = CallableChoiceIterator(choices)\nsuper().__init__(**kwargs)\ndef to_internal_value(self, data):\nset_value = super().to_internal_value(data)\nreturn sorted(set_value)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.extras.api.fields.MultipleChoiceJSONField.__init__","title":"<code>__init__(**kwargs)</code>","text":"<p>Overload default choices handling to also accept a callable.</p> Source code in <code>nautobot/extras/api/fields.py</code> <pre><code>def __init__(self, **kwargs):\n\"\"\"Overload default choices handling to also accept a callable.\"\"\"\nchoices = kwargs.get(\"choices\")\nif callable(choices):\nkwargs[\"choices\"] = CallableChoiceIterator(choices)\nsuper().__init__(**kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.NautobotAutoSchema","title":"<code>nautobot.apps.api.NautobotAutoSchema</code>","text":"<p>             Bases: <code>AutoSchema</code></p> <p>Nautobot-specific extensions to drf-spectacular's AutoSchema.</p> Source code in <code>nautobot/core/api/schema.py</code> <pre><code>class NautobotAutoSchema(AutoSchema):\n\"\"\"Nautobot-specific extensions to drf-spectacular's AutoSchema.\"\"\"\ncustom_actions = [\"bulk_update\", \"bulk_partial_update\", \"bulk_destroy\"]\n# Primarily, method_mapping is used to map HTTP method verbs to viewset method names,\n# which doesn't account for the fact that with our custom actions there are multiple viewset methods per verb,\n# hence why we have to override get_operation_id() below.\n# Secondarily, drf-spectacular uses method_mapping.values() to identify which methods are view methods,\n# so need to make sure these methods are represented as values in the mapping even if not under the actual verbs.\nmethod_mapping = AutoSchema.method_mapping.copy()\nmethod_mapping.update(\n{\n\"_put\": \"bulk_update\",\n\"_patch\": \"bulk_partial_update\",\n\"_delete\": \"bulk_destroy\",\n}\n)\n@property\ndef is_bulk_action(self):\n\"\"\"Custom property for convenience.\"\"\"\nreturn hasattr(self.view, \"action\") and self.view.action in self.custom_actions\n@property\ndef is_partial_action(self):\n\"\"\"Custom property for convenience.\"\"\"\nreturn hasattr(self.view, \"action\") and self.view.action in [\"partial_update\", \"bulk_partial_update\"]\ndef _get_paginator(self):\n\"\"\"Nautobot's custom bulk operations, even though they return a list of records, are NOT paginated.\"\"\"\nif self.is_bulk_action:\nreturn None\nreturn super()._get_paginator()\ndef get_description(self):\n\"\"\"\n        Get the appropriate description for a given API endpoint.\n        By default, if a specific action doesn't have its own docstring, and neither does the view class,\n        drf-spectacular will walk up the MRO of the view class until it finds a docstring, and use that.\n        Most of our viewsets (for better or for worse) do not have docstrings, and so it'll find and use the generic\n        docstring of the `NautobotModelViewSet` class, which isn't very useful to the end user. Instead of doing that,\n        we only use the docstring of the view itself (ignoring its parent class docstrings), or if none exists, we\n        make an attempt at rendering a basically accurate default description.\n        \"\"\"\naction_or_method = getattr(self.view, getattr(self.view, \"action\", self.method.lower()), None)\naction_doc = get_doc(action_or_method)\nif action_doc:\nreturn action_doc\nif self.view.__doc__:\nview_doc = get_doc(self.view.__class__)\nif view_doc:\nreturn view_doc\n# Fall back to a generic default description\nif hasattr(self.view, \"queryset\") and self.method.lower() in self.method_mapping:\naction = self.method_mapping[self.method.lower()].replace(\"_\", \" \").capitalize()\nmodel_name = self.view.queryset.model._meta.verbose_name\nif action == \"Create\":\nreturn f\"{action} one or more {model_name} objects.\"\nif \"{id}\" in self.path:\nreturn f\"{action} a {model_name} object.\"\nreturn f\"{action} a list of {model_name} objects.\"\n# Give up\nreturn super().get_description()\ndef get_filter_backends(self):\n\"\"\"Nautobot's custom bulk operations, even though they return a list of records, are NOT filterable.\"\"\"\nif self.is_bulk_action:\nreturn []\nreturn super().get_filter_backends()\ndef get_operation(self, *args, **kwargs):\noperation = super().get_operation(*args, **kwargs)\n# drf-spectacular never generates a requestBody for DELETE operations, but our bulk-delete operations need one\nif operation is not None and \"requestBody\" not in operation and self.is_bulk_action and self.method == \"DELETE\":\n# based on drf-spectacular's `_get_request_body()`, `_get_request_for_media_type()`,\n# `_unwrap_list_serializer()`, and `_get_request_for_media_type()` methods\nrequest_serializer = self.get_request_serializer()\n# We skip past a number of checks from the aforementioned private methods, as this is a very specific case\ncomponent = self.resolve_serializer(request_serializer.child, \"request\")\noperation[\"requestBody\"] = {\n\"content\": {\nmedia_type: build_media_type_object(build_array_type(component.ref))\nfor media_type in self.map_parsers()\n},\n\"required\": True,\n}\n# Inject a custom description for the \"id\" parameter since ours has custom lookup behavior.\nif \"parameters\" in operation:\nfor param in operation[\"parameters\"]:\nif param[\"name\"] == \"id\" and \"description\" not in param:\nparam[\"description\"] = \"Unique object identifier, either a UUID primary key or a composite key.\"\nif self.method == \"GET\":\nif \"depth\" not in operation[\"parameters\"]:\noperation[\"parameters\"].append(\n{\n\"in\": \"query\",\n\"name\": \"depth\",\n\"required\": False,\n\"description\": \"Serializer Depth\",\n\"schema\": {\"type\": \"integer\", \"minimum\": 0, \"maximum\": 10, \"default\": 1},\n}\n)\nreturn operation\ndef get_operation_id(self):\n\"\"\"Extend the base method to handle Nautobot's REST API bulk operations.\n        Without this extension, every one of our ModelViewSet classes will result in drf-spectacular complaining\n        about operationId collisions, e.g. between DELETE /api/dcim/devices/ and DELETE /api/dcim/devices/&lt;pk&gt;/ would\n        both get resolved to the same \"dcim_devices_destroy\" operation-id and this would make drf-spectacular complain.\n        With this extension, the bulk endpoints automatically get a different operation-id from the non-bulk endpoints.\n        \"\"\"\nif self.is_bulk_action:\n# Same basic sequence of calls as AutoSchema.get_operation_id,\n# except we use \"self.view.action\" instead of \"self.method_mapping[self.method]\" to get the action verb\ntokenized_path = self._tokenize_path()\ntokenized_path = [t.replace(\"-\", \"_\") for t in tokenized_path]\naction = self.view.action\nif not tokenized_path:\ntokenized_path.append(\"root\")\nif re.search(r\"&lt;drf_format_suffix\\w*:\\w+&gt;\", self.path_regex):\ntokenized_path.append(\"formatted\")\nreturn \"_\".join(tokenized_path + [action])\n# For all other view actions, operation-id is the same as in the base class\nreturn super().get_operation_id()\ndef get_request_serializer(self):\n\"\"\"\n        Return the request serializer (used for describing/parsing the request payload) for this endpoint.\n        We override the default drf-spectacular behavior for the case where the endpoint describes a write request\n        with required data (PATCH, POST, PUT). In those cases we replace FooSerializer with a dynamically-defined\n        WritableFooSerializer class in order to more accurately represent the available options on write.\n        We also override for the case where the endpoint is one of Nautobot's custom bulk API endpoints, which\n        require a list of serializers as input, rather than a single one.\n        \"\"\"\nserializer = super().get_request_serializer()\n# For bulk operations, make sure we use a \"many\" serializer.\nmany = self.is_bulk_action\npartial = self.is_partial_action\nif serializer is not None and self.method in [\"PATCH\", \"POST\", \"PUT\"]:\nwritable_class = self.get_writable_class(serializer, bulk=many)\nif writable_class is not None:\nif hasattr(serializer, \"child\"):\nchild_serializer = self.get_writable_class(serializer.child, bulk=many)\nserializer = writable_class(child=child_serializer, many=many, partial=partial)\nelse:\nserializer = writable_class(many=many, partial=partial)\nreturn serializer\ndef get_response_serializers(self):\n\"\"\"\n        Return the response serializer (used for describing the response payload) for this endpoint.\n        We override the default drf-spectacular behavior for the case where the endpoint describes a write request\n        to a bulk endpoint, which returns a list of serializers, rather than a single one.\n        \"\"\"\nresponse_serializers = super().get_response_serializers()\nif self.is_bulk_action:\nif is_serializer(response_serializers):\nreturn type(response_serializers)(many=True)\nreturn response_serializers\n# Cache of existing dynamically-defined WritableFooSerializer classes.\nwritable_serializers = {}\ndef get_writable_class(self, serializer, bulk=False):\n\"\"\"\n        Given a FooSerializer instance, look up or construct a [Bulk]WritableFooSerializer class if necessary.\n        If no [Bulk]WritableFooSerializer class is needed, returns None instead.\n        \"\"\"\nproperties = {}\n# Does this serializer have any fields of certain special types?\n# These are the field types that are asymmetric between request (write) and response (read); if any such fields\n# are present, we should generate a distinct WritableFooSerializer to reflect that asymmetry in the schema.\nfields = {} if hasattr(serializer, \"child\") else serializer.fields\nfor child_name, child in fields.items():\n# Don't consider read_only fields (since we're planning specifically for the writable serializer).\nif child.read_only:\ncontinue\nif isinstance(child, (ChoiceField, WritableNestedSerializer)):\nproperties[child_name] = None\nelif isinstance(child, ManyRelatedField) and isinstance(child.child_relation, SerializedPKRelatedField):\nproperties[child_name] = None\nif bulk:\n# The \"id\" field is always different in bulk serializers\nproperties[\"id\"] = None\nif not properties:\n# There's nothing about this serializer that requires a special WritableSerializer class to be defined.\nreturn None\n# Have we already created a [Bulk]WritableFooSerializer class or do we need to do so now?\nwritable_name = \"Writable\" + type(serializer).__name__\nif bulk:\nwritable_name = f\"Bulk{writable_name}\"\nif writable_name not in self.writable_serializers:\n# We need to create a new class to use\n# If the original serializer class has a Meta, make sure we set Meta.ref_name appropriately\nmeta_class = getattr(type(serializer), \"Meta\", None)\nif meta_class:\nref_name = \"Writable\" + self.get_serializer_ref_name(serializer)\nif bulk:\nref_name = f\"Bulk{ref_name}\"\nwritable_meta = type(\"Meta\", (meta_class,), {\"ref_name\": ref_name})\nproperties[\"Meta\"] = writable_meta\n# Define and cache a new [Bulk]WritableFooSerializer class\nif bulk:\ndef get_fields(self):\n\"\"\"For Nautobot's bulk_update/partial_update/delete APIs, the `id` field is mandatory.\"\"\"\nnew_fields = {}\nfor name, field in type(serializer)().get_fields().items():\nif name == \"id\":\nfield.read_only = False\nfield.required = True\nnew_fields[name] = field\nreturn new_fields\nproperties[\"get_fields\"] = get_fields\nself.writable_serializers[writable_name] = type(writable_name, (type(serializer),), properties)\nwritable_class = self.writable_serializers[writable_name]\nreturn writable_class\ndef get_serializer_ref_name(self, serializer):\n\"\"\"\n        Get the serializer's ref_name Meta attribute if set, or else derive a ref_name automatically.\n        Based on drf_yasg.utils.get_serializer_ref_name().\n        \"\"\"\nserializer_meta = getattr(serializer, \"Meta\", None)\nif hasattr(serializer_meta, \"ref_name\"):\nreturn serializer_meta.ref_name\nserializer_name = type(serializer).__name__\nif serializer_name == \"NestedSerializer\" and isinstance(serializer, serializers.ModelSerializer):\nreturn None\nref_name = serializer_name\nif ref_name.endswith(\"Serializer\"):\nref_name = ref_name[: -len(\"Serializer\")]\nreturn ref_name\ndef resolve_serializer(self, serializer, direction, bypass_extensions=False):\n\"\"\"\n        Re-add required `id` field on bulk_partial_update action.\n        drf-spectacular clears the `required` list for any partial serializers in its `_map_basic_serializer()`,\n        but Nautobot bulk partial updates require the `id` field to be specified for each object to update.\n        \"\"\"\ncomponent = super().resolve_serializer(serializer, direction, bypass_extensions)\nif (\ncomponent\nand component.schema is not None\nand self.is_bulk_action\nand self.is_partial_action\nand direction == \"request\"\n):\ncomponent.schema[\"required\"] = [\"id\"]\nreturn component\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.schema.NautobotAutoSchema.is_bulk_action","title":"<code>is_bulk_action</code>  <code>property</code>","text":"<p>Custom property for convenience.</p>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.schema.NautobotAutoSchema.is_partial_action","title":"<code>is_partial_action</code>  <code>property</code>","text":"<p>Custom property for convenience.</p>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.schema.NautobotAutoSchema.get_description","title":"<code>get_description()</code>","text":"<p>Get the appropriate description for a given API endpoint.</p> <p>By default, if a specific action doesn't have its own docstring, and neither does the view class, drf-spectacular will walk up the MRO of the view class until it finds a docstring, and use that. Most of our viewsets (for better or for worse) do not have docstrings, and so it'll find and use the generic docstring of the <code>NautobotModelViewSet</code> class, which isn't very useful to the end user. Instead of doing that, we only use the docstring of the view itself (ignoring its parent class docstrings), or if none exists, we make an attempt at rendering a basically accurate default description.</p> Source code in <code>nautobot/core/api/schema.py</code> <pre><code>def get_description(self):\n\"\"\"\n    Get the appropriate description for a given API endpoint.\n    By default, if a specific action doesn't have its own docstring, and neither does the view class,\n    drf-spectacular will walk up the MRO of the view class until it finds a docstring, and use that.\n    Most of our viewsets (for better or for worse) do not have docstrings, and so it'll find and use the generic\n    docstring of the `NautobotModelViewSet` class, which isn't very useful to the end user. Instead of doing that,\n    we only use the docstring of the view itself (ignoring its parent class docstrings), or if none exists, we\n    make an attempt at rendering a basically accurate default description.\n    \"\"\"\naction_or_method = getattr(self.view, getattr(self.view, \"action\", self.method.lower()), None)\naction_doc = get_doc(action_or_method)\nif action_doc:\nreturn action_doc\nif self.view.__doc__:\nview_doc = get_doc(self.view.__class__)\nif view_doc:\nreturn view_doc\n# Fall back to a generic default description\nif hasattr(self.view, \"queryset\") and self.method.lower() in self.method_mapping:\naction = self.method_mapping[self.method.lower()].replace(\"_\", \" \").capitalize()\nmodel_name = self.view.queryset.model._meta.verbose_name\nif action == \"Create\":\nreturn f\"{action} one or more {model_name} objects.\"\nif \"{id}\" in self.path:\nreturn f\"{action} a {model_name} object.\"\nreturn f\"{action} a list of {model_name} objects.\"\n# Give up\nreturn super().get_description()\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.schema.NautobotAutoSchema.get_filter_backends","title":"<code>get_filter_backends()</code>","text":"<p>Nautobot's custom bulk operations, even though they return a list of records, are NOT filterable.</p> Source code in <code>nautobot/core/api/schema.py</code> <pre><code>def get_filter_backends(self):\n\"\"\"Nautobot's custom bulk operations, even though they return a list of records, are NOT filterable.\"\"\"\nif self.is_bulk_action:\nreturn []\nreturn super().get_filter_backends()\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.schema.NautobotAutoSchema.get_operation_id","title":"<code>get_operation_id()</code>","text":"<p>Extend the base method to handle Nautobot's REST API bulk operations.</p> <p>Without this extension, every one of our ModelViewSet classes will result in drf-spectacular complaining about operationId collisions, e.g. between DELETE /api/dcim/devices/ and DELETE /api/dcim/devices// would both get resolved to the same \"dcim_devices_destroy\" operation-id and this would make drf-spectacular complain. <p>With this extension, the bulk endpoints automatically get a different operation-id from the non-bulk endpoints.</p> Source code in <code>nautobot/core/api/schema.py</code> <pre><code>def get_operation_id(self):\n\"\"\"Extend the base method to handle Nautobot's REST API bulk operations.\n    Without this extension, every one of our ModelViewSet classes will result in drf-spectacular complaining\n    about operationId collisions, e.g. between DELETE /api/dcim/devices/ and DELETE /api/dcim/devices/&lt;pk&gt;/ would\n    both get resolved to the same \"dcim_devices_destroy\" operation-id and this would make drf-spectacular complain.\n    With this extension, the bulk endpoints automatically get a different operation-id from the non-bulk endpoints.\n    \"\"\"\nif self.is_bulk_action:\n# Same basic sequence of calls as AutoSchema.get_operation_id,\n# except we use \"self.view.action\" instead of \"self.method_mapping[self.method]\" to get the action verb\ntokenized_path = self._tokenize_path()\ntokenized_path = [t.replace(\"-\", \"_\") for t in tokenized_path]\naction = self.view.action\nif not tokenized_path:\ntokenized_path.append(\"root\")\nif re.search(r\"&lt;drf_format_suffix\\w*:\\w+&gt;\", self.path_regex):\ntokenized_path.append(\"formatted\")\nreturn \"_\".join(tokenized_path + [action])\n# For all other view actions, operation-id is the same as in the base class\nreturn super().get_operation_id()\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.schema.NautobotAutoSchema.get_request_serializer","title":"<code>get_request_serializer()</code>","text":"<p>Return the request serializer (used for describing/parsing the request payload) for this endpoint.</p> <p>We override the default drf-spectacular behavior for the case where the endpoint describes a write request with required data (PATCH, POST, PUT). In those cases we replace FooSerializer with a dynamically-defined WritableFooSerializer class in order to more accurately represent the available options on write.</p> <p>We also override for the case where the endpoint is one of Nautobot's custom bulk API endpoints, which require a list of serializers as input, rather than a single one.</p> Source code in <code>nautobot/core/api/schema.py</code> <pre><code>def get_request_serializer(self):\n\"\"\"\n    Return the request serializer (used for describing/parsing the request payload) for this endpoint.\n    We override the default drf-spectacular behavior for the case where the endpoint describes a write request\n    with required data (PATCH, POST, PUT). In those cases we replace FooSerializer with a dynamically-defined\n    WritableFooSerializer class in order to more accurately represent the available options on write.\n    We also override for the case where the endpoint is one of Nautobot's custom bulk API endpoints, which\n    require a list of serializers as input, rather than a single one.\n    \"\"\"\nserializer = super().get_request_serializer()\n# For bulk operations, make sure we use a \"many\" serializer.\nmany = self.is_bulk_action\npartial = self.is_partial_action\nif serializer is not None and self.method in [\"PATCH\", \"POST\", \"PUT\"]:\nwritable_class = self.get_writable_class(serializer, bulk=many)\nif writable_class is not None:\nif hasattr(serializer, \"child\"):\nchild_serializer = self.get_writable_class(serializer.child, bulk=many)\nserializer = writable_class(child=child_serializer, many=many, partial=partial)\nelse:\nserializer = writable_class(many=many, partial=partial)\nreturn serializer\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.schema.NautobotAutoSchema.get_response_serializers","title":"<code>get_response_serializers()</code>","text":"<p>Return the response serializer (used for describing the response payload) for this endpoint.</p> <p>We override the default drf-spectacular behavior for the case where the endpoint describes a write request to a bulk endpoint, which returns a list of serializers, rather than a single one.</p> Source code in <code>nautobot/core/api/schema.py</code> <pre><code>def get_response_serializers(self):\n\"\"\"\n    Return the response serializer (used for describing the response payload) for this endpoint.\n    We override the default drf-spectacular behavior for the case where the endpoint describes a write request\n    to a bulk endpoint, which returns a list of serializers, rather than a single one.\n    \"\"\"\nresponse_serializers = super().get_response_serializers()\nif self.is_bulk_action:\nif is_serializer(response_serializers):\nreturn type(response_serializers)(many=True)\nreturn response_serializers\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.schema.NautobotAutoSchema.get_serializer_ref_name","title":"<code>get_serializer_ref_name(serializer)</code>","text":"<p>Get the serializer's ref_name Meta attribute if set, or else derive a ref_name automatically.</p> <p>Based on drf_yasg.utils.get_serializer_ref_name().</p> Source code in <code>nautobot/core/api/schema.py</code> <pre><code>def get_serializer_ref_name(self, serializer):\n\"\"\"\n    Get the serializer's ref_name Meta attribute if set, or else derive a ref_name automatically.\n    Based on drf_yasg.utils.get_serializer_ref_name().\n    \"\"\"\nserializer_meta = getattr(serializer, \"Meta\", None)\nif hasattr(serializer_meta, \"ref_name\"):\nreturn serializer_meta.ref_name\nserializer_name = type(serializer).__name__\nif serializer_name == \"NestedSerializer\" and isinstance(serializer, serializers.ModelSerializer):\nreturn None\nref_name = serializer_name\nif ref_name.endswith(\"Serializer\"):\nref_name = ref_name[: -len(\"Serializer\")]\nreturn ref_name\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.schema.NautobotAutoSchema.get_writable_class","title":"<code>get_writable_class(serializer, bulk=False)</code>","text":"<p>Given a FooSerializer instance, look up or construct a [Bulk]WritableFooSerializer class if necessary.</p> <p>If no [Bulk]WritableFooSerializer class is needed, returns None instead.</p> Source code in <code>nautobot/core/api/schema.py</code> <pre><code>def get_writable_class(self, serializer, bulk=False):\n\"\"\"\n    Given a FooSerializer instance, look up or construct a [Bulk]WritableFooSerializer class if necessary.\n    If no [Bulk]WritableFooSerializer class is needed, returns None instead.\n    \"\"\"\nproperties = {}\n# Does this serializer have any fields of certain special types?\n# These are the field types that are asymmetric between request (write) and response (read); if any such fields\n# are present, we should generate a distinct WritableFooSerializer to reflect that asymmetry in the schema.\nfields = {} if hasattr(serializer, \"child\") else serializer.fields\nfor child_name, child in fields.items():\n# Don't consider read_only fields (since we're planning specifically for the writable serializer).\nif child.read_only:\ncontinue\nif isinstance(child, (ChoiceField, WritableNestedSerializer)):\nproperties[child_name] = None\nelif isinstance(child, ManyRelatedField) and isinstance(child.child_relation, SerializedPKRelatedField):\nproperties[child_name] = None\nif bulk:\n# The \"id\" field is always different in bulk serializers\nproperties[\"id\"] = None\nif not properties:\n# There's nothing about this serializer that requires a special WritableSerializer class to be defined.\nreturn None\n# Have we already created a [Bulk]WritableFooSerializer class or do we need to do so now?\nwritable_name = \"Writable\" + type(serializer).__name__\nif bulk:\nwritable_name = f\"Bulk{writable_name}\"\nif writable_name not in self.writable_serializers:\n# We need to create a new class to use\n# If the original serializer class has a Meta, make sure we set Meta.ref_name appropriately\nmeta_class = getattr(type(serializer), \"Meta\", None)\nif meta_class:\nref_name = \"Writable\" + self.get_serializer_ref_name(serializer)\nif bulk:\nref_name = f\"Bulk{ref_name}\"\nwritable_meta = type(\"Meta\", (meta_class,), {\"ref_name\": ref_name})\nproperties[\"Meta\"] = writable_meta\n# Define and cache a new [Bulk]WritableFooSerializer class\nif bulk:\ndef get_fields(self):\n\"\"\"For Nautobot's bulk_update/partial_update/delete APIs, the `id` field is mandatory.\"\"\"\nnew_fields = {}\nfor name, field in type(serializer)().get_fields().items():\nif name == \"id\":\nfield.read_only = False\nfield.required = True\nnew_fields[name] = field\nreturn new_fields\nproperties[\"get_fields\"] = get_fields\nself.writable_serializers[writable_name] = type(writable_name, (type(serializer),), properties)\nwritable_class = self.writable_serializers[writable_name]\nreturn writable_class\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.schema.NautobotAutoSchema.resolve_serializer","title":"<code>resolve_serializer(serializer, direction, bypass_extensions=False)</code>","text":"<p>Re-add required <code>id</code> field on bulk_partial_update action.</p> <p>drf-spectacular clears the <code>required</code> list for any partial serializers in its <code>_map_basic_serializer()</code>, but Nautobot bulk partial updates require the <code>id</code> field to be specified for each object to update.</p> Source code in <code>nautobot/core/api/schema.py</code> <pre><code>def resolve_serializer(self, serializer, direction, bypass_extensions=False):\n\"\"\"\n    Re-add required `id` field on bulk_partial_update action.\n    drf-spectacular clears the `required` list for any partial serializers in its `_map_basic_serializer()`,\n    but Nautobot bulk partial updates require the `id` field to be specified for each object to update.\n    \"\"\"\ncomponent = super().resolve_serializer(serializer, direction, bypass_extensions)\nif (\ncomponent\nand component.schema is not None\nand self.is_bulk_action\nand self.is_partial_action\nand direction == \"request\"\n):\ncomponent.schema[\"required\"] = [\"id\"]\nreturn component\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.NautobotCSVParser","title":"<code>nautobot.apps.api.NautobotCSVParser</code>","text":"<p>             Bases: <code>BaseParser</code></p> <p>Counterpart to NautobotCSVRenderer - import CSV data.</p> Source code in <code>nautobot/core/api/parsers.py</code> <pre><code>class NautobotCSVParser(BaseParser):\n\"\"\"Counterpart to NautobotCSVRenderer - import CSV data.\"\"\"\nmedia_type = \"text/csv\"\ndef parse(self, stream, media_type=None, parser_context=None):\nparser_context = parser_context or {}\nencoding = parser_context.get(\"encoding\", \"UTF-8\")\ntry:\nif \"serializer_class\" in parser_context:\n# UI bulk-import case\nserializer_class = parser_context[\"serializer_class\"]\nelse:\n# REST API case\nserializer_class = parser_context[\"view\"].get_serializer_class()\nexcept (KeyError, AttributeError):\nraise ParseError(\"No serializer_class was provided by the parser_context\")\nif serializer_class is None:\nraise ParseError(\"Serializer class for this parser_context is None, unable to proceed\")\nserializer = serializer_class(context={\"request\": parser_context.get(\"request\", None), \"depth\": 0})\ntry:\ntext = stream.read().decode(encoding)\nreader = csv.DictReader(StringIO(text))\ndata = []\nfor counter, row in enumerate(reader, start=1):\ndata.append(self.row_elements_to_data(counter, row, serializer=serializer))\nif \"pk\" in parser_context.get(\"kwargs\", {}):\n# Single-object update, not bulk update - strip it so that we get the expected input and return format\ndata = data[0]\n# Note that we can't distinguish between single-create and bulk-create with a list of one object,\n# as both would have the same CSV representation. Therefore create via CSV **always** acts as bulk-create,\n# and the response will always be a list of created objects, never a single object\nif settings.DEBUG:\nlogger.debug(\"CSV loaded into data:\\n%s\", json.dumps(data, indent=2))\nreturn data\nexcept ParseError:\nraise\nexcept Exception as exc:\nraise ParseError(str(exc)) from exc\ndef _group_data_by_field_name(self, data):\n\"\"\"\n        Converts a dictionary with flat keys separated by '__' into a nested dictionary structure suitable for serialization.\n        Example:\n            Input:\n                {\n                    'type': 'virtual',\n                    'name': 'Interface 4',\n                    'device__name': 'Device 1',\n                    'device__tenant__name': '',\n                    'device__location': 'Test+Location+1',\n                    'status': 'Active',\n                }\n            Output:\n                {\n                    'type': 'virtual',\n                    'name': 'Interface 4',\n                    'device': {\n                        'name': 'Device 1',\n                        'location': 'Test+Location+1',\n                        \"tenant\":{\n                            \"name\": \"\",\n                        }\n                    },\n                    'status': 'Active'\n                }\n        \"\"\"\ndef insert_nested_dict(keys, value, current_dict):\nkey = keys[0]\nif len(keys) == 1:\ncurrent_dict[key] = None if value in [CSV_NO_OBJECT, CSV_NULL_TYPE] else value\nelse:\ncurrent_dict[key] = current_dict.get(key, {})\ninsert_nested_dict(keys[1:], value, current_dict[key])\nresult_dict = {}\nfor original_key, original_value in data.items():\nsplit_keys = original_key.split(\"__\")\ninsert_nested_dict(split_keys, original_value, result_dict)\nreturn result_dict\ndef _field_lookups_not_empty(self, field_lookups):\n\"\"\"Check if all values of the field lookups dict are not all NoObject\"\"\"\nreturn any(value != CSV_NO_OBJECT for value in field_lookups.values())\ndef _remove_object_not_found_values(self, data):\n\"\"\"Remove all `CSV_NO_OBJECT` field lookups from the given data, and swap out `CSV_NULL_TYPE` and\n        'CSV_NO_OBJECT' values for `None`.\n        If all the lookups for a field are 'CSV_NO_OBJECT', it indicates that the field does not exist,\n        and it needs to be removed to prevent unnecessary database queries.\n        Args:\n            data (dict): A dictionary containing field natural key lookups and their corresponding values.\n        Returns:\n            dict: A modified dictionary with field lookups of 'CSV_NO_OBJECT' values removed, and 'CSV_NULL_TYPE' and 'CSV_NO_OBJECT' swapped for `None`.\n        \"\"\"\nlookup_grouped_by_field_name = {}\nfor lookup, lookup_value in data.items():\nfield_name = lookup.split(\"__\", 1)[0]\nlookup_grouped_by_field_name.setdefault(field_name, {}).update({lookup: lookup_value})\n# Ignore lookup groups which has all its values set to NoObject\n# These lookups fields do not exists\ndata_without_missing_field_lookups_values = {\nlookup: lookup_value\nfor lookup_group in lookup_grouped_by_field_name.values()\nfor lookup, lookup_value in lookup_group.items()\nif self._field_lookups_not_empty(lookup_group)\n}\nreturn data_without_missing_field_lookups_values\ndef row_elements_to_data(self, counter, row, serializer):\n\"\"\"\n        Parse a single row of CSV data (represented as a dict) into a dict suitable for consumption by the serializer.\n        TODO: it would be more elegant if our serializer fields knew how to deserialize the CSV data themselves;\n        could we then literally have the parser just return list(reader) and not need this function at all?\n        \"\"\"\ndata = {}\nvalid_row_data = self._remove_object_not_found_values(row)\nfields_value_mapping = self._group_data_by_field_name(valid_row_data)\nfor column, key in enumerate(fields_value_mapping.keys(), start=1):\nif not key:\nraise ParseError(f\"Row {counter}: Column {column}: missing/empty header for this column\")\nvalue = fields_value_mapping[key]\nif key.startswith(\"cf_\"):\n# Custom field\nif value == \"\":\nvalue = None\ndata.setdefault(\"custom_fields\", {})[key[3:]] = value\ncontinue\nserializer_field = serializer.fields.get(key, None)\nif serializer_field is None:\n# The REST API normally just ignores any columns the serializer doesn't understand\nlogger.debug('Skipping unknown column \"%s\"', key)\ncontinue\nif serializer_field.read_only and key != \"id\":\n# Deserializing read-only fields is tricky, especially for things like SerializerMethodFields that\n# can potentially render as anything. We don't strictly need such fields (except \"id\" for bulk PATCH),\n# so let's just skip it.\ncontinue\nif isinstance(serializer_field, serializers.ManyRelatedField):\n# A list of related objects, represented as a list of composite-keys\nif value:\nvalue = value.split(\",\")\nelse:\nvalue = []\nelif isinstance(serializer_field, serializers.RelatedField):\n# A single related object, represented by its composite-key\nif value:\npass\nelse:\nvalue = None\nelif isinstance(serializer_field, (serializers.ListField, serializers.MultipleChoiceField)):\nif value:\nvalue = value.split(\",\")\nelse:\nvalue = []\nelif isinstance(serializer_field, (serializers.DictField, serializers.JSONField)):\n# We currently only store lists or dicts in JSONFields, never bare ints/strings.\n# On the CSV write side, we only render dicts to JSON\nif value is not None:\nif value.startswith((\"{\", \"[\")):\nvalue = json.loads(value)\nelse:\nvalue = value.split(\",\")\ntry:\n# We have some cases where it's a list of integers, such as in RackReservation.units\nvalue = [int(v) for v in value]\nexcept ValueError:\n# Guess not!\npass\n# CSV doesn't provide a ready distinction between blank and null, so in this case we have to pick one.\n# This does mean that for a nullable AND blankable field, there's no way for CSV to set it to blank string.\n# See corresponding logic in NautobotCSVRenderer.\nif value == \"\" and serializer_field.allow_null:\nvalue = None\ndata[key] = value\nreturn data\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.parsers.NautobotCSVParser.row_elements_to_data","title":"<code>row_elements_to_data(counter, row, serializer)</code>","text":"<p>Parse a single row of CSV data (represented as a dict) into a dict suitable for consumption by the serializer.</p> <p>TODO: it would be more elegant if our serializer fields knew how to deserialize the CSV data themselves; could we then literally have the parser just return list(reader) and not need this function at all?</p> Source code in <code>nautobot/core/api/parsers.py</code> <pre><code>def row_elements_to_data(self, counter, row, serializer):\n\"\"\"\n    Parse a single row of CSV data (represented as a dict) into a dict suitable for consumption by the serializer.\n    TODO: it would be more elegant if our serializer fields knew how to deserialize the CSV data themselves;\n    could we then literally have the parser just return list(reader) and not need this function at all?\n    \"\"\"\ndata = {}\nvalid_row_data = self._remove_object_not_found_values(row)\nfields_value_mapping = self._group_data_by_field_name(valid_row_data)\nfor column, key in enumerate(fields_value_mapping.keys(), start=1):\nif not key:\nraise ParseError(f\"Row {counter}: Column {column}: missing/empty header for this column\")\nvalue = fields_value_mapping[key]\nif key.startswith(\"cf_\"):\n# Custom field\nif value == \"\":\nvalue = None\ndata.setdefault(\"custom_fields\", {})[key[3:]] = value\ncontinue\nserializer_field = serializer.fields.get(key, None)\nif serializer_field is None:\n# The REST API normally just ignores any columns the serializer doesn't understand\nlogger.debug('Skipping unknown column \"%s\"', key)\ncontinue\nif serializer_field.read_only and key != \"id\":\n# Deserializing read-only fields is tricky, especially for things like SerializerMethodFields that\n# can potentially render as anything. We don't strictly need such fields (except \"id\" for bulk PATCH),\n# so let's just skip it.\ncontinue\nif isinstance(serializer_field, serializers.ManyRelatedField):\n# A list of related objects, represented as a list of composite-keys\nif value:\nvalue = value.split(\",\")\nelse:\nvalue = []\nelif isinstance(serializer_field, serializers.RelatedField):\n# A single related object, represented by its composite-key\nif value:\npass\nelse:\nvalue = None\nelif isinstance(serializer_field, (serializers.ListField, serializers.MultipleChoiceField)):\nif value:\nvalue = value.split(\",\")\nelse:\nvalue = []\nelif isinstance(serializer_field, (serializers.DictField, serializers.JSONField)):\n# We currently only store lists or dicts in JSONFields, never bare ints/strings.\n# On the CSV write side, we only render dicts to JSON\nif value is not None:\nif value.startswith((\"{\", \"[\")):\nvalue = json.loads(value)\nelse:\nvalue = value.split(\",\")\ntry:\n# We have some cases where it's a list of integers, such as in RackReservation.units\nvalue = [int(v) for v in value]\nexcept ValueError:\n# Guess not!\npass\n# CSV doesn't provide a ready distinction between blank and null, so in this case we have to pick one.\n# This does mean that for a nullable AND blankable field, there's no way for CSV to set it to blank string.\n# See corresponding logic in NautobotCSVRenderer.\nif value == \"\" and serializer_field.allow_null:\nvalue = None\ndata[key] = value\nreturn data\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.NautobotHyperlinkedRelatedField","title":"<code>nautobot.apps.api.NautobotHyperlinkedRelatedField</code>","text":"<p>             Bases: <code>WritableSerializerMixin</code>, <code>serializers.HyperlinkedRelatedField</code></p> <p>Extend HyperlinkedRelatedField to include URL namespace-awareness, add 'object_type' field, and read composite-keys.</p> Source code in <code>nautobot/core/api/fields.py</code> <pre><code>@extend_schema_field(\n{\n\"type\": \"object\",\n\"properties\": {\n\"id\": {\n\"oneOf\": [\n{\"type\": \"string\", \"format\": \"uuid\"},\n{\"type\": \"integer\"},\n]\n},\n\"object_type\": {\n\"type\": \"string\",\n\"pattern\": \"^[a-z][a-z0-9_]+\\\\.[a-z][a-z0-9_]+$\",\n\"example\": \"app_label.modelname\",\n},\n\"url\": {\n\"type\": \"string\",\n\"format\": \"uri\",\n},\n},\n}\n)\nclass NautobotHyperlinkedRelatedField(WritableSerializerMixin, serializers.HyperlinkedRelatedField):\n\"\"\"\n    Extend HyperlinkedRelatedField to include URL namespace-awareness, add 'object_type' field, and read composite-keys.\n    \"\"\"\ndef __init__(self, *args, **kwargs):\n\"\"\"Override DRF's namespace-unaware default view_name logic for HyperlinkedRelatedField.\n        DRF defaults to '{model_name}-detail' instead of '{app_label}:{model_name}-detail'.\n        \"\"\"\nif \"view_name\" not in kwargs or (kwargs[\"view_name\"].endswith(\"-detail\") and \":\" not in kwargs[\"view_name\"]):\nif \"queryset\" not in kwargs:\nlogger.warning(\n'\"view_name=%r\" is probably incorrect for this related API field; '\n'unable to determine the correct \"view_name\" as \"queryset\" wasn\\'t specified',\nkwargs[\"view_name\"],\n)\nelse:\nkwargs[\"view_name\"] = get_route_for_model(kwargs[\"queryset\"].model, \"detail\", api=True)\nsuper().__init__(*args, **kwargs)\n@property\ndef _related_model(self):\n\"\"\"The model class that this field is referencing to.\"\"\"\nif self.queryset is not None:\nreturn self.queryset.model\n# Foreign key where the destination is referenced by string rather than by Python class\nif getattr(self.parent.Meta.model, self.source, False):\nreturn getattr(self.parent.Meta.model, self.source).field.model\nlogger.warning(\n\"Unable to determine model for related field %r; \"\n\"ensure that either the field defines a 'queryset' or the Meta defines the related 'model'.\",\nself.field_name,\n)\nreturn None\ndef to_internal_value(self, data):\n\"\"\"Convert potentially nested representation to a model instance.\"\"\"\nif isinstance(data, dict):\nif \"url\" in data:\nreturn super().to_internal_value(data[\"url\"])\nelif \"id\" in data:\nreturn super().to_internal_value(data[\"id\"])\nif isinstance(data, str) and not is_uuid(data) and not is_url(data):\n# Maybe it's a composite-key?\nrelated_model = self._related_model\nif related_model is not None and hasattr(related_model, \"natural_key_args_to_kwargs\"):\ntry:\ndata = related_model.natural_key_args_to_kwargs(deconstruct_composite_key(data))\nexcept ValueError as err:\n# Not a correctly constructed composite key?\nraise ValidationError(f\"Related object not found using provided composite-key: {data}\") from err\nelif related_model is not None and related_model.label_lower == \"auth.group\":\n# auth.Group is a base Django model and so doesn't implement our natural_key_args_to_kwargs() method\ndata = {\"name\": deconstruct_composite_key(data)}\nreturn super().to_internal_value(data)\ndef to_representation(self, value):\n\"\"\"Convert URL representation to a brief nested representation.\"\"\"\nurl = super().to_representation(value)\n# nested serializer provides an instance\nif isinstance(value, Model):\nmodel = type(value)\nelse:\nmodel = self._related_model\nif model is None:\nreturn {\"id\": value.pk, \"object_type\": \"unknown.unknown\", \"url\": url}\nreturn {\"id\": value.pk, \"object_type\": model._meta.label_lower, \"url\": url}\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.fields.NautobotHyperlinkedRelatedField.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>Override DRF's namespace-unaware default view_name logic for HyperlinkedRelatedField.</p> <p>DRF defaults to '{model_name}-detail' instead of '{app_label}:{model_name}-detail'.</p> Source code in <code>nautobot/core/api/fields.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\"\"\"Override DRF's namespace-unaware default view_name logic for HyperlinkedRelatedField.\n    DRF defaults to '{model_name}-detail' instead of '{app_label}:{model_name}-detail'.\n    \"\"\"\nif \"view_name\" not in kwargs or (kwargs[\"view_name\"].endswith(\"-detail\") and \":\" not in kwargs[\"view_name\"]):\nif \"queryset\" not in kwargs:\nlogger.warning(\n'\"view_name=%r\" is probably incorrect for this related API field; '\n'unable to determine the correct \"view_name\" as \"queryset\" wasn\\'t specified',\nkwargs[\"view_name\"],\n)\nelse:\nkwargs[\"view_name\"] = get_route_for_model(kwargs[\"queryset\"].model, \"detail\", api=True)\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.fields.NautobotHyperlinkedRelatedField.to_internal_value","title":"<code>to_internal_value(data)</code>","text":"<p>Convert potentially nested representation to a model instance.</p> Source code in <code>nautobot/core/api/fields.py</code> <pre><code>def to_internal_value(self, data):\n\"\"\"Convert potentially nested representation to a model instance.\"\"\"\nif isinstance(data, dict):\nif \"url\" in data:\nreturn super().to_internal_value(data[\"url\"])\nelif \"id\" in data:\nreturn super().to_internal_value(data[\"id\"])\nif isinstance(data, str) and not is_uuid(data) and not is_url(data):\n# Maybe it's a composite-key?\nrelated_model = self._related_model\nif related_model is not None and hasattr(related_model, \"natural_key_args_to_kwargs\"):\ntry:\ndata = related_model.natural_key_args_to_kwargs(deconstruct_composite_key(data))\nexcept ValueError as err:\n# Not a correctly constructed composite key?\nraise ValidationError(f\"Related object not found using provided composite-key: {data}\") from err\nelif related_model is not None and related_model.label_lower == \"auth.group\":\n# auth.Group is a base Django model and so doesn't implement our natural_key_args_to_kwargs() method\ndata = {\"name\": deconstruct_composite_key(data)}\nreturn super().to_internal_value(data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.fields.NautobotHyperlinkedRelatedField.to_representation","title":"<code>to_representation(value)</code>","text":"<p>Convert URL representation to a brief nested representation.</p> Source code in <code>nautobot/core/api/fields.py</code> <pre><code>def to_representation(self, value):\n\"\"\"Convert URL representation to a brief nested representation.\"\"\"\nurl = super().to_representation(value)\n# nested serializer provides an instance\nif isinstance(value, Model):\nmodel = type(value)\nelse:\nmodel = self._related_model\nif model is None:\nreturn {\"id\": value.pk, \"object_type\": \"unknown.unknown\", \"url\": url}\nreturn {\"id\": value.pk, \"object_type\": model._meta.label_lower, \"url\": url}\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.NautobotModelSerializer","title":"<code>nautobot.apps.api.NautobotModelSerializer</code>","text":"<p>             Bases: <code>RelationshipModelSerializerMixin</code>, <code>CustomFieldModelSerializerMixin</code>, <code>NotesSerializerMixin</code>, <code>ValidatedModelSerializer</code></p> <p>Base class to use for serializers based on OrganizationalModel or PrimaryModel.</p> <p>Can also be used for models derived from BaseModel, so long as they support custom fields, notes, and relationships.</p> Source code in <code>nautobot/core/api/serializers.py</code> <pre><code>class NautobotModelSerializer(\nRelationshipModelSerializerMixin, CustomFieldModelSerializerMixin, NotesSerializerMixin, ValidatedModelSerializer\n):\n\"\"\"Base class to use for serializers based on OrganizationalModel or PrimaryModel.\n    Can also be used for models derived from BaseModel, so long as they support custom fields, notes, and relationships.\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.NautobotModelViewSet","title":"<code>nautobot.apps.api.NautobotModelViewSet</code>","text":"<p>             Bases: <code>NotesViewSetMixin</code>, <code>CustomFieldModelViewSet</code></p> <p>Base class to use for API ViewSets based on OrganizationalModel or PrimaryModel.</p> <p>Can also be used for models derived from BaseModel, so long as they support Notes.</p> Source code in <code>nautobot/extras/api/views.py</code> <pre><code>class NautobotModelViewSet(NotesViewSetMixin, CustomFieldModelViewSet):\n\"\"\"Base class to use for API ViewSets based on OrganizationalModel or PrimaryModel.\n    Can also be used for models derived from BaseModel, so long as they support Notes.\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.NotesSerializerMixin","title":"<code>nautobot.apps.api.NotesSerializerMixin</code>","text":"<p>             Bases: <code>BaseModelSerializer</code></p> <p>Extend Serializer with a <code>notes</code> field.</p> Source code in <code>nautobot/core/api/serializers.py</code> <pre><code>class NotesSerializerMixin(BaseModelSerializer):\n\"\"\"Extend Serializer with a `notes` field.\"\"\"\nnotes_url = serializers.SerializerMethodField()\ndef get_field_names(self, declared_fields, info):\n\"\"\"Ensure that fields includes \"notes_url\" field if applicable.\"\"\"\nfields = list(super().get_field_names(declared_fields, info))\nif hasattr(self.Meta.model, \"notes\"):\n# Make sure the field is at the end of fields, instead of the beginning\nself.extend_field_names(fields, \"notes_url\")\nreturn fields\n@extend_schema_field(serializers.URLField())\ndef get_notes_url(self, instance):\ntry:\nnotes_url = get_route_for_model(instance, \"notes\", api=True)\nreturn reverse(notes_url, args=[instance.id], request=self.context[\"request\"])\nexcept NoReverseMatch:\nmodel_name = type(instance).__name__\nlogger.warning(\n(\nf\"Notes feature is not available for model {model_name}. \"\n\"Please make sure to: \"\nf\"1. Include NotesMixin from nautobot.extras.model.mixins in the {model_name} class definition \"\nf\"2. Include NotesViewSetMixin from nautobot.extras.api.views in the {model_name}ViewSet \"\n\"before including NotesSerializerMixin in the model serializer\"\n)\n)\nreturn None\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.serializers.NotesSerializerMixin.get_field_names","title":"<code>get_field_names(declared_fields, info)</code>","text":"<p>Ensure that fields includes \"notes_url\" field if applicable.</p> Source code in <code>nautobot/core/api/serializers.py</code> <pre><code>def get_field_names(self, declared_fields, info):\n\"\"\"Ensure that fields includes \"notes_url\" field if applicable.\"\"\"\nfields = list(super().get_field_names(declared_fields, info))\nif hasattr(self.Meta.model, \"notes\"):\n# Make sure the field is at the end of fields, instead of the beginning\nself.extend_field_names(fields, \"notes_url\")\nreturn fields\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.NotesViewSetMixin","title":"<code>nautobot.apps.api.NotesViewSetMixin</code>","text":"Source code in <code>nautobot/extras/api/views.py</code> <pre><code>class NotesViewSetMixin:\ndef restrict_queryset(self, request, *args, **kwargs):\n\"\"\"\n        Apply \"view\" permissions on the POST /notes/ endpoint, otherwise as ModelViewSetMixin.\n        \"\"\"\nif request.user.is_authenticated and self.action == \"notes\":\nself.queryset = self.queryset.restrict(request.user, \"view\")\nelse:\nsuper().restrict_queryset(request, *args, **kwargs)\nclass CreateNotePermissions(TokenPermissions):\n\"\"\"As nautobot.core.api.authentication.TokenPermissions, but enforcing add_note permission.\"\"\"\nperms_map = {\n\"GET\": [\"%(app_label)s.view_%(model_name)s\", \"extras.view_note\"],\n\"POST\": [\"%(app_label)s.view_%(model_name)s\", \"extras.add_note\"],\n}\n@extend_schema(methods=[\"get\"], filters=False, responses={200: serializers.NoteSerializer(many=True)})\n@extend_schema(\nmethods=[\"post\"],\nrequest=serializers.NoteInputSerializer,\nresponses={201: serializers.NoteSerializer(many=False)},\n)\n@action(detail=True, url_path=\"notes\", methods=[\"get\", \"post\"], permission_classes=[CreateNotePermissions])\ndef notes(self, request, *args, **kwargs):\n\"\"\"\n        API methods for returning or creating notes on an object.\n        \"\"\"\nobj = get_object_or_404(\nself.queryset, **{self.lookup_field: self.kwargs[self.lookup_url_kwarg or self.lookup_field]}\n)\nif request.method == \"POST\":\ncontent_type = ContentType.objects.get_for_model(obj)\ndata = request.data\ndata[\"assigned_object_id\"] = obj.pk\ndata[\"assigned_object_type\"] = f\"{content_type.app_label}.{content_type.model}\"\nserializer = serializers.NoteSerializer(data=data, context={\"request\": request})\n# Create the new Note.\nserializer.is_valid(raise_exception=True)\nserializer.save(user=request.user)\nreturn Response(serializer.data, status=status.HTTP_201_CREATED)\nelse:\nnotes = self.paginate_queryset(obj.notes)\nserializer = serializers.NoteSerializer(notes, many=True, context={\"request\": request})\nreturn self.get_paginated_response(serializer.data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.extras.api.views.NotesViewSetMixin.CreateNotePermissions","title":"<code>CreateNotePermissions</code>","text":"<p>             Bases: <code>TokenPermissions</code></p> <p>As nautobot.core.api.authentication.TokenPermissions, but enforcing add_note permission.</p> Source code in <code>nautobot/extras/api/views.py</code> <pre><code>class CreateNotePermissions(TokenPermissions):\n\"\"\"As nautobot.core.api.authentication.TokenPermissions, but enforcing add_note permission.\"\"\"\nperms_map = {\n\"GET\": [\"%(app_label)s.view_%(model_name)s\", \"extras.view_note\"],\n\"POST\": [\"%(app_label)s.view_%(model_name)s\", \"extras.add_note\"],\n}\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.extras.api.views.NotesViewSetMixin.notes","title":"<code>notes(request, *args, **kwargs)</code>","text":"<p>API methods for returning or creating notes on an object.</p> Source code in <code>nautobot/extras/api/views.py</code> <pre><code>@extend_schema(methods=[\"get\"], filters=False, responses={200: serializers.NoteSerializer(many=True)})\n@extend_schema(\nmethods=[\"post\"],\nrequest=serializers.NoteInputSerializer,\nresponses={201: serializers.NoteSerializer(many=False)},\n)\n@action(detail=True, url_path=\"notes\", methods=[\"get\", \"post\"], permission_classes=[CreateNotePermissions])\ndef notes(self, request, *args, **kwargs):\n\"\"\"\n    API methods for returning or creating notes on an object.\n    \"\"\"\nobj = get_object_or_404(\nself.queryset, **{self.lookup_field: self.kwargs[self.lookup_url_kwarg or self.lookup_field]}\n)\nif request.method == \"POST\":\ncontent_type = ContentType.objects.get_for_model(obj)\ndata = request.data\ndata[\"assigned_object_id\"] = obj.pk\ndata[\"assigned_object_type\"] = f\"{content_type.app_label}.{content_type.model}\"\nserializer = serializers.NoteSerializer(data=data, context={\"request\": request})\n# Create the new Note.\nserializer.is_valid(raise_exception=True)\nserializer.save(user=request.user)\nreturn Response(serializer.data, status=status.HTTP_201_CREATED)\nelse:\nnotes = self.paginate_queryset(obj.notes)\nserializer = serializers.NoteSerializer(notes, many=True, context={\"request\": request})\nreturn self.get_paginated_response(serializer.data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.extras.api.views.NotesViewSetMixin.restrict_queryset","title":"<code>restrict_queryset(request, *args, **kwargs)</code>","text":"<p>Apply \"view\" permissions on the POST /notes/ endpoint, otherwise as ModelViewSetMixin.</p> Source code in <code>nautobot/extras/api/views.py</code> <pre><code>def restrict_queryset(self, request, *args, **kwargs):\n\"\"\"\n    Apply \"view\" permissions on the POST /notes/ endpoint, otherwise as ModelViewSetMixin.\n    \"\"\"\nif request.user.is_authenticated and self.action == \"notes\":\nself.queryset = self.queryset.restrict(request.user, \"view\")\nelse:\nsuper().restrict_queryset(request, *args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.ObjectTypeField","title":"<code>nautobot.apps.api.ObjectTypeField</code>","text":"<p>             Bases: <code>serializers.CharField</code></p> <p>Represent the ContentType of this serializer's model as \".\". Source code in <code>nautobot/core/api/fields.py</code> <pre><code>@extend_schema_field(\n{\n\"type\": \"string\",\n\"pattern\": \"^[a-z][a-z0-9_]+\\\\.[a-z][a-z0-9_]+$\",\n\"example\": \"app_label.modelname\",\n}\n)\nclass ObjectTypeField(serializers.CharField):\n\"\"\"\n    Represent the ContentType of this serializer's model as \"&lt;app_label&gt;.&lt;model&gt;\".\n    \"\"\"\ndef __init__(self, *args, read_only=True, source=\"*\", **kwargs):  # pylint: disable=useless-parent-delegation\n\"\"\"Default read_only to True as this should never be a writable field.\"\"\"\nsuper().__init__(*args, read_only=read_only, source=source, **kwargs)\ndef to_representation(self, _value):\n\"\"\"\n        Get the content-type of this serializer's model.\n        Implemented this way because `_value` may be None when generating the schema.\n        \"\"\"\nmodel = self.parent.Meta.model\nreturn model._meta.label_lower\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.fields.ObjectTypeField.__init__","title":"<code>__init__(*args, read_only=True, source='*', **kwargs)</code>","text":"<p>Default read_only to True as this should never be a writable field.</p> Source code in <code>nautobot/core/api/fields.py</code> <pre><code>def __init__(self, *args, read_only=True, source=\"*\", **kwargs):  # pylint: disable=useless-parent-delegation\n\"\"\"Default read_only to True as this should never be a writable field.\"\"\"\nsuper().__init__(*args, read_only=read_only, source=source, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.fields.ObjectTypeField.to_representation","title":"<code>to_representation(_value)</code>","text":"<p>Get the content-type of this serializer's model.</p> <p>Implemented this way because <code>_value</code> may be None when generating the schema.</p> Source code in <code>nautobot/core/api/fields.py</code> <pre><code>def to_representation(self, _value):\n\"\"\"\n    Get the content-type of this serializer's model.\n    Implemented this way because `_value` may be None when generating the schema.\n    \"\"\"\nmodel = self.parent.Meta.model\nreturn model._meta.label_lower\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.OptInFieldsMixin","title":"<code>nautobot.apps.api.OptInFieldsMixin</code>","text":"<p>A serializer mixin that takes an additional <code>opt_in_fields</code> argument that controls which fields should be displayed.</p> Source code in <code>nautobot/core/api/serializers.py</code> <pre><code>class OptInFieldsMixin:\n\"\"\"\n    A serializer mixin that takes an additional `opt_in_fields` argument that controls\n    which fields should be displayed.\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.__pruned_fields = None\n@property\ndef fields(self):\n\"\"\"\n        Removes all serializer fields specified in a serializers `opt_in_fields` list that aren't specified in the\n        `include` query parameter.\n        As an example, if the serializer specifies that `opt_in_fields = [\"computed_fields\"]`\n        but `computed_fields` is not specified in the `?include` query parameter, `computed_fields` will be popped\n        from the list of fields.\n        \"\"\"\nif self.__pruned_fields is None:\nfields = dict(super().fields)\nserializer_opt_in_fields = getattr(self.Meta, \"opt_in_fields\", None)\nif not serializer_opt_in_fields:\n# This serializer has no defined opt_in_fields, so we never need to go further than this\nself.__pruned_fields = fields\nreturn self.__pruned_fields\nif not hasattr(self, \"_context\"):\n# We are being called before a request cycle\nreturn fields\ntry:\nrequest = self.context[\"request\"]\nexcept KeyError:\n# No available request?\nreturn fields\n# opt-in fields only applies on GET requests, for other methods we support these fields regardless\nif request is not None and request.method != \"GET\":\nreturn fields\n# NOTE: drf test framework builds a request object where the query\n# parameters are found under the GET attribute.\nparams = normalize_querydict(getattr(request, \"query_params\", getattr(request, \"GET\", None)))\ntry:\nuser_opt_in_fields = params.get(\"include\", [])\nexcept AttributeError:\n# include parameter was not specified\nuser_opt_in_fields = []\n# Drop any fields that are not specified in the users opt in fields\nfor field in serializer_opt_in_fields:\nif field not in user_opt_in_fields:\nfields.pop(field, None)\nself.__pruned_fields = fields\nreturn self.__pruned_fields\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.serializers.OptInFieldsMixin.fields","title":"<code>fields</code>  <code>property</code>","text":"<p>Removes all serializer fields specified in a serializers <code>opt_in_fields</code> list that aren't specified in the <code>include</code> query parameter.</p> <p>As an example, if the serializer specifies that <code>opt_in_fields = [\"computed_fields\"]</code> but <code>computed_fields</code> is not specified in the <code>?include</code> query parameter, <code>computed_fields</code> will be popped from the list of fields.</p>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.OrderedDefaultRouter","title":"<code>nautobot.apps.api.OrderedDefaultRouter</code>","text":"<p>             Bases: <code>DefaultRouter</code></p> Source code in <code>nautobot/core/api/routers.py</code> <pre><code>class OrderedDefaultRouter(DefaultRouter):\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\n# Extend the list view mappings to support the DELETE operation\nself.routes[0].mapping.update(\n{\n\"put\": \"bulk_update\",\n\"patch\": \"bulk_partial_update\",\n\"delete\": \"bulk_destroy\",\n}\n)\ndef get_api_root_view(self, api_urls=None):\n\"\"\"\n        Wrap DRF's DefaultRouter to return an alphabetized list of endpoints.\n        \"\"\"\napi_root_dict = OrderedDict()\nlist_name = self.routes[0].name\nfor prefix, _viewset, basename in sorted(self.registry, key=lambda x: x[0]):\napi_root_dict[prefix] = list_name.format(basename=basename)\nreturn self.APIRootView.as_view(api_root_dict=api_root_dict)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.routers.OrderedDefaultRouter.get_api_root_view","title":"<code>get_api_root_view(api_urls=None)</code>","text":"<p>Wrap DRF's DefaultRouter to return an alphabetized list of endpoints.</p> Source code in <code>nautobot/core/api/routers.py</code> <pre><code>def get_api_root_view(self, api_urls=None):\n\"\"\"\n    Wrap DRF's DefaultRouter to return an alphabetized list of endpoints.\n    \"\"\"\napi_root_dict = OrderedDict()\nlist_name = self.routes[0].name\nfor prefix, _viewset, basename in sorted(self.registry, key=lambda x: x[0]):\napi_root_dict[prefix] = list_name.format(basename=basename)\nreturn self.APIRootView.as_view(api_root_dict=api_root_dict)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.ReadOnlyModelViewSet","title":"<code>nautobot.apps.api.ReadOnlyModelViewSet</code>","text":"<p>             Bases: <code>NautobotAPIVersionMixin</code>, <code>ModelViewSetMixin</code>, <code>ReadOnlyModelViewSet_</code></p> <p>Extend DRF's ReadOnlyModelViewSet to support queryset restriction.</p> Source code in <code>nautobot/core/api/views.py</code> <pre><code>class ReadOnlyModelViewSet(NautobotAPIVersionMixin, ModelViewSetMixin, ReadOnlyModelViewSet_):\n\"\"\"\n    Extend DRF's ReadOnlyModelViewSet to support queryset restriction.\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.RelationshipModelSerializerMixin","title":"<code>nautobot.apps.api.RelationshipModelSerializerMixin</code>","text":"<p>             Bases: <code>ValidatedModelSerializer</code></p> <p>Extend ValidatedModelSerializer with a <code>relationships</code> field.</p> Source code in <code>nautobot/core/api/serializers.py</code> <pre><code>class RelationshipModelSerializerMixin(ValidatedModelSerializer):\n\"\"\"Extend ValidatedModelSerializer with a `relationships` field.\"\"\"\n# TODO # 3024 need to change this as well to show just pks in depth=0\nrelationships = RelationshipsDataField(required=False, source=\"*\")\ndef create(self, validated_data):\nrelationships_data = validated_data.pop(\"relationships\", {})\nrequired_relationships_errors = self.Meta().model.required_related_objects_errors(\noutput_for=\"api\", initial_data=relationships_data\n)\nif required_relationships_errors:\nraise ValidationError({\"relationships\": required_relationships_errors})\ninstance = super().create(validated_data)\nif relationships_data:\ntry:\nself._save_relationships(instance, relationships_data)\nexcept DjangoValidationError as error:\nraise ValidationError(str(error)) from error\nreturn instance\ndef update(self, instance, validated_data):\nrelationships_key_specified = \"relationships\" in self.context[\"request\"].data\nrelationships_data = validated_data.pop(\"relationships\", {})\nrequired_relationships_errors = self.Meta().model.required_related_objects_errors(\noutput_for=\"api\",\ninitial_data=relationships_data,\nrelationships_key_specified=relationships_key_specified,\ninstance=instance,\n)\nif required_relationships_errors:\nraise ValidationError({\"relationships\": required_relationships_errors})\ninstance = super().update(instance, validated_data)\nif relationships_data:\ntry:\nself._save_relationships(instance, relationships_data)\nexcept DjangoValidationError as error:\nraise ValidationError(str(error)) from error\nreturn instance\ndef _save_relationships(self, instance, relationships):\n\"\"\"Create/update RelationshipAssociations corresponding to a model instance.\"\"\"\n# relationships has already passed RelationshipsDataField.to_internal_value(), so we can skip some try/excepts\nlogger.debug(\"_save_relationships: %s : %s\", instance, relationships)\nfor relationship, relationship_data in relationships.items():\nfor other_side in [\"source\", \"destination\", \"peer\"]:\nif other_side not in relationship_data:\ncontinue\nother_type = getattr(relationship, f\"{other_side}_type\")\nother_side_model = other_type.model_class()\nexpected_objects_data = relationship_data[other_side]\nexpected_objects = [\nother_side_model.objects.get(**object_data) for object_data in expected_objects_data\n]\nthis_side = RelationshipSideChoices.OPPOSITE[other_side]\nif this_side != RelationshipSideChoices.SIDE_PEER:\nexisting_associations = relationship.relationship_associations.filter(\n**{f\"{this_side}_id\": instance.pk}\n)\nexisting_objects = [assoc.get_peer(instance) for assoc in existing_associations]\nelse:\nexisting_associations_1 = relationship.relationship_associations.filter(source_id=instance.pk)\nexisting_objects_1 = [assoc.get_peer(instance) for assoc in existing_associations_1]\nexisting_associations_2 = relationship.relationship_associations.filter(destination_id=instance.pk)\nexisting_objects_2 = [assoc.get_peer(instance) for assoc in existing_associations_2]\nexisting_associations = list(existing_associations_1) + list(existing_associations_2)\nexisting_objects = existing_objects_1 + existing_objects_2\nadd_objects = []\nremove_assocs = []\nfor obj, assoc in zip(existing_objects, existing_associations):\nif obj not in expected_objects:\nremove_assocs.append(assoc)\nfor obj in expected_objects:\nif obj not in existing_objects:\nadd_objects.append(obj)\nfor add_object in add_objects:\nif \"request\" in self.context and not self.context[\"request\"].user.has_perm(\n\"extras.add_relationshipassociation\"\n):\nraise PermissionDenied(\"This user does not have permission to create RelationshipAssociations.\")\nif other_side != RelationshipSideChoices.SIDE_SOURCE:\nassoc = RelationshipAssociation(\nrelationship=relationship,\nsource_type=relationship.source_type,\nsource_id=instance.id,\ndestination_type=relationship.destination_type,\ndestination_id=add_object.id,\n)\nelse:\nassoc = RelationshipAssociation(\nrelationship=relationship,\nsource_type=relationship.source_type,\nsource_id=add_object.id,\ndestination_type=relationship.destination_type,\ndestination_id=instance.id,\n)\nassoc.validated_save()  # enforce relationship filter logic, etc.\nlogger.debug(\"Created %s\", assoc)\nfor remove_assoc in remove_assocs:\nif \"request\" in self.context and not self.context[\"request\"].user.has_perm(\n\"extras.delete_relationshipassociation\"\n):\nraise PermissionDenied(\"This user does not have permission to delete RelationshipAssociations.\")\nlogger.debug(\"Deleting %s\", remove_assoc)\nremove_assoc.delete()\ndef get_field_names(self, declared_fields, info):\n\"\"\"Ensure that \"relationships\" is included as an opt-in field on root serializers.\"\"\"\nfields = list(super().get_field_names(declared_fields, info))\nif not self.is_nested:\n# Only include relationships as opt-in.\nself.extend_field_names(fields, \"relationships\", opt_in_only=True)\nelse:\n# As relationships are expensive, do not include them on nested serializers even if opted in.\nif \"relationships\" in fields:\nfields.remove(\"relationships\")\nreturn fields\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.serializers.RelationshipModelSerializerMixin.get_field_names","title":"<code>get_field_names(declared_fields, info)</code>","text":"<p>Ensure that \"relationships\" is included as an opt-in field on root serializers.</p> Source code in <code>nautobot/core/api/serializers.py</code> <pre><code>def get_field_names(self, declared_fields, info):\n\"\"\"Ensure that \"relationships\" is included as an opt-in field on root serializers.\"\"\"\nfields = list(super().get_field_names(declared_fields, info))\nif not self.is_nested:\n# Only include relationships as opt-in.\nself.extend_field_names(fields, \"relationships\", opt_in_only=True)\nelse:\n# As relationships are expensive, do not include them on nested serializers even if opted in.\nif \"relationships\" in fields:\nfields.remove(\"relationships\")\nreturn fields\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.SerializedPKRelatedField","title":"<code>nautobot.apps.api.SerializedPKRelatedField</code>","text":"<p>             Bases: <code>PrimaryKeyRelatedField</code></p> <p>Extends PrimaryKeyRelatedField to return a serialized object on read. This is useful for representing related objects in a ManyToManyField while still allowing a set of primary keys to be written.</p> Source code in <code>nautobot/core/api/fields.py</code> <pre><code>class SerializedPKRelatedField(PrimaryKeyRelatedField):\n\"\"\"\n    Extends PrimaryKeyRelatedField to return a serialized object on read. This is useful for representing related\n    objects in a ManyToManyField while still allowing a set of primary keys to be written.\n    \"\"\"\ndef __init__(self, serializer, **kwargs):\nself.serializer = serializer\nself.pk_field = kwargs.pop(\"pk_field\", None)\nsuper().__init__(**kwargs)\ndef to_representation(self, value):\nreturn self.serializer(value, context={\"request\": self.context[\"request\"]}).data\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.TaggedModelSerializerMixin","title":"<code>nautobot.apps.api.TaggedModelSerializerMixin</code>","text":"<p>             Bases: <code>BaseModelSerializer</code></p> Source code in <code>nautobot/extras/api/mixins.py</code> <pre><code>class TaggedModelSerializerMixin(BaseModelSerializer):\ndef get_field_names(self, declared_fields, info):\n\"\"\"Ensure that 'tags' field is always present except on nested serializers.\"\"\"\nfields = list(super().get_field_names(declared_fields, info))\nif not self.is_nested:\nself.extend_field_names(fields, \"tags\")\nreturn fields\ndef create(self, validated_data):\ntags = validated_data.pop(\"tags\", None)\ninstance = super().create(validated_data)\nif tags is not None:\nreturn self._save_tags(instance, tags)\nreturn instance\ndef update(self, instance, validated_data):\ntags = validated_data.pop(\"tags\", None)\n# Cache tags on instance for change logging\ninstance._tags = tags or []\ninstance = super().update(instance, validated_data)\nif tags is not None:\nreturn self._save_tags(instance, tags)\nreturn instance\ndef _save_tags(self, instance, tags):\nif tags:\ninstance.tags.set([t.name for t in tags])\nelse:\ninstance.tags.clear()\nreturn instance\ndef to_representation(self, instance):\ndata = super().to_representation(instance)\nif self._is_csv_request() and data.get(\"tags\"):\n# Export tag names for CSV\ndata[\"tags\"] = list(instance.tags.values_list(\"name\", flat=True))\nreturn data\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.extras.api.mixins.TaggedModelSerializerMixin.get_field_names","title":"<code>get_field_names(declared_fields, info)</code>","text":"<p>Ensure that 'tags' field is always present except on nested serializers.</p> Source code in <code>nautobot/extras/api/mixins.py</code> <pre><code>def get_field_names(self, declared_fields, info):\n\"\"\"Ensure that 'tags' field is always present except on nested serializers.\"\"\"\nfields = list(super().get_field_names(declared_fields, info))\nif not self.is_nested:\nself.extend_field_names(fields, \"tags\")\nreturn fields\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.TimeZoneSerializerField","title":"<code>nautobot.apps.api.TimeZoneSerializerField</code>","text":"<p>             Bases: <code>TimeZoneSerializerField_</code></p> <p>Represents a time zone as a string.</p> Source code in <code>nautobot/core/api/fields.py</code> <pre><code>@extend_schema_field(str)\nclass TimeZoneSerializerField(TimeZoneSerializerField_):\n\"\"\"Represents a time zone as a string.\"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.TreeModelSerializerMixin","title":"<code>nautobot.apps.api.TreeModelSerializerMixin</code>","text":"<p>             Bases: <code>BaseModelSerializer</code></p> <p>Add a <code>tree_depth</code> field to non-nested model serializers based on django-tree-queries.</p> Source code in <code>nautobot/core/api/serializers.py</code> <pre><code>class TreeModelSerializerMixin(BaseModelSerializer):\n\"\"\"Add a `tree_depth` field to non-nested model serializers based on django-tree-queries.\"\"\"\ntree_depth = serializers.SerializerMethodField(read_only=True)\n@extend_schema_field(serializers.IntegerField(allow_null=True))\ndef get_tree_depth(self, obj):\n\"\"\"The `tree_depth` is not a database field, but an annotation automatically added by django-tree-queries.\"\"\"\nreturn getattr(obj, \"tree_depth\", None)\ndef get_field_names(self, declared_fields, info):\n\"\"\"Ensure that \"tree_depth\" is included on root serializers only, as nested objects are not annotated.\"\"\"\nfields = list(super().get_field_names(declared_fields, info))\nif self.is_nested and \"tree_depth\" in fields:\nfields.remove(\"tree_depth\")\nreturn fields\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.serializers.TreeModelSerializerMixin.get_field_names","title":"<code>get_field_names(declared_fields, info)</code>","text":"<p>Ensure that \"tree_depth\" is included on root serializers only, as nested objects are not annotated.</p> Source code in <code>nautobot/core/api/serializers.py</code> <pre><code>def get_field_names(self, declared_fields, info):\n\"\"\"Ensure that \"tree_depth\" is included on root serializers only, as nested objects are not annotated.\"\"\"\nfields = list(super().get_field_names(declared_fields, info))\nif self.is_nested and \"tree_depth\" in fields:\nfields.remove(\"tree_depth\")\nreturn fields\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.serializers.TreeModelSerializerMixin.get_tree_depth","title":"<code>get_tree_depth(obj)</code>","text":"<p>The <code>tree_depth</code> is not a database field, but an annotation automatically added by django-tree-queries.</p> Source code in <code>nautobot/core/api/serializers.py</code> <pre><code>@extend_schema_field(serializers.IntegerField(allow_null=True))\ndef get_tree_depth(self, obj):\n\"\"\"The `tree_depth` is not a database field, but an annotation automatically added by django-tree-queries.\"\"\"\nreturn getattr(obj, \"tree_depth\", None)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.ValidatedModelSerializer","title":"<code>nautobot.apps.api.ValidatedModelSerializer</code>","text":"<p>             Bases: <code>BaseModelSerializer</code></p> <p>Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)</p> Source code in <code>nautobot/core/api/serializers.py</code> <pre><code>class ValidatedModelSerializer(BaseModelSerializer):\n\"\"\"\n    Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during\n    validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)\n    \"\"\"\ndef validate(self, data):\n# Remove custom fields data and tags (if any) prior to model validation\nattrs = data.copy()\nattrs.pop(\"custom_fields\", None)\nattrs.pop(\"relationships\", None)\nattrs.pop(\"tags\", None)\n# Skip ManyToManyFields\nfor field in self.Meta.model._meta.get_fields():\nif isinstance(field, models.ManyToManyField):\nattrs.pop(field.name, None)\n# Run clean() on an instance of the model\nif self.instance is None:\ninstance = self.Meta.model(**attrs)\nelse:\ninstance = self.instance\nfor k, v in attrs.items():\nsetattr(instance, k, v)\ninstance.full_clean()\nreturn data\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.WritableNestedSerializer","title":"<code>nautobot.apps.api.WritableNestedSerializer</code>","text":"<p>             Bases: <code>BaseModelSerializer</code></p> <p>Returns a nested representation of an object on read, but accepts either the nested representation or the primary key value on write operations.</p> <p>Note that subclasses will always have a read-only <code>object_type</code> field, which represents the content-type of this serializer's associated model (e.g. \"dcim.device\"). This is required as the OpenAPI schema, using the PolymorphicProxySerializer class defined below, relies upon this field as a way to identify to the client which of several possible nested serializers are in use for a given attribute.</p> Source code in <code>nautobot/core/api/serializers.py</code> <pre><code>class WritableNestedSerializer(BaseModelSerializer):\n\"\"\"\n    Returns a nested representation of an object on read, but accepts either the nested representation or the\n    primary key value on write operations.\n    Note that subclasses will always have a read-only `object_type` field, which represents the content-type of this\n    serializer's associated model (e.g. \"dcim.device\"). This is required as the OpenAPI schema, using the\n    PolymorphicProxySerializer class defined below, relies upon this field as a way to identify to the client\n    which of several possible nested serializers are in use for a given attribute.\n    \"\"\"\ndef get_queryset(self):\nreturn self.Meta.model.objects\ndef to_internal_value(self, data):\nif data is None:\nreturn None\n# Dictionary of related object attributes\nif isinstance(data, dict):\nparams = dict_to_filter_params(data)\n# Make output from a WritableNestedSerializer \"round-trip\" capable by automatically stripping from the\n# data any serializer fields that do not correspond to a specific model field\nfor field_name, field_instance in self.fields.items():\nif field_name in params and field_instance.source == \"*\":\nlogger.debug(\"Discarding non-database field %s\", field_name)\ndel params[field_name]\nqueryset = self.get_queryset()\ntry:\nreturn queryset.get(**params)\nexcept ObjectDoesNotExist:\nraise ValidationError(f\"Related object not found using the provided attributes: {params}\")\nexcept MultipleObjectsReturned:\nraise ValidationError(f\"Multiple objects match the provided attributes: {params}\")\nexcept FieldError as e:\nraise ValidationError(e)\nqueryset = self.get_queryset()\npk = None\nif isinstance(self.Meta.model._meta.pk, models.AutoField):\n# PK is an int for this model. This is usually the User model\ntry:\npk = int(data)\nexcept (TypeError, ValueError):\nraise ValidationError(\n\"Related objects must be referenced by ID or by dictionary of attributes. Received an \"\nf\"unrecognized value: {data}\"\n)\nelse:\n# We assume a type of UUIDField for all other models\n# PK of related object\ntry:\n# Ensure the pk is a valid UUID\npk = uuid.UUID(str(data))\nexcept (TypeError, ValueError):\nraise ValidationError(\n\"Related objects must be referenced by ID or by dictionary of attributes. Received an \"\nf\"unrecognized value: {data}\"\n)\ntry:\nreturn queryset.get(pk=pk)\nexcept ObjectDoesNotExist:\nraise ValidationError(f\"Related object not found using the provided ID: {pk}\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.WritableSerializerMixin","title":"<code>nautobot.apps.api.WritableSerializerMixin</code>","text":"<p>WritableSerializerMixin provides the to_internal_value() function. The function provides the ability to write API requests that identify unique objects based on combinations of fields other than the primary key. e.g: \"parent\": { \"location_type__parent\": {\"name\": \"Campus\"}, \"parent__name\": \"Campus-29\" } vs \"parent\": \"10dff139-7333-46b0-bef6-f6a5a7b5497c\"</p> Source code in <code>nautobot/core/api/mixins.py</code> <pre><code>class WritableSerializerMixin:\n\"\"\"\n    WritableSerializerMixin provides the to_internal_value() function.\n    The function provides the ability to write API requests that identify unique objects based on\n    combinations of fields other than the primary key.\n    e.g:\n    \"parent\": { \"location_type__parent\": {\"name\": \"Campus\"}, \"parent__name\": \"Campus-29\" }\n    vs\n    \"parent\": \"10dff139-7333-46b0-bef6-f6a5a7b5497c\"\n    \"\"\"\ndef remove_non_filter_fields(self, filter_params):\n\"\"\"\n        Make output from a WritableSerializer \"round-trip\" capable by automatically stripping from the\n        data any serializer fields that do not correspond to a specific model field\n        \"\"\"\nif hasattr(self, \"fields\"):\nfor field_name, field_instance in self.fields.items():\nif field_name in filter_params and field_instance.source == \"*\":\nlogger.debug(\"Discarding non-filter field %s\", field_name)\ndel filter_params[field_name]\nreturn filter_params\ndef get_queryset_filter_params(self, data, queryset):\n\"\"\"\n        Data could be a dictionary and an int (for the User model) or a str that represents the primary key.\n        If it is a dictionary, we return it after remove non-filter fields.\n        If it is a primary key, we return a dictionary object formatted like this {\"pk\": pk}\n        \"\"\"\nif isinstance(data, dict):\nparams = dict_to_filter_params(data)\nreturn self.remove_non_filter_fields(params)\n# Account for the fact that HyperlinkedIdentityFields might pass in URLs.\nif is_url(data):\n# Strip the trailing slash and split on slashes, taking the last value as the PK.\ndata = data.rstrip(\"/\").split(\"/\")[-1]\ntry:\n# The int case here is taking into account for the User model we inherit from django\npk = int(data) if isinstance(queryset.model._meta.pk, AutoField) else uuid.UUID(str(data))\nexcept (TypeError, ValueError) as e:\nraise ValidationError(\n\"Related objects must be referenced by ID or by dictionary of attributes. Received an \"\nf\"unrecognized value: {data}\"\n) from e\nreturn {\"pk\": pk}\ndef get_object(self, data, queryset):\n\"\"\"\n        Retrieve an unique object based on a dictionary of data attributes and raise errors accordingly if the object is not found.\n        \"\"\"\nfilter_params = self.get_queryset_filter_params(data=data, queryset=queryset)\ntry:\nreturn queryset.get(**filter_params)\nexcept ObjectDoesNotExist as e:\nraise ValidationError(f\"Related object not found using the provided attributes: {filter_params}\") from e\nexcept MultipleObjectsReturned as e:\nraise ValidationError(f\"Multiple objects match the provided attributes: {filter_params}\") from e\nexcept FieldError as e:\nraise ValidationError(e) from e\ndef to_internal_value(self, data):\n\"\"\"\n        Return an object or a list of objects based on a dictionary of data attributes or an UUID.\n        \"\"\"\nif data is None:\nreturn None\nif hasattr(self, \"queryset\"):\nqueryset = self.queryset\nelse:\nqueryset = self.Meta.model.objects\nif isinstance(data, list):\nreturn [self.get_object(data=entry, queryset=queryset) for entry in data]\nreturn self.get_object(data=data, queryset=queryset)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.mixins.WritableSerializerMixin.get_object","title":"<code>get_object(data, queryset)</code>","text":"<p>Retrieve an unique object based on a dictionary of data attributes and raise errors accordingly if the object is not found.</p> Source code in <code>nautobot/core/api/mixins.py</code> <pre><code>def get_object(self, data, queryset):\n\"\"\"\n    Retrieve an unique object based on a dictionary of data attributes and raise errors accordingly if the object is not found.\n    \"\"\"\nfilter_params = self.get_queryset_filter_params(data=data, queryset=queryset)\ntry:\nreturn queryset.get(**filter_params)\nexcept ObjectDoesNotExist as e:\nraise ValidationError(f\"Related object not found using the provided attributes: {filter_params}\") from e\nexcept MultipleObjectsReturned as e:\nraise ValidationError(f\"Multiple objects match the provided attributes: {filter_params}\") from e\nexcept FieldError as e:\nraise ValidationError(e) from e\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.mixins.WritableSerializerMixin.get_queryset_filter_params","title":"<code>get_queryset_filter_params(data, queryset)</code>","text":"<p>Data could be a dictionary and an int (for the User model) or a str that represents the primary key. If it is a dictionary, we return it after remove non-filter fields. If it is a primary key, we return a dictionary object formatted like this {\"pk\": pk}</p> Source code in <code>nautobot/core/api/mixins.py</code> <pre><code>def get_queryset_filter_params(self, data, queryset):\n\"\"\"\n    Data could be a dictionary and an int (for the User model) or a str that represents the primary key.\n    If it is a dictionary, we return it after remove non-filter fields.\n    If it is a primary key, we return a dictionary object formatted like this {\"pk\": pk}\n    \"\"\"\nif isinstance(data, dict):\nparams = dict_to_filter_params(data)\nreturn self.remove_non_filter_fields(params)\n# Account for the fact that HyperlinkedIdentityFields might pass in URLs.\nif is_url(data):\n# Strip the trailing slash and split on slashes, taking the last value as the PK.\ndata = data.rstrip(\"/\").split(\"/\")[-1]\ntry:\n# The int case here is taking into account for the User model we inherit from django\npk = int(data) if isinstance(queryset.model._meta.pk, AutoField) else uuid.UUID(str(data))\nexcept (TypeError, ValueError) as e:\nraise ValidationError(\n\"Related objects must be referenced by ID or by dictionary of attributes. Received an \"\nf\"unrecognized value: {data}\"\n) from e\nreturn {\"pk\": pk}\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.mixins.WritableSerializerMixin.remove_non_filter_fields","title":"<code>remove_non_filter_fields(filter_params)</code>","text":"<p>Make output from a WritableSerializer \"round-trip\" capable by automatically stripping from the data any serializer fields that do not correspond to a specific model field</p> Source code in <code>nautobot/core/api/mixins.py</code> <pre><code>def remove_non_filter_fields(self, filter_params):\n\"\"\"\n    Make output from a WritableSerializer \"round-trip\" capable by automatically stripping from the\n    data any serializer fields that do not correspond to a specific model field\n    \"\"\"\nif hasattr(self, \"fields\"):\nfor field_name, field_instance in self.fields.items():\nif field_name in filter_params and field_instance.source == \"*\":\nlogger.debug(\"Discarding non-filter field %s\", field_name)\ndel filter_params[field_name]\nreturn filter_params\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.core.api.mixins.WritableSerializerMixin.to_internal_value","title":"<code>to_internal_value(data)</code>","text":"<p>Return an object or a list of objects based on a dictionary of data attributes or an UUID.</p> Source code in <code>nautobot/core/api/mixins.py</code> <pre><code>def to_internal_value(self, data):\n\"\"\"\n    Return an object or a list of objects based on a dictionary of data attributes or an UUID.\n    \"\"\"\nif data is None:\nreturn None\nif hasattr(self, \"queryset\"):\nqueryset = self.queryset\nelse:\nqueryset = self.Meta.model.objects\nif isinstance(data, list):\nreturn [self.get_object(data=entry, queryset=queryset) for entry in data]\nreturn self.get_object(data=data, queryset=queryset)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.dict_to_filter_params","title":"<code>nautobot.apps.api.dict_to_filter_params(d, prefix='')</code>","text":"<p>Translate a dictionary of attributes to a nested set of parameters suitable for QuerySet filtering. For example:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"rack\": {\n        \"facility_id\": \"R101\"\n    }\n}\n</code></pre> Becomes <p>{     \"name\": \"Foo\",     \"rack__facility_id\": \"R101\" }</p> And can be employed as filter parameters <p>Device.objects.filter(**dict_to_filter(attrs_dict))</p> Source code in <code>nautobot/core/api/utils.py</code> <pre><code>def dict_to_filter_params(d, prefix=\"\"):\n\"\"\"\n    Translate a dictionary of attributes to a nested set of parameters suitable for QuerySet filtering. For example:\n        {\n            \"name\": \"Foo\",\n            \"rack\": {\n                \"facility_id\": \"R101\"\n            }\n        }\n    Becomes:\n        {\n            \"name\": \"Foo\",\n            \"rack__facility_id\": \"R101\"\n        }\n    And can be employed as filter parameters:\n        Device.objects.filter(**dict_to_filter(attrs_dict))\n    \"\"\"\nparams = {}\nfor key, val in d.items():\nk = prefix + key\nif isinstance(val, dict):\nparams.update(dict_to_filter_params(val, k + \"__\"))\nelse:\nparams[k] = val\nreturn params\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.dynamic_import","title":"<code>nautobot.apps.api.dynamic_import(name)</code>","text":"<p>Dynamically import a class from an absolute path string</p> Source code in <code>nautobot/core/api/utils.py</code> <pre><code>def dynamic_import(name):\n\"\"\"\n    Dynamically import a class from an absolute path string\n    \"\"\"\ncomponents = name.split(\".\")\nmod = __import__(components[0])\nfor comp in components[1:]:\nmod = getattr(mod, comp)\nreturn mod\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.get_api_version_serializer","title":"<code>nautobot.apps.api.get_api_version_serializer(serializer_choices, api_version)</code>","text":"<p>Returns the serializer of an api_version</p> <p>Parameters:</p> Name Type Description Default <code>serializer_choices</code> <code>tuple</code> <p>list of SerializerVersions</p> required <code>api_version</code> <code>str</code> <p>Request API version</p> required <p>Returns:</p> Type Description <code>Serializer</code> <p>the serializer for the api_version if found in serializer_choices else None</p> Source code in <code>nautobot/core/api/utils.py</code> <pre><code>def get_api_version_serializer(serializer_choices, api_version):\n\"\"\"Returns the serializer of an api_version\n    Args:\n        serializer_choices (tuple): list of SerializerVersions\n        api_version (str): Request API version\n    Returns:\n        (Serializer): the serializer for the api_version if found in serializer_choices else None\n    \"\"\"\nfor versions, serializer in serializer_choices:\nif api_version in versions:\nreturn serializer\nreturn None\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.get_serializer_for_model","title":"<code>nautobot.apps.api.get_serializer_for_model(model, prefix='')</code>","text":"<p>Dynamically resolve and return the appropriate serializer for a model.</p> <p>Raises:</p> Type Description <code>SerializerNotFound</code> <p>if the requested serializer cannot be located.</p> Source code in <code>nautobot/core/api/utils.py</code> <pre><code>def get_serializer_for_model(model, prefix=\"\"):\n\"\"\"\n    Dynamically resolve and return the appropriate serializer for a model.\n    Raises:\n        SerializerNotFound: if the requested serializer cannot be located.\n    \"\"\"\napp_name, model_name = model._meta.label.split(\".\")\nif app_name == \"contenttypes\" and model_name == \"ContentType\":\napp_name = \"extras\"\n# Serializers for Django's auth models are in the users app\nif app_name == \"auth\":\napp_name = \"users\"\nserializer_name = f\"{app_name}.api.serializers.{prefix}{model_name}Serializer\"\nif app_name not in settings.PLUGINS:\nserializer_name = f\"nautobot.{serializer_name}\"\ntry:\nreturn dynamic_import(serializer_name)\nexcept AttributeError as exc:\nraise exceptions.SerializerNotFound(\nf\"Could not determine serializer for {app_name}.{model_name} with prefix '{prefix}'\"\n) from exc\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.get_view_name","title":"<code>nautobot.apps.api.get_view_name(view, suffix=None)</code>","text":"<p>Derive the view name from its associated model, if it has one. Fall back to DRF's built-in <code>get_view_name</code>.</p> Source code in <code>nautobot/core/api/utils.py</code> <pre><code>def get_view_name(view, suffix=None):\n\"\"\"\n    Derive the view name from its associated model, if it has one. Fall back to DRF's built-in `get_view_name`.\n    \"\"\"\nif hasattr(view, \"queryset\"):\n# Determine the model name from the queryset.\nname = view.queryset.model._meta.verbose_name\nname = \" \".join([w[0].upper() + w[1:] for w in name.split()])  # Capitalize each word\nelse:\n# Replicate DRF's built-in behavior.\nname = view.__class__.__name__\nname = formatting.remove_trailing_string(name, \"View\")\nname = formatting.remove_trailing_string(name, \"ViewSet\")\nname = formatting.camelcase_to_spaces(name)\nif suffix:\nname += \" \" + suffix\nreturn name\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.is_api_request","title":"<code>nautobot.apps.api.is_api_request(request)</code>","text":"<p>Return True of the request is being made via the REST API.</p> Source code in <code>nautobot/core/api/utils.py</code> <pre><code>def is_api_request(request):\n\"\"\"\n    Return True of the request is being made via the REST API.\n    \"\"\"\napi_path = reverse(\"api-root\")\nreturn request.path_info.startswith(api_path)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.rest_api_server_error","title":"<code>nautobot.apps.api.rest_api_server_error(request, *args, **kwargs)</code>","text":"<p>Handle exceptions and return a useful error message for REST API requests.</p> Source code in <code>nautobot/core/api/utils.py</code> <pre><code>def rest_api_server_error(request, *args, **kwargs):\n\"\"\"\n    Handle exceptions and return a useful error message for REST API requests.\n    \"\"\"\ntype_, error, _traceback = sys.exc_info()\ndata = {\n\"error\": str(error),\n\"exception\": type_.__name__,\n\"nautobot_version\": settings.VERSION,\n\"python_version\": platform.python_version(),\n}\nreturn JsonResponse(data, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n</code></pre>"},{"location":"code-reference/nautobot/apps/api.html#nautobot.apps.api.versioned_serializer_selector","title":"<code>nautobot.apps.api.versioned_serializer_selector(obj, serializer_choices, default_serializer)</code>","text":"<p>Returns appropriate serializer class depending on request api_version, and swagger_fake_view</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>ViewSet instance</code> required <code>serializer_choices</code> <code>tuple</code> <p>Tuple of SerializerVersions</p> required <code>default_serializer</code> <code>Serializer</code> <p>Default Serializer class</p> required Source code in <code>nautobot/core/api/utils.py</code> <pre><code>def versioned_serializer_selector(obj, serializer_choices, default_serializer):\n\"\"\"Returns appropriate serializer class depending on request api_version, and swagger_fake_view\n    Args:\n        obj (ViewSet instance):\n        serializer_choices (tuple): Tuple of SerializerVersions\n        default_serializer (Serializer): Default Serializer class\n    \"\"\"\nif not getattr(obj, \"swagger_fake_view\", False) and hasattr(obj.request, \"major_version\"):\napi_version = f\"{obj.request.major_version}.{obj.request.minor_version}\"\nserializer = get_api_version_serializer(serializer_choices, api_version)\nif serializer is not None:\nreturn serializer\nreturn default_serializer\n</code></pre>"},{"location":"code-reference/nautobot/apps/change_logging.html","title":"nautobot.apps.change_logging","text":""},{"location":"code-reference/nautobot/apps/change_logging.html#nautobot.apps.change_logging","title":"<code>nautobot.apps.change_logging</code>","text":"<p>Classes and utilities related to Nautobot change logging.</p>"},{"location":"code-reference/nautobot/apps/change_logging.html#nautobot.apps.change_logging.ChangeContext","title":"<code>nautobot.apps.change_logging.ChangeContext</code>","text":"<p>ChangeContext is used to describe a single transaction that may be related to one or more object changes. A unique id can be provided, otherwise one will be generated to relate any changes to this transaction. Convenience classes are provided for each context.</p> <p>:param user: User object :param request: WSGIRequest object to retrieve user from django rest framework after authentication is performed :param context: Context of the transaction, must match a choice in nautobot.extras.choices.ObjectChangeEventContextChoices :param context_detail: Optional extra details about the transaction (ex: the plugin name that initiated the change) :param change_id: Optional uuid object to uniquely identify the transaction. One will be generated if not supplied</p> Source code in <code>nautobot/extras/context_managers.py</code> <pre><code>class ChangeContext:\n\"\"\"\n    ChangeContext is used to describe a single transaction that may be related\n    to one or more object changes. A unique id can be provided, otherwise\n    one will be generated to relate any changes to this transaction. Convenience\n    classes are provided for each context.\n    :param user: User object\n    :param request: WSGIRequest object to retrieve user from django rest framework after authentication is performed\n    :param context: Context of the transaction, must match a choice in nautobot.extras.choices.ObjectChangeEventContextChoices\n    :param context_detail: Optional extra details about the transaction (ex: the plugin name that initiated the change)\n    :param change_id: Optional uuid object to uniquely identify the transaction. One will be generated if not supplied\n    \"\"\"\ndef __init__(self, user=None, request=None, context=None, context_detail=\"\", change_id=None):\nself.request = request\nself.user = user\nif self.request is None and self.user is None:\nraise TypeError(\"Either user or request must be provided\")\nif self.request is not None and self.user is not None:\nraise TypeError(\"Request and user cannot be used together\")\nif context is not None:\nself.context = context\nif self.context not in ObjectChangeEventContextChoices.values():\nraise ValueError(\"Context must be a choice within ObjectChangeEventContextChoices\")\nself.context_detail = context_detail\nself.change_id = change_id\nif self.change_id is None:\nself.change_id = uuid.uuid4()\ndef get_user(self):\n\"\"\"Return self.user if set, otherwise return self.request.user\"\"\"\nif self.user is not None:\nreturn self.user\nreturn self.request.user\n</code></pre>"},{"location":"code-reference/nautobot/apps/change_logging.html#nautobot.extras.context_managers.ChangeContext.get_user","title":"<code>get_user()</code>","text":"<p>Return self.user if set, otherwise return self.request.user</p> Source code in <code>nautobot/extras/context_managers.py</code> <pre><code>def get_user(self):\n\"\"\"Return self.user if set, otherwise return self.request.user\"\"\"\nif self.user is not None:\nreturn self.user\nreturn self.request.user\n</code></pre>"},{"location":"code-reference/nautobot/apps/change_logging.html#nautobot.apps.change_logging.JobChangeContext","title":"<code>nautobot.apps.change_logging.JobChangeContext</code>","text":"<p>             Bases: <code>ChangeContext</code></p> <p>ChangeContext for changes made by jobs</p> Source code in <code>nautobot/extras/context_managers.py</code> <pre><code>class JobChangeContext(ChangeContext):\n\"\"\"ChangeContext for changes made by jobs\"\"\"\ncontext = ObjectChangeEventContextChoices.CONTEXT_JOB\n</code></pre>"},{"location":"code-reference/nautobot/apps/change_logging.html#nautobot.apps.change_logging.JobHookChangeContext","title":"<code>nautobot.apps.change_logging.JobHookChangeContext</code>","text":"<p>             Bases: <code>ChangeContext</code></p> <p>ChangeContext for changes made by job hooks</p> Source code in <code>nautobot/extras/context_managers.py</code> <pre><code>class JobHookChangeContext(ChangeContext):\n\"\"\"ChangeContext for changes made by job hooks\"\"\"\ncontext = ObjectChangeEventContextChoices.CONTEXT_JOB_HOOK\n</code></pre>"},{"location":"code-reference/nautobot/apps/change_logging.html#nautobot.apps.change_logging.ORMChangeContext","title":"<code>nautobot.apps.change_logging.ORMChangeContext</code>","text":"<p>             Bases: <code>ChangeContext</code></p> <p>ChangeContext for changes made with web_request_context context manager</p> Source code in <code>nautobot/extras/context_managers.py</code> <pre><code>class ORMChangeContext(ChangeContext):\n\"\"\"ChangeContext for changes made with web_request_context context manager\"\"\"\ncontext = ObjectChangeEventContextChoices.CONTEXT_ORM\n</code></pre>"},{"location":"code-reference/nautobot/apps/change_logging.html#nautobot.apps.change_logging.WebChangeContext","title":"<code>nautobot.apps.change_logging.WebChangeContext</code>","text":"<p>             Bases: <code>ChangeContext</code></p> <p>ChangeContext for changes made through the web interface</p> Source code in <code>nautobot/extras/context_managers.py</code> <pre><code>class WebChangeContext(ChangeContext):\n\"\"\"ChangeContext for changes made through the web interface\"\"\"\ncontext = ObjectChangeEventContextChoices.CONTEXT_WEB\n</code></pre>"},{"location":"code-reference/nautobot/apps/change_logging.html#nautobot.apps.change_logging.change_logging","title":"<code>nautobot.apps.change_logging.change_logging(change_context)</code>","text":"<p>Enable change logging by connecting the appropriate signals to their receivers before code is run, and disconnecting them afterward.</p> <p>:param change_context: ChangeContext instance</p> Source code in <code>nautobot/extras/context_managers.py</code> <pre><code>@contextmanager\ndef change_logging(change_context):\n\"\"\"\n    Enable change logging by connecting the appropriate signals to their receivers before code is run, and\n    disconnecting them afterward.\n    :param change_context: ChangeContext instance\n    \"\"\"\n# Set change logging state\nprev_state = change_context_state.set(change_context)\ntry:\nyield\nfinally:\n# Reset change logging state. This is necessary to avoid recording any errant\n# changes during test cleanup.\nchange_context_state.reset(prev_state)\n</code></pre>"},{"location":"code-reference/nautobot/apps/change_logging.html#nautobot.apps.change_logging.web_request_context","title":"<code>nautobot.apps.change_logging.web_request_context(user, context_detail='', change_id=None, context=ObjectChangeEventContextChoices.CONTEXT_ORM, request=None)</code>","text":"<p>Emulate the context of an HTTP request, which provides functions like change logging and webhook processing in response to data changes. This context manager is for use with low level utility tooling, such as the 'nautobot-server nbshell' management command.</p> <p>By default, when working with the Django ORM, neither change logging nor webhook processing occur unless manually invoked and this context manager handles those functions. A valid User object must be provided.</p> <p>Example usage:</p> <p>from nautobot.extras.context_managers import web_request_context user = User.objects.get(username=\"admin\") with web_request_context(user, context_detail=\"manual-fix\"): ...     lt = Location.objects.get(name=\"Root\") ...     lax = Location(name=\"LAX\", location_type=lt) ...     lax.validated_save()</p> <p>:param user: User object :param context_detail: Optional extra details about the transaction (ex: the plugin name that initiated the change) :param change_id: Optional uuid object to uniquely identify the transaction. One will be generated if not supplied :param context: Optional string value of the generated change log entries' \"change_context\" field, defaults to ObjectChangeEventContextChoices.CONTEXT_ORM.     Valid choices are in nautobot.extras.choices.ObjectChangeEventContextChoices :param request: Optional web request instance, one will be generated if not supplied</p> Source code in <code>nautobot/extras/context_managers.py</code> <pre><code>@contextmanager\ndef web_request_context(\nuser, context_detail=\"\", change_id=None, context=ObjectChangeEventContextChoices.CONTEXT_ORM, request=None\n):\n\"\"\"\n    Emulate the context of an HTTP request, which provides functions like change logging and webhook processing\n    in response to data changes. This context manager is for use with low level utility tooling, such as the\n    'nautobot-server nbshell' management command.\n    By default, when working with the Django ORM, neither change logging nor webhook processing occur\n    unless manually invoked and this context manager handles those functions. A valid User object must be provided.\n    Example usage:\n    &gt;&gt;&gt; from nautobot.extras.context_managers import web_request_context\n    &gt;&gt;&gt; user = User.objects.get(username=\"admin\")\n    &gt;&gt;&gt; with web_request_context(user, context_detail=\"manual-fix\"):\n    ...     lt = Location.objects.get(name=\"Root\")\n    ...     lax = Location(name=\"LAX\", location_type=lt)\n    ...     lax.validated_save()\n    :param user: User object\n    :param context_detail: Optional extra details about the transaction (ex: the plugin name that initiated the change)\n    :param change_id: Optional uuid object to uniquely identify the transaction. One will be generated if not supplied\n    :param context: Optional string value of the generated change log entries' \"change_context\" field, defaults to ObjectChangeEventContextChoices.CONTEXT_ORM.\n        Valid choices are in nautobot.extras.choices.ObjectChangeEventContextChoices\n    :param request: Optional web request instance, one will be generated if not supplied\n    \"\"\"\nfrom nautobot.extras.jobs import enqueue_job_hooks  # prevent circular import\nvalid_contexts = {\nObjectChangeEventContextChoices.CONTEXT_JOB: JobChangeContext,\nObjectChangeEventContextChoices.CONTEXT_JOB_HOOK: JobHookChangeContext,\nObjectChangeEventContextChoices.CONTEXT_ORM: ORMChangeContext,\nObjectChangeEventContextChoices.CONTEXT_WEB: WebChangeContext,\n}\nif context not in valid_contexts:\nraise TypeError(f\"{context} is not a valid context\")\nif not isinstance(user, (get_user_model(), AnonymousUser)):\nraise TypeError(f\"{user} is not a valid user object\")\nif request is None:\nrequest = RequestFactory().request(SERVER_NAME=\"web_request_context\")\nrequest.user = user\nchange_context = valid_contexts[context](request=request, context_detail=context_detail, change_id=change_id)\ntry:\nwith change_logging(change_context):\nyield request\nfinally:\n# enqueue jobhooks and webhooks, use change_context.change_id in case change_id was not supplied\nfor object_change in ObjectChange.objects.filter(request_id=change_context.change_id).iterator():\nenqueue_job_hooks(object_change)\nenqueue_webhooks(object_change)\n</code></pre>"},{"location":"code-reference/nautobot/apps/choices.html","title":"nautobot.apps.choices","text":""},{"location":"code-reference/nautobot/apps/choices.html#nautobot.apps.choices","title":"<code>nautobot.apps.choices</code>","text":"<p>Utilities for implementing choices.</p>"},{"location":"code-reference/nautobot/apps/choices.html#nautobot.apps.choices.BannerClassChoices","title":"<code>nautobot.apps.choices.BannerClassChoices</code>","text":"<p>             Bases: <code>ChoiceSet</code></p> <p>Styling choices for custom banners.</p> Source code in <code>nautobot/extras/choices.py</code> <pre><code>class BannerClassChoices(ChoiceSet):\n\"\"\"Styling choices for custom banners.\"\"\"\nCLASS_SUCCESS = \"success\"\nCLASS_INFO = \"info\"\nCLASS_WARNING = \"warning\"\nCLASS_DANGER = \"danger\"\nCHOICES = (\n(CLASS_SUCCESS, \"Success\"),\n(CLASS_INFO, \"Info\"),\n(CLASS_WARNING, \"Warning\"),\n(CLASS_DANGER, \"Danger\"),\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/choices.html#nautobot.apps.choices.ButtonActionColorChoices","title":"<code>nautobot.apps.choices.ButtonActionColorChoices</code>","text":"<p>             Bases: <code>ChoiceSet</code></p> <p>Map standard button actions to Bootstrap color classes.</p> Source code in <code>nautobot/core/choices.py</code> <pre><code>class ButtonActionColorChoices(ChoiceSet):\n\"\"\"\n    Map standard button actions to Bootstrap color classes.\n    \"\"\"\nADD = \"success\"\nCANCEL = \"default\"\nCLONE = \"success\"\nCONFIGURE = \"default\"\nCONNECT = \"success\"\nDEFAULT = \"default\"\nDELETE = \"danger\"\nDISCONNECT = \"info\"\nEDIT = \"warning\"\nEXPORT = \"success\"\nIMPORT = \"primary\"\nINFO = \"info\"\nSUBMIT = \"primary\"\nSWAP = \"primary\"\nCHOICES = (\n(ADD, \"Add\"),\n(CANCEL, \"Cancel\"),\n(CLONE, \"Clone\"),\n(CONFIGURE, \"Configure\"),\n(CONNECT, \"Connect\"),\n(DEFAULT, \"Default\"),\n(DELETE, \"Delete\"),\n(DISCONNECT, \"Disconnect\"),\n(EDIT, \"Edit\"),\n(EXPORT, \"Export\"),\n(IMPORT, \"Import\"),\n(INFO, \"Info\"),\n(SUBMIT, \"Submit\"),\n(SWAP, \"Swap\"),\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/choices.html#nautobot.apps.choices.ButtonActionIconChoices","title":"<code>nautobot.apps.choices.ButtonActionIconChoices</code>","text":"<p>             Bases: <code>ChoiceSet</code></p> <p>Map standard button actions to Material Design Icons classes.</p> Source code in <code>nautobot/core/choices.py</code> <pre><code>class ButtonActionIconChoices(ChoiceSet):\n\"\"\"\n    Map standard button actions to Material Design Icons classes.\n    \"\"\"\nADD = \"mdi-plus-thick\"\nALERT = \"mdi-alert\"\nARROW_DOWN = \"mdi-arrow-down-bold\"\nARROW_UP = \"mdi-arrow-up-bold\"\nCONFIGURE = \"mdi-cogs\"\nCONNECT = \"mdi-ethernet-cable\"\nDELETE = \"mdi-trash-can-outline\"\nDISCONNECT = \"mdi-ethernet-cable-off\"\nEDIT = \"mdi-pencil\"\nEXPORT = \"mdi-database-export-outline\"\nHELP = \"mdi-help-circle\"\nINFO = \"mdi-help-circle\"\nIMPORT = \"mdi-database-import-outline\"\nLOCK = \"mdi-lock\"\nMAGNIFY = \"mdi-magnify\"\nNOTE = \"mdi-note-text\"\nSWAP = \"mdi-swap-vertical\"\nTRASH = \"mdi-trash-can-outline\"\nCHOICES = (\n(ADD, \"Add\"),\n(ALERT, \"Alert\"),\n(ARROW_DOWN, \"Arrow Down\"),\n(ARROW_UP, \"Arrow Up\"),\n(CONFIGURE, \"Configure\"),\n(CONNECT, \"Connect\"),\n(DELETE, \"Delete\"),\n(DISCONNECT, \"Disconnect\"),\n(EDIT, \"Edit\"),\n(EXPORT, \"Export\"),\n(HELP, \"Help\"),\n(INFO, \"Info\"),\n(IMPORT, \"Import\"),\n(LOCK, \"Lock\"),\n(MAGNIFY, \"Magnify\"),\n(NOTE, \"Note\"),\n(SWAP, \"Swap\"),\n(TRASH, \"Trash\"),\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/choices.html#nautobot.apps.choices.ChoiceSet","title":"<code>nautobot.apps.choices.ChoiceSet</code>","text":"<p>Base class for defining choices for a model and/or menu.</p> <p>Subclasses should define a CHOICES constant which consists of a list of tuples of the form <code>(value, display_str)</code>, or optionally as tuples of the form <code>(grouping, ((value, display_str), (value, display_str), ...))</code>.</p> Example <pre><code>class GreekCapitalLetterChoices(ChoiceSet):\nALPHA = \"\u0391\"\nBETA = \"\u0392\"\nGAMMA = \"\u0393\"\nCHOICES = (\n(ALPHA, \"alpha\"),\n(BETA, \"beta\"),\n(GAMMA, \"gamma\"),\n)\n</code></pre> Source code in <code>nautobot/core/choices.py</code> <pre><code>class ChoiceSet(metaclass=ChoiceSetMeta):\n\"\"\"\n    Base class for defining choices for a model and/or menu.\n    Subclasses should define a CHOICES constant which consists of a list of tuples of the form `(value, display_str)`,\n    or optionally as tuples of the form `(grouping, ((value, display_str), (value, display_str), ...))`.\n    Example:\n        ```python\n        class GreekCapitalLetterChoices(ChoiceSet):\n            ALPHA = \"\u0391\"\n            BETA = \"\u0392\"\n            GAMMA = \"\u0393\"\n            CHOICES = (\n                (ALPHA, \"alpha\"),\n                (BETA, \"beta\"),\n                (GAMMA, \"gamma\"),\n            )\n        ```\n    \"\"\"\nCHOICES = []\n@classmethod\ndef values(cls):\n\"\"\"Get a flat list of all values defined in this ChoiceSet's `CHOICES`.\"\"\"\nreturn [c[0] for c in unpack_grouped_choices(cls.CHOICES)]\n@classmethod\ndef as_dict(cls):\n\"\"\"Get a dictionary representation of this ChoiceSet's `CHOICES`.\"\"\"\n# Unpack grouped choices before casting as a dict\nreturn dict(unpack_grouped_choices(cls.CHOICES))\n</code></pre>"},{"location":"code-reference/nautobot/apps/choices.html#nautobot.core.choices.ChoiceSet.as_dict","title":"<code>as_dict()</code>  <code>classmethod</code>","text":"<p>Get a dictionary representation of this ChoiceSet's <code>CHOICES</code>.</p> Source code in <code>nautobot/core/choices.py</code> <pre><code>@classmethod\ndef as_dict(cls):\n\"\"\"Get a dictionary representation of this ChoiceSet's `CHOICES`.\"\"\"\n# Unpack grouped choices before casting as a dict\nreturn dict(unpack_grouped_choices(cls.CHOICES))\n</code></pre>"},{"location":"code-reference/nautobot/apps/choices.html#nautobot.core.choices.ChoiceSet.values","title":"<code>values()</code>  <code>classmethod</code>","text":"<p>Get a flat list of all values defined in this ChoiceSet's <code>CHOICES</code>.</p> Source code in <code>nautobot/core/choices.py</code> <pre><code>@classmethod\ndef values(cls):\n\"\"\"Get a flat list of all values defined in this ChoiceSet's `CHOICES`.\"\"\"\nreturn [c[0] for c in unpack_grouped_choices(cls.CHOICES)]\n</code></pre>"},{"location":"code-reference/nautobot/apps/choices.html#nautobot.apps.choices.JobResultStatusChoices","title":"<code>nautobot.apps.choices.JobResultStatusChoices</code>","text":"<p>             Bases: <code>ChoiceSet</code></p> <p>These status choices are using the same taxonomy as within Celery core. A Nautobot Job status is equivalent to a Celery task state.</p> Source code in <code>nautobot/extras/choices.py</code> <pre><code>class JobResultStatusChoices(ChoiceSet):\n\"\"\"\n    These status choices are using the same taxonomy as within Celery core. A Nautobot Job status\n    is equivalent to a Celery task state.\n    \"\"\"\nSTATUS_FAILURE = states.FAILURE\nSTATUS_PENDING = states.PENDING\nSTATUS_RECEIVED = states.RECEIVED\nSTATUS_RETRY = states.RETRY\nSTATUS_REVOKED = states.REVOKED\nSTATUS_STARTED = states.STARTED\nSTATUS_SUCCESS = states.SUCCESS\nCHOICES = sorted(zip(states.ALL_STATES, states.ALL_STATES))\n#: Set of all possible states.\nALL_STATES = states.ALL_STATES\n#: Set of states meaning the task returned an exception.\nEXCEPTION_STATES = states.EXCEPTION_STATES\n#: State precedence.\n#: None represents the precedence of an unknown state.\n#: Lower index means higher precedence.\nPRECEDENCE = states.PRECEDENCE\n#: Set of exception states that should propagate exceptions to the user.\nPROPAGATE_STATES = states.PROPAGATE_STATES\n#: Set of states meaning the task result is ready (has been executed).\nREADY_STATES = states.READY_STATES\n#: Set of states meaning the task result is not ready (hasn't been executed).\nUNREADY_STATES = states.UNREADY_STATES\n@staticmethod\ndef precedence(state):\n\"\"\"\n        Get the precedence for a state. Lower index means higher precedence.\n        Args:\n            state (str): One of the status choices.\n        Returns:\n            (int): Precedence value.\n        Examples:\n            &gt;&gt;&gt; JobResultStatusChoices.precedence(JobResultStatusChoices.STATUS_SUCCESS)\n            0\n        \"\"\"\nreturn states.precedence(state)\n</code></pre>"},{"location":"code-reference/nautobot/apps/choices.html#nautobot.extras.choices.JobResultStatusChoices.precedence","title":"<code>precedence(state)</code>  <code>staticmethod</code>","text":"<p>Get the precedence for a state. Lower index means higher precedence.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>str</code> <p>One of the status choices.</p> required <p>Returns:</p> Type Description <code>int</code> <p>Precedence value.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; JobResultStatusChoices.precedence(JobResultStatusChoices.STATUS_SUCCESS)\n0\n</code></pre> Source code in <code>nautobot/extras/choices.py</code> <pre><code>@staticmethod\ndef precedence(state):\n\"\"\"\n    Get the precedence for a state. Lower index means higher precedence.\n    Args:\n        state (str): One of the status choices.\n    Returns:\n        (int): Precedence value.\n    Examples:\n        &gt;&gt;&gt; JobResultStatusChoices.precedence(JobResultStatusChoices.STATUS_SUCCESS)\n        0\n    \"\"\"\nreturn states.precedence(state)\n</code></pre>"},{"location":"code-reference/nautobot/apps/choices.html#nautobot.apps.choices.unpack_grouped_choices","title":"<code>nautobot.apps.choices.unpack_grouped_choices(choices)</code>","text":"<p>Unpack a grouped choices hierarchy into a flat list of two-tuples. For example:</p> <p>choices = (     ('Foo', (         (1, 'A'),         (2, 'B')     )),     ('Bar', (         (3, 'C'),         (4, 'D')     )) )</p> <p>becomes:</p> <p>choices = (     (1, 'A'),     (2, 'B'),     (3, 'C'),     (4, 'D') )</p> Source code in <code>nautobot/core/choices.py</code> <pre><code>def unpack_grouped_choices(choices):\n\"\"\"\n    Unpack a grouped choices hierarchy into a flat list of two-tuples. For example:\n    choices = (\n        ('Foo', (\n            (1, 'A'),\n            (2, 'B')\n        )),\n        ('Bar', (\n            (3, 'C'),\n            (4, 'D')\n        ))\n    )\n    becomes:\n    choices = (\n        (1, 'A'),\n        (2, 'B'),\n        (3, 'C'),\n        (4, 'D')\n    )\n    \"\"\"\nunpacked_choices = []\nfor key, value in choices:\nif isinstance(value, (list, tuple)):\n# Entered an optgroup\nfor optgroup_key, optgroup_value in value:\nunpacked_choices.append((optgroup_key, optgroup_value))\nelse:\nunpacked_choices.append((key, value))\nreturn unpacked_choices\n</code></pre>"},{"location":"code-reference/nautobot/apps/config.html","title":"nautobot.apps.config","text":""},{"location":"code-reference/nautobot/apps/config.html#nautobot.apps.config","title":"<code>nautobot.apps.config</code>","text":"<p>Helper code for loading values that may be defined in settings.py/nautobot_config.py or in django-constance.</p>"},{"location":"code-reference/nautobot/apps/config.html#nautobot.apps.config.get_app_settings_or_config","title":"<code>nautobot.apps.config.get_app_settings_or_config(app_name, variable_name)</code>","text":"<p>Get a value from Django settings (if specified there) or Constance configuration (otherwise).</p> Source code in <code>nautobot/apps/config.py</code> <pre><code>def get_app_settings_or_config(app_name, variable_name):\n\"\"\"Get a value from Django settings (if specified there) or Constance configuration (otherwise).\"\"\"\n# Explicitly set in settings.py or nautobot_config.py takes precedence, for now\nif variable_name in settings.PLUGINS_CONFIG[app_name]:\nreturn settings.PLUGINS_CONFIG[app_name][variable_name]\nreturn getattr(config, f\"{app_name}__{variable_name}\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/datasources.html","title":"nautobot.apps.datasources","text":""},{"location":"code-reference/nautobot/apps/datasources.html#nautobot.apps.datasources","title":"<code>nautobot.apps.datasources</code>","text":"<p>Utilities for an app to register datasource contents (for Git, etc.).</p>"},{"location":"code-reference/nautobot/apps/datasources.html#nautobot.apps.datasources.DatasourceContent","title":"<code>nautobot.apps.datasources.DatasourceContent</code>","text":"<p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Human-readable name for this content type, such as \"config contexts\"</p> required <code>content_identifier</code> <code>str</code> <p>Brief unique identifier of this content type; by convention a string such as \"extras.configcontext\"</p> required <code>icon</code> <code>str</code> <p>Material Design Icons icon name, such as \"mdi-code-json\" or \"mdi-script-text\"</p> required <code>callback</code> <code>callable</code> <p>Callback function to invoke whenever a given datasource is created, updated, or deleted.   This callback should take three arguments (record, job_result, delete) where \"record\" is the GitRepository, etc.   that is being refreshed, \"job_result\" is an extras.JobResult record for logging purposes, and   \"delete\" is a boolean flag to distinguish between the \"create/update\" and \"delete\" cases.</p> required <code>weight</code> <code>int</code> <p>Defines the order in which datasources will be loaded.</p> <code>1000</code> Source code in <code>nautobot/extras/registry.py</code> <pre><code>class DatasourceContent:\n\"\"\"\n    Args:\n      name (str): Human-readable name for this content type, such as \"config contexts\"\n      content_identifier (str): Brief unique identifier of this content type; by convention a string such as \"extras.configcontext\"\n      icon (str): Material Design Icons icon name, such as \"mdi-code-json\" or \"mdi-script-text\"\n      callback (callable): Callback function to invoke whenever a given datasource is created, updated, or deleted.\n          This callback should take three arguments (record, job_result, delete) where \"record\" is the GitRepository, etc.\n          that is being refreshed, \"job_result\" is an extras.JobResult record for logging purposes, and\n          \"delete\" is a boolean flag to distinguish between the \"create/update\" and \"delete\" cases.\n      weight (int): Defines the order in which datasources will be loaded.\n    \"\"\"\n__slots__ = [\"name\", \"content_identifier\", \"icon\", \"callback\", \"weight\"]\ndef __init__(self, name, content_identifier, icon, callback, weight=1000):\n\"\"\"Ensure datasource properties.\"\"\"\nself.name = name\nself.content_identifier = content_identifier\nself.icon = icon\nself.callback = callback\nself.weight = weight\ndef __repr__(self):\nreturn f\"&lt;{self.__class__.__name__}: {self.content_identifier}&gt;\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/datasources.html#nautobot.extras.registry.DatasourceContent.__init__","title":"<code>__init__(name, content_identifier, icon, callback, weight=1000)</code>","text":"<p>Ensure datasource properties.</p> Source code in <code>nautobot/extras/registry.py</code> <pre><code>def __init__(self, name, content_identifier, icon, callback, weight=1000):\n\"\"\"Ensure datasource properties.\"\"\"\nself.name = name\nself.content_identifier = content_identifier\nself.icon = icon\nself.callback = callback\nself.weight = weight\n</code></pre>"},{"location":"code-reference/nautobot/apps/exceptions.html","title":"nautobot.apps.exceptions","text":""},{"location":"code-reference/nautobot/apps/exceptions.html#nautobot.apps.exceptions","title":"<code>nautobot.apps.exceptions</code>","text":"<p>Exceptions for Nautobot apps.</p>"},{"location":"code-reference/nautobot/apps/exceptions.html#nautobot.apps.exceptions.AbortTransaction","title":"<code>nautobot.apps.exceptions.AbortTransaction</code>","text":"<p>             Bases: <code>Exception</code></p> <p>An exception used to trigger a database transaction rollback.</p> Source code in <code>nautobot/core/exceptions.py</code> <pre><code>class AbortTransaction(Exception):\n\"\"\"\n    An exception used to trigger a database transaction rollback.\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/exceptions.html#nautobot.apps.exceptions.CeleryWorkerNotRunningException","title":"<code>nautobot.apps.exceptions.CeleryWorkerNotRunningException</code>","text":"<p>             Bases: <code>APIException</code></p> <p>Indicates the temporary inability to enqueue a new Celery task (e.g. custom script execution) because no Celery worker processes are currently running.</p> Source code in <code>nautobot/core/exceptions.py</code> <pre><code>class CeleryWorkerNotRunningException(APIException):\n\"\"\"\n    Indicates the temporary inability to enqueue a new Celery task (e.g. custom script execution) because\n    no Celery worker processes are currently running.\n    \"\"\"\nstatus_code = status.HTTP_503_SERVICE_UNAVAILABLE\ndefault_detail = (\nf\"Unable to process request: No celery workers running on queue {settings.CELERY_TASK_DEFAULT_QUEUE}.\"\n)\ndefault_code = \"celery_worker_not_running\"\ndef __init__(self, queue=None):\nif queue:\ndetail = f\"Unable to process request: No celery workers running on queue {queue}.\"\nelse:\ndetail = self.default_detail\nsuper().__init__(detail=detail)\n</code></pre>"},{"location":"code-reference/nautobot/apps/exceptions.html#nautobot.apps.exceptions.FilterSetFieldNotFound","title":"<code>nautobot.apps.exceptions.FilterSetFieldNotFound</code>","text":"<p>             Bases: <code>Exception</code></p> <p>An exception indicating that a filterset field could not be found.</p> Source code in <code>nautobot/core/exceptions.py</code> <pre><code>class FilterSetFieldNotFound(Exception):\n\"\"\"\n    An exception indicating that a filterset field could not be found.\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/exceptions.html#nautobot.apps.exceptions.SecretError","title":"<code>nautobot.apps.exceptions.SecretError</code>","text":"<p>             Bases: <code>Exception</code></p> <p>General purpose exception class for failures raised when secret value access fails.</p> Source code in <code>nautobot/extras/secrets/exceptions.py</code> <pre><code>class SecretError(Exception):\n\"\"\"General purpose exception class for failures raised when secret value access fails.\"\"\"\ndef __init__(self, secret, provider_class, message, *args, **kwargs):\nsuper().__init__(message, *args, **kwargs)\nself.secret = secret\n# provider_class can be a SecretsProvider class or just a descriptive string.\nif isinstance(provider_class, type):\nself.provider_class = provider_class\nself.provider = provider_class.__name__\nelse:\nself.provider_class = None\nself.provider = str(provider_class)\nself.message = message\ndef __str__(self):\nreturn f'{self.__class__.__name__}: Secret \"{self.secret}\" (provider \"{self.provider}\"): {self.message}'\n</code></pre>"},{"location":"code-reference/nautobot/apps/exceptions.html#nautobot.apps.exceptions.SecretParametersError","title":"<code>nautobot.apps.exceptions.SecretParametersError</code>","text":"<p>             Bases: <code>SecretError</code></p> <p>Exception raised when a Secret record's parameters are incorrectly specified.</p> <p>Normally this should be caught during input validation of the Secret record, but in the case of direct ORM access bypassing the usual clean() functionality, it's possible to create a mis-defined Secret which would trigger this exception upon access.</p> Source code in <code>nautobot/extras/secrets/exceptions.py</code> <pre><code>class SecretParametersError(SecretError):\n\"\"\"Exception raised when a Secret record's parameters are incorrectly specified.\n    Normally this should be caught during input validation of the Secret record, but in the case of direct\n    ORM access bypassing the usual clean() functionality, it's possible to create a mis-defined Secret which\n    would trigger this exception upon access.\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/exceptions.html#nautobot.apps.exceptions.SecretProviderError","title":"<code>nautobot.apps.exceptions.SecretProviderError</code>","text":"<p>             Bases: <code>SecretError</code></p> <p>General purpose exception class for failures that indicate that a secrets provider is not working correctly.</p> Source code in <code>nautobot/extras/secrets/exceptions.py</code> <pre><code>class SecretProviderError(SecretError):\n\"\"\"General purpose exception class for failures that indicate that a secrets provider is not working correctly.\"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/exceptions.html#nautobot.apps.exceptions.SecretValueNotFoundError","title":"<code>nautobot.apps.exceptions.SecretValueNotFoundError</code>","text":"<p>             Bases: <code>SecretError</code>, <code>KeyError</code></p> <p>Exception raised when a secrets provider is operating normally but a specific requested secret is not found.</p> Source code in <code>nautobot/extras/secrets/exceptions.py</code> <pre><code>class SecretValueNotFoundError(SecretError, KeyError):\n\"\"\"Exception raised when a secrets provider is operating normally but a specific requested secret is not found.\"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/exceptions.html#nautobot.apps.exceptions.ViewConfigException","title":"<code>nautobot.apps.exceptions.ViewConfigException</code>","text":"<p>             Bases: <code>Exception</code></p> <p>An exception indicating that a detail view config is invalid.</p> Source code in <code>nautobot/core/exceptions.py</code> <pre><code>class ViewConfigException(Exception):\n\"\"\"\n    An exception indicating that a detail view config is invalid.\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/factory.html","title":"nautobot.apps.factory","text":""},{"location":"code-reference/nautobot/apps/factory.html#nautobot.apps.factory","title":"<code>nautobot.apps.factory</code>","text":"<p>Nautobot classes and utilities for factory boy.</p>"},{"location":"code-reference/nautobot/apps/factory.html#nautobot.apps.factory.BaseModelFactory","title":"<code>nautobot.apps.factory.BaseModelFactory</code>","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>Base class for all Nautobot model factories.</p> Source code in <code>nautobot/core/factory.py</code> <pre><code>class BaseModelFactory(DjangoModelFactory):\n\"\"\"Base class for all Nautobot model factories.\"\"\"\nid = UniqueFaker(\"uuid4\")\n@classmethod\ndef _create(cls, model_class, *args, **kwargs):\n\"\"\"Override default DjangoModelFactory behavior to call validated_save() instead of just save().\"\"\"\nusing = kwargs.pop(\"using\", cls._meta.database)\nobj = model_class(*args, **kwargs)\nobj.validated_save(using=using)\nreturn obj\n</code></pre>"},{"location":"code-reference/nautobot/apps/factory.html#nautobot.apps.factory.NautobotBoolIterator","title":"<code>nautobot.apps.factory.NautobotBoolIterator</code>","text":"<p>             Bases: <code>factory.Iterator</code></p> <p>Factory iterator that returns a semi-random sampling of boolean values</p> <p>Iterator that returns a random sampling of True and False values while limiting the number of repeated values in a given number of iterations. Used in factories when a data set must contain both True and False values.</p> <p>Parameters:</p> Name Type Description Default <code>cycle</code> <code>boolean</code> <p>If True, iterator will restart at the beginning when all values are exhausted. Otherwise raise a <code>StopIterator</code> exception when values are exhausted. Defaults to True.</p> <code>True</code> <code>chance_of_getting_true</code> <code>int</code> <p>Percentage (0-100) of the values in the returned iterable set to True. Defaults to 50.</p> <code>constants.NAUTOBOT_BOOL_ITERATOR_DEFAULT_PROBABILITY</code> <code>length</code> <code>int</code> <p>Length of the returned iterable. Defaults to 8.</p> <code>constants.NAUTOBOT_BOOL_ITERATOR_DEFAULT_LENGTH</code> Source code in <code>nautobot/core/factory.py</code> <pre><code>class NautobotBoolIterator(factory.Iterator):\n\"\"\"Factory iterator that returns a semi-random sampling of boolean values\n    Iterator that returns a random sampling of True and False values while limiting\n    the number of repeated values in a given number of iterations. Used in factories\n    when a data set must contain both True and False values.\n    Args:\n        cycle (boolean): If True, iterator will restart at the beginning when all values are\n            exhausted. Otherwise raise a `StopIterator` exception when values are exhausted.\n            Defaults to True.\n        chance_of_getting_true (int): Percentage (0-100) of the values in the returned iterable\n            set to True. Defaults to 50.\n        length (int): Length of the returned iterable. Defaults to 8.\n    \"\"\"\ndef _nautobot_boolean_iterator_sample(self, chance_of_getting_true, length):\niterator = list(itertools.repeat(True, int(length * chance_of_getting_true / 100)))\niterator += list(itertools.repeat(False, length - len(iterator)))\nfactory.random.randgen.shuffle(iterator)\nreturn iterator\ndef __init__(\nself,\n*args,\ncycle=True,\ngetter=None,\nchance_of_getting_true=constants.NAUTOBOT_BOOL_ITERATOR_DEFAULT_PROBABILITY,\nlength=constants.NAUTOBOT_BOOL_ITERATOR_DEFAULT_LENGTH,\n):\nsuper().__init__(None, cycle=cycle, getter=getter)\nif cycle:\nself.iterator_builder = lambda: factory.utils.ResetableIterator(\nitertools.cycle(self._nautobot_boolean_iterator_sample(chance_of_getting_true, length))\n)\nelse:\nself.iterator_builder = lambda: factory.utils.ResetableIterator(\nself._nautobot_boolean_iterator_sample(chance_of_getting_true, length)\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/factory.html#nautobot.apps.factory.NautobotFakerProvider","title":"<code>nautobot.apps.factory.NautobotFakerProvider</code>","text":"<p>             Bases: <code>BaseProvider</code></p> <p>Faker provider to generate fake data specific to Nautobot or network automation use cases.</p> Source code in <code>nautobot/core/factory.py</code> <pre><code>class NautobotFakerProvider(BaseProvider):\n\"\"\"Faker provider to generate fake data specific to Nautobot or network automation use cases.\"\"\"\ndef ipv6_network(self) -&gt; str:\n\"\"\"Produce a random IPv6 network with a valid CIDR greater than 0\"\"\"\naddress = str(IPv6Address(self.generator.random.randint(0, (2**IPV6LENGTH) - 1)))\naddress += \"/\" + str(self.generator.random.randint(1, IPV6LENGTH))\naddress = str(IPv6Network(address, strict=False))\nreturn address\n</code></pre>"},{"location":"code-reference/nautobot/apps/factory.html#nautobot.core.factory.NautobotFakerProvider.ipv6_network","title":"<code>ipv6_network()</code>","text":"<p>Produce a random IPv6 network with a valid CIDR greater than 0</p> Source code in <code>nautobot/core/factory.py</code> <pre><code>def ipv6_network(self) -&gt; str:\n\"\"\"Produce a random IPv6 network with a valid CIDR greater than 0\"\"\"\naddress = str(IPv6Address(self.generator.random.randint(0, (2**IPV6LENGTH) - 1)))\naddress += \"/\" + str(self.generator.random.randint(1, IPV6LENGTH))\naddress = str(IPv6Network(address, strict=False))\nreturn address\n</code></pre>"},{"location":"code-reference/nautobot/apps/factory.html#nautobot.apps.factory.OrganizationalModelFactory","title":"<code>nautobot.apps.factory.OrganizationalModelFactory</code>","text":"<p>             Bases: <code>BaseModelFactory</code></p> <p>Factory base class for OrganizationalModel subclasses.</p> Source code in <code>nautobot/core/factory.py</code> <pre><code>class OrganizationalModelFactory(BaseModelFactory):\n\"\"\"Factory base class for OrganizationalModel subclasses.\"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/factory.html#nautobot.apps.factory.PrimaryModelFactory","title":"<code>nautobot.apps.factory.PrimaryModelFactory</code>","text":"<p>             Bases: <code>BaseModelFactory</code></p> <p>Factory base class for PrimaryModel subclasses.</p> Source code in <code>nautobot/core/factory.py</code> <pre><code>class PrimaryModelFactory(BaseModelFactory):\n\"\"\"Factory base class for PrimaryModel subclasses.\"\"\"\n# TODO random created/last_updated values?\n# TODO random custom_field data?\n# TODO random relationships?\n# TODO random dynamic-groups?\n# TODO random notes?\n@factory.post_generation\ndef tags(self, create, extracted, **kwargs):\nif create:\nif extracted:\nself.tags.set(extracted)\nelse:\nself.tags.set(get_random_instances(Tag.objects.get_for_model(self._meta.model)))\n</code></pre>"},{"location":"code-reference/nautobot/apps/factory.html#nautobot.apps.factory.UniqueFaker","title":"<code>nautobot.apps.factory.UniqueFaker</code>","text":"<p>             Bases: <code>factory.Faker</code></p> <p>https://github.com/FactoryBoy/factory_boy/pull/820#issuecomment-1004802669</p> Source code in <code>nautobot/core/factory.py</code> <pre><code>class UniqueFaker(factory.Faker):\n\"\"\"https://github.com/FactoryBoy/factory_boy/pull/820#issuecomment-1004802669\"\"\"\n@classmethod\ndef _get_faker(cls, locale=None):\nreturn super()._get_faker(locale=locale).unique\ndef clear(self, locale=None):\nsubfaker = self._get_faker(locale)\nsubfaker.clear()\n</code></pre>"},{"location":"code-reference/nautobot/apps/factory.html#nautobot.apps.factory.get_random_instances","title":"<code>nautobot.apps.factory.get_random_instances(model_or_queryset_or_lambda, minimum=0, maximum=None)</code>","text":"<p>Factory helper - retrieve a random number of instances of the given model.</p> <p>This is different from random_instance() in that it's not itself a lazy function generator, but should instead be called only from within a @lazy_attribute or @post_generation function.</p> <p>This is not an evenly weighted distribution (all counts equally likely), because in most of our code, the relevant code paths distinguish between 0, 1, or &gt;1 instances - there's not a functional difference between \"2 instances\" and \"10 instances\" in most cases. Therefore, this implementation provides:     - 1/3 chance of no instances     - 1/3 chance of 1 instance     - 1/3 chance of (2 to n) instances, where each possibility is equally likely within this range</p> <p>Parameters:</p> Name Type Description Default <code>model_or_queryset_or_lambda</code> <code>Union[BaseModel, QuerySet, func]</code> <p>Either a model class, a model queryset, or a lambda that returns one of those</p> required <code>minimum</code> <code>int</code> <p>Minimum number of objects to return</p> <code>0</code> <code>maximum</code> <code>int</code> <p>Maximum number of objects to return, or None for no limit</p> <code>None</code> Source code in <code>nautobot/core/factory.py</code> <pre><code>def get_random_instances(model_or_queryset_or_lambda, minimum=0, maximum=None):\n\"\"\"\n    Factory helper - retrieve a random number of instances of the given model.\n    This is different from random_instance() in that it's not itself a lazy function generator, but should instead be\n    called only from within a @lazy_attribute or @post_generation function.\n    This is not an evenly weighted distribution (all counts equally likely), because in most of our code,\n    the relevant code paths distinguish between 0, 1, or &gt;1 instances - there's not a functional difference between\n    \"2 instances\" and \"10 instances\" in most cases. Therefore, this implementation provides:\n        - 1/3 chance of no instances\n        - 1/3 chance of 1 instance\n        - 1/3 chance of (2 to n) instances, where each possibility is equally likely within this range\n    Args:\n        model_or_queryset_or_lambda (Union[BaseModel, QuerySet, func]): Either a model class, a model queryset, or a lambda that returns one of those\n        minimum (int): Minimum number of objects to return\n        maximum (int): Maximum number of objects to return, or None for no limit\n    \"\"\"\nbranch = factory.random.randgen.randint(0, 2)\nqueryset = _get_queryset_from_model_or_queryset_or_lambda(model_or_queryset_or_lambda)\ncount = queryset.count()\nif maximum is None:\nmaximum = count\nif any([branch == 0 and minimum == 0, count == 0, maximum == 0]):\nreturn []\nif any([branch == 1 and minimum &lt;= 1, count == 1, maximum == 1]):\nreturn [factory.random.randgen.choice(queryset)]\nreturn factory.random.randgen.sample(\npopulation=list(queryset),\nk=factory.random.randgen.randint(max(2, minimum), min(maximum, count)),\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/factory.html#nautobot.apps.factory.random_instance","title":"<code>nautobot.apps.factory.random_instance(model_or_queryset_or_lambda, allow_null=True)</code>","text":"<p>Factory helper - construct a LazyFunction that gets a random instance of the given model or queryset when evaluated.</p> <p>TODO: once we have factories for all mandatory foreign keys, change allow_null default to False</p> <p>Parameters:</p> Name Type Description Default <code>model_or_queryset_or_lambda</code> <code>Union[BaseModel, QuerySet, func]</code> <p>Either a model class, a model queryset, or a lambda that returns one of those</p> required <code>allow_null</code> <code>bool</code> <p>If False, and the given queryset contains no objects, raise a RuntimeError.</p> <code>True</code> Example <p>class ObjectFactory(DjangoModelFactory):     class Meta:         model = Object         exclude = (\"has_group,\")</p> <pre><code># Required foreign key\nuser = random_instance(User, allow_null=False)\n\n# Optional foreign key\nhas_group = NautobotBoolIterator()\ngroup = factory.Maybe(\"has_group\", random_instance(Group), None)\n\n# Foreign key selected from a filtered queryset\ntenant = random_instance(Tenant.objects.filter(group__isnull=False))\n\n# Foreign key selected from a queryset generated by a lambda\n# This needs to be done this way because .get_for_model() evaluates a ContentType queryset,\n# and we need to defer evaluation of that queryset as well.\nstatus = random_instance(lambda: Status.objects.get_for_model(Object), allow_null=False)\n</code></pre> Source code in <code>nautobot/core/factory.py</code> <pre><code>def random_instance(model_or_queryset_or_lambda, allow_null=True):\n\"\"\"\n    Factory helper - construct a LazyFunction that gets a random instance of the given model or queryset when evaluated.\n    TODO: once we have factories for all mandatory foreign keys, change allow_null default to False\n    Args:\n        model_or_queryset_or_lambda (Union[BaseModel, QuerySet, func]): Either a model class, a model queryset, or a lambda that returns one of those\n        allow_null (bool): If False, and the given queryset contains no objects, raise a RuntimeError.\n    Example:\n        class ObjectFactory(DjangoModelFactory):\n            class Meta:\n                model = Object\n                exclude = (\"has_group,\")\n            # Required foreign key\n            user = random_instance(User, allow_null=False)\n            # Optional foreign key\n            has_group = NautobotBoolIterator()\n            group = factory.Maybe(\"has_group\", random_instance(Group), None)\n            # Foreign key selected from a filtered queryset\n            tenant = random_instance(Tenant.objects.filter(group__isnull=False))\n            # Foreign key selected from a queryset generated by a lambda\n            # This needs to be done this way because .get_for_model() evaluates a ContentType queryset,\n            # and we need to defer evaluation of that queryset as well.\n            status = random_instance(lambda: Status.objects.get_for_model(Object), allow_null=False)\n    \"\"\"\ndef get_random_instance():\nqueryset = _get_queryset_from_model_or_queryset_or_lambda(model_or_queryset_or_lambda)\nif not allow_null and not queryset.exists():\nraise RuntimeError(f\"No objects in queryset for {model_or_queryset_or_lambda}! {queryset.explain()}\")\nreturn factory.random.randgen.choice(queryset) if queryset.exists() else None\nreturn factory.LazyFunction(get_random_instance)\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html","title":"nautobot.apps.filters","text":""},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters","title":"<code>nautobot.apps.filters</code>","text":"<p>Filterset base classes and mixins for app implementation.</p>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.BaseFilterSet","title":"<code>nautobot.apps.filters.BaseFilterSet</code>","text":"<p>             Bases: <code>django_filters.FilterSet</code></p> <p>A base filterset which provides common functionality to all Nautobot filtersets.</p> Source code in <code>nautobot/core/filters.py</code> <pre><code>class BaseFilterSet(django_filters.FilterSet):\n\"\"\"\n    A base filterset which provides common functionality to all Nautobot filtersets.\n    \"\"\"\nFILTER_DEFAULTS = deepcopy(django_filters.filterset.FILTER_FOR_DBFIELD_DEFAULTS)\nFILTER_DEFAULTS.update(\n{\nmodels.AutoField: {\"filter_class\": MultiValueNumberFilter},\nmodels.BigIntegerField: {\"filter_class\": MultiValueBigNumberFilter},\nmodels.CharField: {\"filter_class\": MultiValueCharFilter},\nmodels.DateField: {\"filter_class\": MultiValueDateFilter},\nmodels.DateTimeField: {\"filter_class\": MultiValueDateTimeFilter},\nmodels.DecimalField: {\"filter_class\": MultiValueDecimalFilter},\nmodels.EmailField: {\"filter_class\": MultiValueCharFilter},\nmodels.FloatField: {\"filter_class\": MultiValueFloatFilter},\nmodels.IntegerField: {\"filter_class\": MultiValueNumberFilter},\n# Ref: https://github.com/carltongibson/django-filter/issues/1107\nmodels.JSONField: {\"filter_class\": MultiValueCharFilter, \"extra\": lambda f: {\"lookup_expr\": \"icontains\"}},\nmodels.PositiveIntegerField: {\"filter_class\": MultiValueNumberFilter},\nmodels.PositiveSmallIntegerField: {\"filter_class\": MultiValueNumberFilter},\nmodels.SlugField: {\"filter_class\": MultiValueCharFilter},\nmodels.SmallIntegerField: {\"filter_class\": MultiValueNumberFilter},\nmodels.TextField: {\"filter_class\": MultiValueCharFilter},\nmodels.TimeField: {\"filter_class\": MultiValueTimeFilter},\nmodels.URLField: {\"filter_class\": MultiValueCharFilter},\nmodels.UUIDField: {\"filter_class\": MultiValueUUIDFilter},\ncore_fields.MACAddressCharField: {\"filter_class\": MultiValueMACAddressFilter},\ncore_fields.TagsField: {\"filter_class\": TagFilter},\n}\n)\n@staticmethod\ndef _get_filter_lookup_dict(existing_filter):\n# Choose the lookup expression map based on the filter type\nif isinstance(\nexisting_filter,\n(\nMultiValueDateFilter,\nMultiValueDateTimeFilter,\nMultiValueDecimalFilter,\nMultiValueFloatFilter,\nMultiValueNumberFilter,\nMultiValueTimeFilter,\n),\n):\nlookup_map = constants.FILTER_NUMERIC_BASED_LOOKUP_MAP\n# These filter types support only negation\nelif isinstance(\nexisting_filter,\n(\ndjango_filters.ModelChoiceFilter,\ndjango_filters.ModelMultipleChoiceFilter,\nTagFilter,\nTreeNodeMultipleChoiceFilter,\n),\n):\nlookup_map = constants.FILTER_NEGATION_LOOKUP_MAP\nelif isinstance(\nexisting_filter,\n(\ndjango_filters.filters.CharFilter,\ndjango_filters.MultipleChoiceFilter,\nMultiValueCharFilter,\nMultiValueMACAddressFilter,\n),\n):\nlookup_map = constants.FILTER_CHAR_BASED_LOOKUP_MAP\nelse:\nlookup_map = None\nreturn lookup_map\n@classmethod\ndef _generate_lookup_expression_filters(cls, filter_name, filter_field):\n\"\"\"\n        For specific filter types, new filters are created based on defined lookup expressions in\n        the form `&lt;field_name&gt;__&lt;lookup_expr&gt;`\n        \"\"\"\nmagic_filters = {}\nif filter_field.method is not None or filter_field.lookup_expr not in [\"exact\", \"in\"]:\nreturn magic_filters\n# Choose the lookup expression map based on the filter type\nlookup_map = cls._get_filter_lookup_dict(filter_field)\nif lookup_map is None:\n# Do not augment this filter type with more lookup expressions\nreturn magic_filters\n# Get properties of the existing filter for later use\nfield_name = filter_field.field_name\nfield = get_model_field(cls._meta.model, field_name)\n# If there isn't a model field, return.\nif field is None:\nreturn magic_filters\n# Create new filters for each lookup expression in the map\nfor lookup_name, lookup_expr in lookup_map.items():\nnew_filter_name = f\"{filter_name}__{lookup_name}\"\ntry:\nif filter_name in cls.declared_filters:\n# The filter field has been explicity defined on the filterset class so we must manually\n# create the new filter with the same type because there is no guarantee the defined type\n# is the same as the default type for the field\nresolve_field(field, lookup_expr)  # Will raise FieldLookupError if the lookup is invalid\nnew_filter = type(filter_field)(\nfield_name=field_name,\nlookup_expr=lookup_expr,\nlabel=filter_field.label,\nexclude=filter_field.exclude,\ndistinct=filter_field.distinct,\n**filter_field.extra,\n)\nelse:\n# The filter field is listed in Meta.fields so we can safely rely on default behaviour\n# Will raise FieldLookupError if the lookup is invalid\nnew_filter = cls.filter_for_field(field, field_name, lookup_expr)\nexcept django_filters.exceptions.FieldLookupError:\n# The filter could not be created because the lookup expression is not supported on the field\ncontinue\nif lookup_name.startswith(\"n\"):\n# This is a negation filter which requires a queryset.exclude() clause\n# Of course setting the negation of the existing filter's exclude attribute handles both cases\nnew_filter.exclude = not filter_field.exclude\nmagic_filters[new_filter_name] = new_filter\nreturn magic_filters\n@classmethod\ndef add_filter(cls, new_filter_name, new_filter_field):\n\"\"\"\n        Allow filters to be added post-generation on import.\n        Will provide `&lt;field_name&gt;__&lt;lookup_expr&gt;` generation automagically.\n        \"\"\"\nif not isinstance(new_filter_field, django_filters.Filter):\nraise TypeError(f\"Tried to add filter ({new_filter_name}) which is not an instance of Django Filter\")\nif new_filter_name in cls.base_filters:\nraise AttributeError(\nf\"There was a conflict with filter `{new_filter_name}`, the custom filter was ignored.\"\n)\ncls.base_filters[new_filter_name] = new_filter_field\n# django-filters has no concept of \"abstract\" filtersets, so we have to fake it\nif cls._meta.model is not None:\ncls.base_filters.update(\ncls._generate_lookup_expression_filters(filter_name=new_filter_name, filter_field=new_filter_field)\n)\n@classmethod\ndef get_fields(cls):\nfields = super().get_fields()\nif \"id\" not in fields and (cls._meta.exclude is None or \"id\" not in cls._meta.exclude):\n# Add \"id\" as the first key in the `fields` OrderedDict\nfields = OrderedDict(id=[django_filters.conf.settings.DEFAULT_LOOKUP_EXPR], **fields)\nreturn fields\n@classmethod\ndef get_filters(cls):\n\"\"\"\n        Override filter generation to support dynamic lookup expressions for certain filter types.\n        \"\"\"\nfilters = super().get_filters()\n# django-filters has no concept of \"abstract\" filtersets, so we have to fake it\nif cls._meta.model is not None:\nnew_filters = {}\nfor existing_filter_name, existing_filter in filters.items():\nnew_filters.update(\ncls._generate_lookup_expression_filters(\nfilter_name=existing_filter_name,\nfilter_field=existing_filter,\n)\n)\nfilters.update(new_filters)\nreturn filters\n@classmethod\ndef filter_for_lookup(cls, field, lookup_type):\n\"\"\"Override filter_for_lookup method to set ChoiceField Filter to MultipleChoiceFilter.\n        Note: Any CharField or IntegerField with choices set is a ChoiceField.\n        \"\"\"\nif lookup_type == \"exact\" and getattr(field, \"choices\", None):\nreturn django_filters.MultipleChoiceFilter, {\"choices\": field.choices}\nreturn super().filter_for_lookup(field, lookup_type)\ndef __init__(self, data=None, queryset=None, *, request=None, prefix=None):\nsuper().__init__(data, queryset, request=request, prefix=prefix)\nself._is_valid = None\nself._errors = None\ndef is_valid(self):\n\"\"\"Extend FilterSet.is_valid() to potentially enforce settings.STRICT_FILTERING.\"\"\"\nif self._is_valid is None:\nself._is_valid = super().is_valid()\nif settings.STRICT_FILTERING:\nself._is_valid = self._is_valid and set(self.form.data.keys()).issubset(self.form.cleaned_data.keys())\nelse:\n# Trigger warning logs associated with generating self.errors\nself.errors\nreturn self._is_valid\n@property\ndef errors(self):\n\"\"\"Extend FilterSet.errors to potentially include additional errors from settings.STRICT_FILTERING.\"\"\"\nif self._errors is None:\nself._errors = ErrorDict(self.form.errors)\nfor extra_key in set(self.form.data.keys()).difference(self.form.cleaned_data.keys()):\n# If a given field was invalid, it will be omitted from cleaned_data; don't report extra errors\nif extra_key not in self._errors:\nif settings.STRICT_FILTERING:\nself._errors.setdefault(extra_key, ErrorList()).append(\"Unknown filter field\")\nelse:\nlogger.warning('%s: Unknown filter field \"%s\"', self.__class__.__name__, extra_key)\nreturn self._errors\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.core.filters.BaseFilterSet.errors","title":"<code>errors</code>  <code>property</code>","text":"<p>Extend FilterSet.errors to potentially include additional errors from settings.STRICT_FILTERING.</p>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.core.filters.BaseFilterSet.add_filter","title":"<code>add_filter(new_filter_name, new_filter_field)</code>  <code>classmethod</code>","text":"<p>Allow filters to be added post-generation on import.</p> <p>Will provide <code>&lt;field_name&gt;__&lt;lookup_expr&gt;</code> generation automagically.</p> Source code in <code>nautobot/core/filters.py</code> <pre><code>@classmethod\ndef add_filter(cls, new_filter_name, new_filter_field):\n\"\"\"\n    Allow filters to be added post-generation on import.\n    Will provide `&lt;field_name&gt;__&lt;lookup_expr&gt;` generation automagically.\n    \"\"\"\nif not isinstance(new_filter_field, django_filters.Filter):\nraise TypeError(f\"Tried to add filter ({new_filter_name}) which is not an instance of Django Filter\")\nif new_filter_name in cls.base_filters:\nraise AttributeError(\nf\"There was a conflict with filter `{new_filter_name}`, the custom filter was ignored.\"\n)\ncls.base_filters[new_filter_name] = new_filter_field\n# django-filters has no concept of \"abstract\" filtersets, so we have to fake it\nif cls._meta.model is not None:\ncls.base_filters.update(\ncls._generate_lookup_expression_filters(filter_name=new_filter_name, filter_field=new_filter_field)\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.core.filters.BaseFilterSet.filter_for_lookup","title":"<code>filter_for_lookup(field, lookup_type)</code>  <code>classmethod</code>","text":"<p>Override filter_for_lookup method to set ChoiceField Filter to MultipleChoiceFilter.</p> <p>Note: Any CharField or IntegerField with choices set is a ChoiceField.</p> Source code in <code>nautobot/core/filters.py</code> <pre><code>@classmethod\ndef filter_for_lookup(cls, field, lookup_type):\n\"\"\"Override filter_for_lookup method to set ChoiceField Filter to MultipleChoiceFilter.\n    Note: Any CharField or IntegerField with choices set is a ChoiceField.\n    \"\"\"\nif lookup_type == \"exact\" and getattr(field, \"choices\", None):\nreturn django_filters.MultipleChoiceFilter, {\"choices\": field.choices}\nreturn super().filter_for_lookup(field, lookup_type)\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.core.filters.BaseFilterSet.get_filters","title":"<code>get_filters()</code>  <code>classmethod</code>","text":"<p>Override filter generation to support dynamic lookup expressions for certain filter types.</p> Source code in <code>nautobot/core/filters.py</code> <pre><code>@classmethod\ndef get_filters(cls):\n\"\"\"\n    Override filter generation to support dynamic lookup expressions for certain filter types.\n    \"\"\"\nfilters = super().get_filters()\n# django-filters has no concept of \"abstract\" filtersets, so we have to fake it\nif cls._meta.model is not None:\nnew_filters = {}\nfor existing_filter_name, existing_filter in filters.items():\nnew_filters.update(\ncls._generate_lookup_expression_filters(\nfilter_name=existing_filter_name,\nfilter_field=existing_filter,\n)\n)\nfilters.update(new_filters)\nreturn filters\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.core.filters.BaseFilterSet.is_valid","title":"<code>is_valid()</code>","text":"<p>Extend FilterSet.is_valid() to potentially enforce settings.STRICT_FILTERING.</p> Source code in <code>nautobot/core/filters.py</code> <pre><code>def is_valid(self):\n\"\"\"Extend FilterSet.is_valid() to potentially enforce settings.STRICT_FILTERING.\"\"\"\nif self._is_valid is None:\nself._is_valid = super().is_valid()\nif settings.STRICT_FILTERING:\nself._is_valid = self._is_valid and set(self.form.data.keys()).issubset(self.form.cleaned_data.keys())\nelse:\n# Trigger warning logs associated with generating self.errors\nself.errors\nreturn self._is_valid\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.ConfigContextRoleFilter","title":"<code>nautobot.apps.filters.ConfigContextRoleFilter</code>","text":"<p>             Bases: <code>NaturalKeyOrPKMultipleChoiceFilter</code></p> <p>Limit role choices to the available role choices for Device and VM</p> Source code in <code>nautobot/extras/filters/mixins.py</code> <pre><code>class ConfigContextRoleFilter(NaturalKeyOrPKMultipleChoiceFilter):\n\"\"\"Limit role choices to the available role choices for Device and VM\"\"\"\ndef __init__(self, *args, **kwargs):\nkwargs.setdefault(\"field_name\", \"roles\")\nkwargs.setdefault(\"queryset\", Role.objects.get_for_models([Device, VirtualMachine]))\nkwargs.setdefault(\"label\", \"Role (name or ID)\")\nkwargs.setdefault(\"to_field_name\", \"name\")\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.ContentTypeChoiceFilter","title":"<code>nautobot.apps.filters.ContentTypeChoiceFilter</code>","text":"<p>             Bases: <code>ContentTypeFilterMixin</code>, <code>django_filters.ChoiceFilter</code></p> <p>Allows character-based ContentType filtering by . (e.g. \"dcim.location\") but an explicit set of choices must be provided. <p>Example use on a <code>FilterSet</code>:</p> <pre><code>content_type = ContentTypeChoiceFilter(\n    choices=FeatureQuery(\"dynamic_groups\").get_choices,\n)\n</code></pre> Source code in <code>nautobot/core/filters.py</code> <pre><code>class ContentTypeChoiceFilter(ContentTypeFilterMixin, django_filters.ChoiceFilter):\n\"\"\"\n    Allows character-based ContentType filtering by &lt;app_label&gt;.&lt;model&gt; (e.g.\n    \"dcim.location\") but an explicit set of choices must be provided.\n    Example use on a `FilterSet`:\n        content_type = ContentTypeChoiceFilter(\n            choices=FeatureQuery(\"dynamic_groups\").get_choices,\n        )\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.ContentTypeFilter","title":"<code>nautobot.apps.filters.ContentTypeFilter</code>","text":"<p>             Bases: <code>ContentTypeFilterMixin</code>, <code>django_filters.CharFilter</code></p> <p>Allows character-based ContentType filtering by . (e.g. \"dcim.location\"). <p>Does not support limiting of choices. Can be used without arguments on a <code>FilterSet</code>:</p> <pre><code>content_type = ContentTypeFilter()\n</code></pre> Source code in <code>nautobot/core/filters.py</code> <pre><code>class ContentTypeFilter(ContentTypeFilterMixin, django_filters.CharFilter):\n\"\"\"\n    Allows character-based ContentType filtering by &lt;app_label&gt;.&lt;model&gt; (e.g. \"dcim.location\").\n    Does not support limiting of choices. Can be used without arguments on a `FilterSet`:\n        content_type = ContentTypeFilter()\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.ContentTypeFilterMixin","title":"<code>nautobot.apps.filters.ContentTypeFilterMixin</code>","text":"<p>Mixin to allow specifying a ContentType by . (e.g. \"dcim.location\"). Source code in <code>nautobot/core/filters.py</code> <pre><code>class ContentTypeFilterMixin:\n\"\"\"\n    Mixin to allow specifying a ContentType by &lt;app_label&gt;.&lt;model&gt; (e.g. \"dcim.location\").\n    \"\"\"\ndef filter(self, qs, value):\nif value in EMPTY_VALUES:\nreturn qs\ntry:\napp_label, model = value.lower().split(\".\")\nexcept ValueError:\nreturn qs.none()\nreturn qs.filter(\n**{\nf\"{self.field_name}__app_label\": app_label,\nf\"{self.field_name}__model\": model,\n}\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.ContentTypeMultipleChoiceFilter","title":"<code>nautobot.apps.filters.ContentTypeMultipleChoiceFilter</code>","text":"<p>             Bases: <code>django_filters.MultipleChoiceFilter</code></p> <p>Allows multiple-choice ContentType filtering by . (e.g. \"dcim.location\"). <p>Defaults to joining multiple options with \"AND\". Pass <code>conjoined=False</code> to override this behavior to join with \"OR\" instead.</p> <p>Example use on a <code>FilterSet</code>:</p> <pre><code>content_types = ContentTypeMultipleChoiceFilter(\n    choices=FeatureQuery(\"statuses\").get_choices,\n)\n</code></pre> Source code in <code>nautobot/core/filters.py</code> <pre><code>class ContentTypeMultipleChoiceFilter(django_filters.MultipleChoiceFilter):\n\"\"\"\n    Allows multiple-choice ContentType filtering by &lt;app_label&gt;.&lt;model&gt; (e.g. \"dcim.location\").\n    Defaults to joining multiple options with \"AND\". Pass `conjoined=False` to\n    override this behavior to join with \"OR\" instead.\n    Example use on a `FilterSet`:\n        content_types = ContentTypeMultipleChoiceFilter(\n            choices=FeatureQuery(\"statuses\").get_choices,\n        )\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nkwargs.setdefault(\"conjoined\", True)\nsuper().__init__(*args, **kwargs)\ndef filter(self, qs, value):\n\"\"\"Filter on value, which should be list of content-type names.\n        e.g. `['dcim.device', 'dcim.rack']`\n        \"\"\"\nif not self.conjoined:\nq = models.Q()\nfor v in value:\nif self.conjoined:\nqs = ContentTypeFilter.filter(self, qs, v)\nelse:\n# Similar to the ContentTypeFilter.filter() call above, but instead of narrowing the query each time\n# (a AND b AND c ...) we broaden the query each time (a OR b OR c ...).\n# Specifically, we're mapping a value like ['dcim.device', 'ipam.vlan'] to a query like\n# Q((field__app_label=\"dcim\" AND field__model=\"device\") OR (field__app_label=\"ipam\" AND field__model=\"VLAN\"))\ntry:\napp_label, model = v.lower().split(\".\")\nexcept ValueError:\ncontinue\nq |= models.Q(\n**{\nf\"{self.field_name}__app_label\": app_label,\nf\"{self.field_name}__model\": model,\n}\n)\nif not self.conjoined:\nqs = qs.filter(q)\nreturn qs\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.core.filters.ContentTypeMultipleChoiceFilter.filter","title":"<code>filter(qs, value)</code>","text":"<p>Filter on value, which should be list of content-type names.</p> <p>e.g. <code>['dcim.device', 'dcim.rack']</code></p> Source code in <code>nautobot/core/filters.py</code> <pre><code>def filter(self, qs, value):\n\"\"\"Filter on value, which should be list of content-type names.\n    e.g. `['dcim.device', 'dcim.rack']`\n    \"\"\"\nif not self.conjoined:\nq = models.Q()\nfor v in value:\nif self.conjoined:\nqs = ContentTypeFilter.filter(self, qs, v)\nelse:\n# Similar to the ContentTypeFilter.filter() call above, but instead of narrowing the query each time\n# (a AND b AND c ...) we broaden the query each time (a OR b OR c ...).\n# Specifically, we're mapping a value like ['dcim.device', 'ipam.vlan'] to a query like\n# Q((field__app_label=\"dcim\" AND field__model=\"device\") OR (field__app_label=\"ipam\" AND field__model=\"VLAN\"))\ntry:\napp_label, model = v.lower().split(\".\")\nexcept ValueError:\ncontinue\nq |= models.Q(\n**{\nf\"{self.field_name}__app_label\": app_label,\nf\"{self.field_name}__model\": model,\n}\n)\nif not self.conjoined:\nqs = qs.filter(q)\nreturn qs\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.CustomFieldModelFilterSetMixin","title":"<code>nautobot.apps.filters.CustomFieldModelFilterSetMixin</code>","text":"<p>             Bases: <code>django_filters.FilterSet</code></p> <p>Dynamically add a Filter for each CustomField applicable to the parent model. Add filters for extra lookup expressions on supported CustomField types.</p> Source code in <code>nautobot/extras/filters/mixins.py</code> <pre><code>class CustomFieldModelFilterSetMixin(django_filters.FilterSet):\n\"\"\"\n    Dynamically add a Filter for each CustomField applicable to the parent model. Add filters for\n    extra lookup expressions on supported CustomField types.\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\ncustom_field_filter_classes = {\nCustomFieldTypeChoices.TYPE_DATE: CustomFieldDateFilter,\nCustomFieldTypeChoices.TYPE_BOOLEAN: CustomFieldBooleanFilter,\nCustomFieldTypeChoices.TYPE_INTEGER: CustomFieldNumberFilter,\nCustomFieldTypeChoices.TYPE_JSON: CustomFieldJSONFilter,\nCustomFieldTypeChoices.TYPE_MULTISELECT: CustomFieldMultiSelectFilter,\nCustomFieldTypeChoices.TYPE_SELECT: CustomFieldMultiSelectFilter,\n}\ncustom_fields = CustomField.objects.filter(\ncontent_types=ContentType.objects.get_for_model(self._meta.model)\n).exclude(filter_logic=CustomFieldFilterLogicChoices.FILTER_DISABLED)\nfor cf in custom_fields:\n# Determine filter class for this CustomField type, default to CustomFieldCharFilter\nnew_filter_name = cf.add_prefix_to_cf_key()\nfilter_class = custom_field_filter_classes.get(cf.type, CustomFieldCharFilter)\nnew_filter = filter_class(field_name=cf.key, custom_field=cf)\nnew_filter.label = f\"{cf.label}\"\n# Create base filter (cf_customfieldname)\nself.filters[new_filter_name] = new_filter\n# Create extra lookup expression filters (cf_customfieldname__lookup_expr)\nself.filters.update(\nself._generate_custom_field_lookup_expression_filters(filter_name=new_filter_name, custom_field=cf)\n)\n@staticmethod\ndef _get_custom_field_filter_lookup_dict(filter_type):\n# Choose the lookup expression map based on the filter type\nif issubclass(filter_type, (CustomFieldMultiValueNumberFilter, CustomFieldMultiValueDateFilter)):\nreturn FILTER_NUMERIC_BASED_LOOKUP_MAP\nelif issubclass(filter_type, CustomFieldMultiSelectFilter):\nreturn FILTER_NEGATION_LOOKUP_MAP\nelse:\nreturn FILTER_CHAR_BASED_LOOKUP_MAP\n# TODO 2.0: Transition CustomField filters to nautobot.core.filters.MultiValue* filters and\n# leverage BaseFilterSet to add dynamic lookup expression filters. Remove CustomField.filter_logic field\n@classmethod\ndef _generate_custom_field_lookup_expression_filters(cls, filter_name, custom_field):\n\"\"\"\n        For specific filter types, new filters are created based on defined lookup expressions in\n        the form `&lt;field_name&gt;__&lt;lookup_expr&gt;`. Copied from nautobot.core.filters.BaseFilterSet\n        and updated to work with custom fields.\n        \"\"\"\nmagic_filters = {}\ncustom_field_type_to_filter_map = {\nCustomFieldTypeChoices.TYPE_DATE: CustomFieldMultiValueDateFilter,\nCustomFieldTypeChoices.TYPE_INTEGER: CustomFieldMultiValueNumberFilter,\nCustomFieldTypeChoices.TYPE_SELECT: CustomFieldMultiValueCharFilter,\nCustomFieldTypeChoices.TYPE_MULTISELECT: CustomFieldMultiSelectFilter,\nCustomFieldTypeChoices.TYPE_TEXT: CustomFieldMultiValueCharFilter,\nCustomFieldTypeChoices.TYPE_URL: CustomFieldMultiValueCharFilter,\n}\nif custom_field.type in custom_field_type_to_filter_map:\nfilter_type = custom_field_type_to_filter_map[custom_field.type]\nelse:\nreturn magic_filters\n# Choose the lookup expression map based on the filter type\nlookup_map = cls._get_custom_field_filter_lookup_dict(filter_type)\n# Create new filters for each lookup expression in the map\nfor lookup_name, lookup_expr in lookup_map.items():\nnew_filter_name = f\"{filter_name}__{lookup_name}\"\nnew_filter = filter_type(\nfield_name=custom_field.key,\nlookup_expr=lookup_expr,\ncustom_field=custom_field,\nlabel=f\"{custom_field.label} ({verbose_lookup_expr(lookup_expr)})\",\nexclude=lookup_name.startswith(\"n\"),\n)\nmagic_filters[new_filter_name] = new_filter\nreturn magic_filters\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.FilterExtension","title":"<code>nautobot.apps.filters.FilterExtension</code>","text":"<p>Class that may be returned by a registered Filter Extension function.</p> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>class FilterExtension:\n\"\"\"Class that may be returned by a registered Filter Extension function.\"\"\"\nmodel = None\nfilterset_fields = {}\nfilterform_fields = {}\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.MappedPredicatesFilterMixin","title":"<code>nautobot.apps.filters.MappedPredicatesFilterMixin</code>","text":"<p>A filter mixin to provide the ability to specify fields and lookup expressions to use for filtering.</p> <p>A mapping of filter predicates (field_name: lookup_expr) must be provided to the filter when declared on a filterset. This mapping is used to construct a <code>Q</code> query to filter based on the provided predicates.</p> <p>By default a predicate for <code>{\"id\": \"iexact\"}</code> (<code>id__exact</code>) will always be included.</p> Example <p>q = SearchFilter(     filter_predicates={         \"comments\": \"icontains\",         \"name\": \"icontains\",     }, )</p> <p>Optionally you may also provide a callable to use as a preprocessor for the filter predicate by providing the value as a nested dict with \"lookup_expr\" and \"preprocessor\" keys. For example:</p> <pre><code>q = SearchFilter(\n    filter_predicates={\n        \"asn\": {\n            \"lookup_expr\": \"exact\",\n            \"preprocessor\": int,\n        },\n    },\n)\n</code></pre> <p>This tells the filter to try to cast <code>asn</code> to an <code>int</code>. If it fails, this predicate will be skipped.</p> Source code in <code>nautobot/core/filters.py</code> <pre><code>class MappedPredicatesFilterMixin:\n\"\"\"\n    A filter mixin to provide the ability to specify fields and lookup expressions to use for\n    filtering.\n    A mapping of filter predicates (field_name: lookup_expr) must be provided to the filter when\n    declared on a filterset. This mapping is used to construct a `Q` query to filter based on the\n    provided predicates.\n    By default a predicate for `{\"id\": \"iexact\"}` (`id__exact`) will always be included.\n    Example:\n        q = SearchFilter(\n            filter_predicates={\n                \"comments\": \"icontains\",\n                \"name\": \"icontains\",\n            },\n        )\n    Optionally you may also provide a callable to use as a preprocessor for the filter predicate by\n    providing the value as a nested dict with \"lookup_expr\" and \"preprocessor\" keys. For example:\n        q = SearchFilter(\n            filter_predicates={\n                \"asn\": {\n                    \"lookup_expr\": \"exact\",\n                    \"preprocessor\": int,\n                },\n            },\n        )\n    This tells the filter to try to cast `asn` to an `int`. If it fails, this predicate will be\n    skipped.\n    \"\"\"\n# Optional label for the form element generated for this filter\nlabel = None\n# Filter predicates that will always be included if not otherwise specified.\ndefault_filter_predicates = {\"id\": \"iexact\"}\n# Lookup expressions for which whitespace should be preserved.\npreserve_whitespace = [\"icontains\"]\ndef __init__(self, filter_predicates=None, strip=False, *args, **kwargs):\nif not isinstance(filter_predicates, dict):\nraise TypeError(\"filter_predicates must be a dict\")\n# Layer incoming filter_predicates on top of the defaults so that any overrides take\n# precedence.\ndefaults = deepcopy(self.default_filter_predicates)\ndefaults.update(filter_predicates)\n# Format: {field_name: lookup_expr, ...}\nself.filter_predicates = defaults\n# Try to use the label from the class if it is defined.\nkwargs.setdefault(\"label\", self.label)\n# Whether to strip whtespace in the inner CharField form (default: False)\nkwargs.setdefault(\"strip\", strip)\nsuper().__init__(*args, **kwargs)\n# Generate the query with a sentinel value to validate it and surface parse errors.\nself.generate_query(value=\"\")\ndef generate_query(self, value, **kwargs):\n\"\"\"\n        Given a `value`, return a `Q` object for 2-tuple of `predicate=value`. Filter predicates are\n        read from the instance filter. Any `kwargs` are ignored.\n        \"\"\"\ndef noop(v):\n\"\"\"Pass through the value.\"\"\"\nreturn v\nquery = models.Q()\nfor field_name, lookup_info in self.filter_predicates.items():\n# Unless otherwise specified, set the default prepreprocssor\nif isinstance(lookup_info, str):\nlookup_expr = lookup_info\nif lookup_expr in self.preserve_whitespace:\npreprocessor = noop\nelse:\npreprocessor = str.strip\n# Or set it to what was defined by caller\nelif isinstance(lookup_info, dict):\nlookup_expr = lookup_info.get(\"lookup_expr\")\npreprocessor = lookup_info.get(\"preprocessor\")\nif not callable(preprocessor):\nraise TypeError(\"Preprocessor {preprocessor} must be callable!\")\nelse:\nraise TypeError(f\"Predicate value must be a str or a dict! Got: {type(lookup_info)}\")\n# Try to preprocess the value or skip creating a predicate for it. In the event we try\n# to cast a value to an invalid type (e.g. `int(\"foo\")` or `dict(42)`), ensure this\n# predicate is not included in the query.\ntry:\nnew_value = preprocessor(value)\nexcept (TypeError, ValueError):\ncontinue\npredicate = {f\"{field_name}__{lookup_expr}\": new_value}\nquery |= models.Q(**predicate)\n# Return this for later use (such as introspection or debugging)\nreturn query\ndef filter(self, qs, value):\nif value in EMPTY_VALUES:\nreturn qs\n# Evaluate the query and stash it for later use (such as introspection or debugging)\nquery = self.generate_query(value=value)\nqs = self.get_method(qs)(query)\nself._most_recent_query = query\nreturn qs.distinct()\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.core.filters.MappedPredicatesFilterMixin.generate_query","title":"<code>generate_query(value, **kwargs)</code>","text":"<p>Given a <code>value</code>, return a <code>Q</code> object for 2-tuple of <code>predicate=value</code>. Filter predicates are read from the instance filter. Any <code>kwargs</code> are ignored.</p> Source code in <code>nautobot/core/filters.py</code> <pre><code>def generate_query(self, value, **kwargs):\n\"\"\"\n    Given a `value`, return a `Q` object for 2-tuple of `predicate=value`. Filter predicates are\n    read from the instance filter. Any `kwargs` are ignored.\n    \"\"\"\ndef noop(v):\n\"\"\"Pass through the value.\"\"\"\nreturn v\nquery = models.Q()\nfor field_name, lookup_info in self.filter_predicates.items():\n# Unless otherwise specified, set the default prepreprocssor\nif isinstance(lookup_info, str):\nlookup_expr = lookup_info\nif lookup_expr in self.preserve_whitespace:\npreprocessor = noop\nelse:\npreprocessor = str.strip\n# Or set it to what was defined by caller\nelif isinstance(lookup_info, dict):\nlookup_expr = lookup_info.get(\"lookup_expr\")\npreprocessor = lookup_info.get(\"preprocessor\")\nif not callable(preprocessor):\nraise TypeError(\"Preprocessor {preprocessor} must be callable!\")\nelse:\nraise TypeError(f\"Predicate value must be a str or a dict! Got: {type(lookup_info)}\")\n# Try to preprocess the value or skip creating a predicate for it. In the event we try\n# to cast a value to an invalid type (e.g. `int(\"foo\")` or `dict(42)`), ensure this\n# predicate is not included in the query.\ntry:\nnew_value = preprocessor(value)\nexcept (TypeError, ValueError):\ncontinue\npredicate = {f\"{field_name}__{lookup_expr}\": new_value}\nquery |= models.Q(**predicate)\n# Return this for later use (such as introspection or debugging)\nreturn query\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.MultiValueBigNumberFilter","title":"<code>nautobot.apps.filters.MultiValueBigNumberFilter</code>","text":"<p>             Bases: <code>MultiValueNumberFilter</code></p> <p>Subclass of MultiValueNumberFilter used for BigInteger model fields.</p> Source code in <code>nautobot/core/filters.py</code> <pre><code>class MultiValueBigNumberFilter(MultiValueNumberFilter):\n\"\"\"Subclass of MultiValueNumberFilter used for BigInteger model fields.\"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.NameSearchFilterSet","title":"<code>nautobot.apps.filters.NameSearchFilterSet</code>","text":"<p>             Bases: <code>django_filters.FilterSet</code></p> <p>A base class for adding the search method to models which only expose the <code>name</code> field in searches.</p> Source code in <code>nautobot/core/filters.py</code> <pre><code>class NameSearchFilterSet(django_filters.FilterSet):\n\"\"\"\n    A base class for adding the search method to models which only expose the `name` field in searches.\n    \"\"\"\nq = SearchFilter(filter_predicates={\"name\": \"icontains\"})\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.NaturalKeyOrPKMultipleChoiceFilter","title":"<code>nautobot.apps.filters.NaturalKeyOrPKMultipleChoiceFilter</code>","text":"<p>             Bases: <code>django_filters.ModelMultipleChoiceFilter</code></p> <p>Filter that supports filtering on values matching the <code>pk</code> field and another field of a foreign-key related object. The desired field is set using the <code>to_field_name</code> keyword argument on filter initialization (defaults to <code>name</code>).</p> Source code in <code>nautobot/core/filters.py</code> <pre><code>@extend_schema_field(OpenApiTypes.STR)\nclass NaturalKeyOrPKMultipleChoiceFilter(django_filters.ModelMultipleChoiceFilter):\n\"\"\"\n    Filter that supports filtering on values matching the `pk` field and another\n    field of a foreign-key related object. The desired field is set using the `to_field_name`\n    keyword argument on filter initialization (defaults to `name`).\n    \"\"\"\nfield_class = forms.MultiMatchModelMultipleChoiceField\ndef __init__(self, *args, **kwargs):\nself.natural_key = kwargs.setdefault(\"to_field_name\", \"name\")\nsuper().__init__(*args, **kwargs)\ndef get_filter_predicate(self, v):\n\"\"\"\n        Override base filter behavior to force the filter to use the `pk` field instead of\n        the natural key in the generated filter.\n        \"\"\"\n# Null value filtering\nif v is None:\nreturn {f\"{self.field_name}__isnull\": True}\n# If value is a model instance, stringify it to a pk.\nif isinstance(v, models.Model):\nlogger.debug(\"Model instance detected. Casting to a PK.\")\nv = str(v.pk)\n# Try to cast the value to a UUID and set `is_pk` boolean.\ntry:\nuuid.UUID(str(v))\nexcept (AttributeError, TypeError, ValueError):\nlogger.debug(\"Non-UUID value detected: Filtering using natural key\")\nis_pk = False\nelse:\nv = str(v)  # Cast possible UUID instance to a string\nis_pk = True\n# If it's not a pk, then it's a name and the filter predicate needs to be nested (e.g.\n# `{\"location__name\": \"ams01\"}`) so that it can be usable in `Q` objects.\nif not is_pk:\nname = f\"{self.field_name}__{self.field.to_field_name}\"\nelse:\nlogger.debug(\"UUID detected: Filtering using field name\")\nname = self.field_name\nif name and self.lookup_expr != django_filters.conf.settings.DEFAULT_LOOKUP_EXPR:\nname = \"__\".join([name, self.lookup_expr])\nreturn {name: v}\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.core.filters.NaturalKeyOrPKMultipleChoiceFilter.get_filter_predicate","title":"<code>get_filter_predicate(v)</code>","text":"<p>Override base filter behavior to force the filter to use the <code>pk</code> field instead of the natural key in the generated filter.</p> Source code in <code>nautobot/core/filters.py</code> <pre><code>def get_filter_predicate(self, v):\n\"\"\"\n    Override base filter behavior to force the filter to use the `pk` field instead of\n    the natural key in the generated filter.\n    \"\"\"\n# Null value filtering\nif v is None:\nreturn {f\"{self.field_name}__isnull\": True}\n# If value is a model instance, stringify it to a pk.\nif isinstance(v, models.Model):\nlogger.debug(\"Model instance detected. Casting to a PK.\")\nv = str(v.pk)\n# Try to cast the value to a UUID and set `is_pk` boolean.\ntry:\nuuid.UUID(str(v))\nexcept (AttributeError, TypeError, ValueError):\nlogger.debug(\"Non-UUID value detected: Filtering using natural key\")\nis_pk = False\nelse:\nv = str(v)  # Cast possible UUID instance to a string\nis_pk = True\n# If it's not a pk, then it's a name and the filter predicate needs to be nested (e.g.\n# `{\"location__name\": \"ams01\"}`) so that it can be usable in `Q` objects.\nif not is_pk:\nname = f\"{self.field_name}__{self.field.to_field_name}\"\nelse:\nlogger.debug(\"UUID detected: Filtering using field name\")\nname = self.field_name\nif name and self.lookup_expr != django_filters.conf.settings.DEFAULT_LOOKUP_EXPR:\nname = \"__\".join([name, self.lookup_expr])\nreturn {name: v}\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.NautobotFilterSet","title":"<code>nautobot.apps.filters.NautobotFilterSet</code>","text":"<p>             Bases: <code>BaseFilterSet</code>, <code>CreatedUpdatedModelFilterSetMixin</code>, <code>RelationshipModelFilterSetMixin</code>, <code>CustomFieldModelFilterSetMixin</code></p> <p>This class exists to combine common functionality and is used as a base class throughout the codebase where all of BaseFilterSet, CreatedUpdatedModelFilterSetMixin, RelationshipModelFilterSetMixin and CustomFieldModelFilterSetMixin are needed.</p> Source code in <code>nautobot/extras/filters/__init__.py</code> <pre><code>class NautobotFilterSet(\nBaseFilterSet,\nCreatedUpdatedModelFilterSetMixin,\nRelationshipModelFilterSetMixin,\nCustomFieldModelFilterSetMixin,\n):\n\"\"\"\n    This class exists to combine common functionality and is used as a base class throughout the codebase where all of\n    BaseFilterSet, CreatedUpdatedModelFilterSetMixin, RelationshipModelFilterSetMixin and CustomFieldModelFilterSetMixin\n    are needed.\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.NumericArrayFilter","title":"<code>nautobot.apps.filters.NumericArrayFilter</code>","text":"<p>             Bases: <code>django_filters.NumberFilter</code></p> <p>Filter based on the presence of an integer within an ArrayField.</p> Source code in <code>nautobot/core/filters.py</code> <pre><code>class NumericArrayFilter(django_filters.NumberFilter):\n\"\"\"\n    Filter based on the presence of an integer within an ArrayField.\n    \"\"\"\ndef filter(self, qs, value):\nif value:\nvalue = [value]\nreturn super().filter(qs, value)\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.RelatedMembershipBooleanFilter","title":"<code>nautobot.apps.filters.RelatedMembershipBooleanFilter</code>","text":"<p>             Bases: <code>django_filters.BooleanFilter</code></p> <p>BooleanFilter for related objects that will explicitly perform <code>exclude=True</code> and <code>isnull</code> lookups. The <code>field_name</code> argument is required and must be set to the related field on the model.</p> <p>This should be used instead of a default <code>BooleanFilter</code> paired <code>method=</code> argument to test for the existence of related objects.</p> Example <p>has_interfaces = RelatedMembershipBooleanFilter(     field_name=\"interfaces\",     label=\"Has interfaces\", )</p> Source code in <code>nautobot/core/filters.py</code> <pre><code>class RelatedMembershipBooleanFilter(django_filters.BooleanFilter):\n\"\"\"\n    BooleanFilter for related objects that will explicitly perform `exclude=True` and `isnull`\n    lookups. The `field_name` argument is required and must be set to the related field on the\n    model.\n    This should be used instead of a default `BooleanFilter` paired `method=`\n    argument to test for the existence of related objects.\n    Example:\n        has_interfaces = RelatedMembershipBooleanFilter(\n            field_name=\"interfaces\",\n            label=\"Has interfaces\",\n        )\n    \"\"\"\ndef __init__(\nself, field_name=None, lookup_expr=\"isnull\", *, label=None, method=None, distinct=False, exclude=True, **kwargs\n):\nif field_name is None:\nraise ValueError(f\"Field name is required for {self.__class__.__name__}\")\nsuper().__init__(\nfield_name=field_name,\nlookup_expr=lookup_expr,\nlabel=label,\nmethod=method,\ndistinct=distinct,\nexclude=exclude,\nwidget=forms.StaticSelect2(choices=forms.BOOLEAN_CHOICES),\n**kwargs,\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.RelationshipFilter","title":"<code>nautobot.apps.filters.RelationshipFilter</code>","text":"<p>             Bases: <code>django_filters.ModelMultipleChoiceFilter</code></p> <p>Filter objects by the presence of associations on a given Relationship.</p> Source code in <code>nautobot/extras/filters/mixins.py</code> <pre><code>class RelationshipFilter(django_filters.ModelMultipleChoiceFilter):\n\"\"\"\n    Filter objects by the presence of associations on a given Relationship.\n    \"\"\"\ndef __init__(self, side, relationship=None, queryset=None, qs=None, *args, **kwargs):\nself.relationship = relationship\nself.qs = qs\nself.side = side\nsuper().__init__(queryset=queryset, *args, **kwargs)\ndef filter(self, qs, value):\nvalue = [entry.id for entry in value]\n# Check if value is empty or a DynamicChoiceField that is empty.\nif not value or \"\" in value:\n# if value is empty we return the entire unmodified queryset\nreturn qs\nelse:\nif self.side == \"source\":\nvalues = RelationshipAssociation.objects.filter(\ndestination_id__in=value,\nsource_type=self.relationship.source_type,\nrelationship=self.relationship,\n).values_list(\"source_id\", flat=True)\nelif self.side == \"destination\":\nvalues = RelationshipAssociation.objects.filter(\nsource_id__in=value,\ndestination_type=self.relationship.destination_type,\nrelationship=self.relationship,\n).values_list(\"destination_id\", flat=True)\nelse:\ndestinations = RelationshipAssociation.objects.filter(\nsource_id__in=value,\ndestination_type=self.relationship.destination_type,\nrelationship=self.relationship,\n).values_list(\"destination_id\", flat=True)\nsources = RelationshipAssociation.objects.filter(\ndestination_id__in=value,\nsource_type=self.relationship.source_type,\nrelationship=self.relationship,\n).values_list(\"source_id\", flat=True)\nvalues = list(destinations) + list(sources)\n# ModelMultipleChoiceFilters always have `distinct=True` so we must make sure that the\n# unioned queryset is also distinct. We also need to conditionally check if the incoming\n# `qs` is distinct in the case that a caller is manually passing in a queryset that may\n# not be distinct. (Ref: https://github.com/nautobot/nautobot/issues/2963)\nunion_qs = self.get_method(self.qs)(Q(**{\"id__in\": values}))\nif qs.query.distinct:\nunion_qs = union_qs.distinct()\nreturn qs &amp; union_qs\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.RelationshipModelFilterSetMixin","title":"<code>nautobot.apps.filters.RelationshipModelFilterSetMixin</code>","text":"<p>             Bases: <code>django_filters.FilterSet</code></p> <p>Filterset for relationships applicable to the parent model.</p> Source code in <code>nautobot/extras/filters/mixins.py</code> <pre><code>class RelationshipModelFilterSetMixin(django_filters.FilterSet):\n\"\"\"\n    Filterset for relationships applicable to the parent model.\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nself.obj_type = ContentType.objects.get_for_model(self._meta.model)\nsuper().__init__(*args, **kwargs)\nself.relationships = []\nself._append_relationships(model=self._meta.model)\ndef _append_relationships(self, model):\n\"\"\"\n        Append form fields for all Relationships assigned to this model.\n        \"\"\"\nquery = Q(source_type=self.obj_type, source_hidden=False) | Q(\ndestination_type=self.obj_type, destination_hidden=False\n)\nrelationships = Relationship.objects.select_related(\"source_type\", \"destination_type\").filter(query)\nfor rel in relationships.iterator():\nif rel.source_type == self.obj_type and not rel.source_hidden:\nself._append_relationships_side([rel], RelationshipSideChoices.SIDE_SOURCE, model)\nif rel.destination_type == self.obj_type and not rel.destination_hidden:\nself._append_relationships_side([rel], RelationshipSideChoices.SIDE_DESTINATION, model)\ndef _append_relationships_side(self, relationships, initial_side, model):\n\"\"\"\n        Helper method to _append_relationships, for processing one \"side\" of the relationships for this model.\n        \"\"\"\nfor relationship in relationships:\nif relationship.symmetric:\nside = RelationshipSideChoices.SIDE_PEER\nelse:\nside = initial_side\npeer_side = RelationshipSideChoices.OPPOSITE[side]\n# If this model is on the \"source\" side of the relationship, then the field will be named\n# \"cr_&lt;relationship_key&gt;__destination\" since it's used to pick the destination object(s).\n# If we're on the \"destination\" side, the field will be \"cr_&lt;relationship_key&gt;__source\".\n# For a symmetric relationship, both sides are \"peer\", so the field will be \"cr_&lt;relationship_key&gt;__peer\"\nfield_name = f\"cr_{relationship.key}__{peer_side}\"\nif field_name in self.relationships:\n# This is a symmetric relationship that we already processed from the opposing \"initial_side\".\n# No need to process it a second time!\ncontinue\nif peer_side == \"source\":\nchoice_model = relationship.source_type.model_class()\nelif peer_side == \"destination\":\nchoice_model = relationship.destination_type.model_class()\nelse:\nchoice_model = model\n# Check for invalid_relationship unit test\nif choice_model:\nself.filters[field_name] = RelationshipFilter(\nrelationship=relationship,\nside=side,\nfield_name=field_name,\nqueryset=choice_model.objects.all(),\nqs=model.objects.all(),\n)\nself.relationships.append(field_name)\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.RoleFilter","title":"<code>nautobot.apps.filters.RoleFilter</code>","text":"<p>             Bases: <code>NaturalKeyOrPKMultipleChoiceFilter</code></p> <p>Limit role choices to the available role choices for self.model</p> Source code in <code>nautobot/extras/filters/mixins.py</code> <pre><code>class RoleFilter(NaturalKeyOrPKMultipleChoiceFilter):\n\"\"\"Limit role choices to the available role choices for self.model\"\"\"\ndef __init__(self, *args, **kwargs):\nkwargs.setdefault(\"field_name\", \"role\")\nkwargs.setdefault(\"queryset\", Role.objects.all())\nkwargs.setdefault(\"to_field_name\", \"name\")\nkwargs.setdefault(\"label\", \"Role (name or ID)\")\nsuper().__init__(*args, **kwargs)\ndef get_queryset(self, request):\nreturn self.queryset.get_for_model(self.model)\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.RoleModelFilterSetMixin","title":"<code>nautobot.apps.filters.RoleModelFilterSetMixin</code>","text":"<p>             Bases: <code>django_filters.FilterSet</code></p> <p>Mixin to add a <code>role</code> filter field to a FilterSet.</p> Source code in <code>nautobot/extras/filters/mixins.py</code> <pre><code>class RoleModelFilterSetMixin(django_filters.FilterSet):\n\"\"\"\n    Mixin to add a `role` filter field to a FilterSet.\n    \"\"\"\nrole = RoleFilter()\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.SearchFilter","title":"<code>nautobot.apps.filters.SearchFilter</code>","text":"<p>             Bases: <code>MappedPredicatesFilterMixin</code>, <code>django_filters.CharFilter</code></p> <p>Provide a search filter for use on filtersets as the <code>q=</code> parameter.</p> <p>See the docstring for <code>nautobot.core.filters.MappedPredicatesFilterMixin</code> for usage.</p> Source code in <code>nautobot/core/filters.py</code> <pre><code>class SearchFilter(MappedPredicatesFilterMixin, django_filters.CharFilter):\n\"\"\"\n    Provide a search filter for use on filtersets as the `q=` parameter.\n    See the docstring for `nautobot.core.filters.MappedPredicatesFilterMixin` for usage.\n    \"\"\"\nlabel = \"Search\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.StatusFilter","title":"<code>nautobot.apps.filters.StatusFilter</code>","text":"<p>             Bases: <code>django_filters.ModelMultipleChoiceFilter</code></p> <p>Filter field used for filtering Status fields.</p> <p>Explicitly sets <code>to_field_name='value'</code> and dynamically sets queryset to retrieve choices for the corresponding model &amp; field name bound to the filterset.</p> Source code in <code>nautobot/extras/filters/mixins.py</code> <pre><code>class StatusFilter(django_filters.ModelMultipleChoiceFilter):\n\"\"\"\n    Filter field used for filtering Status fields.\n    Explicitly sets `to_field_name='value'` and dynamically sets queryset to\n    retrieve choices for the corresponding model &amp; field name bound to the\n    filterset.\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nkwargs[\"to_field_name\"] = \"name\"\nsuper().__init__(*args, **kwargs)\ndef get_queryset(self, request):\nself.queryset = Status.objects.all()\nreturn super().get_queryset(request)\ndef get_filter_predicate(self, value):\n\"\"\"Always use the field's name and the `to_field_name` attribute as predicate.\"\"\"\n# e.g. `status__name`\nto_field_name = self.field.to_field_name\nname = f\"{self.field_name}__{to_field_name}\"\n# Sometimes the incoming value is an instance. This block of logic comes from the base\n# `get_filter_predicate()` and was added here to support this.\ntry:\nreturn {name: getattr(value, to_field_name)}\nexcept (AttributeError, TypeError):\nreturn {name: value}\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.extras.filters.mixins.StatusFilter.get_filter_predicate","title":"<code>get_filter_predicate(value)</code>","text":"<p>Always use the field's name and the <code>to_field_name</code> attribute as predicate.</p> Source code in <code>nautobot/extras/filters/mixins.py</code> <pre><code>def get_filter_predicate(self, value):\n\"\"\"Always use the field's name and the `to_field_name` attribute as predicate.\"\"\"\n# e.g. `status__name`\nto_field_name = self.field.to_field_name\nname = f\"{self.field_name}__{to_field_name}\"\n# Sometimes the incoming value is an instance. This block of logic comes from the base\n# `get_filter_predicate()` and was added here to support this.\ntry:\nreturn {name: getattr(value, to_field_name)}\nexcept (AttributeError, TypeError):\nreturn {name: value}\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.StatusModelFilterSetMixin","title":"<code>nautobot.apps.filters.StatusModelFilterSetMixin</code>","text":"<p>             Bases: <code>django_filters.FilterSet</code></p> <p>Mixin to add a <code>status</code> filter field to a FilterSet.</p> Source code in <code>nautobot/extras/filters/mixins.py</code> <pre><code>class StatusModelFilterSetMixin(django_filters.FilterSet):\n\"\"\"\n    Mixin to add a `status` filter field to a FilterSet.\n    \"\"\"\nstatus = StatusFilter()\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.TagFilter","title":"<code>nautobot.apps.filters.TagFilter</code>","text":"<p>             Bases: <code>NaturalKeyOrPKMultipleChoiceFilter</code></p> <p>Match on one or more assigned tags. If multiple tags are specified (e.g. ?tag=foo&amp;tag=bar), the queryset is filtered to objects matching all tags.</p> Source code in <code>nautobot/core/filters.py</code> <pre><code>class TagFilter(NaturalKeyOrPKMultipleChoiceFilter):\n\"\"\"\n    Match on one or more assigned tags. If multiple tags are specified (e.g. ?tag=foo&amp;tag=bar), the queryset is filtered\n    to objects matching all tags.\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nfrom nautobot.extras.models import Tag  # avoid circular import\nkwargs.setdefault(\"field_name\", \"tags\")\nkwargs.setdefault(\"conjoined\", True)\nkwargs.setdefault(\"label\", \"Tags\")\nkwargs.setdefault(\"queryset\", Tag.objects.all())\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.core.filters.TagFilter.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>nautobot/core/filters.py</code> <pre><code>def __init__(self, *args, **kwargs):\nfrom nautobot.extras.models import Tag  # avoid circular import\nkwargs.setdefault(\"field_name\", \"tags\")\nkwargs.setdefault(\"conjoined\", True)\nkwargs.setdefault(\"label\", \"Tags\")\nkwargs.setdefault(\"queryset\", Tag.objects.all())\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.TenancyModelFilterSetMixin","title":"<code>nautobot.apps.filters.TenancyModelFilterSetMixin</code>","text":"<p>             Bases: <code>django_filters.FilterSet</code></p> <p>An inheritable FilterSet for models which support Tenant assignment.</p> Source code in <code>nautobot/tenancy/filters/mixins.py</code> <pre><code>class TenancyModelFilterSetMixin(django_filters.FilterSet):\n\"\"\"\n    An inheritable FilterSet for models which support Tenant assignment.\n    \"\"\"\ntenant_group = TreeNodeMultipleChoiceFilter(\nqueryset=TenantGroup.objects.all(),\nfield_name=\"tenant__tenant_group\",\nto_field_name=\"name\",\nlabel=\"Tenant Group (name or ID)\",\n)\ntenant_id = django_filters.ModelMultipleChoiceFilter(\nqueryset=Tenant.objects.all(),\nlabel='Tenant (ID) (deprecated, use \"tenant\" filter instead)',\n)\ntenant = NaturalKeyOrPKMultipleChoiceFilter(\nqueryset=Tenant.objects.all(),\nto_field_name=\"name\",\nlabel=\"Tenant (name or ID)\",\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.TreeNodeMultipleChoiceFilter","title":"<code>nautobot.apps.filters.TreeNodeMultipleChoiceFilter</code>","text":"<p>             Bases: <code>NaturalKeyOrPKMultipleChoiceFilter</code></p> <p>Filter that matches on the given model(s) (identified by name and/or pk) as well as their tree descendants.</p> <p>For example, if we have:</p> <pre><code>Location \"Earth\"\n  Location \"USA\"\n    Location \"GA\" &lt;- Location \"Athens\"\n    Location \"NC\" &lt;- Location \"Durham\"\n</code></pre> <p>a NaturalKeyOrPKMultipleChoiceFilter on Location for {\"parent\": \"USA\"} would only return \"GA\" and \"NC\" since that is the only two locations that have an immediate parent \"USA\" but a TreeNodeMultipleChoiceFilter on Location for {\"parent\": \"USA\"} would match both \"Athens\" and \"Durham\" in addition to \"GA\" and \"NC\".</p> Source code in <code>nautobot/core/filters.py</code> <pre><code>class TreeNodeMultipleChoiceFilter(NaturalKeyOrPKMultipleChoiceFilter):\n\"\"\"\n    Filter that matches on the given model(s) (identified by name and/or pk) _as well as their tree descendants._\n    For example, if we have:\n        Location \"Earth\"\n          Location \"USA\"\n            Location \"GA\" &lt;- Location \"Athens\"\n            Location \"NC\" &lt;- Location \"Durham\"\n    a NaturalKeyOrPKMultipleChoiceFilter on Location for {\"parent\": \"USA\"} would only return \"GA\" and \"NC\"\n    since that is the only two locations that have an immediate parent \"USA\"\n    but a TreeNodeMultipleChoiceFilter on Location for {\"parent\": \"USA\"}\n    would match both \"Athens\" and \"Durham\" in addition to \"GA\" and \"NC\".\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nkwargs.pop(\"lookup_expr\", None)  # Disallow overloading of `lookup_expr`.\nsuper().__init__(*args, **kwargs)\ndef generate_query(self, value, qs=None, **kwargs):\n\"\"\"\n        Given a filter value, return a `Q` object that accounts for nested tree node descendants.\n        \"\"\"\nif value:\n# django-tree-queries\nvalue = [node.descendants(include_self=True) if not isinstance(node, str) else node for node in value]\n# This new_value is going to be a list of querysets that needs to be flattened.\nvalue = list(data_utils.flatten_iterable(value))\n# Construct a list of filter predicates that will be used to generate the Q object.\npredicates = []\nfor obj in value:\n# Get the exact instance by PK as we are nested from the original query,\n#   or just pass the object through, commonly the null case.\nval = getattr(obj, \"pk\", obj)\nif val == self.null_value:\nval = None\npredicates.append(self.get_filter_predicate(val))\n# Construct a nested OR query from the list of filter predicates derived from the flattened\n# listed of descendant objects.\nquery = models.Q()\nfor predicate in predicates:\nquery |= models.Q(**predicate)\nreturn query\ndef filter(self, qs, value):\nif value in EMPTY_VALUES:\nreturn qs\n# Fetch the generated Q object and filter the incoming qs with it before passing it along.\nquery = self.generate_query(value)\nreturn self.get_method(qs)(query)\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.core.filters.TreeNodeMultipleChoiceFilter.generate_query","title":"<code>generate_query(value, qs=None, **kwargs)</code>","text":"<p>Given a filter value, return a <code>Q</code> object that accounts for nested tree node descendants.</p> Source code in <code>nautobot/core/filters.py</code> <pre><code>def generate_query(self, value, qs=None, **kwargs):\n\"\"\"\n    Given a filter value, return a `Q` object that accounts for nested tree node descendants.\n    \"\"\"\nif value:\n# django-tree-queries\nvalue = [node.descendants(include_self=True) if not isinstance(node, str) else node for node in value]\n# This new_value is going to be a list of querysets that needs to be flattened.\nvalue = list(data_utils.flatten_iterable(value))\n# Construct a list of filter predicates that will be used to generate the Q object.\npredicates = []\nfor obj in value:\n# Get the exact instance by PK as we are nested from the original query,\n#   or just pass the object through, commonly the null case.\nval = getattr(obj, \"pk\", obj)\nif val == self.null_value:\nval = None\npredicates.append(self.get_filter_predicate(val))\n# Construct a nested OR query from the list of filter predicates derived from the flattened\n# listed of descendant objects.\nquery = models.Q()\nfor predicate in predicates:\nquery |= models.Q(**predicate)\nreturn query\n</code></pre>"},{"location":"code-reference/nautobot/apps/filters.html#nautobot.apps.filters.multivalue_field_factory","title":"<code>nautobot.apps.filters.multivalue_field_factory(field_class, widget=django_forms.SelectMultiple)</code>","text":"<p>Given a form field class, return a subclass capable of accepting multiple values. This allows us to OR on multiple filter values while maintaining the field's built-in validation. Example: GET /api/dcim/devices/?name=foo&amp;name=bar</p> Source code in <code>nautobot/core/filters.py</code> <pre><code>def multivalue_field_factory(field_class, widget=django_forms.SelectMultiple):\n\"\"\"\n    Given a form field class, return a subclass capable of accepting multiple values. This allows us to OR on multiple\n    filter values while maintaining the field's built-in validation. Example: GET /api/dcim/devices/?name=foo&amp;name=bar\n    \"\"\"\ndef to_python(self, value):\nif not value:\nreturn []\n# Make it a list if it's a string.\nif isinstance(value, (str, int)):\nvalue = [value]\nreturn [\n# Only append non-empty values (this avoids e.g. trying to cast '' as an integer)\nfield_class.to_python(self, v)\nfor v in value\nif v\n]\ndef validate(self, value):\nfor v in value:\nfield_class.validate(self, v)\ndef run_validators(self, value):\nfor v in value:\nfield_class.run_validators(self, v)\nreturn type(\nf\"MultiValue{field_class.__name__}\",\n(field_class,),\n{\n\"run_validators\": run_validators,\n\"to_python\": to_python,\n\"validate\": validate,\n\"widget\": widget,\n},\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html","title":"nautobot.apps.forms","text":""},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms","title":"<code>nautobot.apps.forms</code>","text":"<p>Forms and fields for apps to use.</p>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.APISelect","title":"<code>nautobot.apps.forms.APISelect</code>","text":"<p>             Bases: <code>SelectWithDisabled</code></p> <p>A select widget populated via an API call</p> <p>Parameters:</p> Name Type Description Default <code>api_url</code> <code>str</code> <p>API endpoint URL. Required if not set automatically by the parent field.</p> <code>None</code> <code>api_version</code> <code>str</code> <p>API version.</p> <code>None</code> Source code in <code>nautobot/core/forms/widgets.py</code> <pre><code>class APISelect(SelectWithDisabled):\n\"\"\"\n    A select widget populated via an API call\n    Args:\n        api_url (str): API endpoint URL. Required if not set automatically by the parent field.\n        api_version (str): API version.\n    \"\"\"\ndef __init__(self, api_url=None, full=False, api_version=None, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.attrs[\"class\"] = \"nautobot-select2-api\"\nif api_version:\n# Set Request Accept Header api-version e.g Accept: application/json; version=1.2\nself.attrs[\"data-api-version\"] = api_version\nif api_url:\n# Prefix the URL w/ the script prefix (e.g. `/nautobot`)\nself.attrs[\"data-url\"] = urljoin(get_script_prefix(), api_url.lstrip(\"/\"))\ndef add_query_param(self, name, value):\n\"\"\"\n        Add details for an additional query param in the form of a data-* JSON-encoded list attribute.\n        :param name: The name of the query param\n        :param value: The value of the query param\n        \"\"\"\nkey = f\"data-query-param-{name}\"\nvalues = json.loads(self.attrs.get(key, \"[]\"))\nif isinstance(value, (list, tuple)):\nvalues.extend([str(v) for v in value])\nelse:\nvalues.append(str(value))\nself.attrs[key] = json.dumps(values, ensure_ascii=False)\ndef get_context(self, name, value, attrs):\n# This adds null options to DynamicModelMultipleChoiceField selected choices\n# example &lt;select ..&gt;\n#           &lt;option .. selected value=\"null\"&gt;None&lt;/option&gt;\n#           &lt;option .. selected value=\"1234-455...\"&gt;Rack 001&lt;/option&gt;\n#           &lt;option .. value=\"1234-455...\"&gt;Rack 002&lt;/option&gt;\n#          &lt;/select&gt;\n# Prepend null choice to self.choices if\n# 1. form field allow null_option e.g. DynamicModelMultipleChoiceField(..., null_option=\"None\"..)\n# 2. if null is part of url query parameter for name(field_name) i.e. http://.../?rack_id=null\n# 3. if both value and choices are iterable\nif (\nself.attrs.get(\"data-null-option\")\nand isinstance(value, (list, tuple))\nand \"null\" in value\nand isinstance(self.choices, Iterable)\n):\nclass ModelChoiceIteratorWithNullOption(ModelChoiceIterator):\ndef __init__(self, *args, **kwargs):\nself.null_options = kwargs.pop(\"null_option\", None)\nsuper().__init__(*args, **kwargs)\ndef __iter__(self):\n# ModelChoiceIterator.__iter__() yields a tuple of (value, label)\n# using this approach first yield a tuple of (null(value), null_option(label))\nyield \"null\", self.null_options\nfor item in super().__iter__():\nyield item\nnull_option = self.attrs.get(\"data-null-option\")\nself.choices = ModelChoiceIteratorWithNullOption(field=self.choices.field, null_option=null_option)\nreturn super().get_context(name, value, attrs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.core.forms.widgets.APISelect.add_query_param","title":"<code>add_query_param(name, value)</code>","text":"<p>Add details for an additional query param in the form of a data-* JSON-encoded list attribute.</p> <p>:param name: The name of the query param :param value: The value of the query param</p> Source code in <code>nautobot/core/forms/widgets.py</code> <pre><code>def add_query_param(self, name, value):\n\"\"\"\n    Add details for an additional query param in the form of a data-* JSON-encoded list attribute.\n    :param name: The name of the query param\n    :param value: The value of the query param\n    \"\"\"\nkey = f\"data-query-param-{name}\"\nvalues = json.loads(self.attrs.get(key, \"[]\"))\nif isinstance(value, (list, tuple)):\nvalues.extend([str(v) for v in value])\nelse:\nvalues.append(str(value))\nself.attrs[key] = json.dumps(values, ensure_ascii=False)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.AddressFieldMixin","title":"<code>nautobot.apps.forms.AddressFieldMixin</code>","text":"<p>             Bases: <code>forms.ModelForm</code></p> <p>ModelForm mixin for IPAddress based models.</p> Source code in <code>nautobot/core/forms/forms.py</code> <pre><code>class AddressFieldMixin(forms.ModelForm):\n\"\"\"\n    ModelForm mixin for IPAddress based models.\n    \"\"\"\naddress = formfields.IPNetworkFormField()\ndef __init__(self, *args, **kwargs):\ninstance = kwargs.get(\"instance\")\ninitial = kwargs.get(\"initial\", {}).copy()\n# If initial already has an `address`, we want to use that `address` as it was passed into\n# the form. If we're editing an object with a `address` field, we need to patch initial\n# to include `address` because it is a computed field.\nif \"address\" not in initial and instance is not None:\ninitial[\"address\"] = instance.address\nkwargs[\"initial\"] = initial\nsuper().__init__(*args, **kwargs)\ndef clean(self):\nsuper().clean()\n# Need to set instance attribute for `address` to run proper validation on Model.clean()\nself.instance.address = self.cleaned_data.get(\"address\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.BootstrapMixin","title":"<code>nautobot.apps.forms.BootstrapMixin</code>","text":"<p>             Bases: <code>forms.BaseForm</code></p> <p>Add the base Bootstrap CSS classes to form elements.</p> Source code in <code>nautobot/core/forms/forms.py</code> <pre><code>class BootstrapMixin(forms.BaseForm):\n\"\"\"\n    Add the base Bootstrap CSS classes to form elements.\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nexempt_widgets = [\nforms.CheckboxInput,\nforms.ClearableFileInput,\nforms.FileInput,\nforms.RadioSelect,\n]\nfor field in self.fields.values():\nif field.widget.__class__ not in exempt_widgets:\ncss = field.widget.attrs.get(\"class\", \"\")\nfield.widget.attrs[\"class\"] = \" \".join([css, \"form-control\"]).strip()\nif field.required and not isinstance(field.widget, forms.FileInput):\nfield.widget.attrs[\"required\"] = \"required\"\nif \"placeholder\" not in field.widget.attrs:\nfield.widget.attrs[\"placeholder\"] = field.label\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.BulkEditForm","title":"<code>nautobot.apps.forms.BulkEditForm</code>","text":"<p>             Bases: <code>forms.Form</code></p> <p>Base form for editing multiple objects in bulk.</p> <p>Note that for models supporting custom fields and relationships, nautobot.extras.forms.NautobotBulkEditForm is a more powerful subclass and should be used instead of directly inheriting from this class.</p> Source code in <code>nautobot/core/forms/forms.py</code> <pre><code>class BulkEditForm(forms.Form):\n\"\"\"\n    Base form for editing multiple objects in bulk.\n    Note that for models supporting custom fields and relationships, nautobot.extras.forms.NautobotBulkEditForm is\n    a more powerful subclass and should be used instead of directly inheriting from this class.\n    \"\"\"\ndef __init__(self, model, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.model = model\nself.nullable_fields = []\n# Copy any nullable fields defined in Meta\nif hasattr(self.Meta, \"nullable_fields\"):\nself.nullable_fields = self.Meta.nullable_fields\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.BulkEditNullBooleanSelect","title":"<code>nautobot.apps.forms.BulkEditNullBooleanSelect</code>","text":"<p>             Bases: <code>forms.NullBooleanSelect</code></p> <p>A Select widget for NullBooleanFields</p> Source code in <code>nautobot/core/forms/widgets.py</code> <pre><code>class BulkEditNullBooleanSelect(forms.NullBooleanSelect):\n\"\"\"\n    A Select widget for NullBooleanFields\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\n# Override the built-in choice labels\nself.choices = (\n(\"1\", \"---------\"),\n(\"2\", \"Yes\"),\n(\"3\", \"No\"),\n)\nself.attrs[\"class\"] = \"nautobot-select2-static\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.BulkRenameForm","title":"<code>nautobot.apps.forms.BulkRenameForm</code>","text":"<p>             Bases: <code>forms.Form</code></p> <p>An extendable form to be used for renaming objects in bulk.</p> Source code in <code>nautobot/core/forms/forms.py</code> <pre><code>class BulkRenameForm(forms.Form):\n\"\"\"\n    An extendable form to be used for renaming objects in bulk.\n    \"\"\"\nfind = forms.CharField()\nreplace = forms.CharField()\nuse_regex = forms.BooleanField(required=False, initial=True, label=\"Use regular expressions\")\ndef clean(self):\nsuper().clean()\n# Validate regular expression in \"find\" field\nif self.cleaned_data[\"use_regex\"]:\ntry:\nre.compile(self.cleaned_data[\"find\"])\nexcept re.error:\nraise forms.ValidationError({\"find\": \"Invalid regular expression\"})\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.CSVChoiceField","title":"<code>nautobot.apps.forms.CSVChoiceField</code>","text":"<p>             Bases: <code>django_forms.ChoiceField</code></p> <p>Invert the provided set of choices to take the human-friendly label as input, and return the database value.</p> <p>Despite the name, this is no longer used in CSV imports since 2.0, but is used in JSON/YAML import of DeviceTypes.</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>class CSVChoiceField(django_forms.ChoiceField):\n\"\"\"\n    Invert the provided set of choices to take the human-friendly label as input, and return the database value.\n    Despite the name, this is no longer used in CSV imports since 2.0, but *is* used in JSON/YAML import of DeviceTypes.\n    \"\"\"\nSTATIC_CHOICES = True\ndef __init__(self, *, choices=(), **kwargs):\nsuper().__init__(choices=choices, **kwargs)\nself.choices = core_choices.unpack_grouped_choices(choices)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.CSVContentTypeField","title":"<code>nautobot.apps.forms.CSVContentTypeField</code>","text":"<p>             Bases: <code>CSVModelChoiceField</code></p> <p>Reference a ContentType in the form <code>{app_label}.{model}</code>.</p> <p>Note: class name is misleading; this field is also used in numerous FilterSets where it has nothing to do with CSV.</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>class CSVContentTypeField(CSVModelChoiceField):\n\"\"\"\n    Reference a ContentType in the form `{app_label}.{model}`.\n    Note: class name is misleading; this field is also used in numerous FilterSets where it has nothing to do with CSV.\n    \"\"\"\nSTATIC_CHOICES = True\ndef prepare_value(self, value):\n\"\"\"\n        Allow this field to support `{app_label}.{model}` style, null values, or PK-based lookups\n        depending on how the field is used.\n        \"\"\"\nif value is None:\nreturn \"\"\n# Only pass through strings if they aren't numeric. Otherwise cast to `int`.\nif isinstance(value, str):\nif not value.isdigit():\nreturn value\nelse:\nvalue = int(value)\n# Integers are PKs\nif isinstance(value, int):\nvalue = self.queryset.get(pk=value)\nreturn f\"{value.app_label}.{value.model}\"\ndef to_python(self, value):\nvalue = self.prepare_value(value)\ntry:\napp_label, model = value.split(\".\")\nexcept ValueError:\nraise ValidationError('Object type must be specified as \"&lt;app_label&gt;.&lt;model&gt;\"')\ntry:\nreturn self.queryset.get(app_label=app_label, model=model)\nexcept ObjectDoesNotExist:\nraise ValidationError(\"Invalid object type\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.core.forms.fields.CSVContentTypeField.prepare_value","title":"<code>prepare_value(value)</code>","text":"<p>Allow this field to support <code>{app_label}.{model}</code> style, null values, or PK-based lookups depending on how the field is used.</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>def prepare_value(self, value):\n\"\"\"\n    Allow this field to support `{app_label}.{model}` style, null values, or PK-based lookups\n    depending on how the field is used.\n    \"\"\"\nif value is None:\nreturn \"\"\n# Only pass through strings if they aren't numeric. Otherwise cast to `int`.\nif isinstance(value, str):\nif not value.isdigit():\nreturn value\nelse:\nvalue = int(value)\n# Integers are PKs\nif isinstance(value, int):\nvalue = self.queryset.get(pk=value)\nreturn f\"{value.app_label}.{value.model}\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.CSVDataField","title":"<code>nautobot.apps.forms.CSVDataField</code>","text":"<p>             Bases: <code>django_forms.CharField</code></p> <p>A CharField (rendered as a Textarea) which expects CSV-formatted data.</p> <p>Initial value is a list of headers corresponding to the required fields for the given serializer class.</p> <p>This no longer actually does any CSV parsing or validation on its own, as that is now handled by the NautobotCSVParser class and the REST API serializers.</p> <p>Parameters:</p> Name Type Description Default <code>required_field_names</code> <code>list[str]</code> <p>List of field names representing required fields for this import.</p> <code>''</code> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>class CSVDataField(django_forms.CharField):\n\"\"\"\n    A CharField (rendered as a Textarea) which expects CSV-formatted data.\n    Initial value is a list of headers corresponding to the required fields for the given serializer class.\n    This no longer actually does any CSV parsing or validation on its own,\n    as that is now handled by the NautobotCSVParser class and the REST API serializers.\n    Args:\n        required_field_names (list[str]): List of field names representing required fields for this import.\n    \"\"\"\nwidget = django_forms.Textarea\ndef __init__(self, *args, required_field_names=\"\", **kwargs):\nself.required_field_names = required_field_names\nkwargs.setdefault(\"required\", False)\nsuper().__init__(*args, **kwargs)\nself.strip = False\nif not self.label:\nself.label = \"\"\nif not self.initial:\nself.initial = \",\".join(self.required_field_names) + \"\\n\"\nif not self.help_text:\nself.help_text = (\n\"Enter the list of column headers followed by one line per record to be imported, using \"\n\"commas to separate values. Multi-line data and values containing commas may be wrapped \"\n\"in double quotes.\"\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.CSVFileField","title":"<code>nautobot.apps.forms.CSVFileField</code>","text":"<p>             Bases: <code>django_forms.FileField</code></p> <p>A FileField (rendered as a ClearableFileInput) which expects a file containing CSV-formatted data.</p> <p>This no longer actually does any CSV parsing or validation on its own, as that is now handled by the NautobotCSVParser class and the REST API serializers.</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>class CSVFileField(django_forms.FileField):\n\"\"\"\n    A FileField (rendered as a ClearableFileInput) which expects a file containing CSV-formatted data.\n    This no longer actually does any CSV parsing or validation on its own,\n    as that is now handled by the NautobotCSVParser class and the REST API serializers.\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nkwargs.setdefault(\"required\", False)\nsuper().__init__(*args, **kwargs)\nif not self.label:\nself.label = \"CSV File\"\nif not self.help_text:\nself.help_text = (\n\"Select a CSV file to upload. It should contain column headers in the first row and use commas \"\n\"to separate values. Multi-line data and values containing commas may be wrapped \"\n\"in double quotes.\"\n)\ndef to_python(self, file):\n\"\"\"For parity with CSVDataField, this returns the CSV text rather than an UploadedFile object.\"\"\"\nif file is None:\nreturn None\nfile = super().to_python(file)\nreturn file.read().decode(\"utf-8-sig\").strip()\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.core.forms.fields.CSVFileField.to_python","title":"<code>to_python(file)</code>","text":"<p>For parity with CSVDataField, this returns the CSV text rather than an UploadedFile object.</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>def to_python(self, file):\n\"\"\"For parity with CSVDataField, this returns the CSV text rather than an UploadedFile object.\"\"\"\nif file is None:\nreturn None\nfile = super().to_python(file)\nreturn file.read().decode(\"utf-8-sig\").strip()\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.CSVModelChoiceField","title":"<code>nautobot.apps.forms.CSVModelChoiceField</code>","text":"<p>             Bases: <code>django_forms.ModelChoiceField</code></p> <p>Provides additional validation for model choices entered as CSV data.</p> <p>Note: class name is misleading; the subclass CSVContentTypeField (below) is also used in FilterSets, where it has nothing to do with CSV data.</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>class CSVModelChoiceField(django_forms.ModelChoiceField):\n\"\"\"\n    Provides additional validation for model choices entered as CSV data.\n    Note: class name is misleading; the subclass CSVContentTypeField (below) is also used in FilterSets, where it has\n    nothing to do with CSV data.\n    \"\"\"\ndefault_error_messages = {\n\"invalid_choice\": \"Object not found.\",\n}\ndef to_python(self, value):\ntry:\nreturn super().to_python(value)\nexcept MultipleObjectsReturned:\nraise ValidationError(f'\"{value}\" is not a unique value for this field; multiple objects were found')\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.CSVModelForm","title":"<code>nautobot.apps.forms.CSVModelForm</code>","text":"<p>             Bases: <code>forms.ModelForm</code></p> <p>ModelForm used for the import of objects.</p> <p>Note: the name is misleading as since 2.0 this is no longer used for CSV imports; however it is still used for JSON/YAML imports of DeviceTypes and their component templates.</p> Source code in <code>nautobot/core/forms/forms.py</code> <pre><code>class CSVModelForm(forms.ModelForm):\n\"\"\"\n    ModelForm used for the import of objects.\n    Note: the name is misleading as since 2.0 this is no longer used for CSV imports; however it *is* still used for\n    JSON/YAML imports of DeviceTypes and their component templates.\n    \"\"\"\ndef __init__(self, *args, headers=None, **kwargs):\nsuper().__init__(*args, **kwargs)\n# Modify the model form to accommodate any customized to_field_name properties\nif headers:\nfor field, to_field in headers.items():\nif to_field is not None:\nself.fields[field].to_field_name = to_field\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.CSVMultipleChoiceField","title":"<code>nautobot.apps.forms.CSVMultipleChoiceField</code>","text":"<p>             Bases: <code>CSVChoiceField</code></p> <p>A version of CSVChoiceField that supports and emits a list of choice values.</p> <p>As with CSVChoiceField, the name is misleading, as this is no longer used for CSV imports, but is used for JSON/YAML import of DeviceTypes still.</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>class CSVMultipleChoiceField(CSVChoiceField):\n\"\"\"\n    A version of CSVChoiceField that supports and emits a list of choice values.\n    As with CSVChoiceField, the name is misleading, as this is no longer used for CSV imports, but is used for\n    JSON/YAML import of DeviceTypes still.\n    \"\"\"\ndef to_python(self, value):\n\"\"\"Return a list of strings.\"\"\"\nif value in self.empty_values:\nreturn \"\"\nreturn [v.strip() for v in str(value).split(\",\")]\ndef validate(self, value):\n\"\"\"Validate that each of the input values is in self.choices.\"\"\"\nfor v in value:\nsuper().validate(v)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.core.forms.fields.CSVMultipleChoiceField.to_python","title":"<code>to_python(value)</code>","text":"<p>Return a list of strings.</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>def to_python(self, value):\n\"\"\"Return a list of strings.\"\"\"\nif value in self.empty_values:\nreturn \"\"\nreturn [v.strip() for v in str(value).split(\",\")]\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.core.forms.fields.CSVMultipleChoiceField.validate","title":"<code>validate(value)</code>","text":"<p>Validate that each of the input values is in self.choices.</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>def validate(self, value):\n\"\"\"Validate that each of the input values is in self.choices.\"\"\"\nfor v in value:\nsuper().validate(v)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.CSVMultipleContentTypeField","title":"<code>nautobot.apps.forms.CSVMultipleContentTypeField</code>","text":"<p>             Bases: <code>MultipleContentTypeField</code></p> <p>Reference a list of <code>ContentType</code> objects in the form `{app_label}.{model}'.</p> <p>Note: This is unused in Nautobot core at this time, but some apps (data-validation-engine) use this for non-CSV purposes, similar to CSVContentTypeField above.</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>class CSVMultipleContentTypeField(MultipleContentTypeField):\n\"\"\"\n    Reference a list of `ContentType` objects in the form `{app_label}.{model}'.\n    Note: This is unused in Nautobot core at this time, but some apps (data-validation-engine) use this for non-CSV\n    purposes, similar to CSVContentTypeField above.\n    \"\"\"\ndef prepare_value(self, value):\n\"\"\"Parse a comma-separated string of model names into a list of PKs.\"\"\"\n# \"\".split(\",\") yields [\"\"] rather than [], which we don't want!\nif isinstance(value, str) and value:\nvalue = value.split(\",\")\n# For each model name, retrieve the model object and extract its\n# content-type PK.\npk_list = []\nif isinstance(value, (list, tuple)):\nfor v in value:\ntry:\nmodel = apps.get_model(v)\nexcept (ValueError, LookupError):\nraise ValidationError(\nself.error_messages[\"invalid_choice\"],\ncode=\"invalid_choice\",\nparams={\"value\": v},\n)\nct = self.queryset.model.objects.get_for_model(model)\npk_list.append(ct.pk)\nreturn super().prepare_value(pk_list)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.core.forms.fields.CSVMultipleContentTypeField.prepare_value","title":"<code>prepare_value(value)</code>","text":"<p>Parse a comma-separated string of model names into a list of PKs.</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>def prepare_value(self, value):\n\"\"\"Parse a comma-separated string of model names into a list of PKs.\"\"\"\n# \"\".split(\",\") yields [\"\"] rather than [], which we don't want!\nif isinstance(value, str) and value:\nvalue = value.split(\",\")\n# For each model name, retrieve the model object and extract its\n# content-type PK.\npk_list = []\nif isinstance(value, (list, tuple)):\nfor v in value:\ntry:\nmodel = apps.get_model(v)\nexcept (ValueError, LookupError):\nraise ValidationError(\nself.error_messages[\"invalid_choice\"],\ncode=\"invalid_choice\",\nparams={\"value\": v},\n)\nct = self.queryset.model.objects.get_for_model(model)\npk_list.append(ct.pk)\nreturn super().prepare_value(pk_list)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.ColorSelect","title":"<code>nautobot.apps.forms.ColorSelect</code>","text":"<p>             Bases: <code>forms.Select</code></p> <p>Extends the built-in Select widget to colorize each . Source code in <code>nautobot/core/forms/widgets.py</code> <pre><code>class ColorSelect(forms.Select):\n\"\"\"\n    Extends the built-in Select widget to colorize each &lt;option&gt;.\n    \"\"\"\noption_template_name = \"widgets/colorselect_option.html\"\ndef __init__(self, *args, **kwargs):\nkwargs[\"choices\"] = utils.add_blank_choice(choices.ColorChoices)\nsuper().__init__(*args, **kwargs)\nself.attrs[\"class\"] = \"nautobot-select2-color-picker\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.CommentField","title":"<code>nautobot.apps.forms.CommentField</code>","text":"<p>             Bases: <code>django_forms.CharField</code></p> <p>A textarea with support for Markdown rendering. Exists mostly just to add a standard help_text.</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>class CommentField(django_forms.CharField):\n\"\"\"\n    A textarea with support for Markdown rendering. Exists mostly just to add a standard help_text.\n    \"\"\"\nwidget = django_forms.Textarea\ndefault_label = \"\"\n# TODO: Port Markdown cheat sheet to internal documentation\ndefault_helptext = (\n'&lt;i class=\"mdi mdi-information-outline\"&gt;&lt;/i&gt; '\n'&lt;a href=\"https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\" target=\"_blank\"&gt;'\n\"Markdown&lt;/a&gt; syntax is supported\"\n)\ndef __init__(self, *args, **kwargs):\nrequired = kwargs.pop(\"required\", False)\nlabel = kwargs.pop(\"label\", self.default_label)\nhelp_text = kwargs.pop(\"help_text\", self.default_helptext)\nsuper().__init__(required=required, label=label, help_text=help_text, *args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.ConfirmationForm","title":"<code>nautobot.apps.forms.ConfirmationForm</code>","text":"<p>             Bases: <code>BootstrapMixin</code>, <code>ReturnURLForm</code></p> <p>A generic confirmation form. The form is not valid unless the confirm field is checked.</p> Source code in <code>nautobot/core/forms/forms.py</code> <pre><code>class ConfirmationForm(BootstrapMixin, ReturnURLForm):\n\"\"\"\n    A generic confirmation form. The form is not valid unless the confirm field is checked.\n    \"\"\"\nconfirm = forms.BooleanField(required=True, widget=forms.HiddenInput(), initial=True)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.ContentTypeSelect","title":"<code>nautobot.apps.forms.ContentTypeSelect</code>","text":"<p>             Bases: <code>StaticSelect2</code></p> <p>Appends an <code>api-value</code> attribute equal to the slugified model name for each ContentType. For example:     console server port This attribute can be used to reference the relevant API endpoint for a particular ContentType.</p> Source code in <code>nautobot/core/forms/widgets.py</code> <pre><code>class ContentTypeSelect(StaticSelect2):\n\"\"\"\n    Appends an `api-value` attribute equal to the slugified model name for each ContentType. For example:\n        &lt;option value=\"37\" api-value=\"console-server-port\"&gt;console server port&lt;/option&gt;\n    This attribute can be used to reference the relevant API endpoint for a particular ContentType.\n    \"\"\"\noption_template_name = \"widgets/select_contenttype.html\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.CustomFieldModelCSVForm","title":"<code>nautobot.apps.forms.CustomFieldModelCSVForm</code>","text":"<p>             Bases: <code>CSVModelForm</code>, <code>CustomFieldModelFormMixin</code></p> <p>Base class for CSV/JSON/YAML import of models that support custom fields.</p> <p>TODO: The class name is a misnomer; as of 2.0 this class is not used for any CSV imports, as that's now handled by the REST API. However it is still used when importing component-templates as part of a JSON/YAML DeviceType import.</p> Source code in <code>nautobot/extras/forms/forms.py</code> <pre><code>class CustomFieldModelCSVForm(CSVModelForm, CustomFieldModelFormMixin):\n\"\"\"\n    Base class for CSV/JSON/YAML import of models that support custom fields.\n    TODO: The class name is a misnomer; as of 2.0 this class is **not** used for any CSV imports,\n    as that's now handled by the REST API. However it is still used when importing component-templates as\n    part of a JSON/YAML DeviceType import.\n    \"\"\"\ndef _append_customfield_fields(self):\n# Append form fields\nfor cf in CustomField.objects.filter(content_types=self.obj_type):\nfield_name = cf.add_prefix_to_cf_key()\nself.fields[field_name] = cf.to_form_field(for_csv_import=True)\n# Annotate the field in the list of CustomField form fields\nself.custom_fields.append(field_name)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.CustomFieldModelFormMixin","title":"<code>nautobot.apps.forms.CustomFieldModelFormMixin</code>","text":"<p>             Bases: <code>forms.ModelForm</code></p> Source code in <code>nautobot/extras/forms/mixins.py</code> <pre><code>class CustomFieldModelFormMixin(forms.ModelForm):\ndef __init__(self, *args, **kwargs):\nself.obj_type = ContentType.objects.get_for_model(self._meta.model)\nself.custom_fields = []\nsuper().__init__(*args, **kwargs)\nself._append_customfield_fields()\ntry:\nif self.Meta.fields == \"__all__\":\n# Above we accounted for all cf_* data, so can safely remove _custom_field_data.\nself.fields.pop(\"_custom_field_data\", None)\nexcept AttributeError:\npass\ndef _append_customfield_fields(self):\n\"\"\"\n        Append form fields for all CustomFields assigned to this model.\n        \"\"\"\n# Append form fields; assign initial values if modifying and existing object\nfor cf in CustomField.objects.filter(content_types=self.obj_type):\nfield_name = cf.add_prefix_to_cf_key()\nif self.instance.present_in_database:\nself.fields[field_name] = cf.to_form_field(set_initial=False)\nself.fields[field_name].initial = self.instance.cf.get(cf.key)\nelse:\nself.fields[field_name] = cf.to_form_field()\n# Annotate the field in the list of CustomField form fields\nself.custom_fields.append(field_name)\ndef clean(self):\n# Save custom field data on instance\nfor field_name in self.custom_fields:\nself.instance.cf[remove_prefix_from_cf_key(field_name)] = self.cleaned_data.get(field_name)\nreturn super().clean()\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.DatePicker","title":"<code>nautobot.apps.forms.DatePicker</code>","text":"<p>             Bases: <code>forms.TextInput</code></p> <p>Date picker using Flatpickr.</p> Source code in <code>nautobot/core/forms/widgets.py</code> <pre><code>class DatePicker(forms.TextInput):\n\"\"\"\n    Date picker using Flatpickr.\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.attrs[\"class\"] = \"date-picker\"\nself.attrs[\"placeholder\"] = \"YYYY-MM-DD\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.DateTimePicker","title":"<code>nautobot.apps.forms.DateTimePicker</code>","text":"<p>             Bases: <code>forms.TextInput</code></p> <p>DateTime picker using Flatpickr.</p> Source code in <code>nautobot/core/forms/widgets.py</code> <pre><code>class DateTimePicker(forms.TextInput):\n\"\"\"\n    DateTime picker using Flatpickr.\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.attrs[\"class\"] = \"datetime-picker\"\nself.attrs[\"placeholder\"] = \"YYYY-MM-DD hh:mm:ss\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.DynamicFilterForm","title":"<code>nautobot.apps.forms.DynamicFilterForm</code>","text":"<p>             Bases: <code>BootstrapMixin</code>, <code>forms.Form</code></p> <p>Form for dynamically inputting filter values for an object list.</p> Source code in <code>nautobot/core/forms/forms.py</code> <pre><code>class DynamicFilterForm(BootstrapMixin, forms.Form):\n\"\"\"\n    Form for dynamically inputting filter values for an object list.\n    \"\"\"\nlookup_field = forms.ChoiceField(\nchoices=[],\nrequired=False,\nlabel=\"Field\",\n)\nlookup_type = forms.ChoiceField(\nchoices=[],\nrequired=False,\n)\nlookup_value = forms.CharField(\nrequired=False,\nlabel=\"Value\",\n)\ndef __init__(self, *args, filterset=None, **kwargs):\nsuper().__init__(*args, **kwargs)\nfrom nautobot.core.forms import add_blank_choice  # Avoid circular import\n# cls.model is set at `dynamic_formset_factory()`\nself.filterset = filterset or getattr(self, \"filterset\", None)\n# Raise exception if `cls.filterset` not set and `filterset` not passed\nif self.filterset is None:\nraise AttributeError(\"'DynamicFilterForm' object requires `filterset` attribute\")\nmodel = self.filterset._meta.model\nif self.filterset is not None:\nself.filterset_filters = self.filterset.filters\ncontenttype = model._meta.app_label + \".\" + model._meta.model_name\n# Configure fields: Add css class and set choices for lookup_field\nself.fields[\"lookup_field\"].choices = add_blank_choice(self._get_lookup_field_choices())\nself.fields[\"lookup_field\"].widget.attrs[\"class\"] = \"nautobot-select2-static lookup_field-select\"\n# Update lookup_type and lookup_value fields to match expected field types derived from data\n# e.g status expects a ChoiceField with APISelectMultiple widget, while name expects a CharField etc.\nif \"data\" in kwargs and \"prefix\" in kwargs:\ndata = kwargs[\"data\"]\nprefix = kwargs[\"prefix\"]\nlookup_type = data.get(prefix + \"-lookup_type\")\nlookup_value = data.getlist(prefix + \"-lookup_value\")\nif lookup_type and lookup_value and lookup_type in self.filterset_filters:\nverbose_name = self.filterset_filters[lookup_type].lookup_expr\nlabel = build_lookup_label(lookup_type, verbose_name)\nself.fields[\"lookup_type\"].choices = [(lookup_type, label)]\nself.fields[\"lookup_value\"] = get_filterset_parameter_form_field(\nmodel, lookup_type, filterset=self.filterset\n)\nelif lookup_type and lookup_type not in self.filterset_filters:\nlogger.warning(f\"{lookup_type} is not a valid {self.filterset.__class__.__name__} field\")\nself.fields[\"lookup_type\"].widget.attrs[\"data-query-param-field_name\"] = json.dumps([\"$lookup_field\"])\nself.fields[\"lookup_type\"].widget.attrs[\"data-contenttype\"] = contenttype\nself.fields[\"lookup_type\"].widget.attrs[\"data-url\"] = reverse(\"core-api:filtersetfield-list-lookupchoices\")\nself.fields[\"lookup_type\"].widget.attrs[\"class\"] = \"nautobot-select2-api lookup_type-select\"\nlookup_value_css = self.fields[\"lookup_value\"].widget.attrs.get(\"class\") or \"\"\nself.fields[\"lookup_value\"].widget.attrs[\"class\"] = \" \".join(\n[lookup_value_css, \"lookup_value-input form-control\"]\n)\nelse:\nlogger.warning(f\"FilterSet for {model.__class__} not found.\")\ndef _get_lookup_field_choices(self):\n\"\"\"Get choices for lookup_fields i.e filterset parameters without a lookup expr\"\"\"\nfrom nautobot.extras.filters.mixins import RelationshipFilter  # Avoid circular import\nfilterset_without_lookup = (\n(\nname,\nget_filter_field_label(filter_field),\n)\nfor name, filter_field in self.filterset_filters.items()\nif isinstance(filter_field, RelationshipFilter) or (\"__\" not in name and name != \"q\")\n)\nreturn sorted(filterset_without_lookup, key=lambda x: x[1])\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.core.forms.forms.DynamicFilterForm.__init__","title":"<code>__init__(*args, filterset=None, **kwargs)</code>","text":"Source code in <code>nautobot/core/forms/forms.py</code> <pre><code>def __init__(self, *args, filterset=None, **kwargs):\nsuper().__init__(*args, **kwargs)\nfrom nautobot.core.forms import add_blank_choice  # Avoid circular import\n# cls.model is set at `dynamic_formset_factory()`\nself.filterset = filterset or getattr(self, \"filterset\", None)\n# Raise exception if `cls.filterset` not set and `filterset` not passed\nif self.filterset is None:\nraise AttributeError(\"'DynamicFilterForm' object requires `filterset` attribute\")\nmodel = self.filterset._meta.model\nif self.filterset is not None:\nself.filterset_filters = self.filterset.filters\ncontenttype = model._meta.app_label + \".\" + model._meta.model_name\n# Configure fields: Add css class and set choices for lookup_field\nself.fields[\"lookup_field\"].choices = add_blank_choice(self._get_lookup_field_choices())\nself.fields[\"lookup_field\"].widget.attrs[\"class\"] = \"nautobot-select2-static lookup_field-select\"\n# Update lookup_type and lookup_value fields to match expected field types derived from data\n# e.g status expects a ChoiceField with APISelectMultiple widget, while name expects a CharField etc.\nif \"data\" in kwargs and \"prefix\" in kwargs:\ndata = kwargs[\"data\"]\nprefix = kwargs[\"prefix\"]\nlookup_type = data.get(prefix + \"-lookup_type\")\nlookup_value = data.getlist(prefix + \"-lookup_value\")\nif lookup_type and lookup_value and lookup_type in self.filterset_filters:\nverbose_name = self.filterset_filters[lookup_type].lookup_expr\nlabel = build_lookup_label(lookup_type, verbose_name)\nself.fields[\"lookup_type\"].choices = [(lookup_type, label)]\nself.fields[\"lookup_value\"] = get_filterset_parameter_form_field(\nmodel, lookup_type, filterset=self.filterset\n)\nelif lookup_type and lookup_type not in self.filterset_filters:\nlogger.warning(f\"{lookup_type} is not a valid {self.filterset.__class__.__name__} field\")\nself.fields[\"lookup_type\"].widget.attrs[\"data-query-param-field_name\"] = json.dumps([\"$lookup_field\"])\nself.fields[\"lookup_type\"].widget.attrs[\"data-contenttype\"] = contenttype\nself.fields[\"lookup_type\"].widget.attrs[\"data-url\"] = reverse(\"core-api:filtersetfield-list-lookupchoices\")\nself.fields[\"lookup_type\"].widget.attrs[\"class\"] = \"nautobot-select2-api lookup_type-select\"\nlookup_value_css = self.fields[\"lookup_value\"].widget.attrs.get(\"class\") or \"\"\nself.fields[\"lookup_value\"].widget.attrs[\"class\"] = \" \".join(\n[lookup_value_css, \"lookup_value-input form-control\"]\n)\nelse:\nlogger.warning(f\"FilterSet for {model.__class__} not found.\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.DynamicModelChoiceField","title":"<code>nautobot.apps.forms.DynamicModelChoiceField</code>","text":"<p>             Bases: <code>DynamicModelChoiceMixin</code>, <code>django_forms.ModelChoiceField</code></p> <p>Override get_bound_field() to avoid pre-populating field choices with a SQL query. The field will be rendered only with choices set via bound data. Choices are populated on-demand via the APISelect widget.</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>class DynamicModelChoiceField(DynamicModelChoiceMixin, django_forms.ModelChoiceField):\n\"\"\"\n    Override get_bound_field() to avoid pre-populating field choices with a SQL query. The field will be\n    rendered only with choices set via bound data. Choices are populated on-demand via the APISelect widget.\n    \"\"\"\ndef clean(self, value):\n\"\"\"\n        When null option is enabled and \"None\" is sent as part of a form to be submitted, it is sent as the\n        string 'null'.  This will check for that condition and gracefully handle the conversion to a NoneType.\n        \"\"\"\nif self.null_option is not None and value == settings.FILTERS_NULL_CHOICE_VALUE:\nreturn None\nreturn super().clean(value)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.core.forms.fields.DynamicModelChoiceField.clean","title":"<code>clean(value)</code>","text":"<p>When null option is enabled and \"None\" is sent as part of a form to be submitted, it is sent as the string 'null'.  This will check for that condition and gracefully handle the conversion to a NoneType.</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>def clean(self, value):\n\"\"\"\n    When null option is enabled and \"None\" is sent as part of a form to be submitted, it is sent as the\n    string 'null'.  This will check for that condition and gracefully handle the conversion to a NoneType.\n    \"\"\"\nif self.null_option is not None and value == settings.FILTERS_NULL_CHOICE_VALUE:\nreturn None\nreturn super().clean(value)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.DynamicModelChoiceMixin","title":"<code>nautobot.apps.forms.DynamicModelChoiceMixin</code>","text":"<p>:param display_field: The name of the attribute of an API response object to display in the selection list :param query_params: A dictionary of additional key/value pairs to attach to the API request :param initial_params: A dictionary of child field references to use for selecting a parent field's initial value :param null_option: The string used to represent a null selection (if any) :param disabled_indicator: The name of the field which, if populated, will disable selection of the     choice (optional) :param depth: Nested serialization depth when making API requests (default: <code>0</code> or a flat representation)</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>class DynamicModelChoiceMixin:\n\"\"\"\n    :param display_field: The name of the attribute of an API response object to display in the selection list\n    :param query_params: A dictionary of additional key/value pairs to attach to the API request\n    :param initial_params: A dictionary of child field references to use for selecting a parent field's initial value\n    :param null_option: The string used to represent a null selection (if any)\n    :param disabled_indicator: The name of the field which, if populated, will disable selection of the\n        choice (optional)\n    :param depth: Nested serialization depth when making API requests (default: `0` or a flat representation)\n    \"\"\"\nfilter = django_filters.ModelChoiceFilter  # 2.0 TODO(Glenn): can we rename this? pylint: disable=redefined-builtin\nwidget = widgets.APISelect\ndef __init__(\nself,\ndisplay_field=\"display\",\nquery_params=None,\ninitial_params=None,\nnull_option=None,\ndisabled_indicator=None,\ndepth=0,\n*args,\n**kwargs,\n):\nself.display_field = display_field\nself.query_params = query_params or {}\nself.initial_params = initial_params or {}\nself.null_option = null_option\nself.disabled_indicator = disabled_indicator\nself.depth = depth\n# to_field_name is set by ModelChoiceField.__init__(), but we need to set it early for reference\n# by widget_attrs()\nself.to_field_name = kwargs.get(\"to_field_name\")\nsuper().__init__(*args, **kwargs)\ndef widget_attrs(self, widget):\nattrs = {\n\"display-field\": self.display_field,\n}\n# Set value-field attribute if the field specifies to_field_name\nif self.to_field_name:\nattrs[\"value-field\"] = self.to_field_name\n# Set the string used to represent a null option\nif self.null_option is not None:\nattrs[\"data-null-option\"] = self.null_option\n# Set the disabled indicator, if any\nif self.disabled_indicator is not None:\nattrs[\"disabled-indicator\"] = self.disabled_indicator\n# Toggle depth\nattrs[\"data-depth\"] = self.depth\n# Attach any static query parameters\nfor key, value in self.query_params.items():\nwidget.add_query_param(key, value)\nreturn attrs\ndef prepare_value(self, value):\n\"\"\"\n        Augment the behavior of forms.ModelChoiceField.prepare_value().\n        Specifically, if `value` is a PK, but we have `to_field_name` set, we need to look up the model instance\n        from the given PK, so that the base class will get the appropriate field value rather than just keeping the PK,\n        because the rendered form field needs this in order to correctly prepopulate a default selection.\n        \"\"\"\nif self.to_field_name and data_utils.is_uuid(value):\ntry:\nvalue = self.queryset.get(pk=value)\nexcept ObjectDoesNotExist:\npass\nreturn super().prepare_value(value)\ndef get_bound_field(self, form, field_name):\nbound_field = BoundField(form, self, field_name)\n# Set initial value based on prescribed child fields (if not already set)\nif not self.initial and self.initial_params:\nfilter_kwargs = {}\nfor kwarg, child_field in self.initial_params.items():\nvalue = form.initial.get(child_field.lstrip(\"$\"))\nif value:\nfilter_kwargs[kwarg] = value\nif filter_kwargs:\nself.initial = self.queryset.filter(**filter_kwargs).first()\n# Modify the QuerySet of the field before we return it. Limit choices to any data already bound: Options\n# will be populated on-demand via the APISelect widget.\ndata = bound_field.value()\nif data:\nfield_name = getattr(self, \"to_field_name\") or \"pk\"\nfilter_ = self.filter(field_name=field_name)\ntry:\nself.queryset = filter_.filter(self.queryset, data)\nexcept (TypeError, ValidationError):\n# Catch any error caused by invalid initial data passed from the user\nself.queryset = self.queryset.none()\nelse:\nself.queryset = self.queryset.none()\n# Set the data URL on the APISelect widget (if not already set)\nwidget = bound_field.field.widget\nif not widget.attrs.get(\"data-url\"):\nroute = lookup.get_route_for_model(self.queryset.model, \"list\", api=True)\ndata_url = reverse(route)\nwidget.attrs[\"data-url\"] = data_url\nreturn bound_field\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.core.forms.fields.DynamicModelChoiceMixin.prepare_value","title":"<code>prepare_value(value)</code>","text":"<p>Augment the behavior of forms.ModelChoiceField.prepare_value().</p> <p>Specifically, if <code>value</code> is a PK, but we have <code>to_field_name</code> set, we need to look up the model instance from the given PK, so that the base class will get the appropriate field value rather than just keeping the PK, because the rendered form field needs this in order to correctly prepopulate a default selection.</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>def prepare_value(self, value):\n\"\"\"\n    Augment the behavior of forms.ModelChoiceField.prepare_value().\n    Specifically, if `value` is a PK, but we have `to_field_name` set, we need to look up the model instance\n    from the given PK, so that the base class will get the appropriate field value rather than just keeping the PK,\n    because the rendered form field needs this in order to correctly prepopulate a default selection.\n    \"\"\"\nif self.to_field_name and data_utils.is_uuid(value):\ntry:\nvalue = self.queryset.get(pk=value)\nexcept ObjectDoesNotExist:\npass\nreturn super().prepare_value(value)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.DynamicModelMultipleChoiceField","title":"<code>nautobot.apps.forms.DynamicModelMultipleChoiceField</code>","text":"<p>             Bases: <code>DynamicModelChoiceMixin</code>, <code>django_forms.ModelMultipleChoiceField</code></p> <p>A multiple-choice version of DynamicModelChoiceField.</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>class DynamicModelMultipleChoiceField(DynamicModelChoiceMixin, django_forms.ModelMultipleChoiceField):\n\"\"\"\n    A multiple-choice version of DynamicModelChoiceField.\n    \"\"\"\nfilter = django_filters.ModelMultipleChoiceFilter\nwidget = widgets.APISelectMultiple\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.ExpandableIPAddressField","title":"<code>nautobot.apps.forms.ExpandableIPAddressField</code>","text":"<p>             Bases: <code>django_forms.CharField</code></p> <p>A field which allows for expansion of IP address ranges   Example: '192.0.2.[1-254]/24' =&gt; ['192.0.2.1/24', '192.0.2.2/24', '192.0.2.3/24' ... '192.0.2.254/24']</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>class ExpandableIPAddressField(django_forms.CharField):\n\"\"\"\n    A field which allows for expansion of IP address ranges\n      Example: '192.0.2.[1-254]/24' =&gt; ['192.0.2.1/24', '192.0.2.2/24', '192.0.2.3/24' ... '192.0.2.254/24']\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nif not self.help_text:\nself.help_text = (\n\"Specify a numeric range to create multiple IPs.&lt;br /&gt;Example: &lt;code&gt;192.0.2.[1,5,100-254]/24&lt;/code&gt;\"\n)\ndef to_python(self, value):\n# Ensure that a subnet mask has been specified. This prevents IPs from defaulting to a /32 or /128.\nif len(value.split(\"/\")) != 2:\nraise ValidationError(\"CIDR mask (e.g. /24) is required.\")\n# Hackish address version detection but it's all we have to work with\nif \".\" in value and re.search(forms.IP4_EXPANSION_PATTERN, value):\nreturn list(forms.expand_ipaddress_pattern(value, 4))\nelif \":\" in value and re.search(forms.IP6_EXPANSION_PATTERN, value):\nreturn list(forms.expand_ipaddress_pattern(value, 6))\nreturn [value]\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.ExpandableNameField","title":"<code>nautobot.apps.forms.ExpandableNameField</code>","text":"<p>             Bases: <code>django_forms.CharField</code></p> <p>A field which allows for numeric range expansion   Example: 'Gi0/[1-3]' =&gt; ['Gi0/1', 'Gi0/2', 'Gi0/3']</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>class ExpandableNameField(django_forms.CharField):\n\"\"\"\n    A field which allows for numeric range expansion\n      Example: 'Gi0/[1-3]' =&gt; ['Gi0/1', 'Gi0/2', 'Gi0/3']\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nif not self.help_text:\nself.help_text = \"\"\"\n                Alphanumeric ranges are supported for bulk creation. Mixed cases and types within a single range\n                are not supported. Examples:\n                &lt;ul&gt;\n                    &lt;li&gt;&lt;code&gt;[ge,xe]-0/0/[0-9]&lt;/code&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;code&gt;e[0-3][a-d,f]&lt;/code&gt;&lt;/li&gt;\n                &lt;/ul&gt;\n                \"\"\"\ndef to_python(self, value):\nif not value:\nreturn \"\"\nif re.search(forms.ALPHANUMERIC_EXPANSION_PATTERN, value):\nreturn list(forms.expand_alphanumeric_pattern(value))\nreturn [value]\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.ImportForm","title":"<code>nautobot.apps.forms.ImportForm</code>","text":"<p>             Bases: <code>BootstrapMixin</code>, <code>forms.Form</code></p> <p>Generic form for creating an object from JSON/YAML data</p> Source code in <code>nautobot/core/forms/forms.py</code> <pre><code>class ImportForm(BootstrapMixin, forms.Form):\n\"\"\"\n    Generic form for creating an object from JSON/YAML data\n    \"\"\"\ndata = forms.CharField(\nwidget=forms.Textarea,\nhelp_text=\"Enter object data in JSON or YAML format. Note: Only a single object/document is supported.\",\nlabel=\"\",\n)\nformat = forms.ChoiceField(choices=((\"json\", \"JSON\"), (\"yaml\", \"YAML\")), initial=\"yaml\")\ndef clean(self):\nsuper().clean()\ndata = self.cleaned_data[\"data\"]\nformat_ = self.cleaned_data[\"format\"]\n# Process JSON/YAML data\nif format_ == \"json\":\ntry:\nself.cleaned_data[\"data\"] = json.loads(data)\n# Check for multiple JSON objects\nif not isinstance(self.cleaned_data[\"data\"], dict):\nraise forms.ValidationError({\"data\": \"Import is limited to one object at a time.\"})\nexcept json.decoder.JSONDecodeError as err:\nraise forms.ValidationError({\"data\": f\"Invalid JSON data: {err}\"})\nelse:\n# Check for multiple YAML documents\nif \"\\n---\" in data:\nraise forms.ValidationError({\"data\": \"Import is limited to one object at a time.\"})\ntry:\nself.cleaned_data[\"data\"] = yaml.load(data, Loader=yaml.SafeLoader)\nexcept yaml.error.YAMLError as err:\nraise forms.ValidationError({\"data\": f\"Invalid YAML data: {err}\"})\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.JSONArrayFormField","title":"<code>nautobot.apps.forms.JSONArrayFormField</code>","text":"<p>             Bases: <code>django_forms.JSONField</code></p> <p>A FormField counterpart to JSONArrayField. Replicates ArrayFormField's base field validation: Field values are validated as JSON Arrays, and each Array element is validated by <code>base_field</code> validators.</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>class JSONArrayFormField(django_forms.JSONField):\n\"\"\"\n    A FormField counterpart to JSONArrayField.\n    Replicates ArrayFormField's base field validation: Field values are validated as JSON Arrays,\n    and each Array element is validated by `base_field` validators.\n    \"\"\"\ndef __init__(self, base_field, *, delimiter=\",\", **kwargs):\nself.base_field = base_field\nself.delimiter = delimiter\nsuper().__init__(**kwargs)\ndef clean(self, value):\n\"\"\"\n        Validate `value` and return its \"cleaned\" value as an appropriate\n        Python object. Raise ValidationError for any errors.\n        \"\"\"\nvalue = super().clean(value)\nreturn [self.base_field.clean(val) for val in value]\ndef prepare_value(self, value):\n\"\"\"\n        Return a string of this value.\n        \"\"\"\nif isinstance(value, list):\nreturn self.delimiter.join(str(self.base_field.prepare_value(v)) for v in value)\nreturn value\ndef to_python(self, value):\n\"\"\"\n        Convert `value` into JSON, raising django.core.exceptions.ValidationError\n        if the data can't be converted. Return the converted value.\n        \"\"\"\nif isinstance(value, list):\nitems = value\nelif value:\ntry:\nitems = value.split(self.delimiter)\nexcept Exception as e:\nraise ValidationError(e)\nelse:\nitems = []\nerrors = []\nvalues = []\nfor item in items:\ntry:\nvalues.append(self.base_field.to_python(item))\nexcept ValidationError as error:\nerrors.append(error)\nif errors:\nraise ValidationError(errors)\nreturn values\ndef validate(self, value):\n\"\"\"\n        Validate `value` and raise ValidationError if necessary.\n        \"\"\"\nsuper().validate(value)\nerrors = []\nfor item in value:\ntry:\nself.base_field.validate(item)\nexcept ValidationError as error:\nerrors.append(error)\nif errors:\nraise ValidationError(errors)\ndef run_validators(self, value):\n\"\"\"\n        Runs all validators against `value` and raise ValidationError if necessary.\n        Some validators can't be created at field initialization time.\n        \"\"\"\nsuper().run_validators(value)\nerrors = []\nfor item in value:\ntry:\nself.base_field.run_validators(item)\nexcept ValidationError as error:\nerrors.append(error)\nif errors:\nraise ValidationError(errors)\ndef has_changed(self, initial, data):\n\"\"\"\n        Return True if `data` differs from `initial`.\n        \"\"\"\nvalue = self.to_python(data)\nif initial in self.empty_values and value in self.empty_values:\nreturn False\nreturn super().has_changed(initial, data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.core.forms.fields.JSONArrayFormField.clean","title":"<code>clean(value)</code>","text":"<p>Validate <code>value</code> and return its \"cleaned\" value as an appropriate Python object. Raise ValidationError for any errors.</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>def clean(self, value):\n\"\"\"\n    Validate `value` and return its \"cleaned\" value as an appropriate\n    Python object. Raise ValidationError for any errors.\n    \"\"\"\nvalue = super().clean(value)\nreturn [self.base_field.clean(val) for val in value]\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.core.forms.fields.JSONArrayFormField.has_changed","title":"<code>has_changed(initial, data)</code>","text":"<p>Return True if <code>data</code> differs from <code>initial</code>.</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>def has_changed(self, initial, data):\n\"\"\"\n    Return True if `data` differs from `initial`.\n    \"\"\"\nvalue = self.to_python(data)\nif initial in self.empty_values and value in self.empty_values:\nreturn False\nreturn super().has_changed(initial, data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.core.forms.fields.JSONArrayFormField.prepare_value","title":"<code>prepare_value(value)</code>","text":"<p>Return a string of this value.</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>def prepare_value(self, value):\n\"\"\"\n    Return a string of this value.\n    \"\"\"\nif isinstance(value, list):\nreturn self.delimiter.join(str(self.base_field.prepare_value(v)) for v in value)\nreturn value\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.core.forms.fields.JSONArrayFormField.run_validators","title":"<code>run_validators(value)</code>","text":"<p>Runs all validators against <code>value</code> and raise ValidationError if necessary. Some validators can't be created at field initialization time.</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>def run_validators(self, value):\n\"\"\"\n    Runs all validators against `value` and raise ValidationError if necessary.\n    Some validators can't be created at field initialization time.\n    \"\"\"\nsuper().run_validators(value)\nerrors = []\nfor item in value:\ntry:\nself.base_field.run_validators(item)\nexcept ValidationError as error:\nerrors.append(error)\nif errors:\nraise ValidationError(errors)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.core.forms.fields.JSONArrayFormField.to_python","title":"<code>to_python(value)</code>","text":"<p>Convert <code>value</code> into JSON, raising django.core.exceptions.ValidationError if the data can't be converted. Return the converted value.</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>def to_python(self, value):\n\"\"\"\n    Convert `value` into JSON, raising django.core.exceptions.ValidationError\n    if the data can't be converted. Return the converted value.\n    \"\"\"\nif isinstance(value, list):\nitems = value\nelif value:\ntry:\nitems = value.split(self.delimiter)\nexcept Exception as e:\nraise ValidationError(e)\nelse:\nitems = []\nerrors = []\nvalues = []\nfor item in items:\ntry:\nvalues.append(self.base_field.to_python(item))\nexcept ValidationError as error:\nerrors.append(error)\nif errors:\nraise ValidationError(errors)\nreturn values\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.core.forms.fields.JSONArrayFormField.validate","title":"<code>validate(value)</code>","text":"<p>Validate <code>value</code> and raise ValidationError if necessary.</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>def validate(self, value):\n\"\"\"\n    Validate `value` and raise ValidationError if necessary.\n    \"\"\"\nsuper().validate(value)\nerrors = []\nfor item in value:\ntry:\nself.base_field.validate(item)\nexcept ValidationError as error:\nerrors.append(error)\nif errors:\nraise ValidationError(errors)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.JSONField","title":"<code>nautobot.apps.forms.JSONField</code>","text":"<p>             Bases: <code>_JSONField</code></p> <p>Custom wrapper around Django's built-in JSONField to avoid presenting \"null\" as the default text.</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>class JSONField(_JSONField):\n\"\"\"\n    Custom wrapper around Django's built-in JSONField to avoid presenting \"null\" as the default text.\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nif not self.help_text:\nself.help_text = 'Enter context data in &lt;a href=\"https://json.org/\"&gt;JSON&lt;/a&gt; format.'\nself.widget.attrs[\"placeholder\"] = \"\"\ndef prepare_value(self, value):\nif isinstance(value, InvalidJSONInput):\nreturn value\nif value is None:\nreturn \"\"\nreturn json.dumps(value, sort_keys=True, indent=4, ensure_ascii=False)\n# TODO: remove this when we upgrade to Django 4\ndef bound_data(self, data, initial):\nif data is None:\nreturn None\nreturn super().bound_data(data, initial)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.LaxURLField","title":"<code>nautobot.apps.forms.LaxURLField</code>","text":"<p>             Bases: <code>django_forms.URLField</code></p> <p>Modifies Django's built-in URLField to remove the requirement for fully-qualified domain names (e.g. http://myserver/ is valid)</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>class LaxURLField(django_forms.URLField):\n\"\"\"\n    Modifies Django's built-in URLField to remove the requirement for fully-qualified domain names\n    (e.g. http://myserver/ is valid)\n    \"\"\"\ndefault_validators = [validators.EnhancedURLValidator()]\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.MultiMatchModelMultipleChoiceField","title":"<code>nautobot.apps.forms.MultiMatchModelMultipleChoiceField</code>","text":"<p>             Bases: <code>DynamicModelChoiceMixin</code>, <code>django_filters.fields.ModelMultipleChoiceField</code></p> <p>Filter field to support matching on the PK or <code>to_field_name</code> fields (defaulting to <code>slug</code> if not specified).</p> <p>Raises ValidationError if none of the fields match the requested value.</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>class MultiMatchModelMultipleChoiceField(DynamicModelChoiceMixin, django_filters.fields.ModelMultipleChoiceField):\n\"\"\"\n    Filter field to support matching on the PK *or* `to_field_name` fields (defaulting to `slug` if not specified).\n    Raises ValidationError if none of the fields match the requested value.\n    \"\"\"\nfilter = django_filters.ModelMultipleChoiceFilter\nwidget = widgets.APISelectMultiple\ndef __init__(self, *args, **kwargs):\nself.natural_key = kwargs.setdefault(\"to_field_name\", \"slug\")\nsuper().__init__(*args, **kwargs)\ndef _check_values(self, values):\n\"\"\"\n        This method overloads the grandparent method in `django.forms.models.ModelMultipleChoiceField`,\n        re-using some of that method's existing logic and adding support for coupling this field with\n        multiple model fields.\n        \"\"\"\nnull = self.null_label is not None and values and self.null_value in values\nif null:\nvalues = [v for v in values if v != self.null_value]\n# deduplicate given values to avoid creating many querysets or\n# requiring the database backend deduplicate efficiently.\ntry:\nvalues = frozenset(values)\nexcept TypeError:\n# list of lists isn't hashable, for example\nraise ValidationError(\nself.error_messages[\"invalid_list\"],\ncode=\"invalid_list\",\n)\npk_values = set()\nnatural_key_values = set()\nfor item in values:\nquery = Q()\nif data_utils.is_uuid(item):\npk_values.add(item)\nquery |= Q(pk=item)\nelse:\nnatural_key_values.add(item)\nquery |= Q(**{self.natural_key: item})\nqs = self.queryset.filter(query)\nif not qs.exists():\nraise ValidationError(\nself.error_messages[\"invalid_choice\"],\ncode=\"invalid_choice\",\nparams={\"value\": item},\n)\nquery = Q(pk__in=pk_values) | Q(**{f\"{self.natural_key}__in\": natural_key_values})\nqs = self.queryset.filter(query)\nresult = list(qs)\nif null:\nresult += [self.null_value]\nreturn result\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.MultiValueCharField","title":"<code>nautobot.apps.forms.MultiValueCharField</code>","text":"<p>             Bases: <code>django_forms.CharField</code></p> <p>CharField that takes multiple user character inputs and render them as tags in the form field. Press enter to complete an input.</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>class MultiValueCharField(django_forms.CharField):\n\"\"\"\n    CharField that takes multiple user character inputs and render them as tags in the form field.\n    Press enter to complete an input.\n    \"\"\"\nwidget = widgets.MultiValueCharInput()\ndef get_bound_field(self, form, field_name):\nbound_field = BoundField(form, self, field_name)\nvalue = bound_field.value()\nwidget = bound_field.field.widget\n# Save the selected choices in the widget even after the filterform is submitted\nif value is not None:\nwidget.choices = [(v, v) for v in value]\nreturn bound_field\ndef to_python(self, value):\nself.field_class = django_forms.CharField\nif not value:\nreturn []\n# Make it a list if it's a string.\nif isinstance(value, str):\nvalue = [value]\nreturn [\n# Only append non-empty values (this avoids e.g. trying to cast '' as an integer)\nself.field_class.to_python(self, v)\nfor v in value\nif v\n]\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.MultiValueCharInput","title":"<code>nautobot.apps.forms.MultiValueCharInput</code>","text":"<p>             Bases: <code>StaticSelect2Multiple</code></p> <p>Manual text input with tagging enabled. Press enter to create a new entry.</p> Source code in <code>nautobot/core/forms/widgets.py</code> <pre><code>class MultiValueCharInput(StaticSelect2Multiple):\n\"\"\"\n    Manual text input with tagging enabled.\n    Press enter to create a new entry.\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.attrs[\"class\"] = \"nautobot-select2-multi-value-char\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.MultipleContentTypeField","title":"<code>nautobot.apps.forms.MultipleContentTypeField</code>","text":"<p>             Bases: <code>django_forms.ModelMultipleChoiceField</code></p> <p>Field for choosing any number of <code>ContentType</code> objects.</p> <p>Optionally can restrict the available ContentTypes to those supporting a particular feature only. Optionally can pass the selection through as a list of <code>{app_label}.{model}</code> strings instead of PK values.</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>class MultipleContentTypeField(django_forms.ModelMultipleChoiceField):\n\"\"\"\n    Field for choosing any number of `ContentType` objects.\n    Optionally can restrict the available ContentTypes to those supporting a particular feature only.\n    Optionally can pass the selection through as a list of `{app_label}.{model}` strings instead of PK values.\n    \"\"\"\nSTATIC_CHOICES = True\ndef __init__(self, *args, feature=None, choices_as_strings=False, **kwargs):\n\"\"\"\n        Construct a MultipleContentTypeField.\n        Args:\n            feature (str): Feature name to use in constructing a FeatureQuery to restrict the available ContentTypes.\n            choices_as_strings (bool): If True, render selection as a list of `\"{app_label}.{model}\"` strings.\n        \"\"\"\nfrom nautobot.extras import utils as extras_utils\nif \"queryset\" not in kwargs:\nif feature is not None:\nkwargs[\"queryset\"] = ContentType.objects.filter(\nextras_utils.FeatureQuery(feature).get_query()\n).order_by(\"app_label\", \"model\")\nelse:\nkwargs[\"queryset\"] = ContentType.objects.order_by(\"app_label\", \"model\")\nif \"widget\" not in kwargs:\nkwargs[\"widget\"] = forms.StaticSelect2Multiple()\nsuper().__init__(*args, **kwargs)\nif choices_as_strings:\nself.choices = self._string_choices_from_queryset\ndef _string_choices_from_queryset(self):\n\"\"\"Overload choices to return `{app_label}.{model}` instead of PKs.\"\"\"\nreturn [(f\"{m.app_label}.{m.model}\", m.app_labeled_name) for m in self.queryset.all()]\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.core.forms.fields.MultipleContentTypeField.__init__","title":"<code>__init__(*args, feature=None, choices_as_strings=False, **kwargs)</code>","text":"<p>Construct a MultipleContentTypeField.</p> <p>Parameters:</p> Name Type Description Default <code>feature</code> <code>str</code> <p>Feature name to use in constructing a FeatureQuery to restrict the available ContentTypes.</p> <code>None</code> <code>choices_as_strings</code> <code>bool</code> <p>If True, render selection as a list of <code>\"{app_label}.{model}\"</code> strings.</p> <code>False</code> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>def __init__(self, *args, feature=None, choices_as_strings=False, **kwargs):\n\"\"\"\n    Construct a MultipleContentTypeField.\n    Args:\n        feature (str): Feature name to use in constructing a FeatureQuery to restrict the available ContentTypes.\n        choices_as_strings (bool): If True, render selection as a list of `\"{app_label}.{model}\"` strings.\n    \"\"\"\nfrom nautobot.extras import utils as extras_utils\nif \"queryset\" not in kwargs:\nif feature is not None:\nkwargs[\"queryset\"] = ContentType.objects.filter(\nextras_utils.FeatureQuery(feature).get_query()\n).order_by(\"app_label\", \"model\")\nelse:\nkwargs[\"queryset\"] = ContentType.objects.order_by(\"app_label\", \"model\")\nif \"widget\" not in kwargs:\nkwargs[\"widget\"] = forms.StaticSelect2Multiple()\nsuper().__init__(*args, **kwargs)\nif choices_as_strings:\nself.choices = self._string_choices_from_queryset\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.NautobotBulkEditForm","title":"<code>nautobot.apps.forms.NautobotBulkEditForm</code>","text":"<p>             Bases: <code>BootstrapMixin</code>, <code>CustomFieldModelBulkEditFormMixin</code>, <code>RelationshipModelBulkEditFormMixin</code>, <code>NoteModelBulkEditFormMixin</code></p> <p>Base class for bulk-edit forms for models that support relationships, custom fields and notes.</p> Source code in <code>nautobot/extras/forms/base.py</code> <pre><code>class NautobotBulkEditForm(\nBootstrapMixin, CustomFieldModelBulkEditFormMixin, RelationshipModelBulkEditFormMixin, NoteModelBulkEditFormMixin\n):\n\"\"\"Base class for bulk-edit forms for models that support relationships, custom fields and notes.\"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.NautobotFilterForm","title":"<code>nautobot.apps.forms.NautobotFilterForm</code>","text":"<p>             Bases: <code>BootstrapMixin</code>, <code>CustomFieldModelFilterFormMixin</code>, <code>RelationshipModelFilterFormMixin</code></p> <p>This class exists to combine common functionality and is used to inherit from throughout the codebase where all three of BootstrapMixin, CustomFieldModelFilterFormMixin and RelationshipModelFilterFormMixin are needed.</p> Source code in <code>nautobot/extras/forms/base.py</code> <pre><code>class NautobotFilterForm(BootstrapMixin, CustomFieldModelFilterFormMixin, RelationshipModelFilterFormMixin):\n\"\"\"\n    This class exists to combine common functionality and is used to inherit from throughout the\n    codebase where all three of BootstrapMixin, CustomFieldModelFilterFormMixin and RelationshipModelFilterFormMixin are\n    needed.\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.NautobotModelForm","title":"<code>nautobot.apps.forms.NautobotModelForm</code>","text":"<p>             Bases: <code>BootstrapMixin</code>, <code>CustomFieldModelFormMixin</code>, <code>RelationshipModelFormMixin</code>, <code>NoteModelFormMixin</code></p> <p>This class exists to combine common functionality and is used to inherit from throughout the codebase where all of BootstrapMixin, CustomFieldModelFormMixin, RelationshipModelFormMixin, and NoteModelFormMixin are needed.</p> Source code in <code>nautobot/extras/forms/base.py</code> <pre><code>class NautobotModelForm(BootstrapMixin, CustomFieldModelFormMixin, RelationshipModelFormMixin, NoteModelFormMixin):\n\"\"\"\n    This class exists to combine common functionality and is used to inherit from throughout the\n    codebase where all of BootstrapMixin, CustomFieldModelFormMixin, RelationshipModelFormMixin, and\n    NoteModelFormMixin are needed.\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.NoteFormBase","title":"<code>nautobot.apps.forms.NoteFormBase</code>","text":"<p>             Bases: <code>forms.Form</code></p> <p>Base for the NoteModelFormMixin and NoteModelBulkEditFormMixin.</p> Source code in <code>nautobot/extras/forms/mixins.py</code> <pre><code>class NoteFormBase(forms.Form):\n\"\"\"Base for the NoteModelFormMixin and NoteModelBulkEditFormMixin.\"\"\"\nobject_note = CommentField(label=\"Note\")\ndef save_note(self, *, instance, user):\nvalue = self.cleaned_data.get(\"object_note\", \"\").strip()\nif value:\nnote = Note.objects.create(\nnote=value,\nassigned_object_type=self.obj_type,\nassigned_object_id=instance.pk,\nuser=user,\n)\nlogger.debug(\"Created %s\", note)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.NoteModelBulkEditFormMixin","title":"<code>nautobot.apps.forms.NoteModelBulkEditFormMixin</code>","text":"<p>             Bases: <code>BulkEditForm</code>, <code>NoteFormBase</code></p> <p>Bulk-edit form mixin for models that support Notes.</p> Source code in <code>nautobot/extras/forms/mixins.py</code> <pre><code>class NoteModelBulkEditFormMixin(BulkEditForm, NoteFormBase):\n\"\"\"Bulk-edit form mixin for models that support Notes.\"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.obj_type = ContentType.objects.get_for_model(self.model)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.NumericArrayField","title":"<code>nautobot.apps.forms.NumericArrayField</code>","text":"<p>             Bases: <code>SimpleArrayField</code></p> <p>Basic array field that takes comma-separated or hyphenated ranges.</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>class NumericArrayField(SimpleArrayField):\n\"\"\"Basic array field that takes comma-separated or hyphenated ranges.\"\"\"\ndef to_python(self, value):\ntry:\nvalue = \",\".join([str(n) for n in forms.parse_numeric_range(value)])\nexcept ValueError as error:\nraise ValidationError(error)\nreturn super().to_python(value)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.PrefixFieldMixin","title":"<code>nautobot.apps.forms.PrefixFieldMixin</code>","text":"<p>             Bases: <code>forms.ModelForm</code></p> <p>ModelForm mixin for IPNetwork based models.</p> Source code in <code>nautobot/core/forms/forms.py</code> <pre><code>class PrefixFieldMixin(forms.ModelForm):\n\"\"\"\n    ModelForm mixin for IPNetwork based models.\n    \"\"\"\nprefix = formfields.IPNetworkFormField()\ndef __init__(self, *args, **kwargs):\ninstance = kwargs.get(\"instance\")\ninitial = kwargs.get(\"initial\", {}).copy()\n# If initial already has a `prefix`, we want to use that `prefix` as it was passed into\n# the form. If we're editing an object with a `prefix` field, we need to patch initial\n# to include `prefix` because it is a computed field.\nif \"prefix\" not in initial and instance is not None:\ninitial[\"prefix\"] = instance.prefix\nkwargs[\"initial\"] = initial\nsuper().__init__(*args, **kwargs)\ndef clean(self):\nsuper().clean()\n# Need to set instance attribute for `prefix` to run proper validation on Model.clean()\nself.instance.prefix = self.cleaned_data.get(\"prefix\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.RelationshipModelBulkEditFormMixin","title":"<code>nautobot.apps.forms.RelationshipModelBulkEditFormMixin</code>","text":"<p>             Bases: <code>BulkEditForm</code></p> <p>Bulk-edit form mixin for models that support Relationships.</p> Source code in <code>nautobot/extras/forms/mixins.py</code> <pre><code>class RelationshipModelBulkEditFormMixin(BulkEditForm):\n\"\"\"Bulk-edit form mixin for models that support Relationships.\"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.obj_type = ContentType.objects.get_for_model(self.model)\nself.relationships = []\nself._append_relationships()\ndef _append_relationships(self):\n\"\"\"\n        Append form fields for all Relationships assigned to this model.\n        \"\"\"\nsource_relationships = Relationship.objects.filter(source_type=self.obj_type, source_hidden=False)\nself._append_relationships_side(source_relationships, RelationshipSideChoices.SIDE_SOURCE)\ndest_relationships = Relationship.objects.filter(destination_type=self.obj_type, destination_hidden=False)\nself._append_relationships_side(dest_relationships, RelationshipSideChoices.SIDE_DESTINATION)\ndef _append_relationships_side(self, relationships, initial_side):\n\"\"\"\n        Helper method to _append_relationships, for processing one \"side\" of the relationships for this model.\n        For different relationship types there are different expectations of the UI:\n        - For one-to-one (symmetric or non-symmetric) it doesn't make sense to bulk-set this relationship,\n          but we want it to be clearable/nullable.\n        - For one-to-many (from the source, \"one\", side) we likewise want it clearable/nullable but not settable.\n        - For one-to-many (from the destination, \"many\", side) a single value can be set, or it can be nulled.\n        - For many-to-many (symmetric or non-symmetric) we provide \"add\" and \"remove\" multi-select fields,\n          similar to the TagsBulkEditFormMixin behavior. No nullability is provided here.\n        \"\"\"\nfor relationship in relationships:\nif relationship.symmetric:\nside = RelationshipSideChoices.SIDE_PEER\nelse:\nside = initial_side\npeer_side = RelationshipSideChoices.OPPOSITE[side]\n# If this model is on the \"source\" side of the relationship, then the field will be named\n# \"cr_&lt;relationship_key&gt;__destination\" since it's used to pick the destination object(s).\n# If we're on the \"destination\" side, the field will be \"cr_&lt;relationship_key&gt;__source\".\n# For a symmetric relationship, both sides are \"peer\", so the field will be \"cr_&lt;relationship_key&gt;__peer\"\nfield_name = f\"cr_{relationship.key}__{peer_side}\"\nif field_name in self.relationships:\n# This is a symmetric relationship that we already processed from the opposing \"initial_side\".\n# No need to process it a second time!\ncontinue\nif relationship.has_many(side):\nif relationship.type == RelationshipTypeChoices.TYPE_ONE_TO_MANY:\n# Destination side of a one-to-many field - provide a standard form field for selecting the \"one\",\n# as well as making this field nullable.\nself.fields[field_name] = relationship.to_form_field(side=side)\nself.nullable_fields.append(field_name)\nelse:\n# Many-to-many field - provide \"add\" and \"remove\" form fields like with tags, no nullable option.\nself.fields[f\"add_{field_name}\"] = relationship.to_form_field(side=side)\nself.fields[f\"add_{field_name}\"].label = \"Add \" + self.fields[f\"add_{field_name}\"].label\nself.fields[f\"remove_{field_name}\"] = relationship.to_form_field(side=side)\nself.fields[f\"remove_{field_name}\"].label = \"Remove \" + self.fields[f\"remove_{field_name}\"].label\nelse:\n# The \"one\" side of a one-to-one or one-to-many relationship.\n# In this case, the only valid bulk-edit operation is nulling/clearing the relationship,\n# but the \"Set null\" checkbox only appears if we have a form field for the the relationship itself.\n# This could probably be refined, but for now we just add the field and disable it.\nself.fields[field_name] = relationship.to_form_field(side=side)\nself.fields[field_name].disabled = True\nself.nullable_fields.append(field_name)\nself.relationships.append(field_name)\ndef save_relationships(self, *, instance, nullified_fields):\n\"\"\"Helper method to be called from BulkEditView.post().\"\"\"\n# The below may seem inefficient as it re-loads the Relationship objects afresh for each instance;\n# however this is necessary as it applies the source/destination filters (if any) to determine\n# whether each relationship actually applies to the given instance.\ninstance_relationships = instance.get_relationships(include_hidden=True)\nfor side, relationships_data in instance_relationships.items():\npeer_side = RelationshipSideChoices.OPPOSITE[side]\nfor relationship, relationshipassociation_queryset in relationships_data.items():\nfield_name = f\"cr_{relationship.key}__{peer_side}\"\nlogger.debug(\n\"Processing relationship %s %s (field %s) for instance %s\",\nrelationship,\nside,\nfield_name,\ninstance,\n)\nif field_name in self.nullable_fields and field_name in nullified_fields:\nlogger.debug(\"Deleting existing relationship associations for %s on %s\", relationship, instance)\nrelationshipassociation_queryset.delete()\nelif field_name in self.cleaned_data:\nvalue = self.cleaned_data.get(field_name)\nif value and not relationship.has_many(peer_side):\nra, created = RelationshipAssociation.objects.update_or_create(\nrelationship=relationship,\nsource_type=relationship.source_type,\ndestination_type=relationship.destination_type,\ndefaults={f\"{peer_side}_id\": value.pk},\n**{f\"{side}_id\": instance.pk},\n)\nif created:\nlogger.debug(\"Created %s\", ra)\nelse:\nlogger.debug(\"Updated %s\", ra)\nelse:\nif f\"add_{field_name}\" in self.cleaned_data:\nadded = self.cleaned_data.get(f\"add_{field_name}\")\nfor target in added:\nif peer_side != RelationshipSideChoices.SIDE_PEER:\nra, created = RelationshipAssociation.objects.get_or_create(\nrelationship=relationship,\nsource_type=relationship.source_type,\ndestination_type=relationship.destination_type,\n**{\nf\"{side}_id\": instance.pk,\nf\"{peer_side}_id\": target.pk,\n},\n)\nelse:\nif (\nRelationshipAssociation.objects.filter(\nrelationship=relationship,\nsource_id=instance.pk,\ndestination_id=target.pk,\n).exists()\nor RelationshipAssociation.objects.filter(\nrelationship=relationship,\nsource_id=target.pk,\ndestination_id=instance.pk,\n).exists()\n):\nra = None\ncreated = False\nelse:\nra = RelationshipAssociation.objects.create(\nrelationship=relationship,\nsource_type=relationship.source_type,\nsource_id=instance.pk,\ndestination_type=relationship.destination_type,\ndestination_id=target.pk,\n)\ncreated = True\nif created:\nra.validated_save()\nlogger.debug(\"Created %s\", ra)\nif f\"remove_{field_name}\" in self.cleaned_data:\nremoved = self.cleaned_data.get(f\"remove_{field_name}\")\nsource_count = 0\ndestination_count = 0\nif side in [RelationshipSideChoices.SIDE_SOURCE, RelationshipSideChoices.SIDE_PEER]:\nsource_count, _ = RelationshipAssociation.objects.filter(\nrelationship=relationship,\nsource_id=instance.pk,\ndestination_id__in=[target.pk for target in removed],\n).delete()\nif side in [RelationshipSideChoices.SIDE_DESTINATION, RelationshipSideChoices.SIDE_PEER]:\ndestination_count, _ = RelationshipAssociation.objects.filter(\nrelationship=relationship,\nsource_id__in=[target.pk for target in removed],\ndestination_id=instance.pk,\n).delete()\nlogger.debug(\"Deleted %s RelationshipAssociation(s)\", source_count + destination_count)\ndef clean(self):\n# Get any initial required relationship objects errors (i.e. non-existent required objects)\nrequired_objects_errors = self.model.required_related_objects_errors(output_for=\"ui\")\nalready_invalidated_keys = []\nfor field, errors in required_objects_errors.items():\nself.add_error(None, errors)\n# rindex() find the last occurrence of \"__\" which is\n# guaranteed to be cr_{key}__source, cr_{key}__destination, or cr_{key}__peer\n# regardless of how {key} is formatted\nrelationship_key = field[: field.rindex(\"__\")][3:]\nalready_invalidated_keys.append(relationship_key)\nrequired_relationships = []\n# The following query excludes already invalidated relationships (this happened above\n# by checking for the existence of required objects\n# with the call to self.Meta().model.required_related_objects_errors(output_for=\"ui\"))\nfor relationship in Relationship.objects.get_required_for_model(self.model).exclude(\nkey__in=already_invalidated_keys\n):\nrequired_relationships.append(\n{\n\"key\": relationship.key,\n\"required_side\": RelationshipSideChoices.OPPOSITE[relationship.required_on],\n\"relationship\": relationship,\n}\n)\n# Get difference of add/remove objects for each required relationship:\nrequired_relationships_to_check = []\nfor required_relationship in required_relationships:\nrequired_field = f\"cr_{required_relationship['key']}__{required_relationship['required_side']}\"\nadd_list = []\nif f\"add_{required_field}\" in self.cleaned_data:\nadd_list = self.cleaned_data[f\"add_{required_field}\"]\nremove_list = []\nif f\"remove_{required_field}\" in self.cleaned_data:\nremove_list = self.cleaned_data[f\"remove_{required_field}\"]\n# Determine difference of add/remove inputs\nto_add = [obj for obj in add_list if obj not in remove_list]\n# If we are adding at least one relationship association (and also not removing it), further validation is\n# not necessary because at least one object is required for every type of required relationship (one-to-one,\n# one-to-many and many-to-many)\nif len(to_add) &gt; 0:\ncontinue\nto_remove = [obj for obj in remove_list if obj not in add_list]\n# Add to list of required relationships to enforce on each object being bulk-edited\nrequired_relationships_to_check.append(\n{\n\"field\": required_field,\n\"to_add\": to_add,\n\"to_remove\": to_remove,\n\"relationship\": required_relationship[\"relationship\"],\n}\n)\nrelationship_data_errors = {}\nfor relationship_to_check in required_relationships_to_check:\nrelationship = relationship_to_check[\"relationship\"]\nfor editing in self.cleaned_data[\"pk\"]:\nrequired_target_side = RelationshipSideChoices.OPPOSITE[relationship.required_on]\nrequired_target_type = getattr(relationship, f\"{required_target_side}_type\")\nrequired_type_verbose_name = required_target_type.model_class()._meta.verbose_name\nfilter_kwargs = {\n\"relationship\": relationship,\nf\"{relationship.required_on}_id\": editing.pk,\n}\nexisting_objects = [\ngetattr(association, f\"get_{RelationshipSideChoices.OPPOSITE[relationship.required_on]}\")()\nfor association in RelationshipAssociation.objects.filter(**filter_kwargs)\n]\nrequires_message = (\nf\"{editing._meta.verbose_name_plural} require a {required_type_verbose_name} \"\nf'for the required relationship \"{str(relationship)}\"'\n)\nif len(existing_objects) == 0 and len(relationship_to_check[\"to_add\"]) == 0:\nrelationship_data_errors.setdefault(requires_message, []).append(str(editing))\nelse:\nremoved = relationship_to_check[\"to_remove\"]\ndifference = [obj for obj in existing_objects if obj not in removed]\nif len(difference) == 0:\nrelationship_data_errors.setdefault(requires_message, []).append(str(editing))\nfor relationship_message, object_list in relationship_data_errors.items():\nif len(object_list) &gt; 5:\nself.add_error(None, f\"{len(object_list)} {relationship_message}\")\nelse:\nself.add_error(None, f\"These {relationship_message}: {', '.join(object_list)}\")\nreturn super().clean()\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.extras.forms.mixins.RelationshipModelBulkEditFormMixin.save_relationships","title":"<code>save_relationships(*, instance, nullified_fields)</code>","text":"<p>Helper method to be called from BulkEditView.post().</p> Source code in <code>nautobot/extras/forms/mixins.py</code> <pre><code>def save_relationships(self, *, instance, nullified_fields):\n\"\"\"Helper method to be called from BulkEditView.post().\"\"\"\n# The below may seem inefficient as it re-loads the Relationship objects afresh for each instance;\n# however this is necessary as it applies the source/destination filters (if any) to determine\n# whether each relationship actually applies to the given instance.\ninstance_relationships = instance.get_relationships(include_hidden=True)\nfor side, relationships_data in instance_relationships.items():\npeer_side = RelationshipSideChoices.OPPOSITE[side]\nfor relationship, relationshipassociation_queryset in relationships_data.items():\nfield_name = f\"cr_{relationship.key}__{peer_side}\"\nlogger.debug(\n\"Processing relationship %s %s (field %s) for instance %s\",\nrelationship,\nside,\nfield_name,\ninstance,\n)\nif field_name in self.nullable_fields and field_name in nullified_fields:\nlogger.debug(\"Deleting existing relationship associations for %s on %s\", relationship, instance)\nrelationshipassociation_queryset.delete()\nelif field_name in self.cleaned_data:\nvalue = self.cleaned_data.get(field_name)\nif value and not relationship.has_many(peer_side):\nra, created = RelationshipAssociation.objects.update_or_create(\nrelationship=relationship,\nsource_type=relationship.source_type,\ndestination_type=relationship.destination_type,\ndefaults={f\"{peer_side}_id\": value.pk},\n**{f\"{side}_id\": instance.pk},\n)\nif created:\nlogger.debug(\"Created %s\", ra)\nelse:\nlogger.debug(\"Updated %s\", ra)\nelse:\nif f\"add_{field_name}\" in self.cleaned_data:\nadded = self.cleaned_data.get(f\"add_{field_name}\")\nfor target in added:\nif peer_side != RelationshipSideChoices.SIDE_PEER:\nra, created = RelationshipAssociation.objects.get_or_create(\nrelationship=relationship,\nsource_type=relationship.source_type,\ndestination_type=relationship.destination_type,\n**{\nf\"{side}_id\": instance.pk,\nf\"{peer_side}_id\": target.pk,\n},\n)\nelse:\nif (\nRelationshipAssociation.objects.filter(\nrelationship=relationship,\nsource_id=instance.pk,\ndestination_id=target.pk,\n).exists()\nor RelationshipAssociation.objects.filter(\nrelationship=relationship,\nsource_id=target.pk,\ndestination_id=instance.pk,\n).exists()\n):\nra = None\ncreated = False\nelse:\nra = RelationshipAssociation.objects.create(\nrelationship=relationship,\nsource_type=relationship.source_type,\nsource_id=instance.pk,\ndestination_type=relationship.destination_type,\ndestination_id=target.pk,\n)\ncreated = True\nif created:\nra.validated_save()\nlogger.debug(\"Created %s\", ra)\nif f\"remove_{field_name}\" in self.cleaned_data:\nremoved = self.cleaned_data.get(f\"remove_{field_name}\")\nsource_count = 0\ndestination_count = 0\nif side in [RelationshipSideChoices.SIDE_SOURCE, RelationshipSideChoices.SIDE_PEER]:\nsource_count, _ = RelationshipAssociation.objects.filter(\nrelationship=relationship,\nsource_id=instance.pk,\ndestination_id__in=[target.pk for target in removed],\n).delete()\nif side in [RelationshipSideChoices.SIDE_DESTINATION, RelationshipSideChoices.SIDE_PEER]:\ndestination_count, _ = RelationshipAssociation.objects.filter(\nrelationship=relationship,\nsource_id__in=[target.pk for target in removed],\ndestination_id=instance.pk,\n).delete()\nlogger.debug(\"Deleted %s RelationshipAssociation(s)\", source_count + destination_count)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.RelationshipModelFilterFormMixin","title":"<code>nautobot.apps.forms.RelationshipModelFilterFormMixin</code>","text":"<p>             Bases: <code>forms.Form</code></p> Source code in <code>nautobot/extras/forms/mixins.py</code> <pre><code>class RelationshipModelFilterFormMixin(forms.Form):\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.relationships = []\nself.obj_type = ContentType.objects.get_for_model(self.model)\nself._append_relationships()\ndef _append_relationships(self):\n\"\"\"\n        Append form fields for all Relationships assigned to this model.\n        \"\"\"\nquery = Q(source_type=self.obj_type, source_hidden=False) | Q(\ndestination_type=self.obj_type, destination_hidden=False\n)\nrelationships = Relationship.objects.select_related(\"source_type\", \"destination_type\").filter(query)\nfor rel in relationships.iterator():\nif rel.source_type == self.obj_type and not rel.source_hidden:\nself._append_relationships_side([rel], RelationshipSideChoices.SIDE_SOURCE)\nif rel.destination_type == self.obj_type and not rel.destination_hidden:\nself._append_relationships_side([rel], RelationshipSideChoices.SIDE_DESTINATION)\ndef _append_relationships_side(self, relationships, initial_side):\n\"\"\"\n        Helper method to _append_relationships, for processing one \"side\" of the relationships for this model.\n        \"\"\"\nfor relationship in relationships:\nif relationship.symmetric:\nside = RelationshipSideChoices.SIDE_PEER\nelse:\nside = initial_side\npeer_side = RelationshipSideChoices.OPPOSITE[side]\n# If this model is on the \"source\" side of the relationship, then the field will be named\n# \"cr_&lt;relationship_key&gt;__destination\" since it's used to pick the destination object(s).\n# If we're on the \"destination\" side, the field will be \"cr_&lt;relationship_key&gt;__source\".\n# For a symmetric relationship, both sides are \"peer\", so the field will be \"cr_&lt;relationship_key&gt;__peer\"\nfield_name = f\"cr_{relationship.key}__{peer_side}\"\nif field_name in self.relationships:\n# This is a symmetric relationship that we already processed from the opposing \"initial_side\".\n# No need to process it a second time!\ncontinue\nself.fields[field_name] = relationship.to_form_field(side=side)\nself.fields[field_name].empty_label = None\nself.relationships.append(field_name)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.RelationshipModelFormMixin","title":"<code>nautobot.apps.forms.RelationshipModelFormMixin</code>","text":"<p>             Bases: <code>forms.ModelForm</code></p> Source code in <code>nautobot/extras/forms/mixins.py</code> <pre><code>class RelationshipModelFormMixin(forms.ModelForm):\ndef __init__(self, *args, **kwargs):\nself.obj_type = ContentType.objects.get_for_model(self._meta.model)\nself.relationships = []\nsuper().__init__(*args, **kwargs)\nself._append_relationships()\ndef _append_relationships(self):\n\"\"\"\n        Append form fields for all Relationships assigned to this model.\n        One form field per side will be added to the list.\n        \"\"\"\nfor side, relationships in self.instance.get_relationships().items():\nfor relationship, queryset in relationships.items():\npeer_side = RelationshipSideChoices.OPPOSITE[side]\n# If this model is on the \"source\" side of the relationship, then the field will be named\n# cr_&lt;relationship_key&gt;__destination since it's used to pick the destination object(s).\n# If we're on the \"destination\" side, the field will be cr_&lt;relationship_key&gt;__source.\n# For a symmetric relationship, both sides are \"peer\", so the field will be cr_&lt;relationship_key&gt;__peer\nfield_name = f\"cr_{relationship.key}__{peer_side}\"\nself.fields[field_name] = relationship.to_form_field(side=side)\n# HTML5 validation for required relationship field:\nif relationship.required_on == side:\nself.fields[field_name].required = True\n# if the object already exists, populate the field with existing values\nif self.instance.present_in_database:\nif relationship.has_many(peer_side):\ninitial = [association.get_peer(self.instance) for association in queryset.all()]\nself.fields[field_name].initial = initial\nelse:\nassociation = queryset.first()\nif association:\nself.fields[field_name].initial = association.get_peer(self.instance)\n# Annotate the field in the list of Relationship form fields\nself.relationships.append(field_name)\ndef clean(self):\n\"\"\"\n        First check for any required relationships errors and if there are any, add them via form field errors.\n        Then verify that any requested RelationshipAssociations do not violate relationship cardinality restrictions.\n        - For TYPE_ONE_TO_MANY and TYPE_ONE_TO_ONE relations, if the form's object is on the \"source\" side of\n          the relationship, verify that the requested \"destination\" object(s) do not already have any existing\n          RelationshipAssociation to a different source object.\n        - For TYPE_ONE_TO_ONE relations, if the form's object is on the \"destination\" side of the relationship,\n          verify that the requested \"source\" object does not have an existing RelationshipAssociation to\n          a different destination object.\n        \"\"\"\nrequired_relationships_errors = self.Meta().model.required_related_objects_errors(\noutput_for=\"ui\", initial_data=self.cleaned_data, instance=self.instance\n)\nfor field, errors in required_relationships_errors.items():\nself.add_error(field, errors)\nfor side, relationships in self.instance.get_relationships().items():\nfor relationship in relationships:\n# The form field name reflects what it provides, i.e. the peer object(s) to link via this relationship.\npeer_side = RelationshipSideChoices.OPPOSITE[side]\nfield_name = f\"cr_{relationship.key}__{peer_side}\"\n# Is the form trying to set this field (create/update a RelationshipAssociation(s))?\n# If not (that is, clearing the field / deleting RelationshipAssociation(s)), we don't need to check.\nif field_name not in self.cleaned_data or not self.cleaned_data[field_name]:\ncontinue\n# Are any of the objects we want a relationship with already entangled with another object?\nif relationship.has_many(peer_side):\ntarget_peers = list(self.cleaned_data[field_name])\nelse:\ntarget_peers = [self.cleaned_data[field_name]]\nfor target_peer in target_peers:\nif target_peer.pk == self.instance.pk:\nraise ValidationError(\n{field_name: f\"Object {self.instance} cannot form a relationship to itself!\"}\n)\nif relationship.has_many(side):\n# No need to check for existing RelationshipAssociations since this is a \"many\" relationship\ncontinue\nif not relationship.symmetric:\nexisting_peer_associations = RelationshipAssociation.objects.filter(\nrelationship=relationship,\n**{\nf\"{peer_side}_id\": target_peer.pk,\n},\n).exclude(**{f\"{side}_id\": self.instance.pk})\nelse:\nexisting_peer_associations = RelationshipAssociation.objects.filter(\n(\n(Q(source_id=target_peer.pk) &amp; ~Q(destination_id=self.instance.pk))\n| (Q(destination_id=target_peer.pk) &amp; ~Q(source_id=self.instance.pk))\n),\nrelationship=relationship,\n)\nif existing_peer_associations.exists():\nraise ValidationError(\n{field_name: f\"{target_peer} is already involved in a {relationship} relationship\"}\n)\nsuper().clean()\ndef _save_relationships(self):\n\"\"\"Update RelationshipAssociations for all Relationships on form save.\"\"\"\nfor field_name in self.relationships:\n# The field name tells us the side of the relationship that it is providing peer objects(s) to link into.\npeer_side = field_name.split(\"__\")[-1]\n# Based on the side of the relationship that our local object represents,\n# find the list of existing RelationshipAssociations it already has for this Relationship.\nside = RelationshipSideChoices.OPPOSITE[peer_side]\nfilters = {\n\"relationship\": self.fields[field_name].model,\n}\nif side != RelationshipSideChoices.SIDE_PEER:\nfilters.update({f\"{side}_type\": self.obj_type, f\"{side}_id\": self.instance.pk})\nexisting_associations = RelationshipAssociation.objects.filter(**filters)\nelse:\nexisting_associations = RelationshipAssociation.objects.filter(\n(\nQ(source_type=self.obj_type, source_id=self.instance.pk)\n| Q(destination_type=self.obj_type, destination_id=self.instance.pk)\n),\n**filters,\n)\n# Get the list of target peer ids (PKs) that are specified in the form\ntarget_peer_ids = []\nif hasattr(self.cleaned_data[field_name], \"__iter__\"):\n# One-to-many or many-to-many association\ntarget_peer_ids = [item.pk for item in self.cleaned_data[field_name]]\nelif self.cleaned_data[field_name]:\n# Many-to-one or one-to-one association\ntarget_peer_ids = [self.cleaned_data[field_name].pk]\nelse:\n# Unset/delete case\ntarget_peer_ids = []\n# Create/delete RelationshipAssociations as needed to match the target_peer_ids list\n# First, for each existing association, if it's one that's already in target_peer_ids,\n# we can discard it from target_peer_ids (no update needed to this association).\n# Conversely, if it's *not* in target_peer_ids, we should delete it.\nfor association in existing_associations:\nfor peer_id in target_peer_ids:\nif peer_side != RelationshipSideChoices.SIDE_PEER:\nif peer_id == getattr(association, f\"{peer_side}_id\"):\n# This association already exists, so we can ignore it\ntarget_peer_ids.remove(peer_id)\nbreak\nelse:\nif peer_id == association.source_id or peer_id == association.destination_id:\n# This association already exists, so we can ignore it\ntarget_peer_ids.remove(peer_id)\nbreak\nelse:\n# This association is not in target_peer_ids, so delete it\nassociation.delete()\n# Anything remaining in target_peer_ids now does not exist yet and needs to be created.\nfor peer_id in target_peer_ids:\nrelationship = self.fields[field_name].model\nif not relationship.symmetric:\nassociation = RelationshipAssociation(\nrelationship=relationship,\n**{\nf\"{side}_type\": self.obj_type,\nf\"{side}_id\": self.instance.pk,\nf\"{peer_side}_type\": getattr(relationship, f\"{peer_side}_type\"),\nf\"{peer_side}_id\": peer_id,\n},\n)\nelse:\n# Symmetric association - source/destination are interchangeable\nassociation = RelationshipAssociation(\nrelationship=relationship,\nsource_type=self.obj_type,\nsource_id=self.instance.pk,\ndestination_type=self.obj_type,  # since this is a symmetric relationship this is OK\ndestination_id=peer_id,\n)\nassociation.clean()\nassociation.save()\ndef save(self, commit=True):\nobj = super().save(commit)\nif commit:\nself._save_relationships()\nreturn obj\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.extras.forms.mixins.RelationshipModelFormMixin.clean","title":"<code>clean()</code>","text":"<p>First check for any required relationships errors and if there are any, add them via form field errors. Then verify that any requested RelationshipAssociations do not violate relationship cardinality restrictions.</p> <ul> <li>For TYPE_ONE_TO_MANY and TYPE_ONE_TO_ONE relations, if the form's object is on the \"source\" side of   the relationship, verify that the requested \"destination\" object(s) do not already have any existing   RelationshipAssociation to a different source object.</li> <li>For TYPE_ONE_TO_ONE relations, if the form's object is on the \"destination\" side of the relationship,   verify that the requested \"source\" object does not have an existing RelationshipAssociation to   a different destination object.</li> </ul> Source code in <code>nautobot/extras/forms/mixins.py</code> <pre><code>def clean(self):\n\"\"\"\n    First check for any required relationships errors and if there are any, add them via form field errors.\n    Then verify that any requested RelationshipAssociations do not violate relationship cardinality restrictions.\n    - For TYPE_ONE_TO_MANY and TYPE_ONE_TO_ONE relations, if the form's object is on the \"source\" side of\n      the relationship, verify that the requested \"destination\" object(s) do not already have any existing\n      RelationshipAssociation to a different source object.\n    - For TYPE_ONE_TO_ONE relations, if the form's object is on the \"destination\" side of the relationship,\n      verify that the requested \"source\" object does not have an existing RelationshipAssociation to\n      a different destination object.\n    \"\"\"\nrequired_relationships_errors = self.Meta().model.required_related_objects_errors(\noutput_for=\"ui\", initial_data=self.cleaned_data, instance=self.instance\n)\nfor field, errors in required_relationships_errors.items():\nself.add_error(field, errors)\nfor side, relationships in self.instance.get_relationships().items():\nfor relationship in relationships:\n# The form field name reflects what it provides, i.e. the peer object(s) to link via this relationship.\npeer_side = RelationshipSideChoices.OPPOSITE[side]\nfield_name = f\"cr_{relationship.key}__{peer_side}\"\n# Is the form trying to set this field (create/update a RelationshipAssociation(s))?\n# If not (that is, clearing the field / deleting RelationshipAssociation(s)), we don't need to check.\nif field_name not in self.cleaned_data or not self.cleaned_data[field_name]:\ncontinue\n# Are any of the objects we want a relationship with already entangled with another object?\nif relationship.has_many(peer_side):\ntarget_peers = list(self.cleaned_data[field_name])\nelse:\ntarget_peers = [self.cleaned_data[field_name]]\nfor target_peer in target_peers:\nif target_peer.pk == self.instance.pk:\nraise ValidationError(\n{field_name: f\"Object {self.instance} cannot form a relationship to itself!\"}\n)\nif relationship.has_many(side):\n# No need to check for existing RelationshipAssociations since this is a \"many\" relationship\ncontinue\nif not relationship.symmetric:\nexisting_peer_associations = RelationshipAssociation.objects.filter(\nrelationship=relationship,\n**{\nf\"{peer_side}_id\": target_peer.pk,\n},\n).exclude(**{f\"{side}_id\": self.instance.pk})\nelse:\nexisting_peer_associations = RelationshipAssociation.objects.filter(\n(\n(Q(source_id=target_peer.pk) &amp; ~Q(destination_id=self.instance.pk))\n| (Q(destination_id=target_peer.pk) &amp; ~Q(source_id=self.instance.pk))\n),\nrelationship=relationship,\n)\nif existing_peer_associations.exists():\nraise ValidationError(\n{field_name: f\"{target_peer} is already involved in a {relationship} relationship\"}\n)\nsuper().clean()\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.ReturnURLForm","title":"<code>nautobot.apps.forms.ReturnURLForm</code>","text":"<p>             Bases: <code>forms.Form</code></p> <p>Provides a hidden return URL field to control where the user is directed after the form is submitted.</p> Source code in <code>nautobot/core/forms/forms.py</code> <pre><code>class ReturnURLForm(forms.Form):\n\"\"\"\n    Provides a hidden return URL field to control where the user is directed after the form is submitted.\n    \"\"\"\nreturn_url = forms.CharField(required=False, widget=forms.HiddenInput())\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.RoleModelBulkEditFormMixin","title":"<code>nautobot.apps.forms.RoleModelBulkEditFormMixin</code>","text":"<p>             Bases: <code>forms.Form</code></p> <p>Mixin to add non-required <code>role</code> choice field to forms.</p> Source code in <code>nautobot/extras/forms/mixins.py</code> <pre><code>class RoleModelBulkEditFormMixin(forms.Form):\n\"\"\"Mixin to add non-required `role` choice field to forms.\"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.fields[\"role\"] = DynamicModelChoiceField(\nrequired=False,\nqueryset=Role.objects.all(),\nquery_params={\"content_types\": self.model._meta.label_lower},\n)\nself.order_fields(self.field_order)  # Reorder fields again\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.RoleModelFilterFormMixin","title":"<code>nautobot.apps.forms.RoleModelFilterFormMixin</code>","text":"<p>             Bases: <code>forms.Form</code></p> <p>Mixin to add non-required <code>role</code> multiple-choice field to filter forms.</p> Source code in <code>nautobot/extras/forms/mixins.py</code> <pre><code>class RoleModelFilterFormMixin(forms.Form):\n\"\"\"\n    Mixin to add non-required `role` multiple-choice field to filter forms.\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.fields[\"role\"] = DynamicModelMultipleChoiceField(\nrequired=False,\nqueryset=Role.objects.all(),\nquery_params={\"content_types\": self.model._meta.label_lower},\nto_field_name=\"name\",\n)\nself.order_fields(self.field_order)  # Reorder fields again\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.SelectWithDisabled","title":"<code>nautobot.apps.forms.SelectWithDisabled</code>","text":"<p>             Bases: <code>forms.Select</code></p> <p>Modified the stock Select widget to accept choices using a dict() for a label. The dict for each option must include 'label' (string) and 'disabled' (boolean).</p> Source code in <code>nautobot/core/forms/widgets.py</code> <pre><code>class SelectWithDisabled(forms.Select):\n\"\"\"\n    Modified the stock Select widget to accept choices using a dict() for a label. The dict for each option must include\n    'label' (string) and 'disabled' (boolean).\n    \"\"\"\noption_template_name = \"widgets/selectwithdisabled_option.html\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.SelectWithPK","title":"<code>nautobot.apps.forms.SelectWithPK</code>","text":"<p>             Bases: <code>StaticSelect2</code></p> <p>Include the primary key of each option in the option label (e.g. \"Router7 (4721)\").</p> Source code in <code>nautobot/core/forms/widgets.py</code> <pre><code>class SelectWithPK(StaticSelect2):\n\"\"\"\n    Include the primary key of each option in the option label (e.g. \"Router7 (4721)\").\n    \"\"\"\noption_template_name = \"widgets/select_option_with_pk.html\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.SlugField","title":"<code>nautobot.apps.forms.SlugField</code>","text":"<p>             Bases: <code>django_forms.SlugField</code></p> <p>Extend the built-in SlugField to automatically populate from a field called <code>name</code> unless otherwise specified.</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>class SlugField(django_forms.SlugField):\n\"\"\"\n    Extend the built-in SlugField to automatically populate from a field called `name` unless otherwise specified.\n    \"\"\"\ndef __init__(self, slug_source=\"name\", *args, **kwargs):\n\"\"\"\n        Instantiate a SlugField.\n        Args:\n            slug_source (str, tuple): Name of the field (or a list of field names) that will be used to suggest a slug.\n        \"\"\"\nkwargs.setdefault(\"label\", \"Slug\")\nkwargs.setdefault(\"help_text\", \"URL-friendly unique shorthand\")\nkwargs.setdefault(\"widget\", forms.SlugWidget)\nsuper().__init__(*args, **kwargs)\nif isinstance(slug_source, (tuple, list)):\nslug_source = \" \".join(slug_source)\nself.widget.attrs[\"slug-source\"] = slug_source\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.core.forms.fields.SlugField.__init__","title":"<code>__init__(slug_source='name', *args, **kwargs)</code>","text":"<p>Instantiate a SlugField.</p> <p>Parameters:</p> Name Type Description Default <code>slug_source</code> <code>(str, tuple)</code> <p>Name of the field (or a list of field names) that will be used to suggest a slug.</p> <code>'name'</code> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>def __init__(self, slug_source=\"name\", *args, **kwargs):\n\"\"\"\n    Instantiate a SlugField.\n    Args:\n        slug_source (str, tuple): Name of the field (or a list of field names) that will be used to suggest a slug.\n    \"\"\"\nkwargs.setdefault(\"label\", \"Slug\")\nkwargs.setdefault(\"help_text\", \"URL-friendly unique shorthand\")\nkwargs.setdefault(\"widget\", forms.SlugWidget)\nsuper().__init__(*args, **kwargs)\nif isinstance(slug_source, (tuple, list)):\nslug_source = \" \".join(slug_source)\nself.widget.attrs[\"slug-source\"] = slug_source\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.SlugWidget","title":"<code>nautobot.apps.forms.SlugWidget</code>","text":"<p>             Bases: <code>forms.TextInput</code></p> <p>Subclass TextInput and add a slug regeneration button next to the form field.</p> Source code in <code>nautobot/core/forms/widgets.py</code> <pre><code>class SlugWidget(forms.TextInput):\n\"\"\"\n    Subclass TextInput and add a slug regeneration button next to the form field.\n    \"\"\"\ntemplate_name = \"widgets/sluginput.html\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.SmallTextarea","title":"<code>nautobot.apps.forms.SmallTextarea</code>","text":"<p>             Bases: <code>forms.Textarea</code></p> <p>Subclass used for rendering a smaller textarea element.</p> Source code in <code>nautobot/core/forms/widgets.py</code> <pre><code>class SmallTextarea(forms.Textarea):\n\"\"\"\n    Subclass used for rendering a smaller textarea element.\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.StaticSelect2","title":"<code>nautobot.apps.forms.StaticSelect2</code>","text":"<p>             Bases: <code>SelectWithDisabled</code></p> <p>A static  form widget using the Select2 library. Source code in <code>nautobot/core/forms/widgets.py</code> <pre><code>class StaticSelect2(SelectWithDisabled):\n\"\"\"\n    A static &lt;select&gt; form widget using the Select2 library.\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.attrs[\"class\"] = \"nautobot-select2-static\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.StatusModelBulkEditFormMixin","title":"<code>nautobot.apps.forms.StatusModelBulkEditFormMixin</code>","text":"<p>             Bases: <code>forms.Form</code></p> <p>Mixin to add non-required <code>status</code> choice field to forms.</p> Source code in <code>nautobot/extras/forms/mixins.py</code> <pre><code>class StatusModelBulkEditFormMixin(forms.Form):\n\"\"\"Mixin to add non-required `status` choice field to forms.\"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.fields[\"status\"] = DynamicModelChoiceField(\nrequired=False,\nqueryset=Status.objects.all(),\nquery_params={\"content_types\": self.model._meta.label_lower},\n)\nself.order_fields(self.field_order)  # Reorder fields again\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.StatusModelFilterFormMixin","title":"<code>nautobot.apps.forms.StatusModelFilterFormMixin</code>","text":"<p>             Bases: <code>forms.Form</code></p> <p>Mixin to add non-required <code>status</code> multiple-choice field to filter forms.</p> Source code in <code>nautobot/extras/forms/mixins.py</code> <pre><code>class StatusModelFilterFormMixin(forms.Form):\n\"\"\"\n    Mixin to add non-required `status` multiple-choice field to filter forms.\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.fields[\"status\"] = DynamicModelMultipleChoiceField(\nrequired=False,\nqueryset=Status.objects.all(),\nquery_params={\"content_types\": self.model._meta.label_lower},\nto_field_name=\"name\",\n)\nself.order_fields(self.field_order)  # Reorder fields again\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.TableConfigForm","title":"<code>nautobot.apps.forms.TableConfigForm</code>","text":"<p>             Bases: <code>BootstrapMixin</code>, <code>forms.Form</code></p> <p>Form for configuring user's table preferences.</p> Source code in <code>nautobot/core/forms/forms.py</code> <pre><code>class TableConfigForm(BootstrapMixin, forms.Form):\n\"\"\"\n    Form for configuring user's table preferences.\n    \"\"\"\ncolumns = forms.MultipleChoiceField(\nchoices=[],\nrequired=False,\nwidget=forms.SelectMultiple(attrs={\"size\": 10}),\nhelp_text=\"Use the buttons below to arrange columns in the desired order, then select all columns to display.\",\n)\ndef __init__(self, table, *args, **kwargs):\nself.table = table\nsuper().__init__(*args, **kwargs)\n# Initialize columns field based on table attributes\nself.fields[\"columns\"].choices = table.configurable_columns\nself.fields[\"columns\"].initial = table.visible_columns\n@property\ndef table_name(self):\nreturn self.table.__class__.__name__\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.TagFilterField","title":"<code>nautobot.apps.forms.TagFilterField</code>","text":"<p>             Bases: <code>DynamicModelMultipleChoiceField</code></p> <p>A filter field for the tags of a model. Only the tags used by a model are displayed.</p> <p>:param model: The model of the filter</p> Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>class TagFilterField(DynamicModelMultipleChoiceField):\n\"\"\"\n    A filter field for the tags of a model. Only the tags used by a model are displayed.\n    :param model: The model of the filter\n    \"\"\"\ndef __init__(self, model, *args, query_params=None, queryset=None, **kwargs):\nfrom nautobot.extras.models import Tag\nif queryset is None:\nqueryset = Tag.objects.get_for_model(model)\nquery_params = query_params or {}\nquery_params.update({\"content_types\": model._meta.label_lower})\nsuper().__init__(\nlabel=\"Tags\",\nquery_params=query_params,\nqueryset=queryset,\nrequired=False,\nto_field_name=\"name\",\n*args,\n**kwargs,\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.core.forms.fields.TagFilterField.__init__","title":"<code>__init__(model, *args, query_params=None, queryset=None, **kwargs)</code>","text":"Source code in <code>nautobot/core/forms/fields.py</code> <pre><code>def __init__(self, model, *args, query_params=None, queryset=None, **kwargs):\nfrom nautobot.extras.models import Tag\nif queryset is None:\nqueryset = Tag.objects.get_for_model(model)\nquery_params = query_params or {}\nquery_params.update({\"content_types\": model._meta.label_lower})\nsuper().__init__(\nlabel=\"Tags\",\nquery_params=query_params,\nqueryset=queryset,\nrequired=False,\nto_field_name=\"name\",\n*args,\n**kwargs,\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.TimePicker","title":"<code>nautobot.apps.forms.TimePicker</code>","text":"<p>             Bases: <code>forms.TextInput</code></p> <p>Time picker using Flatpickr.</p> Source code in <code>nautobot/core/forms/widgets.py</code> <pre><code>class TimePicker(forms.TextInput):\n\"\"\"\n    Time picker using Flatpickr.\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.attrs[\"class\"] = \"time-picker\"\nself.attrs[\"placeholder\"] = \"hh:mm:ss\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.add_blank_choice","title":"<code>nautobot.apps.forms.add_blank_choice(choices)</code>","text":"<p>Add a blank choice to the beginning of a choices list.</p> Source code in <code>nautobot/core/forms/utils.py</code> <pre><code>def add_blank_choice(choices):\n\"\"\"\n    Add a blank choice to the beginning of a choices list.\n    \"\"\"\nreturn ((None, \"---------\"),) + tuple(choices)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.add_field_to_filter_form_class","title":"<code>nautobot.apps.forms.add_field_to_filter_form_class(form_class, field_name, field_obj)</code>","text":"<p>Attach a field to an existing filter form class.</p> Source code in <code>nautobot/core/forms/utils.py</code> <pre><code>def add_field_to_filter_form_class(form_class, field_name, field_obj):\n\"\"\"\n    Attach a field to an existing filter form class.\n    \"\"\"\nif not isinstance(field_obj, django_forms.Field):\nraise TypeError(f\"Custom form field `{field_name}` is not an instance of django.forms.Field.\")\nif field_name in form_class.base_fields:\nraise AttributeError(\nf\"There was a conflict with filter form field `{field_name}`, the custom filter form field was ignored.\"\n)\nform_class.base_fields[field_name] = field_obj\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.expand_alphanumeric_pattern","title":"<code>nautobot.apps.forms.expand_alphanumeric_pattern(string)</code>","text":"<p>Expand an alphabetic pattern into a list of strings.</p> Source code in <code>nautobot/core/forms/utils.py</code> <pre><code>def expand_alphanumeric_pattern(string):\n\"\"\"\n    Expand an alphabetic pattern into a list of strings.\n    \"\"\"\nlead, pattern, remnant = re.split(forms.ALPHANUMERIC_EXPANSION_PATTERN, string, maxsplit=1)\nparsed_range = parse_alphanumeric_range(pattern)\nfor i in parsed_range:\nif re.search(forms.ALPHANUMERIC_EXPANSION_PATTERN, remnant):\nfor string2 in expand_alphanumeric_pattern(remnant):\nyield f\"{lead}{i}{string2}\"\nelse:\nyield f\"{lead}{i}{remnant}\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.expand_ipaddress_pattern","title":"<code>nautobot.apps.forms.expand_ipaddress_pattern(string, ip_version)</code>","text":"<p>Expand an IP address pattern into a list of strings. Examples:   '192.0.2.[1,2,100-250]/24' =&gt; ['192.0.2.1/24', '192.0.2.2/24', '192.0.2.100/24' ... '192.0.2.250/24']   '2001:db8:0:[0,fd-ff]::/64' =&gt; ['2001:db8:0:0::/64', '2001:db8:0:fd::/64', ... '2001:db8:0:ff::/64']</p> Source code in <code>nautobot/core/forms/utils.py</code> <pre><code>def expand_ipaddress_pattern(string, ip_version):\n\"\"\"\n    Expand an IP address pattern into a list of strings. Examples:\n      '192.0.2.[1,2,100-250]/24' =&gt; ['192.0.2.1/24', '192.0.2.2/24', '192.0.2.100/24' ... '192.0.2.250/24']\n      '2001:db8:0:[0,fd-ff]::/64' =&gt; ['2001:db8:0:0::/64', '2001:db8:0:fd::/64', ... '2001:db8:0:ff::/64']\n    \"\"\"\nif ip_version not in [4, 6]:\nraise ValueError(f\"Invalid IP address version: {ip_version}\")\nif ip_version == 4:\nregex = forms.IP4_EXPANSION_PATTERN\nbase = 10\nelse:\nregex = forms.IP6_EXPANSION_PATTERN\nbase = 16\nlead, pattern, remnant = re.split(regex, string, maxsplit=1)\nparsed_range = parse_numeric_range(pattern, base)\nfor i in parsed_range:\nif re.search(regex, remnant):\nfor string2 in expand_ipaddress_pattern(remnant, ip_version):\nyield \"\".join([lead, format(i, \"x\" if ip_version == 6 else \"d\"), string2])\nelse:\nyield \"\".join([lead, format(i, \"x\" if ip_version == 6 else \"d\"), remnant])\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.form_from_model","title":"<code>nautobot.apps.forms.form_from_model(model, fields)</code>","text":"<p>Return a Form class with the specified fields derived from a model. This is useful when we need a form to be used for creating objects, but want to avoid the model's validation (e.g. for bulk create/edit functions). All fields are marked as not required.</p> Source code in <code>nautobot/core/forms/utils.py</code> <pre><code>def form_from_model(model, fields):\n\"\"\"\n    Return a Form class with the specified fields derived from a model. This is useful when we need a form to be used\n    for creating objects, but want to avoid the model's validation (e.g. for bulk create/edit functions). All fields\n    are marked as not required.\n    \"\"\"\nform_fields = fields_for_model(model, fields=fields)\nfor field in form_fields.values():\nfield.required = False\nreturn type(\"FormFromModel\", (django_forms.Form,), form_fields)\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.parse_alphanumeric_range","title":"<code>nautobot.apps.forms.parse_alphanumeric_range(string)</code>","text":"<p>Expand an alphanumeric range (continuous or not) into a list. 'a-d,f' =&gt; [a, b, c, d, f] '0-3,a-d' =&gt; [0, 1, 2, 3, a, b, c, d]</p> Source code in <code>nautobot/core/forms/utils.py</code> <pre><code>def parse_alphanumeric_range(string):\n\"\"\"\n    Expand an alphanumeric range (continuous or not) into a list.\n    'a-d,f' =&gt; [a, b, c, d, f]\n    '0-3,a-d' =&gt; [0, 1, 2, 3, a, b, c, d]\n    \"\"\"\nvalues = []\nfor dash_range in string.split(\",\"):\ntry:\nbegin, end = dash_range.split(\"-\")\nvals = begin + end\n# Break out of loop if there's an invalid pattern to return an error\nif (not (vals.isdigit() or vals.isalpha())) or (vals.isalpha() and not (vals.isupper() or vals.islower())):\nreturn []\nexcept ValueError:\nbegin, end = dash_range, dash_range\nif begin.isdigit() and end.isdigit():\nfor n in list(range(int(begin), int(end) + 1)):\nvalues.append(n)\nelse:\n# Value-based\nif begin == end:\nvalues.append(begin)\n# Range-based\nelse:\n# Not a valid range (more than a single character)\nif not len(begin) == len(end) == 1:\nraise django_forms.ValidationError(f'Range \"{dash_range}\" is invalid.')\nfor n in list(range(ord(begin), ord(end) + 1)):\nvalues.append(chr(n))\nreturn values\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.parse_numeric_range","title":"<code>nautobot.apps.forms.parse_numeric_range(string, base=10)</code>","text":"<p>Expand a numeric range (continuous or not) into a decimal or hexadecimal list, as specified by the base parameter   '0-3,5' =&gt; [0, 1, 2, 3, 5]   '2,8-b,d,f' =&gt; [2, 8, 9, a, b, d, f]</p> Source code in <code>nautobot/core/forms/utils.py</code> <pre><code>def parse_numeric_range(string, base=10):\n\"\"\"\n    Expand a numeric range (continuous or not) into a decimal or\n    hexadecimal list, as specified by the base parameter\n      '0-3,5' =&gt; [0, 1, 2, 3, 5]\n      '2,8-b,d,f' =&gt; [2, 8, 9, a, b, d, f]\n    \"\"\"\nvalues = []\nif not string:\nreturn values\nfor dash_range in string.split(\",\"):\ntry:\nbegin, end = dash_range.split(\"-\")\nexcept ValueError:\nbegin, end = dash_range, dash_range\nbegin, end = int(begin.strip(), base=base), int(end.strip(), base=base) + 1\nvalues.extend(range(begin, end))\nreturn list(set(values))\n</code></pre>"},{"location":"code-reference/nautobot/apps/forms.html#nautobot.apps.forms.restrict_form_fields","title":"<code>nautobot.apps.forms.restrict_form_fields(form, user, action='view')</code>","text":"<p>Restrict all form fields which reference a RestrictedQuerySet. This ensures that users see only permitted objects as available choices.</p> Source code in <code>nautobot/core/forms/utils.py</code> <pre><code>def restrict_form_fields(form, user, action=\"view\"):\n\"\"\"\n    Restrict all form fields which reference a RestrictedQuerySet. This ensures that users see only permitted objects\n    as available choices.\n    \"\"\"\nfor field in form.fields.values():\nif hasattr(field, \"queryset\") and issubclass(field.queryset.__class__, querysets.RestrictedQuerySet):\nfield.queryset = field.queryset.restrict(user, action)\n</code></pre>"},{"location":"code-reference/nautobot/apps/graphql.html","title":"nautobot.apps.graphql","text":""},{"location":"code-reference/nautobot/apps/graphql.html#nautobot.apps.graphql","title":"<code>nautobot.apps.graphql</code>","text":"<p>GraphQL API for Nautobot.</p>"},{"location":"code-reference/nautobot/apps/graphql.html#nautobot.apps.graphql.BigInteger","title":"<code>nautobot.apps.graphql.BigInteger</code>","text":"<p>             Bases: <code>Scalar</code></p> <p>An integer which, unlike GraphQL's native Int type, doesn't reject values outside (-2^31, 2^31-1).</p> <p>Currently only used for ASNField, which goes up to 2^32-1 (i.e., unsigned 32-bit int); it's possible that this approach may fail for values in excess of 2^53-1 (the largest integer value supported in JavaScript).</p> Source code in <code>nautobot/core/graphql/__init__.py</code> <pre><code>class BigInteger(Scalar):\n\"\"\"An integer which, unlike GraphQL's native Int type, doesn't reject values outside (-2^31, 2^31-1).\n    Currently only used for ASNField, which goes up to 2^32-1 (i.e., unsigned 32-bit int); it's possible\n    that this approach may fail for values in excess of 2^53-1 (the largest integer value supported in JavaScript).\n    \"\"\"\nserialize = int\nparse_value = int\n@staticmethod\ndef parse_literal(node):\nif isinstance(node, ast.IntValue):\nreturn int(node.value)\nreturn None\n</code></pre>"},{"location":"code-reference/nautobot/apps/graphql.html#nautobot.apps.graphql.ContentTypeType","title":"<code>nautobot.apps.graphql.ContentTypeType</code>","text":"<p>             Bases: <code>OptimizedNautobotObjectType</code></p> <p>Graphene-Django object type for ContentType records.</p> <p>Needed because ContentType is a built-in model, not one that we own and can auto-generate types for.</p> Source code in <code>nautobot/core/graphql/types.py</code> <pre><code>class ContentTypeType(OptimizedNautobotObjectType):\n\"\"\"\n    Graphene-Django object type for ContentType records.\n    Needed because ContentType is a built-in model, not one that we own and can auto-generate types for.\n    \"\"\"\nclass Meta:\nmodel = ContentType\n</code></pre>"},{"location":"code-reference/nautobot/apps/graphql.html#nautobot.apps.graphql.construct_resolver","title":"<code>nautobot.apps.graphql.construct_resolver(model_name, resolver_type)</code>","text":"<p>Constructs a resolve_[cable_peer|connected_endpoint]_ function for a given model type. <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>Name of the model to construct a resolver function for (e.g. CircuitTermination).</p> required <code>resolver_type</code> <code>str</code> <p>One of ['connected_endpoint', 'cable_peer']</p> required Source code in <code>nautobot/core/graphql/utils.py</code> <pre><code>def construct_resolver(model_name, resolver_type):\n\"\"\"Constructs a resolve_[cable_peer|connected_endpoint]_&lt;endpoint&gt; function for a given model type.\n    Args:\n        model_name (str): Name of the model to construct a resolver function for (e.g. CircuitTermination).\n        resolver_type (str): One of ['connected_endpoint', 'cable_peer']\n    \"\"\"\nif resolver_type == \"cable_peer\":\ndef resolve_cable_peer(self, args):\npeer = self.get_cable_peer()\nif type(peer).__name__ == model_name:\nreturn peer\nreturn None\nreturn resolve_cable_peer\nif resolver_type == \"connected_endpoint\":\ndef resolve_connected_endpoint(self, args):\npeer = self.connected_endpoint\nif type(peer).__name__ == model_name:\nreturn peer\nreturn None\nreturn resolve_connected_endpoint\nraise ValueError(f\"resolver_type must be 'cable_peer' or 'connected_endpoint', not '{resolver_type}'\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/graphql.html#nautobot.apps.graphql.execute_query","title":"<code>nautobot.apps.graphql.execute_query(query, variables=None, request=None, user=None)</code>","text":"<p>Execute a query from the ORM.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>String with GraphQL query.</p> required <code>variables</code> <code>dict</code> <p>If the query has variables they need to be passed in as a dictionary.</p> <code>None</code> <code>request</code> <code>django.test.client.RequestFactory</code> <p>Used to authenticate.</p> <code>None</code> <code>user</code> <code>django.contrib.auth.models.User</code> <p>Used to authenticate.</p> <code>None</code> <p>Returns:</p> Type Description <code>GraphQLDocument</code> <p>Result for query</p> Source code in <code>nautobot/core/graphql/__init__.py</code> <pre><code>def execute_query(query, variables=None, request=None, user=None):\n\"\"\"Execute a query from the ORM.\n    Args:\n        query (str): String with GraphQL query.\n        variables (dict, optional): If the query has variables they need to be passed in as a dictionary.\n        request (django.test.client.RequestFactory, optional): Used to authenticate.\n        user (django.contrib.auth.models.User, optional): Used to authenticate.\n    Returns:\n        (GraphQLDocument): Result for query\n    \"\"\"\nif not request and not user:\nraise ValueError(\"Either request or username should be provided\")\nif not request:\nrequest = RequestFactory().post(\"/graphql/\")\nrequest.user = user\nbackend = get_default_backend()\nschema = graphene_settings.SCHEMA\ndocument = backend.document_from_string(schema, query)\nif variables:\nreturn document.execute(context_value=request, variable_values=variables)\nelse:\nreturn document.execute(context_value=request)\n</code></pre>"},{"location":"code-reference/nautobot/apps/graphql.html#nautobot.apps.graphql.execute_saved_query","title":"<code>nautobot.apps.graphql.execute_saved_query(saved_query_name, **kwargs)</code>","text":"<p>Execute saved query from the ORM.</p> <p>Parameters:</p> Name Type Description Default <code>saved_query_name</code> <code>str</code> <p>Name of a saved GraphQL query.</p> required <p>Other Parameters:</p> Name Type Description <code>variables</code> <code>Optional[dict]</code> <p>If the query has variables they need to be passed in as a dictionary.</p> <code>request</code> <code>Optional[django.test.client.RequestFactory]</code> <p>Used to authenticate.</p> <code>user</code> <code>Optional[django.contrib.auth.models.User]</code> <p>Used to authenticate.</p> <p>Returns:</p> Type Description <code>GraphQLDocument</code> <p>Result for query</p> Source code in <code>nautobot/core/graphql/__init__.py</code> <pre><code>def execute_saved_query(saved_query_name, **kwargs):\n\"\"\"Execute saved query from the ORM.\n    Args:\n        saved_query_name (str): Name of a saved GraphQL query.\n    Keyword Args:\n        variables (Optional[dict]): If the query has variables they need to be passed in as a dictionary.\n        request (Optional[django.test.client.RequestFactory]): Used to authenticate.\n        user (Optional[django.contrib.auth.models.User]): Used to authenticate.\n    Returns:\n        (GraphQLDocument): Result for query\n    \"\"\"\nquery = GraphQLQuery.objects.get(name=saved_query_name)\nreturn execute_query(query=query.query, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/graphql.html#nautobot.apps.graphql.get_filtering_args_from_filterset","title":"<code>nautobot.apps.graphql.get_filtering_args_from_filterset(filterset_class)</code>","text":"<p>Generate a list of filter arguments from a filterset.</p> <p>The FilterSet class will be instantiated before extracting the list of arguments to account for dynamic filters, inserted when the class is instantiated. (required for Custom Fields filters).</p> <p>Filter fields that are inheriting from BooleanFilter and NumberFilter will be converted to their appropriate type, everything else will be of type String. if the filter field is a subclass of MultipleChoiceFilter, the argument will be converted as a list</p> <p>Parameters:</p> Name Type Description Default <code>filterset_class</code> <code>FilterSet</code> <p>FilterSet class used to extract the argument</p> required <p>Returns:</p> Type Description <code>dict[graphene.Argument]</code> <p>Filter Arguments organized in a dictionary</p> Source code in <code>nautobot/core/graphql/utils.py</code> <pre><code>def get_filtering_args_from_filterset(filterset_class):\n\"\"\"Generate a list of filter arguments from a filterset.\n    The FilterSet class will be instantiated before extracting the list of arguments to\n    account for dynamic filters, inserted when the class is instantiated. (required for Custom Fields filters).\n    Filter fields that are inheriting from BooleanFilter and NumberFilter will be converted\n    to their appropriate type, everything else will be of type String.\n    if the filter field is a subclass of MultipleChoiceFilter, the argument will be converted as a list\n    Args:\n        filterset_class (FilterSet): FilterSet class used to extract the argument\n    Returns:\n        (dict[graphene.Argument]): Filter Arguments organized in a dictionary\n    \"\"\"\nargs = {}\ninstance = filterset_class()\nfor filter_name, filter_field in instance.filters.items():\n# For general safety, but especially for the case of custom fields\n# (https://github.com/nautobot/nautobot/issues/464)\n# We don't have a way to map a GraphQL-sanitized filter name (such as \"cf_my_custom_field\") back to the\n# actual filter name (such as \"cf_my-custom-field\"), so if the sanitized filter name doesn't match the original\n# filter name, we just have to omit it for now. Better that than advertise a filter that doesn't actually work!\nif str_to_var_name(filter_name) != filter_name:\nlogger.warning(\n'Filter \"%s\" on %s is not GraphQL safe, and will be omitted', filter_name, filterset_class.__name__\n)\ncontinue\nfield_type = graphene.String\nfilter_field_class = type(filter_field)\nif issubclass(filter_field_class, MultiValueBigNumberFilter):\nfield_type = graphene.List(BigInteger)\nelif issubclass(filter_field_class, (MultiValueFloatFilter, MultiValueDecimalFilter)):\nfield_type = graphene.List(graphene.Float)\nelif issubclass(filter_field_class, MultiValueNumberFilter):\nfield_type = graphene.List(graphene.Int)\nelse:\nif issubclass(filter_field_class, BooleanFilter):\nfield_type = graphene.Boolean\nelif issubclass(filter_field_class, NumberFilter):\nfield_type = graphene.Int\nelse:\nfield_type = graphene.String\nif issubclass(filter_field_class, MultipleChoiceFilter):\nfield_type = graphene.List(field_type)\nargs[filter_name] = graphene.Argument(\nfield_type,\ndescription=filter_field.label,\nrequired=False,\n)\n# Hack to swap `type` fields to `_type` since they will conflict with\n# `graphene.types.fields.Field.type` in Graphene 2.x.\n# 2.0 TODO(jathan): Once we upgrade to Graphene 3.x we can remove this, but we\n# will still need to do an API migration to deprecate it. This argument was\n# validated to be safe to keep even in Graphene 3.\nif \"type\" in args:\nargs[\"_type\"] = args.pop(\"type\")\nreturn args\n</code></pre>"},{"location":"code-reference/nautobot/apps/graphql.html#nautobot.apps.graphql.str_to_var_name","title":"<code>nautobot.apps.graphql.str_to_var_name(verbose_name)</code>","text":"<p>Convert a string to a variable compatible name.</p> <p>Examples:</p> <p>IP Addresses &gt; ip_addresses</p> Source code in <code>nautobot/core/graphql/utils.py</code> <pre><code>def str_to_var_name(verbose_name):\n\"\"\"Convert a string to a variable compatible name.\n    Examples:\n        IP Addresses &gt; ip_addresses\n    \"\"\"\nreturn slugify_dashes_to_underscores(verbose_name)\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html","title":"nautobot.apps.jobs","text":""},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.apps.jobs","title":"<code>nautobot.apps.jobs</code>","text":"<p>Nautobot Jobs API.</p>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.apps.jobs.BaseJob","title":"<code>nautobot.apps.jobs.BaseJob</code>","text":"<p>             Bases: <code>Task</code></p> <p>Base model for jobs.</p> <p>Users can subclass this directly if they want to provide their own base class for implementing multiple jobs with shared functionality; if no such sharing is required, use Job class instead.</p> <p>Jobs must define at minimum a run method.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>class BaseJob(Task):\n\"\"\"Base model for jobs.\n    Users can subclass this directly if they want to provide their own base class for implementing multiple jobs\n    with shared functionality; if no such sharing is required, use Job class instead.\n    Jobs must define at minimum a run method.\n    \"\"\"\nclass Meta:\n\"\"\"\n        Metaclass attributes - subclasses can define any or all of the following attributes:\n        - name (str)\n        - description (str)\n        - hidden (bool)\n        - field_order (list)\n        - approval_required (bool)\n        - soft_time_limit (int)\n        - time_limit (int)\n        - has_sensitive_variables (bool)\n        - task_queues (list)\n        \"\"\"\ndef __init__(self):\nself.logger = get_task_logger(self.__module__)\ndef __call__(self, *args, **kwargs):\n# Attempt to resolve serialized data back into original form by creating querysets or model instances\n# If we fail to find any objects, we consider this a job execution error, and fail.\n# This might happen when a job sits on the queue for a while (i.e. scheduled) and data has changed\n# or it might be bad input from an API request, or manual execution.\ntry:\ndeserialized_kwargs = self.deserialize_data(kwargs)\nexcept Exception as err:\nraise RunJobTaskFailed(\"Error initializing job\") from err\nif isinstance(self, JobHookReceiver):\nchange_context = ObjectChangeEventContextChoices.CONTEXT_JOB_HOOK\nelse:\nchange_context = ObjectChangeEventContextChoices.CONTEXT_JOB\nwith web_request_context(user=self.user, context_detail=self.class_path, context=change_context):\nif self.celery_kwargs.get(\"nautobot_job_profile\", False) is True:\nimport cProfile\n# TODO: This should probably be available as a file download rather than dumped to the hard drive.\n# Pending this: https://github.com/nautobot/nautobot/issues/3352\nprofiling_path = f\"{tempfile.gettempdir()}/nautobot-jobresult-{self.job_result.id}.pstats\"\nself.logger.info(\n\"Writing profiling information to %s.\", profiling_path, extra={\"grouping\": \"initialization\"}\n)\nwith cProfile.Profile() as pr:\ntry:\noutput = self.run(*args, **deserialized_kwargs)\nexcept Exception as err:\npr.dump_stats(profiling_path)\nraise err\nelse:\npr.dump_stats(profiling_path)\nreturn output\nelse:\nreturn self.run(*args, **deserialized_kwargs)\ndef __str__(self):\nreturn str(self.name)\n# See https://github.com/PyCQA/pylint-django/issues/240 for why we have a pylint disable on each classproperty below\n# TODO(jathan): Could be interesting for custom stuff when the Job is\n# enabled in the database and then therefore registered in Celery\n@classmethod\ndef on_bound(cls, app):\n\"\"\"Called when the task is bound to an app.\n        Note:\n            This class method can be defined to do additional actions when\n            the task class is bound to an app.\n        \"\"\"\n# TODO(jathan): Could be interesting for showing the Job's class path as the\n# shadow name vs. the Celery task_name?\ndef shadow_name(self, args, kwargs, options):\n\"\"\"Override for custom task name in worker logs/monitoring.\n        Example:\n                from celery.utils.imports import qualname\n                def shadow_name(task, args, kwargs, options):\n                    return qualname(args[0])\n                @app.task(shadow_name=shadow_name, serializer='pickle')\n                def apply_function_async(fun, *args, **kwargs):\n                    return fun(*args, **kwargs)\n        Arguments:\n            args (Tuple): Task positional arguments.\n            kwargs (Dict): Task keyword arguments.\n            options (Dict): Task execution options.\n        \"\"\"\ndef before_start(self, task_id, args, kwargs):\n\"\"\"Handler called before the task starts.\n        Arguments:\n            task_id (str): Unique id of the task to execute.\n            args (Tuple): Original arguments for the task to execute.\n            kwargs (Dict): Original keyword arguments for the task to execute.\n        Returns:\n            (None): The return value of this handler is ignored.\n        \"\"\"\nself.clear_cache()\ntry:\nself.job_result\nexcept ObjectDoesNotExist as err:\nraise RunJobTaskFailed(f\"Unable to find associated job result for job {task_id}\") from err\ntry:\nself.job_model\nexcept ObjectDoesNotExist as err:\nraise RunJobTaskFailed(f\"Unable to find associated job model for job {task_id}\") from err\nif not self.job_model.enabled:\nself.logger.error(\n\"Job %s is not enabled to be run!\",\nself.job_model,\nextra={\"object\": self.job_model, \"grouping\": \"initialization\"},\n)\nraise RunJobTaskFailed(f\"Job {self.job_model} is not enabled to be run!\")\nsoft_time_limit = self.job_model.soft_time_limit or settings.CELERY_TASK_SOFT_TIME_LIMIT\ntime_limit = self.job_model.time_limit or settings.CELERY_TASK_TIME_LIMIT\nif time_limit &lt;= soft_time_limit:\nself.logger.warning(\n\"The hard time limit of %s seconds is less than \"\n\"or equal to the soft time limit of %s seconds. \"\n\"This job will fail silently after %s seconds.\",\ntime_limit,\nsoft_time_limit,\ntime_limit,\nextra={\"grouping\": \"initialization\"},\n)\nself.logger.info(\"Running job\", extra={\"grouping\": \"initialization\"})\ndef run(self, *args, **kwargs):\n\"\"\"\n        Method invoked when this Job is run.\n        \"\"\"\nraise NotImplementedError(\"Jobs must define the run method.\")\ndef on_success(self, retval, task_id, args, kwargs):\n\"\"\"Success handler.\n        Run by the worker if the task executes successfully.\n        Arguments:\n            retval (Any): The return value of the task.\n            task_id (str): Unique id of the executed task.\n            args (Tuple): Original arguments for the executed task.\n            kwargs (Dict): Original keyword arguments for the executed task.\n        Returns:\n            (None): The return value of this handler is ignored.\n        \"\"\"\ndef on_retry(self, exc, task_id, args, kwargs, einfo):\n\"\"\"Retry handler.\n        This is run by the worker when the task is to be retried.\n        Arguments:\n            exc (Exception): The exception sent to :meth:`retry`.\n            task_id (str): Unique id of the retried task.\n            args (Tuple): Original arguments for the retried task.\n            kwargs (Dict): Original keyword arguments for the retried task.\n            einfo (~billiard.einfo.ExceptionInfo): Exception information.\n        Returns:\n            (None): The return value of this handler is ignored.\n        \"\"\"\ndef on_failure(self, exc, task_id, args, kwargs, einfo):\n\"\"\"Error handler.\n        This is run by the worker when the task fails.\n        Arguments:\n            exc (Exception): The exception raised by the task.\n            task_id (str): Unique id of the failed task.\n            args (Tuple): Original arguments for the task that failed.\n            kwargs (Dict): Original keyword arguments for the task that failed.\n            einfo (~billiard.einfo.ExceptionInfo): Exception information.\n        Returns:\n            (None): The return value of this handler is ignored.\n        \"\"\"\ndef after_return(self, status, retval, task_id, args, kwargs, einfo):\n\"\"\"\n        Handler called after the task returns.\n        Parameters\n            status - Current task state.\n            retval - Task return value/exception.\n            task_id - Unique id of the task.\n            args - Original arguments for the task that returned.\n            kwargs - Original keyword arguments for the task that returned.\n        Keyword Arguments\n            einfo - ExceptionInfo instance, containing the traceback (if any).\n        Returns:\n            (None): The return value of this handler is ignored.\n        \"\"\"\n# Cleanup FileProxy objects\nfile_fields = list(self._get_file_vars())\nfile_ids = [kwargs[f] for f in file_fields]\nif file_ids:\nself.delete_files(*file_ids)\nself.logger.info(\"Job completed\", extra={\"grouping\": \"post_run\"})\n# TODO(gary): document this in job author docs\n# Super.after_return must be called for chords to function properly\nsuper().after_return(status, retval, task_id, args, kwargs, einfo=einfo)\ndef apply(\nself,\nargs=None,\nkwargs=None,\nlink=None,\nlink_error=None,\ntask_id=None,\nretries=None,\nthrow=None,\nlogfile=None,\nloglevel=None,\nheaders=None,\n**options,\n):\n\"\"\"Fix celery's apply method to propagate options to the task result\"\"\"\n# trace imports Task, so need to import inline.\nfrom celery.app.trace import build_tracer\napp = self._get_app()\nargs = args or ()\nkwargs = kwargs or {}\ntask_id = task_id or uuid()\nretries = retries or 0\nif throw is None:\nthrow = app.conf.task_eager_propagates\n# Make sure we get the task instance, not class.\ntask = app._tasks[self.name]\nrequest = {\n\"id\": task_id,\n\"retries\": retries,\n\"is_eager\": True,\n\"logfile\": logfile,\n\"loglevel\": loglevel or 0,\n\"hostname\": gethostname(),\n\"callbacks\": maybe_list(link),\n\"errbacks\": maybe_list(link_error),\n\"headers\": headers,\n\"ignore_result\": options.get(\"ignore_result\", False),\n\"delivery_info\": {\n\"is_eager\": True,\n\"exchange\": options.get(\"exchange\"),\n\"routing_key\": options.get(\"routing_key\"),\n\"priority\": options.get(\"priority\"),\n},\n\"properties\": options,  # one line fix to overloaded method\n}\nif \"stamped_headers\" in options:\nrequest[\"stamped_headers\"] = maybe_list(options[\"stamped_headers\"])\nrequest[\"stamps\"] = {header: maybe_list(options.get(header, [])) for header in request[\"stamped_headers\"]}\ntb = None\ntracer = build_tracer(\ntask.name,\ntask,\neager=True,\npropagate=throw,\napp=self._get_app(),\n)\nret = tracer(task_id, args, kwargs, request)\nretval = ret.retval\nif isinstance(retval, ExceptionInfo):\nretval, tb = retval.exception, retval.traceback\nif isinstance(retval, ExceptionWithTraceback):\nretval = retval.exc\nif isinstance(retval, Retry) and retval.sig is not None:\nreturn retval.sig.apply(retries=retries + 1)\nstate = states.SUCCESS if ret.info is None else ret.info.state\nreturn EagerResult(task_id, retval, state, traceback=tb)\n@final\n@classproperty\ndef file_path(cls) -&gt; str:  # pylint: disable=no-self-argument\nreturn inspect.getfile(cls)\n@final\n@classproperty\ndef class_path(cls) -&gt; str:  # pylint: disable=no-self-argument\n\"\"\"\n        Unique identifier of a specific Job class, in the form &lt;module_name&gt;.&lt;ClassName&gt;.\n        Examples:\n        my_script.MyScript - Local Job\n        nautobot.core.jobs.MySystemJob - System Job\n        my_plugin.jobs.MyPluginJob - App-provided Job\n        git_repository.jobs.myjob.MyJob - GitRepository Job\n        \"\"\"\nreturn f\"{cls.__module__}.{cls.__name__}\"\n@final\n@classproperty\ndef class_path_dotted(cls) -&gt; str:  # pylint: disable=no-self-argument\n\"\"\"\n        Dotted class_path, suitable for use in things like Python logger names.\n        Deprecated as of Nautobot 2.0: just use .class_path instead.\n        \"\"\"\nreturn cls.class_path\n@final\n@classproperty\ndef class_path_js_escaped(cls) -&gt; str:  # pylint: disable=no-self-argument\n\"\"\"\n        Escape various characters so that the class_path can be used as a jQuery selector.\n        \"\"\"\nreturn cls.class_path.replace(\".\", r\"\\.\")\n@final\n@classproperty\ndef grouping(cls) -&gt; str:  # pylint: disable=no-self-argument\nmodule = inspect.getmodule(cls)\nreturn getattr(module, \"name\", module.__name__)\n@final\n@classmethod\ndef _get_meta_attr_and_assert_type(cls, attr_name, default, expected_type):\nresult = getattr(cls.Meta, attr_name, default)\nif not isinstance(result, expected_type):\nraise TypeError(f\"Meta.{attr_name} should be {expected_type}, not {type(result)}\")\nreturn result\n@final\n@classproperty\ndef name(cls) -&gt; str:  # pylint: disable=no-self-argument\nreturn cls._get_meta_attr_and_assert_type(\"name\", cls.__name__, expected_type=str)\n@final\n@classproperty\ndef description(cls) -&gt; str:  # pylint: disable=no-self-argument\nreturn dedent(cls._get_meta_attr_and_assert_type(\"description\", \"\", expected_type=str)).strip()\n@final\n@classproperty\ndef description_first_line(cls) -&gt; str:  # pylint: disable=no-self-argument\nif cls.description:  # pylint: disable=using-constant-test\nreturn cls.description.splitlines()[0]\nreturn \"\"\n@final\n@classproperty\ndef dryrun_default(cls) -&gt; bool:  # pylint: disable=no-self-argument\nreturn cls._get_meta_attr_and_assert_type(\"dryrun_default\", False, expected_type=bool)\n@final\n@classproperty\ndef hidden(cls) -&gt; bool:  # pylint: disable=no-self-argument\nreturn cls._get_meta_attr_and_assert_type(\"hidden\", False, expected_type=bool)\n@final\n@classproperty\ndef field_order(cls):  # pylint: disable=no-self-argument\nreturn cls._get_meta_attr_and_assert_type(\"field_order\", [], expected_type=(list, tuple))\n@final\n@classproperty\ndef read_only(cls) -&gt; bool:  # pylint: disable=no-self-argument\nreturn cls._get_meta_attr_and_assert_type(\"read_only\", False, expected_type=bool)\n@final\n@classproperty\ndef approval_required(cls) -&gt; bool:  # pylint: disable=no-self-argument\nreturn cls._get_meta_attr_and_assert_type(\"approval_required\", False, expected_type=bool)\n@final\n@classproperty\ndef soft_time_limit(cls) -&gt; int:  # pylint: disable=no-self-argument\nreturn cls._get_meta_attr_and_assert_type(\"soft_time_limit\", 0, expected_type=int)\n@final\n@classproperty\ndef time_limit(cls) -&gt; int:  # pylint: disable=no-self-argument\nreturn cls._get_meta_attr_and_assert_type(\"time_limit\", 0, expected_type=int)\n@final\n@classproperty\ndef has_sensitive_variables(cls) -&gt; bool:  # pylint: disable=no-self-argument\nreturn cls._get_meta_attr_and_assert_type(\"has_sensitive_variables\", True, expected_type=bool)\n@final\n@classproperty\ndef supports_dryrun(cls) -&gt; bool:  # pylint: disable=no-self-argument\nreturn isinstance(getattr(cls, \"dryrun\", None), DryRunVar)\n@final\n@classproperty\ndef task_queues(cls) -&gt; list:  # pylint: disable=no-self-argument\nreturn cls._get_meta_attr_and_assert_type(\"task_queues\", [], expected_type=(list, tuple))\n@final\n@classproperty\ndef properties_dict(cls) -&gt; dict:  # pylint: disable=no-self-argument\n\"\"\"\n        Return all relevant classproperties as a dict.\n        Used for convenient rendering into job_edit.html via the `json_script` template tag.\n        \"\"\"\nreturn {\n\"name\": cls.name,\n\"grouping\": cls.grouping,\n\"description\": cls.description,\n\"approval_required\": cls.approval_required,\n\"hidden\": cls.hidden,\n\"soft_time_limit\": cls.soft_time_limit,\n\"time_limit\": cls.time_limit,\n\"has_sensitive_variables\": cls.has_sensitive_variables,\n\"task_queues\": cls.task_queues,\n}\n@final\n@classproperty\ndef registered_name(cls) -&gt; str:  # pylint: disable=no-self-argument\nreturn f\"{cls.__module__}.{cls.__name__}\"\n@classmethod\ndef _get_vars(cls):\n\"\"\"\n        Return dictionary of ScriptVariable attributes defined on this class and any base classes to the top of the inheritance chain.\n        The variables are sorted in the order that they were defined, with variables defined on base classes appearing before subclass variables.\n        \"\"\"\ncls_vars = {}\n# get list of base classes, including cls, in reverse method resolution order: [BaseJob, Job, cls]\nbase_classes = reversed(inspect.getmro(cls))\nattr_names = [name for base in base_classes for name in base.__dict__.keys()]\nfor name in attr_names:\nattr_class = getattr(cls, name, None).__class__\nif name not in cls_vars and issubclass(attr_class, ScriptVariable):\ncls_vars[name] = getattr(cls, name)\nreturn cls_vars\n@classmethod\ndef _get_file_vars(cls):\n\"\"\"Return an ordered dict of FileVar fields.\"\"\"\ncls_vars = cls._get_vars()\nfile_vars = OrderedDict()\nfor name, attr in cls_vars.items():\nif isinstance(attr, FileVar):\nfile_vars[name] = attr\nreturn file_vars\n@classmethod\ndef as_form_class(cls):\n\"\"\"\n        Dynamically generate a Django form class corresponding to the variables in this Job.\n        In most cases you should use `.as_form()` instead of calling this method directly.\n        \"\"\"\nfields = {name: var.as_field() for name, var in cls._get_vars().items()}\nreturn type(\"JobForm\", (JobForm,), fields)\n@classmethod\ndef as_form(cls, data=None, files=None, initial=None, approval_view=False):\n\"\"\"\n        Return a Django form suitable for populating the context data required to run this Job.\n        `approval_view` will disable all fields from modification and is used to display the form\n        during a approval review workflow.\n        \"\"\"\nform = cls.as_form_class()(data, files, initial=initial)\ntry:\njob_model = JobModel.objects.get_for_class_path(cls.class_path)\ndryrun_default = job_model.dryrun_default if job_model.dryrun_default_override else cls.dryrun_default\ntask_queues = job_model.task_queues if job_model.task_queues_override else cls.task_queues\nexcept JobModel.DoesNotExist:\nlogger.error(\"No Job instance found in the database corresponding to %s\", cls.class_path)\ndryrun_default = cls.dryrun_default\ntask_queues = cls.task_queues\n# Update task queue choices\nform.fields[\"_task_queue\"].choices = task_queues_as_choices(task_queues)\nif cls.supports_dryrun and (not initial or \"dryrun\" not in initial):\n# Set initial \"dryrun\" checkbox state based on the Meta parameter\nform.fields[\"dryrun\"].initial = dryrun_default\nif not settings.DEBUG:\nform.fields[\"_profile\"].widget = forms.HiddenInput()\n# https://github.com/PyCQA/pylint/issues/3484\nif cls.field_order:  # pylint: disable=using-constant-test\nform.order_fields(cls.field_order)\nif approval_view:\n# Set `disabled=True` on all fields\nfor _, field in form.fields.items():\nfield.disabled = True\nreturn form\ndef clear_cache(self):\n\"\"\"\n        Clear all cached properties on this instance without accessing them. This is required because\n        celery reuses task instances for multiple runs.\n        \"\"\"\ntry:\ndel self.celery_kwargs\nexcept AttributeError:\npass\ntry:\ndel self.job_result\nexcept AttributeError:\npass\ntry:\ndel self.job_model\nexcept AttributeError:\npass\n@functools.cached_property\ndef job_model(self):\nreturn JobModel.objects.get(module_name=self.__module__, job_class_name=self.__name__)\n@functools.cached_property\ndef job_result(self):\nreturn JobResult.objects.get(id=self.request.id)\n@functools.cached_property\ndef celery_kwargs(self):\nreturn self.job_result.celery_kwargs or {}\n@property\ndef user(self):\nreturn getattr(self.job_result, \"user\", None)\n@staticmethod\ndef serialize_data(data):\n\"\"\"\n        This method parses input data (from JobForm usually) and returns a dict which is safe to serialize\n        Here we convert the QuerySet of a MultiObjectVar to a list of the pk's and the model instance\n        of an ObjectVar into the pk value.\n        These are converted back during job execution.\n        \"\"\"\nreturn_data = {}\nfor field_name, value in data.items():\n# MultiObjectVar\nif isinstance(value, QuerySet):\nreturn_data[field_name] = list(value.values_list(\"pk\", flat=True))\n# ObjectVar\nelif isinstance(value, Model):\nreturn_data[field_name] = value.pk\n# FileVar (Save each FileVar as a FileProxy)\nelif isinstance(value, InMemoryUploadedFile):\nreturn_data[field_name] = BaseJob.save_file(value)\n# IPAddressVar, IPAddressWithMaskVar, IPNetworkVar\nelif isinstance(value, netaddr.ip.BaseIP):\nreturn_data[field_name] = str(value)\n# Everything else...\nelse:\nreturn_data[field_name] = value\nreturn return_data\n# TODO: can the deserialize_data logic be moved to NautobotKombuJSONEncoder?\n@classmethod\ndef deserialize_data(cls, data):\n\"\"\"\n        Given data input for a job execution, deserialize it by resolving object references using defined variables.\n        This converts a list of pk's back into a QuerySet for MultiObjectVar instances and single pk values into\n        model instances for ObjectVar.\n        Note that when resolving querysets or model instances by their PK, we do not catch DoesNotExist\n        exceptions here, we leave it up the caller to handle those cases. The normal job execution code\n        path would consider this a failure of the job execution, as described in `nautobot.extras.jobs.run_job`.\n        \"\"\"\ncls_vars = cls._get_vars()\nreturn_data = {}\nif not isinstance(data, dict):\nraise TypeError(\"Data should be a dictionary.\")\nfor field_name, value in data.items():\n# If a field isn't a var, skip it (e.g. `_task_queue`).\ntry:\nvar = cls_vars[field_name]\nexcept KeyError:\ncontinue\nif value is None:\nif var.field_attrs.get(\"required\"):\nraise ValidationError(f\"{field_name} is a required field\")\nelse:\nreturn_data[field_name] = value\ncontinue\nif isinstance(var, MultiObjectVar):\nqueryset = var.field_attrs[\"queryset\"].filter(pk__in=value)\nif queryset.count() &lt; len(value):\n# Not all objects found\nfound_pks = set(queryset.values_list(\"pk\", flat=True))\nnot_found_pks = set(value).difference(found_pks)\nraise queryset.model.DoesNotExist(\nf\"Failed to find requested objects for var {field_name}: [{', '.join(not_found_pks)}]\"\n)\nreturn_data[field_name] = var.field_attrs[\"queryset\"].filter(pk__in=value)\nelif isinstance(var, ObjectVar):\nif isinstance(value, dict):\nreturn_data[field_name] = var.field_attrs[\"queryset\"].get(**value)\nelse:\nreturn_data[field_name] = var.field_attrs[\"queryset\"].get(pk=value)\nelif isinstance(var, FileVar):\nreturn_data[field_name] = cls.load_file(value)\n# IPAddressVar is a netaddr.IPAddress object\nelif isinstance(var, IPAddressVar):\nreturn_data[field_name] = netaddr.IPAddress(value)\n# IPAddressWithMaskVar, IPNetworkVar are netaddr.IPNetwork objects\nelif isinstance(var, (IPAddressWithMaskVar, IPNetworkVar)):\nreturn_data[field_name] = netaddr.IPNetwork(value)\nelse:\nreturn_data[field_name] = value\nreturn return_data\n@classmethod\ndef validate_data(cls, data, files=None):\ncls_vars = cls._get_vars()\nif not isinstance(data, dict):\nraise ValidationError(\"Job data needs to be a dict\")\nfor k in data:\nif k not in cls_vars:\nraise ValidationError({k: \"Job data contained an unknown property\"})\n# defer validation to the form object\nf = cls.as_form(data=cls.deserialize_data(data), files=files)\nif not f.is_valid():\nraise ValidationError(f.errors)\nreturn f.cleaned_data\n@classmethod\ndef prepare_job_kwargs(cls, job_kwargs):\n\"\"\"Process dict and return kwargs that exist as ScriptVariables on this job.\"\"\"\njob_vars = cls._get_vars()\nreturn {k: v for k, v in job_kwargs.items() if k in job_vars}\n@staticmethod\ndef load_file(pk):\n\"\"\"Load a file proxy stored in the database by primary key.\n        Args:\n            pk (uuid): Primary key of the `FileProxy` to retrieve\n        Returns:\n            (FileProxy): A File-like object\n        \"\"\"\nfp = FileProxy.objects.get(pk=pk)\nreturn fp.file\n@staticmethod\ndef save_file(uploaded_file):\n\"\"\"\n        Save an uploaded file to the database as a file proxy and return the\n        primary key.\n        Args:\n            uploaded_file (file): File handle of file to save to database\n        Returns:\n            (uuid): The pk of the `FileProxy` object\n        \"\"\"\nfp = FileProxy.objects.create(name=uploaded_file.name, file=uploaded_file)\nreturn fp.pk\ndef delete_files(self, *files_to_delete):\n\"\"\"Given an unpacked list of primary keys for `FileProxy` objects, delete them.\n        Args:\n            files_to_delete (*args): List of primary keys to delete\n        Returns:\n            (int): number of objects deleted\n        \"\"\"\nfiles = FileProxy.objects.filter(pk__in=files_to_delete)\nnum = 0\nfor fp in files:\nfp.delete()  # Call delete() on each, so `FileAttachment` is reaped\nnum += 1\nself.logger.debug(\"Deleted %d file proxies\", num, extra={\"grouping\": \"post_run\"})\nreturn num\n# Convenience functions\ndef load_yaml(self, filename):\n\"\"\"\n        Return data from a YAML file\n        \"\"\"\nfile_path = os.path.join(os.path.dirname(self.file_path), filename)\nwith open(file_path, \"r\") as datafile:\ndata = yaml.safe_load(datafile)\nreturn data\ndef load_json(self, filename):\n\"\"\"\n        Return data from a JSON file\n        \"\"\"\nfile_path = os.path.join(os.path.dirname(self.file_path), filename)\nwith open(file_path, \"r\") as datafile:\ndata = json.load(datafile)\nreturn data\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.BaseJob.Meta","title":"<code>Meta</code>","text":"<p>Metaclass attributes - subclasses can define any or all of the following attributes:</p> <ul> <li>name (str)</li> <li>description (str)</li> <li>hidden (bool)</li> <li>field_order (list)</li> <li>approval_required (bool)</li> <li>soft_time_limit (int)</li> <li>time_limit (int)</li> <li>has_sensitive_variables (bool)</li> <li>task_queues (list)</li> </ul> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>class Meta:\n\"\"\"\n    Metaclass attributes - subclasses can define any or all of the following attributes:\n    - name (str)\n    - description (str)\n    - hidden (bool)\n    - field_order (list)\n    - approval_required (bool)\n    - soft_time_limit (int)\n    - time_limit (int)\n    - has_sensitive_variables (bool)\n    - task_queues (list)\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.BaseJob.after_return","title":"<code>after_return(status, retval, task_id, args, kwargs, einfo)</code>","text":"<p>Handler called after the task returns.</p> <p>Parameters     status - Current task state.     retval - Task return value/exception.     task_id - Unique id of the task.     args - Original arguments for the task that returned.     kwargs - Original keyword arguments for the task that returned.</p> <p>Keyword Arguments     einfo - ExceptionInfo instance, containing the traceback (if any).</p> <p>Returns:</p> Type Description <code>None</code> <p>The return value of this handler is ignored.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>def after_return(self, status, retval, task_id, args, kwargs, einfo):\n\"\"\"\n    Handler called after the task returns.\n    Parameters\n        status - Current task state.\n        retval - Task return value/exception.\n        task_id - Unique id of the task.\n        args - Original arguments for the task that returned.\n        kwargs - Original keyword arguments for the task that returned.\n    Keyword Arguments\n        einfo - ExceptionInfo instance, containing the traceback (if any).\n    Returns:\n        (None): The return value of this handler is ignored.\n    \"\"\"\n# Cleanup FileProxy objects\nfile_fields = list(self._get_file_vars())\nfile_ids = [kwargs[f] for f in file_fields]\nif file_ids:\nself.delete_files(*file_ids)\nself.logger.info(\"Job completed\", extra={\"grouping\": \"post_run\"})\n# TODO(gary): document this in job author docs\n# Super.after_return must be called for chords to function properly\nsuper().after_return(status, retval, task_id, args, kwargs, einfo=einfo)\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.BaseJob.apply","title":"<code>apply(args=None, kwargs=None, link=None, link_error=None, task_id=None, retries=None, throw=None, logfile=None, loglevel=None, headers=None, **options)</code>","text":"<p>Fix celery's apply method to propagate options to the task result</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>def apply(\nself,\nargs=None,\nkwargs=None,\nlink=None,\nlink_error=None,\ntask_id=None,\nretries=None,\nthrow=None,\nlogfile=None,\nloglevel=None,\nheaders=None,\n**options,\n):\n\"\"\"Fix celery's apply method to propagate options to the task result\"\"\"\n# trace imports Task, so need to import inline.\nfrom celery.app.trace import build_tracer\napp = self._get_app()\nargs = args or ()\nkwargs = kwargs or {}\ntask_id = task_id or uuid()\nretries = retries or 0\nif throw is None:\nthrow = app.conf.task_eager_propagates\n# Make sure we get the task instance, not class.\ntask = app._tasks[self.name]\nrequest = {\n\"id\": task_id,\n\"retries\": retries,\n\"is_eager\": True,\n\"logfile\": logfile,\n\"loglevel\": loglevel or 0,\n\"hostname\": gethostname(),\n\"callbacks\": maybe_list(link),\n\"errbacks\": maybe_list(link_error),\n\"headers\": headers,\n\"ignore_result\": options.get(\"ignore_result\", False),\n\"delivery_info\": {\n\"is_eager\": True,\n\"exchange\": options.get(\"exchange\"),\n\"routing_key\": options.get(\"routing_key\"),\n\"priority\": options.get(\"priority\"),\n},\n\"properties\": options,  # one line fix to overloaded method\n}\nif \"stamped_headers\" in options:\nrequest[\"stamped_headers\"] = maybe_list(options[\"stamped_headers\"])\nrequest[\"stamps\"] = {header: maybe_list(options.get(header, [])) for header in request[\"stamped_headers\"]}\ntb = None\ntracer = build_tracer(\ntask.name,\ntask,\neager=True,\npropagate=throw,\napp=self._get_app(),\n)\nret = tracer(task_id, args, kwargs, request)\nretval = ret.retval\nif isinstance(retval, ExceptionInfo):\nretval, tb = retval.exception, retval.traceback\nif isinstance(retval, ExceptionWithTraceback):\nretval = retval.exc\nif isinstance(retval, Retry) and retval.sig is not None:\nreturn retval.sig.apply(retries=retries + 1)\nstate = states.SUCCESS if ret.info is None else ret.info.state\nreturn EagerResult(task_id, retval, state, traceback=tb)\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.BaseJob.as_form","title":"<code>as_form(data=None, files=None, initial=None, approval_view=False)</code>  <code>classmethod</code>","text":"<p>Return a Django form suitable for populating the context data required to run this Job.</p> <p><code>approval_view</code> will disable all fields from modification and is used to display the form during a approval review workflow.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>@classmethod\ndef as_form(cls, data=None, files=None, initial=None, approval_view=False):\n\"\"\"\n    Return a Django form suitable for populating the context data required to run this Job.\n    `approval_view` will disable all fields from modification and is used to display the form\n    during a approval review workflow.\n    \"\"\"\nform = cls.as_form_class()(data, files, initial=initial)\ntry:\njob_model = JobModel.objects.get_for_class_path(cls.class_path)\ndryrun_default = job_model.dryrun_default if job_model.dryrun_default_override else cls.dryrun_default\ntask_queues = job_model.task_queues if job_model.task_queues_override else cls.task_queues\nexcept JobModel.DoesNotExist:\nlogger.error(\"No Job instance found in the database corresponding to %s\", cls.class_path)\ndryrun_default = cls.dryrun_default\ntask_queues = cls.task_queues\n# Update task queue choices\nform.fields[\"_task_queue\"].choices = task_queues_as_choices(task_queues)\nif cls.supports_dryrun and (not initial or \"dryrun\" not in initial):\n# Set initial \"dryrun\" checkbox state based on the Meta parameter\nform.fields[\"dryrun\"].initial = dryrun_default\nif not settings.DEBUG:\nform.fields[\"_profile\"].widget = forms.HiddenInput()\n# https://github.com/PyCQA/pylint/issues/3484\nif cls.field_order:  # pylint: disable=using-constant-test\nform.order_fields(cls.field_order)\nif approval_view:\n# Set `disabled=True` on all fields\nfor _, field in form.fields.items():\nfield.disabled = True\nreturn form\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.BaseJob.as_form_class","title":"<code>as_form_class()</code>  <code>classmethod</code>","text":"<p>Dynamically generate a Django form class corresponding to the variables in this Job.</p> <p>In most cases you should use <code>.as_form()</code> instead of calling this method directly.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>@classmethod\ndef as_form_class(cls):\n\"\"\"\n    Dynamically generate a Django form class corresponding to the variables in this Job.\n    In most cases you should use `.as_form()` instead of calling this method directly.\n    \"\"\"\nfields = {name: var.as_field() for name, var in cls._get_vars().items()}\nreturn type(\"JobForm\", (JobForm,), fields)\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.BaseJob.before_start","title":"<code>before_start(task_id, args, kwargs)</code>","text":"<p>Handler called before the task starts.</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>str</code> <p>Unique id of the task to execute.</p> required <code>args</code> <code>Tuple</code> <p>Original arguments for the task to execute.</p> required <code>kwargs</code> <code>Dict</code> <p>Original keyword arguments for the task to execute.</p> required <p>Returns:</p> Type Description <code>None</code> <p>The return value of this handler is ignored.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>def before_start(self, task_id, args, kwargs):\n\"\"\"Handler called before the task starts.\n    Arguments:\n        task_id (str): Unique id of the task to execute.\n        args (Tuple): Original arguments for the task to execute.\n        kwargs (Dict): Original keyword arguments for the task to execute.\n    Returns:\n        (None): The return value of this handler is ignored.\n    \"\"\"\nself.clear_cache()\ntry:\nself.job_result\nexcept ObjectDoesNotExist as err:\nraise RunJobTaskFailed(f\"Unable to find associated job result for job {task_id}\") from err\ntry:\nself.job_model\nexcept ObjectDoesNotExist as err:\nraise RunJobTaskFailed(f\"Unable to find associated job model for job {task_id}\") from err\nif not self.job_model.enabled:\nself.logger.error(\n\"Job %s is not enabled to be run!\",\nself.job_model,\nextra={\"object\": self.job_model, \"grouping\": \"initialization\"},\n)\nraise RunJobTaskFailed(f\"Job {self.job_model} is not enabled to be run!\")\nsoft_time_limit = self.job_model.soft_time_limit or settings.CELERY_TASK_SOFT_TIME_LIMIT\ntime_limit = self.job_model.time_limit or settings.CELERY_TASK_TIME_LIMIT\nif time_limit &lt;= soft_time_limit:\nself.logger.warning(\n\"The hard time limit of %s seconds is less than \"\n\"or equal to the soft time limit of %s seconds. \"\n\"This job will fail silently after %s seconds.\",\ntime_limit,\nsoft_time_limit,\ntime_limit,\nextra={\"grouping\": \"initialization\"},\n)\nself.logger.info(\"Running job\", extra={\"grouping\": \"initialization\"})\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.BaseJob.class_path","title":"<code>class_path()</code>","text":"<p>Unique identifier of a specific Job class, in the form .. <p>Examples:</p> <p>my_script.MyScript - Local Job nautobot.core.jobs.MySystemJob - System Job my_plugin.jobs.MyPluginJob - App-provided Job git_repository.jobs.myjob.MyJob - GitRepository Job</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>@final\n@classproperty\ndef class_path(cls) -&gt; str:  # pylint: disable=no-self-argument\n\"\"\"\n    Unique identifier of a specific Job class, in the form &lt;module_name&gt;.&lt;ClassName&gt;.\n    Examples:\n    my_script.MyScript - Local Job\n    nautobot.core.jobs.MySystemJob - System Job\n    my_plugin.jobs.MyPluginJob - App-provided Job\n    git_repository.jobs.myjob.MyJob - GitRepository Job\n    \"\"\"\nreturn f\"{cls.__module__}.{cls.__name__}\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.BaseJob.class_path_dotted","title":"<code>class_path_dotted()</code>","text":"<p>Dotted class_path, suitable for use in things like Python logger names.</p> <p>Deprecated as of Nautobot 2.0: just use .class_path instead.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>@final\n@classproperty\ndef class_path_dotted(cls) -&gt; str:  # pylint: disable=no-self-argument\n\"\"\"\n    Dotted class_path, suitable for use in things like Python logger names.\n    Deprecated as of Nautobot 2.0: just use .class_path instead.\n    \"\"\"\nreturn cls.class_path\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.BaseJob.class_path_js_escaped","title":"<code>class_path_js_escaped()</code>","text":"<p>Escape various characters so that the class_path can be used as a jQuery selector.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>@final\n@classproperty\ndef class_path_js_escaped(cls) -&gt; str:  # pylint: disable=no-self-argument\n\"\"\"\n    Escape various characters so that the class_path can be used as a jQuery selector.\n    \"\"\"\nreturn cls.class_path.replace(\".\", r\"\\.\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.BaseJob.clear_cache","title":"<code>clear_cache()</code>","text":"<p>Clear all cached properties on this instance without accessing them. This is required because celery reuses task instances for multiple runs.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>def clear_cache(self):\n\"\"\"\n    Clear all cached properties on this instance without accessing them. This is required because\n    celery reuses task instances for multiple runs.\n    \"\"\"\ntry:\ndel self.celery_kwargs\nexcept AttributeError:\npass\ntry:\ndel self.job_result\nexcept AttributeError:\npass\ntry:\ndel self.job_model\nexcept AttributeError:\npass\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.BaseJob.delete_files","title":"<code>delete_files(*files_to_delete)</code>","text":"<p>Given an unpacked list of primary keys for <code>FileProxy</code> objects, delete them.</p> <p>Parameters:</p> Name Type Description Default <code>files_to_delete</code> <code>*args</code> <p>List of primary keys to delete</p> <code>()</code> <p>Returns:</p> Type Description <code>int</code> <p>number of objects deleted</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>def delete_files(self, *files_to_delete):\n\"\"\"Given an unpacked list of primary keys for `FileProxy` objects, delete them.\n    Args:\n        files_to_delete (*args): List of primary keys to delete\n    Returns:\n        (int): number of objects deleted\n    \"\"\"\nfiles = FileProxy.objects.filter(pk__in=files_to_delete)\nnum = 0\nfor fp in files:\nfp.delete()  # Call delete() on each, so `FileAttachment` is reaped\nnum += 1\nself.logger.debug(\"Deleted %d file proxies\", num, extra={\"grouping\": \"post_run\"})\nreturn num\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.BaseJob.deserialize_data","title":"<code>deserialize_data(data)</code>  <code>classmethod</code>","text":"<p>Given data input for a job execution, deserialize it by resolving object references using defined variables.</p> <p>This converts a list of pk's back into a QuerySet for MultiObjectVar instances and single pk values into model instances for ObjectVar.</p> <p>Note that when resolving querysets or model instances by their PK, we do not catch DoesNotExist exceptions here, we leave it up the caller to handle those cases. The normal job execution code path would consider this a failure of the job execution, as described in <code>nautobot.extras.jobs.run_job</code>.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>@classmethod\ndef deserialize_data(cls, data):\n\"\"\"\n    Given data input for a job execution, deserialize it by resolving object references using defined variables.\n    This converts a list of pk's back into a QuerySet for MultiObjectVar instances and single pk values into\n    model instances for ObjectVar.\n    Note that when resolving querysets or model instances by their PK, we do not catch DoesNotExist\n    exceptions here, we leave it up the caller to handle those cases. The normal job execution code\n    path would consider this a failure of the job execution, as described in `nautobot.extras.jobs.run_job`.\n    \"\"\"\ncls_vars = cls._get_vars()\nreturn_data = {}\nif not isinstance(data, dict):\nraise TypeError(\"Data should be a dictionary.\")\nfor field_name, value in data.items():\n# If a field isn't a var, skip it (e.g. `_task_queue`).\ntry:\nvar = cls_vars[field_name]\nexcept KeyError:\ncontinue\nif value is None:\nif var.field_attrs.get(\"required\"):\nraise ValidationError(f\"{field_name} is a required field\")\nelse:\nreturn_data[field_name] = value\ncontinue\nif isinstance(var, MultiObjectVar):\nqueryset = var.field_attrs[\"queryset\"].filter(pk__in=value)\nif queryset.count() &lt; len(value):\n# Not all objects found\nfound_pks = set(queryset.values_list(\"pk\", flat=True))\nnot_found_pks = set(value).difference(found_pks)\nraise queryset.model.DoesNotExist(\nf\"Failed to find requested objects for var {field_name}: [{', '.join(not_found_pks)}]\"\n)\nreturn_data[field_name] = var.field_attrs[\"queryset\"].filter(pk__in=value)\nelif isinstance(var, ObjectVar):\nif isinstance(value, dict):\nreturn_data[field_name] = var.field_attrs[\"queryset\"].get(**value)\nelse:\nreturn_data[field_name] = var.field_attrs[\"queryset\"].get(pk=value)\nelif isinstance(var, FileVar):\nreturn_data[field_name] = cls.load_file(value)\n# IPAddressVar is a netaddr.IPAddress object\nelif isinstance(var, IPAddressVar):\nreturn_data[field_name] = netaddr.IPAddress(value)\n# IPAddressWithMaskVar, IPNetworkVar are netaddr.IPNetwork objects\nelif isinstance(var, (IPAddressWithMaskVar, IPNetworkVar)):\nreturn_data[field_name] = netaddr.IPNetwork(value)\nelse:\nreturn_data[field_name] = value\nreturn return_data\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.BaseJob.load_file","title":"<code>load_file(pk)</code>  <code>staticmethod</code>","text":"<p>Load a file proxy stored in the database by primary key.</p> <p>Parameters:</p> Name Type Description Default <code>pk</code> <code>uuid</code> <p>Primary key of the <code>FileProxy</code> to retrieve</p> required <p>Returns:</p> Type Description <code>FileProxy</code> <p>A File-like object</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>@staticmethod\ndef load_file(pk):\n\"\"\"Load a file proxy stored in the database by primary key.\n    Args:\n        pk (uuid): Primary key of the `FileProxy` to retrieve\n    Returns:\n        (FileProxy): A File-like object\n    \"\"\"\nfp = FileProxy.objects.get(pk=pk)\nreturn fp.file\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.BaseJob.load_json","title":"<code>load_json(filename)</code>","text":"<p>Return data from a JSON file</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>def load_json(self, filename):\n\"\"\"\n    Return data from a JSON file\n    \"\"\"\nfile_path = os.path.join(os.path.dirname(self.file_path), filename)\nwith open(file_path, \"r\") as datafile:\ndata = json.load(datafile)\nreturn data\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.BaseJob.load_yaml","title":"<code>load_yaml(filename)</code>","text":"<p>Return data from a YAML file</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>def load_yaml(self, filename):\n\"\"\"\n    Return data from a YAML file\n    \"\"\"\nfile_path = os.path.join(os.path.dirname(self.file_path), filename)\nwith open(file_path, \"r\") as datafile:\ndata = yaml.safe_load(datafile)\nreturn data\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.BaseJob.on_bound","title":"<code>on_bound(app)</code>  <code>classmethod</code>","text":"<p>Called when the task is bound to an app.</p> Note <p>This class method can be defined to do additional actions when the task class is bound to an app.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>@classmethod\ndef on_bound(cls, app):\n\"\"\"Called when the task is bound to an app.\n    Note:\n        This class method can be defined to do additional actions when\n        the task class is bound to an app.\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.BaseJob.on_failure","title":"<code>on_failure(exc, task_id, args, kwargs, einfo)</code>","text":"<p>Error handler.</p> <p>This is run by the worker when the task fails.</p> <p>Parameters:</p> Name Type Description Default <code>exc</code> <code>Exception</code> <p>The exception raised by the task.</p> required <code>task_id</code> <code>str</code> <p>Unique id of the failed task.</p> required <code>args</code> <code>Tuple</code> <p>Original arguments for the task that failed.</p> required <code>kwargs</code> <code>Dict</code> <p>Original keyword arguments for the task that failed.</p> required <code>einfo</code> <code>~billiard.einfo.ExceptionInfo</code> <p>Exception information.</p> required <p>Returns:</p> Type Description <code>None</code> <p>The return value of this handler is ignored.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>def on_failure(self, exc, task_id, args, kwargs, einfo):\n\"\"\"Error handler.\n    This is run by the worker when the task fails.\n    Arguments:\n        exc (Exception): The exception raised by the task.\n        task_id (str): Unique id of the failed task.\n        args (Tuple): Original arguments for the task that failed.\n        kwargs (Dict): Original keyword arguments for the task that failed.\n        einfo (~billiard.einfo.ExceptionInfo): Exception information.\n    Returns:\n        (None): The return value of this handler is ignored.\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.BaseJob.on_retry","title":"<code>on_retry(exc, task_id, args, kwargs, einfo)</code>","text":"<p>Retry handler.</p> <p>This is run by the worker when the task is to be retried.</p> <p>Parameters:</p> Name Type Description Default <code>exc</code> <code>Exception</code> <p>The exception sent to :meth:<code>retry</code>.</p> required <code>task_id</code> <code>str</code> <p>Unique id of the retried task.</p> required <code>args</code> <code>Tuple</code> <p>Original arguments for the retried task.</p> required <code>kwargs</code> <code>Dict</code> <p>Original keyword arguments for the retried task.</p> required <code>einfo</code> <code>~billiard.einfo.ExceptionInfo</code> <p>Exception information.</p> required <p>Returns:</p> Type Description <code>None</code> <p>The return value of this handler is ignored.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>def on_retry(self, exc, task_id, args, kwargs, einfo):\n\"\"\"Retry handler.\n    This is run by the worker when the task is to be retried.\n    Arguments:\n        exc (Exception): The exception sent to :meth:`retry`.\n        task_id (str): Unique id of the retried task.\n        args (Tuple): Original arguments for the retried task.\n        kwargs (Dict): Original keyword arguments for the retried task.\n        einfo (~billiard.einfo.ExceptionInfo): Exception information.\n    Returns:\n        (None): The return value of this handler is ignored.\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.BaseJob.on_success","title":"<code>on_success(retval, task_id, args, kwargs)</code>","text":"<p>Success handler.</p> <p>Run by the worker if the task executes successfully.</p> <p>Parameters:</p> Name Type Description Default <code>retval</code> <code>Any</code> <p>The return value of the task.</p> required <code>task_id</code> <code>str</code> <p>Unique id of the executed task.</p> required <code>args</code> <code>Tuple</code> <p>Original arguments for the executed task.</p> required <code>kwargs</code> <code>Dict</code> <p>Original keyword arguments for the executed task.</p> required <p>Returns:</p> Type Description <code>None</code> <p>The return value of this handler is ignored.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>def on_success(self, retval, task_id, args, kwargs):\n\"\"\"Success handler.\n    Run by the worker if the task executes successfully.\n    Arguments:\n        retval (Any): The return value of the task.\n        task_id (str): Unique id of the executed task.\n        args (Tuple): Original arguments for the executed task.\n        kwargs (Dict): Original keyword arguments for the executed task.\n    Returns:\n        (None): The return value of this handler is ignored.\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.BaseJob.prepare_job_kwargs","title":"<code>prepare_job_kwargs(job_kwargs)</code>  <code>classmethod</code>","text":"<p>Process dict and return kwargs that exist as ScriptVariables on this job.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>@classmethod\ndef prepare_job_kwargs(cls, job_kwargs):\n\"\"\"Process dict and return kwargs that exist as ScriptVariables on this job.\"\"\"\njob_vars = cls._get_vars()\nreturn {k: v for k, v in job_kwargs.items() if k in job_vars}\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.BaseJob.properties_dict","title":"<code>properties_dict()</code>","text":"<p>Return all relevant classproperties as a dict.</p> <p>Used for convenient rendering into job_edit.html via the <code>json_script</code> template tag.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>@final\n@classproperty\ndef properties_dict(cls) -&gt; dict:  # pylint: disable=no-self-argument\n\"\"\"\n    Return all relevant classproperties as a dict.\n    Used for convenient rendering into job_edit.html via the `json_script` template tag.\n    \"\"\"\nreturn {\n\"name\": cls.name,\n\"grouping\": cls.grouping,\n\"description\": cls.description,\n\"approval_required\": cls.approval_required,\n\"hidden\": cls.hidden,\n\"soft_time_limit\": cls.soft_time_limit,\n\"time_limit\": cls.time_limit,\n\"has_sensitive_variables\": cls.has_sensitive_variables,\n\"task_queues\": cls.task_queues,\n}\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.BaseJob.run","title":"<code>run(*args, **kwargs)</code>","text":"<p>Method invoked when this Job is run.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>def run(self, *args, **kwargs):\n\"\"\"\n    Method invoked when this Job is run.\n    \"\"\"\nraise NotImplementedError(\"Jobs must define the run method.\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.BaseJob.save_file","title":"<code>save_file(uploaded_file)</code>  <code>staticmethod</code>","text":"<p>Save an uploaded file to the database as a file proxy and return the primary key.</p> <p>Parameters:</p> Name Type Description Default <code>uploaded_file</code> <code>file</code> <p>File handle of file to save to database</p> required <p>Returns:</p> Type Description <code>uuid</code> <p>The pk of the <code>FileProxy</code> object</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>@staticmethod\ndef save_file(uploaded_file):\n\"\"\"\n    Save an uploaded file to the database as a file proxy and return the\n    primary key.\n    Args:\n        uploaded_file (file): File handle of file to save to database\n    Returns:\n        (uuid): The pk of the `FileProxy` object\n    \"\"\"\nfp = FileProxy.objects.create(name=uploaded_file.name, file=uploaded_file)\nreturn fp.pk\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.BaseJob.serialize_data","title":"<code>serialize_data(data)</code>  <code>staticmethod</code>","text":"<p>This method parses input data (from JobForm usually) and returns a dict which is safe to serialize</p> <p>Here we convert the QuerySet of a MultiObjectVar to a list of the pk's and the model instance of an ObjectVar into the pk value.</p> <p>These are converted back during job execution.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>@staticmethod\ndef serialize_data(data):\n\"\"\"\n    This method parses input data (from JobForm usually) and returns a dict which is safe to serialize\n    Here we convert the QuerySet of a MultiObjectVar to a list of the pk's and the model instance\n    of an ObjectVar into the pk value.\n    These are converted back during job execution.\n    \"\"\"\nreturn_data = {}\nfor field_name, value in data.items():\n# MultiObjectVar\nif isinstance(value, QuerySet):\nreturn_data[field_name] = list(value.values_list(\"pk\", flat=True))\n# ObjectVar\nelif isinstance(value, Model):\nreturn_data[field_name] = value.pk\n# FileVar (Save each FileVar as a FileProxy)\nelif isinstance(value, InMemoryUploadedFile):\nreturn_data[field_name] = BaseJob.save_file(value)\n# IPAddressVar, IPAddressWithMaskVar, IPNetworkVar\nelif isinstance(value, netaddr.ip.BaseIP):\nreturn_data[field_name] = str(value)\n# Everything else...\nelse:\nreturn_data[field_name] = value\nreturn return_data\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.BaseJob.shadow_name","title":"<code>shadow_name(args, kwargs, options)</code>","text":"<p>Override for custom task name in worker logs/monitoring.</p> Example <p>from celery.utils.imports import qualname</p> <p>def shadow_name(task, args, kwargs, options):     return qualname(args[0])</p> <p>@app.task(shadow_name=shadow_name, serializer='pickle') def apply_function_async(fun, args, kwargs):     return fun(args, **kwargs)</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>Tuple</code> <p>Task positional arguments.</p> required <code>kwargs</code> <code>Dict</code> <p>Task keyword arguments.</p> required <code>options</code> <code>Dict</code> <p>Task execution options.</p> required Source code in <code>nautobot/extras/jobs.py</code> <pre><code>def shadow_name(self, args, kwargs, options):\n\"\"\"Override for custom task name in worker logs/monitoring.\n    Example:\n            from celery.utils.imports import qualname\n            def shadow_name(task, args, kwargs, options):\n                return qualname(args[0])\n            @app.task(shadow_name=shadow_name, serializer='pickle')\n            def apply_function_async(fun, *args, **kwargs):\n                return fun(*args, **kwargs)\n    Arguments:\n        args (Tuple): Task positional arguments.\n        kwargs (Dict): Task keyword arguments.\n        options (Dict): Task execution options.\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.apps.jobs.BooleanVar","title":"<code>nautobot.apps.jobs.BooleanVar</code>","text":"<p>             Bases: <code>ScriptVariable</code></p> <p>Boolean representation (true/false). Renders as a checkbox.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>class BooleanVar(ScriptVariable):\n\"\"\"\n    Boolean representation (true/false). Renders as a checkbox.\n    \"\"\"\nform_field = forms.BooleanField\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\n# Boolean fields cannot be required\nself.field_attrs[\"required\"] = False\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.apps.jobs.ChoiceVar","title":"<code>nautobot.apps.jobs.ChoiceVar</code>","text":"<p>             Bases: <code>ScriptVariable</code></p> <p>Select one of several predefined static choices, passed as a list of two-tuples. Example:</p> <pre><code>color = ChoiceVar(\n    choices=(\n        ('#ff0000', 'Red'),\n        ('#00ff00', 'Green'),\n        ('#0000ff', 'Blue')\n    )\n)\n</code></pre> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>class ChoiceVar(ScriptVariable):\n\"\"\"\n    Select one of several predefined static choices, passed as a list of two-tuples. Example:\n        color = ChoiceVar(\n            choices=(\n                ('#ff0000', 'Red'),\n                ('#00ff00', 'Green'),\n                ('#0000ff', 'Blue')\n            )\n        )\n    \"\"\"\nform_field = forms.ChoiceField\ndef __init__(self, choices, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\n# Set field choices\nself.field_attrs[\"choices\"] = choices\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.apps.jobs.DatabaseFileField","title":"<code>nautobot.apps.jobs.DatabaseFileField</code>","text":"<p>             Bases: <code>forms.FileField</code></p> <p>Specialized <code>FileField</code> for use with <code>DatabaseFileStorage</code> storage backend.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>class DatabaseFileField(forms.FileField):\n\"\"\"Specialized `FileField` for use with `DatabaseFileStorage` storage backend.\"\"\"\nwidget = DBClearableFileInput\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.apps.jobs.DryRunVar","title":"<code>nautobot.apps.jobs.DryRunVar</code>","text":"<p>             Bases: <code>BooleanVar</code></p> <p>Special boolean variable that bypasses approval requirements if this is set to True on job execution.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>class DryRunVar(BooleanVar):\n\"\"\"\n    Special boolean variable that bypasses approval requirements if this is set to True on job execution.\n    \"\"\"\ndescription = \"Check to run job in dryrun mode.\"\ndef __init__(self, *args, **kwargs):\n# Default must be false unless overridden through `dryrun_default` meta attribute\nkwargs[\"default\"] = False\n# Default description if one was not provided\nkwargs.setdefault(\"description\", self.description)\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.apps.jobs.FileVar","title":"<code>nautobot.apps.jobs.FileVar</code>","text":"<p>             Bases: <code>ScriptVariable</code></p> <p>An uploaded file.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>class FileVar(ScriptVariable):\n\"\"\"\n    An uploaded file.\n    \"\"\"\nform_field = DatabaseFileField\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.apps.jobs.GitRepositoryDryRun","title":"<code>nautobot.apps.jobs.GitRepositoryDryRun</code>","text":"<p>             Bases: <code>Job</code></p> <p>System Job to perform a dry run on a Git repository.</p> Source code in <code>nautobot/core/jobs/__init__.py</code> <pre><code>class GitRepositoryDryRun(Job):\n\"\"\"System Job to perform a dry run on a Git repository.\"\"\"\nrepository = ObjectVar(\ndescription=\"Git Repository to dry-run\",\nlabel=\"Git Repository\",\nmodel=GitRepository,\n)\nclass Meta:\nname = \"Git Repository: Dry-Run\"\nhas_sensitive_variables = False\ndef run(self, repository):\njob_result = self.job_result\nself.logger.info(f'Performing a Dry Run on Git repository \"{repository.name}\"...')\ntry:\ngit_repository_dry_run(repository, logger=self.logger)\nfinally:\nself.logger.info(f\"Repository dry run completed in {job_result.duration}\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.apps.jobs.GitRepositorySync","title":"<code>nautobot.apps.jobs.GitRepositorySync</code>","text":"<p>             Bases: <code>Job</code></p> <p>System job to clone and/or pull a Git repository, then invoke <code>refresh_datasource_content()</code>.</p> Source code in <code>nautobot/core/jobs/__init__.py</code> <pre><code>class GitRepositorySync(Job):\n\"\"\"\n    System job to clone and/or pull a Git repository, then invoke `refresh_datasource_content()`.\n    \"\"\"\nrepository = ObjectVar(\ndescription=\"Git Repository to pull and refresh\",\nlabel=\"Git Repository\",\nmodel=GitRepository,\n)\nclass Meta:\nname = \"Git Repository: Sync\"\nhas_sensitive_variables = False\ndef run(self, repository):\njob_result = self.job_result\nuser = job_result.user\nself.logger.info(f'Creating/refreshing local copy of Git repository \"{repository.name}\"...')\ntry:\nensure_git_repository(repository, logger=self.logger)\nrefresh_datasource_content(\"extras.gitrepository\", repository, user, job_result, delete=False)\n# Given that the above succeeded, tell all workers (including ourself) to call ensure_git_repository()\napp.control.broadcast(\"refresh_git_repository\", repository_pk=repository.pk, head=repository.current_head)\nfinally:\nself.logger.info(f\"Repository synchronization completed in {job_result.duration}\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.apps.jobs.IPAddressVar","title":"<code>nautobot.apps.jobs.IPAddressVar</code>","text":"<p>             Bases: <code>ScriptVariable</code></p> <p>An IPv4 or IPv6 address without a mask.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>class IPAddressVar(ScriptVariable):\n\"\"\"\n    An IPv4 or IPv6 address without a mask.\n    \"\"\"\nform_field = IPAddressFormField\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.apps.jobs.IPAddressWithMaskVar","title":"<code>nautobot.apps.jobs.IPAddressWithMaskVar</code>","text":"<p>             Bases: <code>ScriptVariable</code></p> <p>An IPv4 or IPv6 address with a mask.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>class IPAddressWithMaskVar(ScriptVariable):\n\"\"\"\n    An IPv4 or IPv6 address with a mask.\n    \"\"\"\nform_field = IPNetworkFormField\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.apps.jobs.IPNetworkVar","title":"<code>nautobot.apps.jobs.IPNetworkVar</code>","text":"<p>             Bases: <code>ScriptVariable</code></p> <p>An IPv4 or IPv6 prefix.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>class IPNetworkVar(ScriptVariable):\n\"\"\"\n    An IPv4 or IPv6 prefix.\n    \"\"\"\nform_field = IPNetworkFormField\ndef __init__(self, min_prefix_length=None, max_prefix_length=None, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\n# Set prefix validator and optional minimum/maximum prefix lengths\nself.field_attrs[\"validators\"] = [prefix_validator]\nif min_prefix_length is not None:\nself.field_attrs[\"validators\"].append(MinPrefixLengthValidator(min_prefix_length))\nif max_prefix_length is not None:\nself.field_attrs[\"validators\"].append(MaxPrefixLengthValidator(max_prefix_length))\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.apps.jobs.IntegerVar","title":"<code>nautobot.apps.jobs.IntegerVar</code>","text":"<p>             Bases: <code>ScriptVariable</code></p> <p>Integer representation. Can enforce minimum/maximum values.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>class IntegerVar(ScriptVariable):\n\"\"\"\n    Integer representation. Can enforce minimum/maximum values.\n    \"\"\"\nform_field = forms.IntegerField\ndef __init__(self, min_value=None, max_value=None, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\n# Optional minimum/maximum values\nif min_value:\nself.field_attrs[\"min_value\"] = min_value\nif max_value:\nself.field_attrs[\"max_value\"] = max_value\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.apps.jobs.Job","title":"<code>nautobot.apps.jobs.Job</code>","text":"<p>             Bases: <code>BaseJob</code></p> <p>Classes which inherit from this model will appear in the list of available jobs.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>class Job(BaseJob):\n\"\"\"\n    Classes which inherit from this model will appear in the list of available jobs.\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.apps.jobs.JobButtonReceiver","title":"<code>nautobot.apps.jobs.JobButtonReceiver</code>","text":"<p>             Bases: <code>Job</code></p> <p>Base class for job button receivers. Job button receivers are jobs that are initiated from UI buttons and are not intended to be run from the job form UI or API like standard jobs.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>class JobButtonReceiver(Job):\n\"\"\"\n    Base class for job button receivers. Job button receivers are jobs that are initiated\n    from UI buttons and are not intended to be run from the job form UI or API like standard jobs.\n    \"\"\"\nobject_pk = StringVar()\nobject_model_name = StringVar()\ndef run(self, object_pk, object_model_name):\n\"\"\"JobButtonReceiver subclasses generally shouldn't need to override this method.\"\"\"\nmodel = get_model_from_name(object_model_name)\nobj = model.objects.get(pk=object_pk)\nself.receive_job_button(obj=obj)\ndef receive_job_button(self, obj):\n\"\"\"\n        Method to be implemented by concrete JobButtonReceiver subclasses.\n        :param obj: an instance of the object\n        \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.JobButtonReceiver.receive_job_button","title":"<code>receive_job_button(obj)</code>","text":"<p>Method to be implemented by concrete JobButtonReceiver subclasses.</p> <p>:param obj: an instance of the object</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>def receive_job_button(self, obj):\n\"\"\"\n    Method to be implemented by concrete JobButtonReceiver subclasses.\n    :param obj: an instance of the object\n    \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.JobButtonReceiver.run","title":"<code>run(object_pk, object_model_name)</code>","text":"<p>JobButtonReceiver subclasses generally shouldn't need to override this method.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>def run(self, object_pk, object_model_name):\n\"\"\"JobButtonReceiver subclasses generally shouldn't need to override this method.\"\"\"\nmodel = get_model_from_name(object_model_name)\nobj = model.objects.get(pk=object_pk)\nself.receive_job_button(obj=obj)\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.apps.jobs.JobHookReceiver","title":"<code>nautobot.apps.jobs.JobHookReceiver</code>","text":"<p>             Bases: <code>Job</code></p> <p>Base class for job hook receivers. Job hook receivers are jobs that are initiated from object changes and are not intended to be run from the UI or API like standard jobs.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>class JobHookReceiver(Job):\n\"\"\"\n    Base class for job hook receivers. Job hook receivers are jobs that are initiated\n    from object changes and are not intended to be run from the UI or API like standard jobs.\n    \"\"\"\nobject_change = ObjectVar(model=ObjectChange)\ndef run(self, object_change):\n\"\"\"JobHookReceiver subclasses generally shouldn't need to override this method.\"\"\"\nself.receive_job_hook(\nchange=object_change,\naction=object_change.action,\nchanged_object=object_change.changed_object,\n)\ndef receive_job_hook(self, change, action, changed_object):\n\"\"\"\n        Method to be implemented by concrete JobHookReceiver subclasses.\n        :param change: an instance of `nautobot.extras.models.ObjectChange`\n        :param action: a string with the action performed on the changed object (\"create\", \"update\" or \"delete\")\n        :param changed_object: an instance of the object that was changed, or `None` if the object has been deleted\n        \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.JobHookReceiver.receive_job_hook","title":"<code>receive_job_hook(change, action, changed_object)</code>","text":"<p>Method to be implemented by concrete JobHookReceiver subclasses.</p> <p>:param change: an instance of <code>nautobot.extras.models.ObjectChange</code> :param action: a string with the action performed on the changed object (\"create\", \"update\" or \"delete\") :param changed_object: an instance of the object that was changed, or <code>None</code> if the object has been deleted</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>def receive_job_hook(self, change, action, changed_object):\n\"\"\"\n    Method to be implemented by concrete JobHookReceiver subclasses.\n    :param change: an instance of `nautobot.extras.models.ObjectChange`\n    :param action: a string with the action performed on the changed object (\"create\", \"update\" or \"delete\")\n    :param changed_object: an instance of the object that was changed, or `None` if the object has been deleted\n    \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.JobHookReceiver.run","title":"<code>run(object_change)</code>","text":"<p>JobHookReceiver subclasses generally shouldn't need to override this method.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>def run(self, object_change):\n\"\"\"JobHookReceiver subclasses generally shouldn't need to override this method.\"\"\"\nself.receive_job_hook(\nchange=object_change,\naction=object_change.action,\nchanged_object=object_change.changed_object,\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.apps.jobs.MultiChoiceVar","title":"<code>nautobot.apps.jobs.MultiChoiceVar</code>","text":"<p>             Bases: <code>ChoiceVar</code></p> <p>Like ChoiceVar, but allows for the selection of multiple choices.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>class MultiChoiceVar(ChoiceVar):\n\"\"\"\n    Like ChoiceVar, but allows for the selection of multiple choices.\n    \"\"\"\nform_field = forms.MultipleChoiceField\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.apps.jobs.MultiObjectVar","title":"<code>nautobot.apps.jobs.MultiObjectVar</code>","text":"<p>             Bases: <code>ObjectVar</code></p> <p>Like ObjectVar, but can represent one or more objects.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>class MultiObjectVar(ObjectVar):\n\"\"\"\n    Like ObjectVar, but can represent one or more objects.\n    \"\"\"\nform_field = DynamicModelMultipleChoiceField\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.apps.jobs.NautobotKombuJSONEncoder","title":"<code>nautobot.apps.jobs.NautobotKombuJSONEncoder</code>","text":"<p>             Bases: <code>JSONEncoder</code></p> <p>Custom json encoder based on restframework's JSONEncoder that serializes objects that implement the <code>nautobot_serialize()</code> method via the <code>__nautobot_type__</code> interface. This is useful in passing special objects to and from Celery tasks.</p> <p>This pattern should generally be avoided by passing pointers to persisted objects to the Celery tasks and retrieving them from within the task execution. While this is always possible for model instances (which covers 99% of use cases), for rare instances where it does not, and the actual object must be passed, this pattern allows for encoding and decoding of such objects.</p> <p>It requires a conforming class to implement the instance method <code>nautobot_serialize()</code> which returns a json serializable dictionary of the object representation. The class must also implement the <code>nautobot_deserialize()</code> class method which takes the dictionary representation and returns an actual instance of the class.</p> Source code in <code>nautobot/core/celery/encoders.py</code> <pre><code>class NautobotKombuJSONEncoder(JSONEncoder):\n\"\"\"\n    Custom json encoder based on restframework's JSONEncoder that serializes objects that implement\n    the `nautobot_serialize()` method via the `__nautobot_type__` interface. This is useful\n    in passing special objects to and from Celery tasks.\n    This pattern should generally be avoided by passing pointers to persisted objects to the\n    Celery tasks and retrieving them from within the task execution. While this is always possible\n    for model instances (which covers 99% of use cases), for rare instances where it does not,\n    and the actual object must be passed, this pattern allows for encoding and decoding\n    of such objects.\n    It requires a conforming class to implement the instance method `nautobot_serialize()` which\n    returns a json serializable dictionary of the object representation. The class must also implement\n    the `nautobot_deserialize()` class method which takes the dictionary representation and returns\n    an actual instance of the class.\n    \"\"\"\ndef default(self, obj):\n# Import here to avoid django.core.exceptions.ImproperlyConfigured Error.\n# Core App is not set up yet if we import this at the top of the file.\nfrom nautobot.core.models import BaseModel\nfrom nautobot.core.models.managers import TagsManager\nif isinstance(obj, BaseModel):\ncls = obj.__class__\nmodule = cls.__module__\nqual_name = \".\".join([module, cls.__qualname__])  # fully qualified dotted import path\nlogger.debug(\"Performing nautobot serialization on %s for type %s\", obj, qual_name)\ndata = {\n\"id\": obj.id,\n\"__nautobot_type__\": qual_name,\n# TODO: change to natural key to provide additional context if object is deleted from the db\n\"display\": getattr(obj, \"display\", str(obj)),\n}\nreturn data\nelif isinstance(obj, set):\n# Convert a set to a list for passing to and from a task\nreturn list(obj)\nelif isinstance(obj, TagsManager):\nobj = obj.values_list(\"id\", flat=True)\nreturn obj\nelif isinstance(obj, Exception):\n# JobResult.result uses NautobotKombuJSONEncoder as an encoder and expects a JSONSerializable object,\n# although an exception, such as a RuntimeException, can be supplied as the obj.\nreturn f\"{obj.__class__.__name__}: {obj}\"\nelse:\nreturn super().default(obj)\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.apps.jobs.ObjectVar","title":"<code>nautobot.apps.jobs.ObjectVar</code>","text":"<p>             Bases: <code>ScriptVariable</code></p> <p>A single object within Nautobot.</p> <p>:param model: The Nautobot model being referenced :param display_field: The attribute of the returned object to display in the selection list (default: 'name') :param query_params: A dictionary of additional query parameters to attach when making REST API requests (optional) :param null_option: The label to use as a \"null\" selection option (optional)</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>class ObjectVar(ScriptVariable):\n\"\"\"\n    A single object within Nautobot.\n    :param model: The Nautobot model being referenced\n    :param display_field: The attribute of the returned object to display in the selection list (default: 'name')\n    :param query_params: A dictionary of additional query parameters to attach when making REST API requests (optional)\n    :param null_option: The label to use as a \"null\" selection option (optional)\n    \"\"\"\nform_field = DynamicModelChoiceField\ndef __init__(\nself,\nmodel=None,\nqueryset=None,\ndisplay_field=\"display\",\nquery_params=None,\nnull_option=None,\n*args,\n**kwargs,\n):\nsuper().__init__(*args, **kwargs)\n# Set the form field's queryset. Support backward compatibility for the \"queryset\" argument for now.\nif model is not None:\nself.field_attrs[\"queryset\"] = model.objects.all()\nelif queryset is not None:\nwarnings.warn(\nf'{self}: Specifying a queryset for ObjectVar is no longer supported. Please use \"model\" instead.'\n)\nself.field_attrs[\"queryset\"] = queryset\nelse:\nraise TypeError(\"ObjectVar must specify a model\")\nself.field_attrs.update(\n{\n\"display_field\": display_field,\n\"query_params\": query_params,\n\"null_option\": null_option,\n}\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.apps.jobs.RunJobTaskFailed","title":"<code>nautobot.apps.jobs.RunJobTaskFailed</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Celery task failed for some reason.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>class RunJobTaskFailed(Exception):\n\"\"\"Celery task failed for some reason.\"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.apps.jobs.ScriptVariable","title":"<code>nautobot.apps.jobs.ScriptVariable</code>","text":"<p>Base model for script variables</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>class ScriptVariable:\n\"\"\"\n    Base model for script variables\n    \"\"\"\nform_field = forms.CharField\ndef __init__(self, label=\"\", description=\"\", default=None, required=True, widget=None):\n# Initialize field attributes\nif not hasattr(self, \"field_attrs\"):\nself.field_attrs = {}\nif label:\nself.field_attrs[\"label\"] = label\nif description:\nself.field_attrs[\"help_text\"] = description\nif default is not None:\nself.field_attrs[\"initial\"] = default\nif widget:\nself.field_attrs[\"widget\"] = widget\nself.field_attrs[\"required\"] = required\ndef as_field(self):\n\"\"\"\n        Render the variable as a Django form field.\n        \"\"\"\nform_field = self.form_field(**self.field_attrs)\nif not isinstance(form_field.widget, forms.CheckboxInput):\nif form_field.widget.attrs and \"class\" in form_field.widget.attrs.keys():\nform_field.widget.attrs[\"class\"] += \" form-control\"\nelse:\nform_field.widget.attrs[\"class\"] = \"form-control\"\nreturn form_field\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.extras.jobs.ScriptVariable.as_field","title":"<code>as_field()</code>","text":"<p>Render the variable as a Django form field.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>def as_field(self):\n\"\"\"\n    Render the variable as a Django form field.\n    \"\"\"\nform_field = self.form_field(**self.field_attrs)\nif not isinstance(form_field.widget, forms.CheckboxInput):\nif form_field.widget.attrs and \"class\" in form_field.widget.attrs.keys():\nform_field.widget.attrs[\"class\"] += \" form-control\"\nelse:\nform_field.widget.attrs[\"class\"] = \"form-control\"\nreturn form_field\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.apps.jobs.StringVar","title":"<code>nautobot.apps.jobs.StringVar</code>","text":"<p>             Bases: <code>ScriptVariable</code></p> <p>Character string representation. Can enforce minimum/maximum length and/or regex validation.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>class StringVar(ScriptVariable):\n\"\"\"\n    Character string representation. Can enforce minimum/maximum length and/or regex validation.\n    \"\"\"\ndef __init__(self, min_length=None, max_length=None, regex=None, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\n# Optional minimum/maximum lengths\nif min_length:\nself.field_attrs[\"min_length\"] = min_length\nif max_length:\nself.field_attrs[\"max_length\"] = max_length\n# Optional regular expression validation\nif regex:\nself.field_attrs[\"validators\"] = [\nRegexValidator(\nregex=regex,\nmessage=f\"Invalid value. Must match regex: {regex}\",\ncode=\"invalid\",\n)\n]\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.apps.jobs.TextVar","title":"<code>nautobot.apps.jobs.TextVar</code>","text":"<p>             Bases: <code>ScriptVariable</code></p> <p>Free-form text data. Renders as a . Source code in <code>nautobot/extras/jobs.py</code> <pre><code>class TextVar(ScriptVariable):\n\"\"\"\n    Free-form text data. Renders as a &lt;textarea&gt;.\n    \"\"\"\nform_field = forms.CharField\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.field_attrs[\"widget\"] = forms.Textarea\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.apps.jobs.enqueue_job_hooks","title":"<code>nautobot.apps.jobs.enqueue_job_hooks(object_change)</code>","text":"<p>Find job hook(s) assigned to this changed object type + action and enqueue them to be processed</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>def enqueue_job_hooks(object_change):\n\"\"\"\n    Find job hook(s) assigned to this changed object type + action and enqueue them\n    to be processed\n    \"\"\"\n# Job hooks cannot trigger other job hooks\nif object_change.change_context == ObjectChangeEventContextChoices.CONTEXT_JOB_HOOK:\nreturn\n# Determine whether this type of object supports job hooks\ncontent_type = object_change.changed_object_type\nif content_type not in ChangeLoggedModelsQuery().as_queryset():\nreturn\n# Retrieve any applicable job hooks\naction_flag = {\nObjectChangeActionChoices.ACTION_CREATE: \"type_create\",\nObjectChangeActionChoices.ACTION_UPDATE: \"type_update\",\nObjectChangeActionChoices.ACTION_DELETE: \"type_delete\",\n}[object_change.action]\njob_hooks = JobHook.objects.filter(content_types=content_type, enabled=True, **{action_flag: True})\n# Enqueue the jobs related to the job_hooks\nfor job_hook in job_hooks:\njob_model = job_hook.job\nJobResult.enqueue_job(job_model, object_change.user, object_change=object_change.pk)\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.apps.jobs.get_job","title":"<code>nautobot.apps.jobs.get_job(class_path)</code>","text":"<p>Retrieve a specific job class by its class_path (.). <p>May return None if the job isn't properly registered with Celery at this time.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>def get_job(class_path):\n\"\"\"\n    Retrieve a specific job class by its class_path (&lt;module_name&gt;.&lt;JobClassName&gt;).\n    May return None if the job isn't properly registered with Celery at this time.\n    \"\"\"\ntry:\nreturn celery_app.tasks[class_path].__class__\nexcept NotRegistered:\nreturn None\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.apps.jobs.is_job","title":"<code>nautobot.apps.jobs.is_job(obj)</code>","text":"<p>Returns True if the given object is a Job subclass.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>def is_job(obj):\n\"\"\"\n    Returns True if the given object is a Job subclass.\n    \"\"\"\ntry:\nreturn issubclass(obj, Job) and obj not in [Job, JobHookReceiver, JobButtonReceiver]\nexcept TypeError:\nreturn False\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.apps.jobs.is_variable","title":"<code>nautobot.apps.jobs.is_variable(obj)</code>","text":"<p>Returns True if the object is a ScriptVariable instance.</p> Source code in <code>nautobot/extras/jobs.py</code> <pre><code>def is_variable(obj):\n\"\"\"\n    Returns True if the object is a ScriptVariable instance.\n    \"\"\"\nreturn isinstance(obj, ScriptVariable)\n</code></pre>"},{"location":"code-reference/nautobot/apps/jobs.html#nautobot.apps.jobs.register_jobs","title":"<code>nautobot.apps.jobs.register_jobs(*jobs)</code>","text":"<p>Helper method to register jobs with Celery</p> Source code in <code>nautobot/core/celery/__init__.py</code> <pre><code>def register_jobs(*jobs):\n\"\"\"Helper method to register jobs with Celery\"\"\"\nfor job in jobs:\n# TODO: should we only register a job if it corresponds to a Job database record?\nlogger.debug(\"Registering job %s.%s\", job.__module__, job.__name__)\napp.register_task(job)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html","title":"nautobot.apps.models","text":""},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models","title":"<code>nautobot.apps.models</code>","text":"<p>Data model classes and utilities for app implementation.</p>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.AutoSlugField","title":"<code>nautobot.apps.models.AutoSlugField</code>","text":"<p>             Bases: <code>_AutoSlugField</code></p> <p>AutoSlugField</p> <p>By default, sets editable=True, blank=True, max_length=100, overwrite_on_add=False, unique=True Required arguments: populate_from     Specifies which field, list of fields, or model method     the slug will be populated from.</p> <pre><code>populate_from can traverse a ForeignKey relationship\nby using Django ORM syntax:\n    populate_from = 'related_model__field'\n</code></pre> <p>Optional arguments:</p> <p>separator     Defines the used separator (default: '-')</p> <p>overwrite     If set to True, overwrites the slug on every save (default: False)</p> <p>overwrite_on_add     If set to True, overwrites the provided slug on initial creation (default: False)</p> <p>slugify_function     Defines the function which will be used to \"slugify\" a content     (default: :py:func:<code>~django.template.defaultfilters.slugify</code> )</p> <p>It is possible to provide custom \"slugify\" function with the <code>slugify_function</code> function in a model class.</p> <p><code>slugify_function</code> function in a model class takes priority over <code>slugify_function</code> given as an argument to :py:class:<code>~AutoSlugField</code>.</p> <p>Example</p> <p>.. code-block:: python     # models.py</p> <pre><code>from django.db import models\nfrom django_extensions.db.fields import AutoSlugField\n\nclass MyModel(models.Model):\n    def slugify_function(self, content):\n        return content.replace('_', '-').lower()\n\n    title = models.CharField(max_length=42)\n    slug = AutoSlugField(populate_from='title')\n</code></pre> <p>Taken from django_extensions AutoSlugField Documentation.</p> Source code in <code>nautobot/core/models/fields.py</code> <pre><code>class AutoSlugField(_AutoSlugField):\n\"\"\"AutoSlugField\n    By default, sets editable=True, blank=True, max_length=100, overwrite_on_add=False, unique=True\n    Required arguments:\n    populate_from\n        Specifies which field, list of fields, or model method\n        the slug will be populated from.\n        populate_from can traverse a ForeignKey relationship\n        by using Django ORM syntax:\n            populate_from = 'related_model__field'\n    Optional arguments:\n    separator\n        Defines the used separator (default: '-')\n    overwrite\n        If set to True, overwrites the slug on every save (default: False)\n    overwrite_on_add\n        If set to True, overwrites the provided slug on initial creation (default: False)\n    slugify_function\n        Defines the function which will be used to \"slugify\" a content\n        (default: :py:func:`~django.template.defaultfilters.slugify` )\n    It is possible to provide custom \"slugify\" function with\n    the ``slugify_function`` function in a model class.\n    ``slugify_function`` function in a model class takes priority over\n    ``slugify_function`` given as an argument to :py:class:`~AutoSlugField`.\n    Example\n    .. code-block:: python\n        # models.py\n        from django.db import models\n        from django_extensions.db.fields import AutoSlugField\n        class MyModel(models.Model):\n            def slugify_function(self, content):\n                return content.replace('_', '-').lower()\n            title = models.CharField(max_length=42)\n            slug = AutoSlugField(populate_from='title')\n    Taken from django_extensions AutoSlugField Documentation.\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nkwargs.setdefault(\"max_length\", 100)\nkwargs.setdefault(\"editable\", True)\nkwargs.setdefault(\"overwrite_on_add\", False)\nkwargs.setdefault(\"unique\", True)\nsuper().__init__(*args, **kwargs)\ndef get_slug_fields(self, model_instance, lookup_value):\n\"\"\"Workaround for https://github.com/django-extensions/django-extensions/issues/1713.\"\"\"\ntry:\nreturn super().get_slug_fields(model_instance, lookup_value)\nexcept AttributeError:\nreturn \"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.fields.AutoSlugField.get_slug_fields","title":"<code>get_slug_fields(model_instance, lookup_value)</code>","text":"<p>Workaround for https://github.com/django-extensions/django-extensions/issues/1713.</p> Source code in <code>nautobot/core/models/fields.py</code> <pre><code>def get_slug_fields(self, model_instance, lookup_value):\n\"\"\"Workaround for https://github.com/django-extensions/django-extensions/issues/1713.\"\"\"\ntry:\nreturn super().get_slug_fields(model_instance, lookup_value)\nexcept AttributeError:\nreturn \"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.BaseManager","title":"<code>nautobot.apps.models.BaseManager</code>","text":"<p>             Bases: <code>Manager</code></p> <p>Base manager class corresponding to BaseModel and RestrictedQuerySet.</p> <p>Adds built-in natural key support, loosely based on <code>django-natural-keys</code>.</p> Source code in <code>nautobot/core/models/managers.py</code> <pre><code>class BaseManager(Manager):\n\"\"\"\n    Base manager class corresponding to BaseModel and RestrictedQuerySet.\n    Adds built-in natural key support, loosely based on `django-natural-keys`.\n    \"\"\"\ndef get_by_natural_key(self, *args):\n\"\"\"\n        Return the object corresponding to the provided natural key.\n        Generic implementation that depends on the model being a BaseModel subclass or otherwise implementing our\n        `natural_key_field_lookups` property API. Loosely based on implementation from `django-natural-keys`.\n        \"\"\"\nif len(args) == 1 and isinstance(args[0], (list, tuple)):\nlogger.warning(\n\"%s.objects.get_by_natural_key() was called with a single %s as its args, \"\n\"instead of a list of individual args. Did you forget a '*' in your call?\",\nself.model.__name__,\ntype(args[0]).__name__,\n)\nargs = args[0]\nbase_kwargs = self.model.natural_key_args_to_kwargs(args)\n# django-natural-keys had a pattern where it would replace nested related field lookups\n# (parent__namespace__name=\"Global\", parent__prefix=\"10.0.0.0/8\") with calls to get_by_natural_key()\n# (parent=Prefix.objects.get_by_natural_key(\"Global\", \"10.0.0.0/8\")).\n# We initially followed this pattern, but it had the downside that an object's natural key could therefore\n# **only** reference related objects by their own natural keys, which is unnecessarily rigid.\n# We instead just do the simple thing and let Django follow the nested lookups as appropriate:\nreturn self.get(**base_kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.managers.BaseManager.get_by_natural_key","title":"<code>get_by_natural_key(*args)</code>","text":"<p>Return the object corresponding to the provided natural key.</p> <p>Generic implementation that depends on the model being a BaseModel subclass or otherwise implementing our <code>natural_key_field_lookups</code> property API. Loosely based on implementation from <code>django-natural-keys</code>.</p> Source code in <code>nautobot/core/models/managers.py</code> <pre><code>def get_by_natural_key(self, *args):\n\"\"\"\n    Return the object corresponding to the provided natural key.\n    Generic implementation that depends on the model being a BaseModel subclass or otherwise implementing our\n    `natural_key_field_lookups` property API. Loosely based on implementation from `django-natural-keys`.\n    \"\"\"\nif len(args) == 1 and isinstance(args[0], (list, tuple)):\nlogger.warning(\n\"%s.objects.get_by_natural_key() was called with a single %s as its args, \"\n\"instead of a list of individual args. Did you forget a '*' in your call?\",\nself.model.__name__,\ntype(args[0]).__name__,\n)\nargs = args[0]\nbase_kwargs = self.model.natural_key_args_to_kwargs(args)\n# django-natural-keys had a pattern where it would replace nested related field lookups\n# (parent__namespace__name=\"Global\", parent__prefix=\"10.0.0.0/8\") with calls to get_by_natural_key()\n# (parent=Prefix.objects.get_by_natural_key(\"Global\", \"10.0.0.0/8\")).\n# We initially followed this pattern, but it had the downside that an object's natural key could therefore\n# **only** reference related objects by their own natural keys, which is unnecessarily rigid.\n# We instead just do the simple thing and let Django follow the nested lookups as appropriate:\nreturn self.get(**base_kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.BaseModel","title":"<code>nautobot.apps.models.BaseModel</code>","text":"<p>             Bases: <code>models.Model</code></p> <p>Base model class that all models should inherit from.</p> <p>This abstract base provides globally common fields and functionality.</p> <p>Here we define the primary key to be a UUID field and set its default to automatically generate a random UUID value. Note however, this does not operate in the same way as a traditional auto incrementing field for which the value is issued by the database upon initial insert. In the case of the UUID field, Django creates the value upon object instantiation. This means the canonical pattern in Django of checking <code>self.pk is None</code> to tell if an object has been created in the actual database does not work because the object will always have the value populated prior to being saved to the database for the first time. An alternate pattern of checking <code>not self.present_in_database</code> can be used for the same purpose in most cases.</p> Source code in <code>nautobot/core/models/__init__.py</code> <pre><code>class BaseModel(models.Model):\n\"\"\"\n    Base model class that all models should inherit from.\n    This abstract base provides globally common fields and functionality.\n    Here we define the primary key to be a UUID field and set its default to\n    automatically generate a random UUID value. Note however, this does not\n    operate in the same way as a traditional auto incrementing field for which\n    the value is issued by the database upon initial insert. In the case of\n    the UUID field, Django creates the value upon object instantiation. This\n    means the canonical pattern in Django of checking `self.pk is None` to tell\n    if an object has been created in the actual database does not work because\n    the object will always have the value populated prior to being saved to the\n    database for the first time. An alternate pattern of checking `not self.present_in_database`\n    can be used for the same purpose in most cases.\n    \"\"\"\nid = models.UUIDField(primary_key=True, default=uuid.uuid4, unique=True, editable=False)\nobjects = BaseManager.from_queryset(RestrictedQuerySet)()\n@property\ndef present_in_database(self):\n\"\"\"\n        True if the record exists in the database, False if it does not.\n        \"\"\"\nreturn not self._state.adding\ndef get_absolute_url(self, api=False):\n\"\"\"\n        Return the canonical URL for this object in either the UI or the REST API.\n        \"\"\"\n# Iterate the pk-like fields and try to get a URL, or return None.\nfields = [\"pk\"]\nactions = [\"retrieve\", \"detail\", \"\"]  # TODO: Eventually all retrieve\nfor field in fields:\nif not hasattr(self, field):\ncontinue\nfor action in actions:\nroute = get_route_for_model(self, action, api=api)\ntry:\nreturn reverse(route, kwargs={field: getattr(self, field)})\nexcept NoReverseMatch:\ncontinue\nraise AttributeError(f\"Cannot find a URL for {self} ({self._meta.app_label}.{self._meta.model_name})\")\n@classproperty  # https://github.com/PyCQA/pylint-django/issues/240\ndef _content_type(cls):  # pylint: disable=no-self-argument\n\"\"\"\n        Return the ContentType of the object, never cached.\n        \"\"\"\nreturn ContentType.objects.get_for_model(cls)\n@classproperty  # https://github.com/PyCQA/pylint-django/issues/240\ndef _content_type_cache_key(cls):  # pylint: disable=no-self-argument\n\"\"\"\n        Return the cache key for the ContentType of the object.\n        Necessary for use with _content_type_cached and management commands.\n        \"\"\"\nreturn f\"{cls._meta.label_lower}._content_type\"\n@classproperty  # https://github.com/PyCQA/pylint-django/issues/240\ndef _content_type_cached(cls):  # pylint: disable=no-self-argument\n\"\"\"\n        Return the ContentType of the object, cached.\n        \"\"\"\nreturn cache.get_or_set(cls._content_type_cache_key, cls._content_type, settings.CONTENT_TYPE_CACHE_TIMEOUT)\nclass Meta:\nabstract = True\ndef validated_save(self, *args, **kwargs):\n\"\"\"\n        Perform model validation during instance save.\n        This is a convenience method that first calls `self.full_clean()` and then `self.save()`\n        which in effect enforces model validation prior to saving the instance, without having\n        to manually make these calls seperately. This is a slight departure from Django norms,\n        but is intended to offer an optional, simplified interface for performing this common\n        workflow. The intended use is for user defined Jobs run via the `nautobot-server nbshell`\n        command.\n        \"\"\"\nself.full_clean()\nself.save(*args, **kwargs)\ndef natural_key(self) -&gt; list:\n\"\"\"\n        Smarter default implementation of natural key construction.\n        1. Handles nullable foreign keys (https://github.com/wq/django-natural-keys/issues/18)\n        2. Handles variadic natural-keys (e.g. Location model - [name, parent__name, parent__parent__name, ...].)\n        \"\"\"\nvals = []\nfor lookups in [lookup.split(\"__\") for lookup in self.natural_key_field_lookups]:\nval = self\nfor lookup in lookups:\nval = getattr(val, lookup)\nif val is None:\nbreak\nif not is_protected_type(val):\nval = str(val)\nvals.append(val)\n# Strip trailing Nones from vals\nwhile vals and vals[-1] is None:\nvals.pop()\nreturn vals\n@property\ndef composite_key(self) -&gt; str:\n\"\"\"\n        Automatic \"slug\" string derived from this model's natural key, suitable for use in URLs etc.\n        A less na\u00efve implementation than django-natural-keys provides by default, based around URL percent-encoding.\n        \"\"\"\nreturn construct_composite_key(self.natural_key())\n@property\ndef natural_slug(self) -&gt; str:\n\"\"\"\n        Automatic \"slug\" string derived from this model's natural key. This differs from composite\n        key in that it must be human-readable and comply with a very limited character set, and is therefore lossy.\n        This value is not guaranteed to be\n        unique although a best effort is made by appending a fragment of the primary key to the\n        natural slug value.\n        \"\"\"\nreturn construct_natural_slug(self.natural_key(), pk=self.pk)\n@classmethod\ndef _generate_field_lookups_from_natural_key_field_names(cls, natural_key_field_names):\n\"\"\"Generate field lookups based on natural key field names.\"\"\"\nnatural_key_field_lookups = []\nfor field_name in natural_key_field_names:\n# field_name could be a related field that has its own natural key fields (`parent`),\n# *or* it could be an explicit set of traversals (`parent__namespace__name`). Handle both.\nmodel = cls\nfor field_component in field_name.split(\"__\")[:-1]:\nmodel = model._meta.get_field(field_component).remote_field.model\ntry:\nfield = model._meta.get_field(field_name.split(\"__\")[-1])\nexcept FieldDoesNotExist:\n# Not a database field, maybe it's a property instead?\nif hasattr(model, field_name) and isinstance(getattr(model, field_name), property):\nnatural_key_field_lookups.append(field_name)\ncontinue\nraise\nif getattr(field, \"remote_field\", None) is None:\n# Not a related field, so the field name is the field lookup\nnatural_key_field_lookups.append(field_name)\ncontinue\nrelated_model = field.remote_field.model\nrelated_natural_key_field_lookups = None\nif hasattr(related_model, \"natural_key_field_lookups\"):\n# TODO: generic handling for self-referential case, as seen in Location\nrelated_natural_key_field_lookups = related_model.natural_key_field_lookups\nelse:\n# Related model isn't a Nautobot model and so doesn't have a `natural_key_field_lookups`.\n# The common case we've encountered so far is the contenttypes.ContentType model:\nif related_model._meta.app_label == \"contenttypes\" and related_model._meta.model_name == \"contenttype\":\nrelated_natural_key_field_lookups = [\"app_label\", \"model\"]\n# Additional special cases can be added here\nif not related_natural_key_field_lookups:\nraise AttributeError(\nf\"Unable to determine the related natural-key fields for {related_model.__name__} \"\nf\"(as referenced from {cls.__name__}.{field_name}). If the related model is a non-Nautobot \"\n\"model (such as ContentType) then it may be appropriate to add special-case handling for this \"\n\"model in BaseModel.natural_key_field_lookups; alternately you may be able to solve this for \"\nf\"a single special case by explicitly defining {cls.__name__}.natural_key_field_lookups.\"\n)\nfor field_lookup in related_natural_key_field_lookups:\nnatural_key_field_lookups.append(f\"{field_name}__{field_lookup}\")\nreturn natural_key_field_lookups\n@classmethod\ndef csv_natural_key_field_lookups(cls):\n\"\"\"Override this method for models with Python `@property` as part of their `natural_key_field_names`.\n        Since CSV export for `natural_key_field_names` relies on database fields, you can override this method\n        to provide custom handling for models with property-based natural keys.\n        \"\"\"\nreturn cls.natural_key_field_lookups\n@classproperty  # https://github.com/PyCQA/pylint-django/issues/240\ndef natural_key_field_lookups(cls):  # pylint: disable=no-self-argument\n\"\"\"\n        List of lookups (possibly including nested lookups for related models) that make up this model's natural key.\n        BaseModel provides a \"smart\" implementation that tries to determine this automatically,\n        but you can also explicitly set `natural_key_field_names` on a given model subclass if desired.\n        This property is based on a consolidation of `django-natural-keys` `ForeignKeyModel.get_natural_key_info()`,\n        `ForeignKeyModel.get_natural_key_def()`, and `ForeignKeyModel.get_natural_key_fields()`.\n        Unlike `get_natural_key_def()`, this doesn't auto-exclude all AutoField and BigAutoField fields,\n        but instead explicitly discounts the `id` field (only) as a candidate.\n        \"\"\"\n# First, figure out which local fields comprise the natural key:\nnatural_key_field_names = []\nif hasattr(cls, \"natural_key_field_names\"):\nnatural_key_field_names = cls.natural_key_field_names\nelse:\n# Does this model have any new-style UniqueConstraints? If so, pick the first one\nfor constraint in cls._meta.constraints:\nif isinstance(constraint, models.UniqueConstraint):\nnatural_key_field_names = constraint.fields\nbreak\nelse:\n# Else, does this model have any old-style unique_together? If so, pick the first one.\nif cls._meta.unique_together:\nnatural_key_field_names = cls._meta.unique_together[0]\nelse:\n# Else, do we have any individual unique=True fields? If so, pick the first one.\nunique_fields = [field for field in cls._meta.fields if field.unique and field.name != \"id\"]\nif unique_fields:\nnatural_key_field_names = (unique_fields[0].name,)\nif not natural_key_field_names:\nraise AttributeError(\nf\"Unable to identify an intrinsic natural-key definition for {cls.__name__}. \"\n\"If there isn't at least one UniqueConstraint, unique_together, or field with unique=True, \"\n\"you probably need to explicitly declare the 'natural_key_field_names' for this model, \"\n\"or potentially override the default 'natural_key_field_lookups' implementation for this model.\"\n)\n# Next, for any natural key fields that have related models, get the natural key for the related model if known\nreturn cls._generate_field_lookups_from_natural_key_field_names(natural_key_field_names)\n@classmethod\ndef natural_key_args_to_kwargs(cls, args):\n\"\"\"\n        Helper function to map a list of natural key field values to actual kwargs suitable for lookup and filtering.\n        Based on `django-natural-keys` `NaturalKeyQuerySet.natural_key_kwargs()` method.\n        \"\"\"\nargs = list(args)\nnatural_key_field_lookups = cls.natural_key_field_lookups\n# Because `natural_key` strips trailing `None` from the natural key to handle the variadic-natural-key case,\n# we may need to add trailing `None` back on to make the number of args match back up.\nwhile len(args) &lt; len(natural_key_field_lookups):\nargs.append(None)\n# However, if we have *too many* args, that's just incorrect usage:\nif len(args) &gt; len(natural_key_field_lookups):\nraise ValueError(\nf\"Wrong number of natural-key args for {cls.__name__}.natural_key_args_to_kwargs() -- \"\nf\"expected no more than {len(natural_key_field_lookups)} but got {len(args)}.\"\n)\nreturn dict(zip(natural_key_field_lookups, args))\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.BaseModel.composite_key","title":"<code>composite_key: str</code>  <code>property</code>","text":"<p>Automatic \"slug\" string derived from this model's natural key, suitable for use in URLs etc.</p> <p>A less na\u00efve implementation than django-natural-keys provides by default, based around URL percent-encoding.</p>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.BaseModel.natural_slug","title":"<code>natural_slug: str</code>  <code>property</code>","text":"<p>Automatic \"slug\" string derived from this model's natural key. This differs from composite key in that it must be human-readable and comply with a very limited character set, and is therefore lossy. This value is not guaranteed to be unique although a best effort is made by appending a fragment of the primary key to the natural slug value.</p>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.BaseModel.present_in_database","title":"<code>present_in_database</code>  <code>property</code>","text":"<p>True if the record exists in the database, False if it does not.</p>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.BaseModel.csv_natural_key_field_lookups","title":"<code>csv_natural_key_field_lookups()</code>  <code>classmethod</code>","text":"<p>Override this method for models with Python <code>@property</code> as part of their <code>natural_key_field_names</code>.</p> <p>Since CSV export for <code>natural_key_field_names</code> relies on database fields, you can override this method to provide custom handling for models with property-based natural keys.</p> Source code in <code>nautobot/core/models/__init__.py</code> <pre><code>@classmethod\ndef csv_natural_key_field_lookups(cls):\n\"\"\"Override this method for models with Python `@property` as part of their `natural_key_field_names`.\n    Since CSV export for `natural_key_field_names` relies on database fields, you can override this method\n    to provide custom handling for models with property-based natural keys.\n    \"\"\"\nreturn cls.natural_key_field_lookups\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.BaseModel.get_absolute_url","title":"<code>get_absolute_url(api=False)</code>","text":"<p>Return the canonical URL for this object in either the UI or the REST API.</p> Source code in <code>nautobot/core/models/__init__.py</code> <pre><code>def get_absolute_url(self, api=False):\n\"\"\"\n    Return the canonical URL for this object in either the UI or the REST API.\n    \"\"\"\n# Iterate the pk-like fields and try to get a URL, or return None.\nfields = [\"pk\"]\nactions = [\"retrieve\", \"detail\", \"\"]  # TODO: Eventually all retrieve\nfor field in fields:\nif not hasattr(self, field):\ncontinue\nfor action in actions:\nroute = get_route_for_model(self, action, api=api)\ntry:\nreturn reverse(route, kwargs={field: getattr(self, field)})\nexcept NoReverseMatch:\ncontinue\nraise AttributeError(f\"Cannot find a URL for {self} ({self._meta.app_label}.{self._meta.model_name})\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.BaseModel.natural_key","title":"<code>natural_key()</code>","text":"<p>Smarter default implementation of natural key construction.</p> <ol> <li>Handles nullable foreign keys (https://github.com/wq/django-natural-keys/issues/18)</li> <li>Handles variadic natural-keys (e.g. Location model - [name, parent__name, parent__parent__name, ...].)</li> </ol> Source code in <code>nautobot/core/models/__init__.py</code> <pre><code>def natural_key(self) -&gt; list:\n\"\"\"\n    Smarter default implementation of natural key construction.\n    1. Handles nullable foreign keys (https://github.com/wq/django-natural-keys/issues/18)\n    2. Handles variadic natural-keys (e.g. Location model - [name, parent__name, parent__parent__name, ...].)\n    \"\"\"\nvals = []\nfor lookups in [lookup.split(\"__\") for lookup in self.natural_key_field_lookups]:\nval = self\nfor lookup in lookups:\nval = getattr(val, lookup)\nif val is None:\nbreak\nif not is_protected_type(val):\nval = str(val)\nvals.append(val)\n# Strip trailing Nones from vals\nwhile vals and vals[-1] is None:\nvals.pop()\nreturn vals\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.BaseModel.natural_key_args_to_kwargs","title":"<code>natural_key_args_to_kwargs(args)</code>  <code>classmethod</code>","text":"<p>Helper function to map a list of natural key field values to actual kwargs suitable for lookup and filtering.</p> <p>Based on <code>django-natural-keys</code> <code>NaturalKeyQuerySet.natural_key_kwargs()</code> method.</p> Source code in <code>nautobot/core/models/__init__.py</code> <pre><code>@classmethod\ndef natural_key_args_to_kwargs(cls, args):\n\"\"\"\n    Helper function to map a list of natural key field values to actual kwargs suitable for lookup and filtering.\n    Based on `django-natural-keys` `NaturalKeyQuerySet.natural_key_kwargs()` method.\n    \"\"\"\nargs = list(args)\nnatural_key_field_lookups = cls.natural_key_field_lookups\n# Because `natural_key` strips trailing `None` from the natural key to handle the variadic-natural-key case,\n# we may need to add trailing `None` back on to make the number of args match back up.\nwhile len(args) &lt; len(natural_key_field_lookups):\nargs.append(None)\n# However, if we have *too many* args, that's just incorrect usage:\nif len(args) &gt; len(natural_key_field_lookups):\nraise ValueError(\nf\"Wrong number of natural-key args for {cls.__name__}.natural_key_args_to_kwargs() -- \"\nf\"expected no more than {len(natural_key_field_lookups)} but got {len(args)}.\"\n)\nreturn dict(zip(natural_key_field_lookups, args))\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.BaseModel.natural_key_field_lookups","title":"<code>natural_key_field_lookups()</code>","text":"<p>List of lookups (possibly including nested lookups for related models) that make up this model's natural key.</p> <p>BaseModel provides a \"smart\" implementation that tries to determine this automatically, but you can also explicitly set <code>natural_key_field_names</code> on a given model subclass if desired.</p> <p>This property is based on a consolidation of <code>django-natural-keys</code> <code>ForeignKeyModel.get_natural_key_info()</code>, <code>ForeignKeyModel.get_natural_key_def()</code>, and <code>ForeignKeyModel.get_natural_key_fields()</code>.</p> <p>Unlike <code>get_natural_key_def()</code>, this doesn't auto-exclude all AutoField and BigAutoField fields, but instead explicitly discounts the <code>id</code> field (only) as a candidate.</p> Source code in <code>nautobot/core/models/__init__.py</code> <pre><code>@classproperty  # https://github.com/PyCQA/pylint-django/issues/240\ndef natural_key_field_lookups(cls):  # pylint: disable=no-self-argument\n\"\"\"\n    List of lookups (possibly including nested lookups for related models) that make up this model's natural key.\n    BaseModel provides a \"smart\" implementation that tries to determine this automatically,\n    but you can also explicitly set `natural_key_field_names` on a given model subclass if desired.\n    This property is based on a consolidation of `django-natural-keys` `ForeignKeyModel.get_natural_key_info()`,\n    `ForeignKeyModel.get_natural_key_def()`, and `ForeignKeyModel.get_natural_key_fields()`.\n    Unlike `get_natural_key_def()`, this doesn't auto-exclude all AutoField and BigAutoField fields,\n    but instead explicitly discounts the `id` field (only) as a candidate.\n    \"\"\"\n# First, figure out which local fields comprise the natural key:\nnatural_key_field_names = []\nif hasattr(cls, \"natural_key_field_names\"):\nnatural_key_field_names = cls.natural_key_field_names\nelse:\n# Does this model have any new-style UniqueConstraints? If so, pick the first one\nfor constraint in cls._meta.constraints:\nif isinstance(constraint, models.UniqueConstraint):\nnatural_key_field_names = constraint.fields\nbreak\nelse:\n# Else, does this model have any old-style unique_together? If so, pick the first one.\nif cls._meta.unique_together:\nnatural_key_field_names = cls._meta.unique_together[0]\nelse:\n# Else, do we have any individual unique=True fields? If so, pick the first one.\nunique_fields = [field for field in cls._meta.fields if field.unique and field.name != \"id\"]\nif unique_fields:\nnatural_key_field_names = (unique_fields[0].name,)\nif not natural_key_field_names:\nraise AttributeError(\nf\"Unable to identify an intrinsic natural-key definition for {cls.__name__}. \"\n\"If there isn't at least one UniqueConstraint, unique_together, or field with unique=True, \"\n\"you probably need to explicitly declare the 'natural_key_field_names' for this model, \"\n\"or potentially override the default 'natural_key_field_lookups' implementation for this model.\"\n)\n# Next, for any natural key fields that have related models, get the natural key for the related model if known\nreturn cls._generate_field_lookups_from_natural_key_field_names(natural_key_field_names)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.BaseModel.validated_save","title":"<code>validated_save(*args, **kwargs)</code>","text":"<p>Perform model validation during instance save.</p> <p>This is a convenience method that first calls <code>self.full_clean()</code> and then <code>self.save()</code> which in effect enforces model validation prior to saving the instance, without having to manually make these calls seperately. This is a slight departure from Django norms, but is intended to offer an optional, simplified interface for performing this common workflow. The intended use is for user defined Jobs run via the <code>nautobot-server nbshell</code> command.</p> Source code in <code>nautobot/core/models/__init__.py</code> <pre><code>def validated_save(self, *args, **kwargs):\n\"\"\"\n    Perform model validation during instance save.\n    This is a convenience method that first calls `self.full_clean()` and then `self.save()`\n    which in effect enforces model validation prior to saving the instance, without having\n    to manually make these calls seperately. This is a slight departure from Django norms,\n    but is intended to offer an optional, simplified interface for performing this common\n    workflow. The intended use is for user defined Jobs run via the `nautobot-server nbshell`\n    command.\n    \"\"\"\nself.full_clean()\nself.save(*args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.ChangeLoggedModel","title":"<code>nautobot.apps.models.ChangeLoggedModel</code>","text":"<p>             Bases: <code>models.Model</code></p> <p>An abstract model which adds fields to store the creation and last-updated times for an object. Both fields can be null to facilitate adding these fields to existing instances via a database migration.</p> Source code in <code>nautobot/extras/models/change_logging.py</code> <pre><code>class ChangeLoggedModel(models.Model):\n\"\"\"\n    An abstract model which adds fields to store the creation and last-updated times for an object. Both fields can be\n    null to facilitate adding these fields to existing instances via a database migration.\n    \"\"\"\ncreated = models.DateTimeField(auto_now_add=True, blank=True, null=True)\nlast_updated = models.DateTimeField(auto_now=True, blank=True, null=True)\nclass Meta:\nabstract = True\ndef to_objectchange(self, action, *, related_object=None, object_data_extra=None, object_data_exclude=None):\n\"\"\"\n        Return a new ObjectChange representing a change made to this object. This will typically be called automatically\n        by ChangeLoggingMiddleware.\n        \"\"\"\nreturn ObjectChange(\nchanged_object=self,\nobject_repr=str(self)[:CHANGELOG_MAX_OBJECT_REPR],\naction=action,\nobject_data=serialize_object(self, extra=object_data_extra, exclude=object_data_exclude),\nobject_data_v2=serialize_object_v2(self),\nrelated_object=related_object,\n)\ndef get_changelog_url(self):\n\"\"\"Return the changelog URL for this object.\"\"\"\nroute = get_route_for_model(self, \"changelog\")\n# Iterate the pk-like fields and try to get a URL, or return None.\nfields = [\"pk\", \"slug\"]\nfor field in fields:\nif not hasattr(self, field):\ncontinue\ntry:\nreturn reverse(route, kwargs={field: getattr(self, field)})\nexcept NoReverseMatch:\ncontinue\nreturn None\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.models.change_logging.ChangeLoggedModel.get_changelog_url","title":"<code>get_changelog_url()</code>","text":"<p>Return the changelog URL for this object.</p> Source code in <code>nautobot/extras/models/change_logging.py</code> <pre><code>def get_changelog_url(self):\n\"\"\"Return the changelog URL for this object.\"\"\"\nroute = get_route_for_model(self, \"changelog\")\n# Iterate the pk-like fields and try to get a URL, or return None.\nfields = [\"pk\", \"slug\"]\nfor field in fields:\nif not hasattr(self, field):\ncontinue\ntry:\nreturn reverse(route, kwargs={field: getattr(self, field)})\nexcept NoReverseMatch:\ncontinue\nreturn None\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.models.change_logging.ChangeLoggedModel.to_objectchange","title":"<code>to_objectchange(action, *, related_object=None, object_data_extra=None, object_data_exclude=None)</code>","text":"<p>Return a new ObjectChange representing a change made to this object. This will typically be called automatically by ChangeLoggingMiddleware.</p> Source code in <code>nautobot/extras/models/change_logging.py</code> <pre><code>def to_objectchange(self, action, *, related_object=None, object_data_extra=None, object_data_exclude=None):\n\"\"\"\n    Return a new ObjectChange representing a change made to this object. This will typically be called automatically\n    by ChangeLoggingMiddleware.\n    \"\"\"\nreturn ObjectChange(\nchanged_object=self,\nobject_repr=str(self)[:CHANGELOG_MAX_OBJECT_REPR],\naction=action,\nobject_data=serialize_object(self, extra=object_data_extra, exclude=object_data_exclude),\nobject_data_v2=serialize_object_v2(self),\nrelated_object=related_object,\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.CollateAsChar","title":"<code>nautobot.apps.models.CollateAsChar</code>","text":"<p>             Bases: <code>Func</code></p> <p>Disregard localization by collating a field as a plain character string. Helpful for ensuring predictable ordering.</p> Source code in <code>nautobot/core/models/query_functions.py</code> <pre><code>class CollateAsChar(Func):\n\"\"\"\n    Disregard localization by collating a field as a plain character string. Helpful for ensuring predictable ordering.\n    \"\"\"\nfunction = None\ntemplate = \"(%(expressions)s) COLLATE %(function)s\"\ndef as_sql(self, compiler, connection, function=None, template=None, arg_joiner=None, **extra_context):\nvendor = connection.vendor\n# Mapping of vendor =&gt; function\nfunc_map = {\n\"postgresql\": '\"C\"',\n\"mysql\": \"utf8mb4_bin\",\n}\nif vendor not in func_map:\nraise NotSupportedError(f\"CollateAsChar is not supported for database {vendor}\")\nfunction = func_map[connection.vendor]\nreturn super().as_sql(compiler, connection, function, template, arg_joiner, **extra_context)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.CompositeKeyQuerySetMixin","title":"<code>nautobot.apps.models.CompositeKeyQuerySetMixin</code>","text":"<p>Mixin to extend a base queryset class with support for filtering by <code>composite_key=...</code> as a virtual parameter.</p> Example <p>Location.objects.last().composite_key 'Durham;AMER'</p> <p>Note that <code>Location.composite_key</code> is a <code>@property</code>, not a database field, and so would not normally be usable in a <code>QuerySet</code> query, but because <code>RestrictedQuerySet</code> inherits from this mixin, the following \"just works\":</p> <pre><code>&gt;&gt;&gt; Location.objects.get(composite_key=\"Durham;AMER\")\n&lt;Location: Durham&gt;\n</code></pre> This is a shorthand for what would otherwise be a multi-step process <p>from nautobot.core.models.utils import deconstruct_composite_key deconstruct_composite_key(\"Durham;AMER\") ['Durham', 'AMER'] Location.natural_key_args_to_kwargs(['Durham', 'AMER']) {'name': 'Durham', 'parent__name': 'AMER'} Location.objects.get(name=\"Durham\", parent__name=\"AMER\")  <p>This works for QuerySet <code>filter()</code> and <code>exclude()</code> as well:</p> <pre><code>&gt;&gt;&gt; Location.objects.filter(composite_key='Durham;AMER')\n&lt;LocationQuerySet [&lt;Location: Durham&gt;]&gt;\n&gt;&gt;&gt; Location.objects.exclude(composite_key='Durham;AMER')\n&lt;LocationQuerySet [&lt;Location: AMER&gt;]&gt;\n</code></pre> <p><code>composite_key</code> can also be used in combination with other query parameters:</p> <pre><code>&gt;&gt;&gt; Location.objects.filter(composite_key='Durham;AMER', status__name='Planned')\n&lt;LocationQuerySet []&gt;\n</code></pre> It will raise a ValueError if the deconstructed composite key collides with another query parameter <p>Location.objects.filter(composite_key='Durham;AMER', name='Raleigh') ValueError: Conflicting values for key \"name\": ('Durham', 'Raleigh')</p> <p>See also <code>BaseModel.composite_key</code> and <code>utils.construct_composite_key()</code>/<code>utils.deconstruct_composite_key()</code>.</p> Source code in <code>nautobot/core/models/querysets.py</code> <pre><code>class CompositeKeyQuerySetMixin:\n\"\"\"\n    Mixin to extend a base queryset class with support for filtering by `composite_key=...` as a virtual parameter.\n    Example:\n        &gt;&gt;&gt; Location.objects.last().composite_key\n        'Durham;AMER'\n    Note that `Location.composite_key` is a `@property`, *not* a database field, and so would not normally be usable in\n    a `QuerySet` query, but because `RestrictedQuerySet` inherits from this mixin, the following \"just works\":\n        &gt;&gt;&gt; Location.objects.get(composite_key=\"Durham;AMER\")\n        &lt;Location: Durham&gt;\n    This is a shorthand for what would otherwise be a multi-step process:\n        &gt;&gt;&gt; from nautobot.core.models.utils import deconstruct_composite_key\n        &gt;&gt;&gt; deconstruct_composite_key(\"Durham;AMER\")\n        ['Durham', 'AMER']\n        &gt;&gt;&gt; Location.natural_key_args_to_kwargs(['Durham', 'AMER'])\n        {'name': 'Durham', 'parent__name': 'AMER'}\n        &gt;&gt;&gt; Location.objects.get(name=\"Durham\", parent__name=\"AMER\")\n        &lt;Location: Durham&gt;\n    This works for QuerySet `filter()` and `exclude()` as well:\n        &gt;&gt;&gt; Location.objects.filter(composite_key='Durham;AMER')\n        &lt;LocationQuerySet [&lt;Location: Durham&gt;]&gt;\n        &gt;&gt;&gt; Location.objects.exclude(composite_key='Durham;AMER')\n        &lt;LocationQuerySet [&lt;Location: AMER&gt;]&gt;\n    `composite_key` can also be used in combination with other query parameters:\n        &gt;&gt;&gt; Location.objects.filter(composite_key='Durham;AMER', status__name='Planned')\n        &lt;LocationQuerySet []&gt;\n    It will raise a ValueError if the deconstructed composite key collides with another query parameter:\n        &gt;&gt;&gt; Location.objects.filter(composite_key='Durham;AMER', name='Raleigh')\n        ValueError: Conflicting values for key \"name\": ('Durham', 'Raleigh')\n    See also `BaseModel.composite_key` and `utils.construct_composite_key()`/`utils.deconstruct_composite_key()`.\n    \"\"\"\ndef split_composite_key_into_kwargs(self, composite_key=None, **kwargs):\n\"\"\"\n        Helper method abstracting a common need from filter() and exclude().\n        Subclasses may need to call this directly if they also have special processing of other filter/exclude params.\n        \"\"\"\nif composite_key and isinstance(composite_key, str):\nnatural_key_values = deconstruct_composite_key(composite_key)\nreturn merge_dicts_without_collision(self.model.natural_key_args_to_kwargs(natural_key_values), kwargs)\nreturn kwargs\ndef filter(self, *args, composite_key=None, **kwargs):\n\"\"\"\n        Explicitly handle `filter(composite_key=\"...\")` by decomposing the composite-key into natural key parameters.\n        Counterpart to BaseModel.composite_key property.\n        \"\"\"\nreturn super().filter(*args, **self.split_composite_key_into_kwargs(composite_key, **kwargs))\ndef exclude(self, *args, composite_key=None, **kwargs):\n\"\"\"\n        Explicitly handle `exclude(composite_key=\"...\")` by decomposing the composite-key into natural key parameters.\n        Counterpart to BaseModel.composite_key property.\n        \"\"\"\nreturn super().exclude(*args, **self.split_composite_key_into_kwargs(composite_key, **kwargs))\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.querysets.CompositeKeyQuerySetMixin.exclude","title":"<code>exclude(*args, composite_key=None, **kwargs)</code>","text":"<p>Explicitly handle <code>exclude(composite_key=\"...\")</code> by decomposing the composite-key into natural key parameters.</p> <p>Counterpart to BaseModel.composite_key property.</p> Source code in <code>nautobot/core/models/querysets.py</code> <pre><code>def exclude(self, *args, composite_key=None, **kwargs):\n\"\"\"\n    Explicitly handle `exclude(composite_key=\"...\")` by decomposing the composite-key into natural key parameters.\n    Counterpart to BaseModel.composite_key property.\n    \"\"\"\nreturn super().exclude(*args, **self.split_composite_key_into_kwargs(composite_key, **kwargs))\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.querysets.CompositeKeyQuerySetMixin.filter","title":"<code>filter(*args, composite_key=None, **kwargs)</code>","text":"<p>Explicitly handle <code>filter(composite_key=\"...\")</code> by decomposing the composite-key into natural key parameters.</p> <p>Counterpart to BaseModel.composite_key property.</p> Source code in <code>nautobot/core/models/querysets.py</code> <pre><code>def filter(self, *args, composite_key=None, **kwargs):\n\"\"\"\n    Explicitly handle `filter(composite_key=\"...\")` by decomposing the composite-key into natural key parameters.\n    Counterpart to BaseModel.composite_key property.\n    \"\"\"\nreturn super().filter(*args, **self.split_composite_key_into_kwargs(composite_key, **kwargs))\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.querysets.CompositeKeyQuerySetMixin.split_composite_key_into_kwargs","title":"<code>split_composite_key_into_kwargs(composite_key=None, **kwargs)</code>","text":"<p>Helper method abstracting a common need from filter() and exclude().</p> <p>Subclasses may need to call this directly if they also have special processing of other filter/exclude params.</p> Source code in <code>nautobot/core/models/querysets.py</code> <pre><code>def split_composite_key_into_kwargs(self, composite_key=None, **kwargs):\n\"\"\"\n    Helper method abstracting a common need from filter() and exclude().\n    Subclasses may need to call this directly if they also have special processing of other filter/exclude params.\n    \"\"\"\nif composite_key and isinstance(composite_key, str):\nnatural_key_values = deconstruct_composite_key(composite_key)\nreturn merge_dicts_without_collision(self.model.natural_key_args_to_kwargs(natural_key_values), kwargs)\nreturn kwargs\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.ConfigContextModel","title":"<code>nautobot.apps.models.ConfigContextModel</code>","text":"<p>             Bases: <code>models.Model</code>, <code>ConfigContextSchemaValidationMixin</code></p> <p>A model which includes local configuration context data. This local data will override any inherited data from ConfigContexts.</p> Source code in <code>nautobot/extras/models/models.py</code> <pre><code>class ConfigContextModel(models.Model, ConfigContextSchemaValidationMixin):\n\"\"\"\n    A model which includes local configuration context data. This local data will override any inherited data from\n    ConfigContexts.\n    \"\"\"\nlocal_config_context_data = models.JSONField(\nencoder=DjangoJSONEncoder,\nblank=True,\nnull=True,\n)\nlocal_config_context_schema = ForeignKeyWithAutoRelatedName(\nto=\"extras.ConfigContextSchema\",\non_delete=models.SET_NULL,\nnull=True,\nblank=True,\nhelp_text=\"Optional schema to validate the structure of the data\",\n)\n# The local context data *may* be owned by another model, such as a GitRepository, or it may be un-owned\nlocal_config_context_data_owner_content_type = ForeignKeyWithAutoRelatedName(\nto=ContentType,\non_delete=models.CASCADE,\nlimit_choices_to=FeatureQuery(\"config_context_owners\"),\ndefault=None,\nnull=True,\nblank=True,\n)\nlocal_config_context_data_owner_object_id = models.UUIDField(default=None, null=True, blank=True)\nlocal_config_context_data_owner = GenericForeignKey(\nct_field=\"local_config_context_data_owner_content_type\",\nfk_field=\"local_config_context_data_owner_object_id\",\n)\nclass Meta:\nabstract = True\nindexes = [\nmodels.Index(\nfields=(\"local_config_context_data_owner_content_type\", \"local_config_context_data_owner_object_id\")\n),\n]\ndef get_config_context(self):\n\"\"\"\n        Return the rendered configuration context for a device or VM.\n        \"\"\"\nif not hasattr(self, \"config_context_data\"):\n# Annotation not available, so fall back to manually querying for the config context\nconfig_context_data = ConfigContext.objects.get_for_object(self).values_list(\"data\", flat=True)\nelse:\nconfig_context_data = self.config_context_data or []\n# Device and VirtualMachine's Location has its own ConfigContext and its parent Locations' ConfigContext, if any, should\n# also be applied. However, since moving from mptt to django-tree-queries https://github.com/nautobot/nautobot/issues/510,\n# we lost the ability to query the ancestors for a particular tree node for subquery https://github.com/matthiask/django-tree-queries/issues/54.\n# So instead of constructing the location related query in ConfigContextModelQueryset._get_config_context_filters(), which is complicated across databases\n# We append the missing parent location query here as a patch.\nlocation_config_context_queryset = ConfigContext.objects.none()\nif self._meta.model_name == \"device\":\nlocation_config_context_queryset = ConfigContext.objects.filter(\nlocations__in=self.location.ancestors(include_self=True)\n).distinct()\nelse:\nif self.cluster and self.cluster.location:\nlocation_config_context_queryset = ConfigContext.objects.filter(\nlocations__in=self.cluster.location.ancestors(include_self=True)\n).distinct()\n# Annotation has keys \"weight\" and \"name\" (used for ordering) and \"data\" (the actual config context data)\nfor cc in location_config_context_queryset:\nconfig_context_data.append({\"data\": cc.data, \"name\": cc.name, \"weight\": cc.weight})\nconfig_context_data = [\nc[\"data\"] for c in sorted(config_context_data, key=lambda k: (k[\"weight\"], k[\"name\"]))\n]\n# Compile all config data, overwriting lower-weight values with higher-weight values where a collision occurs\ndata = OrderedDict()\nfor context in config_context_data:\ndata = deepmerge(data, context)\n# If the object has local config context data defined, merge it last\nif self.local_config_context_data:\ndata = deepmerge(data, self.local_config_context_data)\nreturn data\ndef clean(self):\nsuper().clean()\n# Verify that JSON data is provided as an object\nif self.local_config_context_data and not isinstance(self.local_config_context_data, dict):\nraise ValidationError(\n{\"local_config_context_data\": 'JSON data must be in object form. Example: {\"foo\": 123}'}\n)\nif self.local_config_context_schema and not self.local_config_context_data:\nraise ValidationError(\n{\"local_config_context_schema\": \"Local config context data must exist for a schema to be applied.\"}\n)\n# Validate data against schema\nself._validate_with_schema(\"local_config_context_data\", \"local_config_context_schema\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.models.models.ConfigContextModel.get_config_context","title":"<code>get_config_context()</code>","text":"<p>Return the rendered configuration context for a device or VM.</p> Source code in <code>nautobot/extras/models/models.py</code> <pre><code>def get_config_context(self):\n\"\"\"\n    Return the rendered configuration context for a device or VM.\n    \"\"\"\nif not hasattr(self, \"config_context_data\"):\n# Annotation not available, so fall back to manually querying for the config context\nconfig_context_data = ConfigContext.objects.get_for_object(self).values_list(\"data\", flat=True)\nelse:\nconfig_context_data = self.config_context_data or []\n# Device and VirtualMachine's Location has its own ConfigContext and its parent Locations' ConfigContext, if any, should\n# also be applied. However, since moving from mptt to django-tree-queries https://github.com/nautobot/nautobot/issues/510,\n# we lost the ability to query the ancestors for a particular tree node for subquery https://github.com/matthiask/django-tree-queries/issues/54.\n# So instead of constructing the location related query in ConfigContextModelQueryset._get_config_context_filters(), which is complicated across databases\n# We append the missing parent location query here as a patch.\nlocation_config_context_queryset = ConfigContext.objects.none()\nif self._meta.model_name == \"device\":\nlocation_config_context_queryset = ConfigContext.objects.filter(\nlocations__in=self.location.ancestors(include_self=True)\n).distinct()\nelse:\nif self.cluster and self.cluster.location:\nlocation_config_context_queryset = ConfigContext.objects.filter(\nlocations__in=self.cluster.location.ancestors(include_self=True)\n).distinct()\n# Annotation has keys \"weight\" and \"name\" (used for ordering) and \"data\" (the actual config context data)\nfor cc in location_config_context_queryset:\nconfig_context_data.append({\"data\": cc.data, \"name\": cc.name, \"weight\": cc.weight})\nconfig_context_data = [\nc[\"data\"] for c in sorted(config_context_data, key=lambda k: (k[\"weight\"], k[\"name\"]))\n]\n# Compile all config data, overwriting lower-weight values with higher-weight values where a collision occurs\ndata = OrderedDict()\nfor context in config_context_data:\ndata = deepmerge(data, context)\n# If the object has local config context data defined, merge it last\nif self.local_config_context_data:\ndata = deepmerge(data, self.local_config_context_data)\nreturn data\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.ConfigContextSchemaValidationMixin","title":"<code>nautobot.apps.models.ConfigContextSchemaValidationMixin</code>","text":"<p>Mixin that provides validation of config context data against a json schema.</p> Source code in <code>nautobot/extras/models/models.py</code> <pre><code>class ConfigContextSchemaValidationMixin:\n\"\"\"\n    Mixin that provides validation of config context data against a json schema.\n    \"\"\"\ndef _validate_with_schema(self, data_field, schema_field):\nschema = getattr(self, schema_field)\ndata = getattr(self, data_field)\n# If schema is None, then no schema has been specified on the instance and thus no validation should occur.\nif schema:\ntry:\nDraft7Validator(schema.data_schema, format_checker=Draft7Validator.FORMAT_CHECKER).validate(data)\nexcept JSONSchemaValidationError as e:\nraise ValidationError({data_field: [f\"Validation using the JSON Schema {schema} failed.\", e.message]})\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.ContentTypeRelatedQuerySet","title":"<code>nautobot.apps.models.ContentTypeRelatedQuerySet</code>","text":"<p>             Bases: <code>RestrictedQuerySet</code></p> Source code in <code>nautobot/core/models/name_color_content_types.py</code> <pre><code>class ContentTypeRelatedQuerySet(RestrictedQuerySet):\ndef get_for_model(self, model):\n\"\"\"\n        Return all `self.model` instances assigned to the given model.\n        \"\"\"\ncontent_type = ContentType.objects.get_for_model(model._meta.concrete_model)\nreturn self.filter(content_types=content_type)\n# TODO(timizuo): Merge into get_for_model; Cant do this now cause it would require alot\n#  of refactoring\ndef get_for_models(self, models_):\n\"\"\"\n        Return all `self.model` instances assigned to the given `_models`.\n        \"\"\"\nq = Q()\nfor model in models_:\nq |= Q(app_label=model._meta.app_label, model=model._meta.model_name)\ncontent_types = ContentType.objects.filter(q)\nreturn self.filter(content_types__in=content_types)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.name_color_content_types.ContentTypeRelatedQuerySet.get_for_model","title":"<code>get_for_model(model)</code>","text":"<p>Return all <code>self.model</code> instances assigned to the given model.</p> Source code in <code>nautobot/core/models/name_color_content_types.py</code> <pre><code>def get_for_model(self, model):\n\"\"\"\n    Return all `self.model` instances assigned to the given model.\n    \"\"\"\ncontent_type = ContentType.objects.get_for_model(model._meta.concrete_model)\nreturn self.filter(content_types=content_type)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.name_color_content_types.ContentTypeRelatedQuerySet.get_for_models","title":"<code>get_for_models(models_)</code>","text":"<p>Return all <code>self.model</code> instances assigned to the given <code>_models</code>.</p> Source code in <code>nautobot/core/models/name_color_content_types.py</code> <pre><code>def get_for_models(self, models_):\n\"\"\"\n    Return all `self.model` instances assigned to the given `_models`.\n    \"\"\"\nq = Q()\nfor model in models_:\nq |= Q(app_label=model._meta.app_label, model=model._meta.model_name)\ncontent_types = ContentType.objects.filter(q)\nreturn self.filter(content_types__in=content_types)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.CustomFieldModel","title":"<code>nautobot.apps.models.CustomFieldModel</code>","text":"<p>             Bases: <code>models.Model</code></p> <p>Abstract class for any model which may have custom fields associated with it.</p> Source code in <code>nautobot/extras/models/customfields.py</code> <pre><code>class CustomFieldModel(models.Model):\n\"\"\"\n    Abstract class for any model which may have custom fields associated with it.\n    \"\"\"\n_custom_field_data = models.JSONField(encoder=DjangoJSONEncoder, blank=True, default=dict)\nclass Meta:\nabstract = True\n@property\ndef custom_field_data(self):\n\"\"\"\n        Legacy interface to raw custom field data\n        TODO(John): remove this entirely when the cf property is enhanced\n        \"\"\"\nreturn self._custom_field_data\n@property\ndef cf(self):\n\"\"\"\n        Convenience wrapper for custom field data.\n        \"\"\"\nreturn self._custom_field_data\ndef get_custom_fields_basic(self):\n\"\"\"\n        This method exists to help call get_custom_fields() in templates where a function argument (advanced_ui) cannot be specified.\n        Return a dictionary of custom fields for a single object in the form {&lt;field&gt;: value}\n        which have advanced_ui set to False\n        \"\"\"\nreturn self.get_custom_fields(advanced_ui=False)\ndef get_custom_fields_advanced(self):\n\"\"\"\n        This method exists to help call get_custom_fields() in templates where a function argument (advanced_ui) cannot be specified.\n        Return a dictionary of custom fields for a single object in the form {&lt;field&gt;: value}\n        which have advanced_ui set to True\n        \"\"\"\nreturn self.get_custom_fields(advanced_ui=True)\ndef get_custom_fields(self, advanced_ui=None):\n\"\"\"\n        Return a dictionary of custom fields for a single object in the form {&lt;field&gt;: value}.\n        \"\"\"\nfields = CustomField.objects.get_for_model(self)\nif advanced_ui is not None:\nfields = fields.filter(advanced_ui=advanced_ui)\nreturn OrderedDict([(field, self.cf.get(field.key)) for field in fields])\ndef get_custom_field_groupings_basic(self):\n\"\"\"\n        This method exists to help call get_custom_field_groupings() in templates where a function argument (advanced_ui) cannot be specified.\n        Return a dictonary of custom fields grouped by the same grouping in the form\n        {\n            &lt;grouping_1&gt;: [(cf1, &lt;value for cf1&gt;), (cf2, &lt;value for cf2&gt;), ...],\n            ...\n            &lt;grouping_5&gt;: [(cf8, &lt;value for cf8&gt;), (cf9, &lt;value for cf9&gt;), ...],\n            ...\n        }\n        which have advanced_ui set to False\n        \"\"\"\nreturn self.get_custom_field_groupings(advanced_ui=False)\ndef get_custom_field_groupings_advanced(self):\n\"\"\"\n        This method exists to help call get_custom_field_groupings() in templates where a function argument (advanced_ui) cannot be specified.\n        Return a dictonary of custom fields grouped by the same grouping in the form\n        {\n            &lt;grouping_1&gt;: [(cf1, &lt;value for cf1&gt;), (cf2, &lt;value for cf2&gt;), ...],\n            ...\n            &lt;grouping_5&gt;: [(cf8, &lt;value for cf8&gt;), (cf9, &lt;value for cf9&gt;), ...],\n            ...\n        }\n        which have advanced_ui set to True\n        \"\"\"\nreturn self.get_custom_field_groupings(advanced_ui=True)\ndef get_custom_field_groupings(self, advanced_ui=None):\n\"\"\"\n        Return a dictonary of custom fields grouped by the same grouping in the form\n        {\n            &lt;grouping_1&gt;: [(cf1, &lt;value for cf1&gt;), (cf2, &lt;value for cf2&gt;), ...],\n            ...\n            &lt;grouping_5&gt;: [(cf8, &lt;value for cf8&gt;), (cf9, &lt;value for cf9&gt;), ...],\n            ...\n        }\n        \"\"\"\nrecord = {}\nfields = CustomField.objects.get_for_model(self)\nif advanced_ui is not None:\nfields = fields.filter(advanced_ui=advanced_ui)\nfor field in fields:\ndata = (field, self.cf.get(field.key))\nrecord.setdefault(field.grouping, []).append(data)\nrecord = dict(sorted(record.items()))\nreturn record\ndef clean(self):\nsuper().clean()\ncustom_fields = {cf.key: cf for cf in CustomField.objects.get_for_model(self)}\n# Validate all field values\nfor field_key, value in self._custom_field_data.items():\nif field_key not in custom_fields:\n# log a warning instead of raising a ValidationError so as not to break the UI\nlogger.warning(f\"Unknown field key '{field_key}' in custom field data for {self} ({self.pk}).\")\ncontinue\ntry:\nself._custom_field_data[field_key] = custom_fields[field_key].validate(value)\nexcept ValidationError as e:\nraise ValidationError(f\"Invalid value for custom field '{field_key}': {e.message}\")\n# Check for missing values, erroring on required ones and populating non-required ones automatically\nfor cf in custom_fields.values():\nif cf.key not in self._custom_field_data:\nif cf.default is not None:\nself._custom_field_data[cf.key] = cf.default\nelif cf.required:\nraise ValidationError(f\"Missing required custom field '{cf.key}'.\")\n# Computed Field Methods\ndef has_computed_fields(self, advanced_ui=None):\n\"\"\"\n        Return a boolean indicating whether or not this content type has computed fields associated with it.\n        This can also check whether the advanced_ui attribute is True or False for UI display purposes.\n        \"\"\"\ncomputed_fields = ComputedField.objects.get_for_model(self)\nif advanced_ui is not None:\ncomputed_fields = computed_fields.filter(advanced_ui=advanced_ui)\nreturn computed_fields.exists()\ndef has_computed_fields_basic(self):\nreturn self.has_computed_fields(advanced_ui=False)\ndef has_computed_fields_advanced(self):\nreturn self.has_computed_fields(advanced_ui=True)\ndef get_computed_field(self, key, render=True):\n\"\"\"\n        Get a computed field for this model, lookup via key.\n        Returns the template of this field if render is False, otherwise returns the rendered value.\n        \"\"\"\ntry:\ncomputed_field = ComputedField.objects.get_for_model(self).get(key=key)\nexcept ComputedField.DoesNotExist:\nlogger.warning(\"Computed Field with key %s does not exist for model %s\", key, self._meta.verbose_name)\nreturn None\nif render:\nreturn computed_field.render(context={\"obj\": self})\nreturn computed_field.template\ndef get_computed_fields(self, label_as_key=False, advanced_ui=None):\n\"\"\"\n        Return a dictionary of all computed fields and their rendered values for this model.\n        Keys are the `key` value of each field. If label_as_key is True, `label` values of each field are used as keys.\n        \"\"\"\ncomputed_fields_dict = {}\ncomputed_fields = ComputedField.objects.get_for_model(self)\nif advanced_ui is not None:\ncomputed_fields = computed_fields.filter(advanced_ui=advanced_ui)\nif not computed_fields:\nreturn {}\nfor cf in computed_fields:\ncomputed_fields_dict[cf.label if label_as_key else cf.key] = cf.render(context={\"obj\": self})\nreturn computed_fields_dict\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.models.customfields.CustomFieldModel.cf","title":"<code>cf</code>  <code>property</code>","text":"<p>Convenience wrapper for custom field data.</p>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.models.customfields.CustomFieldModel.custom_field_data","title":"<code>custom_field_data</code>  <code>property</code>","text":"<p>Legacy interface to raw custom field data</p> <p>TODO(John): remove this entirely when the cf property is enhanced</p>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.models.customfields.CustomFieldModel.get_computed_field","title":"<code>get_computed_field(key, render=True)</code>","text":"<p>Get a computed field for this model, lookup via key. Returns the template of this field if render is False, otherwise returns the rendered value.</p> Source code in <code>nautobot/extras/models/customfields.py</code> <pre><code>def get_computed_field(self, key, render=True):\n\"\"\"\n    Get a computed field for this model, lookup via key.\n    Returns the template of this field if render is False, otherwise returns the rendered value.\n    \"\"\"\ntry:\ncomputed_field = ComputedField.objects.get_for_model(self).get(key=key)\nexcept ComputedField.DoesNotExist:\nlogger.warning(\"Computed Field with key %s does not exist for model %s\", key, self._meta.verbose_name)\nreturn None\nif render:\nreturn computed_field.render(context={\"obj\": self})\nreturn computed_field.template\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.models.customfields.CustomFieldModel.get_computed_fields","title":"<code>get_computed_fields(label_as_key=False, advanced_ui=None)</code>","text":"<p>Return a dictionary of all computed fields and their rendered values for this model. Keys are the <code>key</code> value of each field. If label_as_key is True, <code>label</code> values of each field are used as keys.</p> Source code in <code>nautobot/extras/models/customfields.py</code> <pre><code>def get_computed_fields(self, label_as_key=False, advanced_ui=None):\n\"\"\"\n    Return a dictionary of all computed fields and their rendered values for this model.\n    Keys are the `key` value of each field. If label_as_key is True, `label` values of each field are used as keys.\n    \"\"\"\ncomputed_fields_dict = {}\ncomputed_fields = ComputedField.objects.get_for_model(self)\nif advanced_ui is not None:\ncomputed_fields = computed_fields.filter(advanced_ui=advanced_ui)\nif not computed_fields:\nreturn {}\nfor cf in computed_fields:\ncomputed_fields_dict[cf.label if label_as_key else cf.key] = cf.render(context={\"obj\": self})\nreturn computed_fields_dict\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.models.customfields.CustomFieldModel.get_custom_field_groupings","title":"<code>get_custom_field_groupings(advanced_ui=None)</code>","text":"<p>Return a dictonary of custom fields grouped by the same grouping in the form {     : [(cf1, ), (cf2, ), ...],     ...     : [(cf8, ), (cf9, ), ...],     ... } Source code in <code>nautobot/extras/models/customfields.py</code> <pre><code>def get_custom_field_groupings(self, advanced_ui=None):\n\"\"\"\n    Return a dictonary of custom fields grouped by the same grouping in the form\n    {\n        &lt;grouping_1&gt;: [(cf1, &lt;value for cf1&gt;), (cf2, &lt;value for cf2&gt;), ...],\n        ...\n        &lt;grouping_5&gt;: [(cf8, &lt;value for cf8&gt;), (cf9, &lt;value for cf9&gt;), ...],\n        ...\n    }\n    \"\"\"\nrecord = {}\nfields = CustomField.objects.get_for_model(self)\nif advanced_ui is not None:\nfields = fields.filter(advanced_ui=advanced_ui)\nfor field in fields:\ndata = (field, self.cf.get(field.key))\nrecord.setdefault(field.grouping, []).append(data)\nrecord = dict(sorted(record.items()))\nreturn record\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.models.customfields.CustomFieldModel.get_custom_field_groupings_advanced","title":"<code>get_custom_field_groupings_advanced()</code>","text":"<p>This method exists to help call get_custom_field_groupings() in templates where a function argument (advanced_ui) cannot be specified. Return a dictonary of custom fields grouped by the same grouping in the form {     : [(cf1, ), (cf2, ), ...],     ...     : [(cf8, ), (cf9, ), ...],     ... } which have advanced_ui set to True Source code in <code>nautobot/extras/models/customfields.py</code> <pre><code>def get_custom_field_groupings_advanced(self):\n\"\"\"\n    This method exists to help call get_custom_field_groupings() in templates where a function argument (advanced_ui) cannot be specified.\n    Return a dictonary of custom fields grouped by the same grouping in the form\n    {\n        &lt;grouping_1&gt;: [(cf1, &lt;value for cf1&gt;), (cf2, &lt;value for cf2&gt;), ...],\n        ...\n        &lt;grouping_5&gt;: [(cf8, &lt;value for cf8&gt;), (cf9, &lt;value for cf9&gt;), ...],\n        ...\n    }\n    which have advanced_ui set to True\n    \"\"\"\nreturn self.get_custom_field_groupings(advanced_ui=True)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.models.customfields.CustomFieldModel.get_custom_field_groupings_basic","title":"<code>get_custom_field_groupings_basic()</code>","text":"<p>This method exists to help call get_custom_field_groupings() in templates where a function argument (advanced_ui) cannot be specified. Return a dictonary of custom fields grouped by the same grouping in the form {     : [(cf1, ), (cf2, ), ...],     ...     : [(cf8, ), (cf9, ), ...],     ... } which have advanced_ui set to False Source code in <code>nautobot/extras/models/customfields.py</code> <pre><code>def get_custom_field_groupings_basic(self):\n\"\"\"\n    This method exists to help call get_custom_field_groupings() in templates where a function argument (advanced_ui) cannot be specified.\n    Return a dictonary of custom fields grouped by the same grouping in the form\n    {\n        &lt;grouping_1&gt;: [(cf1, &lt;value for cf1&gt;), (cf2, &lt;value for cf2&gt;), ...],\n        ...\n        &lt;grouping_5&gt;: [(cf8, &lt;value for cf8&gt;), (cf9, &lt;value for cf9&gt;), ...],\n        ...\n    }\n    which have advanced_ui set to False\n    \"\"\"\nreturn self.get_custom_field_groupings(advanced_ui=False)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.models.customfields.CustomFieldModel.get_custom_fields","title":"<code>get_custom_fields(advanced_ui=None)</code>","text":"<p>Return a dictionary of custom fields for a single object in the form {: value}. Source code in <code>nautobot/extras/models/customfields.py</code> <pre><code>def get_custom_fields(self, advanced_ui=None):\n\"\"\"\n    Return a dictionary of custom fields for a single object in the form {&lt;field&gt;: value}.\n    \"\"\"\nfields = CustomField.objects.get_for_model(self)\nif advanced_ui is not None:\nfields = fields.filter(advanced_ui=advanced_ui)\nreturn OrderedDict([(field, self.cf.get(field.key)) for field in fields])\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.models.customfields.CustomFieldModel.get_custom_fields_advanced","title":"<code>get_custom_fields_advanced()</code>","text":"<p>This method exists to help call get_custom_fields() in templates where a function argument (advanced_ui) cannot be specified. Return a dictionary of custom fields for a single object in the form {: value} which have advanced_ui set to True Source code in <code>nautobot/extras/models/customfields.py</code> <pre><code>def get_custom_fields_advanced(self):\n\"\"\"\n    This method exists to help call get_custom_fields() in templates where a function argument (advanced_ui) cannot be specified.\n    Return a dictionary of custom fields for a single object in the form {&lt;field&gt;: value}\n    which have advanced_ui set to True\n    \"\"\"\nreturn self.get_custom_fields(advanced_ui=True)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.models.customfields.CustomFieldModel.get_custom_fields_basic","title":"<code>get_custom_fields_basic()</code>","text":"<p>This method exists to help call get_custom_fields() in templates where a function argument (advanced_ui) cannot be specified. Return a dictionary of custom fields for a single object in the form {: value} which have advanced_ui set to False Source code in <code>nautobot/extras/models/customfields.py</code> <pre><code>def get_custom_fields_basic(self):\n\"\"\"\n    This method exists to help call get_custom_fields() in templates where a function argument (advanced_ui) cannot be specified.\n    Return a dictionary of custom fields for a single object in the form {&lt;field&gt;: value}\n    which have advanced_ui set to False\n    \"\"\"\nreturn self.get_custom_fields(advanced_ui=False)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.models.customfields.CustomFieldModel.has_computed_fields","title":"<code>has_computed_fields(advanced_ui=None)</code>","text":"<p>Return a boolean indicating whether or not this content type has computed fields associated with it. This can also check whether the advanced_ui attribute is True or False for UI display purposes.</p> Source code in <code>nautobot/extras/models/customfields.py</code> <pre><code>def has_computed_fields(self, advanced_ui=None):\n\"\"\"\n    Return a boolean indicating whether or not this content type has computed fields associated with it.\n    This can also check whether the advanced_ui attribute is True or False for UI display purposes.\n    \"\"\"\ncomputed_fields = ComputedField.objects.get_for_model(self)\nif advanced_ui is not None:\ncomputed_fields = computed_fields.filter(advanced_ui=advanced_ui)\nreturn computed_fields.exists()\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.CustomValidator","title":"<code>nautobot.apps.models.CustomValidator</code>","text":"<p>This class is used to register plugin custom model validators which act on specified models. It contains the clean method which is overridden by plugin authors to execute custom validation logic. Plugin authors must raise ValidationError within this method to trigger validation error messages which are propagated to the user. A convenience method <code>validation_error(&lt;message&gt;)</code> may be used for this purpose.</p> <p>The <code>model</code> attribute on the class defines the model to which this validator is registered. It should be set as a string in the form <code>&lt;app_label&gt;.&lt;model_name&gt;</code>.</p> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>class CustomValidator:\n\"\"\"\n    This class is used to register plugin custom model validators which act on specified models. It contains the clean\n    method which is overridden by plugin authors to execute custom validation logic. Plugin authors must raise\n    ValidationError within this method to trigger validation error messages which are propagated to the user.\n    A convenience method `validation_error(&lt;message&gt;)` may be used for this purpose.\n    The `model` attribute on the class defines the model to which this validator is registered. It\n    should be set as a string in the form `&lt;app_label&gt;.&lt;model_name&gt;`.\n    \"\"\"\nmodel = None\ndef __init__(self, obj):\nself.context = {\"object\": obj}\ndef validation_error(self, message):\n\"\"\"\n        Convenience method for raising `django.core.exceptions.ValidationError` which is required in order to\n        trigger validation error messages which are propagated to the user.\n        \"\"\"\nraise ValidationError(message)\ndef clean(self):\n\"\"\"\n        Implement custom model validation in the standard Django clean method pattern. The model instance is accessed\n        with the `object` key within `self.context`, e.g. `self.context['object']`. ValidationError must be raised to\n        prevent saving model instance changes, and propagate messages to the user. For convenience,\n        `self.validation_error(&lt;message&gt;)` may be called to raise a ValidationError.\n        \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.plugins.CustomValidator.clean","title":"<code>clean()</code>","text":"<p>Implement custom model validation in the standard Django clean method pattern. The model instance is accessed with the <code>object</code> key within <code>self.context</code>, e.g. <code>self.context['object']</code>. ValidationError must be raised to prevent saving model instance changes, and propagate messages to the user. For convenience, <code>self.validation_error(&lt;message&gt;)</code> may be called to raise a ValidationError.</p> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>def clean(self):\n\"\"\"\n    Implement custom model validation in the standard Django clean method pattern. The model instance is accessed\n    with the `object` key within `self.context`, e.g. `self.context['object']`. ValidationError must be raised to\n    prevent saving model instance changes, and propagate messages to the user. For convenience,\n    `self.validation_error(&lt;message&gt;)` may be called to raise a ValidationError.\n    \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.plugins.CustomValidator.validation_error","title":"<code>validation_error(message)</code>","text":"<p>Convenience method for raising <code>django.core.exceptions.ValidationError</code> which is required in order to trigger validation error messages which are propagated to the user.</p> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>def validation_error(self, message):\n\"\"\"\n    Convenience method for raising `django.core.exceptions.ValidationError` which is required in order to\n    trigger validation error messages which are propagated to the user.\n    \"\"\"\nraise ValidationError(message)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.DynamicGroupMixin","title":"<code>nautobot.apps.models.DynamicGroupMixin</code>","text":"<p>Adds properties to a model to facilitate reversing DynamicGroup membership:</p> <ul> <li><code>dynamic_groups</code> - A QuerySet of <code>DynamicGroup</code> objects this instance is a member of, performs the most database queries.</li> <li><code>dynamic_groups_cached</code> - A QuerySet of <code>DynamicGroup</code> objects this instance is a member of, uses cached member list if available. Ideal for most use cases.</li> <li><code>dynamic_groups_list</code> - A list of <code>DynamicGroup</code> objects this instance is a member of, performs one less database query than <code>dynamic_groups</code>.</li> <li><code>dynamic_groups_list_cached</code> - A list of <code>DynamicGroup</code> objects this instance is a member of, uses cached member list if available. Performs no database queries in optimal conditions.</li> </ul> <p>All properties are cached on the instance after the first call. To clear the instance cache without re-instantiating the object, call <code>delattr(instance, \"_[the_property_name]\")</code>.     EX: <code>delattr(instance, \"_dynamic_groups\")</code></p> Source code in <code>nautobot/extras/models/mixins.py</code> <pre><code>class DynamicGroupMixin:\n\"\"\"\n    Adds properties to a model to facilitate reversing DynamicGroup membership:\n    - `dynamic_groups` - A QuerySet of `DynamicGroup` objects this instance is a member of, performs the most database queries.\n    - `dynamic_groups_cached` - A QuerySet of `DynamicGroup` objects this instance is a member of, uses cached member list if available. Ideal for most use cases.\n    - `dynamic_groups_list` - A list of `DynamicGroup` objects this instance is a member of, performs one less database query than `dynamic_groups`.\n    - `dynamic_groups_list_cached` - A list of `DynamicGroup` objects this instance is a member of, uses cached member list if available. Performs no database queries in optimal conditions.\n    All properties are cached on the instance after the first call. To clear the instance cache without re-instantiating the object, call `delattr(instance, \"_[the_property_name]\")`.\n        EX: `delattr(instance, \"_dynamic_groups\")`\n    \"\"\"\n@property\ndef dynamic_groups(self):\n\"\"\"\n        Return a queryset of `DynamicGroup` objects this instance is a member of.\n        This will NOT use the cached member lists of the dynamic groups and will always query the database for each DynamicGroup.\n        Additionally, this performs a final database query to turn the internal list into a queryset.\n        \"\"\"\nfrom nautobot.extras.models.groups import DynamicGroup\nif not hasattr(self, \"_dynamic_groups\"):\nqueryset = DynamicGroup.objects.get_for_object(self)\nself._dynamic_groups = queryset\nreturn self._dynamic_groups\n@property\ndef dynamic_groups_cached(self):\n\"\"\"\n        Return a queryset of `DynamicGroup` objects this instance is a member of.\n        This will use the cached member lists of the dynamic groups if available.\n        In optimal conditions this will incur a single database query to convert internal list into a queryset which is reasonably performant.\n        This is the ideal property to use for most use cases.\n        \"\"\"\nfrom nautobot.extras.models.groups import DynamicGroup\nif not hasattr(self, \"_dynamic_groups_cached\"):\nqueryset = DynamicGroup.objects.get_for_object(self, use_cache=True)\nself._dynamic_groups_cached = queryset\nreturn self._dynamic_groups_cached\n@property\ndef dynamic_groups_list(self):\n\"\"\"\n        Return a list of `DynamicGroup` objects this instance is a member of.\n        This will NOT use the cached member lists of the dynamic groups and will always query the database for each DynamicGroup.\n        This saves a final query to turn the list into a queryset.\n        \"\"\"\nfrom nautobot.extras.models.groups import DynamicGroup\nif not hasattr(self, \"_dynamic_groups_list\"):\ndg_list = DynamicGroup.objects.get_list_for_object(self)\nself._dynamic_groups_list = dg_list\nreturn self._dynamic_groups_list\n@property\ndef dynamic_groups_list_cached(self):\n\"\"\"\n        Return a list of `DynamicGroup` objects this instance is a member of.\n        This will use the cached member lists of the dynamic groups if available.\n        In optimal conditions this will incur no database queries.\n        \"\"\"\nfrom nautobot.extras.models.groups import DynamicGroup\nif not hasattr(self, \"_dynamic_groups_list_cached\"):\ndg_list = DynamicGroup.objects.get_list_for_object(self, use_cache=True)\nself._dynamic_groups_list_cached = dg_list\nreturn self._dynamic_groups_list_cached\ndef get_dynamic_groups_url(self):\n\"\"\"Return the dynamic groups URL for a given instance.\"\"\"\nroute = get_route_for_model(self, \"dynamicgroups\")\n# Iterate the pk-like fields and try to get a URL, or return None.\nfields = [\"pk\", \"slug\"]\nfor field in fields:\nif not hasattr(self, field):\ncontinue\ntry:\nreturn reverse(route, kwargs={field: getattr(self, field)})\nexcept NoReverseMatch:\ncontinue\nreturn None\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.models.mixins.DynamicGroupMixin.dynamic_groups","title":"<code>dynamic_groups</code>  <code>property</code>","text":"<p>Return a queryset of <code>DynamicGroup</code> objects this instance is a member of.</p> <p>This will NOT use the cached member lists of the dynamic groups and will always query the database for each DynamicGroup.</p> <p>Additionally, this performs a final database query to turn the internal list into a queryset.</p>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.models.mixins.DynamicGroupMixin.dynamic_groups_cached","title":"<code>dynamic_groups_cached</code>  <code>property</code>","text":"<p>Return a queryset of <code>DynamicGroup</code> objects this instance is a member of.</p> <p>This will use the cached member lists of the dynamic groups if available.</p> <p>In optimal conditions this will incur a single database query to convert internal list into a queryset which is reasonably performant.</p> <p>This is the ideal property to use for most use cases.</p>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.models.mixins.DynamicGroupMixin.dynamic_groups_list","title":"<code>dynamic_groups_list</code>  <code>property</code>","text":"<p>Return a list of <code>DynamicGroup</code> objects this instance is a member of.</p> <p>This will NOT use the cached member lists of the dynamic groups and will always query the database for each DynamicGroup.</p> <p>This saves a final query to turn the list into a queryset.</p>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.models.mixins.DynamicGroupMixin.dynamic_groups_list_cached","title":"<code>dynamic_groups_list_cached</code>  <code>property</code>","text":"<p>Return a list of <code>DynamicGroup</code> objects this instance is a member of.</p> <p>This will use the cached member lists of the dynamic groups if available.</p> <p>In optimal conditions this will incur no database queries.</p>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.models.mixins.DynamicGroupMixin.get_dynamic_groups_url","title":"<code>get_dynamic_groups_url()</code>","text":"<p>Return the dynamic groups URL for a given instance.</p> Source code in <code>nautobot/extras/models/mixins.py</code> <pre><code>def get_dynamic_groups_url(self):\n\"\"\"Return the dynamic groups URL for a given instance.\"\"\"\nroute = get_route_for_model(self, \"dynamicgroups\")\n# Iterate the pk-like fields and try to get a URL, or return None.\nfields = [\"pk\", \"slug\"]\nfor field in fields:\nif not hasattr(self, field):\ncontinue\ntry:\nreturn reverse(route, kwargs={field: getattr(self, field)})\nexcept NoReverseMatch:\ncontinue\nreturn None\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.EmptyGroupByJSONBAgg","title":"<code>nautobot.apps.models.EmptyGroupByJSONBAgg</code>","text":"<p>             Bases: <code>JSONBAgg</code></p> <p>JSONBAgg is a builtin aggregation function which means it includes the use of a GROUP BY clause. When used as an annotation for collecting config context data objects, the GROUP BY is incorrect. This subclass overrides the Django ORM aggregation control to remove the GROUP BY.</p> Source code in <code>nautobot/core/models/query_functions.py</code> <pre><code>class EmptyGroupByJSONBAgg(JSONBAgg):\n\"\"\"\n    JSONBAgg is a builtin aggregation function which means it includes the use of a GROUP BY clause.\n    When used as an annotation for collecting config context data objects, the GROUP BY is\n    incorrect. This subclass overrides the Django ORM aggregation control to remove the GROUP BY.\n    \"\"\"\ncontains_aggregate = False\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.EnhancedURLValidator","title":"<code>nautobot.apps.models.EnhancedURLValidator</code>","text":"<p>             Bases: <code>URLValidator</code></p> <p>Extends Django's built-in URLValidator to permit the use of hostnames with no domain extension and enforce allowed schemes specified in the configuration.</p> Source code in <code>nautobot/core/models/validators.py</code> <pre><code>class EnhancedURLValidator(URLValidator):\n\"\"\"\n    Extends Django's built-in URLValidator to permit the use of hostnames with no domain extension and enforce allowed\n    schemes specified in the configuration.\n    \"\"\"\nfqdn_re = URLValidator.hostname_re + URLValidator.domain_re + URLValidator.tld_re\nhost_res = [\nURLValidator.ipv4_re,\nURLValidator.ipv6_re,\nfqdn_re,\nURLValidator.hostname_re,\n]\nregex = _lazy_re_compile(\nr\"^(?:[a-z0-9\\.\\-\\+]*)://\"  # Scheme (enforced separately)\nr\"(?:\\S+(?::\\S*)?@)?\"  # HTTP basic authentication\nr\"(?:\" + \"|\".join(host_res) + \")\"  # IPv4, IPv6, FQDN, or hostname\nr\"(?::\\d{2,5})?\"  # Port number\nr\"(?:[/?#][^\\s]*)?\"  # Path\nr\"\\Z\",\nre.IGNORECASE,\n)\nschemes = settings.ALLOWED_URL_SCHEMES\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.ExclusionValidator","title":"<code>nautobot.apps.models.ExclusionValidator</code>","text":"<p>             Bases: <code>BaseValidator</code></p> <p>Ensure that a field's value is not equal to any of the specified values.</p> Source code in <code>nautobot/core/models/validators.py</code> <pre><code>class ExclusionValidator(BaseValidator):\n\"\"\"\n    Ensure that a field's value is not equal to any of the specified values.\n    \"\"\"\nmessage = \"This value may not be %(show_value)s.\"\ndef compare(self, a, b):\nreturn a in b\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.ForeignKeyLimitedByContentTypes","title":"<code>nautobot.apps.models.ForeignKeyLimitedByContentTypes</code>","text":"<p>             Bases: <code>ForeignKeyWithAutoRelatedName</code></p> <p>An abstract model field that automatically restricts ForeignKey options based on content_types.</p> <p>For instance, if the model \"Role\" contains two records: role_1 and role_2, role_1's content_types are set to \"dcim.location\" and \"dcim.device\" while the role_2's content_types are set to \"circuit.circuit\" and \"dcim.location.\"</p> <p>Then, for the field <code>role</code> on the Device model, role_1 is the only Role that is available, while role_1 &amp; role_2 are both available for the Location model.</p> The limit_choices_to for the field are automatically derived from <ul> <li>the content-type to which the field is attached (e.g. <code>dcim.device</code>)</li> </ul> Source code in <code>nautobot/core/models/fields.py</code> <pre><code>class ForeignKeyLimitedByContentTypes(ForeignKeyWithAutoRelatedName):\n\"\"\"\n    An abstract model field that automatically restricts ForeignKey options based on content_types.\n    For instance, if the model \"Role\" contains two records: role_1 and role_2, role_1's content_types\n    are set to \"dcim.location\" and \"dcim.device\" while the role_2's content_types are set to\n    \"circuit.circuit\" and \"dcim.location.\"\n    Then, for the field `role` on the Device model, role_1 is the only Role that is available,\n    while role_1 &amp; role_2 are both available for the Location model.\n    The limit_choices_to for the field are automatically derived from:\n        - the content-type to which the field is attached (e.g. `dcim.device`)\n    \"\"\"\ndef get_limit_choices_to(self):\nreturn {\"content_types\": ContentType.objects.get_for_model(self.model)}\ndef formfield(self, **kwargs):\n\"\"\"Return a prepped formfield for use in model forms.\"\"\"\ndefaults = {\n\"form_class\": fields.DynamicModelChoiceField,\n\"queryset\": self.related_model.objects.all(),\n# label_lower e.g. \"dcim.device\"\n\"query_params\": {\"content_types\": self.model._meta.label_lower},\n}\ndefaults.update(**kwargs)\nreturn super().formfield(**defaults)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.fields.ForeignKeyLimitedByContentTypes.formfield","title":"<code>formfield(**kwargs)</code>","text":"<p>Return a prepped formfield for use in model forms.</p> Source code in <code>nautobot/core/models/fields.py</code> <pre><code>def formfield(self, **kwargs):\n\"\"\"Return a prepped formfield for use in model forms.\"\"\"\ndefaults = {\n\"form_class\": fields.DynamicModelChoiceField,\n\"queryset\": self.related_model.objects.all(),\n# label_lower e.g. \"dcim.device\"\n\"query_params\": {\"content_types\": self.model._meta.label_lower},\n}\ndefaults.update(**kwargs)\nreturn super().formfield(**defaults)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.ForeignKeyWithAutoRelatedName","title":"<code>nautobot.apps.models.ForeignKeyWithAutoRelatedName</code>","text":"<p>             Bases: <code>models.ForeignKey</code></p> <p>Extend base ForeignKey functionality to create a smarter default <code>related_name</code>.</p> <p>For example, \"ip_addresses\" instead of \"ipaddress_set\", \"ipaddresss\", or \"ipam_ipaddress_related\".</p> <p>Primarily useful for cases of abstract base classes that define ForeignKeys, such as <code>nautobot.dcim.models.device_components.ComponentModel</code>.</p> Source code in <code>nautobot/core/models/fields.py</code> <pre><code>class ForeignKeyWithAutoRelatedName(models.ForeignKey):\n\"\"\"\n    Extend base ForeignKey functionality to create a smarter default `related_name`.\n    For example, \"ip_addresses\" instead of \"ipaddress_set\", \"ipaddresss\", or \"ipam_ipaddress_related\".\n    Primarily useful for cases of abstract base classes that define ForeignKeys, such as\n    `nautobot.dcim.models.device_components.ComponentModel`.\n    \"\"\"\ndef __init__(self, *args, related_name=None, **kwargs):\nsuper().__init__(*args, related_name=related_name, **kwargs)\nself._autogenerate_related_name = related_name is None\ndef contribute_to_class(self, cls, *args, **kwargs):\nsuper().contribute_to_class(cls, *args, **kwargs)\nif self._autogenerate_related_name and not cls._meta.abstract and hasattr(cls._meta, \"verbose_name_plural\"):\n# \"IP addresses\" -&gt; \"ip_addresses\"\nrelated_name = \"_\".join(re.findall(r\"\\w+\", str(cls._meta.verbose_name_plural))).lower()\nself.remote_field.related_name = related_name\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.JSONArrayField","title":"<code>nautobot.apps.models.JSONArrayField</code>","text":"<p>             Bases: <code>models.JSONField</code></p> <p>An ArrayField implementation backed JSON storage. Replicates ArrayField's base field validation.</p> Source code in <code>nautobot/core/models/fields.py</code> <pre><code>class JSONArrayField(models.JSONField):\n\"\"\"\n    An ArrayField implementation backed JSON storage.\n    Replicates ArrayField's base field validation.\n    \"\"\"\n_default_hint = (\"list\", \"[]\")\ndef __init__(self, base_field, **kwargs):\nif isinstance(base_field, JSONArrayField):\nraise TypeError(\"cannot nest JSONArrayFields\")\nself.base_field = base_field\nsuper().__init__(**kwargs)\ndef set_attributes_from_name(self, name):\nsuper().set_attributes_from_name(name)\nself.base_field.set_attributes_from_name(name)\n@property\ndef description(self):\nreturn f\"JSON Array of {self.base_field.description}\"\ndef get_prep_value(self, value):\n\"\"\"Perform preliminary non-db specific value checks and conversions.\"\"\"\nif value is not None:\nif not isinstance(value, (list, tuple)):\nraise ValueError(f\"value {value} is not list or tuple\")\nvalue = [self.base_field.get_prep_value(v) for v in value]\nreturn super().get_prep_value(value)\ndef deconstruct(self):\n\"\"\"\n        Return enough information to recreate the field as a 4-tuple:\n         * The name of the field on the model, if contribute_to_class() has\n           been run.\n         * The import path of the field, including the class:e.g.\n           django.db.models.IntegerField This should be the most portable\n           version, so less specific may be better.\n         * A list of positional arguments.\n         * A dict of keyword arguments.\n        \"\"\"\nname, path, args, kwargs = super().deconstruct()\nkwargs.update(\n{\n\"base_field\": self.base_field.clone(),\n}\n)\nreturn name, path, args, kwargs\ndef to_python(self, value):\n\"\"\"\n        Convert `value` into JSON, raising django.core.exceptions.ValidationError\n        if the data can't be converted. Return the converted value.\n        \"\"\"\nif isinstance(value, str):\ntry:\n# Assume we're deserializing\nvals = json.loads(value)\nvalue = [self.base_field.to_python(val) for val in vals]\nexcept (TypeError, json.JSONDecodeError) as e:\nraise exceptions.ValidationError(e)\nreturn value\ndef value_to_string(self, obj):\n\"\"\"\n        Return a string value of this field from the passed obj.\n        This is used by the serialization framework.\n        \"\"\"\nvalues = []\nvals = self.value_from_object(obj)\nbase_field = self.base_field\nfor val in vals:\nif val is None:\nvalues.append(None)\nelse:\nobj = AttributeSetter(base_field.attname, val)\nvalues.append(base_field.value_to_string(obj))\nreturn json.dumps(values, ensure_ascii=False)\ndef validate(self, value, model_instance):\n\"\"\"\n        Validate `value` and raise ValidationError if necessary.\n        \"\"\"\nsuper().validate(value, model_instance)\nfor part in value:\nself.base_field.validate(part, model_instance)\ndef run_validators(self, value):\n\"\"\"\n        Runs all validators against `value` and raise ValidationError if necessary.\n        Some validators can't be created at field initialization time.\n        \"\"\"\nsuper().run_validators(value)\nfor part in value:\nself.base_field.run_validators(part)\ndef formfield(self, **kwargs):\n\"\"\"Return a django.forms.Field instance for this field.\"\"\"\nreturn super().formfield(\n**{\n\"form_class\": fields.JSONArrayFormField,\n\"base_field\": self.base_field.formfield(),\n**kwargs,\n}\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.fields.JSONArrayField.deconstruct","title":"<code>deconstruct()</code>","text":"Return enough information to recreate the field as a 4-tuple <ul> <li>The name of the field on the model, if contribute_to_class() has   been run.</li> <li>The import path of the field, including the class:e.g.   django.db.models.IntegerField This should be the most portable   version, so less specific may be better.</li> <li>A list of positional arguments.</li> <li>A dict of keyword arguments.</li> </ul> Source code in <code>nautobot/core/models/fields.py</code> <pre><code>def deconstruct(self):\n\"\"\"\n    Return enough information to recreate the field as a 4-tuple:\n     * The name of the field on the model, if contribute_to_class() has\n       been run.\n     * The import path of the field, including the class:e.g.\n       django.db.models.IntegerField This should be the most portable\n       version, so less specific may be better.\n     * A list of positional arguments.\n     * A dict of keyword arguments.\n    \"\"\"\nname, path, args, kwargs = super().deconstruct()\nkwargs.update(\n{\n\"base_field\": self.base_field.clone(),\n}\n)\nreturn name, path, args, kwargs\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.fields.JSONArrayField.formfield","title":"<code>formfield(**kwargs)</code>","text":"<p>Return a django.forms.Field instance for this field.</p> Source code in <code>nautobot/core/models/fields.py</code> <pre><code>def formfield(self, **kwargs):\n\"\"\"Return a django.forms.Field instance for this field.\"\"\"\nreturn super().formfield(\n**{\n\"form_class\": fields.JSONArrayFormField,\n\"base_field\": self.base_field.formfield(),\n**kwargs,\n}\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.fields.JSONArrayField.get_prep_value","title":"<code>get_prep_value(value)</code>","text":"<p>Perform preliminary non-db specific value checks and conversions.</p> Source code in <code>nautobot/core/models/fields.py</code> <pre><code>def get_prep_value(self, value):\n\"\"\"Perform preliminary non-db specific value checks and conversions.\"\"\"\nif value is not None:\nif not isinstance(value, (list, tuple)):\nraise ValueError(f\"value {value} is not list or tuple\")\nvalue = [self.base_field.get_prep_value(v) for v in value]\nreturn super().get_prep_value(value)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.fields.JSONArrayField.run_validators","title":"<code>run_validators(value)</code>","text":"<p>Runs all validators against <code>value</code> and raise ValidationError if necessary. Some validators can't be created at field initialization time.</p> Source code in <code>nautobot/core/models/fields.py</code> <pre><code>def run_validators(self, value):\n\"\"\"\n    Runs all validators against `value` and raise ValidationError if necessary.\n    Some validators can't be created at field initialization time.\n    \"\"\"\nsuper().run_validators(value)\nfor part in value:\nself.base_field.run_validators(part)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.fields.JSONArrayField.to_python","title":"<code>to_python(value)</code>","text":"<p>Convert <code>value</code> into JSON, raising django.core.exceptions.ValidationError if the data can't be converted. Return the converted value.</p> Source code in <code>nautobot/core/models/fields.py</code> <pre><code>def to_python(self, value):\n\"\"\"\n    Convert `value` into JSON, raising django.core.exceptions.ValidationError\n    if the data can't be converted. Return the converted value.\n    \"\"\"\nif isinstance(value, str):\ntry:\n# Assume we're deserializing\nvals = json.loads(value)\nvalue = [self.base_field.to_python(val) for val in vals]\nexcept (TypeError, json.JSONDecodeError) as e:\nraise exceptions.ValidationError(e)\nreturn value\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.fields.JSONArrayField.validate","title":"<code>validate(value, model_instance)</code>","text":"<p>Validate <code>value</code> and raise ValidationError if necessary.</p> Source code in <code>nautobot/core/models/fields.py</code> <pre><code>def validate(self, value, model_instance):\n\"\"\"\n    Validate `value` and raise ValidationError if necessary.\n    \"\"\"\nsuper().validate(value, model_instance)\nfor part in value:\nself.base_field.validate(part, model_instance)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.fields.JSONArrayField.value_to_string","title":"<code>value_to_string(obj)</code>","text":"<p>Return a string value of this field from the passed obj. This is used by the serialization framework.</p> Source code in <code>nautobot/core/models/fields.py</code> <pre><code>def value_to_string(self, obj):\n\"\"\"\n    Return a string value of this field from the passed obj.\n    This is used by the serialization framework.\n    \"\"\"\nvalues = []\nvals = self.value_from_object(obj)\nbase_field = self.base_field\nfor val in vals:\nif val is None:\nvalues.append(None)\nelse:\nobj = AttributeSetter(base_field.attname, val)\nvalues.append(base_field.value_to_string(obj))\nreturn json.dumps(values, ensure_ascii=False)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.JSONBAgg","title":"<code>nautobot.apps.models.JSONBAgg</code>","text":"<p>             Bases: <code>Aggregate</code></p> <p>Like django.contrib.postgres.aggregates.JSONBAgg, but different.</p> <ol> <li>Supports both Postgres (JSONB_AGG) and MySQL (JSON_ARRAYAGG)</li> <li>Does not support <code>ordering</code> as JSON_ARRAYAGG does not guarantee ordering.</li> </ol> Source code in <code>nautobot/core/models/query_functions.py</code> <pre><code>class JSONBAgg(Aggregate):\n\"\"\"\n    Like django.contrib.postgres.aggregates.JSONBAgg, but different.\n    1. Supports both Postgres (JSONB_AGG) and MySQL (JSON_ARRAYAGG)\n    2. Does not support `ordering` as JSON_ARRAYAGG does not guarantee ordering.\n    \"\"\"\nfunction = None\noutput_field = JSONField()\n# TODO(Glenn): Django's JSONBAgg has `allow_distinct=True`, we might want to think about adding that at some point?\n# Borrowed from `django.contrib.postgres.aggregates.JSONBagg`.\ndef convert_value(self, value, expression, connection):  # pylint: disable=arguments-differ\nif not value:\nreturn \"[]\"\nreturn value\ndef as_sql(self, compiler, connection, **extra_context):\nvendor = connection.vendor\n# Mapping of vendor =&gt; func\nfunc_map = {\n\"postgresql\": \"JSONB_AGG\",\n\"mysql\": \"JSON_ARRAYAGG\",\n}\nif JSONBAgg.function is None and vendor not in func_map:\nraise ConnectionError(f\"JSON aggregation is not supported for database {vendor}\")\nJSONBAgg.function = func_map[vendor]\nreturn super().as_sql(compiler, connection, **extra_context)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.NameColorContentTypesModel","title":"<code>nautobot.apps.models.NameColorContentTypesModel</code>","text":"<p>             Bases: <code>BaseModel</code>, <code>ChangeLoggedModel</code>, <code>CustomFieldModel</code>, <code>RelationshipModel</code>, <code>NotesMixin</code>, <code>DynamicGroupMixin</code></p> <p>This abstract base properties model contains fields and functionality that are shared amongst models that requires these fields: name, color, content_types and description.</p> Source code in <code>nautobot/core/models/name_color_content_types.py</code> <pre><code>class NameColorContentTypesModel(\nBaseModel,\nChangeLoggedModel,\nCustomFieldModel,\nRelationshipModel,\nNotesMixin,\nDynamicGroupMixin,\n):\n\"\"\"\n    This abstract base properties model contains fields and functionality that are\n    shared amongst models that requires these fields: name, color, content_types and description.\n    \"\"\"\ncontent_types = models.ManyToManyField(\nto=ContentType,\nhelp_text=\"The content type(s) to which this model applies.\",\n)\nname = models.CharField(max_length=100, unique=True)\ncolor = ColorField(default=ColorChoices.COLOR_GREY)\ndescription = models.CharField(\nmax_length=200,\nblank=True,\n)\nobjects = BaseManager.from_queryset(ContentTypeRelatedQuerySet)()\nclone_fields = [\"color\", \"content_types\"]\nclass Meta:\nordering = [\"name\"]\nabstract = True\ndef __str__(self):\nreturn self.name\ndef get_content_types(self):\nreturn \",\".join(f\"{ct.app_label}.{ct.model}\" for ct in self.content_types.all())\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.NaturalOrderingField","title":"<code>nautobot.apps.models.NaturalOrderingField</code>","text":"<p>             Bases: <code>models.CharField</code></p> <p>A field which stores a naturalized representation of its target field, to be used for ordering its parent model.</p> <p>:param target_field: Name of the field of the parent model to be naturalized :param naturalize_function: The function used to generate a naturalized value (optional)</p> Source code in <code>nautobot/core/models/fields.py</code> <pre><code>class NaturalOrderingField(models.CharField):\n\"\"\"\n    A field which stores a naturalized representation of its target field, to be used for ordering its parent model.\n    :param target_field: Name of the field of the parent model to be naturalized\n    :param naturalize_function: The function used to generate a naturalized value (optional)\n    \"\"\"\ndescription = \"Stores a representation of its target field suitable for natural ordering\"\ndef __init__(self, target_field, naturalize_function=ordering.naturalize, *args, **kwargs):\nself.target_field = target_field\nself.naturalize_function = naturalize_function\nsuper().__init__(*args, **kwargs)\ndef pre_save(self, model_instance, add):\n\"\"\"\n        Generate a naturalized value from the target field\n        \"\"\"\noriginal_value = getattr(model_instance, self.target_field)\nnaturalized_value = self.naturalize_function(original_value, max_length=self.max_length)\nsetattr(model_instance, self.attname, naturalized_value)\nreturn naturalized_value\ndef deconstruct(self):\nkwargs = super().deconstruct()[3]  # Pass kwargs from CharField\nkwargs[\"naturalize_function\"] = self.naturalize_function\nreturn (\nself.name,\n\"nautobot.core.models.fields.NaturalOrderingField\",\n[self.target_field],\nkwargs,\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.fields.NaturalOrderingField.pre_save","title":"<code>pre_save(model_instance, add)</code>","text":"<p>Generate a naturalized value from the target field</p> Source code in <code>nautobot/core/models/fields.py</code> <pre><code>def pre_save(self, model_instance, add):\n\"\"\"\n    Generate a naturalized value from the target field\n    \"\"\"\noriginal_value = getattr(model_instance, self.target_field)\nnaturalized_value = self.naturalize_function(original_value, max_length=self.max_length)\nsetattr(model_instance, self.attname, naturalized_value)\nreturn naturalized_value\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.NotesMixin","title":"<code>nautobot.apps.models.NotesMixin</code>","text":"<p>Adds a <code>notes</code> property that returns a queryset of <code>Notes</code> membership.</p> Source code in <code>nautobot/extras/models/mixins.py</code> <pre><code>class NotesMixin:\n\"\"\"\n    Adds a `notes` property that returns a queryset of `Notes` membership.\n    \"\"\"\n@property\ndef notes(self):\n\"\"\"Return a `Notes` queryset for this instance.\"\"\"\nfrom nautobot.extras.models.models import Note\nif not hasattr(self, \"_notes_queryset\"):\nqueryset = Note.objects.get_for_object(self)\nself._notes_queryset = queryset\nreturn self._notes_queryset\ndef get_notes_url(self, api=False):\n\"\"\"Return the notes URL for a given instance.\"\"\"\nroute = get_route_for_model(self, \"notes\", api=api)\n# Iterate the pk-like fields and try to get a URL, or return None.\nfields = [\"pk\", \"slug\"]\nfor field in fields:\nif not hasattr(self, field):\ncontinue\ntry:\nreturn reverse(route, kwargs={field: getattr(self, field)})\nexcept NoReverseMatch:\ncontinue\nreturn None\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.models.mixins.NotesMixin.notes","title":"<code>notes</code>  <code>property</code>","text":"<p>Return a <code>Notes</code> queryset for this instance.</p>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.models.mixins.NotesMixin.get_notes_url","title":"<code>get_notes_url(api=False)</code>","text":"<p>Return the notes URL for a given instance.</p> Source code in <code>nautobot/extras/models/mixins.py</code> <pre><code>def get_notes_url(self, api=False):\n\"\"\"Return the notes URL for a given instance.\"\"\"\nroute = get_route_for_model(self, \"notes\", api=api)\n# Iterate the pk-like fields and try to get a URL, or return None.\nfields = [\"pk\", \"slug\"]\nfor field in fields:\nif not hasattr(self, field):\ncontinue\ntry:\nreturn reverse(route, kwargs={field: getattr(self, field)})\nexcept NoReverseMatch:\ncontinue\nreturn None\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.OrganizationalModel","title":"<code>nautobot.apps.models.OrganizationalModel</code>","text":"<p>             Bases: <code>BaseModel</code>, <code>ChangeLoggedModel</code>, <code>CustomFieldModel</code>, <code>RelationshipModel</code>, <code>DynamicGroupMixin</code>, <code>NotesMixin</code></p> <p>Base abstract model for all organizational models.</p> <p>Organizational models aid the primary models by building structured relationships and logical groups, or categorizations. Organizational models do not typically represent concrete networking resources or assets, but rather they enable user specific use cases and metadata about network resources. Examples include Device Role, Rack Group, Status, Manufacturer, and Platform.</p> Source code in <code>nautobot/core/models/generics.py</code> <pre><code>class OrganizationalModel(\nBaseModel, ChangeLoggedModel, CustomFieldModel, RelationshipModel, DynamicGroupMixin, NotesMixin\n):\n\"\"\"\n    Base abstract model for all organizational models.\n    Organizational models aid the primary models by building structured relationships\n    and logical groups, or categorizations. Organizational models do not typically\n    represent concrete networking resources or assets, but rather they enable user\n    specific use cases and metadata about network resources. Examples include\n    Device Role, Rack Group, Status, Manufacturer, and Platform.\n    \"\"\"\nclass Meta:\nabstract = True\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.PrimaryModel","title":"<code>nautobot.apps.models.PrimaryModel</code>","text":"<p>             Bases: <code>BaseModel</code>, <code>ChangeLoggedModel</code>, <code>CustomFieldModel</code>, <code>RelationshipModel</code>, <code>DynamicGroupMixin</code>, <code>NotesMixin</code></p> <p>Base abstract model for all primary models.</p> <p>A primary model is one which is materialistically relevant to the network datamodel. Such models form the basis of major elements of the data model, like Device, IP Address, Location, VLAN, Virtual Machine, etc. Primary models usually represent tangible or logical resources on the network, or within the organization.</p> Source code in <code>nautobot/core/models/generics.py</code> <pre><code>class PrimaryModel(BaseModel, ChangeLoggedModel, CustomFieldModel, RelationshipModel, DynamicGroupMixin, NotesMixin):\n\"\"\"\n    Base abstract model for all primary models.\n    A primary model is one which is materialistically relevant to the network datamodel.\n    Such models form the basis of major elements of the data model, like Device,\n    IP Address, Location, VLAN, Virtual Machine, etc. Primary models usually represent\n    tangible or logical resources on the network, or within the organization.\n    \"\"\"\ntags = TagsField()\nclass Meta:\nabstract = True\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.RelationshipModel","title":"<code>nautobot.apps.models.RelationshipModel</code>","text":"<p>             Bases: <code>models.Model</code></p> <p>Abstract class for any model which may have custom relationships associated with it.</p> Source code in <code>nautobot/extras/models/relationships.py</code> <pre><code>class RelationshipModel(models.Model):\n\"\"\"\n    Abstract class for any model which may have custom relationships associated with it.\n    \"\"\"\nclass Meta:\nabstract = True\n# Define GenericRelations so that deleting a RelationshipModel instance\n# cascades to deleting any RelationshipAssociations that were using this instance,\n# and also for convenience in looking up the RelationshipModels associated to any given RelationshipAssociation\nsource_for_associations = GenericRelation(\n\"extras.RelationshipAssociation\",\ncontent_type_field=\"source_type\",\nobject_id_field=\"source_id\",\nrelated_query_name=\"source_%(app_label)s_%(class)s\",  # e.g. 'source_dcim_location', 'source_ipam_vlan'\n)\ndestination_for_associations = GenericRelation(\n\"extras.RelationshipAssociation\",\ncontent_type_field=\"destination_type\",\nobject_id_field=\"destination_id\",\nrelated_query_name=\"destination_%(app_label)s_%(class)s\",  # e.g. 'destination_dcim_rack'\n)\n@property\ndef associations(self):\nreturn list(self.source_for_associations.all()) + list(self.destination_for_associations.all())\ndef get_relationships(self, include_hidden=False, advanced_ui=None):\n\"\"\"\n        Return a dictionary of RelationshipAssociation querysets for all custom relationships\n        Returns:\n            (dict): `{\n                    \"source\": {\n                        &lt;Relationship instance #1&gt;: &lt;RelationshipAssociation queryset #1&gt;,\n                        &lt;Relationship instance #2&gt;: &lt;RelationshipAssociation queryset #2&gt;,\n                    },\n                    \"destination\": {\n                        &lt;Relationship instance #3&gt;: &lt;RelationshipAssociation queryset #3&gt;,\n                        &lt;Relationship instance #4&gt;: &lt;RelationshipAssociation queryset #4&gt;,\n                    },\n                    \"peer\": {\n                        &lt;Relationship instance #5&gt;: &lt;RelationshipAssociation queryset #5&gt;,\n                        &lt;Relationship instance #6&gt;: &lt;RelationshipAssociation queryset #6&gt;,\n                    },\n                }`\n        \"\"\"\nsrc_relationships, dst_relationships = Relationship.objects.get_for_model(self)\nif advanced_ui is not None:\nsrc_relationships = src_relationships.filter(advanced_ui=advanced_ui)\ndst_relationships = dst_relationships.filter(advanced_ui=advanced_ui)\ncontent_type = ContentType.objects.get_for_model(self)\nsides = {\nRelationshipSideChoices.SIDE_SOURCE: src_relationships,\nRelationshipSideChoices.SIDE_DESTINATION: dst_relationships,\n}\nresp = {\nRelationshipSideChoices.SIDE_SOURCE: {},\nRelationshipSideChoices.SIDE_DESTINATION: {},\nRelationshipSideChoices.SIDE_PEER: {},\n}\nfor side, relationships in sides.items():\nfor relationship in relationships:\nif getattr(relationship, f\"{side}_hidden\") and not include_hidden:\ncontinue\n# Determine if the relationship is applicable to this object based on the filter\n# To resolve the filter we are using the FilterSet for the given model\n# If there is no match when we query the primary key of the device along with the filter\n# Then the relationship is not applicable to this object\nif getattr(relationship, f\"{side}_filter\"):\nfilterset = get_filterset_for_model(self._meta.model)\nif filterset:\nfilter_params = getattr(relationship, f\"{side}_filter\")\nif not filterset(filter_params, self._meta.model.objects.filter(id=self.id)).qs.exists():\ncontinue\n# Construct the queryset to query all RelationshipAssociation for this object and this relationship\nquery_params = {\"relationship\": relationship}\nif not relationship.symmetric:\n# Query for RelationshipAssociations that this object is on the expected side of\nquery_params[f\"{side}_id\"] = self.pk\nquery_params[f\"{side}_type\"] = content_type\nresp[side][relationship] = RelationshipAssociation.objects.filter(**query_params)\nelse:\n# Query for RelationshipAssociations involving this object, regardless of side\nresp[RelationshipSideChoices.SIDE_PEER][relationship] = RelationshipAssociation.objects.filter(\n(\nQ(source_id=self.pk, source_type=content_type)\n| Q(destination_id=self.pk, destination_type=content_type)\n),\n**query_params,\n)\nreturn resp\ndef get_relationships_data(self, **kwargs):\n\"\"\"\n        Return a dictionary of relationships with the label and the value or the queryset for each.\n        Used for rendering relationships in the UI; see nautobot/core/templates/inc/relationships_table_rows.html\n        Returns:\n            (dict): `{\n                    \"source\": {\n                        &lt;Relationship instance #1&gt;: {   # one-to-one relationship that self is the source of\n                            \"label\": \"...\",\n                            \"peer_type\": &lt;ContentType&gt;,\n                            \"has_many\": False,\n                            \"value\": &lt;model instance&gt;,     # single destination for this relationship\n                            \"url\": \"...\",\n                        },\n                        &lt;Relationship instance #2&gt;: {   # one-to-many or many-to-many relationship that self is a source for\n                            \"label\": \"...\",\n                            \"peer_type\": &lt;ContentType&gt;,\n                            \"has_many\": True,\n                            \"value\": None,\n                            \"queryset\": &lt;RelationshipAssociation queryset #2&gt;   # set of destinations for the relationship\n                        },\n                    },\n                    \"destination\": {\n                        (same format as \"source\" dict - relationships that self is the destination of)\n                    },\n                    \"peer\": {\n                        (same format as \"source\" dict - symmetric relationships that self is involved in)\n                    },\n                }`\n        \"\"\"\nrelationships_by_side = self.get_relationships(**kwargs)\nresp = {\nRelationshipSideChoices.SIDE_SOURCE: {},\nRelationshipSideChoices.SIDE_DESTINATION: {},\nRelationshipSideChoices.SIDE_PEER: {},\n}\nfor side, relationships in relationships_by_side.items():\nfor relationship, queryset in relationships.items():\npeer_side = RelationshipSideChoices.OPPOSITE[side]\nresp[side][relationship] = {\n\"label\": relationship.get_label(side),\n\"value\": None,\n}\nif not relationship.symmetric:\nresp[side][relationship][\"peer_type\"] = getattr(relationship, f\"{peer_side}_type\")\nelse:\n# Symmetric relationship - source_type == destination_type, so it doesn't matter which we choose\nresp[side][relationship][\"peer_type\"] = getattr(relationship, \"source_type\")\nresp[side][relationship][\"has_many\"] = relationship.has_many(peer_side)\nif resp[side][relationship][\"has_many\"]:\nresp[side][relationship][\"queryset\"] = queryset\nelse:\nresp[side][relationship][\"url\"] = None\nassociation = queryset.first()\nif not association:\ncontinue\npeer = association.get_peer(self)\nresp[side][relationship][\"value\"] = peer\nif hasattr(peer, \"get_absolute_url\"):\nresp[side][relationship][\"url\"] = peer.get_absolute_url()\nelse:\nlogger.warning(\"Peer object %s has no get_absolute_url() method\", peer)\nreturn resp\ndef get_relationships_data_basic_fields(self):\n\"\"\"\n        Same docstring as get_relationships_data() above except this only returns relationships\n        where advanced_ui==False for displaying in the main object detail tab on the object's page\n        \"\"\"\nreturn self.get_relationships_data(advanced_ui=False)\ndef get_relationships_data_advanced_fields(self):\n\"\"\"\n        Same docstring as get_relationships_data() above except this only returns relationships\n        where advanced_ui==True for displaying in the 'Advanced' tab on the object's page\n        \"\"\"\nreturn self.get_relationships_data(advanced_ui=True)\n@classmethod\ndef required_related_objects_errors(\ncls, output_for=\"ui\", initial_data=None, relationships_key_specified=False, instance=None\n):\n\"\"\"\n        Args:\n            output_for (str): either \"ui\" or \"api\" depending on usage\n            initial_data (dict): submitted form/serializer data to validate against\n            relationships_key_specified (bool): if the \"relationships\" key was provided or not\n            instance (Optional[BaseModel]): an optional model instance to validate against\n        Returns:\n            (list[dict]): List of field error dicts if any are found\n        \"\"\"\nrequired_relationships = Relationship.objects.get_required_for_model(cls)\nrelationships_field_errors = {}\nfor relation in required_relationships:\nopposite_side = RelationshipSideChoices.OPPOSITE[relation.required_on]\nif relation.skip_required(cls, opposite_side):\ncontinue\nif relation.has_many(opposite_side):\nnum_required_verbose = \"at least one\"\nelse:\nnum_required_verbose = \"a\"\nif output_for == \"api\":\n# If this is a model instance and the relationships json data key is missing, check to see if\n# required relationship associations already exist, and continue (ignore validation) if so\nif (\ngetattr(instance, \"present_in_database\", False) is True\nand initial_data.get(relation, {}).get(opposite_side, {}) == {}\nand not relationships_key_specified\n):\nfilter_kwargs = {\"relationship\": relation, f\"{relation.required_on}_id\": instance.pk}\nif RelationshipAssociation.objects.filter(**filter_kwargs).exists():\ncontinue\nrequired_model_class = getattr(relation, f\"{opposite_side}_type\").model_class()\nrequired_model_meta = required_model_class._meta\ncr_field_name = f\"cr_{relation.key}__{opposite_side}\"\nname_plural = cls._meta.verbose_name_plural\nfield_key = relation.key if output_for == \"api\" else cr_field_name\nfield_errors = {field_key: []}\nif not required_model_class.objects.exists():\nhint = (\nf\"You need to create {num_required_verbose} {required_model_meta.verbose_name} \"\nf\"before instantiating a {cls._meta.verbose_name}.\"\n)\nif output_for == \"ui\":\ntry:\nadd_url = reverse(get_route_for_model(required_model_class, \"add\"))\nhint = format_html(\n'&lt;a target=\"_blank\" href=\"{}\"&gt;Click here&lt;/a&gt; to create a {}.',\nadd_url,\nrequired_model_meta.verbose_name,\n)\nexcept NoReverseMatch:\npass\nelif output_for == \"api\":\ntry:\napi_post_url = reverse(get_route_for_model(required_model_class, \"list\", api=True))\nhint = f\"Create a {required_model_meta.verbose_name} by posting to {api_post_url}\"\nexcept NoReverseMatch:\npass\nerror_message = format_html(\n\"{} require {} {}, but no {} exist yet. \",\nbettertitle(name_plural),\nnum_required_verbose,\nrequired_model_meta.verbose_name,\nrequired_model_meta.verbose_name_plural,\n)\nerror_message += hint\nfield_errors[field_key].append(error_message)\nif initial_data is not None:\nsupplied_data = []\nif output_for == \"ui\":\nsupplied_data = initial_data.get(field_key, [])\nelif output_for == \"api\":\nsupplied_data = initial_data.get(relation, {}).get(opposite_side, {})\nif not supplied_data:\nif output_for == \"ui\":\nfield_errors[field_key].append(\nf\"You need to select {num_required_verbose} {required_model_meta.verbose_name}.\"\n)\nelif output_for == \"api\":\nfield_errors[field_key].append(\nf'You need to specify [\"relationships\"][\"{relation.key}\"][\"{opposite_side}\"][\"objects\"].'\n)\nif len(field_errors[field_key]) &gt; 0:\nrelationships_field_errors[field_key] = field_errors[field_key]\nreturn relationships_field_errors\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.models.relationships.RelationshipModel.get_relationships","title":"<code>get_relationships(include_hidden=False, advanced_ui=None)</code>","text":"<p>Return a dictionary of RelationshipAssociation querysets for all custom relationships</p> <p>Returns:</p> Type Description <code>dict</code> <p><code>{     \"source\": {         &lt;Relationship instance #1&gt;: &lt;RelationshipAssociation queryset #1&gt;,         &lt;Relationship instance #2&gt;: &lt;RelationshipAssociation queryset #2&gt;,     },     \"destination\": {         &lt;Relationship instance #3&gt;: &lt;RelationshipAssociation queryset #3&gt;,         &lt;Relationship instance #4&gt;: &lt;RelationshipAssociation queryset #4&gt;,     },     \"peer\": {         &lt;Relationship instance #5&gt;: &lt;RelationshipAssociation queryset #5&gt;,         &lt;Relationship instance #6&gt;: &lt;RelationshipAssociation queryset #6&gt;,     }, }</code></p> Source code in <code>nautobot/extras/models/relationships.py</code> <pre><code>def get_relationships(self, include_hidden=False, advanced_ui=None):\n\"\"\"\n    Return a dictionary of RelationshipAssociation querysets for all custom relationships\n    Returns:\n        (dict): `{\n                \"source\": {\n                    &lt;Relationship instance #1&gt;: &lt;RelationshipAssociation queryset #1&gt;,\n                    &lt;Relationship instance #2&gt;: &lt;RelationshipAssociation queryset #2&gt;,\n                },\n                \"destination\": {\n                    &lt;Relationship instance #3&gt;: &lt;RelationshipAssociation queryset #3&gt;,\n                    &lt;Relationship instance #4&gt;: &lt;RelationshipAssociation queryset #4&gt;,\n                },\n                \"peer\": {\n                    &lt;Relationship instance #5&gt;: &lt;RelationshipAssociation queryset #5&gt;,\n                    &lt;Relationship instance #6&gt;: &lt;RelationshipAssociation queryset #6&gt;,\n                },\n            }`\n    \"\"\"\nsrc_relationships, dst_relationships = Relationship.objects.get_for_model(self)\nif advanced_ui is not None:\nsrc_relationships = src_relationships.filter(advanced_ui=advanced_ui)\ndst_relationships = dst_relationships.filter(advanced_ui=advanced_ui)\ncontent_type = ContentType.objects.get_for_model(self)\nsides = {\nRelationshipSideChoices.SIDE_SOURCE: src_relationships,\nRelationshipSideChoices.SIDE_DESTINATION: dst_relationships,\n}\nresp = {\nRelationshipSideChoices.SIDE_SOURCE: {},\nRelationshipSideChoices.SIDE_DESTINATION: {},\nRelationshipSideChoices.SIDE_PEER: {},\n}\nfor side, relationships in sides.items():\nfor relationship in relationships:\nif getattr(relationship, f\"{side}_hidden\") and not include_hidden:\ncontinue\n# Determine if the relationship is applicable to this object based on the filter\n# To resolve the filter we are using the FilterSet for the given model\n# If there is no match when we query the primary key of the device along with the filter\n# Then the relationship is not applicable to this object\nif getattr(relationship, f\"{side}_filter\"):\nfilterset = get_filterset_for_model(self._meta.model)\nif filterset:\nfilter_params = getattr(relationship, f\"{side}_filter\")\nif not filterset(filter_params, self._meta.model.objects.filter(id=self.id)).qs.exists():\ncontinue\n# Construct the queryset to query all RelationshipAssociation for this object and this relationship\nquery_params = {\"relationship\": relationship}\nif not relationship.symmetric:\n# Query for RelationshipAssociations that this object is on the expected side of\nquery_params[f\"{side}_id\"] = self.pk\nquery_params[f\"{side}_type\"] = content_type\nresp[side][relationship] = RelationshipAssociation.objects.filter(**query_params)\nelse:\n# Query for RelationshipAssociations involving this object, regardless of side\nresp[RelationshipSideChoices.SIDE_PEER][relationship] = RelationshipAssociation.objects.filter(\n(\nQ(source_id=self.pk, source_type=content_type)\n| Q(destination_id=self.pk, destination_type=content_type)\n),\n**query_params,\n)\nreturn resp\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.models.relationships.RelationshipModel.get_relationships_data","title":"<code>get_relationships_data(**kwargs)</code>","text":"<p>Return a dictionary of relationships with the label and the value or the queryset for each.</p> <p>Used for rendering relationships in the UI; see nautobot/core/templates/inc/relationships_table_rows.html</p> <p>Returns:</p> Type Description <code>dict</code> <p><code>{     \"source\": {         &lt;Relationship instance #1&gt;: {   # one-to-one relationship that self is the source of             \"label\": \"...\",             \"peer_type\": &lt;ContentType&gt;,             \"has_many\": False,             \"value\": &lt;model instance&gt;,     # single destination for this relationship             \"url\": \"...\",         },         &lt;Relationship instance #2&gt;: {   # one-to-many or many-to-many relationship that self is a source for             \"label\": \"...\",             \"peer_type\": &lt;ContentType&gt;,             \"has_many\": True,             \"value\": None,             \"queryset\": &lt;RelationshipAssociation queryset #2&gt;   # set of destinations for the relationship         },     },     \"destination\": {         (same format as \"source\" dict - relationships that self is the destination of)     },     \"peer\": {         (same format as \"source\" dict - symmetric relationships that self is involved in)     }, }</code></p> Source code in <code>nautobot/extras/models/relationships.py</code> <pre><code>def get_relationships_data(self, **kwargs):\n\"\"\"\n    Return a dictionary of relationships with the label and the value or the queryset for each.\n    Used for rendering relationships in the UI; see nautobot/core/templates/inc/relationships_table_rows.html\n    Returns:\n        (dict): `{\n                \"source\": {\n                    &lt;Relationship instance #1&gt;: {   # one-to-one relationship that self is the source of\n                        \"label\": \"...\",\n                        \"peer_type\": &lt;ContentType&gt;,\n                        \"has_many\": False,\n                        \"value\": &lt;model instance&gt;,     # single destination for this relationship\n                        \"url\": \"...\",\n                    },\n                    &lt;Relationship instance #2&gt;: {   # one-to-many or many-to-many relationship that self is a source for\n                        \"label\": \"...\",\n                        \"peer_type\": &lt;ContentType&gt;,\n                        \"has_many\": True,\n                        \"value\": None,\n                        \"queryset\": &lt;RelationshipAssociation queryset #2&gt;   # set of destinations for the relationship\n                    },\n                },\n                \"destination\": {\n                    (same format as \"source\" dict - relationships that self is the destination of)\n                },\n                \"peer\": {\n                    (same format as \"source\" dict - symmetric relationships that self is involved in)\n                },\n            }`\n    \"\"\"\nrelationships_by_side = self.get_relationships(**kwargs)\nresp = {\nRelationshipSideChoices.SIDE_SOURCE: {},\nRelationshipSideChoices.SIDE_DESTINATION: {},\nRelationshipSideChoices.SIDE_PEER: {},\n}\nfor side, relationships in relationships_by_side.items():\nfor relationship, queryset in relationships.items():\npeer_side = RelationshipSideChoices.OPPOSITE[side]\nresp[side][relationship] = {\n\"label\": relationship.get_label(side),\n\"value\": None,\n}\nif not relationship.symmetric:\nresp[side][relationship][\"peer_type\"] = getattr(relationship, f\"{peer_side}_type\")\nelse:\n# Symmetric relationship - source_type == destination_type, so it doesn't matter which we choose\nresp[side][relationship][\"peer_type\"] = getattr(relationship, \"source_type\")\nresp[side][relationship][\"has_many\"] = relationship.has_many(peer_side)\nif resp[side][relationship][\"has_many\"]:\nresp[side][relationship][\"queryset\"] = queryset\nelse:\nresp[side][relationship][\"url\"] = None\nassociation = queryset.first()\nif not association:\ncontinue\npeer = association.get_peer(self)\nresp[side][relationship][\"value\"] = peer\nif hasattr(peer, \"get_absolute_url\"):\nresp[side][relationship][\"url\"] = peer.get_absolute_url()\nelse:\nlogger.warning(\"Peer object %s has no get_absolute_url() method\", peer)\nreturn resp\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.models.relationships.RelationshipModel.get_relationships_data_advanced_fields","title":"<code>get_relationships_data_advanced_fields()</code>","text":"<p>Same docstring as get_relationships_data() above except this only returns relationships where advanced_ui==True for displaying in the 'Advanced' tab on the object's page</p> Source code in <code>nautobot/extras/models/relationships.py</code> <pre><code>def get_relationships_data_advanced_fields(self):\n\"\"\"\n    Same docstring as get_relationships_data() above except this only returns relationships\n    where advanced_ui==True for displaying in the 'Advanced' tab on the object's page\n    \"\"\"\nreturn self.get_relationships_data(advanced_ui=True)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.models.relationships.RelationshipModel.get_relationships_data_basic_fields","title":"<code>get_relationships_data_basic_fields()</code>","text":"<p>Same docstring as get_relationships_data() above except this only returns relationships where advanced_ui==False for displaying in the main object detail tab on the object's page</p> Source code in <code>nautobot/extras/models/relationships.py</code> <pre><code>def get_relationships_data_basic_fields(self):\n\"\"\"\n    Same docstring as get_relationships_data() above except this only returns relationships\n    where advanced_ui==False for displaying in the main object detail tab on the object's page\n    \"\"\"\nreturn self.get_relationships_data(advanced_ui=False)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.models.relationships.RelationshipModel.required_related_objects_errors","title":"<code>required_related_objects_errors(output_for='ui', initial_data=None, relationships_key_specified=False, instance=None)</code>  <code>classmethod</code>","text":"<p>Parameters:</p> Name Type Description Default <code>output_for</code> <code>str</code> <p>either \"ui\" or \"api\" depending on usage</p> <code>'ui'</code> <code>initial_data</code> <code>dict</code> <p>submitted form/serializer data to validate against</p> <code>None</code> <code>relationships_key_specified</code> <code>bool</code> <p>if the \"relationships\" key was provided or not</p> <code>False</code> <code>instance</code> <code>Optional[BaseModel]</code> <p>an optional model instance to validate against</p> <code>None</code> <p>Returns:</p> Type Description <code>list[dict]</code> <p>List of field error dicts if any are found</p> Source code in <code>nautobot/extras/models/relationships.py</code> <pre><code>@classmethod\ndef required_related_objects_errors(\ncls, output_for=\"ui\", initial_data=None, relationships_key_specified=False, instance=None\n):\n\"\"\"\n    Args:\n        output_for (str): either \"ui\" or \"api\" depending on usage\n        initial_data (dict): submitted form/serializer data to validate against\n        relationships_key_specified (bool): if the \"relationships\" key was provided or not\n        instance (Optional[BaseModel]): an optional model instance to validate against\n    Returns:\n        (list[dict]): List of field error dicts if any are found\n    \"\"\"\nrequired_relationships = Relationship.objects.get_required_for_model(cls)\nrelationships_field_errors = {}\nfor relation in required_relationships:\nopposite_side = RelationshipSideChoices.OPPOSITE[relation.required_on]\nif relation.skip_required(cls, opposite_side):\ncontinue\nif relation.has_many(opposite_side):\nnum_required_verbose = \"at least one\"\nelse:\nnum_required_verbose = \"a\"\nif output_for == \"api\":\n# If this is a model instance and the relationships json data key is missing, check to see if\n# required relationship associations already exist, and continue (ignore validation) if so\nif (\ngetattr(instance, \"present_in_database\", False) is True\nand initial_data.get(relation, {}).get(opposite_side, {}) == {}\nand not relationships_key_specified\n):\nfilter_kwargs = {\"relationship\": relation, f\"{relation.required_on}_id\": instance.pk}\nif RelationshipAssociation.objects.filter(**filter_kwargs).exists():\ncontinue\nrequired_model_class = getattr(relation, f\"{opposite_side}_type\").model_class()\nrequired_model_meta = required_model_class._meta\ncr_field_name = f\"cr_{relation.key}__{opposite_side}\"\nname_plural = cls._meta.verbose_name_plural\nfield_key = relation.key if output_for == \"api\" else cr_field_name\nfield_errors = {field_key: []}\nif not required_model_class.objects.exists():\nhint = (\nf\"You need to create {num_required_verbose} {required_model_meta.verbose_name} \"\nf\"before instantiating a {cls._meta.verbose_name}.\"\n)\nif output_for == \"ui\":\ntry:\nadd_url = reverse(get_route_for_model(required_model_class, \"add\"))\nhint = format_html(\n'&lt;a target=\"_blank\" href=\"{}\"&gt;Click here&lt;/a&gt; to create a {}.',\nadd_url,\nrequired_model_meta.verbose_name,\n)\nexcept NoReverseMatch:\npass\nelif output_for == \"api\":\ntry:\napi_post_url = reverse(get_route_for_model(required_model_class, \"list\", api=True))\nhint = f\"Create a {required_model_meta.verbose_name} by posting to {api_post_url}\"\nexcept NoReverseMatch:\npass\nerror_message = format_html(\n\"{} require {} {}, but no {} exist yet. \",\nbettertitle(name_plural),\nnum_required_verbose,\nrequired_model_meta.verbose_name,\nrequired_model_meta.verbose_name_plural,\n)\nerror_message += hint\nfield_errors[field_key].append(error_message)\nif initial_data is not None:\nsupplied_data = []\nif output_for == \"ui\":\nsupplied_data = initial_data.get(field_key, [])\nelif output_for == \"api\":\nsupplied_data = initial_data.get(relation, {}).get(opposite_side, {})\nif not supplied_data:\nif output_for == \"ui\":\nfield_errors[field_key].append(\nf\"You need to select {num_required_verbose} {required_model_meta.verbose_name}.\"\n)\nelif output_for == \"api\":\nfield_errors[field_key].append(\nf'You need to specify [\"relationships\"][\"{relation.key}\"][\"{opposite_side}\"][\"objects\"].'\n)\nif len(field_errors[field_key]) &gt; 0:\nrelationships_field_errors[field_key] = field_errors[field_key]\nreturn relationships_field_errors\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.RestrictedQuerySet","title":"<code>nautobot.apps.models.RestrictedQuerySet</code>","text":"<p>             Bases: <code>CompositeKeyQuerySetMixin</code>, <code>QuerySet</code></p> Source code in <code>nautobot/core/models/querysets.py</code> <pre><code>class RestrictedQuerySet(CompositeKeyQuerySetMixin, QuerySet):\ndef restrict(self, user, action=\"view\"):\n\"\"\"\n        Filter the QuerySet to return only objects on which the specified user has been granted the specified\n        permission.\n        :param user: User instance\n        :param action: The action which must be permitted (e.g. \"view\" for \"dcim.view_location\"); default is 'view'\n        \"\"\"\n# Resolve the full name of the required permission\napp_label = self.model._meta.app_label\nmodel_name = self.model._meta.model_name\npermission_required = f\"{app_label}.{action}_{model_name}\"\n# Bypass restriction for superusers and exempt views\nif user.is_superuser or permissions.permission_is_exempt(permission_required):\nqs = self\n# User is anonymous or has not been granted the requisite permission\nelif not user.is_authenticated or permission_required not in user.get_all_permissions():\nqs = self.none()\n# Filter the queryset to include only objects with allowed attributes\nelse:\nattrs = Q()\nfor perm_attrs in user._object_perm_cache[permission_required]:\nif isinstance(perm_attrs, list):\nfor p in perm_attrs:\nattrs |= Q(**p)\nelif perm_attrs:\nattrs |= Q(**perm_attrs)\nelse:\n# Any permission with null constraints grants access to _all_ instances\nattrs = Q()\nbreak\nqs = self.filter(attrs)\nreturn qs\ndef check_perms(self, user, *, instance=None, pk=None, action=\"view\"):\n\"\"\"\n        Check whether the given user can perform the given action with regard to the given instance of this model.\n        Either instance or pk must be specified, but not both.\n        Args:\n          user (User): User instance\n          instance (self.model): Instance of this queryset's model to check, if pk is not provided\n          pk (uuid): Primary key of the desired instance to check for, if instance is not provided\n          action (str): The action which must be permitted (e.g. \"view\" for \"dcim.view_location\"); default is 'view'\n        Returns:\n            (bool): Whether the action is permitted or not\n        \"\"\"\nif instance is not None and pk is not None and instance.pk != pk:\nraise RuntimeError(\"Should not be called with both instance and pk specified!\")\nif instance is None and pk is None:\nraise ValueError(\"Either instance or pk must be specified!\")\nif instance is not None and not isinstance(instance, self.model):\nraise TypeError(f\"{instance} is not a {self.model}\")\nif pk is None:\npk = instance.pk\nreturn self.restrict(user, action).filter(pk=pk).exists()\ndef distinct_values_list(self, *fields, flat=False, named=False):\n\"\"\"Wrapper for `QuerySet.values_list()` that adds the `distinct()` query to return a list of unique values.\n        Note:\n            Uses `QuerySet.order_by()` to disable ordering, preventing unexpected behavior when using `values_list` described\n            in the Django `distinct()` documentation at https://docs.djangoproject.com/en/stable/ref/models/querysets/#distinct\n        Args:\n            *fields (str): Optional positional arguments which specify field names.\n            flat (bool): Set to True to return a QuerySet of individual values instead of a QuerySet of tuples.\n                Defaults to False.\n            named (bool): Set to True to return a QuerySet of namedtuples. Defaults to False.\n        Returns:\n            (QuerySet): A QuerySet of tuples or, if `flat` is set to True, a queryset of individual values.\n        \"\"\"\nreturn self.order_by().values_list(*fields, flat=flat, named=named).distinct()\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.querysets.RestrictedQuerySet.check_perms","title":"<code>check_perms(user, *, instance=None, pk=None, action='view')</code>","text":"<p>Check whether the given user can perform the given action with regard to the given instance of this model.</p> <p>Either instance or pk must be specified, but not both.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>User</code> <p>User instance</p> required <code>instance</code> <code>self.model</code> <p>Instance of this queryset's model to check, if pk is not provided</p> <code>None</code> <code>pk</code> <code>uuid</code> <p>Primary key of the desired instance to check for, if instance is not provided</p> <code>None</code> <code>action</code> <code>str</code> <p>The action which must be permitted (e.g. \"view\" for \"dcim.view_location\"); default is 'view'</p> <code>'view'</code> <p>Returns:</p> Type Description <code>bool</code> <p>Whether the action is permitted or not</p> Source code in <code>nautobot/core/models/querysets.py</code> <pre><code>def check_perms(self, user, *, instance=None, pk=None, action=\"view\"):\n\"\"\"\n    Check whether the given user can perform the given action with regard to the given instance of this model.\n    Either instance or pk must be specified, but not both.\n    Args:\n      user (User): User instance\n      instance (self.model): Instance of this queryset's model to check, if pk is not provided\n      pk (uuid): Primary key of the desired instance to check for, if instance is not provided\n      action (str): The action which must be permitted (e.g. \"view\" for \"dcim.view_location\"); default is 'view'\n    Returns:\n        (bool): Whether the action is permitted or not\n    \"\"\"\nif instance is not None and pk is not None and instance.pk != pk:\nraise RuntimeError(\"Should not be called with both instance and pk specified!\")\nif instance is None and pk is None:\nraise ValueError(\"Either instance or pk must be specified!\")\nif instance is not None and not isinstance(instance, self.model):\nraise TypeError(f\"{instance} is not a {self.model}\")\nif pk is None:\npk = instance.pk\nreturn self.restrict(user, action).filter(pk=pk).exists()\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.querysets.RestrictedQuerySet.distinct_values_list","title":"<code>distinct_values_list(*fields, flat=False, named=False)</code>","text":"<p>Wrapper for <code>QuerySet.values_list()</code> that adds the <code>distinct()</code> query to return a list of unique values.</p> Note <p>Uses <code>QuerySet.order_by()</code> to disable ordering, preventing unexpected behavior when using <code>values_list</code> described in the Django <code>distinct()</code> documentation at https://docs.djangoproject.com/en/stable/ref/models/querysets/#distinct</p> <p>Parameters:</p> Name Type Description Default <code>*fields</code> <code>str</code> <p>Optional positional arguments which specify field names.</p> <code>()</code> <code>flat</code> <code>bool</code> <p>Set to True to return a QuerySet of individual values instead of a QuerySet of tuples. Defaults to False.</p> <code>False</code> <code>named</code> <code>bool</code> <p>Set to True to return a QuerySet of namedtuples. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>QuerySet</code> <p>A QuerySet of tuples or, if <code>flat</code> is set to True, a queryset of individual values.</p> Source code in <code>nautobot/core/models/querysets.py</code> <pre><code>def distinct_values_list(self, *fields, flat=False, named=False):\n\"\"\"Wrapper for `QuerySet.values_list()` that adds the `distinct()` query to return a list of unique values.\n    Note:\n        Uses `QuerySet.order_by()` to disable ordering, preventing unexpected behavior when using `values_list` described\n        in the Django `distinct()` documentation at https://docs.djangoproject.com/en/stable/ref/models/querysets/#distinct\n    Args:\n        *fields (str): Optional positional arguments which specify field names.\n        flat (bool): Set to True to return a QuerySet of individual values instead of a QuerySet of tuples.\n            Defaults to False.\n        named (bool): Set to True to return a QuerySet of namedtuples. Defaults to False.\n    Returns:\n        (QuerySet): A QuerySet of tuples or, if `flat` is set to True, a queryset of individual values.\n    \"\"\"\nreturn self.order_by().values_list(*fields, flat=flat, named=named).distinct()\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.querysets.RestrictedQuerySet.restrict","title":"<code>restrict(user, action='view')</code>","text":"<p>Filter the QuerySet to return only objects on which the specified user has been granted the specified permission.</p> <p>:param user: User instance :param action: The action which must be permitted (e.g. \"view\" for \"dcim.view_location\"); default is 'view'</p> Source code in <code>nautobot/core/models/querysets.py</code> <pre><code>def restrict(self, user, action=\"view\"):\n\"\"\"\n    Filter the QuerySet to return only objects on which the specified user has been granted the specified\n    permission.\n    :param user: User instance\n    :param action: The action which must be permitted (e.g. \"view\" for \"dcim.view_location\"); default is 'view'\n    \"\"\"\n# Resolve the full name of the required permission\napp_label = self.model._meta.app_label\nmodel_name = self.model._meta.model_name\npermission_required = f\"{app_label}.{action}_{model_name}\"\n# Bypass restriction for superusers and exempt views\nif user.is_superuser or permissions.permission_is_exempt(permission_required):\nqs = self\n# User is anonymous or has not been granted the requisite permission\nelif not user.is_authenticated or permission_required not in user.get_all_permissions():\nqs = self.none()\n# Filter the queryset to include only objects with allowed attributes\nelse:\nattrs = Q()\nfor perm_attrs in user._object_perm_cache[permission_required]:\nif isinstance(perm_attrs, list):\nfor p in perm_attrs:\nattrs |= Q(**p)\nelif perm_attrs:\nattrs |= Q(**perm_attrs)\nelse:\n# Any permission with null constraints grants access to _all_ instances\nattrs = Q()\nbreak\nqs = self.filter(attrs)\nreturn qs\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.StatusField","title":"<code>nautobot.apps.models.StatusField</code>","text":"<p>             Bases: <code>ForeignKeyLimitedByContentTypes</code></p> <p>Model database field that automatically limits custom choices.</p> The limit_choices_to for the field are automatically derived from <ul> <li>the content-type to which the field is attached (e.g. <code>dcim.device</code>)</li> </ul> Source code in <code>nautobot/extras/models/statuses.py</code> <pre><code>class StatusField(ForeignKeyLimitedByContentTypes):\n\"\"\"\n    Model database field that automatically limits custom choices.\n    The limit_choices_to for the field are automatically derived from:\n        - the content-type to which the field is attached (e.g. `dcim.device`)\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nkwargs.setdefault(\"to\", Status)\nkwargs.setdefault(\"on_delete\", models.PROTECT)\nsuper().__init__(*args, **kwargs)\ndef contribute_to_class(self, cls, *args, **kwargs):\n\"\"\"\n        Overload default so that we can assert that `.get_FOO_display` is\n        attached to any model that is using a `StatusField`.\n        Using `.contribute_to_class()` is how field objects get added to the model\n        at during the instance preparation. This is also where any custom model\n        methods are hooked in. So in short this method asserts that any time a\n        `StatusField` is added to a model, that model also gets a\n        `.get_status_display()` and a `.get_status_color()` method without\n        having to define it on the model yourself.\n        \"\"\"\nsuper().contribute_to_class(cls, *args, **kwargs)\ndef _get_FIELD_display(self, field):\n\"\"\"\n            Closure to replace default model method of the same name.\n            Cargo-culted from `django.db.models.base.Model._get_FIELD_display`\n            \"\"\"\nchoices = field.get_choices()\nvalue = getattr(self, field.attname)\nchoices_dict = dict(make_hashable(choices))\n# force_str() to coerce lazy strings.\nreturn force_str(choices_dict.get(make_hashable(value), value), strings_only=True)\n# Install `.get_FOO_display()` onto the model using our own version.\nif f\"get_{self.name}_display\" not in cls.__dict__:\nsetattr(\ncls,\nf\"get_{self.name}_display\",\npartialmethod(_get_FIELD_display, field=self),\n)\ndef _get_FIELD_color(self, field):\n\"\"\"\n            Return `self.FOO.color` (where FOO is field name).\n            I am added to the model via `StatusField.contribute_to_class()`.\n            \"\"\"\nfield_method = getattr(self, field.name)\nreturn getattr(field_method, \"color\")\n# Install `.get_FOO_color()` onto the model using our own version.\nif f\"get_{self.name}_color\" not in cls.__dict__:\nsetattr(\ncls,\nf\"get_{self.name}_color\",\npartialmethod(_get_FIELD_color, field=self),\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.extras.models.statuses.StatusField.contribute_to_class","title":"<code>contribute_to_class(cls, *args, **kwargs)</code>","text":"<p>Overload default so that we can assert that <code>.get_FOO_display</code> is attached to any model that is using a <code>StatusField</code>.</p> <p>Using <code>.contribute_to_class()</code> is how field objects get added to the model at during the instance preparation. This is also where any custom model methods are hooked in. So in short this method asserts that any time a <code>StatusField</code> is added to a model, that model also gets a <code>.get_status_display()</code> and a <code>.get_status_color()</code> method without having to define it on the model yourself.</p> Source code in <code>nautobot/extras/models/statuses.py</code> <pre><code>def contribute_to_class(self, cls, *args, **kwargs):\n\"\"\"\n    Overload default so that we can assert that `.get_FOO_display` is\n    attached to any model that is using a `StatusField`.\n    Using `.contribute_to_class()` is how field objects get added to the model\n    at during the instance preparation. This is also where any custom model\n    methods are hooked in. So in short this method asserts that any time a\n    `StatusField` is added to a model, that model also gets a\n    `.get_status_display()` and a `.get_status_color()` method without\n    having to define it on the model yourself.\n    \"\"\"\nsuper().contribute_to_class(cls, *args, **kwargs)\ndef _get_FIELD_display(self, field):\n\"\"\"\n        Closure to replace default model method of the same name.\n        Cargo-culted from `django.db.models.base.Model._get_FIELD_display`\n        \"\"\"\nchoices = field.get_choices()\nvalue = getattr(self, field.attname)\nchoices_dict = dict(make_hashable(choices))\n# force_str() to coerce lazy strings.\nreturn force_str(choices_dict.get(make_hashable(value), value), strings_only=True)\n# Install `.get_FOO_display()` onto the model using our own version.\nif f\"get_{self.name}_display\" not in cls.__dict__:\nsetattr(\ncls,\nf\"get_{self.name}_display\",\npartialmethod(_get_FIELD_display, field=self),\n)\ndef _get_FIELD_color(self, field):\n\"\"\"\n        Return `self.FOO.color` (where FOO is field name).\n        I am added to the model via `StatusField.contribute_to_class()`.\n        \"\"\"\nfield_method = getattr(self, field.name)\nreturn getattr(field_method, \"color\")\n# Install `.get_FOO_color()` onto the model using our own version.\nif f\"get_{self.name}_color\" not in cls.__dict__:\nsetattr(\ncls,\nf\"get_{self.name}_color\",\npartialmethod(_get_FIELD_color, field=self),\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.StatusModel","title":"<code>nautobot.apps.models.StatusModel</code>","text":"<p>             Bases: <code>models.Model</code></p> <p>Deprecated abstract base class for any model which may have statuses.</p> <p>Just directly include a StatusField instead for any new models.</p> Source code in <code>nautobot/extras/models/statuses.py</code> <pre><code>@class_deprecated(message=\"please directly declare `status = StatusField(...)` on your model instead\")\nclass StatusModel(models.Model):\n\"\"\"\n    Deprecated abstract base class for any model which may have statuses.\n    Just directly include a StatusField instead for any new models.\n    \"\"\"\nstatus = StatusField(null=True)  # for backward compatibility\nclass Meta:\nabstract = True\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.TagsField","title":"<code>nautobot.apps.models.TagsField</code>","text":"<p>             Bases: <code>TaggableManager</code></p> <p>Override FormField method on taggit.managers.TaggableManager to match the Nautobot UI.</p> Source code in <code>nautobot/core/models/fields.py</code> <pre><code>class TagsField(TaggableManager):\n\"\"\"Override FormField method on taggit.managers.TaggableManager to match the Nautobot UI.\"\"\"\ndef __init__(self, *args, **kwargs):\nfrom nautobot.extras.models.tags import TaggedItem\nkwargs.setdefault(\"through\", TaggedItem)\nkwargs.setdefault(\"manager\", TagsManager)\nkwargs.setdefault(\"ordering\", [\"name\"])\nsuper().__init__(*args, **kwargs)\ndef formfield(self, form_class=fields.DynamicModelMultipleChoiceField, **kwargs):\nfrom nautobot.extras.models.tags import Tag\nqueryset = Tag.objects.get_for_model(self.model)\nkwargs.setdefault(\"queryset\", queryset)\nkwargs.setdefault(\"required\", False)\nkwargs.setdefault(\"query_params\", {\"content_types\": self.model._meta.label_lower})\nreturn super().formfield(form_class=form_class, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.TagsManager","title":"<code>nautobot.apps.models.TagsManager</code>","text":"<p>             Bases: <code>_TaggableManager</code>, <code>BaseManager</code></p> <p>Manager class for model 'tags' fields.</p> Source code in <code>nautobot/core/models/managers.py</code> <pre><code>class TagsManager(_TaggableManager, BaseManager):\n\"\"\"Manager class for model 'tags' fields.\"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.TreeManager","title":"<code>nautobot.apps.models.TreeManager</code>","text":"<p>             Bases: <code>TreeManager_</code>, <code>BaseManager.from_queryset(TreeQuerySet)</code></p> <p>Extend django-tree-queries' TreeManager to incorporate RestrictedQuerySet.</p> Source code in <code>nautobot/core/models/tree_queries.py</code> <pre><code>class TreeManager(TreeManager_, BaseManager.from_queryset(TreeQuerySet)):\n\"\"\"\n    Extend django-tree-queries' TreeManager to incorporate RestrictedQuerySet.\n    \"\"\"\n_with_tree_fields = True\nuse_in_migrations = True\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.TreeModel","title":"<code>nautobot.apps.models.TreeModel</code>","text":"<p>             Bases: <code>TreeNode</code></p> <p>Nautobot-specific base class for models that exist in a self-referential tree.</p> Source code in <code>nautobot/core/models/tree_queries.py</code> <pre><code>class TreeModel(TreeNode):\n\"\"\"\n    Nautobot-specific base class for models that exist in a self-referential tree.\n    \"\"\"\nobjects = TreeManager()\nclass Meta:\nabstract = True\n@property\ndef display(self):\n\"\"\"\n        By default, TreeModels display their full ancestry for clarity.\n        As this is an expensive thing to calculate, we cache it for a few seconds in the case of repeated lookups.\n        \"\"\"\nif not hasattr(self, \"name\"):\nraise NotImplementedError(\"default TreeModel.display implementation requires a `name` attribute!\")\ncache_key = f\"{self.__class__.__name__}.{self.id}.display\"\ndisplay_str = cache.get(cache_key, \"\")\nif display_str:\nreturn display_str\ntry:\nif self.parent is not None:\ndisplay_str = self.parent.display + \" \u2192 \"\nexcept self.DoesNotExist:\n# Expected to occur at times during bulk-delete operations\npass\nfinally:\ndisplay_str += self.name\ncache.set(cache_key, display_str, 5)\nreturn display_str  # pylint: disable=lost-exception\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.tree_queries.TreeModel.display","title":"<code>display</code>  <code>property</code>","text":"<p>By default, TreeModels display their full ancestry for clarity.</p> <p>As this is an expensive thing to calculate, we cache it for a few seconds in the case of repeated lookups.</p>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.TreeQuerySet","title":"<code>nautobot.apps.models.TreeQuerySet</code>","text":"<p>             Bases: <code>TreeQuerySet_</code>, <code>querysets.RestrictedQuerySet</code></p> <p>Combine django-tree-queries' TreeQuerySet with our RestrictedQuerySet for permissions enforcement.</p> Source code in <code>nautobot/core/models/tree_queries.py</code> <pre><code>class TreeQuerySet(TreeQuerySet_, querysets.RestrictedQuerySet):\n\"\"\"\n    Combine django-tree-queries' TreeQuerySet with our RestrictedQuerySet for permissions enforcement.\n    \"\"\"\ndef max_tree_depth(self):\n\"\"\"\n        Get the maximum depth of any tree in this queryset.\n        \"\"\"\ndeepest = self.with_tree_fields().extra(order_by=[\"-__tree.tree_depth\"]).first()\nif deepest is not None:\nreturn deepest.tree_depth\nreturn 0\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.core.models.tree_queries.TreeQuerySet.max_tree_depth","title":"<code>max_tree_depth()</code>","text":"<p>Get the maximum depth of any tree in this queryset.</p> Source code in <code>nautobot/core/models/tree_queries.py</code> <pre><code>def max_tree_depth(self):\n\"\"\"\n    Get the maximum depth of any tree in this queryset.\n    \"\"\"\ndeepest = self.with_tree_fields().extra(order_by=[\"-__tree.tree_depth\"]).first()\nif deepest is not None:\nreturn deepest.tree_depth\nreturn 0\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.ValidRegexValidator","title":"<code>nautobot.apps.models.ValidRegexValidator</code>","text":"<p>             Bases: <code>RegexValidator</code></p> <p>Checks that the value is a valid regular expression.</p> <p>Don't confuse this with <code>RegexValidator</code>, which uses a regex to validate a value.</p> Source code in <code>nautobot/core/models/validators.py</code> <pre><code>class ValidRegexValidator(RegexValidator):\n\"\"\"\n    Checks that the value is a valid regular expression.\n    Don't confuse this with `RegexValidator`, which *uses* a regex to validate a value.\n    \"\"\"\nmessage = \"%(value)r is not a valid regular expression.\"\ncode = \"regex_invalid\"\ndef __call__(self, value):\ntry:\nreturn re.compile(value)\nexcept (re.error, TypeError):\nraise ValidationError(self.message, code=self.code, params={\"value\": value})\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.VarbinaryIPField","title":"<code>nautobot.apps.models.VarbinaryIPField</code>","text":"<p>             Bases: <code>models.BinaryField</code></p> <p>IP network address</p> Source code in <code>nautobot/ipam/fields.py</code> <pre><code>class VarbinaryIPField(models.BinaryField):\n\"\"\"\n    IP network address\n    \"\"\"\ndescription = \"IP network address\"\ndef db_type(self, connection):\n\"\"\"Returns the correct field type for a given database vendor.\"\"\"\n# Use 'bytea' type for PostgreSQL.\nif connection.vendor == \"postgresql\":\nreturn \"bytea\"\n# Or 'varbinary' for everyone else.\nreturn \"varbinary(16)\"\ndef value_to_string(self, obj):\n\"\"\"IPField is serialized as str(IPAddress())\"\"\"\nvalue = self.value_from_object(obj)\nif not value:\nreturn value\nreturn str(self._parse_address(value))\ndef _parse_address(self, value):\n\"\"\"\n        Parse `str`, `bytes` (varbinary), or `netaddr.IPAddress to `netaddr.IPAddress`.\n        \"\"\"\ntry:\nint_value = int.from_bytes(value, \"big\")\n# Distinguish between\n# \\x00\\x00\\x00\\x01 (IPv4 0.0.0.1) and\n# \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01 (IPv6 ::1), among other cases\nversion = 4 if len(value) == 4 else 6\nvalue = int_value\nexcept TypeError:\nversion = None  # It's a string, IP version should be self-evident\ntry:\nreturn netaddr.IPAddress(value, version=version)\nexcept netaddr.AddrFormatError:\nraise ValidationError(f\"Invalid IP address format: {value}\")\nexcept (TypeError, ValueError) as e:\nraise ValidationError(e)\ndef from_db_value(self, value, expression, connection):\n\"\"\"Converts DB (varbinary) to Python (str).\"\"\"\nreturn self.to_python(value)\ndef to_python(self, value):\n\"\"\"Converts `value` to Python (str).\"\"\"\nif isinstance(value, netaddr.IPAddress):\nreturn str(value)\nif value is None:\nreturn value\nreturn str(self._parse_address(value))\ndef get_db_prep_value(self, value, connection, prepared=False):\n\"\"\"Converts Python (str) to DB (varbinary).\"\"\"\nif value is None:\nreturn value\n# Parse the address and then pack it to binary.\nvalue = self._parse_address(value).packed\n# Use defaults for PostgreSQL\nif connection.vendor == \"postgresql\":\nreturn super().get_db_prep_value(value, connection, prepared)\nreturn value\ndef form_class(self):\nreturn IPNetworkFormField\ndef formfield(self, *args, **kwargs):\ndefaults = {\"form_class\": self.form_class()}\ndefaults.update(kwargs)\nreturn super().formfield(*args, **defaults)\ndef get_default(self):\nvalue = super().get_default()\n# Prevent None or \"\" values from being represented as b''\nreturn None if value in self.empty_values else value\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.ipam.fields.VarbinaryIPField.db_type","title":"<code>db_type(connection)</code>","text":"<p>Returns the correct field type for a given database vendor.</p> Source code in <code>nautobot/ipam/fields.py</code> <pre><code>def db_type(self, connection):\n\"\"\"Returns the correct field type for a given database vendor.\"\"\"\n# Use 'bytea' type for PostgreSQL.\nif connection.vendor == \"postgresql\":\nreturn \"bytea\"\n# Or 'varbinary' for everyone else.\nreturn \"varbinary(16)\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.ipam.fields.VarbinaryIPField.from_db_value","title":"<code>from_db_value(value, expression, connection)</code>","text":"<p>Converts DB (varbinary) to Python (str).</p> Source code in <code>nautobot/ipam/fields.py</code> <pre><code>def from_db_value(self, value, expression, connection):\n\"\"\"Converts DB (varbinary) to Python (str).\"\"\"\nreturn self.to_python(value)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.ipam.fields.VarbinaryIPField.get_db_prep_value","title":"<code>get_db_prep_value(value, connection, prepared=False)</code>","text":"<p>Converts Python (str) to DB (varbinary).</p> Source code in <code>nautobot/ipam/fields.py</code> <pre><code>def get_db_prep_value(self, value, connection, prepared=False):\n\"\"\"Converts Python (str) to DB (varbinary).\"\"\"\nif value is None:\nreturn value\n# Parse the address and then pack it to binary.\nvalue = self._parse_address(value).packed\n# Use defaults for PostgreSQL\nif connection.vendor == \"postgresql\":\nreturn super().get_db_prep_value(value, connection, prepared)\nreturn value\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.ipam.fields.VarbinaryIPField.to_python","title":"<code>to_python(value)</code>","text":"<p>Converts <code>value</code> to Python (str).</p> Source code in <code>nautobot/ipam/fields.py</code> <pre><code>def to_python(self, value):\n\"\"\"Converts `value` to Python (str).\"\"\"\nif isinstance(value, netaddr.IPAddress):\nreturn str(value)\nif value is None:\nreturn value\nreturn str(self._parse_address(value))\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.ipam.fields.VarbinaryIPField.value_to_string","title":"<code>value_to_string(obj)</code>","text":"<p>IPField is serialized as str(IPAddress())</p> Source code in <code>nautobot/ipam/fields.py</code> <pre><code>def value_to_string(self, obj):\n\"\"\"IPField is serialized as str(IPAddress())\"\"\"\nvalue = self.value_from_object(obj)\nif not value:\nreturn value\nreturn str(self._parse_address(value))\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.array_to_string","title":"<code>nautobot.apps.models.array_to_string(array)</code>","text":"<p>Generate an efficient, human-friendly string from a set of integers. Intended for use with ArrayField.</p> For example <p>[0, 1, 2, 10, 14, 15, 16] =&gt; \"0-2, 10, 14-16\"</p> Source code in <code>nautobot/core/models/utils.py</code> <pre><code>def array_to_string(array):\n\"\"\"\n    Generate an efficient, human-friendly string from a set of integers. Intended for use with ArrayField.\n    For example:\n        [0, 1, 2, 10, 14, 15, 16] =&gt; \"0-2, 10, 14-16\"\n    \"\"\"\ngroup = (list(x) for _, x in groupby(sorted(array), lambda x, c=count(): next(c) - x))\nreturn \", \".join(\"-\".join(map(str, (g[0], g[-1])[: len(g)])) for g in group)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.construct_composite_key","title":"<code>nautobot.apps.models.construct_composite_key(values)</code>","text":"<p>Convert the given list of natural key values to a single URL-path-usable string.</p> <ul> <li>Non-URL-safe characters are percent-encoded.</li> <li>Null (<code>None</code>) values are percent-encoded as a literal null character <code>%00</code>.</li> </ul> <p>Reversible by <code>deconstruct_composite_key()</code>.</p> Source code in <code>nautobot/core/models/utils.py</code> <pre><code>def construct_composite_key(values):\n\"\"\"\n    Convert the given list of natural key values to a single URL-path-usable string.\n    - Non-URL-safe characters are percent-encoded.\n    - Null (`None`) values are percent-encoded as a literal null character `%00`.\n    Reversible by `deconstruct_composite_key()`.\n    \"\"\"\nvalues = [str(value) if value is not None else \"\\0\" for value in values]\n# . and : are generally \"safe enough\" to use in URL parameters, and are common in some natural key fields,\n# so we don't quote them by default (although `deconstruct_composite_key` will work just fine if you do!)\n# / is a bit trickier to handle in URL paths, so for now we *do* quote it, even though it appears in IPAddress, etc.\nvalues = constants.COMPOSITE_KEY_SEPARATOR.join(quote_plus(value, safe=\".:\") for value in values)\nreturn values\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.construct_natural_slug","title":"<code>nautobot.apps.models.construct_natural_slug(values, pk=None)</code>","text":"<p>Convert the given list of natural key <code>values</code> to a single human-readable string.</p> <p>If <code>pk</code> is provided, it will be appended to the end of the natural slug. If the PK is a UUID, only the first four characters will be appended.</p> <p>A third-party lossy <code>slugify()</code> function is used to convert each natural key value to a slug, and then they are joined with an underscore.</p> <ul> <li>Spaces or repeated dashes are converted to single dashes.</li> <li>Accents and ligatures from Unicode characters are reduced to ASCII.</li> <li>Remove remaining characters that are not alphanumerics, underscores, or hyphens.</li> <li>Converted to lowercase.</li> <li>Strips leading/trailing whitespace, dashes, and underscores.</li> <li>Each natural key value in the list is separated by underscores.</li> <li>Emojis will be converted to their registered name.</li> </ul> <p>This value is not reversible, is lossy, and is not guaranteed to be unique.</p> Source code in <code>nautobot/core/models/utils.py</code> <pre><code>def construct_natural_slug(values, pk=None):\n\"\"\"\n    Convert the given list of natural key `values` to a single human-readable string.\n    If `pk` is provided, it will be appended to the end of the natural slug. If the PK is a UUID,\n    only the first four characters will be appended.\n    A third-party lossy `slugify()` function is used to convert each natural key value to a\n    slug, and then they are joined with an underscore.\n    - Spaces or repeated dashes are converted to single dashes.\n    - Accents and ligatures from Unicode characters are reduced to ASCII.\n    - Remove remaining characters that are not alphanumerics, underscores, or hyphens.\n    - Converted to lowercase.\n    - Strips leading/trailing whitespace, dashes, and underscores.\n    - Each natural key value in the list is separated by underscores.\n    - Emojis will be converted to their registered name.\n    This value is not reversible, is lossy, and is not guaranteed to be unique.\n    \"\"\"\n# In some cases the natural key might not be a list.\nif isinstance(values, tuple):\nvalues = list(values)\n# If a pk is passed through, append it to the values.\nif pk is not None:\npk = str(pk)\n# Keep the first 4 characters of the UUID.\nif is_uuid(pk):\npk = pk[:4]\nvalues.append(pk)\nvalues = (str(value) if value is not None else \"\\0\" for value in values)\n# Replace any emojis with their string name, and then slugify that.\nvalues = (slugify(emoji.replace_emoji(value, unicodedata.name)) for value in values)\nreturn constants.NATURAL_SLUG_SEPARATOR.join(values)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.count_related","title":"<code>nautobot.apps.models.count_related(model, field)</code>","text":"<p>Return a Subquery suitable for annotating a child object count.</p> Source code in <code>nautobot/core/models/querysets.py</code> <pre><code>def count_related(model, field):\n\"\"\"\n    Return a Subquery suitable for annotating a child object count.\n    \"\"\"\nmanager = model.objects\nif hasattr(model.objects, \"without_tree_fields\"):\nmanager = manager.without_tree_fields()\nsubquery = Subquery(\nmanager.filter(**{field: OuterRef(\"pk\")}).order_by().values(field).annotate(c=Count(\"*\")).values(\"c\")\n)\nreturn Coalesce(subquery, 0)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.deconstruct_composite_key","title":"<code>nautobot.apps.models.deconstruct_composite_key(composite_key)</code>","text":"<p>Convert the given composite-key string back to a list of distinct values.</p> <ul> <li>Percent-encoded characters are converted back to their raw values</li> <li>Single literal null characters <code>%00</code> are converted back to a Python <code>None</code>.</li> </ul> <p>Inverse operation of <code>construct_composite_key()</code>.</p> Source code in <code>nautobot/core/models/utils.py</code> <pre><code>def deconstruct_composite_key(composite_key):\n\"\"\"\n    Convert the given composite-key string back to a list of distinct values.\n    - Percent-encoded characters are converted back to their raw values\n    - Single literal null characters `%00` are converted back to a Python `None`.\n    Inverse operation of `construct_composite_key()`.\n    \"\"\"\nvalues = [unquote_plus(value) for value in composite_key.split(constants.COMPOSITE_KEY_SEPARATOR)]\nvalues = [value if value != \"\\0\" else None for value in values]\nreturn values\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.extras_features","title":"<code>nautobot.apps.models.extras_features(*features)</code>","text":"<p>Decorator used to register extras provided features to a model</p> Source code in <code>nautobot/extras/utils.py</code> <pre><code>def extras_features(*features):\n\"\"\"\n    Decorator used to register extras provided features to a model\n    \"\"\"\ndef wrapper(model_class):\n# Initialize the model_features store if not already defined\nif \"model_features\" not in registry:\nregistry[\"model_features\"] = {f: collections.defaultdict(list) for f in EXTRAS_FEATURES}\nfor feature in features:\nif feature in EXTRAS_FEATURES:\napp_label, model_name = model_class._meta.label_lower.split(\".\")\nregistry[\"model_features\"][feature][app_label].append(model_name)\nelse:\nraise ValueError(f\"{feature} is not a valid extras feature!\")\nreturn model_class\nreturn wrapper\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.find_models_with_matching_fields","title":"<code>nautobot.apps.models.find_models_with_matching_fields(app_models, field_names, field_attributes=None)</code>","text":"<p>Find all models that have fields with the specified names, and return them grouped by app.</p> <p>Parameters:</p> Name Type Description Default <code>app_models</code> <code>list[BaseModel]</code> <p>A list of model classes to search through.</p> required <code>field_names</code> <code>list[str]</code> <p>A list of names of fields that must be present in order for the model to be considered</p> required <code>field_attributes</code> <code>dict</code> <p>Optional dictionary of attributes to filter the fields by.</p> <code>None</code> Return <p>(dict): A dictionary where the keys are app labels and the values are sets of model names.</p> Source code in <code>nautobot/core/models/utils.py</code> <pre><code>def find_models_with_matching_fields(app_models, field_names, field_attributes=None):\n\"\"\"\n    Find all models that have fields with the specified names, and return them grouped by app.\n    Args:\n        app_models (list[BaseModel]): A list of model classes to search through.\n        field_names (list[str]): A list of names of fields that must be present in order for the model to be considered\n        field_attributes (dict): Optional dictionary of attributes to filter the fields by.\n    Return:\n        (dict): A dictionary where the keys are app labels and the values are sets of model names.\n    \"\"\"\nregistry_items = {}\nfield_attributes = field_attributes or {}\nfor model_class in app_models:\napp_label, model_name = model_class._meta.label_lower.split(\".\")\nfor field_name in field_names:\ntry:\nfield = model_class._meta.get_field(field_name)\nif all((getattr(field, item, None) == value for item, value in field_attributes.items())):\nregistry_items.setdefault(app_label, set()).add(model_name)\nexcept FieldDoesNotExist:\npass\nregistry_items = {key: sorted(value) for key, value in registry_items.items()}\nreturn registry_items\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.get_all_concrete_models","title":"<code>nautobot.apps.models.get_all_concrete_models(base_class)</code>","text":"<p>Get a list of all non-abstract models that inherit from the given base_class.</p> Source code in <code>nautobot/core/models/utils.py</code> <pre><code>def get_all_concrete_models(base_class):\n\"\"\"Get a list of all non-abstract models that inherit from the given base_class.\"\"\"\nmodels = []\nfor appconfig in apps.get_app_configs():\nfor model in appconfig.get_models():\nif issubclass(model, base_class) and not model._meta.abstract:\nmodels.append(model)\nreturn sorted(models, key=lambda model: (model._meta.app_label, model._meta.model_name))\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.is_taggable","title":"<code>nautobot.apps.models.is_taggable(obj)</code>","text":"<p>Return True if the instance can have Tags assigned to it; False otherwise.</p> Source code in <code>nautobot/core/models/utils.py</code> <pre><code>def is_taggable(obj):\n\"\"\"\n    Return True if the instance can have Tags assigned to it; False otherwise.\n    \"\"\"\nfrom nautobot.core.models.managers import TagsManager\nreturn hasattr(obj, \"tags\") and isinstance(obj.tags, TagsManager)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.naturalize","title":"<code>nautobot.apps.models.naturalize(value, max_length, integer_places=8)</code>","text":"<p>Take an alphanumeric string and prepend all integers to <code>integer_places</code> places to ensure the strings are ordered naturally. For example:</p> <pre><code>location9router21\nlocation10router4\nlocation10router19\n</code></pre> becomes <p>location00000009router00000021 location00000010router00000004 location00000010router00000019</p> <p>:param value: The value to be naturalized :param max_length: The maximum length of the returned string. Characters beyond this length will be stripped. :param integer_places: The number of places to which each integer will be expanded. (Default: 8)</p> Source code in <code>nautobot/core/models/ordering.py</code> <pre><code>def naturalize(value, max_length, integer_places=8):\n\"\"\"\n    Take an alphanumeric string and prepend all integers to `integer_places` places to ensure the strings\n    are ordered naturally. For example:\n        location9router21\n        location10router4\n        location10router19\n    becomes:\n        location00000009router00000021\n        location00000010router00000004\n        location00000010router00000019\n    :param value: The value to be naturalized\n    :param max_length: The maximum length of the returned string. Characters beyond this length will be stripped.\n    :param integer_places: The number of places to which each integer will be expanded. (Default: 8)\n    \"\"\"\nif not value:\nreturn value\noutput = []\nfor segment in re.split(r\"(\\d+)\", value):\nif segment.isdigit():\noutput.append(segment.rjust(integer_places, \"0\"))\nelif segment:\noutput.append(segment)\nret = \"\".join(output)\nreturn ret[:max_length]\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.naturalize_interface","title":"<code>nautobot.apps.models.naturalize_interface(value, max_length)</code>","text":"<p>Similar in nature to naturalize(), but takes into account a particular naming format adapted from the old InterfaceManager.</p> <p>:param value: The value to be naturalized :param max_length: The maximum length of the returned string. Characters beyond this length will be stripped.</p> Source code in <code>nautobot/core/models/ordering.py</code> <pre><code>def naturalize_interface(value, max_length):\n\"\"\"\n    Similar in nature to naturalize(), but takes into account a particular naming format adapted from the old\n    InterfaceManager.\n    :param value: The value to be naturalized\n    :param max_length: The maximum length of the returned string. Characters beyond this length will be stripped.\n    \"\"\"\noutput = \"\"\nmatch = re.search(INTERFACE_NAME_REGEX, value)\nif match is None:\nreturn value\n# First, we order by slot/position, padding each to four digits. If a field is not present,\n# set it to 9999 to ensure it is ordered last.\nfor part_name in (\"slot\", \"subslot\", \"position\", \"subposition\"):\npart = match.group(part_name)\nif part is not None:\noutput += part.rjust(4, \"0\")\nelse:\noutput += \"9999\"\n# Append the type, if any.\nif match.group(\"type\") is not None:\noutput += match.group(\"type\")\n# Append any remaining fields, left-padding to six digits each.\nfor part_name in (\"id\", \"channel\", \"vc\"):\npart = match.group(part_name)\nif part is not None:\noutput += part.rjust(6, \"0\")\nelse:\noutput += \"......\"\n# Finally, naturalize any remaining text and append it\nif match.group(\"remainder\") is not None and len(output) &lt; max_length:\nremainder = naturalize(match.group(\"remainder\"), max_length - len(output))\noutput += remainder\nreturn output[:max_length]\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.pretty_print_query","title":"<code>nautobot.apps.models.pretty_print_query(query)</code>","text":"<p>Given a <code>Q</code> object, display it in a more human-readable format.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Q</code> <p>Query to display.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Pretty-printed query logic</p> Example <p>print(pretty_print_query(Q)) (   location__name='Campus-01' OR location__name='Campus-02' OR (     location__name='Room-01' AND status__name='Active'   ) OR (     location__name='Building-01' AND (       NOT (location__name='Building-01' AND status__name='Decommissioning')     )   ) )</p> Source code in <code>nautobot/core/models/utils.py</code> <pre><code>def pretty_print_query(query):\n\"\"\"\n    Given a `Q` object, display it in a more human-readable format.\n    Args:\n        query (Q): Query to display.\n    Returns:\n        (str): Pretty-printed query logic\n    Example:\n        &gt;&gt;&gt; print(pretty_print_query(Q))\n        (\n          location__name='Campus-01' OR location__name='Campus-02' OR (\n            location__name='Room-01' AND status__name='Active'\n          ) OR (\n            location__name='Building-01' AND (\n              NOT (location__name='Building-01' AND status__name='Decommissioning')\n            )\n          )\n        )\n    \"\"\"\ndef pretty_str(self, node=None, depth=0):\n\"\"\"Improvement to default `Node.__str__` with a more human-readable style.\"\"\"\ntemplate = f\"(\\n{'  ' * (depth + 1)}\"\nif self.negated:\ntemplate += \"NOT (%s)\"\nelse:\ntemplate += \"%s\"\ntemplate += f\"\\n{'  ' * depth})\"\nchildren = []\n# If we don't have a node, we are the node!\nif node is None:\nnode = self\n# Iterate over children. They will be either a Q object (a Node subclass) or a 2-tuple.\nfor child in node.children:\n# Trust that we can stringify the child if it is a Node instance.\nif isinstance(child, Node):\nchildren.append(pretty_str(child, depth=depth + 1))\n# If a 2-tuple, stringify to key=value\nelse:\nkey, value = child\nchildren.append(f\"{key}={value!r}\")\nreturn template % (f\" {self.connector} \".join(children))\n# Use pretty_str() as the string generator vs. just stringify the `Q` object.\nreturn pretty_str(query)\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.serialize_object","title":"<code>nautobot.apps.models.serialize_object(obj, extra=None, exclude=None)</code>","text":"<p>Return a generic JSON representation of an object using Django's built-in serializer. (This is used for things like change logging, not the REST API.) Optionally include a dictionary to supplement the object data. A list of keys can be provided to exclude them from the returned dictionary. Private fields (prefaced with an underscore) are implicitly excluded.</p> Source code in <code>nautobot/core/models/utils.py</code> <pre><code>def serialize_object(obj, extra=None, exclude=None):\n\"\"\"\n    Return a generic JSON representation of an object using Django's built-in serializer. (This is used for things like\n    change logging, not the REST API.) Optionally include a dictionary to supplement the object data. A list of keys\n    can be provided to exclude them from the returned dictionary. Private fields (prefaced with an underscore) are\n    implicitly excluded.\n    \"\"\"\njson_str = serialize(\"json\", [obj])\ndata = json.loads(json_str)[0][\"fields\"]\n# Include custom_field_data as \"custom_fields\"\nif hasattr(obj, \"_custom_field_data\"):\ndata[\"custom_fields\"] = data.pop(\"_custom_field_data\")\n# Include any tags. Check for tags cached on the instance; fall back to using the manager.\nif is_taggable(obj):\ntags = getattr(obj, \"_tags\", []) or obj.tags.all()\ndata[\"tags\"] = [tag.name for tag in tags]\n# Append any extra data\nif extra is not None:\ndata.update(extra)\n# Copy keys to list to avoid 'dictionary changed size during iteration' exception\nfor key in list(data):\n# Private fields shouldn't be logged in the object change\nif isinstance(key, str) and key.startswith(\"_\"):\ndata.pop(key)\n# Explicitly excluded keys\nif isinstance(exclude, (list, tuple)) and key in exclude:\ndata.pop(key)\nreturn data\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.serialize_object_v2","title":"<code>nautobot.apps.models.serialize_object_v2(obj)</code>","text":"<p>Return a JSON serialized representation of an object using obj's serializer.</p> Source code in <code>nautobot/core/models/utils.py</code> <pre><code>def serialize_object_v2(obj):\n\"\"\"\n    Return a JSON serialized representation of an object using obj's serializer.\n    \"\"\"\nfrom nautobot.core.api.exceptions import SerializerNotFound\nfrom nautobot.core.api.utils import get_serializer_for_model\n# Try serializing obj(model instance) using its API Serializer\ntry:\nserializer_class = get_serializer_for_model(obj.__class__)\ndata = serializer_class(obj, context={\"request\": None, \"depth\": 1}).data\nexcept SerializerNotFound:\n# Fall back to generic JSON representation of obj\ndata = serialize_object(obj)\nreturn data\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.slugify_dashes_to_underscores","title":"<code>nautobot.apps.models.slugify_dashes_to_underscores(content)</code>","text":"<p>Custom slugify_function - use underscores instead of dashes; resulting slug can be used as a variable name, as well as a graphql safe string. Note: If content starts with a non graphql-safe character, e.g. a digit This method will prepend an \"a\" to content to make it graphql-safe e.g:     123 main st -&gt; a123_main_st</p> Source code in <code>nautobot/core/models/fields.py</code> <pre><code>def slugify_dashes_to_underscores(content):\n\"\"\"\n    Custom slugify_function - use underscores instead of dashes; resulting slug can be used as a variable name,\n    as well as a graphql safe string.\n    Note: If content starts with a non graphql-safe character, e.g. a digit\n    This method will prepend an \"a\" to content to make it graphql-safe\n    e.g:\n        123 main st -&gt; a123_main_st\n    \"\"\"\ngraphql_safe_pattern = re.compile(\"[_A-Za-z]\")\n# If the first letter of the slug is not GraphQL safe.\n# We append \"a\" to it.\nif graphql_safe_pattern.fullmatch(content[0]) is None:\ncontent = \"a\" + content\nreturn slugify(content).replace(\"-\", \"_\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/models.html#nautobot.apps.models.slugify_dots_to_dashes","title":"<code>nautobot.apps.models.slugify_dots_to_dashes(content)</code>","text":"<p>Custom slugify_function - convert '.' to '-' instead of removing dots outright.</p> Source code in <code>nautobot/core/models/fields.py</code> <pre><code>def slugify_dots_to_dashes(content):\n\"\"\"Custom slugify_function - convert '.' to '-' instead of removing dots outright.\"\"\"\nreturn slugify(content.replace(\".\", \"-\"))\n</code></pre>"},{"location":"code-reference/nautobot/apps/querysets.html","title":"nautobot.apps.querysets","text":""},{"location":"code-reference/nautobot/apps/querysets.html#nautobot.apps.querysets","title":"<code>nautobot.apps.querysets</code>","text":"<p>Nautobot QuerySet classes and utilities.</p>"},{"location":"code-reference/nautobot/apps/querysets.html#nautobot.apps.querysets.ConfigContextModelQuerySet","title":"<code>nautobot.apps.querysets.ConfigContextModelQuerySet</code>","text":"<p>             Bases: <code>RestrictedQuerySet</code></p> <p>QuerySet manager used by models which support ConfigContext (device and virtual machine).</p> <p>Includes a method which appends an annotation of aggregated config context JSON data objects. This is implemented as a subquery which performs all the joins necessary to filter relevant config context objects. This offers a substantial performance gain over ConfigContextQuerySet.get_for_object() when dealing with multiple objects.</p> <p>This allows the annotation to be entirely optional.</p> Source code in <code>nautobot/extras/querysets.py</code> <pre><code>class ConfigContextModelQuerySet(RestrictedQuerySet):\n\"\"\"\n    QuerySet manager used by models which support ConfigContext (device and virtual machine).\n    Includes a method which appends an annotation of aggregated config context JSON data objects. This is\n    implemented as a subquery which performs all the joins necessary to filter relevant config context objects.\n    This offers a substantial performance gain over ConfigContextQuerySet.get_for_object() when dealing with\n    multiple objects.\n    This allows the annotation to be entirely optional.\n    \"\"\"\ndef annotate_config_context_data(self):\n\"\"\"\n        Attach the subquery annotation to the base queryset.\n        Order By clause in Subquery is not guaranteed to be respected within the aggregated JSON array, which is why\n        we include \"weight\" and \"name\" into the result so that we can sort it within Python to ensure correctness.\n        TODO This method does not accurately reflect location inheritance because of the reasons stated in _get_config_context_filters()\n        Do not use this method by itself, use get_config_context() method directly on ConfigContextModel instead.\n        \"\"\"\nfrom nautobot.extras.models import ConfigContext\nreturn self.annotate(\nconfig_context_data=Subquery(\nConfigContext.objects.filter(self._get_config_context_filters())\n.order_by(\"weight\", \"name\")\n.annotate(\n_data=EmptyGroupByJSONBAgg(\nJSONObject(\ndata=F(\"data\"),\nname=F(\"name\"),\nweight=F(\"weight\"),\n)\n)\n)\n.values(\"_data\")\n)\n).distinct()\ndef _get_config_context_filters(self):\n\"\"\"\n        This method is constructing the set of Q objects for the specific object types.\n        Note that locations filters are not included in the method because the filter needs the\n        ability to query the ancestors for a particular tree node for subquery and we lost it since\n        moving from mptt to django-tree-queries https://github.com/matthiask/django-tree-queries/issues/54.\n        \"\"\"\ntag_query_filters = {\n\"object_id\": OuterRef(OuterRef(\"pk\")),\n\"content_type__app_label\": self.model._meta.app_label,\n\"content_type__model\": self.model._meta.model_name,\n}\nbase_query = Q(\nQ(platforms=OuterRef(\"platform\")) | Q(platforms=None),\nQ(cluster_groups=OuterRef(\"cluster__cluster_group\")) | Q(cluster_groups=None),\nQ(clusters=OuterRef(\"cluster\")) | Q(clusters=None),\nQ(tenant_groups=OuterRef(\"tenant__tenant_group\")) | Q(tenant_groups=None),\nQ(tenants=OuterRef(\"tenant\")) | Q(tenants=None),\nQ(tags__pk__in=Subquery(TaggedItem.objects.filter(**tag_query_filters).values_list(\"tag_id\", flat=True)))\n| Q(tags=None),\nis_active=True,\n)\nbase_query.add((Q(roles=OuterRef(\"role\")) | Q(roles=None)), Q.AND)\nif self.model._meta.model_name == \"device\":\nbase_query.add((Q(device_types=OuterRef(\"device_type\")) | Q(device_types=None)), Q.AND)\nbase_query.add(\n(Q(device_redundancy_groups=OuterRef(\"device_redundancy_group\")) | Q(device_redundancy_groups=None)),\nQ.AND,\n)\n# This is necessary to prevent location related config context to be applied now.\n# The location hierarchy cannot be processed by the database and must be added by `ConfigContextModel.get_config_context`\nbase_query.add((Q(locations=None)), Q.AND)\nelif self.model._meta.model_name == \"virtualmachine\":\n# This is necessary to prevent location related config context to be applied now.\n# The location hierarchy cannot be processed by the database and must be added by `ConfigContextModel.get_config_context`\nbase_query.add((Q(locations=None)), Q.AND)\nreturn base_query\n</code></pre>"},{"location":"code-reference/nautobot/apps/querysets.html#nautobot.extras.querysets.ConfigContextModelQuerySet.annotate_config_context_data","title":"<code>annotate_config_context_data()</code>","text":"<p>Attach the subquery annotation to the base queryset.</p> <p>Order By clause in Subquery is not guaranteed to be respected within the aggregated JSON array, which is why we include \"weight\" and \"name\" into the result so that we can sort it within Python to ensure correctness.</p> <p>TODO This method does not accurately reflect location inheritance because of the reasons stated in _get_config_context_filters() Do not use this method by itself, use get_config_context() method directly on ConfigContextModel instead.</p> Source code in <code>nautobot/extras/querysets.py</code> <pre><code>def annotate_config_context_data(self):\n\"\"\"\n    Attach the subquery annotation to the base queryset.\n    Order By clause in Subquery is not guaranteed to be respected within the aggregated JSON array, which is why\n    we include \"weight\" and \"name\" into the result so that we can sort it within Python to ensure correctness.\n    TODO This method does not accurately reflect location inheritance because of the reasons stated in _get_config_context_filters()\n    Do not use this method by itself, use get_config_context() method directly on ConfigContextModel instead.\n    \"\"\"\nfrom nautobot.extras.models import ConfigContext\nreturn self.annotate(\nconfig_context_data=Subquery(\nConfigContext.objects.filter(self._get_config_context_filters())\n.order_by(\"weight\", \"name\")\n.annotate(\n_data=EmptyGroupByJSONBAgg(\nJSONObject(\ndata=F(\"data\"),\nname=F(\"name\"),\nweight=F(\"weight\"),\n)\n)\n)\n.values(\"_data\")\n)\n).distinct()\n</code></pre>"},{"location":"code-reference/nautobot/apps/secrets.html","title":"nautobot.apps.secrets","text":""},{"location":"code-reference/nautobot/apps/secrets.html#nautobot.apps.secrets","title":"<code>nautobot.apps.secrets</code>","text":"<p>Integrations with Nautobot's secrets feature.</p>"},{"location":"code-reference/nautobot/apps/secrets.html#nautobot.apps.secrets.SecretsProvider","title":"<code>nautobot.apps.secrets.SecretsProvider</code>","text":"<p>             Bases: <code>ABC</code></p> <p>Abstract base class for concrete providers of secret retrieval features.</p> Source code in <code>nautobot/extras/secrets/__init__.py</code> <pre><code>class SecretsProvider(ABC):\n\"\"\"Abstract base class for concrete providers of secret retrieval features.\"\"\"\ndef __repr__(self):\nreturn f\"&lt;{self.name}&gt;\"\n@property\n@abstractmethod\ndef slug(self):\n\"\"\"String uniquely identifying this class; will be used as a key to look up the class owning a given Secret.\"\"\"\n@property\ndef name(self):\n\"\"\"Human-friendly name for this class, falling back to the slug if not overridden.\"\"\"\nreturn self.slug\n@property\n@abstractmethod\ndef ParametersForm(self):\n\"\"\"Django Form class with inputs for describing the parameter(s) required for a Secret to use this Provider.\n        The clean() method may be implemented to provide additional input validation.\n        \"\"\"\n@classmethod\n@abstractmethod\ndef get_value_for_secret(cls, secret, obj=None, **kwargs):\n\"\"\"Retrieve the stored value described by the given Secret record.\n        May raise a SecretError or one of its subclasses if an error occurs.\n        Args:\n            secret (nautobot.extras.models.Secret): DB entry describing the secret or family of secrets in question.\n            obj (object): Django model instance or similar providing additional context for retrieving the secret.\n        \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/secrets.html#nautobot.extras.secrets.SecretsProvider.ParametersForm","title":"<code>ParametersForm</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Django Form class with inputs for describing the parameter(s) required for a Secret to use this Provider.</p> <p>The clean() method may be implemented to provide additional input validation.</p>"},{"location":"code-reference/nautobot/apps/secrets.html#nautobot.extras.secrets.SecretsProvider.name","title":"<code>name</code>  <code>property</code>","text":"<p>Human-friendly name for this class, falling back to the slug if not overridden.</p>"},{"location":"code-reference/nautobot/apps/secrets.html#nautobot.extras.secrets.SecretsProvider.slug","title":"<code>slug</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>String uniquely identifying this class; will be used as a key to look up the class owning a given Secret.</p>"},{"location":"code-reference/nautobot/apps/secrets.html#nautobot.extras.secrets.SecretsProvider.get_value_for_secret","title":"<code>get_value_for_secret(secret, obj=None, **kwargs)</code>  <code>abstractmethod</code> <code>classmethod</code>","text":"<p>Retrieve the stored value described by the given Secret record.</p> <p>May raise a SecretError or one of its subclasses if an error occurs.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>nautobot.extras.models.Secret</code> <p>DB entry describing the secret or family of secrets in question.</p> required <code>obj</code> <code>object</code> <p>Django model instance or similar providing additional context for retrieving the secret.</p> <code>None</code> Source code in <code>nautobot/extras/secrets/__init__.py</code> <pre><code>@classmethod\n@abstractmethod\ndef get_value_for_secret(cls, secret, obj=None, **kwargs):\n\"\"\"Retrieve the stored value described by the given Secret record.\n    May raise a SecretError or one of its subclasses if an error occurs.\n    Args:\n        secret (nautobot.extras.models.Secret): DB entry describing the secret or family of secrets in question.\n        obj (object): Django model instance or similar providing additional context for retrieving the secret.\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/tables.html","title":"nautobot.apps.tables","text":""},{"location":"code-reference/nautobot/apps/tables.html#nautobot.apps.tables","title":"<code>nautobot.apps.tables</code>","text":"<p>Utilities for apps to implement data tables.</p>"},{"location":"code-reference/nautobot/apps/tables.html#nautobot.apps.tables.BaseTable","title":"<code>nautobot.apps.tables.BaseTable</code>","text":"<p>             Bases: <code>django_tables2.Table</code></p> <p>Default table for object lists</p> <p>:param user: Personalize table display for the given user (optional). Has no effect if AnonymousUser is passed.</p> Source code in <code>nautobot/core/tables.py</code> <pre><code>class BaseTable(django_tables2.Table):\n\"\"\"\n    Default table for object lists\n    :param user: Personalize table display for the given user (optional). Has no effect if AnonymousUser is passed.\n    \"\"\"\nclass Meta:\nattrs = {\n\"class\": \"table table-hover table-headings\",\n}\ndef __init__(self, *args, user=None, **kwargs):\n# Add custom field columns\nobj_type = ContentType.objects.get_for_model(self._meta.model)\nfor cf in models.CustomField.objects.filter(content_types=obj_type):\nname = cf.add_prefix_to_cf_key()\nself.base_columns[name] = CustomFieldColumn(cf)\nfor cpf in models.ComputedField.objects.filter(content_type=obj_type):\nself.base_columns[f\"cpf_{cpf.key}\"] = ComputedFieldColumn(cpf)\nfor relationship in models.Relationship.objects.filter(source_type=obj_type):\nif not relationship.symmetric:\nself.base_columns[f\"cr_{relationship.key}_src\"] = RelationshipColumn(\nrelationship, side=choices.RelationshipSideChoices.SIDE_SOURCE\n)\nelse:\nself.base_columns[f\"cr_{relationship.key}_peer\"] = RelationshipColumn(\nrelationship, side=choices.RelationshipSideChoices.SIDE_PEER\n)\nfor relationship in models.Relationship.objects.filter(destination_type=obj_type):\nif not relationship.symmetric:\nself.base_columns[f\"cr_{relationship.key}_dst\"] = RelationshipColumn(\nrelationship, side=choices.RelationshipSideChoices.SIDE_DESTINATION\n)\n# symmetric relationships are already handled above in the source_type case\nmodel = getattr(self.Meta, \"model\", None)\n# Disable ordering on these TreeNode Models Table because TreeNode do not support sorting\nif model and issubclass(model, TreeNode):\nkwargs[\"orderable\"] = False\n# Init table\nsuper().__init__(*args, **kwargs)\n# Set default empty_text if none was provided\nif self.empty_text is None:\nself.empty_text = f\"No {self._meta.model._meta.verbose_name_plural} found\"\n# Hide non-default columns\ndefault_columns = list(getattr(self.Meta, \"default_columns\", []))\nextra_columns = [c[0] for c in kwargs.get(\"extra_columns\", [])]  # extra_columns is a list of tuples\nif default_columns:\nfor column in self.columns:\nif column.name not in default_columns and column.name not in extra_columns:\n# Hide the column if it is non-default *and* not manually specified as an extra column\nself.columns.hide(column.name)\n# Apply custom column ordering for user\nif user is not None and not isinstance(user, AnonymousUser):\ncolumns = user.get_config(f\"tables.{self.__class__.__name__}.columns\")\nif columns:\npk = self.base_columns.pop(\"pk\", None)\nactions = self.base_columns.pop(\"actions\", None)\nfor name, column in self.base_columns.items():\nif name in columns:\nself.columns.show(name)\nelse:\nself.columns.hide(name)\nself.sequence = [c for c in columns if c in self.base_columns]\n# Always include PK and actions column, if defined on the table\nif pk:\nself.base_columns[\"pk\"] = pk\nself.sequence.insert(0, \"pk\")\nif actions:\nself.base_columns[\"actions\"] = actions\nself.sequence.append(\"actions\")\n# Dynamically update the table's QuerySet to ensure related fields are pre-fetched\nif isinstance(self.data, TableQuerysetData):\n# v2 TODO(jathan): Replace prefetch_related with select_related\nprefetch_fields = []\nfor column in self.columns:\nif column.visible:\nmodel = getattr(self.Meta, \"model\")\naccessor = column.accessor\nprefetch_path = []\nfor field_name in accessor.split(accessor.SEPARATOR):\ntry:\nfield = model._meta.get_field(field_name)\nexcept FieldDoesNotExist:\nbreak\nif isinstance(field, RelatedField):\n# Follow ForeignKeys to the related model\nprefetch_path.append(field_name)\nmodel = field.remote_field.model\nelif isinstance(field, GenericForeignKey):\n# Can't prefetch beyond a GenericForeignKey\nprefetch_path.append(field_name)\nbreak\nif prefetch_path:\nprefetch_fields.append(\"__\".join(prefetch_path))\nself.data.data = self.data.data.prefetch_related(None).prefetch_related(*prefetch_fields)\n@property\ndef configurable_columns(self):\nselected_columns = [\n(name, self.columns[name].verbose_name) for name in self.sequence if name not in [\"pk\", \"actions\"]\n]\navailable_columns = [\n(name, column.verbose_name)\nfor name, column in self.columns.items()\nif name not in self.sequence and name not in [\"pk\", \"actions\"]\n]\nreturn selected_columns + available_columns\n@property\ndef visible_columns(self):\nreturn [name for name in self.sequence if self.columns[name].visible]\n</code></pre>"},{"location":"code-reference/nautobot/apps/tables.html#nautobot.apps.tables.BooleanColumn","title":"<code>nautobot.apps.tables.BooleanColumn</code>","text":"<p>             Bases: <code>django_tables2.Column</code></p> <p>Custom implementation of BooleanColumn to render a nicely-formatted checkmark or X icon instead of a Unicode character.</p> Source code in <code>nautobot/core/tables.py</code> <pre><code>class BooleanColumn(django_tables2.Column):\n\"\"\"\n    Custom implementation of BooleanColumn to render a nicely-formatted checkmark or X icon instead of a Unicode\n    character.\n    \"\"\"\ndef render(self, value):\nreturn helpers.render_boolean(value)\n</code></pre>"},{"location":"code-reference/nautobot/apps/tables.html#nautobot.apps.tables.ButtonsColumn","title":"<code>nautobot.apps.tables.ButtonsColumn</code>","text":"<p>             Bases: <code>django_tables2.TemplateColumn</code></p> <p>Render edit, delete, and changelog buttons for an object.</p> <p>:param model: Model class to use for calculating URL view names :param prepend_template: Additional template content to render in the column (optional) :param return_url_extra: String to append to the return URL (e.g. for specifying a tab) (optional)</p> Source code in <code>nautobot/core/tables.py</code> <pre><code>class ButtonsColumn(django_tables2.TemplateColumn):\n\"\"\"\n    Render edit, delete, and changelog buttons for an object.\n    :param model: Model class to use for calculating URL view names\n    :param prepend_template: Additional template content to render in the column (optional)\n    :param return_url_extra: String to append to the return URL (e.g. for specifying a tab) (optional)\n    \"\"\"\nbuttons = (\"changelog\", \"edit\", \"delete\")\nattrs = {\"td\": {\"class\": \"text-right text-nowrap noprint\"}}\n# Note that braces are escaped to allow for string formatting prior to template rendering\ntemplate_code = \"\"\"\n    {{% if \"changelog\" in buttons %}}\n        &lt;a href=\"{{% url '{changelog_route}' {pk_field}=record.{pk_field} %}}\" class=\"btn btn-default btn-xs\" title=\"Change log\"&gt;\n            &lt;i class=\"mdi mdi-history\"&gt;&lt;/i&gt;\n        &lt;/a&gt;\n    {{% endif %}}\n    {{% if \"edit\" in buttons and perms.{app_label}.change_{model_name} %}}\n        &lt;a href=\"{{% url '{edit_route}' {pk_field}=record.{pk_field} %}}?return_url={{{{ request.path }}}}{{{{ return_url_extra }}}}\" class=\"btn btn-xs btn-warning\" title=\"Edit\"&gt;\n            &lt;i class=\"mdi mdi-pencil\"&gt;&lt;/i&gt;\n        &lt;/a&gt;\n    {{% endif %}}\n    {{% if \"delete\" in buttons and perms.{app_label}.delete_{model_name} %}}\n        &lt;a href=\"{{% url '{delete_route}' {pk_field}=record.{pk_field} %}}?return_url={{{{ request.path }}}}{{{{ return_url_extra }}}}\" class=\"btn btn-xs btn-danger\" title=\"Delete\"&gt;\n            &lt;i class=\"mdi mdi-trash-can-outline\"&gt;&lt;/i&gt;\n        &lt;/a&gt;\n    {{% endif %}}\n    \"\"\"\ndef __init__(\nself,\nmodel,\n*args,\npk_field=\"pk\",\nbuttons=None,\nprepend_template=None,\nreturn_url_extra=\"\",\n**kwargs,\n):\nif prepend_template:\nprepend_template = prepend_template.replace(\"{\", \"{{\")\nprepend_template = prepend_template.replace(\"}\", \"}}\")\nself.template_code = prepend_template + self.template_code\napp_label = model._meta.app_label\nchangelog_route = lookup.get_route_for_model(model, \"changelog\")\nedit_route = lookup.get_route_for_model(model, \"edit\")\ndelete_route = lookup.get_route_for_model(model, \"delete\")\ntemplate_code = self.template_code.format(\napp_label=app_label,\nmodel_name=model._meta.model_name,\nchangelog_route=changelog_route,\nedit_route=edit_route,\ndelete_route=delete_route,\npk_field=pk_field,\nbuttons=buttons,\n)\nsuper().__init__(template_code=template_code, *args, **kwargs)\nself.extra_context.update(\n{\n\"buttons\": buttons or self.buttons,\n\"return_url_extra\": return_url_extra,\n}\n)\ndef header(self):  # pylint: disable=invalid-overridden-method\nreturn \"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/tables.html#nautobot.apps.tables.ChoiceFieldColumn","title":"<code>nautobot.apps.tables.ChoiceFieldColumn</code>","text":"<p>             Bases: <code>django_tables2.Column</code></p> <p>Render a ChoiceField value inside a  indicating a particular CSS class. This is useful for displaying colored choices. The CSS class is derived by calling .get_FOO_class() on the row record. Source code in <code>nautobot/core/tables.py</code> <pre><code>class ChoiceFieldColumn(django_tables2.Column):\n\"\"\"\n    Render a ChoiceField value inside a &lt;span&gt; indicating a particular CSS class. This is useful for displaying colored\n    choices. The CSS class is derived by calling .get_FOO_class() on the row record.\n    \"\"\"\ndef render(self, record, bound_column, value):  # pylint: disable=arguments-differ\nif value:\nname = bound_column.name\ncss_class = getattr(record, f\"get_{name}_class\")()\nlabel = getattr(record, f\"get_{name}_display\")()\nreturn format_html('&lt;span class=\"label label-{}\"&gt;{}&lt;/span&gt;', css_class, label)\nreturn self.default\n</code></pre>"},{"location":"code-reference/nautobot/apps/tables.html#nautobot.apps.tables.ColorColumn","title":"<code>nautobot.apps.tables.ColorColumn</code>","text":"<p>             Bases: <code>django_tables2.Column</code></p> <p>Display a color (#RRGGBB).</p> Source code in <code>nautobot/core/tables.py</code> <pre><code>class ColorColumn(django_tables2.Column):\n\"\"\"\n    Display a color (#RRGGBB).\n    \"\"\"\ndef render(self, value):\nreturn format_html('&lt;span class=\"label color-block\" style=\"background-color: #{}\"&gt;&amp;nbsp;&lt;/span&gt;', value)\n</code></pre>"},{"location":"code-reference/nautobot/apps/tables.html#nautobot.apps.tables.ColoredLabelColumn","title":"<code>nautobot.apps.tables.ColoredLabelColumn</code>","text":"<p>             Bases: <code>django_tables2.TemplateColumn</code></p> <p>Render a colored label (e.g. for DeviceRoles).</p> Source code in <code>nautobot/core/tables.py</code> <pre><code>class ColoredLabelColumn(django_tables2.TemplateColumn):\n\"\"\"\n    Render a colored label (e.g. for DeviceRoles).\n    \"\"\"\ntemplate_code = \"\"\"\n    {% load helpers %}\n    {% if value %}&lt;label class=\"label\" style=\"color: {{ value.color|fgcolor }}; background-color: #{{ value.color }}\"&gt;{{ value }}&lt;/label&gt;{% else %}&amp;mdash;{% endif %}\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(template_code=self.template_code, *args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/tables.html#nautobot.apps.tables.ComputedFieldColumn","title":"<code>nautobot.apps.tables.ComputedFieldColumn</code>","text":"<p>             Bases: <code>django_tables2.Column</code></p> <p>Display computed fields in the appropriate format.</p> Source code in <code>nautobot/core/tables.py</code> <pre><code>class ComputedFieldColumn(django_tables2.Column):\n\"\"\"\n    Display computed fields in the appropriate format.\n    \"\"\"\ndef __init__(self, computedfield, *args, **kwargs):\nself.computedfield = computedfield\nkwargs[\"verbose_name\"] = computedfield.label\nkwargs[\"empty_values\"] = []\nkwargs[\"orderable\"] = False\nsuper().__init__(*args, **kwargs)\ndef render(self, record):\nreturn self.computedfield.render({\"obj\": record})\n</code></pre>"},{"location":"code-reference/nautobot/apps/tables.html#nautobot.apps.tables.ContentTypesColumn","title":"<code>nautobot.apps.tables.ContentTypesColumn</code>","text":"<p>             Bases: <code>django_tables2.ManyToManyColumn</code></p> <p>Display a list of <code>content_types</code> m2m assigned to an object.</p> <p>Default sorting of content-types is by pk. This sorting comes at a per-row performance hit to querysets for table views. If this becomes an issue, set <code>sort_items=False</code>.</p> <p>:param sort_items: Whether to sort by <code>(app_label, name)</code>. (default: True) :param truncate_words:     Number of words at which to truncate, or <code>None</code> to disable. (default: None)</p> Source code in <code>nautobot/core/tables.py</code> <pre><code>class ContentTypesColumn(django_tables2.ManyToManyColumn):\n\"\"\"\n    Display a list of `content_types` m2m assigned to an object.\n    Default sorting of content-types is by pk. This sorting comes at a per-row\n    performance hit to querysets for table views. If this becomes an issue,\n    set `sort_items=False`.\n    :param sort_items: Whether to sort by `(app_label, name)`. (default: True)\n    :param truncate_words:\n        Number of words at which to truncate, or `None` to disable. (default: None)\n    \"\"\"\ndef __init__(self, sort_items=True, truncate_words=None, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.sort_items = sort_items\nself.truncate_words = truncate_words\ndef filter(self, qs):\n\"\"\"Overload filter to optionally sort items.\"\"\"\nif self.sort_items:\nqs = qs.order_by(\"app_label\", \"model\")\nreturn qs.all()\ndef render(self, value):\n\"\"\"Overload render to optionally truncate words.\"\"\"\nvalue = super().render(value)\nif self.truncate_words is not None:\ntrunc = Truncator(value)\nvalue = trunc.words(self.truncate_words)\nreturn value\n</code></pre>"},{"location":"code-reference/nautobot/apps/tables.html#nautobot.core.tables.ContentTypesColumn.filter","title":"<code>filter(qs)</code>","text":"<p>Overload filter to optionally sort items.</p> Source code in <code>nautobot/core/tables.py</code> <pre><code>def filter(self, qs):\n\"\"\"Overload filter to optionally sort items.\"\"\"\nif self.sort_items:\nqs = qs.order_by(\"app_label\", \"model\")\nreturn qs.all()\n</code></pre>"},{"location":"code-reference/nautobot/apps/tables.html#nautobot.core.tables.ContentTypesColumn.render","title":"<code>render(value)</code>","text":"<p>Overload render to optionally truncate words.</p> Source code in <code>nautobot/core/tables.py</code> <pre><code>def render(self, value):\n\"\"\"Overload render to optionally truncate words.\"\"\"\nvalue = super().render(value)\nif self.truncate_words is not None:\ntrunc = Truncator(value)\nvalue = trunc.words(self.truncate_words)\nreturn value\n</code></pre>"},{"location":"code-reference/nautobot/apps/tables.html#nautobot.apps.tables.CustomFieldColumn","title":"<code>nautobot.apps.tables.CustomFieldColumn</code>","text":"<p>             Bases: <code>django_tables2.Column</code></p> <p>Display custom fields in the appropriate format.</p> Source code in <code>nautobot/core/tables.py</code> <pre><code>class CustomFieldColumn(django_tables2.Column):\n\"\"\"\n    Display custom fields in the appropriate format.\n    \"\"\"\n# Add [] to empty_values so when there is no choice populated for multiselect_cf i.e. [], \"\u2014\" is returned automatically.\nempty_values = (None, \"\", [])\ndef __init__(self, customfield, *args, **kwargs):\nself.customfield = customfield\nkwargs[\"accessor\"] = Accessor(f\"_custom_field_data__{customfield.key}\")\nkwargs[\"verbose_name\"] = customfield.label\nsuper().__init__(*args, **kwargs)\ndef render(self, record, bound_column, value):  # pylint: disable=arguments-differ\nif self.customfield.type == choices.CustomFieldTypeChoices.TYPE_BOOLEAN:\ntemplate = helpers.render_boolean(value)\nelif self.customfield.type == choices.CustomFieldTypeChoices.TYPE_MULTISELECT:\ntemplate = format_html_join(\" \", '&lt;span class=\"label label-default\"&gt;{}&lt;/span&gt;', ((v,) for v in value))\nelif self.customfield.type == choices.CustomFieldTypeChoices.TYPE_SELECT:\ntemplate = format_html('&lt;span class=\"label label-default\"&gt;{}&lt;/span&gt;', value)\nelif self.customfield.type == choices.CustomFieldTypeChoices.TYPE_URL:\ntemplate = format_html('&lt;a href=\"{}\"&gt;{}&lt;/a&gt;', value, value)\nelse:\ntemplate = escape(value)\nreturn template\n</code></pre>"},{"location":"code-reference/nautobot/apps/tables.html#nautobot.apps.tables.LinkedCountColumn","title":"<code>nautobot.apps.tables.LinkedCountColumn</code>","text":"<p>             Bases: <code>django_tables2.Column</code></p> <p>Render a count of related objects linked to a filtered URL.</p> <p>:param viewname: The view name to use for URL resolution :param view_kwargs: Additional kwargs to pass for URL resolution (optional) :param url_params: A dict of query parameters to append to the URL (e.g. ?foo=bar) (optional)</p> Source code in <code>nautobot/core/tables.py</code> <pre><code>class LinkedCountColumn(django_tables2.Column):\n\"\"\"\n    Render a count of related objects linked to a filtered URL.\n    :param viewname: The view name to use for URL resolution\n    :param view_kwargs: Additional kwargs to pass for URL resolution (optional)\n    :param url_params: A dict of query parameters to append to the URL (e.g. ?foo=bar) (optional)\n    \"\"\"\ndef __init__(self, viewname, *args, view_kwargs=None, url_params=None, default=0, **kwargs):\nself.viewname = viewname\nself.view_kwargs = view_kwargs or {}\nself.url_params = url_params\nsuper().__init__(*args, default=default, **kwargs)\ndef render(self, record, value):  # pylint: disable=arguments-differ\nif value:\nurl = reverse(self.viewname, kwargs=self.view_kwargs)\nif self.url_params:\nurl += \"?\" + \"&amp;\".join([f\"{k}={getattr(record, v)}\" for k, v in self.url_params.items()])\nreturn format_html('&lt;a href=\"{}\"&gt;{}&lt;/a&gt;', url, value)\nreturn value\n</code></pre>"},{"location":"code-reference/nautobot/apps/tables.html#nautobot.apps.tables.RelationshipColumn","title":"<code>nautobot.apps.tables.RelationshipColumn</code>","text":"<p>             Bases: <code>django_tables2.Column</code></p> <p>Display relationship association instances in the appropriate format.</p> Source code in <code>nautobot/core/tables.py</code> <pre><code>class RelationshipColumn(django_tables2.Column):\n\"\"\"\n    Display relationship association instances in the appropriate format.\n    \"\"\"\n# Add [] to empty_values so when there is no relationship associations i.e. [], \"\u2014\" is returned automatically.\nempty_values = (None, \"\", [])\ndef __init__(self, relationship, side, *args, **kwargs):\nself.relationship = relationship\nself.side = side\nself.peer_side = choices.RelationshipSideChoices.OPPOSITE[side]\nkwargs.setdefault(\"verbose_name\", relationship.get_label(side))\nkwargs.setdefault(\"accessor\", Accessor(\"associations\"))\nsuper().__init__(orderable=False, *args, **kwargs)\ndef render(self, record, value):  # pylint: disable=arguments-differ\n# Filter the relationship associations by the relationship instance.\n# Since associations accessor returns all the relationship associations regardless of the relationship.\nvalue = [v for v in value if v.relationship == self.relationship]\nif not self.relationship.symmetric:\nif self.side == choices.RelationshipSideChoices.SIDE_SOURCE:\nvalue = [v for v in value if v.source_id == record.id]\nelse:\nvalue = [v for v in value if v.destination_id == record.id]\n# Handle Symmetric Relationships\n# List `value` could be empty here [] after the filtering from above\nif len(value) &lt; 1:\nreturn \"\u2014\"\n# Handle Relationships on the many side.\nif self.relationship.has_many(self.peer_side):\nv = value[0]\nmeta = type(v.get_peer(record))._meta\nname = meta.verbose_name_plural if len(value) &gt; 1 else meta.verbose_name\nreturn format_html(\n'&lt;a href=\"{}?relationship={}&amp;{}_id={}\"&gt;{} {}&lt;/a&gt;',\nreverse(\"extras:relationshipassociation_list\"),\nself.relationship.key,\nself.side,\nrecord.id,\nlen(value),\nname,\n)\n# Handle Relationships on the one side.\nelse:\nv = value[0]\npeer = v.get_peer(record)\nreturn format_html('&lt;a href=\"{}\"&gt;{}&lt;/a&gt;', peer.get_absolute_url(), peer)\n</code></pre>"},{"location":"code-reference/nautobot/apps/tables.html#nautobot.apps.tables.RoleTableMixin","title":"<code>nautobot.apps.tables.RoleTableMixin</code>","text":"<p>             Bases: <code>BaseTable</code></p> <p>Mixin to add a <code>role</code> field to a table.</p> Source code in <code>nautobot/extras/tables.py</code> <pre><code>class RoleTableMixin(BaseTable):\n\"\"\"Mixin to add a `role` field to a table.\"\"\"\nrole = ColoredLabelColumn()\n</code></pre>"},{"location":"code-reference/nautobot/apps/tables.html#nautobot.apps.tables.StatusTableMixin","title":"<code>nautobot.apps.tables.StatusTableMixin</code>","text":"<p>             Bases: <code>BaseTable</code></p> <p>Mixin to add a <code>status</code> field to a table.</p> Source code in <code>nautobot/extras/tables.py</code> <pre><code>class StatusTableMixin(BaseTable):\n\"\"\"Mixin to add a `status` field to a table.\"\"\"\nstatus = ColoredLabelColumn()\n</code></pre>"},{"location":"code-reference/nautobot/apps/tables.html#nautobot.apps.tables.TagColumn","title":"<code>nautobot.apps.tables.TagColumn</code>","text":"<p>             Bases: <code>django_tables2.TemplateColumn</code></p> <p>Display a list of tags assigned to the object.</p> Source code in <code>nautobot/core/tables.py</code> <pre><code>class TagColumn(django_tables2.TemplateColumn):\n\"\"\"\n    Display a list of tags assigned to the object.\n    \"\"\"\ntemplate_code = \"\"\"\n    {% for tag in value.all %}\n        {% include 'utilities/templatetags/tag.html' %}\n    {% empty %}\n        &lt;span class=\"text-muted\"&gt;&amp;mdash;&lt;/span&gt;\n    {% endfor %}\n    \"\"\"\ndef __init__(self, url_name=None):\nsuper().__init__(template_code=self.template_code, extra_context={\"url_name\": url_name})\n</code></pre>"},{"location":"code-reference/nautobot/apps/tables.html#nautobot.apps.tables.ToggleColumn","title":"<code>nautobot.apps.tables.ToggleColumn</code>","text":"<p>             Bases: <code>django_tables2.CheckBoxColumn</code></p> <p>Extend CheckBoxColumn to add a \"toggle all\" checkbox in the column header.</p> Source code in <code>nautobot/core/tables.py</code> <pre><code>class ToggleColumn(django_tables2.CheckBoxColumn):\n\"\"\"\n    Extend CheckBoxColumn to add a \"toggle all\" checkbox in the column header.\n    \"\"\"\ndef __init__(self, *args, **kwargs):\ndefault = kwargs.pop(\"default\", \"\")\nvisible = kwargs.pop(\"visible\", False)\nif \"attrs\" not in kwargs:\nkwargs[\"attrs\"] = {\"td\": {\"class\": \"min-width\"}}\nsuper().__init__(*args, default=default, visible=visible, **kwargs)\n@property\ndef header(self):\nreturn mark_safe('&lt;input type=\"checkbox\" class=\"toggle\" title=\"Toggle all\" /&gt;')  # noqa: S308\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html","title":"nautobot.apps.testing","text":""},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing","title":"<code>nautobot.apps.testing</code>","text":"<p>Utilities for apps to implement test automation.</p>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing.APITestCase","title":"<code>nautobot.apps.testing.APITestCase</code>","text":"<p>             Bases: <code>views.ModelTestCase</code></p> <p>Base test case for API requests.</p> <p>api_version: Specific API version to test. Leave unset to test the default behavior. Override with set_api_version()</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>@tag(\"api\")\nclass APITestCase(views.ModelTestCase):\n\"\"\"\n    Base test case for API requests.\n    api_version: Specific API version to test. Leave unset to test the default behavior. Override with set_api_version()\n    \"\"\"\napi_version = None\ndef setUp(self):\n\"\"\"\n        Create a token for API calls.\n        \"\"\"\nsuper().setUp()\nself.client.logout()\nself.token = users_models.Token.objects.create(user=self.user)\nself.header = {\"HTTP_AUTHORIZATION\": f\"Token {self.token.key}\"}\nif self.api_version:\nself.set_api_version(self.api_version)\ndef set_api_version(self, api_version):\n\"\"\"Set or unset a specific API version for requests in this test case.\"\"\"\nif api_version is None:\nself.header[\"HTTP_ACCEPT\"] = \"application/json\"\nelse:\nself.header[\"HTTP_ACCEPT\"] = f\"application/json; version={api_version}\"\ndef _get_detail_url(self, instance):\nviewname = lookup.get_route_for_model(instance, \"detail\", api=True)\nreturn reverse(viewname, kwargs={\"pk\": instance.pk})\ndef _get_list_url(self):\nviewname = lookup.get_route_for_model(self.model, \"list\", api=True)\nreturn reverse(viewname)\nVERBOTEN_STRINGS = (\n\"password\",\n# https://docs.djangoproject.com/en/3.2/topics/auth/passwords/#included-hashers\n\"argon2\",\n\"bcrypt\",\n\"crypt\",\n\"md5\",\n\"pbkdf2\",\n\"scrypt\",\n\"sha1\",\n\"sha256\",\n\"sha512\",\n)\ndef assert_no_verboten_content(self, response):\n\"\"\"\n        Check an API response for content that should not be exposed in the API.\n        If a specific API has a false failure here (maybe it has security-related strings as model flags or something?),\n        its test case should overload self.VERBOTEN_STRINGS appropriately.\n        \"\"\"\nresponse_raw_content = response.content.decode(response.charset)\nfor verboten in self.VERBOTEN_STRINGS:\nself.assertNotIn(verboten, response_raw_content)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APITestCase.assert_no_verboten_content","title":"<code>assert_no_verboten_content(response)</code>","text":"<p>Check an API response for content that should not be exposed in the API.</p> <p>If a specific API has a false failure here (maybe it has security-related strings as model flags or something?), its test case should overload self.VERBOTEN_STRINGS appropriately.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>def assert_no_verboten_content(self, response):\n\"\"\"\n    Check an API response for content that should not be exposed in the API.\n    If a specific API has a false failure here (maybe it has security-related strings as model flags or something?),\n    its test case should overload self.VERBOTEN_STRINGS appropriately.\n    \"\"\"\nresponse_raw_content = response.content.decode(response.charset)\nfor verboten in self.VERBOTEN_STRINGS:\nself.assertNotIn(verboten, response_raw_content)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APITestCase.setUp","title":"<code>setUp()</code>","text":"<p>Create a token for API calls.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>def setUp(self):\n\"\"\"\n    Create a token for API calls.\n    \"\"\"\nsuper().setUp()\nself.client.logout()\nself.token = users_models.Token.objects.create(user=self.user)\nself.header = {\"HTTP_AUTHORIZATION\": f\"Token {self.token.key}\"}\nif self.api_version:\nself.set_api_version(self.api_version)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APITestCase.set_api_version","title":"<code>set_api_version(api_version)</code>","text":"<p>Set or unset a specific API version for requests in this test case.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>def set_api_version(self, api_version):\n\"\"\"Set or unset a specific API version for requests in this test case.\"\"\"\nif api_version is None:\nself.header[\"HTTP_ACCEPT\"] = \"application/json\"\nelse:\nself.header[\"HTTP_ACCEPT\"] = f\"application/json; version={api_version}\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing.APITransactionTestCase","title":"<code>nautobot.apps.testing.APITransactionTestCase</code>","text":"<p>             Bases: <code>_APITransactionTestCase</code>, <code>mixins.NautobotTestCaseMixin</code></p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>@tag(\"unit\")\nclass APITransactionTestCase(_APITransactionTestCase, mixins.NautobotTestCaseMixin):\ndef setUp(self):\n\"\"\"\n        Create a superuser and token for API calls.\n        \"\"\"\nsuper().setUpNautobot(populate_status=True)\nself.user.is_superuser = True\nself.user.save()\nself.token = users_models.Token.objects.create(user=self.user)\nself.header = {\"HTTP_AUTHORIZATION\": f\"Token {self.token.key}\"}\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APITransactionTestCase.setUp","title":"<code>setUp()</code>","text":"<p>Create a superuser and token for API calls.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>def setUp(self):\n\"\"\"\n    Create a superuser and token for API calls.\n    \"\"\"\nsuper().setUpNautobot(populate_status=True)\nself.user.is_superuser = True\nself.user.save()\nself.token = users_models.Token.objects.create(user=self.user)\nself.header = {\"HTTP_AUTHORIZATION\": f\"Token {self.token.key}\"}\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing.APIViewTestCases","title":"<code>nautobot.apps.testing.APIViewTestCases</code>","text":"Source code in <code>nautobot/core/testing/api.py</code> <pre><code>@tag(\"unit\")\nclass APIViewTestCases:\nclass GetObjectViewTestCase(APITestCase):\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_get_object_anonymous(self):\n\"\"\"\n            GET a single object as an unauthenticated user.\n            \"\"\"\nurl = self._get_detail_url(self._get_queryset().first())\nif (\nself.model._meta.app_label,\nself.model._meta.model_name,\n) in settings.EXEMPT_EXCLUDE_MODELS:\n# Models listed in EXEMPT_EXCLUDE_MODELS should not be accessible to anonymous users\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_403_FORBIDDEN)\nelse:\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_get_object_without_permission(self):\n\"\"\"\n            GET a single object as an authenticated user without the required permission.\n            \"\"\"\nurl = self._get_detail_url(self._get_queryset().first())\n# Try GET without permission\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_403_FORBIDDEN)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_get_object(self):\n\"\"\"\n            GET a single object as an authenticated user with permission to view the object.\n            \"\"\"\nself.assertGreaterEqual(\nself._get_queryset().count(),\n2,\nf\"Test requires the creation of at least two {self.model} instances\",\n)\ninstance1, instance2 = self._get_queryset()[:2]\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": instance1.pk},\nactions=[\"view\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET to non-permitted object\nurl = self._get_detail_url(instance2)\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_404_NOT_FOUND)\n# Try GET to permitted object\nurl = self._get_detail_url(instance1)\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\n# Fields that should be present in *ALL* model serializers:\nself.assertIn(\"id\", response.data)\nself.assertEqual(str(response.data[\"id\"]), str(instance1.pk))  # coerce to str to handle both int and uuid\nself.assertIn(\"url\", response.data)\nself.assertIn(\"display\", response.data)\nself.assertIn(\"natural_slug\", response.data)\nself.assertIsInstance(response.data[\"display\"], str)\n# Fields that should be present in appropriate model serializers:\nif issubclass(self.model, extras_models.ChangeLoggedModel):\nself.assertIn(\"created\", response.data)\nself.assertIn(\"last_updated\", response.data)\n# Fields that should be absent by default (opt-in fields):\nself.assertNotIn(\"computed_fields\", response.data)\nself.assertNotIn(\"relationships\", response.data)\n# Content that should never be present:\nself.assert_no_verboten_content(response)\n# If opt-in fields are supported on this model, make sure they can be opted into\ncustom_fields_registry = registry.registry[\"model_features\"][\"custom_fields\"]\n# computed fields and custom fields use the same registry\ncf_supported = self.model._meta.model_name in custom_fields_registry.get(self.model._meta.app_label, {})\nif cf_supported:  # custom_fields is not an opt-in field, it should always be present if supported\nself.assertIn(\"custom_fields\", response.data)\nself.assertIsInstance(response.data[\"custom_fields\"], dict)\nrelationships_registry = registry.registry[\"model_features\"][\"relationships\"]\nrel_supported = self.model._meta.model_name in relationships_registry.get(self.model._meta.app_label, {})\nif cf_supported or rel_supported:\nquery_params = []\nif cf_supported:\nquery_params.append(\"include=computed_fields\")\nif rel_supported:\nquery_params.append(\"include=relationships\")\nquery_string = \"&amp;\".join(query_params)\nurl = f\"{url}?{query_string}\"\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nif cf_supported:\nself.assertIn(\"computed_fields\", response.data)\nself.assertIsInstance(response.data[\"computed_fields\"], dict)\nelse:\nself.assertNotIn(\"computed_fields\", response.data)\nif rel_supported:\nself.assertIn(\"relationships\", response.data)\nself.assertIsInstance(response.data[\"relationships\"], dict)\nelse:\nself.assertNotIn(\"relationships\", response.data)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_options_object(self):\n\"\"\"\n            Make an OPTIONS request for a single object.\n            \"\"\"\nurl = self._get_detail_url(self._get_queryset().first())\nresponse = self.client.options(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nwith self.subTest(\"Assert Detail View Config is generated well\"):\n# Namings Help\n# 1. detail_view_config: This is the detail view config set in the serializer.Meta.detail_view_config\n# 2. detail_view_schema: This is the retrieve schema generated from an OPTIONS request.\n# 3. advanced_view_schema: This is the advanced tab schema generated from an OPTIONS request.\nserializer = get_serializer_for_model(self._get_queryset().model)\nadvanced_view_schema = response.data[\"view_options\"][\"retrieve\"][\"tabs\"][\"Advanced\"]\n# Get default advanced tab fields\nself.assertEqual(len(advanced_view_schema), 1)\nself.assertIn(\"Object Details\", advanced_view_schema[0])\nadvanced_tab_fields = advanced_view_schema[0].get(\"Object Details\")[\"fields\"]\nif detail_view_config := getattr(serializer.Meta, \"detail_view_config\", None):\ndetail_view_schema = response.data[\"view_options\"][\"retrieve\"][\"tabs\"][\nbettertitle(self._get_queryset().model._meta.verbose_name)\n]\nself.assertHttpStatus(response, status.HTTP_200_OK)\n# According to convention, fields in the advanced tab fields should not exist in\n# the `detail_view_schema`. Assert this is True.\nwith self.subTest(\"Assert advanced tab fields should not exist in the detail_view_schema.\"):\nif detail_view_config.get(\"include_others\"):\n# Handle \"Other Fields\" section specially as \"Other Field\" is dynamically added\n# by Nautobot and is not part of the serializer-defined detail_view_config\nother_fields = detail_view_schema[0][\"Other Fields\"][\"fields\"]\nfor field in advanced_tab_fields:\nself.assertNotIn(field, other_fields)\nfor col_idx, col in enumerate(detail_view_schema):\nfor group_title, group in col.items():\nif group_title == \"Other Fields\":\ncontinue\ngroup_fields = group[\"fields\"]\n# Config on the serializer\nif (\ncol_idx &lt; len(detail_view_config[\"layout\"])\nand group_title in detail_view_config[\"layout\"][col_idx]\n):\nfields = detail_view_config[\"layout\"][col_idx][group_title][\"fields\"]\nelse:\nfields = []\n# Fields that are in the detail_view_schema must not be in the advanced tab as well\nfor field in group_fields:\nself.assertNotIn(field, advanced_tab_fields)\n# Fields that are explicit in the detail_view_config must remain as such in the schema\nfor field in fields:\nif field not in advanced_tab_fields:\nself.assertIn(field, group_fields)\nclass ListObjectsViewTestCase(APITestCase):\nchoices_fields = None\nfilterset = None\ndef get_filterset(self):\nreturn self.filterset or lookup.get_filterset_for_model(self.model)\ndef get_depth_fields(self):\n\"\"\"Get a list of model fields that could be tested with the ?depth query parameter\"\"\"\ndepth_fields = []\nfor field in self.model._meta.fields:\nif not field.name.startswith(\"_\"):\nif isinstance(field, (ForeignKey, GenericForeignKey, ManyToManyField, core_fields.TagsField)) and (\n# we represent content-types as \"app_label.modelname\" rather than as FKs\nfield.related_model != ContentType\n# user is a model field on Token but not a field on TokenSerializer\nand not (field.name == \"user\" and self.model == users_models.Token)\n):\ndepth_fields.append(field.name)\nreturn depth_fields\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_list_objects_anonymous(self):\n\"\"\"\n            GET a list of objects as an unauthenticated user.\n            \"\"\"\nurl = self._get_list_url()\nif (\nself.model._meta.app_label,\nself.model._meta.model_name,\n) in settings.EXEMPT_EXCLUDE_MODELS:\n# Models listed in EXEMPT_EXCLUDE_MODELS should not be accessible to anonymous users\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_403_FORBIDDEN)\nelse:\n# TODO(Glenn): if we're passing **self.header, we are *by definition* **NOT** anonymous!!\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), self._get_queryset().count())\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_depth_0(self):\n\"\"\"\n            GET a list of objects using the \"?depth=0\" parameter.\n            \"\"\"\ndepth_fields = self.get_depth_fields()\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nurl = f\"{self._get_list_url()}?depth=0\"\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), self._get_queryset().count())\nself.assert_no_verboten_content(response)\nfor response_data in response.data[\"results\"]:\nfor field in depth_fields:\nself.assertIn(field, response_data)\nif isinstance(response_data[field], list):\nfor entry in response_data[field]:\nself.assertIsInstance(entry, dict)\nself.assertTrue(is_uuid(entry[\"id\"]))\nelse:\nif response_data[field] is not None:\nself.assertIsInstance(response_data[field], dict)\nurl = response_data[field][\"url\"]\npk = response_data[field][\"id\"]\nobject_type = response_data[field][\"object_type\"]\n# The response should be a brief API object, containing an ID, object_type, and a\n# URL ending in the UUID of the relevant object:\n# http://nautobot.example.com/api/circuits/providers/&lt;uuid&gt;/\n#                                                    ^^^^^^\nself.assertTrue(is_uuid(url.split(\"/\")[-2]))\nself.assertTrue(is_uuid(pk))\nwith self.subTest(f\"Assert object_type {object_type} is valid\"):\napp_label, model_name = object_type.split(\".\")\nContentType.objects.get(app_label=app_label, model=model_name)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_depth_1(self):\n\"\"\"\n            GET a list of objects using the \"?depth=1\" parameter.\n            \"\"\"\ndepth_fields = self.get_depth_fields()\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nurl = f\"{self._get_list_url()}?depth=1\"\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), self._get_queryset().count())\nself.assert_no_verboten_content(response)\nfor response_data in response.data[\"results\"]:\nfor field in depth_fields:\nself.assertIn(field, response_data)\nif isinstance(response_data[field], list):\nfor entry in response_data[field]:\nself.assertIsInstance(entry, dict)\nself.assertTrue(is_uuid(entry[\"id\"]))\nelse:\nif response_data[field] is not None:\nself.assertIsInstance(response_data[field], dict)\nself.assertTrue(is_uuid(response_data[field][\"id\"]))\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_without_permission(self):\n\"\"\"\n            GET a list of objects as an authenticated user without the required permission.\n            \"\"\"\nurl = self._get_list_url()\n# Try GET without permission\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_403_FORBIDDEN)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects(self):\n\"\"\"\n            GET a list of objects as an authenticated user with permission to view the objects.\n            \"\"\"\nself.assertGreaterEqual(\nself._get_queryset().count(),\n3,\nf\"Test requires the creation of at least three {self.model} instances\",\n)\ninstance1, instance2 = self._get_queryset()[:2]\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk__in\": [instance1.pk, instance2.pk]},\nactions=[\"view\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET to permitted objects\nresponse = self.client.get(self._get_list_url(), **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), 2)\nself.assert_no_verboten_content(response)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_filtered(self):\n\"\"\"\n            GET a list of objects filtered by ID.\n            \"\"\"\nself.assertGreaterEqual(\nself._get_queryset().count(),\n3,\nf\"Test requires the creation of at least three {self.model} instances\",\n)\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\ninstance1, instance2 = self._get_queryset()[:2]\nresponse = self.client.get(f\"{self._get_list_url()}?id={instance1.pk}&amp;id={instance2.pk}\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), 2)\nfor entry in response.data[\"results\"]:\nself.assertIn(str(entry[\"id\"]), [str(instance1.pk), str(instance2.pk)])\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_ascending_ordered(self):\n# Simple sorting check for models with a \"name\" field\n# TreeModels don't support sorting at this time (order_by is not supported by TreeQuerySet)\n#   They will pass api == queryset tests below but will fail the user expected sort test\nif hasattr(self.model, \"name\") and not issubclass(self.model, TreeModel):\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nresponse = self.client.get(f\"{self._get_list_url()}?sort=name&amp;limit=3\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nresult_list = list(map(lambda p: p[\"name\"], response.data[\"results\"]))\nself.assertEqual(\nresult_list,\nlist(self._get_queryset().order_by(\"name\").values_list(\"name\", flat=True)[:3]),\n\"API sort not identical to QuerySet.order_by\",\n)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_descending_ordered(self):\n# Simple sorting check for models with a \"name\" field\n# TreeModels don't support sorting at this time (order_by is not supported by TreeQuerySet)\n#   They will pass api == queryset tests below but will fail the user expected sort test\nif hasattr(self.model, \"name\") and not issubclass(self.model, TreeModel):\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nresponse = self.client.get(f\"{self._get_list_url()}?sort=-name&amp;limit=3\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nresult_list = list(map(lambda p: p[\"name\"], response.data[\"results\"]))\nself.assertEqual(\nresult_list,\nlist(self._get_queryset().order_by(\"-name\").values_list(\"name\", flat=True)[:3]),\n\"API sort not identical to QuerySet.order_by\",\n)\nresponse_ascending = self.client.get(f\"{self._get_list_url()}?sort=name&amp;limit=3\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nresult_list_ascending = list(map(lambda p: p[\"name\"], response_ascending.data[\"results\"]))\nself.assertNotEqual(\nresult_list,\nresult_list_ascending,\n\"Same results obtained when sorting by name and by -name (QuerySet not ordering)\",\n)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[], STRICT_FILTERING=True)\ndef test_list_objects_unknown_filter_strict_filtering(self):\n\"\"\"\n            GET a list of objects with an unknown filter parameter and strict filtering, expect a 400 response.\n            \"\"\"\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nwith testing.disable_warnings(\"django.request\"):\nresponse = self.client.get(f\"{self._get_list_url()}?ice_cream_flavor=rocky-road\", **self.header)\nself.assertHttpStatus(response, status.HTTP_400_BAD_REQUEST)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"ice_cream_flavor\", response.data)\nself.assertIsInstance(response.data[\"ice_cream_flavor\"], list)\nself.assertEqual(\"Unknown filter field\", str(response.data[\"ice_cream_flavor\"][0]))\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[], STRICT_FILTERING=False)\ndef test_list_objects_unknown_filter_no_strict_filtering(self):\n\"\"\"\n            GET a list of objects with an unknown filter parameter and no strict filtering, expect it to be ignored.\n            \"\"\"\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nwith self.assertLogs(\"nautobot.core.filters\") as cm:\nresponse = self.client.get(f\"{self._get_list_url()}?ice_cream_flavor=rocky-road\", **self.header)\nself.assertEqual(\ncm.output,\n[\nf\"WARNING:nautobot.core.filters:{self.get_filterset().__name__}: \"\n'Unknown filter field \"ice_cream_flavor\"',\n],\n)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), self._get_queryset().count())\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_options_objects(self):\n\"\"\"\n            Make an OPTIONS request for a list endpoint.\n            \"\"\"\nresponse = self.client.options(self._get_list_url(), **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_csv(self):\n\"\"\"\n            GET a list of objects in CSV format as an authenticated user with permission to view some objects.\n            \"\"\"\nself.assertGreaterEqual(\nself._get_queryset().count(),\n3,\nf\"Test requires the creation of at least three {self.model} instances\",\n)\ninstance1, instance2, instance3 = self._get_queryset()[:3]\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk__in\": [instance1.pk, instance2.pk]},\nactions=[\"view\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try filtered GET to objects specifying CSV format as a query parameter\nresponse_1 = self.client.get(\nf\"{self._get_list_url()}?format=csv&amp;id={instance1.pk}&amp;id={instance3.pk}\", **self.header\n)\nself.assertHttpStatus(response_1, status.HTTP_200_OK)\nself.assertEqual(response_1.get(\"Content-Type\"), \"text/csv; charset=UTF-8\")\nself.assertEqual(\nresponse_1.get(\"Content-Disposition\"),\nf'attachment; filename=\"nautobot_{self.model.__name__.lower()}_data.csv\"',\n)\n# Try same request specifying CSV format via the ACCEPT header\nresponse_2 = self.client.get(\nf\"{self._get_list_url()}?id={instance1.pk}&amp;id={instance3.pk}\", **self.header, HTTP_ACCEPT=\"text/csv\"\n)\nself.assertHttpStatus(response_2, status.HTTP_200_OK)\nself.assertEqual(response_2.get(\"Content-Type\"), \"text/csv; charset=UTF-8\")\nself.assertEqual(\nresponse_2.get(\"Content-Disposition\"),\nf'attachment; filename=\"nautobot_{self.model.__name__.lower()}_data.csv\"',\n)\nself.maxDiff = None\n# This check is more useful than it might seem. Any related object that wasn't CSV-converted correctly\n# will likely be rendered incorrectly as an API URL, and that API URL *will* differ between the\n# two responses based on the inclusion or omission of the \"?format=csv\" parameter. If\n# you run into this, make sure all serializers have `Meta.fields = \"__all__\"` set.\nself.assertEqual(\nresponse_1.content.decode(response_1.charset), response_2.content.decode(response_2.charset)\n)\n# Load the csv data back into a list of object dicts\nreader = csv.DictReader(StringIO(response_1.content.decode(response_1.charset)))\nrows = list(reader)\n# Should only have one entry (instance1) since we filtered out instance2 and permissions block instance3\nself.assertEqual(1, len(rows))\nself.assertEqual(rows[0][\"id\"], str(instance1.pk))\nself.assertEqual(rows[0][\"display\"], getattr(instance1, \"display\", str(instance1)))\nif hasattr(self.model, \"_custom_field_data\"):\ncustom_fields = extras_models.CustomField.objects.get_for_model(self.model)\nfor cf in custom_fields:\nself.assertIn(f\"cf_{cf.key}\", rows[0])\nself.assertEqual(rows[0][f\"cf_{cf.key}\"], instance1._custom_field_data.get(cf.key) or \"\")\n# TODO what other generic tests should we run on the data?\nclass CreateObjectViewTestCase(APITestCase):\ncreate_data = []\nvalidation_excluded_fields = []\nslug_source: Optional[Union[str, Sequence[str]]] = None\nslugify_function = staticmethod(slugify)\ndef test_create_object_without_permission(self):\n\"\"\"\n            POST a single object without permission.\n            \"\"\"\nurl = self._get_list_url()\n# Try POST without permission\nwith testing.disable_warnings(\"django.request\"):\nresponse = self.client.post(url, self.create_data[0], format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_403_FORBIDDEN)\ndef check_expected_slug(self, obj):\nslug_source = self.slug_source if isinstance(self.slug_source, (list, tuple)) else [self.slug_source]\nexpected_slug = \"\"\nfor source_item in slug_source:\n# e.g. self.slug_source = [\"parent__name\", \"name\"]\nsource_keys = source_item.split(\"__\")\ntry:\nval = getattr(obj, source_keys[0])\nfor key in source_keys[1:]:\nval = getattr(val, key)\nexcept AttributeError:\nval = \"\"\nif val:\nif expected_slug != \"\":\nexpected_slug += \"-\"\nexpected_slug += self.slugify_function(val)\nself.assertNotEqual(expected_slug, \"\")\nif hasattr(obj, \"slug\"):\nself.assertEqual(obj.slug, expected_slug)\nelse:\nself.assertEqual(obj.key, expected_slug)\ndef test_create_object(self):\n\"\"\"\n            POST a single object with permission.\n            \"\"\"\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\ninitial_count = self._get_queryset().count()\nfor i, create_data in enumerate(self.create_data):\nif i == len(self.create_data) - 1:\n# Test to see if depth parameter is ignored in POST request.\nresponse = self.client.post(\nself._get_list_url() + \"?depth=3\", create_data, format=\"json\", **self.header\n)\nelse:\nresponse = self.client.post(self._get_list_url(), create_data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_201_CREATED)\nself.assertEqual(self._get_queryset().count(), initial_count + i + 1)\ninstance = self._get_queryset().get(pk=response.data[\"id\"])\nself.assertInstanceEqual(\ninstance,\ncreate_data,\nexclude=self.validation_excluded_fields,\napi=True,\n)\n# Check if Slug field is automatically created\nif self.slug_source is not None and \"slug\" not in create_data:\nself.check_expected_slug(self._get_queryset().get(pk=response.data[\"id\"]))\n# Verify ObjectChange creation\nif hasattr(self.model, \"to_objectchange\"):\nobjectchanges = lookup.get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, extras_choices.ObjectChangeActionChoices.ACTION_CREATE)\ndef test_recreate_object_csv(self):\n\"\"\"CSV export an object, delete it, and recreate it via CSV import.\"\"\"\nif hasattr(self, \"get_deletable_object\"):\n# provided by DeleteObjectViewTestCase mixin\ninstance = self.get_deletable_object()\nelse:\n# try to do it ourselves\ninstance = testing.get_deletable_objects(self.model, self._get_queryset()).first()\nif instance is None:\nself.fail(\"Couldn't find a single deletable object!\")\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"add\", \"view\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\nresponse = self.client.get(self._get_detail_url(instance) + \"?format=csv\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertEqual(\nresponse.get(\"Content-Disposition\"),\nf'attachment; filename=\"nautobot_{self.model.__name__.lower()}_data.csv\"',\n)\ncsv_data = response.content.decode(response.charset)\nserializer_class = get_serializer_for_model(self.model)\nold_serializer = serializer_class(instance, context={\"request\": None})\nold_data = old_serializer.data\ninstance.delete()\nresponse = self.client.post(self._get_list_url(), csv_data, content_type=\"text/csv\", **self.header)\nself.assertHttpStatus(response, status.HTTP_201_CREATED, csv_data)\n# Note that create via CSV is always treated as a bulk-create, and so the response is always a list of dicts\nnew_instance = self._get_queryset().get(pk=response.data[0][\"id\"])\nself.assertNotEqual(new_instance.pk, instance.pk)\nnew_serializer = serializer_class(new_instance, context={\"request\": None})\nnew_data = new_serializer.data\nfor field_name, field in new_serializer.fields.items():\n# Skip M2M fields except for tags because M2M fields are not supported in CSV Export/Import;\nif isinstance(field, ManyRelatedField) and field_name != \"tags\":\ncontinue\nif field.read_only or field.write_only:\ncontinue\nif field_name in [\"created\", \"last_updated\"]:\nself.assertNotEqual(\nold_data[field_name],\nnew_data[field_name],\nf\"{field_name} should have been updated on delete/recreate but it didn't change!\",\n)\nelse:\nself.assertEqual(\nold_data[field_name],\nnew_data[field_name],\nf\"{field_name} should have been unchanged on delete/recreate but it differs!\",\n)\ndef test_bulk_create_objects(self):\n\"\"\"\n            POST a set of objects in a single request.\n            \"\"\"\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\ninitial_count = self._get_queryset().count()\nresponse = self.client.post(self._get_list_url(), self.create_data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_201_CREATED)\nself.assertEqual(len(response.data), len(self.create_data))\nself.assertEqual(self._get_queryset().count(), initial_count + len(self.create_data))\nfor i, obj in enumerate(response.data):\nfor field in self.create_data[i]:\nif field not in self.validation_excluded_fields:\nself.assertIn(\nfield,\nobj,\nf\"Bulk create field '{field}' missing from object {i} in response\",\n)\nfor i, obj in enumerate(response.data):\nself.assertInstanceEqual(\nself._get_queryset().get(pk=obj[\"id\"]),\nself.create_data[i],\nexclude=self.validation_excluded_fields,\napi=True,\n)\nif self.slug_source is not None and \"slug\" not in self.create_data[i]:\nself.check_expected_slug(self._get_queryset().get(pk=obj[\"id\"]))\nclass UpdateObjectViewTestCase(APITestCase):\nupdate_data = {}\nbulk_update_data: Optional[dict] = None\nvalidation_excluded_fields = []\nchoices_fields = None\ndef test_update_object_without_permission(self):\n\"\"\"\n            PATCH a single object without permission.\n            \"\"\"\nurl = self._get_detail_url(self._get_queryset().first())\nupdate_data = self.update_data or getattr(self, \"create_data\")[0]\n# Try PATCH without permission\nwith testing.disable_warnings(\"django.request\"):\nresponse = self.client.patch(url, update_data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_403_FORBIDDEN)\ndef test_update_object(self):\n\"\"\"\n            PATCH a single object identified by its ID.\n            \"\"\"\ndef strip_serialized_object(this_object):\n\"\"\"\n                Only here to work around acceptable differences in PATCH response vs GET response which are known bugs.\n                \"\"\"\n# Work around for https://github.com/nautobot/nautobot/issues/3321\nthis_object.pop(\"last_updated\", None)\n# PATCH response always includes \"opt-in\" fields, but GET response does not.\nthis_object.pop(\"computed_fields\", None)\nthis_object.pop(\"config_context\", None)\nthis_object.pop(\"relationships\", None)\nfor value in this_object.values():\nif isinstance(value, dict):\nstrip_serialized_object(value)\nelif isinstance(value, list):\nfor list_dict in value:\nif isinstance(list_dict, dict):\nstrip_serialized_object(list_dict)\nself.maxDiff = None\ninstance = self._get_queryset().first()\nurl = self._get_detail_url(instance)\nupdate_data = self.update_data or getattr(self, \"create_data\")[0]\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Verify that an empty PATCH results in no change to the object.\n# This is to catch issues like https://github.com/nautobot/nautobot/issues/3533\n# Add object-level permission for GET\nobj_perm.actions = [\"view\"]\nobj_perm.save()\n# Get initial serialized object representation\nget_response = self.client.get(url, **self.header)\nself.assertHttpStatus(get_response, status.HTTP_200_OK)\ninitial_serialized_object = get_response.json()\nstrip_serialized_object(initial_serialized_object)\n# Redefine object-level permission for PATCH\nobj_perm.actions = [\"change\"]\nobj_perm.save()\n# Send empty PATCH request\nresponse = self.client.patch(url, {}, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nserialized_object = response.json()\nstrip_serialized_object(serialized_object)\nself.assertEqual(initial_serialized_object, serialized_object)\n# Verify ObjectChange creation -- yes, even though nothing actually changed\n# This may change (hah) at some point -- see https://github.com/nautobot/nautobot/issues/3321\nif hasattr(self.model, \"to_objectchange\"):\nobjectchanges = lookup.get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, extras_choices.ObjectChangeActionChoices.ACTION_UPDATE)\nobjectchanges.delete()\n# Verify that a PATCH with some data updates that data correctly.\nresponse = self.client.patch(url, update_data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\n# Check for unexpected side effects on fields we DIDN'T intend to update\nfor field in initial_serialized_object:\nif field not in update_data:\nself.assertEqual(initial_serialized_object[field], serialized_object[field])\ninstance.refresh_from_db()\nself.assertInstanceEqual(instance, update_data, exclude=self.validation_excluded_fields, api=True)\n# Verify ObjectChange creation\nif hasattr(self.model, \"to_objectchange\"):\nobjectchanges = lookup.get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, extras_choices.ObjectChangeActionChoices.ACTION_UPDATE)\ndef test_get_put_round_trip(self):\n\"\"\"GET and then PUT an object and verify that it's accepted and unchanged.\"\"\"\nself.maxDiff = None\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"view\", \"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\ninstance = self._get_queryset().first()\nurl = self._get_detail_url(instance)\n# GET object representation\nopt_in_fields = getattr(get_serializer_for_model(self.model).Meta, \"opt_in_fields\", None)\nif opt_in_fields:\nurl += \"?\" + \"&amp;\".join([f\"include={field}\" for field in opt_in_fields])\nget_response = self.client.get(url, **self.header)\nself.assertHttpStatus(get_response, status.HTTP_200_OK)\ninitial_serialized_object = get_response.json()\n# PUT same object representation\nput_response = self.client.put(url, initial_serialized_object, format=\"json\", **self.header)\nself.assertHttpStatus(put_response, status.HTTP_200_OK, initial_serialized_object)\nupdated_serialized_object = put_response.json()\n# Work around for https://github.com/nautobot/nautobot/issues/3321\ninitial_serialized_object.pop(\"last_updated\", None)\nupdated_serialized_object.pop(\"last_updated\", None)\nself.assertEqual(initial_serialized_object, updated_serialized_object)\ndef test_bulk_update_objects(self):\n\"\"\"\n            PATCH a set of objects in a single request.\n            \"\"\"\nif self.bulk_update_data is None:\nself.skipTest(\"Bulk update data not set\")\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\nid_list = list(self._get_queryset().values_list(\"id\", flat=True)[:3])\nself.assertEqual(len(id_list), 3, \"Insufficient number of objects to test bulk update\")\ndata = [{\"id\": id, **self.bulk_update_data} for id in id_list]\nresponse = self.client.patch(self._get_list_url(), data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nfor i, obj in enumerate(response.data):\nfor field, _value in self.bulk_update_data.items():\nself.assertIn(\nfield,\nobj,\nf\"Bulk update field '{field}' missing from object {i} in response\",\n)\n# TODO(Glenn): shouldn't we also check that obj[field] == value?\nfor instance in self._get_queryset().filter(pk__in=id_list):\nself.assertInstanceEqual(\ninstance,\nself.bulk_update_data,\nexclude=self.validation_excluded_fields,\napi=True,\n)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_options_returns_expected_choices(self):\n\"\"\"\n            Make an OPTIONS request for a list endpoint and validate choices match expected choices for serializer.\n            \"\"\"\n# Set self.choices_fields as empty set to compare classes that shouldn't have any choices on serializer.\nif not self.choices_fields:\nself.choices_fields = set()\n# Save self.user as superuser to be able to view available choices on list views.\nself.user.is_superuser = True\nself.user.save()\nresponse = self.client.options(self._get_list_url(), **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\ndata = response.json()\nself.assertIn(\"actions\", data)\n# Grab any field that has choices defined (fields with enums)\nif any(\n[\n\"POST\" in data[\"actions\"],\n\"PUT\" in data[\"actions\"],\n]\n):\nschema = data[\"schema\"]\nprops = schema[\"properties\"]\nfields = props.keys()\nfield_choices = set()\nfor field_name in fields:\nobj = props[field_name]\nif \"enum\" in obj and \"enumNames\" in obj:\nenum = obj[\"enum\"]\n# Zipping to assert that the enum and the mapping have the same number of items.\nmodel_field_choices = dict(zip(obj[\"enumNames\"], enum))\nself.assertEqual(len(enum), len(model_field_choices))\nfield_choices.add(field_name)\nelse:\nself.fail(f\"Neither PUT nor POST are available actions in: {data['actions']}\")\nself.assertEqual(\nset(self.choices_fields),\nfield_choices,\n\"All field names of choice fields for a given model serializer need to be manually added to \"\n\"self.choices_fields. If this is already the case, perhaps the serializer is implemented incorrectly?\",\n)\nclass DeleteObjectViewTestCase(APITestCase):\ndef get_deletable_object(self):\n\"\"\"\n            Get an instance that can be deleted.\n            For some models this may just be any random object, but when we have FKs with `on_delete=models.PROTECT`\n            (as is often the case) we need to find or create an instance that doesn't have such entanglements.\n            \"\"\"\ninstance = testing.get_deletable_objects(self.model, self._get_queryset()).first()\nif instance is None:\nself.fail(\"Couldn't find a single deletable object!\")\nreturn instance\ndef get_deletable_object_pks(self):\n\"\"\"\n            Get a list of PKs corresponding to objects that can be safely bulk-deleted.\n            For some models this may just be any random objects, but when we have FKs with `on_delete=models.PROTECT`\n            (as is often the case) we need to find or create an instance that doesn't have such entanglements.\n            \"\"\"\ninstances = testing.get_deletable_objects(self.model, self._get_queryset()).values_list(\"pk\", flat=True)[:3]\nif len(instances) &lt; 3:\nself.fail(f\"Couldn't find 3 deletable objects, only found {len(instances)}!\")\nreturn instances\ndef test_delete_object_without_permission(self):\n\"\"\"\n            DELETE a single object without permission.\n            \"\"\"\nurl = self._get_detail_url(self.get_deletable_object())\n# Try DELETE without permission\nwith testing.disable_warnings(\"django.request\"):\nresponse = self.client.delete(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_403_FORBIDDEN)\ndef test_delete_object(self):\n\"\"\"\n            DELETE a single object identified by its primary key.\n            \"\"\"\ninstance = self.get_deletable_object()\nurl = self._get_detail_url(instance)\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"delete\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\nresponse = self.client.delete(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_204_NO_CONTENT)\nself.assertFalse(self._get_queryset().filter(pk=instance.pk).exists())\n# Verify ObjectChange creation\nif hasattr(self.model, \"to_objectchange\"):\nobjectchanges = lookup.get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, extras_choices.ObjectChangeActionChoices.ACTION_DELETE)\ndef test_bulk_delete_objects(self):\n\"\"\"\n            DELETE a set of objects in a single request.\n            \"\"\"\nid_list = self.get_deletable_object_pks()\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"delete\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\ndata = [{\"id\": id} for id in id_list]\ninitial_count = self._get_queryset().count()\nresponse = self.client.delete(self._get_list_url(), data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_204_NO_CONTENT)\nself.assertEqual(self._get_queryset().count(), initial_count - len(id_list))\nclass NotesURLViewTestCase(APITestCase):\n\"\"\"Validate Notes URL on objects that have the Note model Mixin.\"\"\"\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_notes_url_on_object(self):\nif not hasattr(self.model, \"notes\"):\nself.skipTest(\"Model doesn't appear to support Notes\")\ninstance = self._get_queryset().first()\nif not isinstance(instance.notes, QuerySet):\nself.skipTest(\"Model has a notes field but it doesn't appear to be Notes\")\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": instance.pk},\nactions=[\"view\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\nurl = self._get_detail_url(instance)\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIn(\"notes_url\", response.data)\nself.assertIn(f\"{url}notes/\", str(response.data[\"notes_url\"]))\nself.assertIn(instance.get_notes_url(api=True), str(response.data[\"notes_url\"]))\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_notes_url_functionality(self):\nif not hasattr(self.model, \"notes\"):\nself.skipTest(\"Model doesn't appear to support Notes\")\ninstance = self._get_queryset().first()\nif not isinstance(instance.notes, QuerySet):\nself.skipTest(\"Model has a notes field but it doesn't appear to be Notes\")\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nself.add_permissions(\"extras.add_note\")\n# Add note via REST API\nnotes_url = instance.get_notes_url(api=True)\nresponse = self.client.post(\nnotes_url,\n{\"note\": f\"This is a note for {instance}\"},\nformat=\"json\",\n**self.header,\n)\nself.assertHttpStatus(response, status.HTTP_201_CREATED)\nself.assertIsInstance(response.data, dict)\nself.assertEqual(f\"This is a note for {instance}\", response.data[\"note\"])\nself.assertEqual(str(self.user.pk), str(response.data[\"user\"][\"id\"]))\nself.assertEqual(str(instance.pk), str(response.data[\"assigned_object_id\"]))\nself.assertEqual(str(instance.pk), str(response.data[\"assigned_object\"][\"id\"]))\n# Get note via REST API\nresponse = self.client.get(notes_url, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_403_FORBIDDEN)\nself.add_permissions(\"extras.view_note\")\nresponse = self.client.get(notes_url, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertEqual(f\"This is a note for {instance}\", response.data[\"results\"][0][\"note\"])\nclass TreeModelAPIViewTestCaseMixin:\n\"\"\"Test `?depth=2` query parameter for TreeModel\"\"\"\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_depth_2(self):\n\"\"\"\n            GET a list of objects using the \"?depth=2\" parameter.\n            TreeModel Only\n            \"\"\"\nfield = \"parent\"\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nurl = f\"{self._get_list_url()}?depth=2\"\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), self._get_queryset().count())\nresponse_data = response.data[\"results\"]\nfor data in response_data:\n# First Level Parent\nself.assertEqual(field in data, True)\nif data[field] is not None:\nself.assertIsInstance(data[field], dict)\nself.assertTrue(is_uuid(data[field][\"id\"]))\n# Second Level Parent\nself.assertIn(field, data[field])\nif data[field][field] is not None:\nself.assertIsInstance(data[field][field], dict)\nself.assertTrue(is_uuid(data[field][field][\"id\"]))\nclass APIViewTestCase(\nGetObjectViewTestCase,\nListObjectsViewTestCase,\nCreateObjectViewTestCase,\nUpdateObjectViewTestCase,\nDeleteObjectViewTestCase,\nNotesURLViewTestCase,\n):\npass\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.CreateObjectViewTestCase","title":"<code>CreateObjectViewTestCase</code>","text":"<p>             Bases: <code>APITestCase</code></p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>class CreateObjectViewTestCase(APITestCase):\ncreate_data = []\nvalidation_excluded_fields = []\nslug_source: Optional[Union[str, Sequence[str]]] = None\nslugify_function = staticmethod(slugify)\ndef test_create_object_without_permission(self):\n\"\"\"\n        POST a single object without permission.\n        \"\"\"\nurl = self._get_list_url()\n# Try POST without permission\nwith testing.disable_warnings(\"django.request\"):\nresponse = self.client.post(url, self.create_data[0], format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_403_FORBIDDEN)\ndef check_expected_slug(self, obj):\nslug_source = self.slug_source if isinstance(self.slug_source, (list, tuple)) else [self.slug_source]\nexpected_slug = \"\"\nfor source_item in slug_source:\n# e.g. self.slug_source = [\"parent__name\", \"name\"]\nsource_keys = source_item.split(\"__\")\ntry:\nval = getattr(obj, source_keys[0])\nfor key in source_keys[1:]:\nval = getattr(val, key)\nexcept AttributeError:\nval = \"\"\nif val:\nif expected_slug != \"\":\nexpected_slug += \"-\"\nexpected_slug += self.slugify_function(val)\nself.assertNotEqual(expected_slug, \"\")\nif hasattr(obj, \"slug\"):\nself.assertEqual(obj.slug, expected_slug)\nelse:\nself.assertEqual(obj.key, expected_slug)\ndef test_create_object(self):\n\"\"\"\n        POST a single object with permission.\n        \"\"\"\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\ninitial_count = self._get_queryset().count()\nfor i, create_data in enumerate(self.create_data):\nif i == len(self.create_data) - 1:\n# Test to see if depth parameter is ignored in POST request.\nresponse = self.client.post(\nself._get_list_url() + \"?depth=3\", create_data, format=\"json\", **self.header\n)\nelse:\nresponse = self.client.post(self._get_list_url(), create_data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_201_CREATED)\nself.assertEqual(self._get_queryset().count(), initial_count + i + 1)\ninstance = self._get_queryset().get(pk=response.data[\"id\"])\nself.assertInstanceEqual(\ninstance,\ncreate_data,\nexclude=self.validation_excluded_fields,\napi=True,\n)\n# Check if Slug field is automatically created\nif self.slug_source is not None and \"slug\" not in create_data:\nself.check_expected_slug(self._get_queryset().get(pk=response.data[\"id\"]))\n# Verify ObjectChange creation\nif hasattr(self.model, \"to_objectchange\"):\nobjectchanges = lookup.get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, extras_choices.ObjectChangeActionChoices.ACTION_CREATE)\ndef test_recreate_object_csv(self):\n\"\"\"CSV export an object, delete it, and recreate it via CSV import.\"\"\"\nif hasattr(self, \"get_deletable_object\"):\n# provided by DeleteObjectViewTestCase mixin\ninstance = self.get_deletable_object()\nelse:\n# try to do it ourselves\ninstance = testing.get_deletable_objects(self.model, self._get_queryset()).first()\nif instance is None:\nself.fail(\"Couldn't find a single deletable object!\")\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"add\", \"view\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\nresponse = self.client.get(self._get_detail_url(instance) + \"?format=csv\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertEqual(\nresponse.get(\"Content-Disposition\"),\nf'attachment; filename=\"nautobot_{self.model.__name__.lower()}_data.csv\"',\n)\ncsv_data = response.content.decode(response.charset)\nserializer_class = get_serializer_for_model(self.model)\nold_serializer = serializer_class(instance, context={\"request\": None})\nold_data = old_serializer.data\ninstance.delete()\nresponse = self.client.post(self._get_list_url(), csv_data, content_type=\"text/csv\", **self.header)\nself.assertHttpStatus(response, status.HTTP_201_CREATED, csv_data)\n# Note that create via CSV is always treated as a bulk-create, and so the response is always a list of dicts\nnew_instance = self._get_queryset().get(pk=response.data[0][\"id\"])\nself.assertNotEqual(new_instance.pk, instance.pk)\nnew_serializer = serializer_class(new_instance, context={\"request\": None})\nnew_data = new_serializer.data\nfor field_name, field in new_serializer.fields.items():\n# Skip M2M fields except for tags because M2M fields are not supported in CSV Export/Import;\nif isinstance(field, ManyRelatedField) and field_name != \"tags\":\ncontinue\nif field.read_only or field.write_only:\ncontinue\nif field_name in [\"created\", \"last_updated\"]:\nself.assertNotEqual(\nold_data[field_name],\nnew_data[field_name],\nf\"{field_name} should have been updated on delete/recreate but it didn't change!\",\n)\nelse:\nself.assertEqual(\nold_data[field_name],\nnew_data[field_name],\nf\"{field_name} should have been unchanged on delete/recreate but it differs!\",\n)\ndef test_bulk_create_objects(self):\n\"\"\"\n        POST a set of objects in a single request.\n        \"\"\"\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\ninitial_count = self._get_queryset().count()\nresponse = self.client.post(self._get_list_url(), self.create_data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_201_CREATED)\nself.assertEqual(len(response.data), len(self.create_data))\nself.assertEqual(self._get_queryset().count(), initial_count + len(self.create_data))\nfor i, obj in enumerate(response.data):\nfor field in self.create_data[i]:\nif field not in self.validation_excluded_fields:\nself.assertIn(\nfield,\nobj,\nf\"Bulk create field '{field}' missing from object {i} in response\",\n)\nfor i, obj in enumerate(response.data):\nself.assertInstanceEqual(\nself._get_queryset().get(pk=obj[\"id\"]),\nself.create_data[i],\nexclude=self.validation_excluded_fields,\napi=True,\n)\nif self.slug_source is not None and \"slug\" not in self.create_data[i]:\nself.check_expected_slug(self._get_queryset().get(pk=obj[\"id\"]))\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.CreateObjectViewTestCase.test_bulk_create_objects","title":"<code>test_bulk_create_objects()</code>","text":"<p>POST a set of objects in a single request.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>def test_bulk_create_objects(self):\n\"\"\"\n    POST a set of objects in a single request.\n    \"\"\"\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\ninitial_count = self._get_queryset().count()\nresponse = self.client.post(self._get_list_url(), self.create_data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_201_CREATED)\nself.assertEqual(len(response.data), len(self.create_data))\nself.assertEqual(self._get_queryset().count(), initial_count + len(self.create_data))\nfor i, obj in enumerate(response.data):\nfor field in self.create_data[i]:\nif field not in self.validation_excluded_fields:\nself.assertIn(\nfield,\nobj,\nf\"Bulk create field '{field}' missing from object {i} in response\",\n)\nfor i, obj in enumerate(response.data):\nself.assertInstanceEqual(\nself._get_queryset().get(pk=obj[\"id\"]),\nself.create_data[i],\nexclude=self.validation_excluded_fields,\napi=True,\n)\nif self.slug_source is not None and \"slug\" not in self.create_data[i]:\nself.check_expected_slug(self._get_queryset().get(pk=obj[\"id\"]))\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.CreateObjectViewTestCase.test_create_object","title":"<code>test_create_object()</code>","text":"<p>POST a single object with permission.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>def test_create_object(self):\n\"\"\"\n    POST a single object with permission.\n    \"\"\"\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\ninitial_count = self._get_queryset().count()\nfor i, create_data in enumerate(self.create_data):\nif i == len(self.create_data) - 1:\n# Test to see if depth parameter is ignored in POST request.\nresponse = self.client.post(\nself._get_list_url() + \"?depth=3\", create_data, format=\"json\", **self.header\n)\nelse:\nresponse = self.client.post(self._get_list_url(), create_data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_201_CREATED)\nself.assertEqual(self._get_queryset().count(), initial_count + i + 1)\ninstance = self._get_queryset().get(pk=response.data[\"id\"])\nself.assertInstanceEqual(\ninstance,\ncreate_data,\nexclude=self.validation_excluded_fields,\napi=True,\n)\n# Check if Slug field is automatically created\nif self.slug_source is not None and \"slug\" not in create_data:\nself.check_expected_slug(self._get_queryset().get(pk=response.data[\"id\"]))\n# Verify ObjectChange creation\nif hasattr(self.model, \"to_objectchange\"):\nobjectchanges = lookup.get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, extras_choices.ObjectChangeActionChoices.ACTION_CREATE)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.CreateObjectViewTestCase.test_create_object_without_permission","title":"<code>test_create_object_without_permission()</code>","text":"<p>POST a single object without permission.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>def test_create_object_without_permission(self):\n\"\"\"\n    POST a single object without permission.\n    \"\"\"\nurl = self._get_list_url()\n# Try POST without permission\nwith testing.disable_warnings(\"django.request\"):\nresponse = self.client.post(url, self.create_data[0], format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_403_FORBIDDEN)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.CreateObjectViewTestCase.test_recreate_object_csv","title":"<code>test_recreate_object_csv()</code>","text":"<p>CSV export an object, delete it, and recreate it via CSV import.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>def test_recreate_object_csv(self):\n\"\"\"CSV export an object, delete it, and recreate it via CSV import.\"\"\"\nif hasattr(self, \"get_deletable_object\"):\n# provided by DeleteObjectViewTestCase mixin\ninstance = self.get_deletable_object()\nelse:\n# try to do it ourselves\ninstance = testing.get_deletable_objects(self.model, self._get_queryset()).first()\nif instance is None:\nself.fail(\"Couldn't find a single deletable object!\")\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"add\", \"view\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\nresponse = self.client.get(self._get_detail_url(instance) + \"?format=csv\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertEqual(\nresponse.get(\"Content-Disposition\"),\nf'attachment; filename=\"nautobot_{self.model.__name__.lower()}_data.csv\"',\n)\ncsv_data = response.content.decode(response.charset)\nserializer_class = get_serializer_for_model(self.model)\nold_serializer = serializer_class(instance, context={\"request\": None})\nold_data = old_serializer.data\ninstance.delete()\nresponse = self.client.post(self._get_list_url(), csv_data, content_type=\"text/csv\", **self.header)\nself.assertHttpStatus(response, status.HTTP_201_CREATED, csv_data)\n# Note that create via CSV is always treated as a bulk-create, and so the response is always a list of dicts\nnew_instance = self._get_queryset().get(pk=response.data[0][\"id\"])\nself.assertNotEqual(new_instance.pk, instance.pk)\nnew_serializer = serializer_class(new_instance, context={\"request\": None})\nnew_data = new_serializer.data\nfor field_name, field in new_serializer.fields.items():\n# Skip M2M fields except for tags because M2M fields are not supported in CSV Export/Import;\nif isinstance(field, ManyRelatedField) and field_name != \"tags\":\ncontinue\nif field.read_only or field.write_only:\ncontinue\nif field_name in [\"created\", \"last_updated\"]:\nself.assertNotEqual(\nold_data[field_name],\nnew_data[field_name],\nf\"{field_name} should have been updated on delete/recreate but it didn't change!\",\n)\nelse:\nself.assertEqual(\nold_data[field_name],\nnew_data[field_name],\nf\"{field_name} should have been unchanged on delete/recreate but it differs!\",\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.DeleteObjectViewTestCase","title":"<code>DeleteObjectViewTestCase</code>","text":"<p>             Bases: <code>APITestCase</code></p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>class DeleteObjectViewTestCase(APITestCase):\ndef get_deletable_object(self):\n\"\"\"\n        Get an instance that can be deleted.\n        For some models this may just be any random object, but when we have FKs with `on_delete=models.PROTECT`\n        (as is often the case) we need to find or create an instance that doesn't have such entanglements.\n        \"\"\"\ninstance = testing.get_deletable_objects(self.model, self._get_queryset()).first()\nif instance is None:\nself.fail(\"Couldn't find a single deletable object!\")\nreturn instance\ndef get_deletable_object_pks(self):\n\"\"\"\n        Get a list of PKs corresponding to objects that can be safely bulk-deleted.\n        For some models this may just be any random objects, but when we have FKs with `on_delete=models.PROTECT`\n        (as is often the case) we need to find or create an instance that doesn't have such entanglements.\n        \"\"\"\ninstances = testing.get_deletable_objects(self.model, self._get_queryset()).values_list(\"pk\", flat=True)[:3]\nif len(instances) &lt; 3:\nself.fail(f\"Couldn't find 3 deletable objects, only found {len(instances)}!\")\nreturn instances\ndef test_delete_object_without_permission(self):\n\"\"\"\n        DELETE a single object without permission.\n        \"\"\"\nurl = self._get_detail_url(self.get_deletable_object())\n# Try DELETE without permission\nwith testing.disable_warnings(\"django.request\"):\nresponse = self.client.delete(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_403_FORBIDDEN)\ndef test_delete_object(self):\n\"\"\"\n        DELETE a single object identified by its primary key.\n        \"\"\"\ninstance = self.get_deletable_object()\nurl = self._get_detail_url(instance)\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"delete\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\nresponse = self.client.delete(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_204_NO_CONTENT)\nself.assertFalse(self._get_queryset().filter(pk=instance.pk).exists())\n# Verify ObjectChange creation\nif hasattr(self.model, \"to_objectchange\"):\nobjectchanges = lookup.get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, extras_choices.ObjectChangeActionChoices.ACTION_DELETE)\ndef test_bulk_delete_objects(self):\n\"\"\"\n        DELETE a set of objects in a single request.\n        \"\"\"\nid_list = self.get_deletable_object_pks()\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"delete\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\ndata = [{\"id\": id} for id in id_list]\ninitial_count = self._get_queryset().count()\nresponse = self.client.delete(self._get_list_url(), data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_204_NO_CONTENT)\nself.assertEqual(self._get_queryset().count(), initial_count - len(id_list))\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.DeleteObjectViewTestCase.get_deletable_object","title":"<code>get_deletable_object()</code>","text":"<p>Get an instance that can be deleted.</p> <p>For some models this may just be any random object, but when we have FKs with <code>on_delete=models.PROTECT</code> (as is often the case) we need to find or create an instance that doesn't have such entanglements.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>def get_deletable_object(self):\n\"\"\"\n    Get an instance that can be deleted.\n    For some models this may just be any random object, but when we have FKs with `on_delete=models.PROTECT`\n    (as is often the case) we need to find or create an instance that doesn't have such entanglements.\n    \"\"\"\ninstance = testing.get_deletable_objects(self.model, self._get_queryset()).first()\nif instance is None:\nself.fail(\"Couldn't find a single deletable object!\")\nreturn instance\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.DeleteObjectViewTestCase.get_deletable_object_pks","title":"<code>get_deletable_object_pks()</code>","text":"<p>Get a list of PKs corresponding to objects that can be safely bulk-deleted.</p> <p>For some models this may just be any random objects, but when we have FKs with <code>on_delete=models.PROTECT</code> (as is often the case) we need to find or create an instance that doesn't have such entanglements.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>def get_deletable_object_pks(self):\n\"\"\"\n    Get a list of PKs corresponding to objects that can be safely bulk-deleted.\n    For some models this may just be any random objects, but when we have FKs with `on_delete=models.PROTECT`\n    (as is often the case) we need to find or create an instance that doesn't have such entanglements.\n    \"\"\"\ninstances = testing.get_deletable_objects(self.model, self._get_queryset()).values_list(\"pk\", flat=True)[:3]\nif len(instances) &lt; 3:\nself.fail(f\"Couldn't find 3 deletable objects, only found {len(instances)}!\")\nreturn instances\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.DeleteObjectViewTestCase.test_bulk_delete_objects","title":"<code>test_bulk_delete_objects()</code>","text":"<p>DELETE a set of objects in a single request.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>def test_bulk_delete_objects(self):\n\"\"\"\n    DELETE a set of objects in a single request.\n    \"\"\"\nid_list = self.get_deletable_object_pks()\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"delete\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\ndata = [{\"id\": id} for id in id_list]\ninitial_count = self._get_queryset().count()\nresponse = self.client.delete(self._get_list_url(), data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_204_NO_CONTENT)\nself.assertEqual(self._get_queryset().count(), initial_count - len(id_list))\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.DeleteObjectViewTestCase.test_delete_object","title":"<code>test_delete_object()</code>","text":"<p>DELETE a single object identified by its primary key.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>def test_delete_object(self):\n\"\"\"\n    DELETE a single object identified by its primary key.\n    \"\"\"\ninstance = self.get_deletable_object()\nurl = self._get_detail_url(instance)\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"delete\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\nresponse = self.client.delete(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_204_NO_CONTENT)\nself.assertFalse(self._get_queryset().filter(pk=instance.pk).exists())\n# Verify ObjectChange creation\nif hasattr(self.model, \"to_objectchange\"):\nobjectchanges = lookup.get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, extras_choices.ObjectChangeActionChoices.ACTION_DELETE)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.DeleteObjectViewTestCase.test_delete_object_without_permission","title":"<code>test_delete_object_without_permission()</code>","text":"<p>DELETE a single object without permission.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>def test_delete_object_without_permission(self):\n\"\"\"\n    DELETE a single object without permission.\n    \"\"\"\nurl = self._get_detail_url(self.get_deletable_object())\n# Try DELETE without permission\nwith testing.disable_warnings(\"django.request\"):\nresponse = self.client.delete(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_403_FORBIDDEN)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.GetObjectViewTestCase","title":"<code>GetObjectViewTestCase</code>","text":"<p>             Bases: <code>APITestCase</code></p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>class GetObjectViewTestCase(APITestCase):\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_get_object_anonymous(self):\n\"\"\"\n        GET a single object as an unauthenticated user.\n        \"\"\"\nurl = self._get_detail_url(self._get_queryset().first())\nif (\nself.model._meta.app_label,\nself.model._meta.model_name,\n) in settings.EXEMPT_EXCLUDE_MODELS:\n# Models listed in EXEMPT_EXCLUDE_MODELS should not be accessible to anonymous users\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_403_FORBIDDEN)\nelse:\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_get_object_without_permission(self):\n\"\"\"\n        GET a single object as an authenticated user without the required permission.\n        \"\"\"\nurl = self._get_detail_url(self._get_queryset().first())\n# Try GET without permission\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_403_FORBIDDEN)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_get_object(self):\n\"\"\"\n        GET a single object as an authenticated user with permission to view the object.\n        \"\"\"\nself.assertGreaterEqual(\nself._get_queryset().count(),\n2,\nf\"Test requires the creation of at least two {self.model} instances\",\n)\ninstance1, instance2 = self._get_queryset()[:2]\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": instance1.pk},\nactions=[\"view\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET to non-permitted object\nurl = self._get_detail_url(instance2)\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_404_NOT_FOUND)\n# Try GET to permitted object\nurl = self._get_detail_url(instance1)\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\n# Fields that should be present in *ALL* model serializers:\nself.assertIn(\"id\", response.data)\nself.assertEqual(str(response.data[\"id\"]), str(instance1.pk))  # coerce to str to handle both int and uuid\nself.assertIn(\"url\", response.data)\nself.assertIn(\"display\", response.data)\nself.assertIn(\"natural_slug\", response.data)\nself.assertIsInstance(response.data[\"display\"], str)\n# Fields that should be present in appropriate model serializers:\nif issubclass(self.model, extras_models.ChangeLoggedModel):\nself.assertIn(\"created\", response.data)\nself.assertIn(\"last_updated\", response.data)\n# Fields that should be absent by default (opt-in fields):\nself.assertNotIn(\"computed_fields\", response.data)\nself.assertNotIn(\"relationships\", response.data)\n# Content that should never be present:\nself.assert_no_verboten_content(response)\n# If opt-in fields are supported on this model, make sure they can be opted into\ncustom_fields_registry = registry.registry[\"model_features\"][\"custom_fields\"]\n# computed fields and custom fields use the same registry\ncf_supported = self.model._meta.model_name in custom_fields_registry.get(self.model._meta.app_label, {})\nif cf_supported:  # custom_fields is not an opt-in field, it should always be present if supported\nself.assertIn(\"custom_fields\", response.data)\nself.assertIsInstance(response.data[\"custom_fields\"], dict)\nrelationships_registry = registry.registry[\"model_features\"][\"relationships\"]\nrel_supported = self.model._meta.model_name in relationships_registry.get(self.model._meta.app_label, {})\nif cf_supported or rel_supported:\nquery_params = []\nif cf_supported:\nquery_params.append(\"include=computed_fields\")\nif rel_supported:\nquery_params.append(\"include=relationships\")\nquery_string = \"&amp;\".join(query_params)\nurl = f\"{url}?{query_string}\"\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nif cf_supported:\nself.assertIn(\"computed_fields\", response.data)\nself.assertIsInstance(response.data[\"computed_fields\"], dict)\nelse:\nself.assertNotIn(\"computed_fields\", response.data)\nif rel_supported:\nself.assertIn(\"relationships\", response.data)\nself.assertIsInstance(response.data[\"relationships\"], dict)\nelse:\nself.assertNotIn(\"relationships\", response.data)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_options_object(self):\n\"\"\"\n        Make an OPTIONS request for a single object.\n        \"\"\"\nurl = self._get_detail_url(self._get_queryset().first())\nresponse = self.client.options(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nwith self.subTest(\"Assert Detail View Config is generated well\"):\n# Namings Help\n# 1. detail_view_config: This is the detail view config set in the serializer.Meta.detail_view_config\n# 2. detail_view_schema: This is the retrieve schema generated from an OPTIONS request.\n# 3. advanced_view_schema: This is the advanced tab schema generated from an OPTIONS request.\nserializer = get_serializer_for_model(self._get_queryset().model)\nadvanced_view_schema = response.data[\"view_options\"][\"retrieve\"][\"tabs\"][\"Advanced\"]\n# Get default advanced tab fields\nself.assertEqual(len(advanced_view_schema), 1)\nself.assertIn(\"Object Details\", advanced_view_schema[0])\nadvanced_tab_fields = advanced_view_schema[0].get(\"Object Details\")[\"fields\"]\nif detail_view_config := getattr(serializer.Meta, \"detail_view_config\", None):\ndetail_view_schema = response.data[\"view_options\"][\"retrieve\"][\"tabs\"][\nbettertitle(self._get_queryset().model._meta.verbose_name)\n]\nself.assertHttpStatus(response, status.HTTP_200_OK)\n# According to convention, fields in the advanced tab fields should not exist in\n# the `detail_view_schema`. Assert this is True.\nwith self.subTest(\"Assert advanced tab fields should not exist in the detail_view_schema.\"):\nif detail_view_config.get(\"include_others\"):\n# Handle \"Other Fields\" section specially as \"Other Field\" is dynamically added\n# by Nautobot and is not part of the serializer-defined detail_view_config\nother_fields = detail_view_schema[0][\"Other Fields\"][\"fields\"]\nfor field in advanced_tab_fields:\nself.assertNotIn(field, other_fields)\nfor col_idx, col in enumerate(detail_view_schema):\nfor group_title, group in col.items():\nif group_title == \"Other Fields\":\ncontinue\ngroup_fields = group[\"fields\"]\n# Config on the serializer\nif (\ncol_idx &lt; len(detail_view_config[\"layout\"])\nand group_title in detail_view_config[\"layout\"][col_idx]\n):\nfields = detail_view_config[\"layout\"][col_idx][group_title][\"fields\"]\nelse:\nfields = []\n# Fields that are in the detail_view_schema must not be in the advanced tab as well\nfor field in group_fields:\nself.assertNotIn(field, advanced_tab_fields)\n# Fields that are explicit in the detail_view_config must remain as such in the schema\nfor field in fields:\nif field not in advanced_tab_fields:\nself.assertIn(field, group_fields)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.GetObjectViewTestCase.test_get_object","title":"<code>test_get_object()</code>","text":"<p>GET a single object as an authenticated user with permission to view the object.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_get_object(self):\n\"\"\"\n    GET a single object as an authenticated user with permission to view the object.\n    \"\"\"\nself.assertGreaterEqual(\nself._get_queryset().count(),\n2,\nf\"Test requires the creation of at least two {self.model} instances\",\n)\ninstance1, instance2 = self._get_queryset()[:2]\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": instance1.pk},\nactions=[\"view\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET to non-permitted object\nurl = self._get_detail_url(instance2)\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_404_NOT_FOUND)\n# Try GET to permitted object\nurl = self._get_detail_url(instance1)\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\n# Fields that should be present in *ALL* model serializers:\nself.assertIn(\"id\", response.data)\nself.assertEqual(str(response.data[\"id\"]), str(instance1.pk))  # coerce to str to handle both int and uuid\nself.assertIn(\"url\", response.data)\nself.assertIn(\"display\", response.data)\nself.assertIn(\"natural_slug\", response.data)\nself.assertIsInstance(response.data[\"display\"], str)\n# Fields that should be present in appropriate model serializers:\nif issubclass(self.model, extras_models.ChangeLoggedModel):\nself.assertIn(\"created\", response.data)\nself.assertIn(\"last_updated\", response.data)\n# Fields that should be absent by default (opt-in fields):\nself.assertNotIn(\"computed_fields\", response.data)\nself.assertNotIn(\"relationships\", response.data)\n# Content that should never be present:\nself.assert_no_verboten_content(response)\n# If opt-in fields are supported on this model, make sure they can be opted into\ncustom_fields_registry = registry.registry[\"model_features\"][\"custom_fields\"]\n# computed fields and custom fields use the same registry\ncf_supported = self.model._meta.model_name in custom_fields_registry.get(self.model._meta.app_label, {})\nif cf_supported:  # custom_fields is not an opt-in field, it should always be present if supported\nself.assertIn(\"custom_fields\", response.data)\nself.assertIsInstance(response.data[\"custom_fields\"], dict)\nrelationships_registry = registry.registry[\"model_features\"][\"relationships\"]\nrel_supported = self.model._meta.model_name in relationships_registry.get(self.model._meta.app_label, {})\nif cf_supported or rel_supported:\nquery_params = []\nif cf_supported:\nquery_params.append(\"include=computed_fields\")\nif rel_supported:\nquery_params.append(\"include=relationships\")\nquery_string = \"&amp;\".join(query_params)\nurl = f\"{url}?{query_string}\"\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nif cf_supported:\nself.assertIn(\"computed_fields\", response.data)\nself.assertIsInstance(response.data[\"computed_fields\"], dict)\nelse:\nself.assertNotIn(\"computed_fields\", response.data)\nif rel_supported:\nself.assertIn(\"relationships\", response.data)\nself.assertIsInstance(response.data[\"relationships\"], dict)\nelse:\nself.assertNotIn(\"relationships\", response.data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.GetObjectViewTestCase.test_get_object_anonymous","title":"<code>test_get_object_anonymous()</code>","text":"<p>GET a single object as an unauthenticated user.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_get_object_anonymous(self):\n\"\"\"\n    GET a single object as an unauthenticated user.\n    \"\"\"\nurl = self._get_detail_url(self._get_queryset().first())\nif (\nself.model._meta.app_label,\nself.model._meta.model_name,\n) in settings.EXEMPT_EXCLUDE_MODELS:\n# Models listed in EXEMPT_EXCLUDE_MODELS should not be accessible to anonymous users\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_403_FORBIDDEN)\nelse:\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.GetObjectViewTestCase.test_get_object_without_permission","title":"<code>test_get_object_without_permission()</code>","text":"<p>GET a single object as an authenticated user without the required permission.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_get_object_without_permission(self):\n\"\"\"\n    GET a single object as an authenticated user without the required permission.\n    \"\"\"\nurl = self._get_detail_url(self._get_queryset().first())\n# Try GET without permission\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_403_FORBIDDEN)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.GetObjectViewTestCase.test_options_object","title":"<code>test_options_object()</code>","text":"<p>Make an OPTIONS request for a single object.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_options_object(self):\n\"\"\"\n    Make an OPTIONS request for a single object.\n    \"\"\"\nurl = self._get_detail_url(self._get_queryset().first())\nresponse = self.client.options(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nwith self.subTest(\"Assert Detail View Config is generated well\"):\n# Namings Help\n# 1. detail_view_config: This is the detail view config set in the serializer.Meta.detail_view_config\n# 2. detail_view_schema: This is the retrieve schema generated from an OPTIONS request.\n# 3. advanced_view_schema: This is the advanced tab schema generated from an OPTIONS request.\nserializer = get_serializer_for_model(self._get_queryset().model)\nadvanced_view_schema = response.data[\"view_options\"][\"retrieve\"][\"tabs\"][\"Advanced\"]\n# Get default advanced tab fields\nself.assertEqual(len(advanced_view_schema), 1)\nself.assertIn(\"Object Details\", advanced_view_schema[0])\nadvanced_tab_fields = advanced_view_schema[0].get(\"Object Details\")[\"fields\"]\nif detail_view_config := getattr(serializer.Meta, \"detail_view_config\", None):\ndetail_view_schema = response.data[\"view_options\"][\"retrieve\"][\"tabs\"][\nbettertitle(self._get_queryset().model._meta.verbose_name)\n]\nself.assertHttpStatus(response, status.HTTP_200_OK)\n# According to convention, fields in the advanced tab fields should not exist in\n# the `detail_view_schema`. Assert this is True.\nwith self.subTest(\"Assert advanced tab fields should not exist in the detail_view_schema.\"):\nif detail_view_config.get(\"include_others\"):\n# Handle \"Other Fields\" section specially as \"Other Field\" is dynamically added\n# by Nautobot and is not part of the serializer-defined detail_view_config\nother_fields = detail_view_schema[0][\"Other Fields\"][\"fields\"]\nfor field in advanced_tab_fields:\nself.assertNotIn(field, other_fields)\nfor col_idx, col in enumerate(detail_view_schema):\nfor group_title, group in col.items():\nif group_title == \"Other Fields\":\ncontinue\ngroup_fields = group[\"fields\"]\n# Config on the serializer\nif (\ncol_idx &lt; len(detail_view_config[\"layout\"])\nand group_title in detail_view_config[\"layout\"][col_idx]\n):\nfields = detail_view_config[\"layout\"][col_idx][group_title][\"fields\"]\nelse:\nfields = []\n# Fields that are in the detail_view_schema must not be in the advanced tab as well\nfor field in group_fields:\nself.assertNotIn(field, advanced_tab_fields)\n# Fields that are explicit in the detail_view_config must remain as such in the schema\nfor field in fields:\nif field not in advanced_tab_fields:\nself.assertIn(field, group_fields)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.ListObjectsViewTestCase","title":"<code>ListObjectsViewTestCase</code>","text":"<p>             Bases: <code>APITestCase</code></p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>class ListObjectsViewTestCase(APITestCase):\nchoices_fields = None\nfilterset = None\ndef get_filterset(self):\nreturn self.filterset or lookup.get_filterset_for_model(self.model)\ndef get_depth_fields(self):\n\"\"\"Get a list of model fields that could be tested with the ?depth query parameter\"\"\"\ndepth_fields = []\nfor field in self.model._meta.fields:\nif not field.name.startswith(\"_\"):\nif isinstance(field, (ForeignKey, GenericForeignKey, ManyToManyField, core_fields.TagsField)) and (\n# we represent content-types as \"app_label.modelname\" rather than as FKs\nfield.related_model != ContentType\n# user is a model field on Token but not a field on TokenSerializer\nand not (field.name == \"user\" and self.model == users_models.Token)\n):\ndepth_fields.append(field.name)\nreturn depth_fields\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_list_objects_anonymous(self):\n\"\"\"\n        GET a list of objects as an unauthenticated user.\n        \"\"\"\nurl = self._get_list_url()\nif (\nself.model._meta.app_label,\nself.model._meta.model_name,\n) in settings.EXEMPT_EXCLUDE_MODELS:\n# Models listed in EXEMPT_EXCLUDE_MODELS should not be accessible to anonymous users\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_403_FORBIDDEN)\nelse:\n# TODO(Glenn): if we're passing **self.header, we are *by definition* **NOT** anonymous!!\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), self._get_queryset().count())\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_depth_0(self):\n\"\"\"\n        GET a list of objects using the \"?depth=0\" parameter.\n        \"\"\"\ndepth_fields = self.get_depth_fields()\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nurl = f\"{self._get_list_url()}?depth=0\"\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), self._get_queryset().count())\nself.assert_no_verboten_content(response)\nfor response_data in response.data[\"results\"]:\nfor field in depth_fields:\nself.assertIn(field, response_data)\nif isinstance(response_data[field], list):\nfor entry in response_data[field]:\nself.assertIsInstance(entry, dict)\nself.assertTrue(is_uuid(entry[\"id\"]))\nelse:\nif response_data[field] is not None:\nself.assertIsInstance(response_data[field], dict)\nurl = response_data[field][\"url\"]\npk = response_data[field][\"id\"]\nobject_type = response_data[field][\"object_type\"]\n# The response should be a brief API object, containing an ID, object_type, and a\n# URL ending in the UUID of the relevant object:\n# http://nautobot.example.com/api/circuits/providers/&lt;uuid&gt;/\n#                                                    ^^^^^^\nself.assertTrue(is_uuid(url.split(\"/\")[-2]))\nself.assertTrue(is_uuid(pk))\nwith self.subTest(f\"Assert object_type {object_type} is valid\"):\napp_label, model_name = object_type.split(\".\")\nContentType.objects.get(app_label=app_label, model=model_name)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_depth_1(self):\n\"\"\"\n        GET a list of objects using the \"?depth=1\" parameter.\n        \"\"\"\ndepth_fields = self.get_depth_fields()\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nurl = f\"{self._get_list_url()}?depth=1\"\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), self._get_queryset().count())\nself.assert_no_verboten_content(response)\nfor response_data in response.data[\"results\"]:\nfor field in depth_fields:\nself.assertIn(field, response_data)\nif isinstance(response_data[field], list):\nfor entry in response_data[field]:\nself.assertIsInstance(entry, dict)\nself.assertTrue(is_uuid(entry[\"id\"]))\nelse:\nif response_data[field] is not None:\nself.assertIsInstance(response_data[field], dict)\nself.assertTrue(is_uuid(response_data[field][\"id\"]))\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_without_permission(self):\n\"\"\"\n        GET a list of objects as an authenticated user without the required permission.\n        \"\"\"\nurl = self._get_list_url()\n# Try GET without permission\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_403_FORBIDDEN)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects(self):\n\"\"\"\n        GET a list of objects as an authenticated user with permission to view the objects.\n        \"\"\"\nself.assertGreaterEqual(\nself._get_queryset().count(),\n3,\nf\"Test requires the creation of at least three {self.model} instances\",\n)\ninstance1, instance2 = self._get_queryset()[:2]\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk__in\": [instance1.pk, instance2.pk]},\nactions=[\"view\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET to permitted objects\nresponse = self.client.get(self._get_list_url(), **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), 2)\nself.assert_no_verboten_content(response)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_filtered(self):\n\"\"\"\n        GET a list of objects filtered by ID.\n        \"\"\"\nself.assertGreaterEqual(\nself._get_queryset().count(),\n3,\nf\"Test requires the creation of at least three {self.model} instances\",\n)\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\ninstance1, instance2 = self._get_queryset()[:2]\nresponse = self.client.get(f\"{self._get_list_url()}?id={instance1.pk}&amp;id={instance2.pk}\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), 2)\nfor entry in response.data[\"results\"]:\nself.assertIn(str(entry[\"id\"]), [str(instance1.pk), str(instance2.pk)])\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_ascending_ordered(self):\n# Simple sorting check for models with a \"name\" field\n# TreeModels don't support sorting at this time (order_by is not supported by TreeQuerySet)\n#   They will pass api == queryset tests below but will fail the user expected sort test\nif hasattr(self.model, \"name\") and not issubclass(self.model, TreeModel):\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nresponse = self.client.get(f\"{self._get_list_url()}?sort=name&amp;limit=3\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nresult_list = list(map(lambda p: p[\"name\"], response.data[\"results\"]))\nself.assertEqual(\nresult_list,\nlist(self._get_queryset().order_by(\"name\").values_list(\"name\", flat=True)[:3]),\n\"API sort not identical to QuerySet.order_by\",\n)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_descending_ordered(self):\n# Simple sorting check for models with a \"name\" field\n# TreeModels don't support sorting at this time (order_by is not supported by TreeQuerySet)\n#   They will pass api == queryset tests below but will fail the user expected sort test\nif hasattr(self.model, \"name\") and not issubclass(self.model, TreeModel):\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nresponse = self.client.get(f\"{self._get_list_url()}?sort=-name&amp;limit=3\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nresult_list = list(map(lambda p: p[\"name\"], response.data[\"results\"]))\nself.assertEqual(\nresult_list,\nlist(self._get_queryset().order_by(\"-name\").values_list(\"name\", flat=True)[:3]),\n\"API sort not identical to QuerySet.order_by\",\n)\nresponse_ascending = self.client.get(f\"{self._get_list_url()}?sort=name&amp;limit=3\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nresult_list_ascending = list(map(lambda p: p[\"name\"], response_ascending.data[\"results\"]))\nself.assertNotEqual(\nresult_list,\nresult_list_ascending,\n\"Same results obtained when sorting by name and by -name (QuerySet not ordering)\",\n)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[], STRICT_FILTERING=True)\ndef test_list_objects_unknown_filter_strict_filtering(self):\n\"\"\"\n        GET a list of objects with an unknown filter parameter and strict filtering, expect a 400 response.\n        \"\"\"\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nwith testing.disable_warnings(\"django.request\"):\nresponse = self.client.get(f\"{self._get_list_url()}?ice_cream_flavor=rocky-road\", **self.header)\nself.assertHttpStatus(response, status.HTTP_400_BAD_REQUEST)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"ice_cream_flavor\", response.data)\nself.assertIsInstance(response.data[\"ice_cream_flavor\"], list)\nself.assertEqual(\"Unknown filter field\", str(response.data[\"ice_cream_flavor\"][0]))\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[], STRICT_FILTERING=False)\ndef test_list_objects_unknown_filter_no_strict_filtering(self):\n\"\"\"\n        GET a list of objects with an unknown filter parameter and no strict filtering, expect it to be ignored.\n        \"\"\"\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nwith self.assertLogs(\"nautobot.core.filters\") as cm:\nresponse = self.client.get(f\"{self._get_list_url()}?ice_cream_flavor=rocky-road\", **self.header)\nself.assertEqual(\ncm.output,\n[\nf\"WARNING:nautobot.core.filters:{self.get_filterset().__name__}: \"\n'Unknown filter field \"ice_cream_flavor\"',\n],\n)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), self._get_queryset().count())\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_options_objects(self):\n\"\"\"\n        Make an OPTIONS request for a list endpoint.\n        \"\"\"\nresponse = self.client.options(self._get_list_url(), **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_csv(self):\n\"\"\"\n        GET a list of objects in CSV format as an authenticated user with permission to view some objects.\n        \"\"\"\nself.assertGreaterEqual(\nself._get_queryset().count(),\n3,\nf\"Test requires the creation of at least three {self.model} instances\",\n)\ninstance1, instance2, instance3 = self._get_queryset()[:3]\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk__in\": [instance1.pk, instance2.pk]},\nactions=[\"view\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try filtered GET to objects specifying CSV format as a query parameter\nresponse_1 = self.client.get(\nf\"{self._get_list_url()}?format=csv&amp;id={instance1.pk}&amp;id={instance3.pk}\", **self.header\n)\nself.assertHttpStatus(response_1, status.HTTP_200_OK)\nself.assertEqual(response_1.get(\"Content-Type\"), \"text/csv; charset=UTF-8\")\nself.assertEqual(\nresponse_1.get(\"Content-Disposition\"),\nf'attachment; filename=\"nautobot_{self.model.__name__.lower()}_data.csv\"',\n)\n# Try same request specifying CSV format via the ACCEPT header\nresponse_2 = self.client.get(\nf\"{self._get_list_url()}?id={instance1.pk}&amp;id={instance3.pk}\", **self.header, HTTP_ACCEPT=\"text/csv\"\n)\nself.assertHttpStatus(response_2, status.HTTP_200_OK)\nself.assertEqual(response_2.get(\"Content-Type\"), \"text/csv; charset=UTF-8\")\nself.assertEqual(\nresponse_2.get(\"Content-Disposition\"),\nf'attachment; filename=\"nautobot_{self.model.__name__.lower()}_data.csv\"',\n)\nself.maxDiff = None\n# This check is more useful than it might seem. Any related object that wasn't CSV-converted correctly\n# will likely be rendered incorrectly as an API URL, and that API URL *will* differ between the\n# two responses based on the inclusion or omission of the \"?format=csv\" parameter. If\n# you run into this, make sure all serializers have `Meta.fields = \"__all__\"` set.\nself.assertEqual(\nresponse_1.content.decode(response_1.charset), response_2.content.decode(response_2.charset)\n)\n# Load the csv data back into a list of object dicts\nreader = csv.DictReader(StringIO(response_1.content.decode(response_1.charset)))\nrows = list(reader)\n# Should only have one entry (instance1) since we filtered out instance2 and permissions block instance3\nself.assertEqual(1, len(rows))\nself.assertEqual(rows[0][\"id\"], str(instance1.pk))\nself.assertEqual(rows[0][\"display\"], getattr(instance1, \"display\", str(instance1)))\nif hasattr(self.model, \"_custom_field_data\"):\ncustom_fields = extras_models.CustomField.objects.get_for_model(self.model)\nfor cf in custom_fields:\nself.assertIn(f\"cf_{cf.key}\", rows[0])\nself.assertEqual(rows[0][f\"cf_{cf.key}\"], instance1._custom_field_data.get(cf.key) or \"\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.ListObjectsViewTestCase.get_depth_fields","title":"<code>get_depth_fields()</code>","text":"<p>Get a list of model fields that could be tested with the ?depth query parameter</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>def get_depth_fields(self):\n\"\"\"Get a list of model fields that could be tested with the ?depth query parameter\"\"\"\ndepth_fields = []\nfor field in self.model._meta.fields:\nif not field.name.startswith(\"_\"):\nif isinstance(field, (ForeignKey, GenericForeignKey, ManyToManyField, core_fields.TagsField)) and (\n# we represent content-types as \"app_label.modelname\" rather than as FKs\nfield.related_model != ContentType\n# user is a model field on Token but not a field on TokenSerializer\nand not (field.name == \"user\" and self.model == users_models.Token)\n):\ndepth_fields.append(field.name)\nreturn depth_fields\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.ListObjectsViewTestCase.test_list_objects","title":"<code>test_list_objects()</code>","text":"<p>GET a list of objects as an authenticated user with permission to view the objects.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects(self):\n\"\"\"\n    GET a list of objects as an authenticated user with permission to view the objects.\n    \"\"\"\nself.assertGreaterEqual(\nself._get_queryset().count(),\n3,\nf\"Test requires the creation of at least three {self.model} instances\",\n)\ninstance1, instance2 = self._get_queryset()[:2]\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk__in\": [instance1.pk, instance2.pk]},\nactions=[\"view\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET to permitted objects\nresponse = self.client.get(self._get_list_url(), **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), 2)\nself.assert_no_verboten_content(response)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.ListObjectsViewTestCase.test_list_objects_anonymous","title":"<code>test_list_objects_anonymous()</code>","text":"<p>GET a list of objects as an unauthenticated user.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_list_objects_anonymous(self):\n\"\"\"\n    GET a list of objects as an unauthenticated user.\n    \"\"\"\nurl = self._get_list_url()\nif (\nself.model._meta.app_label,\nself.model._meta.model_name,\n) in settings.EXEMPT_EXCLUDE_MODELS:\n# Models listed in EXEMPT_EXCLUDE_MODELS should not be accessible to anonymous users\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_403_FORBIDDEN)\nelse:\n# TODO(Glenn): if we're passing **self.header, we are *by definition* **NOT** anonymous!!\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), self._get_queryset().count())\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.ListObjectsViewTestCase.test_list_objects_csv","title":"<code>test_list_objects_csv()</code>","text":"<p>GET a list of objects in CSV format as an authenticated user with permission to view some objects.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_csv(self):\n\"\"\"\n    GET a list of objects in CSV format as an authenticated user with permission to view some objects.\n    \"\"\"\nself.assertGreaterEqual(\nself._get_queryset().count(),\n3,\nf\"Test requires the creation of at least three {self.model} instances\",\n)\ninstance1, instance2, instance3 = self._get_queryset()[:3]\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk__in\": [instance1.pk, instance2.pk]},\nactions=[\"view\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try filtered GET to objects specifying CSV format as a query parameter\nresponse_1 = self.client.get(\nf\"{self._get_list_url()}?format=csv&amp;id={instance1.pk}&amp;id={instance3.pk}\", **self.header\n)\nself.assertHttpStatus(response_1, status.HTTP_200_OK)\nself.assertEqual(response_1.get(\"Content-Type\"), \"text/csv; charset=UTF-8\")\nself.assertEqual(\nresponse_1.get(\"Content-Disposition\"),\nf'attachment; filename=\"nautobot_{self.model.__name__.lower()}_data.csv\"',\n)\n# Try same request specifying CSV format via the ACCEPT header\nresponse_2 = self.client.get(\nf\"{self._get_list_url()}?id={instance1.pk}&amp;id={instance3.pk}\", **self.header, HTTP_ACCEPT=\"text/csv\"\n)\nself.assertHttpStatus(response_2, status.HTTP_200_OK)\nself.assertEqual(response_2.get(\"Content-Type\"), \"text/csv; charset=UTF-8\")\nself.assertEqual(\nresponse_2.get(\"Content-Disposition\"),\nf'attachment; filename=\"nautobot_{self.model.__name__.lower()}_data.csv\"',\n)\nself.maxDiff = None\n# This check is more useful than it might seem. Any related object that wasn't CSV-converted correctly\n# will likely be rendered incorrectly as an API URL, and that API URL *will* differ between the\n# two responses based on the inclusion or omission of the \"?format=csv\" parameter. If\n# you run into this, make sure all serializers have `Meta.fields = \"__all__\"` set.\nself.assertEqual(\nresponse_1.content.decode(response_1.charset), response_2.content.decode(response_2.charset)\n)\n# Load the csv data back into a list of object dicts\nreader = csv.DictReader(StringIO(response_1.content.decode(response_1.charset)))\nrows = list(reader)\n# Should only have one entry (instance1) since we filtered out instance2 and permissions block instance3\nself.assertEqual(1, len(rows))\nself.assertEqual(rows[0][\"id\"], str(instance1.pk))\nself.assertEqual(rows[0][\"display\"], getattr(instance1, \"display\", str(instance1)))\nif hasattr(self.model, \"_custom_field_data\"):\ncustom_fields = extras_models.CustomField.objects.get_for_model(self.model)\nfor cf in custom_fields:\nself.assertIn(f\"cf_{cf.key}\", rows[0])\nself.assertEqual(rows[0][f\"cf_{cf.key}\"], instance1._custom_field_data.get(cf.key) or \"\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.ListObjectsViewTestCase.test_list_objects_depth_0","title":"<code>test_list_objects_depth_0()</code>","text":"<p>GET a list of objects using the \"?depth=0\" parameter.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_depth_0(self):\n\"\"\"\n    GET a list of objects using the \"?depth=0\" parameter.\n    \"\"\"\ndepth_fields = self.get_depth_fields()\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nurl = f\"{self._get_list_url()}?depth=0\"\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), self._get_queryset().count())\nself.assert_no_verboten_content(response)\nfor response_data in response.data[\"results\"]:\nfor field in depth_fields:\nself.assertIn(field, response_data)\nif isinstance(response_data[field], list):\nfor entry in response_data[field]:\nself.assertIsInstance(entry, dict)\nself.assertTrue(is_uuid(entry[\"id\"]))\nelse:\nif response_data[field] is not None:\nself.assertIsInstance(response_data[field], dict)\nurl = response_data[field][\"url\"]\npk = response_data[field][\"id\"]\nobject_type = response_data[field][\"object_type\"]\n# The response should be a brief API object, containing an ID, object_type, and a\n# URL ending in the UUID of the relevant object:\n# http://nautobot.example.com/api/circuits/providers/&lt;uuid&gt;/\n#                                                    ^^^^^^\nself.assertTrue(is_uuid(url.split(\"/\")[-2]))\nself.assertTrue(is_uuid(pk))\nwith self.subTest(f\"Assert object_type {object_type} is valid\"):\napp_label, model_name = object_type.split(\".\")\nContentType.objects.get(app_label=app_label, model=model_name)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.ListObjectsViewTestCase.test_list_objects_depth_1","title":"<code>test_list_objects_depth_1()</code>","text":"<p>GET a list of objects using the \"?depth=1\" parameter.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_depth_1(self):\n\"\"\"\n    GET a list of objects using the \"?depth=1\" parameter.\n    \"\"\"\ndepth_fields = self.get_depth_fields()\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nurl = f\"{self._get_list_url()}?depth=1\"\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), self._get_queryset().count())\nself.assert_no_verboten_content(response)\nfor response_data in response.data[\"results\"]:\nfor field in depth_fields:\nself.assertIn(field, response_data)\nif isinstance(response_data[field], list):\nfor entry in response_data[field]:\nself.assertIsInstance(entry, dict)\nself.assertTrue(is_uuid(entry[\"id\"]))\nelse:\nif response_data[field] is not None:\nself.assertIsInstance(response_data[field], dict)\nself.assertTrue(is_uuid(response_data[field][\"id\"]))\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.ListObjectsViewTestCase.test_list_objects_filtered","title":"<code>test_list_objects_filtered()</code>","text":"<p>GET a list of objects filtered by ID.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_filtered(self):\n\"\"\"\n    GET a list of objects filtered by ID.\n    \"\"\"\nself.assertGreaterEqual(\nself._get_queryset().count(),\n3,\nf\"Test requires the creation of at least three {self.model} instances\",\n)\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\ninstance1, instance2 = self._get_queryset()[:2]\nresponse = self.client.get(f\"{self._get_list_url()}?id={instance1.pk}&amp;id={instance2.pk}\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), 2)\nfor entry in response.data[\"results\"]:\nself.assertIn(str(entry[\"id\"]), [str(instance1.pk), str(instance2.pk)])\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.ListObjectsViewTestCase.test_list_objects_unknown_filter_no_strict_filtering","title":"<code>test_list_objects_unknown_filter_no_strict_filtering()</code>","text":"<p>GET a list of objects with an unknown filter parameter and no strict filtering, expect it to be ignored.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[], STRICT_FILTERING=False)\ndef test_list_objects_unknown_filter_no_strict_filtering(self):\n\"\"\"\n    GET a list of objects with an unknown filter parameter and no strict filtering, expect it to be ignored.\n    \"\"\"\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nwith self.assertLogs(\"nautobot.core.filters\") as cm:\nresponse = self.client.get(f\"{self._get_list_url()}?ice_cream_flavor=rocky-road\", **self.header)\nself.assertEqual(\ncm.output,\n[\nf\"WARNING:nautobot.core.filters:{self.get_filterset().__name__}: \"\n'Unknown filter field \"ice_cream_flavor\"',\n],\n)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), self._get_queryset().count())\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.ListObjectsViewTestCase.test_list_objects_unknown_filter_strict_filtering","title":"<code>test_list_objects_unknown_filter_strict_filtering()</code>","text":"<p>GET a list of objects with an unknown filter parameter and strict filtering, expect a 400 response.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[], STRICT_FILTERING=True)\ndef test_list_objects_unknown_filter_strict_filtering(self):\n\"\"\"\n    GET a list of objects with an unknown filter parameter and strict filtering, expect a 400 response.\n    \"\"\"\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nwith testing.disable_warnings(\"django.request\"):\nresponse = self.client.get(f\"{self._get_list_url()}?ice_cream_flavor=rocky-road\", **self.header)\nself.assertHttpStatus(response, status.HTTP_400_BAD_REQUEST)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"ice_cream_flavor\", response.data)\nself.assertIsInstance(response.data[\"ice_cream_flavor\"], list)\nself.assertEqual(\"Unknown filter field\", str(response.data[\"ice_cream_flavor\"][0]))\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.ListObjectsViewTestCase.test_list_objects_without_permission","title":"<code>test_list_objects_without_permission()</code>","text":"<p>GET a list of objects as an authenticated user without the required permission.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_without_permission(self):\n\"\"\"\n    GET a list of objects as an authenticated user without the required permission.\n    \"\"\"\nurl = self._get_list_url()\n# Try GET without permission\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(url, **self.header), status.HTTP_403_FORBIDDEN)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.ListObjectsViewTestCase.test_options_objects","title":"<code>test_options_objects()</code>","text":"<p>Make an OPTIONS request for a list endpoint.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_options_objects(self):\n\"\"\"\n    Make an OPTIONS request for a list endpoint.\n    \"\"\"\nresponse = self.client.options(self._get_list_url(), **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.NotesURLViewTestCase","title":"<code>NotesURLViewTestCase</code>","text":"<p>             Bases: <code>APITestCase</code></p> <p>Validate Notes URL on objects that have the Note model Mixin.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>class NotesURLViewTestCase(APITestCase):\n\"\"\"Validate Notes URL on objects that have the Note model Mixin.\"\"\"\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_notes_url_on_object(self):\nif not hasattr(self.model, \"notes\"):\nself.skipTest(\"Model doesn't appear to support Notes\")\ninstance = self._get_queryset().first()\nif not isinstance(instance.notes, QuerySet):\nself.skipTest(\"Model has a notes field but it doesn't appear to be Notes\")\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": instance.pk},\nactions=[\"view\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\nurl = self._get_detail_url(instance)\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIn(\"notes_url\", response.data)\nself.assertIn(f\"{url}notes/\", str(response.data[\"notes_url\"]))\nself.assertIn(instance.get_notes_url(api=True), str(response.data[\"notes_url\"]))\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_notes_url_functionality(self):\nif not hasattr(self.model, \"notes\"):\nself.skipTest(\"Model doesn't appear to support Notes\")\ninstance = self._get_queryset().first()\nif not isinstance(instance.notes, QuerySet):\nself.skipTest(\"Model has a notes field but it doesn't appear to be Notes\")\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nself.add_permissions(\"extras.add_note\")\n# Add note via REST API\nnotes_url = instance.get_notes_url(api=True)\nresponse = self.client.post(\nnotes_url,\n{\"note\": f\"This is a note for {instance}\"},\nformat=\"json\",\n**self.header,\n)\nself.assertHttpStatus(response, status.HTTP_201_CREATED)\nself.assertIsInstance(response.data, dict)\nself.assertEqual(f\"This is a note for {instance}\", response.data[\"note\"])\nself.assertEqual(str(self.user.pk), str(response.data[\"user\"][\"id\"]))\nself.assertEqual(str(instance.pk), str(response.data[\"assigned_object_id\"]))\nself.assertEqual(str(instance.pk), str(response.data[\"assigned_object\"][\"id\"]))\n# Get note via REST API\nresponse = self.client.get(notes_url, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_403_FORBIDDEN)\nself.add_permissions(\"extras.view_note\")\nresponse = self.client.get(notes_url, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertEqual(f\"This is a note for {instance}\", response.data[\"results\"][0][\"note\"])\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.TreeModelAPIViewTestCaseMixin","title":"<code>TreeModelAPIViewTestCaseMixin</code>","text":"<p>Test <code>?depth=2</code> query parameter for TreeModel</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>class TreeModelAPIViewTestCaseMixin:\n\"\"\"Test `?depth=2` query parameter for TreeModel\"\"\"\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_depth_2(self):\n\"\"\"\n        GET a list of objects using the \"?depth=2\" parameter.\n        TreeModel Only\n        \"\"\"\nfield = \"parent\"\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nurl = f\"{self._get_list_url()}?depth=2\"\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), self._get_queryset().count())\nresponse_data = response.data[\"results\"]\nfor data in response_data:\n# First Level Parent\nself.assertEqual(field in data, True)\nif data[field] is not None:\nself.assertIsInstance(data[field], dict)\nself.assertTrue(is_uuid(data[field][\"id\"]))\n# Second Level Parent\nself.assertIn(field, data[field])\nif data[field][field] is not None:\nself.assertIsInstance(data[field][field], dict)\nself.assertTrue(is_uuid(data[field][field][\"id\"]))\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.TreeModelAPIViewTestCaseMixin.test_list_objects_depth_2","title":"<code>test_list_objects_depth_2()</code>","text":"<p>GET a list of objects using the \"?depth=2\" parameter. TreeModel Only</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_depth_2(self):\n\"\"\"\n    GET a list of objects using the \"?depth=2\" parameter.\n    TreeModel Only\n    \"\"\"\nfield = \"parent\"\nself.add_permissions(f\"{self.model._meta.app_label}.view_{self.model._meta.model_name}\")\nurl = f\"{self._get_list_url()}?depth=2\"\nresponse = self.client.get(url, **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nself.assertIsInstance(response.data, dict)\nself.assertIn(\"results\", response.data)\nself.assertEqual(len(response.data[\"results\"]), self._get_queryset().count())\nresponse_data = response.data[\"results\"]\nfor data in response_data:\n# First Level Parent\nself.assertEqual(field in data, True)\nif data[field] is not None:\nself.assertIsInstance(data[field], dict)\nself.assertTrue(is_uuid(data[field][\"id\"]))\n# Second Level Parent\nself.assertIn(field, data[field])\nif data[field][field] is not None:\nself.assertIsInstance(data[field][field], dict)\nself.assertTrue(is_uuid(data[field][field][\"id\"]))\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.UpdateObjectViewTestCase","title":"<code>UpdateObjectViewTestCase</code>","text":"<p>             Bases: <code>APITestCase</code></p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>class UpdateObjectViewTestCase(APITestCase):\nupdate_data = {}\nbulk_update_data: Optional[dict] = None\nvalidation_excluded_fields = []\nchoices_fields = None\ndef test_update_object_without_permission(self):\n\"\"\"\n        PATCH a single object without permission.\n        \"\"\"\nurl = self._get_detail_url(self._get_queryset().first())\nupdate_data = self.update_data or getattr(self, \"create_data\")[0]\n# Try PATCH without permission\nwith testing.disable_warnings(\"django.request\"):\nresponse = self.client.patch(url, update_data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_403_FORBIDDEN)\ndef test_update_object(self):\n\"\"\"\n        PATCH a single object identified by its ID.\n        \"\"\"\ndef strip_serialized_object(this_object):\n\"\"\"\n            Only here to work around acceptable differences in PATCH response vs GET response which are known bugs.\n            \"\"\"\n# Work around for https://github.com/nautobot/nautobot/issues/3321\nthis_object.pop(\"last_updated\", None)\n# PATCH response always includes \"opt-in\" fields, but GET response does not.\nthis_object.pop(\"computed_fields\", None)\nthis_object.pop(\"config_context\", None)\nthis_object.pop(\"relationships\", None)\nfor value in this_object.values():\nif isinstance(value, dict):\nstrip_serialized_object(value)\nelif isinstance(value, list):\nfor list_dict in value:\nif isinstance(list_dict, dict):\nstrip_serialized_object(list_dict)\nself.maxDiff = None\ninstance = self._get_queryset().first()\nurl = self._get_detail_url(instance)\nupdate_data = self.update_data or getattr(self, \"create_data\")[0]\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Verify that an empty PATCH results in no change to the object.\n# This is to catch issues like https://github.com/nautobot/nautobot/issues/3533\n# Add object-level permission for GET\nobj_perm.actions = [\"view\"]\nobj_perm.save()\n# Get initial serialized object representation\nget_response = self.client.get(url, **self.header)\nself.assertHttpStatus(get_response, status.HTTP_200_OK)\ninitial_serialized_object = get_response.json()\nstrip_serialized_object(initial_serialized_object)\n# Redefine object-level permission for PATCH\nobj_perm.actions = [\"change\"]\nobj_perm.save()\n# Send empty PATCH request\nresponse = self.client.patch(url, {}, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nserialized_object = response.json()\nstrip_serialized_object(serialized_object)\nself.assertEqual(initial_serialized_object, serialized_object)\n# Verify ObjectChange creation -- yes, even though nothing actually changed\n# This may change (hah) at some point -- see https://github.com/nautobot/nautobot/issues/3321\nif hasattr(self.model, \"to_objectchange\"):\nobjectchanges = lookup.get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, extras_choices.ObjectChangeActionChoices.ACTION_UPDATE)\nobjectchanges.delete()\n# Verify that a PATCH with some data updates that data correctly.\nresponse = self.client.patch(url, update_data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\n# Check for unexpected side effects on fields we DIDN'T intend to update\nfor field in initial_serialized_object:\nif field not in update_data:\nself.assertEqual(initial_serialized_object[field], serialized_object[field])\ninstance.refresh_from_db()\nself.assertInstanceEqual(instance, update_data, exclude=self.validation_excluded_fields, api=True)\n# Verify ObjectChange creation\nif hasattr(self.model, \"to_objectchange\"):\nobjectchanges = lookup.get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, extras_choices.ObjectChangeActionChoices.ACTION_UPDATE)\ndef test_get_put_round_trip(self):\n\"\"\"GET and then PUT an object and verify that it's accepted and unchanged.\"\"\"\nself.maxDiff = None\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"view\", \"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\ninstance = self._get_queryset().first()\nurl = self._get_detail_url(instance)\n# GET object representation\nopt_in_fields = getattr(get_serializer_for_model(self.model).Meta, \"opt_in_fields\", None)\nif opt_in_fields:\nurl += \"?\" + \"&amp;\".join([f\"include={field}\" for field in opt_in_fields])\nget_response = self.client.get(url, **self.header)\nself.assertHttpStatus(get_response, status.HTTP_200_OK)\ninitial_serialized_object = get_response.json()\n# PUT same object representation\nput_response = self.client.put(url, initial_serialized_object, format=\"json\", **self.header)\nself.assertHttpStatus(put_response, status.HTTP_200_OK, initial_serialized_object)\nupdated_serialized_object = put_response.json()\n# Work around for https://github.com/nautobot/nautobot/issues/3321\ninitial_serialized_object.pop(\"last_updated\", None)\nupdated_serialized_object.pop(\"last_updated\", None)\nself.assertEqual(initial_serialized_object, updated_serialized_object)\ndef test_bulk_update_objects(self):\n\"\"\"\n        PATCH a set of objects in a single request.\n        \"\"\"\nif self.bulk_update_data is None:\nself.skipTest(\"Bulk update data not set\")\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\nid_list = list(self._get_queryset().values_list(\"id\", flat=True)[:3])\nself.assertEqual(len(id_list), 3, \"Insufficient number of objects to test bulk update\")\ndata = [{\"id\": id, **self.bulk_update_data} for id in id_list]\nresponse = self.client.patch(self._get_list_url(), data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nfor i, obj in enumerate(response.data):\nfor field, _value in self.bulk_update_data.items():\nself.assertIn(\nfield,\nobj,\nf\"Bulk update field '{field}' missing from object {i} in response\",\n)\n# TODO(Glenn): shouldn't we also check that obj[field] == value?\nfor instance in self._get_queryset().filter(pk__in=id_list):\nself.assertInstanceEqual(\ninstance,\nself.bulk_update_data,\nexclude=self.validation_excluded_fields,\napi=True,\n)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_options_returns_expected_choices(self):\n\"\"\"\n        Make an OPTIONS request for a list endpoint and validate choices match expected choices for serializer.\n        \"\"\"\n# Set self.choices_fields as empty set to compare classes that shouldn't have any choices on serializer.\nif not self.choices_fields:\nself.choices_fields = set()\n# Save self.user as superuser to be able to view available choices on list views.\nself.user.is_superuser = True\nself.user.save()\nresponse = self.client.options(self._get_list_url(), **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\ndata = response.json()\nself.assertIn(\"actions\", data)\n# Grab any field that has choices defined (fields with enums)\nif any(\n[\n\"POST\" in data[\"actions\"],\n\"PUT\" in data[\"actions\"],\n]\n):\nschema = data[\"schema\"]\nprops = schema[\"properties\"]\nfields = props.keys()\nfield_choices = set()\nfor field_name in fields:\nobj = props[field_name]\nif \"enum\" in obj and \"enumNames\" in obj:\nenum = obj[\"enum\"]\n# Zipping to assert that the enum and the mapping have the same number of items.\nmodel_field_choices = dict(zip(obj[\"enumNames\"], enum))\nself.assertEqual(len(enum), len(model_field_choices))\nfield_choices.add(field_name)\nelse:\nself.fail(f\"Neither PUT nor POST are available actions in: {data['actions']}\")\nself.assertEqual(\nset(self.choices_fields),\nfield_choices,\n\"All field names of choice fields for a given model serializer need to be manually added to \"\n\"self.choices_fields. If this is already the case, perhaps the serializer is implemented incorrectly?\",\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.UpdateObjectViewTestCase.test_bulk_update_objects","title":"<code>test_bulk_update_objects()</code>","text":"<p>PATCH a set of objects in a single request.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>def test_bulk_update_objects(self):\n\"\"\"\n    PATCH a set of objects in a single request.\n    \"\"\"\nif self.bulk_update_data is None:\nself.skipTest(\"Bulk update data not set\")\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\nid_list = list(self._get_queryset().values_list(\"id\", flat=True)[:3])\nself.assertEqual(len(id_list), 3, \"Insufficient number of objects to test bulk update\")\ndata = [{\"id\": id, **self.bulk_update_data} for id in id_list]\nresponse = self.client.patch(self._get_list_url(), data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nfor i, obj in enumerate(response.data):\nfor field, _value in self.bulk_update_data.items():\nself.assertIn(\nfield,\nobj,\nf\"Bulk update field '{field}' missing from object {i} in response\",\n)\n# TODO(Glenn): shouldn't we also check that obj[field] == value?\nfor instance in self._get_queryset().filter(pk__in=id_list):\nself.assertInstanceEqual(\ninstance,\nself.bulk_update_data,\nexclude=self.validation_excluded_fields,\napi=True,\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.UpdateObjectViewTestCase.test_get_put_round_trip","title":"<code>test_get_put_round_trip()</code>","text":"<p>GET and then PUT an object and verify that it's accepted and unchanged.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>def test_get_put_round_trip(self):\n\"\"\"GET and then PUT an object and verify that it's accepted and unchanged.\"\"\"\nself.maxDiff = None\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"view\", \"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\ninstance = self._get_queryset().first()\nurl = self._get_detail_url(instance)\n# GET object representation\nopt_in_fields = getattr(get_serializer_for_model(self.model).Meta, \"opt_in_fields\", None)\nif opt_in_fields:\nurl += \"?\" + \"&amp;\".join([f\"include={field}\" for field in opt_in_fields])\nget_response = self.client.get(url, **self.header)\nself.assertHttpStatus(get_response, status.HTTP_200_OK)\ninitial_serialized_object = get_response.json()\n# PUT same object representation\nput_response = self.client.put(url, initial_serialized_object, format=\"json\", **self.header)\nself.assertHttpStatus(put_response, status.HTTP_200_OK, initial_serialized_object)\nupdated_serialized_object = put_response.json()\n# Work around for https://github.com/nautobot/nautobot/issues/3321\ninitial_serialized_object.pop(\"last_updated\", None)\nupdated_serialized_object.pop(\"last_updated\", None)\nself.assertEqual(initial_serialized_object, updated_serialized_object)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.UpdateObjectViewTestCase.test_options_returns_expected_choices","title":"<code>test_options_returns_expected_choices()</code>","text":"<p>Make an OPTIONS request for a list endpoint and validate choices match expected choices for serializer.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_options_returns_expected_choices(self):\n\"\"\"\n    Make an OPTIONS request for a list endpoint and validate choices match expected choices for serializer.\n    \"\"\"\n# Set self.choices_fields as empty set to compare classes that shouldn't have any choices on serializer.\nif not self.choices_fields:\nself.choices_fields = set()\n# Save self.user as superuser to be able to view available choices on list views.\nself.user.is_superuser = True\nself.user.save()\nresponse = self.client.options(self._get_list_url(), **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\ndata = response.json()\nself.assertIn(\"actions\", data)\n# Grab any field that has choices defined (fields with enums)\nif any(\n[\n\"POST\" in data[\"actions\"],\n\"PUT\" in data[\"actions\"],\n]\n):\nschema = data[\"schema\"]\nprops = schema[\"properties\"]\nfields = props.keys()\nfield_choices = set()\nfor field_name in fields:\nobj = props[field_name]\nif \"enum\" in obj and \"enumNames\" in obj:\nenum = obj[\"enum\"]\n# Zipping to assert that the enum and the mapping have the same number of items.\nmodel_field_choices = dict(zip(obj[\"enumNames\"], enum))\nself.assertEqual(len(enum), len(model_field_choices))\nfield_choices.add(field_name)\nelse:\nself.fail(f\"Neither PUT nor POST are available actions in: {data['actions']}\")\nself.assertEqual(\nset(self.choices_fields),\nfield_choices,\n\"All field names of choice fields for a given model serializer need to be manually added to \"\n\"self.choices_fields. If this is already the case, perhaps the serializer is implemented incorrectly?\",\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.UpdateObjectViewTestCase.test_update_object","title":"<code>test_update_object()</code>","text":"<p>PATCH a single object identified by its ID.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>def test_update_object(self):\n\"\"\"\n    PATCH a single object identified by its ID.\n    \"\"\"\ndef strip_serialized_object(this_object):\n\"\"\"\n        Only here to work around acceptable differences in PATCH response vs GET response which are known bugs.\n        \"\"\"\n# Work around for https://github.com/nautobot/nautobot/issues/3321\nthis_object.pop(\"last_updated\", None)\n# PATCH response always includes \"opt-in\" fields, but GET response does not.\nthis_object.pop(\"computed_fields\", None)\nthis_object.pop(\"config_context\", None)\nthis_object.pop(\"relationships\", None)\nfor value in this_object.values():\nif isinstance(value, dict):\nstrip_serialized_object(value)\nelif isinstance(value, list):\nfor list_dict in value:\nif isinstance(list_dict, dict):\nstrip_serialized_object(list_dict)\nself.maxDiff = None\ninstance = self._get_queryset().first()\nurl = self._get_detail_url(instance)\nupdate_data = self.update_data or getattr(self, \"create_data\")[0]\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Verify that an empty PATCH results in no change to the object.\n# This is to catch issues like https://github.com/nautobot/nautobot/issues/3533\n# Add object-level permission for GET\nobj_perm.actions = [\"view\"]\nobj_perm.save()\n# Get initial serialized object representation\nget_response = self.client.get(url, **self.header)\nself.assertHttpStatus(get_response, status.HTTP_200_OK)\ninitial_serialized_object = get_response.json()\nstrip_serialized_object(initial_serialized_object)\n# Redefine object-level permission for PATCH\nobj_perm.actions = [\"change\"]\nobj_perm.save()\n# Send empty PATCH request\nresponse = self.client.patch(url, {}, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\nserialized_object = response.json()\nstrip_serialized_object(serialized_object)\nself.assertEqual(initial_serialized_object, serialized_object)\n# Verify ObjectChange creation -- yes, even though nothing actually changed\n# This may change (hah) at some point -- see https://github.com/nautobot/nautobot/issues/3321\nif hasattr(self.model, \"to_objectchange\"):\nobjectchanges = lookup.get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, extras_choices.ObjectChangeActionChoices.ACTION_UPDATE)\nobjectchanges.delete()\n# Verify that a PATCH with some data updates that data correctly.\nresponse = self.client.patch(url, update_data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_200_OK)\n# Check for unexpected side effects on fields we DIDN'T intend to update\nfor field in initial_serialized_object:\nif field not in update_data:\nself.assertEqual(initial_serialized_object[field], serialized_object[field])\ninstance.refresh_from_db()\nself.assertInstanceEqual(instance, update_data, exclude=self.validation_excluded_fields, api=True)\n# Verify ObjectChange creation\nif hasattr(self.model, \"to_objectchange\"):\nobjectchanges = lookup.get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, extras_choices.ObjectChangeActionChoices.ACTION_UPDATE)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.api.APIViewTestCases.UpdateObjectViewTestCase.test_update_object_without_permission","title":"<code>test_update_object_without_permission()</code>","text":"<p>PATCH a single object without permission.</p> Source code in <code>nautobot/core/testing/api.py</code> <pre><code>def test_update_object_without_permission(self):\n\"\"\"\n    PATCH a single object without permission.\n    \"\"\"\nurl = self._get_detail_url(self._get_queryset().first())\nupdate_data = self.update_data or getattr(self, \"create_data\")[0]\n# Try PATCH without permission\nwith testing.disable_warnings(\"django.request\"):\nresponse = self.client.patch(url, update_data, format=\"json\", **self.header)\nself.assertHttpStatus(response, status.HTTP_403_FORBIDDEN)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing.FilterTestCases","title":"<code>nautobot.apps.testing.FilterTestCases</code>","text":"Source code in <code>nautobot/core/testing/filters.py</code> <pre><code>@tag(\"unit\")\nclass FilterTestCases:\nclass BaseFilterTestCase(views.TestCase):\n\"\"\"Base class for testing of FilterSets.\"\"\"\ndef get_filterset_test_values(self, field_name, queryset=None):\n\"\"\"Returns a list of distinct values from the requested queryset field to use in filterset tests.\n            Returns a list for use in testing multiple choice filters. The size of the returned list is random\n            but will contain at minimum 2 unique values. The list of values will match at least 2 instances when\n            passed to the queryset's filter(field_name__in=[]) method but will fail to match at least one instance.\n            Args:\n                field_name (str): The name of the field to retrieve test values from.\n                queryset (QuerySet): The queryset to retrieve test values. Defaults to `self.queryset`.\n            Returns:\n                (list): A list of unique values derived from the queryset.\n            Raises:\n                ValueError: Raised if unable to find a combination of 2 or more unique values\n                    to filter the queryset to a subset of the total instances.\n            \"\"\"\ntest_values = []\nif queryset is None:\nqueryset = self.queryset\nqs_count = queryset.count()\nvalues_with_count = queryset.values(field_name).annotate(count=Count(field_name)).order_by(\"count\")\nfor value in values_with_count:\n# randomly break out of loop after 2 values have been selected\nif len(test_values) &gt; 1 and random.choice([True, False]):\nbreak\nif value[field_name] and value[\"count\"] &lt; qs_count:\nqs_count -= value[\"count\"]\ntest_values.append(str(value[field_name]))\nif len(test_values) &lt; 2:\nraise ValueError(\nf\"Cannot find enough valid test data for {queryset.model._meta.object_name} field {field_name} \"\nf\"(found {len(test_values)} option(s): {test_values}) but need at least 2 of them\"\n)\nreturn test_values\nclass FilterTestCase(BaseFilterTestCase):\n\"\"\"Add common tests for all FilterSets.\"\"\"\nqueryset = None\nfilterset = None\n# list of filters to be tested by `test_filters_generic`\n# list of iterables with filter name and optional field name\n# example:\n#   generic_filter_tests = [\n#       [\"filter1\"],\n#       [\"filter2\", \"field2__name\"],\n#   ]\ngeneric_filter_tests = []\ndef test_id(self):\n\"\"\"Verify that the filterset supports filtering by id.\"\"\"\nparams = {\"id\": self.queryset.values_list(\"pk\", flat=True)[:2]}\nfilterset = self.filterset(params, self.queryset)\nself.assertTrue(filterset.is_valid())\nself.assertEqual(filterset.qs.count(), 2)\ndef test_invalid_filter(self):\n\"\"\"Verify that the filterset reports as invalid when initialized with an unsupported filter parameter.\"\"\"\nparams = {\"ice_cream_flavor\": [\"chocolate\"]}\nself.assertFalse(self.filterset(params, self.queryset).is_valid())\ndef test_filters_generic(self):\n\"\"\"Test all multiple choice filters declared in `self.generic_filter_tests`.\n            This test uses `get_filterset_test_values()` to retrieve a valid set of test data and asserts\n            that the filterset filter output matches the corresponding queryset filter.\n            The majority of Nautobot filters use conjoined=False, so the extra logic to support conjoined=True has not\n            been implemented here. TagFilter and similar \"AND\" filters are not supported.\n            Examples:\n                Multiple tests can be performed for the same filter by adding multiple entries in\n                `generic_filter_tests` with explicit field names.\n                For example, to test a NaturalKeyOrPKMultipleChoiceFilter, use:\n                    generic_filter_tests = (\n                        [\"filter_name\", \"field_name__name\"],\n                        [\"filter_name\", \"field_name__id\"],\n                    )\n                If a field name is not declared, the filter name will be used for the field name:\n                    generic_filter_tests = (\n                        [\"devices\"],\n                    )\n                This expects a field named `devices` on the model and a filter named `devices` on the filterset.\n            \"\"\"\nif not self.generic_filter_tests:\nself.skipTest(\"No generic_filter_tests defined?\")\nfor test in self.generic_filter_tests:\nfilter_name = test[0]\nfield_name = test[-1]  # default to filter_name if a second list item was not supplied\nwith self.subTest(f\"{self.filterset.__name__} filter {filter_name} ({field_name})\"):\ntest_data = self.get_filterset_test_values(field_name)\nparams = {filter_name: test_data}\nfilterset_result = self.filterset(params, self.queryset).qs\nqs_result = self.queryset.filter(**{f\"{field_name}__in\": test_data}).distinct()\nself.assertQuerysetEqualAndNotEmpty(filterset_result, qs_result, ordered=False)\ndef test_boolean_filters_generic(self):\n\"\"\"Test all `RelatedMembershipBooleanFilter` filters found in `self.filterset.get_filters()`\n            except for the ones with custom filter logic defined in its `method` attribute.\n            This test asserts that `filter=True` matches `self.queryset.filter(field__isnull=False)` and\n            that `filter=False` matches `self.queryset.filter(field__isnull=True)`.\n            \"\"\"\nfor filter_name, filter_object in self.filterset.get_filters().items():\nif not isinstance(filter_object, RelatedMembershipBooleanFilter):\ncontinue\nif filter_object.method is not None:\ncontinue\nfield_name = filter_object.field_name\nwith self.subTest(f\"{self.filterset.__name__} RelatedMembershipBooleanFilter {filter_name} (True)\"):\nfilterset_result = self.filterset({filter_name: True}, self.queryset).qs\nqs_result = self.queryset.filter(**{f\"{field_name}__isnull\": False}).distinct()\nself.assertQuerysetEqualAndNotEmpty(filterset_result, qs_result)\nwith self.subTest(f\"{self.filterset.__name__} RelatedMembershipBooleanFilter {filter_name} (False)\"):\nfilterset_result = self.filterset({filter_name: False}, self.queryset).qs\nqs_result = self.queryset.filter(**{f\"{field_name}__isnull\": True}).distinct()\nself.assertQuerysetEqualAndNotEmpty(filterset_result, qs_result)\ndef test_tags_filter(self):\n\"\"\"Test the `tags` filter which should be present on all PrimaryModel filtersets.\"\"\"\nif not issubclass(self.queryset.model, PrimaryModel):\nself.skipTest(\"Not a PrimaryModel\")\n# Find an instance with at least two tags (should be common given our factory design)\nfor instance in list(self.queryset):\nif len(instance.tags.all()) &gt;= 2:\ntags = list(instance.tags.all()[:2])\nbreak\nelse:\nself.fail(f\"Couldn't find any {self.queryset.model._meta.object_name} with at least two Tags.\")\nparams = {\"tags\": [tags[0].name, tags[1].pk]}\nfilterset_result = self.filterset(params, self.queryset).qs\n# Tags is an AND filter not an OR filter\nqs_result = self.queryset.filter(tags=tags[0]).filter(tags=tags[1]).distinct()\nself.assertQuerysetEqualAndNotEmpty(filterset_result, qs_result)\nclass NameOnlyFilterTestCase(FilterTestCase):\n\"\"\"Add simple tests for filtering by name.\"\"\"\ndef test_name(self):\n\"\"\"Verify that the filterset supports filtering by name.\"\"\"\nparams = {\"name\": list(self.queryset.values_list(\"name\", flat=True)[:2])}\nfilterset = self.filterset(params, self.queryset)\nself.assertTrue(filterset.is_valid())\nself.assertQuerysetEqualAndNotEmpty(\nfilterset.qs.order_by(\"name\"), self.queryset.filter(name__in=params[\"name\"]).order_by(\"name\")\n)\nclass NameSlugFilterTestCase(NameOnlyFilterTestCase):\n\"\"\"Add simple tests for filtering by name and by slug.\"\"\"\ndef test_slug(self):\n\"\"\"Verify that the filterset supports filtering by slug.\"\"\"\nparams = {\"slug\": self.queryset.values_list(\"slug\", flat=True)[:2]}\nfilterset = self.filterset(params, self.queryset)\nself.assertTrue(filterset.is_valid())\nself.assertEqual(filterset.qs.count(), 2)\nclass TenancyFilterTestCaseMixin(views.TestCase):\n\"\"\"Add test cases for tenant and tenant-group filters.\"\"\"\ntenancy_related_name = \"\"\ndef test_tenant(self):\ntenants = list(models.Tenant.objects.filter(**{f\"{self.tenancy_related_name}__isnull\": False}))[:2]\nparams = {\"tenant_id\": [tenants[0].pk, tenants[1].pk]}\nself.assertQuerysetEqual(\nself.filterset(params, self.queryset).qs, self.queryset.filter(tenant__in=tenants), ordered=False\n)\nparams = {\"tenant\": [tenants[0].name, tenants[1].name]}\nself.assertQuerysetEqual(\nself.filterset(params, self.queryset).qs, self.queryset.filter(tenant__in=tenants), ordered=False\n)\ndef test_tenant_group(self):\ntenant_groups = list(\nmodels.TenantGroup.objects.filter(\ntenants__isnull=False, **{f\"tenants__{self.tenancy_related_name}__isnull\": False}\n)\n)[:2]\ntenant_groups_including_children = []\nfor tenant_group in tenant_groups:\ntenant_groups_including_children += tenant_group.descendants(include_self=True)\nparams = {\"tenant_group\": [tenant_groups[0].pk, tenant_groups[1].pk]}\nself.assertQuerysetEqual(\nself.filterset(params, self.queryset).qs,\nself.queryset.filter(tenant__tenant_group__in=tenant_groups_including_children),\nordered=False,\n)\nparams = {\"tenant_group\": [tenant_groups[0].name, tenant_groups[1].name]}\nself.assertQuerysetEqual(\nself.filterset(params, self.queryset).qs,\nself.queryset.filter(tenant__tenant_group__in=tenant_groups_including_children),\nordered=False,\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.filters.FilterTestCases.BaseFilterTestCase","title":"<code>BaseFilterTestCase</code>","text":"<p>             Bases: <code>views.TestCase</code></p> <p>Base class for testing of FilterSets.</p> Source code in <code>nautobot/core/testing/filters.py</code> <pre><code>class BaseFilterTestCase(views.TestCase):\n\"\"\"Base class for testing of FilterSets.\"\"\"\ndef get_filterset_test_values(self, field_name, queryset=None):\n\"\"\"Returns a list of distinct values from the requested queryset field to use in filterset tests.\n        Returns a list for use in testing multiple choice filters. The size of the returned list is random\n        but will contain at minimum 2 unique values. The list of values will match at least 2 instances when\n        passed to the queryset's filter(field_name__in=[]) method but will fail to match at least one instance.\n        Args:\n            field_name (str): The name of the field to retrieve test values from.\n            queryset (QuerySet): The queryset to retrieve test values. Defaults to `self.queryset`.\n        Returns:\n            (list): A list of unique values derived from the queryset.\n        Raises:\n            ValueError: Raised if unable to find a combination of 2 or more unique values\n                to filter the queryset to a subset of the total instances.\n        \"\"\"\ntest_values = []\nif queryset is None:\nqueryset = self.queryset\nqs_count = queryset.count()\nvalues_with_count = queryset.values(field_name).annotate(count=Count(field_name)).order_by(\"count\")\nfor value in values_with_count:\n# randomly break out of loop after 2 values have been selected\nif len(test_values) &gt; 1 and random.choice([True, False]):\nbreak\nif value[field_name] and value[\"count\"] &lt; qs_count:\nqs_count -= value[\"count\"]\ntest_values.append(str(value[field_name]))\nif len(test_values) &lt; 2:\nraise ValueError(\nf\"Cannot find enough valid test data for {queryset.model._meta.object_name} field {field_name} \"\nf\"(found {len(test_values)} option(s): {test_values}) but need at least 2 of them\"\n)\nreturn test_values\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.filters.FilterTestCases.BaseFilterTestCase.get_filterset_test_values","title":"<code>get_filterset_test_values(field_name, queryset=None)</code>","text":"<p>Returns a list of distinct values from the requested queryset field to use in filterset tests.</p> <p>Returns a list for use in testing multiple choice filters. The size of the returned list is random but will contain at minimum 2 unique values. The list of values will match at least 2 instances when passed to the queryset's filter(field_name__in=[]) method but will fail to match at least one instance.</p> <p>Parameters:</p> Name Type Description Default <code>field_name</code> <code>str</code> <p>The name of the field to retrieve test values from.</p> required <code>queryset</code> <code>QuerySet</code> <p>The queryset to retrieve test values. Defaults to <code>self.queryset</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>list</code> <p>A list of unique values derived from the queryset.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Raised if unable to find a combination of 2 or more unique values to filter the queryset to a subset of the total instances.</p> Source code in <code>nautobot/core/testing/filters.py</code> <pre><code>def get_filterset_test_values(self, field_name, queryset=None):\n\"\"\"Returns a list of distinct values from the requested queryset field to use in filterset tests.\n    Returns a list for use in testing multiple choice filters. The size of the returned list is random\n    but will contain at minimum 2 unique values. The list of values will match at least 2 instances when\n    passed to the queryset's filter(field_name__in=[]) method but will fail to match at least one instance.\n    Args:\n        field_name (str): The name of the field to retrieve test values from.\n        queryset (QuerySet): The queryset to retrieve test values. Defaults to `self.queryset`.\n    Returns:\n        (list): A list of unique values derived from the queryset.\n    Raises:\n        ValueError: Raised if unable to find a combination of 2 or more unique values\n            to filter the queryset to a subset of the total instances.\n    \"\"\"\ntest_values = []\nif queryset is None:\nqueryset = self.queryset\nqs_count = queryset.count()\nvalues_with_count = queryset.values(field_name).annotate(count=Count(field_name)).order_by(\"count\")\nfor value in values_with_count:\n# randomly break out of loop after 2 values have been selected\nif len(test_values) &gt; 1 and random.choice([True, False]):\nbreak\nif value[field_name] and value[\"count\"] &lt; qs_count:\nqs_count -= value[\"count\"]\ntest_values.append(str(value[field_name]))\nif len(test_values) &lt; 2:\nraise ValueError(\nf\"Cannot find enough valid test data for {queryset.model._meta.object_name} field {field_name} \"\nf\"(found {len(test_values)} option(s): {test_values}) but need at least 2 of them\"\n)\nreturn test_values\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.filters.FilterTestCases.FilterTestCase","title":"<code>FilterTestCase</code>","text":"<p>             Bases: <code>BaseFilterTestCase</code></p> <p>Add common tests for all FilterSets.</p> Source code in <code>nautobot/core/testing/filters.py</code> <pre><code>class FilterTestCase(BaseFilterTestCase):\n\"\"\"Add common tests for all FilterSets.\"\"\"\nqueryset = None\nfilterset = None\n# list of filters to be tested by `test_filters_generic`\n# list of iterables with filter name and optional field name\n# example:\n#   generic_filter_tests = [\n#       [\"filter1\"],\n#       [\"filter2\", \"field2__name\"],\n#   ]\ngeneric_filter_tests = []\ndef test_id(self):\n\"\"\"Verify that the filterset supports filtering by id.\"\"\"\nparams = {\"id\": self.queryset.values_list(\"pk\", flat=True)[:2]}\nfilterset = self.filterset(params, self.queryset)\nself.assertTrue(filterset.is_valid())\nself.assertEqual(filterset.qs.count(), 2)\ndef test_invalid_filter(self):\n\"\"\"Verify that the filterset reports as invalid when initialized with an unsupported filter parameter.\"\"\"\nparams = {\"ice_cream_flavor\": [\"chocolate\"]}\nself.assertFalse(self.filterset(params, self.queryset).is_valid())\ndef test_filters_generic(self):\n\"\"\"Test all multiple choice filters declared in `self.generic_filter_tests`.\n        This test uses `get_filterset_test_values()` to retrieve a valid set of test data and asserts\n        that the filterset filter output matches the corresponding queryset filter.\n        The majority of Nautobot filters use conjoined=False, so the extra logic to support conjoined=True has not\n        been implemented here. TagFilter and similar \"AND\" filters are not supported.\n        Examples:\n            Multiple tests can be performed for the same filter by adding multiple entries in\n            `generic_filter_tests` with explicit field names.\n            For example, to test a NaturalKeyOrPKMultipleChoiceFilter, use:\n                generic_filter_tests = (\n                    [\"filter_name\", \"field_name__name\"],\n                    [\"filter_name\", \"field_name__id\"],\n                )\n            If a field name is not declared, the filter name will be used for the field name:\n                generic_filter_tests = (\n                    [\"devices\"],\n                )\n            This expects a field named `devices` on the model and a filter named `devices` on the filterset.\n        \"\"\"\nif not self.generic_filter_tests:\nself.skipTest(\"No generic_filter_tests defined?\")\nfor test in self.generic_filter_tests:\nfilter_name = test[0]\nfield_name = test[-1]  # default to filter_name if a second list item was not supplied\nwith self.subTest(f\"{self.filterset.__name__} filter {filter_name} ({field_name})\"):\ntest_data = self.get_filterset_test_values(field_name)\nparams = {filter_name: test_data}\nfilterset_result = self.filterset(params, self.queryset).qs\nqs_result = self.queryset.filter(**{f\"{field_name}__in\": test_data}).distinct()\nself.assertQuerysetEqualAndNotEmpty(filterset_result, qs_result, ordered=False)\ndef test_boolean_filters_generic(self):\n\"\"\"Test all `RelatedMembershipBooleanFilter` filters found in `self.filterset.get_filters()`\n        except for the ones with custom filter logic defined in its `method` attribute.\n        This test asserts that `filter=True` matches `self.queryset.filter(field__isnull=False)` and\n        that `filter=False` matches `self.queryset.filter(field__isnull=True)`.\n        \"\"\"\nfor filter_name, filter_object in self.filterset.get_filters().items():\nif not isinstance(filter_object, RelatedMembershipBooleanFilter):\ncontinue\nif filter_object.method is not None:\ncontinue\nfield_name = filter_object.field_name\nwith self.subTest(f\"{self.filterset.__name__} RelatedMembershipBooleanFilter {filter_name} (True)\"):\nfilterset_result = self.filterset({filter_name: True}, self.queryset).qs\nqs_result = self.queryset.filter(**{f\"{field_name}__isnull\": False}).distinct()\nself.assertQuerysetEqualAndNotEmpty(filterset_result, qs_result)\nwith self.subTest(f\"{self.filterset.__name__} RelatedMembershipBooleanFilter {filter_name} (False)\"):\nfilterset_result = self.filterset({filter_name: False}, self.queryset).qs\nqs_result = self.queryset.filter(**{f\"{field_name}__isnull\": True}).distinct()\nself.assertQuerysetEqualAndNotEmpty(filterset_result, qs_result)\ndef test_tags_filter(self):\n\"\"\"Test the `tags` filter which should be present on all PrimaryModel filtersets.\"\"\"\nif not issubclass(self.queryset.model, PrimaryModel):\nself.skipTest(\"Not a PrimaryModel\")\n# Find an instance with at least two tags (should be common given our factory design)\nfor instance in list(self.queryset):\nif len(instance.tags.all()) &gt;= 2:\ntags = list(instance.tags.all()[:2])\nbreak\nelse:\nself.fail(f\"Couldn't find any {self.queryset.model._meta.object_name} with at least two Tags.\")\nparams = {\"tags\": [tags[0].name, tags[1].pk]}\nfilterset_result = self.filterset(params, self.queryset).qs\n# Tags is an AND filter not an OR filter\nqs_result = self.queryset.filter(tags=tags[0]).filter(tags=tags[1]).distinct()\nself.assertQuerysetEqualAndNotEmpty(filterset_result, qs_result)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.filters.FilterTestCases.FilterTestCase.test_boolean_filters_generic","title":"<code>test_boolean_filters_generic()</code>","text":"<p>Test all <code>RelatedMembershipBooleanFilter</code> filters found in <code>self.filterset.get_filters()</code> except for the ones with custom filter logic defined in its <code>method</code> attribute.</p> <p>This test asserts that <code>filter=True</code> matches <code>self.queryset.filter(field__isnull=False)</code> and that <code>filter=False</code> matches <code>self.queryset.filter(field__isnull=True)</code>.</p> Source code in <code>nautobot/core/testing/filters.py</code> <pre><code>def test_boolean_filters_generic(self):\n\"\"\"Test all `RelatedMembershipBooleanFilter` filters found in `self.filterset.get_filters()`\n    except for the ones with custom filter logic defined in its `method` attribute.\n    This test asserts that `filter=True` matches `self.queryset.filter(field__isnull=False)` and\n    that `filter=False` matches `self.queryset.filter(field__isnull=True)`.\n    \"\"\"\nfor filter_name, filter_object in self.filterset.get_filters().items():\nif not isinstance(filter_object, RelatedMembershipBooleanFilter):\ncontinue\nif filter_object.method is not None:\ncontinue\nfield_name = filter_object.field_name\nwith self.subTest(f\"{self.filterset.__name__} RelatedMembershipBooleanFilter {filter_name} (True)\"):\nfilterset_result = self.filterset({filter_name: True}, self.queryset).qs\nqs_result = self.queryset.filter(**{f\"{field_name}__isnull\": False}).distinct()\nself.assertQuerysetEqualAndNotEmpty(filterset_result, qs_result)\nwith self.subTest(f\"{self.filterset.__name__} RelatedMembershipBooleanFilter {filter_name} (False)\"):\nfilterset_result = self.filterset({filter_name: False}, self.queryset).qs\nqs_result = self.queryset.filter(**{f\"{field_name}__isnull\": True}).distinct()\nself.assertQuerysetEqualAndNotEmpty(filterset_result, qs_result)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.filters.FilterTestCases.FilterTestCase.test_filters_generic","title":"<code>test_filters_generic()</code>","text":"<p>Test all multiple choice filters declared in <code>self.generic_filter_tests</code>.</p> <p>This test uses <code>get_filterset_test_values()</code> to retrieve a valid set of test data and asserts that the filterset filter output matches the corresponding queryset filter. The majority of Nautobot filters use conjoined=False, so the extra logic to support conjoined=True has not been implemented here. TagFilter and similar \"AND\" filters are not supported.</p> <p>Examples:</p> <p>Multiple tests can be performed for the same filter by adding multiple entries in <code>generic_filter_tests</code> with explicit field names. For example, to test a NaturalKeyOrPKMultipleChoiceFilter, use:     generic_filter_tests = (         [\"filter_name\", \"field_name__name\"],         [\"filter_name\", \"field_name__id\"],     )</p> <p>If a field name is not declared, the filter name will be used for the field name:     generic_filter_tests = (         [\"devices\"],     ) This expects a field named <code>devices</code> on the model and a filter named <code>devices</code> on the filterset.</p> Source code in <code>nautobot/core/testing/filters.py</code> <pre><code>def test_filters_generic(self):\n\"\"\"Test all multiple choice filters declared in `self.generic_filter_tests`.\n    This test uses `get_filterset_test_values()` to retrieve a valid set of test data and asserts\n    that the filterset filter output matches the corresponding queryset filter.\n    The majority of Nautobot filters use conjoined=False, so the extra logic to support conjoined=True has not\n    been implemented here. TagFilter and similar \"AND\" filters are not supported.\n    Examples:\n        Multiple tests can be performed for the same filter by adding multiple entries in\n        `generic_filter_tests` with explicit field names.\n        For example, to test a NaturalKeyOrPKMultipleChoiceFilter, use:\n            generic_filter_tests = (\n                [\"filter_name\", \"field_name__name\"],\n                [\"filter_name\", \"field_name__id\"],\n            )\n        If a field name is not declared, the filter name will be used for the field name:\n            generic_filter_tests = (\n                [\"devices\"],\n            )\n        This expects a field named `devices` on the model and a filter named `devices` on the filterset.\n    \"\"\"\nif not self.generic_filter_tests:\nself.skipTest(\"No generic_filter_tests defined?\")\nfor test in self.generic_filter_tests:\nfilter_name = test[0]\nfield_name = test[-1]  # default to filter_name if a second list item was not supplied\nwith self.subTest(f\"{self.filterset.__name__} filter {filter_name} ({field_name})\"):\ntest_data = self.get_filterset_test_values(field_name)\nparams = {filter_name: test_data}\nfilterset_result = self.filterset(params, self.queryset).qs\nqs_result = self.queryset.filter(**{f\"{field_name}__in\": test_data}).distinct()\nself.assertQuerysetEqualAndNotEmpty(filterset_result, qs_result, ordered=False)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.filters.FilterTestCases.FilterTestCase.test_id","title":"<code>test_id()</code>","text":"<p>Verify that the filterset supports filtering by id.</p> Source code in <code>nautobot/core/testing/filters.py</code> <pre><code>def test_id(self):\n\"\"\"Verify that the filterset supports filtering by id.\"\"\"\nparams = {\"id\": self.queryset.values_list(\"pk\", flat=True)[:2]}\nfilterset = self.filterset(params, self.queryset)\nself.assertTrue(filterset.is_valid())\nself.assertEqual(filterset.qs.count(), 2)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.filters.FilterTestCases.FilterTestCase.test_invalid_filter","title":"<code>test_invalid_filter()</code>","text":"<p>Verify that the filterset reports as invalid when initialized with an unsupported filter parameter.</p> Source code in <code>nautobot/core/testing/filters.py</code> <pre><code>def test_invalid_filter(self):\n\"\"\"Verify that the filterset reports as invalid when initialized with an unsupported filter parameter.\"\"\"\nparams = {\"ice_cream_flavor\": [\"chocolate\"]}\nself.assertFalse(self.filterset(params, self.queryset).is_valid())\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.filters.FilterTestCases.FilterTestCase.test_tags_filter","title":"<code>test_tags_filter()</code>","text":"<p>Test the <code>tags</code> filter which should be present on all PrimaryModel filtersets.</p> Source code in <code>nautobot/core/testing/filters.py</code> <pre><code>def test_tags_filter(self):\n\"\"\"Test the `tags` filter which should be present on all PrimaryModel filtersets.\"\"\"\nif not issubclass(self.queryset.model, PrimaryModel):\nself.skipTest(\"Not a PrimaryModel\")\n# Find an instance with at least two tags (should be common given our factory design)\nfor instance in list(self.queryset):\nif len(instance.tags.all()) &gt;= 2:\ntags = list(instance.tags.all()[:2])\nbreak\nelse:\nself.fail(f\"Couldn't find any {self.queryset.model._meta.object_name} with at least two Tags.\")\nparams = {\"tags\": [tags[0].name, tags[1].pk]}\nfilterset_result = self.filterset(params, self.queryset).qs\n# Tags is an AND filter not an OR filter\nqs_result = self.queryset.filter(tags=tags[0]).filter(tags=tags[1]).distinct()\nself.assertQuerysetEqualAndNotEmpty(filterset_result, qs_result)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.filters.FilterTestCases.NameOnlyFilterTestCase","title":"<code>NameOnlyFilterTestCase</code>","text":"<p>             Bases: <code>FilterTestCase</code></p> <p>Add simple tests for filtering by name.</p> Source code in <code>nautobot/core/testing/filters.py</code> <pre><code>class NameOnlyFilterTestCase(FilterTestCase):\n\"\"\"Add simple tests for filtering by name.\"\"\"\ndef test_name(self):\n\"\"\"Verify that the filterset supports filtering by name.\"\"\"\nparams = {\"name\": list(self.queryset.values_list(\"name\", flat=True)[:2])}\nfilterset = self.filterset(params, self.queryset)\nself.assertTrue(filterset.is_valid())\nself.assertQuerysetEqualAndNotEmpty(\nfilterset.qs.order_by(\"name\"), self.queryset.filter(name__in=params[\"name\"]).order_by(\"name\")\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.filters.FilterTestCases.NameOnlyFilterTestCase.test_name","title":"<code>test_name()</code>","text":"<p>Verify that the filterset supports filtering by name.</p> Source code in <code>nautobot/core/testing/filters.py</code> <pre><code>def test_name(self):\n\"\"\"Verify that the filterset supports filtering by name.\"\"\"\nparams = {\"name\": list(self.queryset.values_list(\"name\", flat=True)[:2])}\nfilterset = self.filterset(params, self.queryset)\nself.assertTrue(filterset.is_valid())\nself.assertQuerysetEqualAndNotEmpty(\nfilterset.qs.order_by(\"name\"), self.queryset.filter(name__in=params[\"name\"]).order_by(\"name\")\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.filters.FilterTestCases.NameSlugFilterTestCase","title":"<code>NameSlugFilterTestCase</code>","text":"<p>             Bases: <code>NameOnlyFilterTestCase</code></p> <p>Add simple tests for filtering by name and by slug.</p> Source code in <code>nautobot/core/testing/filters.py</code> <pre><code>class NameSlugFilterTestCase(NameOnlyFilterTestCase):\n\"\"\"Add simple tests for filtering by name and by slug.\"\"\"\ndef test_slug(self):\n\"\"\"Verify that the filterset supports filtering by slug.\"\"\"\nparams = {\"slug\": self.queryset.values_list(\"slug\", flat=True)[:2]}\nfilterset = self.filterset(params, self.queryset)\nself.assertTrue(filterset.is_valid())\nself.assertEqual(filterset.qs.count(), 2)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.filters.FilterTestCases.NameSlugFilterTestCase.test_slug","title":"<code>test_slug()</code>","text":"<p>Verify that the filterset supports filtering by slug.</p> Source code in <code>nautobot/core/testing/filters.py</code> <pre><code>def test_slug(self):\n\"\"\"Verify that the filterset supports filtering by slug.\"\"\"\nparams = {\"slug\": self.queryset.values_list(\"slug\", flat=True)[:2]}\nfilterset = self.filterset(params, self.queryset)\nself.assertTrue(filterset.is_valid())\nself.assertEqual(filterset.qs.count(), 2)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.filters.FilterTestCases.TenancyFilterTestCaseMixin","title":"<code>TenancyFilterTestCaseMixin</code>","text":"<p>             Bases: <code>views.TestCase</code></p> <p>Add test cases for tenant and tenant-group filters.</p> Source code in <code>nautobot/core/testing/filters.py</code> <pre><code>class TenancyFilterTestCaseMixin(views.TestCase):\n\"\"\"Add test cases for tenant and tenant-group filters.\"\"\"\ntenancy_related_name = \"\"\ndef test_tenant(self):\ntenants = list(models.Tenant.objects.filter(**{f\"{self.tenancy_related_name}__isnull\": False}))[:2]\nparams = {\"tenant_id\": [tenants[0].pk, tenants[1].pk]}\nself.assertQuerysetEqual(\nself.filterset(params, self.queryset).qs, self.queryset.filter(tenant__in=tenants), ordered=False\n)\nparams = {\"tenant\": [tenants[0].name, tenants[1].name]}\nself.assertQuerysetEqual(\nself.filterset(params, self.queryset).qs, self.queryset.filter(tenant__in=tenants), ordered=False\n)\ndef test_tenant_group(self):\ntenant_groups = list(\nmodels.TenantGroup.objects.filter(\ntenants__isnull=False, **{f\"tenants__{self.tenancy_related_name}__isnull\": False}\n)\n)[:2]\ntenant_groups_including_children = []\nfor tenant_group in tenant_groups:\ntenant_groups_including_children += tenant_group.descendants(include_self=True)\nparams = {\"tenant_group\": [tenant_groups[0].pk, tenant_groups[1].pk]}\nself.assertQuerysetEqual(\nself.filterset(params, self.queryset).qs,\nself.queryset.filter(tenant__tenant_group__in=tenant_groups_including_children),\nordered=False,\n)\nparams = {\"tenant_group\": [tenant_groups[0].name, tenant_groups[1].name]}\nself.assertQuerysetEqual(\nself.filterset(params, self.queryset).qs,\nself.queryset.filter(tenant__tenant_group__in=tenant_groups_including_children),\nordered=False,\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing.ModelTestCase","title":"<code>nautobot.apps.testing.ModelTestCase</code>","text":"<p>             Bases: <code>TestCase</code></p> <p>Parent class for TestCases which deal with models.</p> Source code in <code>nautobot/core/testing/views.py</code> <pre><code>class ModelTestCase(TestCase):\n\"\"\"\n    Parent class for TestCases which deal with models.\n    \"\"\"\nmodel = None\n# Optional, list of Relationships populated in setUpTestData for testing with this model\n# Be sure to also create RelationshipAssociations using these Relationships!\nrelationships: Optional[Sequence[extras_models.Relationship]] = None\n# Optional, list of CustomFields populated in setUpTestData for testing with this model\n# Be sure to also populate these fields on your test data!\ncustom_fields: Optional[Sequence[extras_models.CustomField]] = None\ndef _get_queryset(self):\n\"\"\"\n        Return a base queryset suitable for use in test methods.\n        \"\"\"\nreturn self.model.objects.all()\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing.ModelTestCases","title":"<code>nautobot.apps.testing.ModelTestCases</code>","text":"Source code in <code>nautobot/core/testing/models.py</code> <pre><code>@tag(\"unit\")\nclass ModelTestCases:\nclass BaseModelTestCase(TestCase):\n\"\"\"Base class for generic model tests.\"\"\"\nmodel = None\ndef test_natural_key_symmetry(self):\n\"\"\"Check that `natural_key()` and `get_by_natural_key()` work reciprocally.\"\"\"\ninstance = self.model.objects.first()\nself.assertIsNotNone(instance)\nif not hasattr(instance, \"natural_key\"):\nself.skipTest(\"No natural_key on this model.\")\nself.assertIsNotNone(instance.natural_key())\nself.assertEqual(self.model.objects.get_by_natural_key(*instance.natural_key()), instance)\ndef test_composite_key(self):\n\"\"\"Check that `composite_key` and filtering by `composite_key` both work.\"\"\"\ninstance = self.model.objects.first()\nself.assertIsNotNone(instance)\nif not hasattr(instance, \"composite_key\"):\nself.skipTest(\"No composite_key on this model.\")\nself.assertIsNotNone(instance.composite_key)\n# get()\nself.assertEqual(self.model.objects.get(composite_key=instance.composite_key), instance)\n# filter()\nmatch = self.model.objects.filter(composite_key=instance.composite_key)\nself.assertEqual(1, len(match))\nself.assertEqual(match[0], instance)\n# exclude()\nmatch = self.model.objects.exclude(composite_key=instance.composite_key)\nself.assertEqual(self.model.objects.count() - 1, match.count())\nself.assertNotIn(instance, match)\ndef test_get_docs_url(self):\n\"\"\"Check that `get_docs_url()` returns a valid static file path for this model.\"\"\"\nself.assertIsNotNone(get_docs_url(self.model))\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.models.ModelTestCases.BaseModelTestCase","title":"<code>BaseModelTestCase</code>","text":"<p>             Bases: <code>TestCase</code></p> <p>Base class for generic model tests.</p> Source code in <code>nautobot/core/testing/models.py</code> <pre><code>class BaseModelTestCase(TestCase):\n\"\"\"Base class for generic model tests.\"\"\"\nmodel = None\ndef test_natural_key_symmetry(self):\n\"\"\"Check that `natural_key()` and `get_by_natural_key()` work reciprocally.\"\"\"\ninstance = self.model.objects.first()\nself.assertIsNotNone(instance)\nif not hasattr(instance, \"natural_key\"):\nself.skipTest(\"No natural_key on this model.\")\nself.assertIsNotNone(instance.natural_key())\nself.assertEqual(self.model.objects.get_by_natural_key(*instance.natural_key()), instance)\ndef test_composite_key(self):\n\"\"\"Check that `composite_key` and filtering by `composite_key` both work.\"\"\"\ninstance = self.model.objects.first()\nself.assertIsNotNone(instance)\nif not hasattr(instance, \"composite_key\"):\nself.skipTest(\"No composite_key on this model.\")\nself.assertIsNotNone(instance.composite_key)\n# get()\nself.assertEqual(self.model.objects.get(composite_key=instance.composite_key), instance)\n# filter()\nmatch = self.model.objects.filter(composite_key=instance.composite_key)\nself.assertEqual(1, len(match))\nself.assertEqual(match[0], instance)\n# exclude()\nmatch = self.model.objects.exclude(composite_key=instance.composite_key)\nself.assertEqual(self.model.objects.count() - 1, match.count())\nself.assertNotIn(instance, match)\ndef test_get_docs_url(self):\n\"\"\"Check that `get_docs_url()` returns a valid static file path for this model.\"\"\"\nself.assertIsNotNone(get_docs_url(self.model))\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.models.ModelTestCases.BaseModelTestCase.test_composite_key","title":"<code>test_composite_key()</code>","text":"<p>Check that <code>composite_key</code> and filtering by <code>composite_key</code> both work.</p> Source code in <code>nautobot/core/testing/models.py</code> <pre><code>def test_composite_key(self):\n\"\"\"Check that `composite_key` and filtering by `composite_key` both work.\"\"\"\ninstance = self.model.objects.first()\nself.assertIsNotNone(instance)\nif not hasattr(instance, \"composite_key\"):\nself.skipTest(\"No composite_key on this model.\")\nself.assertIsNotNone(instance.composite_key)\n# get()\nself.assertEqual(self.model.objects.get(composite_key=instance.composite_key), instance)\n# filter()\nmatch = self.model.objects.filter(composite_key=instance.composite_key)\nself.assertEqual(1, len(match))\nself.assertEqual(match[0], instance)\n# exclude()\nmatch = self.model.objects.exclude(composite_key=instance.composite_key)\nself.assertEqual(self.model.objects.count() - 1, match.count())\nself.assertNotIn(instance, match)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.models.ModelTestCases.BaseModelTestCase.test_get_docs_url","title":"<code>test_get_docs_url()</code>","text":"<p>Check that <code>get_docs_url()</code> returns a valid static file path for this model.</p> Source code in <code>nautobot/core/testing/models.py</code> <pre><code>def test_get_docs_url(self):\n\"\"\"Check that `get_docs_url()` returns a valid static file path for this model.\"\"\"\nself.assertIsNotNone(get_docs_url(self.model))\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.models.ModelTestCases.BaseModelTestCase.test_natural_key_symmetry","title":"<code>test_natural_key_symmetry()</code>","text":"<p>Check that <code>natural_key()</code> and <code>get_by_natural_key()</code> work reciprocally.</p> Source code in <code>nautobot/core/testing/models.py</code> <pre><code>def test_natural_key_symmetry(self):\n\"\"\"Check that `natural_key()` and `get_by_natural_key()` work reciprocally.\"\"\"\ninstance = self.model.objects.first()\nself.assertIsNotNone(instance)\nif not hasattr(instance, \"natural_key\"):\nself.skipTest(\"No natural_key on this model.\")\nself.assertIsNotNone(instance.natural_key())\nself.assertEqual(self.model.objects.get_by_natural_key(*instance.natural_key()), instance)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing.ModelViewTestCase","title":"<code>nautobot.apps.testing.ModelViewTestCase</code>","text":"<p>             Bases: <code>ModelTestCase</code></p> <p>Base TestCase for model views. Subclass to test individual views.</p> Source code in <code>nautobot/core/testing/views.py</code> <pre><code>@tag(\"performance\")\nclass ModelViewTestCase(ModelTestCase):\n\"\"\"\n    Base TestCase for model views. Subclass to test individual views.\n    \"\"\"\nreverse_url_attribute = None\n\"\"\"\n    Name of instance field to pass as a kwarg when looking up URLs for creating/editing/deleting a model instance.\n    If unspecified, \"pk\" and \"slug\" will be tried, in that order.\n    \"\"\"\ndef _get_base_url(self):\n\"\"\"\n        Return the base format string for a view URL for the test.\n        Examples: \"dcim:device_{}\", \"plugins:example_plugin:example_model_{}\"\n        Override this if needed for testing of views that don't correspond directly to self.model,\n        for example the DCIM \"interface-connections\" and \"console-connections\" view tests.\n        \"\"\"\nif self.model._meta.app_label in settings.PLUGINS:\nreturn f\"plugins:{self.model._meta.app_label}:{self.model._meta.model_name}_{{}}\"\nreturn f\"{self.model._meta.app_label}:{self.model._meta.model_name}_{{}}\"\ndef _get_url(self, action, instance=None):\n\"\"\"\n        Return the URL string for a specific action and optionally a specific model instance.\n        Override this if needed for testing of views whose names don't follow\n        the [plugins]:&lt;app_label&gt;:&lt;model_name&gt;_&lt;action&gt; naming convention.\n        \"\"\"\nurl_format = self._get_base_url()\n# If no instance was provided, assume we don't need a unique identifier\nif instance is None:\nreturn reverse(url_format.format(action))\nif self.reverse_url_attribute:\nreturn reverse(\nurl_format.format(action),\nkwargs={self.reverse_url_attribute: getattr(instance, self.reverse_url_attribute)},\n)\ntry:\n# Default to using the PK to retrieve the URL for an object\nreturn reverse(url_format.format(action), kwargs={\"pk\": instance.pk})\nexcept NoReverseMatch:\n# Attempt to resolve using slug as the unique identifier if one exists\nif hasattr(self.model, \"slug\"):\nreturn reverse(url_format.format(action), kwargs={\"slug\": instance.slug})\nraise\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.views.ModelViewTestCase.reverse_url_attribute","title":"<code>reverse_url_attribute = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name of instance field to pass as a kwarg when looking up URLs for creating/editing/deleting a model instance.</p> <p>If unspecified, \"pk\" and \"slug\" will be tried, in that order.</p>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing.NautobotDataMigrationTest","title":"<code>nautobot.apps.testing.NautobotDataMigrationTest</code>","text":"<p>             Bases: <code>TestCase</code></p> Source code in <code>nautobot/core/testing/migrations.py</code> <pre><code>@skip(\"TODO: Havoc has been wreaked on migrations in 2.0, so this test is currently broken.\")\nclass NautobotDataMigrationTest(TestCase):\n@property\ndef app(self):\nreturn apps.get_containing_app_config(type(self).__module__).name\nmigrate_from = None\nmigrate_to = None\ndef setUp(self):\n# Remove factory data beforehand\ncall_command(\"flush\", \"--no-input\")\nerror_message = f\"DataMigrationTest '{type(self).__name__}' must define migrate_from and migrate_to properties\"\nself.assertNotEqual(self.migrate_from, None, error_message)\nself.assertNotEqual(self.migrate_to, None, error_message)\n# migrate nautobot to the previous migration state\nexecutor = MigrationExecutor(connection)\nold_apps = executor.loader.project_state(self.migrate_from).apps\nexecutor.migrate(self.migrate_from)\nself.populateDataBeforeMigration(old_apps)\n# migrate nautobot to the migration you want to test against\nexecutor = MigrationExecutor(connection)\nexecutor.loader.build_graph()  # reload\nexecutor.migrate(self.migrate_to)\nself.apps = executor.loader.project_state(self.migrate_to).apps\ndef populateDataBeforeMigration(self, installed_apps):\n\"\"\"Populate your Nautobot data before migrating from the first migration to the second\"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.migrations.NautobotDataMigrationTest.populateDataBeforeMigration","title":"<code>populateDataBeforeMigration(installed_apps)</code>","text":"<p>Populate your Nautobot data before migrating from the first migration to the second</p> Source code in <code>nautobot/core/testing/migrations.py</code> <pre><code>def populateDataBeforeMigration(self, installed_apps):\n\"\"\"Populate your Nautobot data before migrating from the first migration to the second\"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing.NautobotTestCaseMixin","title":"<code>nautobot.apps.testing.NautobotTestCaseMixin</code>","text":"<p>Base class for all Nautobot-specific unit tests.</p> Source code in <code>nautobot/core/testing/mixins.py</code> <pre><code>class NautobotTestCaseMixin:\n\"\"\"Base class for all Nautobot-specific unit tests.\"\"\"\nuser_permissions = ()\nclient_class = NautobotTestClient\ndef setUpNautobot(self, client=True, populate_status=False):\n\"\"\"Setup shared testuser, statuses and client.\"\"\"\n# Re-populate status choices after database truncation by TransactionTestCase\nif populate_status:\nmanagement.populate_status_choices(apps, None)\n# Create the test user and assign permissions\nself.user = User.objects.create_user(username=\"nautobotuser\")\nself.add_permissions(*self.user_permissions)\nif client:\n# Initialize the test client\nif not hasattr(self, \"client\") or self.client is None:\nself.client = self.client_class()\n# Force login explicitly with the first-available backend\nself.client.force_login(self.user)\ndef prepare_instance(self, instance):\n\"\"\"\n        Test cases can override this method to perform any necessary manipulation of an instance prior to its evaluation\n        against test data. For example, it can be used to decrypt a Secret's plaintext attribute.\n        \"\"\"\nreturn instance\ndef model_to_dict(self, instance, fields, api=False):\n\"\"\"\n        Return a dictionary representation of an instance.\n        \"\"\"\n# Prepare the instance and call Django's model_to_dict() to extract all fields\nmodel_dict = model_to_dict(self.prepare_instance(instance), fields=fields)\n# Map any additional (non-field) instance attributes that were specified\nfor attr in fields:\nif hasattr(instance, attr) and attr not in model_dict:\nmodel_dict[attr] = getattr(instance, attr)\nfor key, value in list(model_dict.items()):\ntry:\nfield = instance._meta.get_field(key)\nexcept FieldDoesNotExist:\n# Attribute is not a model field, but may be a computed field,\n# so allow `field` checks to pass through.\nfield = None\n# Handle ManyToManyFields\nif value and isinstance(field, (ManyToManyField, core_fields.TagsField)):\n# Only convert ContentType to &lt;app_label&gt;.&lt;model&gt; for API serializers/views\nif api and field.related_model is ContentType:\nmodel_dict[key] = sorted([f\"{ct.app_label}.{ct.model}\" for ct in value])\n# Otherwise always convert object instances to pk\nelse:\nmodel_dict[key] = sorted([obj.pk for obj in value])\nif api:\n# Replace ContentType primary keys with &lt;app_label&gt;.&lt;model&gt;\nif isinstance(getattr(instance, key), ContentType):\nct = ContentType.objects.get(pk=value)\nmodel_dict[key] = f\"{ct.app_label}.{ct.model}\"\n# Convert IPNetwork instances to strings\nelif isinstance(value, IPNetwork):\nmodel_dict[key] = str(value)\nelse:\n# Convert ArrayFields to CSV strings\nif isinstance(field, core_fields.JSONArrayField):\nmodel_dict[key] = \",\".join([str(v) for v in value])\n# Convert JSONField dict values to JSON strings\nif isinstance(field, JSONField) and isinstance(value, dict):\nmodel_dict[key] = json.dumps(value)\nreturn model_dict\n#\n# Permissions management\n#\ndef add_permissions(self, *names):\n\"\"\"\n        Assign a set of permissions to the test user. Accepts permission names in the form &lt;app&gt;.&lt;action&gt;_&lt;model&gt;.\n        \"\"\"\nfor name in names:\nct, action = permissions.resolve_permission_ct(name)\nobj_perm = users_models.ObjectPermission(name=name, actions=[action])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ct)\n#\n# Custom assertions\n#\ndef assertHttpStatus(self, response, expected_status, msg=None):\n\"\"\"\n        TestCase method. Provide more detail in the event of an unexpected HTTP response.\n        \"\"\"\nerr_message = None\n# Construct an error message only if we know the test is going to fail\nif isinstance(expected_status, int):\nexpected_status = [expected_status]\nif response.status_code not in expected_status:\nerr_message = f\"Expected HTTP status(es) {expected_status}; received {response.status_code}:\"\nif hasattr(response, \"data\"):\n# REST API response; pass the response data through directly\nerr_message += f\"\\n{response.data}\"\n# Attempt to extract form validation errors from the response HTML\nform_errors = testing.extract_form_failures(response.content.decode(response.charset))\nerr_message += \"\\n\" + str(form_errors or response.content.decode(response.charset) or \"No data\")\nif msg:\nerr_message = f\"{msg}\\n{err_message}\"\nself.assertIn(response.status_code, expected_status, err_message)\ndef assertInstanceEqual(self, instance, data, exclude=None, api=False):\n\"\"\"\n        Compare a model instance to a dictionary, checking that its attribute values match those specified\n        in the dictionary.\n        :param instance: Python object instance\n        :param data: Dictionary of test data used to define the instance\n        :param exclude: List of fields to exclude from comparison (e.g. passwords, which get hashed)\n        :param api: Set to True is the data is a JSON representation of the instance\n        \"\"\"\nif exclude is None:\nexclude = []\nfields = [k for k in data.keys() if k not in exclude]\nmodel_dict = self.model_to_dict(instance, fields=fields, api=api)\nnew_model_dict = {}\nfor k, v in model_dict.items():\nif isinstance(v, list):\n# Sort lists of values. This includes items like tags, or other M2M fields\nnew_model_dict[k] = sorted(v)\nelif k == \"data_schema\" and isinstance(v, str):\n# Standardize the data_schema JSON, since the column is JSON and MySQL/dolt do not guarantee order\nnew_model_dict[k] = self.standardize_json(v)\nelse:\nnew_model_dict[k] = v\n# Omit any dictionary keys which are not instance attributes or have been excluded\nrelevant_data = {}\nfor k, v in data.items():\nif hasattr(instance, k) and k not in exclude:\nif isinstance(v, list):\n# Sort lists of values. This includes items like tags, or other M2M fields\nrelevant_data[k] = sorted(v)\nelif k == \"data_schema\" and isinstance(v, str):\n# Standardize the data_schema JSON, since the column is JSON and MySQL/dolt do not guarantee order\nrelevant_data[k] = self.standardize_json(v)\nelse:\nrelevant_data[k] = v\nself.assertEqual(new_model_dict, relevant_data)\ndef assertQuerysetEqualAndNotEmpty(self, qs, values, *args, **kwargs):\n\"\"\"Wrapper for assertQuerysetEqual with additional logic to assert input queryset and values are not empty\"\"\"\nself.assertNotEqual(len(qs), 0, \"Queryset cannot be empty\")\nself.assertNotEqual(len(values), 0, \"Values cannot be empty\")\nreturn self.assertQuerysetEqual(qs, values, *args, **kwargs)\n#\n# Convenience methods\n#\ndef absolute_api_url(self, obj):\n\"\"\"Get the absolute API URL (\"http://nautobot.example.com/api/...\") for a given object.\"\"\"\nrequest = APIRequestFactory(SERVER_NAME=\"nautobot.example.com\").get(\"\")\nreturn request.build_absolute_uri(obj.get_absolute_url(api=True))\ndef standardize_json(self, data):\nobj = json.loads(data)\nreturn json.dumps(obj, sort_keys=True)\n@classmethod\ndef create_tags(cls, *names):\n\"\"\"\n        Create and return a Tag instance for each name given.\n        DEPRECATED: use TagFactory instead.\n        \"\"\"\nwarnings.warn(\n\"create_tags() is deprecated and will be removed in a future Nautobot release. \"\n\"Use nautobot.extras.factory.TagFactory (provided in Nautobot 1.5 and later) instead.\",\nDeprecationWarning,\nstacklevel=2,\n)\nreturn [extras_models.Tag.objects.create(name=name) for name in names]\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.mixins.NautobotTestCaseMixin.absolute_api_url","title":"<code>absolute_api_url(obj)</code>","text":"<p>Get the absolute API URL (\"http://nautobot.example.com/api/...\") for a given object.</p> Source code in <code>nautobot/core/testing/mixins.py</code> <pre><code>def absolute_api_url(self, obj):\n\"\"\"Get the absolute API URL (\"http://nautobot.example.com/api/...\") for a given object.\"\"\"\nrequest = APIRequestFactory(SERVER_NAME=\"nautobot.example.com\").get(\"\")\nreturn request.build_absolute_uri(obj.get_absolute_url(api=True))\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.mixins.NautobotTestCaseMixin.add_permissions","title":"<code>add_permissions(*names)</code>","text":"<p>Assign a set of permissions to the test user. Accepts permission names in the form ._. Source code in <code>nautobot/core/testing/mixins.py</code> <pre><code>def add_permissions(self, *names):\n\"\"\"\n    Assign a set of permissions to the test user. Accepts permission names in the form &lt;app&gt;.&lt;action&gt;_&lt;model&gt;.\n    \"\"\"\nfor name in names:\nct, action = permissions.resolve_permission_ct(name)\nobj_perm = users_models.ObjectPermission(name=name, actions=[action])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ct)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.mixins.NautobotTestCaseMixin.assertHttpStatus","title":"<code>assertHttpStatus(response, expected_status, msg=None)</code>","text":"<p>TestCase method. Provide more detail in the event of an unexpected HTTP response.</p> Source code in <code>nautobot/core/testing/mixins.py</code> <pre><code>def assertHttpStatus(self, response, expected_status, msg=None):\n\"\"\"\n    TestCase method. Provide more detail in the event of an unexpected HTTP response.\n    \"\"\"\nerr_message = None\n# Construct an error message only if we know the test is going to fail\nif isinstance(expected_status, int):\nexpected_status = [expected_status]\nif response.status_code not in expected_status:\nerr_message = f\"Expected HTTP status(es) {expected_status}; received {response.status_code}:\"\nif hasattr(response, \"data\"):\n# REST API response; pass the response data through directly\nerr_message += f\"\\n{response.data}\"\n# Attempt to extract form validation errors from the response HTML\nform_errors = testing.extract_form_failures(response.content.decode(response.charset))\nerr_message += \"\\n\" + str(form_errors or response.content.decode(response.charset) or \"No data\")\nif msg:\nerr_message = f\"{msg}\\n{err_message}\"\nself.assertIn(response.status_code, expected_status, err_message)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.mixins.NautobotTestCaseMixin.assertInstanceEqual","title":"<code>assertInstanceEqual(instance, data, exclude=None, api=False)</code>","text":"<p>Compare a model instance to a dictionary, checking that its attribute values match those specified in the dictionary.</p> <p>:param instance: Python object instance :param data: Dictionary of test data used to define the instance :param exclude: List of fields to exclude from comparison (e.g. passwords, which get hashed) :param api: Set to True is the data is a JSON representation of the instance</p> Source code in <code>nautobot/core/testing/mixins.py</code> <pre><code>def assertInstanceEqual(self, instance, data, exclude=None, api=False):\n\"\"\"\n    Compare a model instance to a dictionary, checking that its attribute values match those specified\n    in the dictionary.\n    :param instance: Python object instance\n    :param data: Dictionary of test data used to define the instance\n    :param exclude: List of fields to exclude from comparison (e.g. passwords, which get hashed)\n    :param api: Set to True is the data is a JSON representation of the instance\n    \"\"\"\nif exclude is None:\nexclude = []\nfields = [k for k in data.keys() if k not in exclude]\nmodel_dict = self.model_to_dict(instance, fields=fields, api=api)\nnew_model_dict = {}\nfor k, v in model_dict.items():\nif isinstance(v, list):\n# Sort lists of values. This includes items like tags, or other M2M fields\nnew_model_dict[k] = sorted(v)\nelif k == \"data_schema\" and isinstance(v, str):\n# Standardize the data_schema JSON, since the column is JSON and MySQL/dolt do not guarantee order\nnew_model_dict[k] = self.standardize_json(v)\nelse:\nnew_model_dict[k] = v\n# Omit any dictionary keys which are not instance attributes or have been excluded\nrelevant_data = {}\nfor k, v in data.items():\nif hasattr(instance, k) and k not in exclude:\nif isinstance(v, list):\n# Sort lists of values. This includes items like tags, or other M2M fields\nrelevant_data[k] = sorted(v)\nelif k == \"data_schema\" and isinstance(v, str):\n# Standardize the data_schema JSON, since the column is JSON and MySQL/dolt do not guarantee order\nrelevant_data[k] = self.standardize_json(v)\nelse:\nrelevant_data[k] = v\nself.assertEqual(new_model_dict, relevant_data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.mixins.NautobotTestCaseMixin.assertQuerysetEqualAndNotEmpty","title":"<code>assertQuerysetEqualAndNotEmpty(qs, values, *args, **kwargs)</code>","text":"<p>Wrapper for assertQuerysetEqual with additional logic to assert input queryset and values are not empty</p> Source code in <code>nautobot/core/testing/mixins.py</code> <pre><code>def assertQuerysetEqualAndNotEmpty(self, qs, values, *args, **kwargs):\n\"\"\"Wrapper for assertQuerysetEqual with additional logic to assert input queryset and values are not empty\"\"\"\nself.assertNotEqual(len(qs), 0, \"Queryset cannot be empty\")\nself.assertNotEqual(len(values), 0, \"Values cannot be empty\")\nreturn self.assertQuerysetEqual(qs, values, *args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.mixins.NautobotTestCaseMixin.create_tags","title":"<code>create_tags(*names)</code>  <code>classmethod</code>","text":"<p>Create and return a Tag instance for each name given.</p> <p>DEPRECATED: use TagFactory instead.</p> Source code in <code>nautobot/core/testing/mixins.py</code> <pre><code>@classmethod\ndef create_tags(cls, *names):\n\"\"\"\n    Create and return a Tag instance for each name given.\n    DEPRECATED: use TagFactory instead.\n    \"\"\"\nwarnings.warn(\n\"create_tags() is deprecated and will be removed in a future Nautobot release. \"\n\"Use nautobot.extras.factory.TagFactory (provided in Nautobot 1.5 and later) instead.\",\nDeprecationWarning,\nstacklevel=2,\n)\nreturn [extras_models.Tag.objects.create(name=name) for name in names]\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.mixins.NautobotTestCaseMixin.model_to_dict","title":"<code>model_to_dict(instance, fields, api=False)</code>","text":"<p>Return a dictionary representation of an instance.</p> Source code in <code>nautobot/core/testing/mixins.py</code> <pre><code>def model_to_dict(self, instance, fields, api=False):\n\"\"\"\n    Return a dictionary representation of an instance.\n    \"\"\"\n# Prepare the instance and call Django's model_to_dict() to extract all fields\nmodel_dict = model_to_dict(self.prepare_instance(instance), fields=fields)\n# Map any additional (non-field) instance attributes that were specified\nfor attr in fields:\nif hasattr(instance, attr) and attr not in model_dict:\nmodel_dict[attr] = getattr(instance, attr)\nfor key, value in list(model_dict.items()):\ntry:\nfield = instance._meta.get_field(key)\nexcept FieldDoesNotExist:\n# Attribute is not a model field, but may be a computed field,\n# so allow `field` checks to pass through.\nfield = None\n# Handle ManyToManyFields\nif value and isinstance(field, (ManyToManyField, core_fields.TagsField)):\n# Only convert ContentType to &lt;app_label&gt;.&lt;model&gt; for API serializers/views\nif api and field.related_model is ContentType:\nmodel_dict[key] = sorted([f\"{ct.app_label}.{ct.model}\" for ct in value])\n# Otherwise always convert object instances to pk\nelse:\nmodel_dict[key] = sorted([obj.pk for obj in value])\nif api:\n# Replace ContentType primary keys with &lt;app_label&gt;.&lt;model&gt;\nif isinstance(getattr(instance, key), ContentType):\nct = ContentType.objects.get(pk=value)\nmodel_dict[key] = f\"{ct.app_label}.{ct.model}\"\n# Convert IPNetwork instances to strings\nelif isinstance(value, IPNetwork):\nmodel_dict[key] = str(value)\nelse:\n# Convert ArrayFields to CSV strings\nif isinstance(field, core_fields.JSONArrayField):\nmodel_dict[key] = \",\".join([str(v) for v in value])\n# Convert JSONField dict values to JSON strings\nif isinstance(field, JSONField) and isinstance(value, dict):\nmodel_dict[key] = json.dumps(value)\nreturn model_dict\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.mixins.NautobotTestCaseMixin.prepare_instance","title":"<code>prepare_instance(instance)</code>","text":"<p>Test cases can override this method to perform any necessary manipulation of an instance prior to its evaluation against test data. For example, it can be used to decrypt a Secret's plaintext attribute.</p> Source code in <code>nautobot/core/testing/mixins.py</code> <pre><code>def prepare_instance(self, instance):\n\"\"\"\n    Test cases can override this method to perform any necessary manipulation of an instance prior to its evaluation\n    against test data. For example, it can be used to decrypt a Secret's plaintext attribute.\n    \"\"\"\nreturn instance\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.mixins.NautobotTestCaseMixin.setUpNautobot","title":"<code>setUpNautobot(client=True, populate_status=False)</code>","text":"<p>Setup shared testuser, statuses and client.</p> Source code in <code>nautobot/core/testing/mixins.py</code> <pre><code>def setUpNautobot(self, client=True, populate_status=False):\n\"\"\"Setup shared testuser, statuses and client.\"\"\"\n# Re-populate status choices after database truncation by TransactionTestCase\nif populate_status:\nmanagement.populate_status_choices(apps, None)\n# Create the test user and assign permissions\nself.user = User.objects.create_user(username=\"nautobotuser\")\nself.add_permissions(*self.user_permissions)\nif client:\n# Initialize the test client\nif not hasattr(self, \"client\") or self.client is None:\nself.client = self.client_class()\n# Force login explicitly with the first-available backend\nself.client.force_login(self.user)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing.NautobotTestClient","title":"<code>nautobot.apps.testing.NautobotTestClient</code>","text":"<p>             Bases: <code>APIClient</code></p> <p>Base client class for Nautobot testing.</p> <p>DO NOT USE THIS IN PRODUCTION NAUTOBOT CODE.</p> Source code in <code>nautobot/core/testing/mixins.py</code> <pre><code>class NautobotTestClient(APIClient):\n\"\"\"\n    Base client class for Nautobot testing.\n    DO NOT USE THIS IN PRODUCTION NAUTOBOT CODE.\n    \"\"\"\ndef __init__(self, *args, **kwargs):\n\"\"\"\n        Default the SERVER_NAME to \"nautobot.example.com\" rather than Django's default \"testserver\".\n        This matches the ALLOWED_HOSTS set in nautobot/core/tests/nautobot_config.py and\n        helps to protect us against issues like https://github.com/nautobot/nautobot/issues/3065.\n        \"\"\"\nkwargs.setdefault(\"SERVER_NAME\", \"nautobot.example.com\")\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.mixins.NautobotTestClient.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>Default the SERVER_NAME to \"nautobot.example.com\" rather than Django's default \"testserver\".</p> <p>This matches the ALLOWED_HOSTS set in nautobot/core/tests/nautobot_config.py and helps to protect us against issues like https://github.com/nautobot/nautobot/issues/3065.</p> Source code in <code>nautobot/core/testing/mixins.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\"\"\"\n    Default the SERVER_NAME to \"nautobot.example.com\" rather than Django's default \"testserver\".\n    This matches the ALLOWED_HOSTS set in nautobot/core/tests/nautobot_config.py and\n    helps to protect us against issues like https://github.com/nautobot/nautobot/issues/3065.\n    \"\"\"\nkwargs.setdefault(\"SERVER_NAME\", \"nautobot.example.com\")\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing.OpenAPISchemaTestCases","title":"<code>nautobot.apps.testing.OpenAPISchemaTestCases</code>","text":"Source code in <code>nautobot/core/testing/schema.py</code> <pre><code>@tag(\"unit\")\nclass OpenAPISchemaTestCases:\nclass BaseSchemaTestCase(views.TestCase):\n\"\"\"Base class for testing of the OpenAPI schema.\"\"\"\n@classmethod\ndef setUpTestData(cls):\n# We could load the schema from the /api/swagger.yaml endpoint in setUp(self) via self.client,\n# but it's fairly expensive to do so. Better to do so only once per class.\ncls.schemas = {}\nfor api_version in api_settings.ALLOWED_VERSIONS:\nout = StringIO()\nerr = StringIO()\ncall_command(\"spectacular\", \"--api-version\", api_version, stdout=out, stderr=err)\ncls.schemas[api_version] = yaml.safe_load(out.getvalue())\ndef get_component_schema(self, component_name, api_version=None):\n\"\"\"Helper method to pull a specific component schema from the larger OpenAPI schema already loaded.\"\"\"\nif api_version is None:\napi_version = settings.REST_FRAMEWORK_VERSION\nself.assertIn(component_name, self.schemas[api_version][\"components\"][\"schemas\"])\nreturn self.schemas[api_version][\"components\"][\"schemas\"][component_name]\ndef assert_component_mapped_by_object_type(self, schema, models):\n\"\"\"Test method to assert that this polymorphic component has the expected permitted types.\"\"\"\n# For all polymorphic nested serializers, we should be using the \"object_type\" field to discriminate them.\nself.assertEqual(schema[\"discriminator\"][\"propertyName\"], \"object_type\")\nif models is None:\nmodels = []\n# We don't care what the schema calls the individual serializers in discriminator.mapping,\n# but we do want to assert that they're the correct set of model content-types as keys\nself.assertEqual(\nset(schema[\"discriminator\"][\"mapping\"].keys()),\n{f\"{model._meta.app_label}.{model._meta.model_name}\" for model in models},\n)\ndef get_schema_property(self, component_schema, property_name):\n\"\"\"Helper method to pull a specific property schema from a larger component schema already extracted.\"\"\"\nself.assertIn(property_name, component_schema[\"properties\"])\nreturn component_schema[\"properties\"][property_name]\ndef get_property_ref_component_name(self, component_schema, property_name):\n\"\"\"Helper method to identify a component referenced by the given property of the current component.\"\"\"\nproperty_schema = self.get_schema_property(component_schema, property_name)\nif \"allOf\" in property_schema:\n# \"allOf\":\n# - \"$ref\": \"#/components/schemas/ComponentName\"\nself.assertEqual(len(property_schema[\"allOf\"]), 1)\nself.assertIn(\"$ref\", property_schema[\"allOf\"][0])\nreturn property_schema[\"allOf\"][0][\"$ref\"].split(\"/\")[-1]\nif property_schema.get(\"type\") == \"array\":\n# \"type\": \"array\"\n# \"items\":\n#   \"$ref\": \"#/components/schemas/ComponentName\"\nself.assertIn(\"items\", property_schema)\nself.assertIn(\"$ref\", property_schema[\"items\"])\nreturn property_schema[\"items\"][\"$ref\"].split(\"/\")[-1]\n# TODO: extend to handle other cases as needed?\nself.fail(f\"Property schema not as expected: {property_schema}\")\nreturn None\ndef assert_nullable_property(self, component_schema, property_name):\n\"\"\"Test method to assert that the given component property is marked as nullable.\"\"\"\nself.assertTrue(self.get_schema_property(component_schema, property_name).get(\"nullable\", False))\ndef assert_not_nullable_property(self, component_schema, property_name):\n\"\"\"Test method to assert that the given component property is marked as non-nullable.\"\"\"\nself.assertFalse(self.get_schema_property(component_schema, property_name).get(\"nullable\", False))\ndef assert_read_only_property(self, component_schema, property_name):\n\"\"\"Test method to assert that the given component property is marked as read-only.\"\"\"\nself.assertTrue(self.get_schema_property(component_schema, property_name).get(\"readOnly\", False))\ndef assert_not_read_only_property(self, component_schema, property_name):\n\"\"\"Test method to assert that the given component property is not marked as read-only.\"\"\"\nself.assertFalse(self.get_schema_property(component_schema, property_name).get(\"readOnly\", False))\ndef validate_polymorphic_property(\nself,\ncomponent_name,\nproperty_name,\nmodels=None,\nnullable=False,\nread_only=True,\nmany=False,\n):\n\"\"\"\n            Bringing it all together.\n            This validates the schema to show that:\n            - The component exists and has such a property\n            - The property has the correct `nullable` and `readOnly` values\n            - The property has the correct multiplicity\n            - The property is a reference to another component\n            - The property's referenced component is polymorphic and has the expected set of model content-types.\n            Returns:\n                (Tuple[ref_component_name, ref_component_schema]): The referenced component's name and schema.\n            \"\"\"\ncomponent_schema = self.get_component_schema(component_name)\nif nullable:\nself.assert_nullable_property(component_schema, property_name)\nelse:\nself.assert_not_nullable_property(component_schema, property_name)\nif read_only:\nself.assert_read_only_property(component_schema, property_name)\nelse:\nself.assert_not_read_only_property(component_schema, property_name)\nif many:\nself.assertEqual(\"array\", self.get_schema_property(component_schema, property_name).get(\"type\"))\nelse:\nself.assertNotEqual(\"array\", self.get_schema_property(component_schema, property_name).get(\"type\"))\nref_component_name = self.get_property_ref_component_name(component_schema, property_name)\nref_component_schema = self.get_component_schema(ref_component_name)\nself.assert_component_mapped_by_object_type(ref_component_schema, models=models)\nreturn (ref_component_name, ref_component_schema)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.schema.OpenAPISchemaTestCases.BaseSchemaTestCase","title":"<code>BaseSchemaTestCase</code>","text":"<p>             Bases: <code>views.TestCase</code></p> <p>Base class for testing of the OpenAPI schema.</p> Source code in <code>nautobot/core/testing/schema.py</code> <pre><code>class BaseSchemaTestCase(views.TestCase):\n\"\"\"Base class for testing of the OpenAPI schema.\"\"\"\n@classmethod\ndef setUpTestData(cls):\n# We could load the schema from the /api/swagger.yaml endpoint in setUp(self) via self.client,\n# but it's fairly expensive to do so. Better to do so only once per class.\ncls.schemas = {}\nfor api_version in api_settings.ALLOWED_VERSIONS:\nout = StringIO()\nerr = StringIO()\ncall_command(\"spectacular\", \"--api-version\", api_version, stdout=out, stderr=err)\ncls.schemas[api_version] = yaml.safe_load(out.getvalue())\ndef get_component_schema(self, component_name, api_version=None):\n\"\"\"Helper method to pull a specific component schema from the larger OpenAPI schema already loaded.\"\"\"\nif api_version is None:\napi_version = settings.REST_FRAMEWORK_VERSION\nself.assertIn(component_name, self.schemas[api_version][\"components\"][\"schemas\"])\nreturn self.schemas[api_version][\"components\"][\"schemas\"][component_name]\ndef assert_component_mapped_by_object_type(self, schema, models):\n\"\"\"Test method to assert that this polymorphic component has the expected permitted types.\"\"\"\n# For all polymorphic nested serializers, we should be using the \"object_type\" field to discriminate them.\nself.assertEqual(schema[\"discriminator\"][\"propertyName\"], \"object_type\")\nif models is None:\nmodels = []\n# We don't care what the schema calls the individual serializers in discriminator.mapping,\n# but we do want to assert that they're the correct set of model content-types as keys\nself.assertEqual(\nset(schema[\"discriminator\"][\"mapping\"].keys()),\n{f\"{model._meta.app_label}.{model._meta.model_name}\" for model in models},\n)\ndef get_schema_property(self, component_schema, property_name):\n\"\"\"Helper method to pull a specific property schema from a larger component schema already extracted.\"\"\"\nself.assertIn(property_name, component_schema[\"properties\"])\nreturn component_schema[\"properties\"][property_name]\ndef get_property_ref_component_name(self, component_schema, property_name):\n\"\"\"Helper method to identify a component referenced by the given property of the current component.\"\"\"\nproperty_schema = self.get_schema_property(component_schema, property_name)\nif \"allOf\" in property_schema:\n# \"allOf\":\n# - \"$ref\": \"#/components/schemas/ComponentName\"\nself.assertEqual(len(property_schema[\"allOf\"]), 1)\nself.assertIn(\"$ref\", property_schema[\"allOf\"][0])\nreturn property_schema[\"allOf\"][0][\"$ref\"].split(\"/\")[-1]\nif property_schema.get(\"type\") == \"array\":\n# \"type\": \"array\"\n# \"items\":\n#   \"$ref\": \"#/components/schemas/ComponentName\"\nself.assertIn(\"items\", property_schema)\nself.assertIn(\"$ref\", property_schema[\"items\"])\nreturn property_schema[\"items\"][\"$ref\"].split(\"/\")[-1]\n# TODO: extend to handle other cases as needed?\nself.fail(f\"Property schema not as expected: {property_schema}\")\nreturn None\ndef assert_nullable_property(self, component_schema, property_name):\n\"\"\"Test method to assert that the given component property is marked as nullable.\"\"\"\nself.assertTrue(self.get_schema_property(component_schema, property_name).get(\"nullable\", False))\ndef assert_not_nullable_property(self, component_schema, property_name):\n\"\"\"Test method to assert that the given component property is marked as non-nullable.\"\"\"\nself.assertFalse(self.get_schema_property(component_schema, property_name).get(\"nullable\", False))\ndef assert_read_only_property(self, component_schema, property_name):\n\"\"\"Test method to assert that the given component property is marked as read-only.\"\"\"\nself.assertTrue(self.get_schema_property(component_schema, property_name).get(\"readOnly\", False))\ndef assert_not_read_only_property(self, component_schema, property_name):\n\"\"\"Test method to assert that the given component property is not marked as read-only.\"\"\"\nself.assertFalse(self.get_schema_property(component_schema, property_name).get(\"readOnly\", False))\ndef validate_polymorphic_property(\nself,\ncomponent_name,\nproperty_name,\nmodels=None,\nnullable=False,\nread_only=True,\nmany=False,\n):\n\"\"\"\n        Bringing it all together.\n        This validates the schema to show that:\n        - The component exists and has such a property\n        - The property has the correct `nullable` and `readOnly` values\n        - The property has the correct multiplicity\n        - The property is a reference to another component\n        - The property's referenced component is polymorphic and has the expected set of model content-types.\n        Returns:\n            (Tuple[ref_component_name, ref_component_schema]): The referenced component's name and schema.\n        \"\"\"\ncomponent_schema = self.get_component_schema(component_name)\nif nullable:\nself.assert_nullable_property(component_schema, property_name)\nelse:\nself.assert_not_nullable_property(component_schema, property_name)\nif read_only:\nself.assert_read_only_property(component_schema, property_name)\nelse:\nself.assert_not_read_only_property(component_schema, property_name)\nif many:\nself.assertEqual(\"array\", self.get_schema_property(component_schema, property_name).get(\"type\"))\nelse:\nself.assertNotEqual(\"array\", self.get_schema_property(component_schema, property_name).get(\"type\"))\nref_component_name = self.get_property_ref_component_name(component_schema, property_name)\nref_component_schema = self.get_component_schema(ref_component_name)\nself.assert_component_mapped_by_object_type(ref_component_schema, models=models)\nreturn (ref_component_name, ref_component_schema)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.schema.OpenAPISchemaTestCases.BaseSchemaTestCase.assert_component_mapped_by_object_type","title":"<code>assert_component_mapped_by_object_type(schema, models)</code>","text":"<p>Test method to assert that this polymorphic component has the expected permitted types.</p> Source code in <code>nautobot/core/testing/schema.py</code> <pre><code>def assert_component_mapped_by_object_type(self, schema, models):\n\"\"\"Test method to assert that this polymorphic component has the expected permitted types.\"\"\"\n# For all polymorphic nested serializers, we should be using the \"object_type\" field to discriminate them.\nself.assertEqual(schema[\"discriminator\"][\"propertyName\"], \"object_type\")\nif models is None:\nmodels = []\n# We don't care what the schema calls the individual serializers in discriminator.mapping,\n# but we do want to assert that they're the correct set of model content-types as keys\nself.assertEqual(\nset(schema[\"discriminator\"][\"mapping\"].keys()),\n{f\"{model._meta.app_label}.{model._meta.model_name}\" for model in models},\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.schema.OpenAPISchemaTestCases.BaseSchemaTestCase.assert_not_nullable_property","title":"<code>assert_not_nullable_property(component_schema, property_name)</code>","text":"<p>Test method to assert that the given component property is marked as non-nullable.</p> Source code in <code>nautobot/core/testing/schema.py</code> <pre><code>def assert_not_nullable_property(self, component_schema, property_name):\n\"\"\"Test method to assert that the given component property is marked as non-nullable.\"\"\"\nself.assertFalse(self.get_schema_property(component_schema, property_name).get(\"nullable\", False))\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.schema.OpenAPISchemaTestCases.BaseSchemaTestCase.assert_not_read_only_property","title":"<code>assert_not_read_only_property(component_schema, property_name)</code>","text":"<p>Test method to assert that the given component property is not marked as read-only.</p> Source code in <code>nautobot/core/testing/schema.py</code> <pre><code>def assert_not_read_only_property(self, component_schema, property_name):\n\"\"\"Test method to assert that the given component property is not marked as read-only.\"\"\"\nself.assertFalse(self.get_schema_property(component_schema, property_name).get(\"readOnly\", False))\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.schema.OpenAPISchemaTestCases.BaseSchemaTestCase.assert_nullable_property","title":"<code>assert_nullable_property(component_schema, property_name)</code>","text":"<p>Test method to assert that the given component property is marked as nullable.</p> Source code in <code>nautobot/core/testing/schema.py</code> <pre><code>def assert_nullable_property(self, component_schema, property_name):\n\"\"\"Test method to assert that the given component property is marked as nullable.\"\"\"\nself.assertTrue(self.get_schema_property(component_schema, property_name).get(\"nullable\", False))\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.schema.OpenAPISchemaTestCases.BaseSchemaTestCase.assert_read_only_property","title":"<code>assert_read_only_property(component_schema, property_name)</code>","text":"<p>Test method to assert that the given component property is marked as read-only.</p> Source code in <code>nautobot/core/testing/schema.py</code> <pre><code>def assert_read_only_property(self, component_schema, property_name):\n\"\"\"Test method to assert that the given component property is marked as read-only.\"\"\"\nself.assertTrue(self.get_schema_property(component_schema, property_name).get(\"readOnly\", False))\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.schema.OpenAPISchemaTestCases.BaseSchemaTestCase.get_component_schema","title":"<code>get_component_schema(component_name, api_version=None)</code>","text":"<p>Helper method to pull a specific component schema from the larger OpenAPI schema already loaded.</p> Source code in <code>nautobot/core/testing/schema.py</code> <pre><code>def get_component_schema(self, component_name, api_version=None):\n\"\"\"Helper method to pull a specific component schema from the larger OpenAPI schema already loaded.\"\"\"\nif api_version is None:\napi_version = settings.REST_FRAMEWORK_VERSION\nself.assertIn(component_name, self.schemas[api_version][\"components\"][\"schemas\"])\nreturn self.schemas[api_version][\"components\"][\"schemas\"][component_name]\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.schema.OpenAPISchemaTestCases.BaseSchemaTestCase.get_property_ref_component_name","title":"<code>get_property_ref_component_name(component_schema, property_name)</code>","text":"<p>Helper method to identify a component referenced by the given property of the current component.</p> Source code in <code>nautobot/core/testing/schema.py</code> <pre><code>def get_property_ref_component_name(self, component_schema, property_name):\n\"\"\"Helper method to identify a component referenced by the given property of the current component.\"\"\"\nproperty_schema = self.get_schema_property(component_schema, property_name)\nif \"allOf\" in property_schema:\n# \"allOf\":\n# - \"$ref\": \"#/components/schemas/ComponentName\"\nself.assertEqual(len(property_schema[\"allOf\"]), 1)\nself.assertIn(\"$ref\", property_schema[\"allOf\"][0])\nreturn property_schema[\"allOf\"][0][\"$ref\"].split(\"/\")[-1]\nif property_schema.get(\"type\") == \"array\":\n# \"type\": \"array\"\n# \"items\":\n#   \"$ref\": \"#/components/schemas/ComponentName\"\nself.assertIn(\"items\", property_schema)\nself.assertIn(\"$ref\", property_schema[\"items\"])\nreturn property_schema[\"items\"][\"$ref\"].split(\"/\")[-1]\n# TODO: extend to handle other cases as needed?\nself.fail(f\"Property schema not as expected: {property_schema}\")\nreturn None\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.schema.OpenAPISchemaTestCases.BaseSchemaTestCase.get_schema_property","title":"<code>get_schema_property(component_schema, property_name)</code>","text":"<p>Helper method to pull a specific property schema from a larger component schema already extracted.</p> Source code in <code>nautobot/core/testing/schema.py</code> <pre><code>def get_schema_property(self, component_schema, property_name):\n\"\"\"Helper method to pull a specific property schema from a larger component schema already extracted.\"\"\"\nself.assertIn(property_name, component_schema[\"properties\"])\nreturn component_schema[\"properties\"][property_name]\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.schema.OpenAPISchemaTestCases.BaseSchemaTestCase.validate_polymorphic_property","title":"<code>validate_polymorphic_property(component_name, property_name, models=None, nullable=False, read_only=True, many=False)</code>","text":"<p>Bringing it all together.</p> <p>This validates the schema to show that: - The component exists and has such a property - The property has the correct <code>nullable</code> and <code>readOnly</code> values - The property has the correct multiplicity - The property is a reference to another component - The property's referenced component is polymorphic and has the expected set of model content-types.</p> <p>Returns:</p> Type Description <code>Tuple[ref_component_name, ref_component_schema]</code> <p>The referenced component's name and schema.</p> Source code in <code>nautobot/core/testing/schema.py</code> <pre><code>def validate_polymorphic_property(\nself,\ncomponent_name,\nproperty_name,\nmodels=None,\nnullable=False,\nread_only=True,\nmany=False,\n):\n\"\"\"\n    Bringing it all together.\n    This validates the schema to show that:\n    - The component exists and has such a property\n    - The property has the correct `nullable` and `readOnly` values\n    - The property has the correct multiplicity\n    - The property is a reference to another component\n    - The property's referenced component is polymorphic and has the expected set of model content-types.\n    Returns:\n        (Tuple[ref_component_name, ref_component_schema]): The referenced component's name and schema.\n    \"\"\"\ncomponent_schema = self.get_component_schema(component_name)\nif nullable:\nself.assert_nullable_property(component_schema, property_name)\nelse:\nself.assert_not_nullable_property(component_schema, property_name)\nif read_only:\nself.assert_read_only_property(component_schema, property_name)\nelse:\nself.assert_not_read_only_property(component_schema, property_name)\nif many:\nself.assertEqual(\"array\", self.get_schema_property(component_schema, property_name).get(\"type\"))\nelse:\nself.assertNotEqual(\"array\", self.get_schema_property(component_schema, property_name).get(\"type\"))\nref_component_name = self.get_property_ref_component_name(component_schema, property_name)\nref_component_schema = self.get_component_schema(ref_component_name)\nself.assert_component_mapped_by_object_type(ref_component_schema, models=models)\nreturn (ref_component_name, ref_component_schema)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing.SeleniumTestCase","title":"<code>nautobot.apps.testing.SeleniumTestCase</code>","text":"<p>             Bases: <code>StaticLiveServerTestCase</code>, <code>testing.NautobotTestCaseMixin</code></p> <p>Base test case for Splinter Selenium integration testing with custom helper methods.</p> <p>This extends <code>django.contrib.staticfiles.testing.StaticLiveServerTestCase</code> so there is no need to run <code>collectstatic</code> prior to running tests.</p> Source code in <code>nautobot/core/testing/integration.py</code> <pre><code>@override_settings(ALLOWED_HOSTS=[\"nautobot.example.com\", SELENIUM_HOST, SELENIUM_HOST.split(\".\")[0]])\n@tag(\"integration\")\nclass SeleniumTestCase(StaticLiveServerTestCase, testing.NautobotTestCaseMixin):\n\"\"\"\n    Base test case for Splinter Selenium integration testing with custom helper methods.\n    This extends `django.contrib.staticfiles.testing.StaticLiveServerTestCase`\n    so there is no need to run `collectstatic` prior to running tests.\n    \"\"\"\nhost = \"0.0.0.0\"  # Always listen publicly\nselenium_host = SELENIUM_HOST  # Docker: `nautobot`; else `host.docker.internal`\n@classmethod\ndef setUpClass(cls):\nsuper().setUpClass()\n# Instantiate the browser object.\nprofile = cls._create_firefox_profile()\ncls.browser = Browser(\n\"remote\",\ncommand_executor=SELENIUM_URL,\nbrowser_profile=profile,\n# See: https://developer.mozilla.org/en-US/docs/Web/WebDriver/Timeouts\n# desired_capabilities={\"timeouts\": {\"implicit\": 60 * 60 * 1000 }},  # 1 hour timeout\n)\ndef setUp(self):\nsuper().setUpNautobot(populate_status=True)\nself.password = \"testpassword\"\nself.user.set_password(self.password)\nself.user.save()\n@classproperty  # https://github.com/PyCQA/pylint-django/issues/240\ndef live_server_url(cls):  # pylint: disable=no-self-argument\nreturn f\"http://{cls.selenium_host}:{cls.server_thread.port}\"\n@classmethod\ndef tearDownClass(cls):\n\"\"\"Close down the browser after tests are ran.\"\"\"\ncls.browser.quit()\ndef login(self, username, password, login_url=LOGIN_URL, button_text=\"Log In\"):\n\"\"\"\n        Navigate to `login_url` and perform a login w/ the provided `username` and `password`.\n        \"\"\"\nself.browser.visit(f\"{self.live_server_url}{login_url}\")\nself.browser.fill(\"username\", username)\nself.browser.fill(\"password\", password)\nself.browser.find_by_xpath(f\"//button[text()='{button_text}']\").first.click()\nif self.browser.is_text_present(\"Please enter a correct username and password.\"):\nself.fail(f\"Unable to login in with username {username}\")\ndef logout(self):\nself.browser.visit(f\"{self.live_server_url}/logout\")\n@classmethod\ndef _create_firefox_profile(cls):\n\"\"\"\n        Return a `FirefoxProfile` with speed-optimized preferences such as disabling image loading,\n        enabling HTTP pipelining, among others.\n        Credit: https://bit.ly/2TuHa9D\n        \"\"\"\nprofile = webdriver.FirefoxProfile()\nfor key, value in FIREFOX_PROFILE_PREFERENCES.items():\nprofile.set_preference(key, value)\nreturn profile\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.integration.SeleniumTestCase.login","title":"<code>login(username, password, login_url=LOGIN_URL, button_text='Log In')</code>","text":"<p>Navigate to <code>login_url</code> and perform a login w/ the provided <code>username</code> and <code>password</code>.</p> Source code in <code>nautobot/core/testing/integration.py</code> <pre><code>def login(self, username, password, login_url=LOGIN_URL, button_text=\"Log In\"):\n\"\"\"\n    Navigate to `login_url` and perform a login w/ the provided `username` and `password`.\n    \"\"\"\nself.browser.visit(f\"{self.live_server_url}{login_url}\")\nself.browser.fill(\"username\", username)\nself.browser.fill(\"password\", password)\nself.browser.find_by_xpath(f\"//button[text()='{button_text}']\").first.click()\nif self.browser.is_text_present(\"Please enter a correct username and password.\"):\nself.fail(f\"Unable to login in with username {username}\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.integration.SeleniumTestCase.tearDownClass","title":"<code>tearDownClass()</code>  <code>classmethod</code>","text":"<p>Close down the browser after tests are ran.</p> Source code in <code>nautobot/core/testing/integration.py</code> <pre><code>@classmethod\ndef tearDownClass(cls):\n\"\"\"Close down the browser after tests are ran.\"\"\"\ncls.browser.quit()\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing.TestCase","title":"<code>nautobot.apps.testing.TestCase</code>","text":"<p>             Bases: <code>mixins.NautobotTestCaseMixin</code>, <code>_TestCase</code></p> <p>Base class for all Nautobot-specific unit tests.</p> Source code in <code>nautobot/core/testing/views.py</code> <pre><code>@tag(\"unit\")\n@override_settings(PAGINATE_COUNT=65000)\nclass TestCase(mixins.NautobotTestCaseMixin, _TestCase):\n\"\"\"Base class for all Nautobot-specific unit tests.\"\"\"\ndef setUp(self):\n\"\"\"Initialize user and client.\"\"\"\nsuper().setUpNautobot()\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.views.TestCase.setUp","title":"<code>setUp()</code>","text":"<p>Initialize user and client.</p> Source code in <code>nautobot/core/testing/views.py</code> <pre><code>def setUp(self):\n\"\"\"Initialize user and client.\"\"\"\nsuper().setUpNautobot()\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing.TransactionTestCase","title":"<code>nautobot.apps.testing.TransactionTestCase</code>","text":"<p>             Bases: <code>_TransactionTestCase</code>, <code>NautobotTestCaseMixin</code></p> <p>Base test case class using the TransactionTestCase for unit testing</p> Source code in <code>nautobot/core/testing/__init__.py</code> <pre><code>@tag(\"unit\")\nclass TransactionTestCase(_TransactionTestCase, NautobotTestCaseMixin):\n\"\"\"\n    Base test case class using the TransactionTestCase for unit testing\n    \"\"\"\n# 'job_logs' is a proxy connection to the same (default) database that's used exclusively for Job logging\ndatabases = (\"default\", \"job_logs\")\ndef setUp(self):\n\"\"\"Provide a clean, post-migration state before each test case.\n        django.test.TransactionTestCase truncates the database after each test runs. We need at least the default\n        statuses present in the database in order to run tests.\"\"\"\nsuper().setUp()\nself.setUpNautobot(client=True, populate_status=True)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.TransactionTestCase.setUp","title":"<code>setUp()</code>","text":"<p>Provide a clean, post-migration state before each test case.</p> <p>django.test.TransactionTestCase truncates the database after each test runs. We need at least the default statuses present in the database in order to run tests.</p> Source code in <code>nautobot/core/testing/__init__.py</code> <pre><code>def setUp(self):\n\"\"\"Provide a clean, post-migration state before each test case.\n    django.test.TransactionTestCase truncates the database after each test runs. We need at least the default\n    statuses present in the database in order to run tests.\"\"\"\nsuper().setUp()\nself.setUpNautobot(client=True, populate_status=True)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing.ViewTestCases","title":"<code>nautobot.apps.testing.ViewTestCases</code>","text":"<p>We keep any TestCases with test_* methods inside a class to prevent unittest from trying to run them.</p> Source code in <code>nautobot/core/testing/views.py</code> <pre><code>@tag(\"unit\")\nclass ViewTestCases:\n\"\"\"\n    We keep any TestCases with test_* methods inside a class to prevent unittest from trying to run them.\n    \"\"\"\nclass GetObjectViewTestCase(ModelViewTestCase):\n\"\"\"\n        Retrieve a single instance.\n        \"\"\"\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_get_object_anonymous(self):\n# Make the request as an unauthenticated user\nself.client.logout()\nresponse = self.client.get(self._get_queryset().first().get_absolute_url())\nself.assertHttpStatus(response, 200)\nresponse_body = response.content.decode(response.charset)\nself.assertIn(\n\"/login/?next=\" + self._get_queryset().first().get_absolute_url(), response_body, msg=response_body\n)\n# The \"Change Log\" tab should appear in the response since we have all exempt permissions\nif issubclass(self.model, extras_models.ChangeLoggedModel):\nresponse_body = testing.extract_page_body(response.content.decode(response.charset))\nself.assertIn(\"Change Log\", response_body, msg=response_body)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_get_object_without_permission(self):\ninstance = self._get_queryset().first()\n# Try GET without permission\nwith testing.disable_warnings(\"django.request\"):\nresponse = self.client.get(instance.get_absolute_url())\nself.assertHttpStatus(response, [403, 404])\nresponse_body = response.content.decode(response.charset)\nself.assertNotIn(\"/login/\", response_body, msg=response_body)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_get_object_with_permission(self):\ninstance = self._get_queryset().first()\n# Add model-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"view\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nresponse = self.client.get(instance.get_absolute_url())\nself.assertHttpStatus(response, 200)\nresponse_body = testing.extract_page_body(response.content.decode(response.charset))\n# The object's display name or string representation should appear in the response\nself.assertIn(escape(getattr(instance, \"display\", str(instance))), response_body, msg=response_body)\n# If any Relationships are defined, they should appear in the response\nif self.relationships is not None:\nfor relationship in self.relationships:  # false positive pylint: disable=not-an-iterable\ncontent_type = ContentType.objects.get_for_model(instance)\nif content_type == relationship.source_type:\nself.assertIn(\nescape(relationship.get_label(extras_choices.RelationshipSideChoices.SIDE_SOURCE)),\nresponse_body,\nmsg=response_body,\n)\nif content_type == relationship.destination_type:\nself.assertIn(\nescape(relationship.get_label(extras_choices.RelationshipSideChoices.SIDE_DESTINATION)),\nresponse_body,\nmsg=response_body,\n)\n# If any Custom Fields are defined, they should appear in the response\nif self.custom_fields is not None:\nfor custom_field in self.custom_fields:  # false positive pylint: disable=not-an-iterable\nself.assertIn(escape(str(custom_field)), response_body, msg=response_body)\nif custom_field.type == extras_choices.CustomFieldTypeChoices.TYPE_MULTISELECT:\nfor value in instance.cf.get(custom_field.key):\nself.assertIn(escape(str(value)), response_body, msg=response_body)\nelse:\nself.assertIn(\nescape(str(instance.cf.get(custom_field.key) or \"\")), response_body, msg=response_body\n)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_get_object_with_constrained_permission(self):\ninstance1, instance2 = self._get_queryset().all()[:2]\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": instance1.pk},\n# To get a different rendering flow than the `test_get_object_with_permission` test above,\n# enable additional permissions for this object so that add/edit/delete buttons are rendered.\nactions=[\"view\", \"add\", \"change\", \"delete\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET to permitted object\nself.assertHttpStatus(self.client.get(instance1.get_absolute_url()), 200)\n# Try GET to non-permitted object\nself.assertHttpStatus(self.client.get(instance2.get_absolute_url()), 404)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_has_advanced_tab(self):\ninstance = self._get_queryset().first()\n# Add model-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"view\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\nresponse = self.client.get(instance.get_absolute_url())\nresponse_body = testing.extract_page_body(response.content.decode(response.charset))\nadvanced_tab_href = f\"{instance.get_absolute_url()}#advanced\"\nself.assertIn(advanced_tab_href, response_body)\nself.assertIn(\"Advanced\", response_body)\nclass GetObjectChangelogViewTestCase(ModelViewTestCase):\n\"\"\"\n        View the changelog for an instance.\n        \"\"\"\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_get_object_changelog(self):\nurl = self._get_url(\"changelog\", self._get_queryset().first())\nresponse = self.client.get(url)\nself.assertHttpStatus(response, 200)\nclass GetObjectNotesViewTestCase(ModelViewTestCase):\n\"\"\"\n        View the notes for an instance.\n        \"\"\"\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_get_object_notes(self):\nif hasattr(self.model, \"notes\"):\nurl = self._get_url(\"notes\", self._get_queryset().first())\nresponse = self.client.get(url)\nself.assertHttpStatus(response, 200)\nclass CreateObjectViewTestCase(ModelViewTestCase):\n\"\"\"\n        Create a single new instance.\n        :form_data: Data to be used when creating a new object.\n        \"\"\"\nform_data = {}\nslug_source = None\nslugify_function = staticmethod(slugify)\nslug_test_object = \"\"\ndef test_create_object_without_permission(self):\n# Try GET without permission\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(self._get_url(\"add\")), 403)\n# Try POST without permission\nrequest = {\n\"path\": self._get_url(\"add\"),\n\"data\": testing.post_data(self.form_data),\n}\nresponse = self.client.post(**request)\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(response, 403)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_create_object_with_permission(self):\ninitial_count = self._get_queryset().count()\n# Assign unconstrained permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nself.assertHttpStatus(self.client.get(self._get_url(\"add\")), 200)\n# Try POST with model-level permission\nrequest = {\n\"path\": self._get_url(\"add\"),\n\"data\": testing.post_data(self.form_data),\n}\nself.assertHttpStatus(self.client.post(**request), 302)\nself.assertEqual(initial_count + 1, self._get_queryset().count())\n# order_by() is no supported by django TreeNode,\n# So we directly retrieve the instance by \"slug\" or \"name\".\nif isinstance(self._get_queryset().first(), TreeNode):\nfilter_by = self.slug_source if getattr(self, \"slug_source\", None) else \"name\"\ninstance = self._get_queryset().get(**{filter_by: self.form_data.get(filter_by)})\nself.assertInstanceEqual(instance, self.form_data)\nelse:\nif hasattr(self.model, \"last_updated\"):\ninstance = self._get_queryset().order_by(\"last_updated\").last()\nself.assertInstanceEqual(instance, self.form_data)\nelse:\ninstance = self._get_queryset().last()\nself.assertInstanceEqual(instance, self.form_data)\nif hasattr(self.model, \"to_objectchange\"):\n# Verify ObjectChange creation\nobjectchanges = lookup.get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, extras_choices.ObjectChangeActionChoices.ACTION_CREATE)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_create_object_with_constrained_permission(self):\ninitial_count = self._get_queryset().count()\n# Assign constrained permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": str(uuid.uuid4())},  # Match a non-existent pk (i.e., deny all)\nactions=[\"add\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with object-level permission\nself.assertHttpStatus(self.client.get(self._get_url(\"add\")), 200)\n# Try to create an object (not permitted)\nrequest = {\n\"path\": self._get_url(\"add\"),\n\"data\": testing.post_data(self.form_data),\n}\nself.assertHttpStatus(self.client.post(**request), 200)\nself.assertEqual(initial_count, self._get_queryset().count())  # Check that no object was created\n# Update the ObjectPermission to allow creation\nobj_perm.constraints = {\"pk__isnull\": False}\nobj_perm.save()\n# Try to create an object (permitted)\nrequest = {\n\"path\": self._get_url(\"add\"),\n\"data\": testing.post_data(self.form_data),\n}\nself.assertHttpStatus(self.client.post(**request), 302)\nself.assertEqual(initial_count + 1, self._get_queryset().count())\n# order_by() is no supported by django TreeNode,\n# So we directly retrieve the instance by \"slug\".\nif isinstance(self._get_queryset().first(), TreeNode):\nfilter_by = self.slug_source if getattr(self, \"slug_source\", None) else \"name\"\ninstance = self._get_queryset().get(**{filter_by: self.form_data.get(filter_by)})\nself.assertInstanceEqual(instance, self.form_data)\nelse:\nif hasattr(self.model, \"last_updated\"):\nself.assertInstanceEqual(self._get_queryset().order_by(\"last_updated\").last(), self.form_data)\nelse:\nself.assertInstanceEqual(self._get_queryset().last(), self.form_data)\ndef test_slug_autocreation(self):\n\"\"\"Test that slug is autocreated through ORM.\"\"\"\n# This really should go on a models test page, but we don't have test structures for models.\nif getattr(self.model, \"slug_source\", None) is not None:\nobj = self.model.objects.get(**{self.slug_source: self.slug_test_object})\nexpected_slug = self.slugify_function(getattr(obj, self.slug_source))\nself.assertEqual(obj.slug, expected_slug)\ndef test_slug_not_modified(self):\n\"\"\"Ensure save method does not modify slug that is passed in.\"\"\"\n# This really should go on a models test page, but we don't have test structures for models.\nif getattr(self.model, \"slug_source\", None) is not None:\nnew_slug_source_value = \"kwyjibo\"\nobj = self.model.objects.get(**{self.slug_source: self.slug_test_object})\nexpected_slug = self.slugify_function(getattr(obj, self.slug_source))\n# Update slug source field str\nfilter_ = self.slug_source + \"__exact\"\nself.model.objects.filter(**{filter_: self.slug_test_object}).update(\n**{self.slug_source: new_slug_source_value}\n)\nobj.refresh_from_db()\nself.assertEqual(getattr(obj, self.slug_source), new_slug_source_value)\nself.assertEqual(obj.slug, expected_slug)\nclass EditObjectViewTestCase(ModelViewTestCase):\n\"\"\"\n        Edit a single existing instance.\n        :form_data: Data to be used when updating the first existing object.\n        \"\"\"\nform_data = {}\ndef test_edit_object_without_permission(self):\ninstance = self._get_queryset().first()\n# Try GET without permission\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(self._get_url(\"edit\", instance)), [403, 404])\n# Try POST without permission\nrequest = {\n\"path\": self._get_url(\"edit\", instance),\n\"data\": testing.post_data(self.form_data),\n}\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.post(**request), [403, 404])\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_edit_object_with_permission(self):\ninstance = self._get_queryset().first()\n# Assign model-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nself.assertHttpStatus(self.client.get(self._get_url(\"edit\", instance)), 200)\n# Try POST with model-level permission\nrequest = {\n\"path\": self._get_url(\"edit\", instance),\n\"data\": testing.post_data(self.form_data),\n}\nself.assertHttpStatus(self.client.post(**request), 302)\nself.assertInstanceEqual(self._get_queryset().get(pk=instance.pk), self.form_data)\nif hasattr(self.model, \"to_objectchange\"):\n# Verify ObjectChange creation\nobjectchanges = lookup.get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, extras_choices.ObjectChangeActionChoices.ACTION_UPDATE)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_edit_object_with_constrained_permission(self):\ninstance1, instance2 = self._get_queryset().all()[:2]\n# Assign constrained permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": instance1.pk},\nactions=[\"change\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with a permitted object\nself.assertHttpStatus(self.client.get(self._get_url(\"edit\", instance1)), 200)\n# Try GET with a non-permitted object\nself.assertHttpStatus(self.client.get(self._get_url(\"edit\", instance2)), 404)\n# Try to edit a permitted object\nrequest = {\n\"path\": self._get_url(\"edit\", instance1),\n\"data\": testing.post_data(self.form_data),\n}\nself.assertHttpStatus(self.client.post(**request), 302)\nself.assertInstanceEqual(self._get_queryset().get(pk=instance1.pk), self.form_data)\n# Try to edit a non-permitted object\nrequest = {\n\"path\": self._get_url(\"edit\", instance2),\n\"data\": testing.post_data(self.form_data),\n}\nself.assertHttpStatus(self.client.post(**request), 404)\nclass DeleteObjectViewTestCase(ModelViewTestCase):\n\"\"\"\n        Delete a single instance.\n        \"\"\"\ndef get_deletable_object(self):\n\"\"\"\n            Get an instance that can be deleted.\n            For some models this may just be any random object, but when we have FKs with `on_delete=models.PROTECT`\n            (as is often the case) we need to find or create an instance that doesn't have such entanglements.\n            \"\"\"\ninstance = testing.get_deletable_objects(self.model, self._get_queryset()).first()\nif instance is None:\nself.fail(\"Couldn't find a single deletable object!\")\nreturn instance\ndef test_delete_object_without_permission(self):\ninstance = self.get_deletable_object()\n# Try GET without permission\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(self._get_url(\"delete\", instance)), [403, 404])\n# Try POST without permission\nrequest = {\n\"path\": self._get_url(\"delete\", instance),\n\"data\": testing.post_data({\"confirm\": True}),\n}\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.post(**request), [403, 404])\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_delete_object_with_permission(self):\ninstance = self.get_deletable_object()\ninstance_note_pk_list = []\nassigned_object_type = ContentType.objects.get_for_model(self.model)\nif hasattr(self.model, \"notes\") and isinstance(instance.notes, extras_querysets.NotesQuerySet):\nnotes = (\nextras_models.Note(\nassigned_object_type=assigned_object_type, assigned_object_id=instance.id, note=\"hello 1\"\n),\nextras_models.Note(\nassigned_object_type=assigned_object_type, assigned_object_id=instance.id, note=\"hello 2\"\n),\nextras_models.Note(\nassigned_object_type=assigned_object_type, assigned_object_id=instance.id, note=\"hello 3\"\n),\n)\nfor note in notes:\nnote.validated_save()\ninstance_note_pk_list.append(note.pk)\n# Assign model-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"delete\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(assigned_object_type)\n# Try GET with model-level permission\nself.assertHttpStatus(self.client.get(self._get_url(\"delete\", instance)), 200)\n# Try POST with model-level permission\nrequest = {\n\"path\": self._get_url(\"delete\", instance),\n\"data\": testing.post_data({\"confirm\": True}),\n}\nself.assertHttpStatus(self.client.post(**request), 302)\nwith self.assertRaises(ObjectDoesNotExist):\nself._get_queryset().get(pk=instance.pk)\nif hasattr(self.model, \"to_objectchange\"):\n# Verify ObjectChange creation\nobjectchanges = lookup.get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, extras_choices.ObjectChangeActionChoices.ACTION_DELETE)\nif hasattr(self.model, \"notes\") and isinstance(instance.notes, extras_querysets.NotesQuerySet):\n# Verify Notes deletion\nwith self.assertRaises(ObjectDoesNotExist):\nextras_models.Note.objects.get(assigned_object_id=instance.pk)\nnote_objectchanges = extras_models.ObjectChange.objects.filter(\nchanged_object_id__in=instance_note_pk_list\n)\nself.assertEqual(note_objectchanges.count(), 3)\nfor object_change in note_objectchanges:\nself.assertEqual(object_change.action, extras_choices.ObjectChangeActionChoices.ACTION_DELETE)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_delete_object_with_permission_and_xwwwformurlencoded(self):\ninstance = self.get_deletable_object()\n# Assign model-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"delete\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nself.assertHttpStatus(self.client.get(self._get_url(\"delete\", instance)), 200)\n# Try POST with model-level permission\nrequest = {\n\"path\": self._get_url(\"delete\", instance),\n\"data\": urlencode({\"confirm\": True}),\n\"content_type\": \"application/x-www-form-urlencoded\",\n}\nself.assertHttpStatus(self.client.post(**request), 302)\nwith self.assertRaises(ObjectDoesNotExist):\nself._get_queryset().get(pk=instance.pk)\nif hasattr(self.model, \"to_objectchange\"):\n# Verify ObjectChange creation\nobjectchanges = lookup.get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, extras_choices.ObjectChangeActionChoices.ACTION_DELETE)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_delete_object_with_constrained_permission(self):\ninstance1 = self.get_deletable_object()\ninstance2 = self._get_queryset().exclude(pk=instance1.pk)[0]\n# Assign object-level permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": instance1.pk},\nactions=[\"delete\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with a permitted object\nself.assertHttpStatus(self.client.get(self._get_url(\"delete\", instance1)), 200)\n# Try GET with a non-permitted object\nself.assertHttpStatus(self.client.get(self._get_url(\"delete\", instance2)), 404)\n# Try to delete a permitted object\nrequest = {\n\"path\": self._get_url(\"delete\", instance1),\n\"data\": testing.post_data({\"confirm\": True}),\n}\nself.assertHttpStatus(self.client.post(**request), 302)\nwith self.assertRaises(ObjectDoesNotExist):\nself._get_queryset().get(pk=instance1.pk)\n# Try to delete a non-permitted object\n# Note that in the case of tree models, deleting instance1 above may have cascade-deleted to instance2,\n# so to be safe, we need to get another object instance that definitely exists:\ninstance3 = self._get_queryset().first()\nrequest = {\n\"path\": self._get_url(\"delete\", instance3),\n\"data\": testing.post_data({\"confirm\": True}),\n}\nself.assertHttpStatus(self.client.post(**request), 404)\nself.assertTrue(self._get_queryset().filter(pk=instance3.pk).exists())\nclass ListObjectsViewTestCase(ModelViewTestCase):\n\"\"\"\n        Retrieve multiple instances.\n        \"\"\"\nfilterset = None\ndef get_filterset(self):\nreturn self.filterset or lookup.get_filterset_for_model(self.model)\n# Helper methods to be overriden by special cases.\n# See ConsoleConnectionsTestCase, InterfaceConnectionsTestCase and PowerConnectionsTestCase\ndef get_list_url(self):\nreturn reverse(helpers.validated_viewname(self.model, \"list\"))\ndef get_title(self):\nreturn helpers.bettertitle(self.model._meta.verbose_name_plural)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_list_objects_anonymous(self):\n# Make the request as an unauthenticated user\nself.client.logout()\nresponse = self.client.get(self._get_url(\"list\"))\nself.assertHttpStatus(response, 200)\nresponse_body = response.content.decode(response.charset)\nself.assertIn(\"/login/?next=\" + self._get_url(\"list\"), response_body, msg=response_body)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_list_objects_filtered(self):\ninstance1, instance2 = self._get_queryset().all()[:2]\nresponse = self.client.get(f\"{self._get_url('list')}?id={instance1.pk}\")\nself.assertHttpStatus(response, 200)\ncontent = testing.extract_page_body(response.content.decode(response.charset))\n# TODO: it'd make test failures more readable if we strip the page headers/footers from the content\nif hasattr(self.model, \"name\"):\nself.assertRegex(content, r\"&gt;\\s*\" + re.escape(escape(instance1.name)) + r\"\\s*&lt;\", msg=content)\nself.assertNotRegex(content, r\"&gt;\\s*\" + re.escape(escape(instance2.name)) + r\"\\s*&lt;\", msg=content)\nif instance1.get_absolute_url() in content:\nself.assertNotIn(instance2.get_absolute_url(), content, msg=content)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"], STRICT_FILTERING=True)\ndef test_list_objects_unknown_filter_strict_filtering(self):\n\"\"\"Verify that with STRICT_FILTERING, an unknown filter results in an error message and no matches.\"\"\"\nresponse = self.client.get(f\"{self._get_url('list')}?ice_cream_flavor=chocolate\")\nself.assertHttpStatus(response, 200)\ncontent = testing.extract_page_body(response.content.decode(response.charset))\n# TODO: it'd make test failures more readable if we strip the page headers/footers from the content\nself.assertIn(\"Unknown filter field\", content, msg=content)\n# There should be no table rows displayed except for the empty results row\nself.assertIn(f\"No {self.model._meta.verbose_name_plural} found\", content, msg=content)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"], STRICT_FILTERING=False)\ndef test_list_objects_unknown_filter_no_strict_filtering(self):\n\"\"\"Verify that without STRICT_FILTERING, an unknown filter is ignored.\"\"\"\ninstance1, instance2 = self._get_queryset().all()[:2]\nwith self.assertLogs(\"nautobot.core.filters\") as cm:\nresponse = self.client.get(f\"{self._get_url('list')}?ice_cream_flavor=chocolate\")\nfilterset = self.get_filterset()\nif not filterset:\nself.fail(\nf\"Couldn't find filterset for model {self.model}. The FilterSet class is expected to be in the \"\n\"filters module within the application associated with the model and its name is expected to be \"\nf\"{self.model.__name__}FilterSet.\"\n)\nself.assertEqual(\ncm.output,\n[\nf'WARNING:nautobot.core.filters:{filterset.__name__}: Unknown filter field \"ice_cream_flavor\"',\n],\n)\nself.assertHttpStatus(response, 200)\ncontent = testing.extract_page_body(response.content.decode(response.charset))\n# TODO: it'd make test failures more readable if we strip the page headers/footers from the content\nself.assertNotIn(\"Unknown filter field\", content, msg=content)\nself.assertNotIn(f\"No {self.model._meta.verbose_name_plural} found\", content, msg=content)\nif hasattr(self.model, \"name\"):\nself.assertRegex(content, r\"&gt;\\s*\" + re.escape(instance1.name) + r\"\\s*&lt;\", msg=content)\nself.assertRegex(content, r\"&gt;\\s*\" + re.escape(instance2.name) + r\"\\s*&lt;\", msg=content)\nif instance1.get_absolute_url() in content:\nself.assertIn(instance2.get_absolute_url(), content, msg=content)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_without_permission(self):\n# Try GET without permission\nwith testing.disable_warnings(\"django.request\"):\nresponse = self.client.get(self._get_url(\"list\"))\nself.assertHttpStatus(response, 403)\nresponse_body = response.content.decode(response.charset)\nself.assertNotIn(\"/login/\", response_body, msg=response_body)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_with_permission(self):\n# Add model-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"view\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nresponse = self.client.get(self._get_url(\"list\"))\nself.assertHttpStatus(response, 200)\nresponse_body = response.content.decode(response.charset)\nlist_url = self.get_list_url()\ntitle = self.get_title()\n# Check if breadcrumb is rendered correctly\nself.assertIn(\nf'&lt;a href=\"{list_url}\"&gt;{title}&lt;/a&gt;',\nresponse_body,\n)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_with_constrained_permission(self):\ninstance1, instance2 = self._get_queryset().all()[:2]\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": instance1.pk},\nactions=[\"view\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with object-level permission\nresponse = self.client.get(self._get_url(\"list\"))\nself.assertHttpStatus(response, 200)\ncontent = testing.extract_page_body(response.content.decode(response.charset))\n# TODO: it'd make test failures more readable if we strip the page headers/footers from the content\nif hasattr(self.model, \"name\"):\nself.assertRegex(content, r\"&gt;\\s*\" + re.escape(instance1.name) + r\"\\s*&lt;\", msg=content)\nself.assertNotRegex(content, r\"&gt;\\s*\" + re.escape(instance2.name) + r\"\\s*&lt;\", msg=content)\nelif hasattr(self.model, \"get_absolute_url\"):\nself.assertIn(instance1.get_absolute_url(), content, msg=content)\nself.assertNotIn(instance2.get_absolute_url(), content, msg=content)\n@skipIf(\n\"example_plugin\" not in settings.PLUGINS,\n\"example_plugin not in settings.PLUGINS\",\n)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_view_plugin_banner(self):\n\"\"\"\n            If example plugin is installed, check if the plugin banner is rendered correctly in ObjectListView.\n            \"\"\"\n# Add model-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"view\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nresponse = self.client.get(self._get_url(\"list\"))\nself.assertHttpStatus(response, 200)\nresponse_body = response.content.decode(response.charset)\n# Check plugin banner is rendered correctly\nself.assertIn(\nf\"&lt;div&gt;You are viewing a table of {self.model._meta.verbose_name_plural}&lt;/div&gt;\", response_body\n)\nclass CreateMultipleObjectsViewTestCase(ModelViewTestCase):\n\"\"\"\n        Create multiple instances using a single form. Expects the creation of three new instances by default.\n        :bulk_create_count: The number of objects expected to be created (default: 3).\n        :bulk_create_data: A dictionary of data to be used for bulk object creation.\n        \"\"\"\nbulk_create_count = 3\nbulk_create_data = {}\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_create_multiple_objects_without_permission(self):\nrequest = {\n\"path\": self._get_url(\"add\"),\n\"data\": testing.post_data(self.bulk_create_data),\n}\n# Try POST without permission\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.post(**request), 403)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_create_multiple_objects_with_permission(self):\ninitial_count = self._get_queryset().count()\nrequest = {\n\"path\": self._get_url(\"add\"),\n\"data\": testing.post_data(self.bulk_create_data),\n}\n# Assign non-constrained permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nactions=[\"add\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Bulk create objects\nresponse = self.client.post(**request)\nself.assertHttpStatus(response, 302)\nself.assertEqual(initial_count + self.bulk_create_count, self._get_queryset().count())\nmatching_count = 0\nfor instance in self._get_queryset().all():\ntry:\nself.assertInstanceEqual(instance, self.bulk_create_data)\nmatching_count += 1\nexcept AssertionError:\npass\nself.assertEqual(matching_count, self.bulk_create_count)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_create_multiple_objects_with_constrained_permission(self):\ninitial_count = self._get_queryset().count()\nrequest = {\n\"path\": self._get_url(\"add\"),\n\"data\": testing.post_data(self.bulk_create_data),\n}\n# Assign constrained permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nactions=[\"add\"],\nconstraints={\"pk\": uuid.uuid4()},  # Match a non-existent pk (i.e., deny all)\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Attempt to make the request with unmet constraints\nself.assertHttpStatus(self.client.post(**request), 200)\nself.assertEqual(self._get_queryset().count(), initial_count)\n# Update the ObjectPermission to allow creation\nobj_perm.constraints = {\"pk__isnull\": False}  # Set constraint to allow all\nobj_perm.save()\nresponse = self.client.post(**request)\nself.assertHttpStatus(response, 302)\nself.assertEqual(initial_count + self.bulk_create_count, self._get_queryset().count())\nmatching_count = 0\nfor instance in self._get_queryset().all():\ntry:\nself.assertInstanceEqual(instance, self.bulk_create_data)\nmatching_count += 1\nexcept AssertionError:\npass\nself.assertEqual(matching_count, self.bulk_create_count)\nclass BulkImportObjectsViewTestCase(ModelViewTestCase):\n\"\"\"\n        Create multiple instances from imported data.\n        Note that CSV import, since it's now implemented via the REST API,\n        is also exercised by APIViewTestCases.CreateObjectViewTestCase.test_recreate_object_csv().\n        :csv_data: A list of CSV-formatted lines (starting with the headers) to be used for bulk object import.\n        \"\"\"\ncsv_data = ()\ndef _get_csv_data(self):\nreturn \"\\n\".join(self.csv_data)\ndef test_bulk_import_objects_without_permission(self):\ndata = {\n\"csv_data\": self._get_csv_data(),\n}\n# Test GET without permission\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(self._get_url(\"import\")), 403)\n# Try POST without permission\nresponse = self.client.post(self._get_url(\"import\"), data)\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(response, 403)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_import_objects_with_permission(self):\ninitial_count = self._get_queryset().count()\ndata = {\n\"csv_data\": self._get_csv_data(),\n}\n# Assign model-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nself.assertHttpStatus(self.client.get(self._get_url(\"import\")), 200)\n# Test POST with permission\nself.assertHttpStatus(self.client.post(self._get_url(\"import\"), data), 200)\nself.assertEqual(self._get_queryset().count(), initial_count + len(self.csv_data) - 1)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_import_objects_with_permission_csv_file(self):\ninitial_count = self._get_queryset().count()\nself.file_contents = bytes(self._get_csv_data(), \"utf-8\")\nself.bulk_import_file = SimpleUploadedFile(name=\"bulk_import_data.csv\", content=self.file_contents)\ndata = {\n\"csv_file\": self.bulk_import_file,\n}\n# Assign model-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nself.assertHttpStatus(self.client.get(self._get_url(\"import\")), 200)\n# Test POST with permission\nresponse = self.client.post(self._get_url(\"import\"), data)\nself.assertHttpStatus(response, 200)\nself.assertEqual(\nself._get_queryset().count(),\ninitial_count + len(self.csv_data) - 1,\ntesting.extract_page_body(response.content.decode(response.charset)),\n)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_import_objects_with_constrained_permission(self):\ninitial_count = self._get_queryset().count()\ndata = {\n\"csv_data\": self._get_csv_data(),\n}\n# Assign constrained permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": str(uuid.uuid4())},  # Match a non-existent pk (i.e., deny all)\nactions=[\"add\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Attempt to import non-permitted objects\nself.assertHttpStatus(self.client.post(self._get_url(\"import\"), data), 200)\nself.assertEqual(self._get_queryset().count(), initial_count)\n# Update permission constraints\nobj_perm.constraints = {\"pk__isnull\": False}  # Set permission to allow all\nobj_perm.save()\n# Import permitted objects\nself.assertHttpStatus(self.client.post(self._get_url(\"import\"), data), 200)\nself.assertEqual(self._get_queryset().count(), initial_count + len(self.csv_data) - 1)\nclass BulkEditObjectsViewTestCase(ModelViewTestCase):\n\"\"\"\n        Edit multiple instances.\n        :bulk_edit_data: A dictionary of data to be used when bulk editing a set of objects. This data should differ\n                         from that used for initial object creation within setUpTestData().\n        \"\"\"\nbulk_edit_data = {}\ndef test_bulk_edit_objects_without_permission(self):\npk_list = list(self._get_queryset().values_list(\"pk\", flat=True)[:3])\ndata = {\n\"pk\": pk_list,\n\"_apply\": True,  # Form button\n}\n# Try POST without permission\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_edit\"), data), 403)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_edit_objects_with_permission(self):\npk_list = list(self._get_queryset().values_list(\"pk\", flat=True)[:3])\ndata = {\n\"pk\": pk_list,\n\"_apply\": True,  # Form button\n}\n# Append the form data to the request\ndata.update(testing.post_data(self.bulk_edit_data))\n# Assign model-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try POST with model-level permission\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_edit\"), data), 302)\nfor instance in self._get_queryset().filter(pk__in=pk_list):\nself.assertInstanceEqual(instance, self.bulk_edit_data)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_edit_form_contains_all_pks(self):\n# We are testing the intermediary step of bulk_edit with pagination applied.\n# i.e. \"_all\" passed in the form.\npk_list = self._get_queryset().values_list(\"pk\", flat=True)\n# We only pass in one pk to test the functionality of \"_all\"\n# which should grab all instance pks regardless of \"pk\"\nselected_data = {\n\"pk\": pk_list[:1],\n\"_all\": \"on\",\n}\n# Assign model-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try POST with model-level permission\nresponse = self.client.post(self._get_url(\"bulk_edit\"), selected_data)\n# Expect a 200 status cause we are only rendering the bulk edit table.\n# after pressing Edit Selected button.\nself.assertHttpStatus(response, 200)\nresponse_body = testing.extract_page_body(response.content.decode(response.charset))\n# Check if all the pks are passed into the BulkEditForm/BulkUpdateForm\nfor pk in pk_list:\nself.assertIn(f'&lt;input type=\"hidden\" name=\"pk\" value=\"{pk}\"', response_body)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_edit_form_contains_all_filtered(self):\n# We are testing the intermediary step of bulk_edit with pagination applied and additional filter.\n# i.e. \"_all\" passed in the form and filter using query params.\nself.add_permissions(f\"{self.model._meta.app_label}.change_{self.model._meta.model_name}\")\npk_iter = iter(self._get_queryset().values_list(\"pk\", flat=True))\ntry:\nfirst_pk = next(pk_iter)\nsecond_pk = next(pk_iter)\nthird_pk = next(pk_iter)\nexcept StopIteration:\nself.fail(f\"Test requires at least three instances of {self.model._meta.model_name} to be defined.\")\npost_data = testing.post_data(self.bulk_edit_data)\n# Open bulk update form with first two objects\nselected_data = {\n\"pk\": third_pk,  # This is ignored when filtering with \"_all\"\n\"_all\": \"on\",\n**post_data,\n}\nquery_string = urlencode({\"id\": (first_pk, second_pk)}, doseq=True)\nresponse = self.client.post(f\"{self._get_url('bulk_edit')}?{query_string}\", selected_data)\n# Expect a 200 status cause we are only rendering the bulk edit table after pressing Edit Selected button.\nself.assertHttpStatus(response, 200)\nresponse_body = testing.extract_page_body(response.content.decode(response.charset))\n# Check if the first and second pk is passed into the form.\nself.assertIn(f'&lt;input type=\"hidden\" name=\"pk\" value=\"{first_pk}\"', response_body)\nself.assertIn(f'&lt;input type=\"hidden\" name=\"pk\" value=\"{second_pk}\"', response_body)\nself.assertIn(\"&lt;h1&gt;Editing 2 \", response_body)\n# Check if the third pk is not passed into the form.\nself.assertNotIn(f'&lt;input type=\"hidden\" name=\"pk\" value=\"{third_pk}\"', response_body)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_edit_objects_with_constrained_permission(self):\n# Select some objects that are *not* already set to match the first value in self.bulk_edit_data or null.\n# We have to exclude null cases because Django filter()/exclude() doesn't like `__in=[None]` as a case.\nattr_name = list(self.bulk_edit_data.keys())[0]\nobjects = (\nself._get_queryset()\n.exclude(**{attr_name: self.bulk_edit_data[attr_name]})\n.exclude(**{f\"{attr_name}__isnull\": True})\n)[:3]\nself.assertEqual(objects.count(), 3)\npk_list = list(objects.values_list(\"pk\", flat=True))\n# Define a permission that permits the above objects, but will not permit them after updating them.\nfield = self.model._meta.get_field(attr_name)\nvalues = [field.value_from_object(obj) for obj in objects]\n# Assign constrained permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nconstraints={f\"{attr_name}__in\": values},\nactions=[\"change\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Build form data\ndata = {\n\"pk\": pk_list,\n\"_apply\": True,  # Form button\n}\ndata.update(testing.post_data(self.bulk_edit_data))\n# Attempt to bulk edit permitted objects into a non-permitted state\nresponse = self.client.post(self._get_url(\"bulk_edit\"), data)\n# 200 because we're sent back to the edit form to try again; if the update were successful it'd be a 302\nself.assertHttpStatus(response, 200)\n# Assert that the objects are NOT updated\nfor instance in self._get_queryset().filter(pk__in=pk_list):\nself.assertIn(field.value_from_object(instance), values)\nself.assertNotEqual(field.value_from_object(instance), self.bulk_edit_data[attr_name])\n# Update permission constraints to permit all objects\nobj_perm.constraints = {\"pk__gt\": 0}\nobj_perm.save()\n# Bulk edit permitted objects and expect a redirect back to the list view\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_edit\"), data), 302)\n# Assert that the objects were all updated correctly\nfor instance in self._get_queryset().filter(pk__in=pk_list):\nself.assertInstanceEqual(instance, self.bulk_edit_data)\nclass BulkDeleteObjectsViewTestCase(ModelViewTestCase):\n\"\"\"\n        Delete multiple instances.\n        \"\"\"\ndef get_deletable_object_pks(self):\n\"\"\"\n            Get a list of PKs corresponding to objects that can be safely bulk-deleted.\n            For some models this may just be any random objects, but when we have FKs with `on_delete=models.PROTECT`\n            (as is often the case) we need to find or create an instance that doesn't have such entanglements.\n            \"\"\"\nreturn testing.get_deletable_objects(self.model, self._get_queryset()).values_list(\"pk\", flat=True)[:3]\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_bulk_delete_objects_without_permission(self):\npk_list = self.get_deletable_object_pks()\ndata = {\n\"pk\": pk_list,\n\"confirm\": True,\n\"_confirm\": True,  # Form button\n}\n# Try POST without permission\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_delete\"), data), 403)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_bulk_delete_objects_with_permission(self):\npk_list = self.get_deletable_object_pks()\ninitial_count = self._get_queryset().count()\ndata = {\n\"pk\": pk_list,\n\"confirm\": True,\n\"_confirm\": True,  # Form button\n}\n# Assign unconstrained permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"delete\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try POST with model-level permission\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_delete\"), data), 302)\nself.assertEqual(self._get_queryset().count(), initial_count - len(pk_list))\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_bulk_delete_form_contains_all_pks(self):\n# We are testing the intermediary step of bulk_delete with pagination applied.\n# i.e. \"_all\" passed in the form.\npk_list = self._get_queryset().values_list(\"pk\", flat=True)\n# We only pass in one pk to test the functionality of \"_all\"\n# which should grab all instance pks regardless of \"pks\".\nselected_data = {\n\"pk\": pk_list[:1],\n\"confirm\": True,\n\"_all\": \"on\",\n}\n# Assign unconstrained permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"delete\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try POST with the selected data first. Emulating selecting all -&gt; pressing Delete Selected button.\nresponse = self.client.post(self._get_url(\"bulk_delete\"), selected_data)\nself.assertHttpStatus(response, 200)\nresponse_body = testing.extract_page_body(response.content.decode(response.charset))\n# Check if all the pks are passed into the BulkDeleteForm/BulkDestroyForm\nfor pk in pk_list:\nself.assertIn(f'&lt;input type=\"hidden\" name=\"pk\" value=\"{pk}\"', response_body)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_delete_form_contains_all_filtered(self):\n# We are testing the intermediary step of bulk_delete with pagination applied and additional filter.\n# i.e. \"_all\" passed in the form and filter using query params.\nself.add_permissions(f\"{self.model._meta.app_label}.delete_{self.model._meta.model_name}\")\npk_iter = iter(self._get_queryset().values_list(\"pk\", flat=True))\ntry:\nfirst_pk = next(pk_iter)\nsecond_pk = next(pk_iter)\nthird_pk = next(pk_iter)\nexcept StopIteration:\nself.fail(f\"Test requires at least three instances of {self.model._meta.model_name} to be defined.\")\n# Open bulk delete form with first two objects\nselected_data = {\n\"pk\": third_pk,  # This is ignored when filtering with \"_all\"\n\"_all\": \"on\",\n}\nquery_string = urlencode({\"id\": (first_pk, second_pk)}, doseq=True)\nresponse = self.client.post(f\"{self._get_url('bulk_delete')}?{query_string}\", selected_data)\n# Expect a 200 status cause we are only rendering the bulk delete table after pressing Delete Selected button.\nself.assertHttpStatus(response, 200)\nresponse_body = testing.extract_page_body(response.content.decode(response.charset))\n# Check if the first and second pk is passed into the form.\nself.assertIn(f'&lt;input type=\"hidden\" name=\"pk\" value=\"{first_pk}\"', response_body)\nself.assertIn(f'&lt;input type=\"hidden\" name=\"pk\" value=\"{second_pk}\"', response_body)\nself.assertIn(\"&lt;strong&gt;Warning:&lt;/strong&gt; The following operation will delete 2 \", response_body)\n# Check if the third pk is not passed into the form.\nself.assertNotIn(f'&lt;input type=\"hidden\" name=\"pk\" value=\"{third_pk}\"', response_body)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_bulk_delete_objects_with_constrained_permission(self):\npk_list = self.get_deletable_object_pks()\ninitial_count = self._get_queryset().count()\ndata = {\n\"pk\": pk_list,\n\"confirm\": True,\n\"_confirm\": True,  # Form button\n}\n# Assign constrained permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": str(uuid.uuid4())},  # Match a non-existent pk (i.e., deny all)\nactions=[\"delete\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Attempt to bulk delete non-permitted objects\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_delete\"), data), 302)\nself.assertEqual(self._get_queryset().count(), initial_count)\n# Update permission constraints\nobj_perm.constraints = {\"pk__isnull\": False}  # Match a non-existent pk (i.e., allow all)\nobj_perm.save()\n# Bulk delete permitted objects\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_delete\"), data), 302)\nself.assertEqual(self._get_queryset().count(), initial_count - len(pk_list))\nclass BulkRenameObjectsViewTestCase(ModelViewTestCase):\n\"\"\"\n        Rename multiple instances.\n        \"\"\"\nrename_data = {\n\"find\": \"^(.*)$\",\n\"replace\": \"\\\\1X\",  # Append an X to the original value\n\"use_regex\": True,\n}\ndef test_bulk_rename_objects_without_permission(self):\npk_list = list(self._get_queryset().values_list(\"pk\", flat=True)[:3])\ndata = {\n\"pk\": pk_list,\n\"_apply\": True,  # Form button\n}\ndata.update(self.rename_data)\n# Test GET without permission\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(self._get_url(\"bulk_rename\")), 403)\n# Try POST without permission\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_rename\"), data), 403)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_rename_objects_with_permission(self):\nobjects = list(self._get_queryset().all()[:3])\npk_list = [obj.pk for obj in objects]\ndata = {\n\"pk\": pk_list,\n\"_apply\": True,  # Form button\n}\ndata.update(self.rename_data)\n# Assign model-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try POST with model-level permission\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_rename\"), data), 302)\nfor i, instance in enumerate(self._get_queryset().filter(pk__in=pk_list)):\nself.assertEqual(instance.name, f\"{objects[i].name}X\")\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_rename_objects_with_constrained_permission(self):\nobjects = list(self._get_queryset().all()[:3])\npk_list = [obj.pk for obj in objects]\ndata = {\n\"pk\": pk_list,\n\"_apply\": True,  # Form button\n}\ndata.update(self.rename_data)\n# Assign constrained permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nconstraints={\"name__regex\": \"[^X]$\"},\nactions=[\"change\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Attempt to bulk edit permitted objects into a non-permitted state\nresponse = self.client.post(self._get_url(\"bulk_rename\"), data)\nself.assertHttpStatus(response, 200)\n# Update permission constraints\nobj_perm.constraints = {\"pk__gt\": 0}\nobj_perm.save()\n# Bulk rename permitted objects\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_rename\"), data), 302)\nfor i, instance in enumerate(self._get_queryset().filter(pk__in=pk_list)):\nself.assertEqual(instance.name, f\"{objects[i].name}X\")\nclass PrimaryObjectViewTestCase(\nGetObjectViewTestCase,\nGetObjectChangelogViewTestCase,\nGetObjectNotesViewTestCase,\nCreateObjectViewTestCase,\nEditObjectViewTestCase,\nDeleteObjectViewTestCase,\nListObjectsViewTestCase,\nBulkImportObjectsViewTestCase,\nBulkEditObjectsViewTestCase,\nBulkDeleteObjectsViewTestCase,\n):\n\"\"\"\n        TestCase suitable for testing all standard View functions for primary objects\n        \"\"\"\nmaxDiff = None\nclass OrganizationalObjectViewTestCase(\nGetObjectViewTestCase,\nGetObjectChangelogViewTestCase,\nGetObjectNotesViewTestCase,\nCreateObjectViewTestCase,\nEditObjectViewTestCase,\nDeleteObjectViewTestCase,\nListObjectsViewTestCase,\nBulkImportObjectsViewTestCase,\nBulkDeleteObjectsViewTestCase,\n):\n\"\"\"\n        TestCase suitable for all organizational objects\n        \"\"\"\nmaxDiff = None\nclass DeviceComponentTemplateViewTestCase(\nEditObjectViewTestCase,\nDeleteObjectViewTestCase,\nCreateMultipleObjectsViewTestCase,\nBulkEditObjectsViewTestCase,\nBulkRenameObjectsViewTestCase,\nBulkDeleteObjectsViewTestCase,\n):\n\"\"\"\n        TestCase suitable for testing device component template models (ConsolePortTemplates, InterfaceTemplates, etc.)\n        \"\"\"\nmaxDiff = None\nclass DeviceComponentViewTestCase(\nGetObjectViewTestCase,\nGetObjectChangelogViewTestCase,\nGetObjectNotesViewTestCase,\nEditObjectViewTestCase,\nDeleteObjectViewTestCase,\nListObjectsViewTestCase,\nCreateMultipleObjectsViewTestCase,\nBulkImportObjectsViewTestCase,\nBulkEditObjectsViewTestCase,\nBulkRenameObjectsViewTestCase,\nBulkDeleteObjectsViewTestCase,\n):\n\"\"\"\n        TestCase suitable for testing device component models (ConsolePorts, Interfaces, etc.)\n        \"\"\"\nmaxDiff = None\nbulk_add_data = None\n\"\"\"Used for bulk-add (distinct from bulk-create) view testing; self.bulk_create_data will be used if unset.\"\"\"\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_add_component(self):\n\"\"\"Test bulk-adding this component to devices/virtual-machines.\"\"\"\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\ninitial_count = self._get_queryset().count()\ndata = (self.bulk_add_data or self.bulk_create_data).copy()\n# Load the device-bulk-add or virtualmachine-bulk-add form\nif \"device\" in data:\nurl = reverse(f\"dcim:device_bulk_add_{self.model._meta.model_name}\")\nrequest = {\n\"path\": url,\n\"data\": testing.post_data({\"pk\": data[\"device\"]}),\n}\nelse:\nurl = reverse(f\"virtualization:virtualmachine_bulk_add_{self.model._meta.model_name}\")\nrequest = {\n\"path\": url,\n\"data\": testing.post_data({\"pk\": data[\"virtual_machine\"]}),\n}\nself.assertHttpStatus(self.client.post(**request), 200)\n# Post to the device-bulk-add or virtualmachine-bulk-add form to create records\nif \"device\" in data:\ndata[\"pk\"] = data.pop(\"device\")\nelse:\ndata[\"pk\"] = data.pop(\"virtual_machine\")\ndata[\"_create\"] = \"\"\nrequest[\"data\"] = testing.post_data(data)\nself.assertHttpStatus(self.client.post(**request), 302)\nupdated_count = self._get_queryset().count()\nself.assertEqual(updated_count, initial_count + self.bulk_create_count)\nmatching_count = 0\nfor instance in self._get_queryset().all():\ntry:\nself.assertInstanceEqual(instance, (self.bulk_add_data or self.bulk_create_data))\nmatching_count += 1\nexcept AssertionError:\npass\nself.assertEqual(matching_count, self.bulk_create_count)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_rename(self):\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\nobjects = self.selected_objects\npk_list = [obj.pk for obj in objects]\n# Apply button not yet clicked\ndata = {\"pk\": pk_list}\ndata.update(self.rename_data)\nverbose_name_plural = self.model._meta.verbose_name_plural\nwith self.subTest(\"Assert device name in HTML\"):\nresponse = self.client.post(self._get_url(\"bulk_rename\"), data)\nmessage = (\nf\"Renaming {len(objects)} {helpers.bettertitle(verbose_name_plural)} \"\nf\"on {self.selected_objects_parent_name}\"\n)\nself.assertInHTML(message, response.content.decode(response.charset))\nwith self.subTest(\"Assert update successfully\"):\ndata[\"_apply\"] = True  # Form Apply button\nresponse = self.client.post(self._get_url(\"bulk_rename\"), data)\nself.assertHttpStatus(response, 302)\nqueryset = self._get_queryset().filter(pk__in=pk_list)\nfor instance in objects:\nself.assertEqual(queryset.get(pk=instance.pk).name, f\"{instance.name}X\")\nwith self.subTest(\"Assert if no valid objects selected return with error\"):\nfor values in ([], [str(uuid.uuid4())]):\ndata[\"pk\"] = values\nresponse = self.client.post(self._get_url(\"bulk_rename\"), data, follow=True)\nexpected_message = f\"No valid {verbose_name_plural} were selected.\"\nself.assertIn(expected_message, response.content.decode(response.charset))\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.views.ViewTestCases.BulkDeleteObjectsViewTestCase","title":"<code>BulkDeleteObjectsViewTestCase</code>","text":"<p>             Bases: <code>ModelViewTestCase</code></p> <p>Delete multiple instances.</p> Source code in <code>nautobot/core/testing/views.py</code> <pre><code>class BulkDeleteObjectsViewTestCase(ModelViewTestCase):\n\"\"\"\n    Delete multiple instances.\n    \"\"\"\ndef get_deletable_object_pks(self):\n\"\"\"\n        Get a list of PKs corresponding to objects that can be safely bulk-deleted.\n        For some models this may just be any random objects, but when we have FKs with `on_delete=models.PROTECT`\n        (as is often the case) we need to find or create an instance that doesn't have such entanglements.\n        \"\"\"\nreturn testing.get_deletable_objects(self.model, self._get_queryset()).values_list(\"pk\", flat=True)[:3]\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_bulk_delete_objects_without_permission(self):\npk_list = self.get_deletable_object_pks()\ndata = {\n\"pk\": pk_list,\n\"confirm\": True,\n\"_confirm\": True,  # Form button\n}\n# Try POST without permission\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_delete\"), data), 403)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_bulk_delete_objects_with_permission(self):\npk_list = self.get_deletable_object_pks()\ninitial_count = self._get_queryset().count()\ndata = {\n\"pk\": pk_list,\n\"confirm\": True,\n\"_confirm\": True,  # Form button\n}\n# Assign unconstrained permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"delete\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try POST with model-level permission\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_delete\"), data), 302)\nself.assertEqual(self._get_queryset().count(), initial_count - len(pk_list))\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_bulk_delete_form_contains_all_pks(self):\n# We are testing the intermediary step of bulk_delete with pagination applied.\n# i.e. \"_all\" passed in the form.\npk_list = self._get_queryset().values_list(\"pk\", flat=True)\n# We only pass in one pk to test the functionality of \"_all\"\n# which should grab all instance pks regardless of \"pks\".\nselected_data = {\n\"pk\": pk_list[:1],\n\"confirm\": True,\n\"_all\": \"on\",\n}\n# Assign unconstrained permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"delete\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try POST with the selected data first. Emulating selecting all -&gt; pressing Delete Selected button.\nresponse = self.client.post(self._get_url(\"bulk_delete\"), selected_data)\nself.assertHttpStatus(response, 200)\nresponse_body = testing.extract_page_body(response.content.decode(response.charset))\n# Check if all the pks are passed into the BulkDeleteForm/BulkDestroyForm\nfor pk in pk_list:\nself.assertIn(f'&lt;input type=\"hidden\" name=\"pk\" value=\"{pk}\"', response_body)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_delete_form_contains_all_filtered(self):\n# We are testing the intermediary step of bulk_delete with pagination applied and additional filter.\n# i.e. \"_all\" passed in the form and filter using query params.\nself.add_permissions(f\"{self.model._meta.app_label}.delete_{self.model._meta.model_name}\")\npk_iter = iter(self._get_queryset().values_list(\"pk\", flat=True))\ntry:\nfirst_pk = next(pk_iter)\nsecond_pk = next(pk_iter)\nthird_pk = next(pk_iter)\nexcept StopIteration:\nself.fail(f\"Test requires at least three instances of {self.model._meta.model_name} to be defined.\")\n# Open bulk delete form with first two objects\nselected_data = {\n\"pk\": third_pk,  # This is ignored when filtering with \"_all\"\n\"_all\": \"on\",\n}\nquery_string = urlencode({\"id\": (first_pk, second_pk)}, doseq=True)\nresponse = self.client.post(f\"{self._get_url('bulk_delete')}?{query_string}\", selected_data)\n# Expect a 200 status cause we are only rendering the bulk delete table after pressing Delete Selected button.\nself.assertHttpStatus(response, 200)\nresponse_body = testing.extract_page_body(response.content.decode(response.charset))\n# Check if the first and second pk is passed into the form.\nself.assertIn(f'&lt;input type=\"hidden\" name=\"pk\" value=\"{first_pk}\"', response_body)\nself.assertIn(f'&lt;input type=\"hidden\" name=\"pk\" value=\"{second_pk}\"', response_body)\nself.assertIn(\"&lt;strong&gt;Warning:&lt;/strong&gt; The following operation will delete 2 \", response_body)\n# Check if the third pk is not passed into the form.\nself.assertNotIn(f'&lt;input type=\"hidden\" name=\"pk\" value=\"{third_pk}\"', response_body)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_bulk_delete_objects_with_constrained_permission(self):\npk_list = self.get_deletable_object_pks()\ninitial_count = self._get_queryset().count()\ndata = {\n\"pk\": pk_list,\n\"confirm\": True,\n\"_confirm\": True,  # Form button\n}\n# Assign constrained permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": str(uuid.uuid4())},  # Match a non-existent pk (i.e., deny all)\nactions=[\"delete\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Attempt to bulk delete non-permitted objects\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_delete\"), data), 302)\nself.assertEqual(self._get_queryset().count(), initial_count)\n# Update permission constraints\nobj_perm.constraints = {\"pk__isnull\": False}  # Match a non-existent pk (i.e., allow all)\nobj_perm.save()\n# Bulk delete permitted objects\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_delete\"), data), 302)\nself.assertEqual(self._get_queryset().count(), initial_count - len(pk_list))\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.views.ViewTestCases.BulkDeleteObjectsViewTestCase.get_deletable_object_pks","title":"<code>get_deletable_object_pks()</code>","text":"<p>Get a list of PKs corresponding to objects that can be safely bulk-deleted.</p> <p>For some models this may just be any random objects, but when we have FKs with <code>on_delete=models.PROTECT</code> (as is often the case) we need to find or create an instance that doesn't have such entanglements.</p> Source code in <code>nautobot/core/testing/views.py</code> <pre><code>def get_deletable_object_pks(self):\n\"\"\"\n    Get a list of PKs corresponding to objects that can be safely bulk-deleted.\n    For some models this may just be any random objects, but when we have FKs with `on_delete=models.PROTECT`\n    (as is often the case) we need to find or create an instance that doesn't have such entanglements.\n    \"\"\"\nreturn testing.get_deletable_objects(self.model, self._get_queryset()).values_list(\"pk\", flat=True)[:3]\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.views.ViewTestCases.BulkEditObjectsViewTestCase","title":"<code>BulkEditObjectsViewTestCase</code>","text":"<p>             Bases: <code>ModelViewTestCase</code></p> <p>Edit multiple instances.</p> <p>:bulk_edit_data: A dictionary of data to be used when bulk editing a set of objects. This data should differ                  from that used for initial object creation within setUpTestData().</p> Source code in <code>nautobot/core/testing/views.py</code> <pre><code>class BulkEditObjectsViewTestCase(ModelViewTestCase):\n\"\"\"\n    Edit multiple instances.\n    :bulk_edit_data: A dictionary of data to be used when bulk editing a set of objects. This data should differ\n                     from that used for initial object creation within setUpTestData().\n    \"\"\"\nbulk_edit_data = {}\ndef test_bulk_edit_objects_without_permission(self):\npk_list = list(self._get_queryset().values_list(\"pk\", flat=True)[:3])\ndata = {\n\"pk\": pk_list,\n\"_apply\": True,  # Form button\n}\n# Try POST without permission\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_edit\"), data), 403)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_edit_objects_with_permission(self):\npk_list = list(self._get_queryset().values_list(\"pk\", flat=True)[:3])\ndata = {\n\"pk\": pk_list,\n\"_apply\": True,  # Form button\n}\n# Append the form data to the request\ndata.update(testing.post_data(self.bulk_edit_data))\n# Assign model-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try POST with model-level permission\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_edit\"), data), 302)\nfor instance in self._get_queryset().filter(pk__in=pk_list):\nself.assertInstanceEqual(instance, self.bulk_edit_data)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_edit_form_contains_all_pks(self):\n# We are testing the intermediary step of bulk_edit with pagination applied.\n# i.e. \"_all\" passed in the form.\npk_list = self._get_queryset().values_list(\"pk\", flat=True)\n# We only pass in one pk to test the functionality of \"_all\"\n# which should grab all instance pks regardless of \"pk\"\nselected_data = {\n\"pk\": pk_list[:1],\n\"_all\": \"on\",\n}\n# Assign model-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try POST with model-level permission\nresponse = self.client.post(self._get_url(\"bulk_edit\"), selected_data)\n# Expect a 200 status cause we are only rendering the bulk edit table.\n# after pressing Edit Selected button.\nself.assertHttpStatus(response, 200)\nresponse_body = testing.extract_page_body(response.content.decode(response.charset))\n# Check if all the pks are passed into the BulkEditForm/BulkUpdateForm\nfor pk in pk_list:\nself.assertIn(f'&lt;input type=\"hidden\" name=\"pk\" value=\"{pk}\"', response_body)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_edit_form_contains_all_filtered(self):\n# We are testing the intermediary step of bulk_edit with pagination applied and additional filter.\n# i.e. \"_all\" passed in the form and filter using query params.\nself.add_permissions(f\"{self.model._meta.app_label}.change_{self.model._meta.model_name}\")\npk_iter = iter(self._get_queryset().values_list(\"pk\", flat=True))\ntry:\nfirst_pk = next(pk_iter)\nsecond_pk = next(pk_iter)\nthird_pk = next(pk_iter)\nexcept StopIteration:\nself.fail(f\"Test requires at least three instances of {self.model._meta.model_name} to be defined.\")\npost_data = testing.post_data(self.bulk_edit_data)\n# Open bulk update form with first two objects\nselected_data = {\n\"pk\": third_pk,  # This is ignored when filtering with \"_all\"\n\"_all\": \"on\",\n**post_data,\n}\nquery_string = urlencode({\"id\": (first_pk, second_pk)}, doseq=True)\nresponse = self.client.post(f\"{self._get_url('bulk_edit')}?{query_string}\", selected_data)\n# Expect a 200 status cause we are only rendering the bulk edit table after pressing Edit Selected button.\nself.assertHttpStatus(response, 200)\nresponse_body = testing.extract_page_body(response.content.decode(response.charset))\n# Check if the first and second pk is passed into the form.\nself.assertIn(f'&lt;input type=\"hidden\" name=\"pk\" value=\"{first_pk}\"', response_body)\nself.assertIn(f'&lt;input type=\"hidden\" name=\"pk\" value=\"{second_pk}\"', response_body)\nself.assertIn(\"&lt;h1&gt;Editing 2 \", response_body)\n# Check if the third pk is not passed into the form.\nself.assertNotIn(f'&lt;input type=\"hidden\" name=\"pk\" value=\"{third_pk}\"', response_body)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_edit_objects_with_constrained_permission(self):\n# Select some objects that are *not* already set to match the first value in self.bulk_edit_data or null.\n# We have to exclude null cases because Django filter()/exclude() doesn't like `__in=[None]` as a case.\nattr_name = list(self.bulk_edit_data.keys())[0]\nobjects = (\nself._get_queryset()\n.exclude(**{attr_name: self.bulk_edit_data[attr_name]})\n.exclude(**{f\"{attr_name}__isnull\": True})\n)[:3]\nself.assertEqual(objects.count(), 3)\npk_list = list(objects.values_list(\"pk\", flat=True))\n# Define a permission that permits the above objects, but will not permit them after updating them.\nfield = self.model._meta.get_field(attr_name)\nvalues = [field.value_from_object(obj) for obj in objects]\n# Assign constrained permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nconstraints={f\"{attr_name}__in\": values},\nactions=[\"change\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Build form data\ndata = {\n\"pk\": pk_list,\n\"_apply\": True,  # Form button\n}\ndata.update(testing.post_data(self.bulk_edit_data))\n# Attempt to bulk edit permitted objects into a non-permitted state\nresponse = self.client.post(self._get_url(\"bulk_edit\"), data)\n# 200 because we're sent back to the edit form to try again; if the update were successful it'd be a 302\nself.assertHttpStatus(response, 200)\n# Assert that the objects are NOT updated\nfor instance in self._get_queryset().filter(pk__in=pk_list):\nself.assertIn(field.value_from_object(instance), values)\nself.assertNotEqual(field.value_from_object(instance), self.bulk_edit_data[attr_name])\n# Update permission constraints to permit all objects\nobj_perm.constraints = {\"pk__gt\": 0}\nobj_perm.save()\n# Bulk edit permitted objects and expect a redirect back to the list view\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_edit\"), data), 302)\n# Assert that the objects were all updated correctly\nfor instance in self._get_queryset().filter(pk__in=pk_list):\nself.assertInstanceEqual(instance, self.bulk_edit_data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.views.ViewTestCases.BulkImportObjectsViewTestCase","title":"<code>BulkImportObjectsViewTestCase</code>","text":"<p>             Bases: <code>ModelViewTestCase</code></p> <p>Create multiple instances from imported data.</p> <p>Note that CSV import, since it's now implemented via the REST API, is also exercised by APIViewTestCases.CreateObjectViewTestCase.test_recreate_object_csv().</p> <p>:csv_data: A list of CSV-formatted lines (starting with the headers) to be used for bulk object import.</p> Source code in <code>nautobot/core/testing/views.py</code> <pre><code>class BulkImportObjectsViewTestCase(ModelViewTestCase):\n\"\"\"\n    Create multiple instances from imported data.\n    Note that CSV import, since it's now implemented via the REST API,\n    is also exercised by APIViewTestCases.CreateObjectViewTestCase.test_recreate_object_csv().\n    :csv_data: A list of CSV-formatted lines (starting with the headers) to be used for bulk object import.\n    \"\"\"\ncsv_data = ()\ndef _get_csv_data(self):\nreturn \"\\n\".join(self.csv_data)\ndef test_bulk_import_objects_without_permission(self):\ndata = {\n\"csv_data\": self._get_csv_data(),\n}\n# Test GET without permission\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(self._get_url(\"import\")), 403)\n# Try POST without permission\nresponse = self.client.post(self._get_url(\"import\"), data)\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(response, 403)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_import_objects_with_permission(self):\ninitial_count = self._get_queryset().count()\ndata = {\n\"csv_data\": self._get_csv_data(),\n}\n# Assign model-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nself.assertHttpStatus(self.client.get(self._get_url(\"import\")), 200)\n# Test POST with permission\nself.assertHttpStatus(self.client.post(self._get_url(\"import\"), data), 200)\nself.assertEqual(self._get_queryset().count(), initial_count + len(self.csv_data) - 1)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_import_objects_with_permission_csv_file(self):\ninitial_count = self._get_queryset().count()\nself.file_contents = bytes(self._get_csv_data(), \"utf-8\")\nself.bulk_import_file = SimpleUploadedFile(name=\"bulk_import_data.csv\", content=self.file_contents)\ndata = {\n\"csv_file\": self.bulk_import_file,\n}\n# Assign model-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nself.assertHttpStatus(self.client.get(self._get_url(\"import\")), 200)\n# Test POST with permission\nresponse = self.client.post(self._get_url(\"import\"), data)\nself.assertHttpStatus(response, 200)\nself.assertEqual(\nself._get_queryset().count(),\ninitial_count + len(self.csv_data) - 1,\ntesting.extract_page_body(response.content.decode(response.charset)),\n)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_import_objects_with_constrained_permission(self):\ninitial_count = self._get_queryset().count()\ndata = {\n\"csv_data\": self._get_csv_data(),\n}\n# Assign constrained permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": str(uuid.uuid4())},  # Match a non-existent pk (i.e., deny all)\nactions=[\"add\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Attempt to import non-permitted objects\nself.assertHttpStatus(self.client.post(self._get_url(\"import\"), data), 200)\nself.assertEqual(self._get_queryset().count(), initial_count)\n# Update permission constraints\nobj_perm.constraints = {\"pk__isnull\": False}  # Set permission to allow all\nobj_perm.save()\n# Import permitted objects\nself.assertHttpStatus(self.client.post(self._get_url(\"import\"), data), 200)\nself.assertEqual(self._get_queryset().count(), initial_count + len(self.csv_data) - 1)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.views.ViewTestCases.BulkRenameObjectsViewTestCase","title":"<code>BulkRenameObjectsViewTestCase</code>","text":"<p>             Bases: <code>ModelViewTestCase</code></p> <p>Rename multiple instances.</p> Source code in <code>nautobot/core/testing/views.py</code> <pre><code>class BulkRenameObjectsViewTestCase(ModelViewTestCase):\n\"\"\"\n    Rename multiple instances.\n    \"\"\"\nrename_data = {\n\"find\": \"^(.*)$\",\n\"replace\": \"\\\\1X\",  # Append an X to the original value\n\"use_regex\": True,\n}\ndef test_bulk_rename_objects_without_permission(self):\npk_list = list(self._get_queryset().values_list(\"pk\", flat=True)[:3])\ndata = {\n\"pk\": pk_list,\n\"_apply\": True,  # Form button\n}\ndata.update(self.rename_data)\n# Test GET without permission\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(self._get_url(\"bulk_rename\")), 403)\n# Try POST without permission\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_rename\"), data), 403)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_rename_objects_with_permission(self):\nobjects = list(self._get_queryset().all()[:3])\npk_list = [obj.pk for obj in objects]\ndata = {\n\"pk\": pk_list,\n\"_apply\": True,  # Form button\n}\ndata.update(self.rename_data)\n# Assign model-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try POST with model-level permission\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_rename\"), data), 302)\nfor i, instance in enumerate(self._get_queryset().filter(pk__in=pk_list)):\nself.assertEqual(instance.name, f\"{objects[i].name}X\")\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_rename_objects_with_constrained_permission(self):\nobjects = list(self._get_queryset().all()[:3])\npk_list = [obj.pk for obj in objects]\ndata = {\n\"pk\": pk_list,\n\"_apply\": True,  # Form button\n}\ndata.update(self.rename_data)\n# Assign constrained permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nconstraints={\"name__regex\": \"[^X]$\"},\nactions=[\"change\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Attempt to bulk edit permitted objects into a non-permitted state\nresponse = self.client.post(self._get_url(\"bulk_rename\"), data)\nself.assertHttpStatus(response, 200)\n# Update permission constraints\nobj_perm.constraints = {\"pk__gt\": 0}\nobj_perm.save()\n# Bulk rename permitted objects\nself.assertHttpStatus(self.client.post(self._get_url(\"bulk_rename\"), data), 302)\nfor i, instance in enumerate(self._get_queryset().filter(pk__in=pk_list)):\nself.assertEqual(instance.name, f\"{objects[i].name}X\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.views.ViewTestCases.CreateMultipleObjectsViewTestCase","title":"<code>CreateMultipleObjectsViewTestCase</code>","text":"<p>             Bases: <code>ModelViewTestCase</code></p> <p>Create multiple instances using a single form. Expects the creation of three new instances by default.</p> <p>:bulk_create_count: The number of objects expected to be created (default: 3). :bulk_create_data: A dictionary of data to be used for bulk object creation.</p> Source code in <code>nautobot/core/testing/views.py</code> <pre><code>class CreateMultipleObjectsViewTestCase(ModelViewTestCase):\n\"\"\"\n    Create multiple instances using a single form. Expects the creation of three new instances by default.\n    :bulk_create_count: The number of objects expected to be created (default: 3).\n    :bulk_create_data: A dictionary of data to be used for bulk object creation.\n    \"\"\"\nbulk_create_count = 3\nbulk_create_data = {}\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_create_multiple_objects_without_permission(self):\nrequest = {\n\"path\": self._get_url(\"add\"),\n\"data\": testing.post_data(self.bulk_create_data),\n}\n# Try POST without permission\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.post(**request), 403)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_create_multiple_objects_with_permission(self):\ninitial_count = self._get_queryset().count()\nrequest = {\n\"path\": self._get_url(\"add\"),\n\"data\": testing.post_data(self.bulk_create_data),\n}\n# Assign non-constrained permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nactions=[\"add\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Bulk create objects\nresponse = self.client.post(**request)\nself.assertHttpStatus(response, 302)\nself.assertEqual(initial_count + self.bulk_create_count, self._get_queryset().count())\nmatching_count = 0\nfor instance in self._get_queryset().all():\ntry:\nself.assertInstanceEqual(instance, self.bulk_create_data)\nmatching_count += 1\nexcept AssertionError:\npass\nself.assertEqual(matching_count, self.bulk_create_count)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_create_multiple_objects_with_constrained_permission(self):\ninitial_count = self._get_queryset().count()\nrequest = {\n\"path\": self._get_url(\"add\"),\n\"data\": testing.post_data(self.bulk_create_data),\n}\n# Assign constrained permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nactions=[\"add\"],\nconstraints={\"pk\": uuid.uuid4()},  # Match a non-existent pk (i.e., deny all)\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Attempt to make the request with unmet constraints\nself.assertHttpStatus(self.client.post(**request), 200)\nself.assertEqual(self._get_queryset().count(), initial_count)\n# Update the ObjectPermission to allow creation\nobj_perm.constraints = {\"pk__isnull\": False}  # Set constraint to allow all\nobj_perm.save()\nresponse = self.client.post(**request)\nself.assertHttpStatus(response, 302)\nself.assertEqual(initial_count + self.bulk_create_count, self._get_queryset().count())\nmatching_count = 0\nfor instance in self._get_queryset().all():\ntry:\nself.assertInstanceEqual(instance, self.bulk_create_data)\nmatching_count += 1\nexcept AssertionError:\npass\nself.assertEqual(matching_count, self.bulk_create_count)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.views.ViewTestCases.CreateObjectViewTestCase","title":"<code>CreateObjectViewTestCase</code>","text":"<p>             Bases: <code>ModelViewTestCase</code></p> <p>Create a single new instance.</p> <p>:form_data: Data to be used when creating a new object.</p> Source code in <code>nautobot/core/testing/views.py</code> <pre><code>class CreateObjectViewTestCase(ModelViewTestCase):\n\"\"\"\n    Create a single new instance.\n    :form_data: Data to be used when creating a new object.\n    \"\"\"\nform_data = {}\nslug_source = None\nslugify_function = staticmethod(slugify)\nslug_test_object = \"\"\ndef test_create_object_without_permission(self):\n# Try GET without permission\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(self._get_url(\"add\")), 403)\n# Try POST without permission\nrequest = {\n\"path\": self._get_url(\"add\"),\n\"data\": testing.post_data(self.form_data),\n}\nresponse = self.client.post(**request)\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(response, 403)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_create_object_with_permission(self):\ninitial_count = self._get_queryset().count()\n# Assign unconstrained permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nself.assertHttpStatus(self.client.get(self._get_url(\"add\")), 200)\n# Try POST with model-level permission\nrequest = {\n\"path\": self._get_url(\"add\"),\n\"data\": testing.post_data(self.form_data),\n}\nself.assertHttpStatus(self.client.post(**request), 302)\nself.assertEqual(initial_count + 1, self._get_queryset().count())\n# order_by() is no supported by django TreeNode,\n# So we directly retrieve the instance by \"slug\" or \"name\".\nif isinstance(self._get_queryset().first(), TreeNode):\nfilter_by = self.slug_source if getattr(self, \"slug_source\", None) else \"name\"\ninstance = self._get_queryset().get(**{filter_by: self.form_data.get(filter_by)})\nself.assertInstanceEqual(instance, self.form_data)\nelse:\nif hasattr(self.model, \"last_updated\"):\ninstance = self._get_queryset().order_by(\"last_updated\").last()\nself.assertInstanceEqual(instance, self.form_data)\nelse:\ninstance = self._get_queryset().last()\nself.assertInstanceEqual(instance, self.form_data)\nif hasattr(self.model, \"to_objectchange\"):\n# Verify ObjectChange creation\nobjectchanges = lookup.get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, extras_choices.ObjectChangeActionChoices.ACTION_CREATE)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_create_object_with_constrained_permission(self):\ninitial_count = self._get_queryset().count()\n# Assign constrained permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": str(uuid.uuid4())},  # Match a non-existent pk (i.e., deny all)\nactions=[\"add\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with object-level permission\nself.assertHttpStatus(self.client.get(self._get_url(\"add\")), 200)\n# Try to create an object (not permitted)\nrequest = {\n\"path\": self._get_url(\"add\"),\n\"data\": testing.post_data(self.form_data),\n}\nself.assertHttpStatus(self.client.post(**request), 200)\nself.assertEqual(initial_count, self._get_queryset().count())  # Check that no object was created\n# Update the ObjectPermission to allow creation\nobj_perm.constraints = {\"pk__isnull\": False}\nobj_perm.save()\n# Try to create an object (permitted)\nrequest = {\n\"path\": self._get_url(\"add\"),\n\"data\": testing.post_data(self.form_data),\n}\nself.assertHttpStatus(self.client.post(**request), 302)\nself.assertEqual(initial_count + 1, self._get_queryset().count())\n# order_by() is no supported by django TreeNode,\n# So we directly retrieve the instance by \"slug\".\nif isinstance(self._get_queryset().first(), TreeNode):\nfilter_by = self.slug_source if getattr(self, \"slug_source\", None) else \"name\"\ninstance = self._get_queryset().get(**{filter_by: self.form_data.get(filter_by)})\nself.assertInstanceEqual(instance, self.form_data)\nelse:\nif hasattr(self.model, \"last_updated\"):\nself.assertInstanceEqual(self._get_queryset().order_by(\"last_updated\").last(), self.form_data)\nelse:\nself.assertInstanceEqual(self._get_queryset().last(), self.form_data)\ndef test_slug_autocreation(self):\n\"\"\"Test that slug is autocreated through ORM.\"\"\"\n# This really should go on a models test page, but we don't have test structures for models.\nif getattr(self.model, \"slug_source\", None) is not None:\nobj = self.model.objects.get(**{self.slug_source: self.slug_test_object})\nexpected_slug = self.slugify_function(getattr(obj, self.slug_source))\nself.assertEqual(obj.slug, expected_slug)\ndef test_slug_not_modified(self):\n\"\"\"Ensure save method does not modify slug that is passed in.\"\"\"\n# This really should go on a models test page, but we don't have test structures for models.\nif getattr(self.model, \"slug_source\", None) is not None:\nnew_slug_source_value = \"kwyjibo\"\nobj = self.model.objects.get(**{self.slug_source: self.slug_test_object})\nexpected_slug = self.slugify_function(getattr(obj, self.slug_source))\n# Update slug source field str\nfilter_ = self.slug_source + \"__exact\"\nself.model.objects.filter(**{filter_: self.slug_test_object}).update(\n**{self.slug_source: new_slug_source_value}\n)\nobj.refresh_from_db()\nself.assertEqual(getattr(obj, self.slug_source), new_slug_source_value)\nself.assertEqual(obj.slug, expected_slug)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.views.ViewTestCases.CreateObjectViewTestCase.test_slug_autocreation","title":"<code>test_slug_autocreation()</code>","text":"<p>Test that slug is autocreated through ORM.</p> Source code in <code>nautobot/core/testing/views.py</code> <pre><code>def test_slug_autocreation(self):\n\"\"\"Test that slug is autocreated through ORM.\"\"\"\n# This really should go on a models test page, but we don't have test structures for models.\nif getattr(self.model, \"slug_source\", None) is not None:\nobj = self.model.objects.get(**{self.slug_source: self.slug_test_object})\nexpected_slug = self.slugify_function(getattr(obj, self.slug_source))\nself.assertEqual(obj.slug, expected_slug)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.views.ViewTestCases.CreateObjectViewTestCase.test_slug_not_modified","title":"<code>test_slug_not_modified()</code>","text":"<p>Ensure save method does not modify slug that is passed in.</p> Source code in <code>nautobot/core/testing/views.py</code> <pre><code>def test_slug_not_modified(self):\n\"\"\"Ensure save method does not modify slug that is passed in.\"\"\"\n# This really should go on a models test page, but we don't have test structures for models.\nif getattr(self.model, \"slug_source\", None) is not None:\nnew_slug_source_value = \"kwyjibo\"\nobj = self.model.objects.get(**{self.slug_source: self.slug_test_object})\nexpected_slug = self.slugify_function(getattr(obj, self.slug_source))\n# Update slug source field str\nfilter_ = self.slug_source + \"__exact\"\nself.model.objects.filter(**{filter_: self.slug_test_object}).update(\n**{self.slug_source: new_slug_source_value}\n)\nobj.refresh_from_db()\nself.assertEqual(getattr(obj, self.slug_source), new_slug_source_value)\nself.assertEqual(obj.slug, expected_slug)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.views.ViewTestCases.DeleteObjectViewTestCase","title":"<code>DeleteObjectViewTestCase</code>","text":"<p>             Bases: <code>ModelViewTestCase</code></p> <p>Delete a single instance.</p> Source code in <code>nautobot/core/testing/views.py</code> <pre><code>class DeleteObjectViewTestCase(ModelViewTestCase):\n\"\"\"\n    Delete a single instance.\n    \"\"\"\ndef get_deletable_object(self):\n\"\"\"\n        Get an instance that can be deleted.\n        For some models this may just be any random object, but when we have FKs with `on_delete=models.PROTECT`\n        (as is often the case) we need to find or create an instance that doesn't have such entanglements.\n        \"\"\"\ninstance = testing.get_deletable_objects(self.model, self._get_queryset()).first()\nif instance is None:\nself.fail(\"Couldn't find a single deletable object!\")\nreturn instance\ndef test_delete_object_without_permission(self):\ninstance = self.get_deletable_object()\n# Try GET without permission\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(self._get_url(\"delete\", instance)), [403, 404])\n# Try POST without permission\nrequest = {\n\"path\": self._get_url(\"delete\", instance),\n\"data\": testing.post_data({\"confirm\": True}),\n}\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.post(**request), [403, 404])\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_delete_object_with_permission(self):\ninstance = self.get_deletable_object()\ninstance_note_pk_list = []\nassigned_object_type = ContentType.objects.get_for_model(self.model)\nif hasattr(self.model, \"notes\") and isinstance(instance.notes, extras_querysets.NotesQuerySet):\nnotes = (\nextras_models.Note(\nassigned_object_type=assigned_object_type, assigned_object_id=instance.id, note=\"hello 1\"\n),\nextras_models.Note(\nassigned_object_type=assigned_object_type, assigned_object_id=instance.id, note=\"hello 2\"\n),\nextras_models.Note(\nassigned_object_type=assigned_object_type, assigned_object_id=instance.id, note=\"hello 3\"\n),\n)\nfor note in notes:\nnote.validated_save()\ninstance_note_pk_list.append(note.pk)\n# Assign model-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"delete\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(assigned_object_type)\n# Try GET with model-level permission\nself.assertHttpStatus(self.client.get(self._get_url(\"delete\", instance)), 200)\n# Try POST with model-level permission\nrequest = {\n\"path\": self._get_url(\"delete\", instance),\n\"data\": testing.post_data({\"confirm\": True}),\n}\nself.assertHttpStatus(self.client.post(**request), 302)\nwith self.assertRaises(ObjectDoesNotExist):\nself._get_queryset().get(pk=instance.pk)\nif hasattr(self.model, \"to_objectchange\"):\n# Verify ObjectChange creation\nobjectchanges = lookup.get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, extras_choices.ObjectChangeActionChoices.ACTION_DELETE)\nif hasattr(self.model, \"notes\") and isinstance(instance.notes, extras_querysets.NotesQuerySet):\n# Verify Notes deletion\nwith self.assertRaises(ObjectDoesNotExist):\nextras_models.Note.objects.get(assigned_object_id=instance.pk)\nnote_objectchanges = extras_models.ObjectChange.objects.filter(\nchanged_object_id__in=instance_note_pk_list\n)\nself.assertEqual(note_objectchanges.count(), 3)\nfor object_change in note_objectchanges:\nself.assertEqual(object_change.action, extras_choices.ObjectChangeActionChoices.ACTION_DELETE)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_delete_object_with_permission_and_xwwwformurlencoded(self):\ninstance = self.get_deletable_object()\n# Assign model-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"delete\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nself.assertHttpStatus(self.client.get(self._get_url(\"delete\", instance)), 200)\n# Try POST with model-level permission\nrequest = {\n\"path\": self._get_url(\"delete\", instance),\n\"data\": urlencode({\"confirm\": True}),\n\"content_type\": \"application/x-www-form-urlencoded\",\n}\nself.assertHttpStatus(self.client.post(**request), 302)\nwith self.assertRaises(ObjectDoesNotExist):\nself._get_queryset().get(pk=instance.pk)\nif hasattr(self.model, \"to_objectchange\"):\n# Verify ObjectChange creation\nobjectchanges = lookup.get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, extras_choices.ObjectChangeActionChoices.ACTION_DELETE)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_delete_object_with_constrained_permission(self):\ninstance1 = self.get_deletable_object()\ninstance2 = self._get_queryset().exclude(pk=instance1.pk)[0]\n# Assign object-level permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": instance1.pk},\nactions=[\"delete\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with a permitted object\nself.assertHttpStatus(self.client.get(self._get_url(\"delete\", instance1)), 200)\n# Try GET with a non-permitted object\nself.assertHttpStatus(self.client.get(self._get_url(\"delete\", instance2)), 404)\n# Try to delete a permitted object\nrequest = {\n\"path\": self._get_url(\"delete\", instance1),\n\"data\": testing.post_data({\"confirm\": True}),\n}\nself.assertHttpStatus(self.client.post(**request), 302)\nwith self.assertRaises(ObjectDoesNotExist):\nself._get_queryset().get(pk=instance1.pk)\n# Try to delete a non-permitted object\n# Note that in the case of tree models, deleting instance1 above may have cascade-deleted to instance2,\n# so to be safe, we need to get another object instance that definitely exists:\ninstance3 = self._get_queryset().first()\nrequest = {\n\"path\": self._get_url(\"delete\", instance3),\n\"data\": testing.post_data({\"confirm\": True}),\n}\nself.assertHttpStatus(self.client.post(**request), 404)\nself.assertTrue(self._get_queryset().filter(pk=instance3.pk).exists())\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.views.ViewTestCases.DeleteObjectViewTestCase.get_deletable_object","title":"<code>get_deletable_object()</code>","text":"<p>Get an instance that can be deleted.</p> <p>For some models this may just be any random object, but when we have FKs with <code>on_delete=models.PROTECT</code> (as is often the case) we need to find or create an instance that doesn't have such entanglements.</p> Source code in <code>nautobot/core/testing/views.py</code> <pre><code>def get_deletable_object(self):\n\"\"\"\n    Get an instance that can be deleted.\n    For some models this may just be any random object, but when we have FKs with `on_delete=models.PROTECT`\n    (as is often the case) we need to find or create an instance that doesn't have such entanglements.\n    \"\"\"\ninstance = testing.get_deletable_objects(self.model, self._get_queryset()).first()\nif instance is None:\nself.fail(\"Couldn't find a single deletable object!\")\nreturn instance\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.views.ViewTestCases.DeviceComponentTemplateViewTestCase","title":"<code>DeviceComponentTemplateViewTestCase</code>","text":"<p>             Bases: <code>EditObjectViewTestCase</code>, <code>DeleteObjectViewTestCase</code>, <code>CreateMultipleObjectsViewTestCase</code>, <code>BulkEditObjectsViewTestCase</code>, <code>BulkRenameObjectsViewTestCase</code>, <code>BulkDeleteObjectsViewTestCase</code></p> <p>TestCase suitable for testing device component template models (ConsolePortTemplates, InterfaceTemplates, etc.)</p> Source code in <code>nautobot/core/testing/views.py</code> <pre><code>class DeviceComponentTemplateViewTestCase(\nEditObjectViewTestCase,\nDeleteObjectViewTestCase,\nCreateMultipleObjectsViewTestCase,\nBulkEditObjectsViewTestCase,\nBulkRenameObjectsViewTestCase,\nBulkDeleteObjectsViewTestCase,\n):\n\"\"\"\n    TestCase suitable for testing device component template models (ConsolePortTemplates, InterfaceTemplates, etc.)\n    \"\"\"\nmaxDiff = None\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.views.ViewTestCases.DeviceComponentViewTestCase","title":"<code>DeviceComponentViewTestCase</code>","text":"<p>             Bases: <code>GetObjectViewTestCase</code>, <code>GetObjectChangelogViewTestCase</code>, <code>GetObjectNotesViewTestCase</code>, <code>EditObjectViewTestCase</code>, <code>DeleteObjectViewTestCase</code>, <code>ListObjectsViewTestCase</code>, <code>CreateMultipleObjectsViewTestCase</code>, <code>BulkImportObjectsViewTestCase</code>, <code>BulkEditObjectsViewTestCase</code>, <code>BulkRenameObjectsViewTestCase</code>, <code>BulkDeleteObjectsViewTestCase</code></p> <p>TestCase suitable for testing device component models (ConsolePorts, Interfaces, etc.)</p> Source code in <code>nautobot/core/testing/views.py</code> <pre><code>class DeviceComponentViewTestCase(\nGetObjectViewTestCase,\nGetObjectChangelogViewTestCase,\nGetObjectNotesViewTestCase,\nEditObjectViewTestCase,\nDeleteObjectViewTestCase,\nListObjectsViewTestCase,\nCreateMultipleObjectsViewTestCase,\nBulkImportObjectsViewTestCase,\nBulkEditObjectsViewTestCase,\nBulkRenameObjectsViewTestCase,\nBulkDeleteObjectsViewTestCase,\n):\n\"\"\"\n    TestCase suitable for testing device component models (ConsolePorts, Interfaces, etc.)\n    \"\"\"\nmaxDiff = None\nbulk_add_data = None\n\"\"\"Used for bulk-add (distinct from bulk-create) view testing; self.bulk_create_data will be used if unset.\"\"\"\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_add_component(self):\n\"\"\"Test bulk-adding this component to devices/virtual-machines.\"\"\"\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\ninitial_count = self._get_queryset().count()\ndata = (self.bulk_add_data or self.bulk_create_data).copy()\n# Load the device-bulk-add or virtualmachine-bulk-add form\nif \"device\" in data:\nurl = reverse(f\"dcim:device_bulk_add_{self.model._meta.model_name}\")\nrequest = {\n\"path\": url,\n\"data\": testing.post_data({\"pk\": data[\"device\"]}),\n}\nelse:\nurl = reverse(f\"virtualization:virtualmachine_bulk_add_{self.model._meta.model_name}\")\nrequest = {\n\"path\": url,\n\"data\": testing.post_data({\"pk\": data[\"virtual_machine\"]}),\n}\nself.assertHttpStatus(self.client.post(**request), 200)\n# Post to the device-bulk-add or virtualmachine-bulk-add form to create records\nif \"device\" in data:\ndata[\"pk\"] = data.pop(\"device\")\nelse:\ndata[\"pk\"] = data.pop(\"virtual_machine\")\ndata[\"_create\"] = \"\"\nrequest[\"data\"] = testing.post_data(data)\nself.assertHttpStatus(self.client.post(**request), 302)\nupdated_count = self._get_queryset().count()\nself.assertEqual(updated_count, initial_count + self.bulk_create_count)\nmatching_count = 0\nfor instance in self._get_queryset().all():\ntry:\nself.assertInstanceEqual(instance, (self.bulk_add_data or self.bulk_create_data))\nmatching_count += 1\nexcept AssertionError:\npass\nself.assertEqual(matching_count, self.bulk_create_count)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_rename(self):\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\nobjects = self.selected_objects\npk_list = [obj.pk for obj in objects]\n# Apply button not yet clicked\ndata = {\"pk\": pk_list}\ndata.update(self.rename_data)\nverbose_name_plural = self.model._meta.verbose_name_plural\nwith self.subTest(\"Assert device name in HTML\"):\nresponse = self.client.post(self._get_url(\"bulk_rename\"), data)\nmessage = (\nf\"Renaming {len(objects)} {helpers.bettertitle(verbose_name_plural)} \"\nf\"on {self.selected_objects_parent_name}\"\n)\nself.assertInHTML(message, response.content.decode(response.charset))\nwith self.subTest(\"Assert update successfully\"):\ndata[\"_apply\"] = True  # Form Apply button\nresponse = self.client.post(self._get_url(\"bulk_rename\"), data)\nself.assertHttpStatus(response, 302)\nqueryset = self._get_queryset().filter(pk__in=pk_list)\nfor instance in objects:\nself.assertEqual(queryset.get(pk=instance.pk).name, f\"{instance.name}X\")\nwith self.subTest(\"Assert if no valid objects selected return with error\"):\nfor values in ([], [str(uuid.uuid4())]):\ndata[\"pk\"] = values\nresponse = self.client.post(self._get_url(\"bulk_rename\"), data, follow=True)\nexpected_message = f\"No valid {verbose_name_plural} were selected.\"\nself.assertIn(expected_message, response.content.decode(response.charset))\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.views.ViewTestCases.DeviceComponentViewTestCase.bulk_add_data","title":"<code>bulk_add_data = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Used for bulk-add (distinct from bulk-create) view testing; self.bulk_create_data will be used if unset.</p>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.views.ViewTestCases.DeviceComponentViewTestCase.test_bulk_add_component","title":"<code>test_bulk_add_component()</code>","text":"<p>Test bulk-adding this component to devices/virtual-machines.</p> Source code in <code>nautobot/core/testing/views.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_bulk_add_component(self):\n\"\"\"Test bulk-adding this component to devices/virtual-machines.\"\"\"\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"add\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\ninitial_count = self._get_queryset().count()\ndata = (self.bulk_add_data or self.bulk_create_data).copy()\n# Load the device-bulk-add or virtualmachine-bulk-add form\nif \"device\" in data:\nurl = reverse(f\"dcim:device_bulk_add_{self.model._meta.model_name}\")\nrequest = {\n\"path\": url,\n\"data\": testing.post_data({\"pk\": data[\"device\"]}),\n}\nelse:\nurl = reverse(f\"virtualization:virtualmachine_bulk_add_{self.model._meta.model_name}\")\nrequest = {\n\"path\": url,\n\"data\": testing.post_data({\"pk\": data[\"virtual_machine\"]}),\n}\nself.assertHttpStatus(self.client.post(**request), 200)\n# Post to the device-bulk-add or virtualmachine-bulk-add form to create records\nif \"device\" in data:\ndata[\"pk\"] = data.pop(\"device\")\nelse:\ndata[\"pk\"] = data.pop(\"virtual_machine\")\ndata[\"_create\"] = \"\"\nrequest[\"data\"] = testing.post_data(data)\nself.assertHttpStatus(self.client.post(**request), 302)\nupdated_count = self._get_queryset().count()\nself.assertEqual(updated_count, initial_count + self.bulk_create_count)\nmatching_count = 0\nfor instance in self._get_queryset().all():\ntry:\nself.assertInstanceEqual(instance, (self.bulk_add_data or self.bulk_create_data))\nmatching_count += 1\nexcept AssertionError:\npass\nself.assertEqual(matching_count, self.bulk_create_count)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.views.ViewTestCases.EditObjectViewTestCase","title":"<code>EditObjectViewTestCase</code>","text":"<p>             Bases: <code>ModelViewTestCase</code></p> <p>Edit a single existing instance.</p> <p>:form_data: Data to be used when updating the first existing object.</p> Source code in <code>nautobot/core/testing/views.py</code> <pre><code>class EditObjectViewTestCase(ModelViewTestCase):\n\"\"\"\n    Edit a single existing instance.\n    :form_data: Data to be used when updating the first existing object.\n    \"\"\"\nform_data = {}\ndef test_edit_object_without_permission(self):\ninstance = self._get_queryset().first()\n# Try GET without permission\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.get(self._get_url(\"edit\", instance)), [403, 404])\n# Try POST without permission\nrequest = {\n\"path\": self._get_url(\"edit\", instance),\n\"data\": testing.post_data(self.form_data),\n}\nwith testing.disable_warnings(\"django.request\"):\nself.assertHttpStatus(self.client.post(**request), [403, 404])\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_edit_object_with_permission(self):\ninstance = self._get_queryset().first()\n# Assign model-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"change\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nself.assertHttpStatus(self.client.get(self._get_url(\"edit\", instance)), 200)\n# Try POST with model-level permission\nrequest = {\n\"path\": self._get_url(\"edit\", instance),\n\"data\": testing.post_data(self.form_data),\n}\nself.assertHttpStatus(self.client.post(**request), 302)\nself.assertInstanceEqual(self._get_queryset().get(pk=instance.pk), self.form_data)\nif hasattr(self.model, \"to_objectchange\"):\n# Verify ObjectChange creation\nobjectchanges = lookup.get_changes_for_model(instance)\nself.assertEqual(len(objectchanges), 1)\nself.assertEqual(objectchanges[0].action, extras_choices.ObjectChangeActionChoices.ACTION_UPDATE)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_edit_object_with_constrained_permission(self):\ninstance1, instance2 = self._get_queryset().all()[:2]\n# Assign constrained permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": instance1.pk},\nactions=[\"change\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with a permitted object\nself.assertHttpStatus(self.client.get(self._get_url(\"edit\", instance1)), 200)\n# Try GET with a non-permitted object\nself.assertHttpStatus(self.client.get(self._get_url(\"edit\", instance2)), 404)\n# Try to edit a permitted object\nrequest = {\n\"path\": self._get_url(\"edit\", instance1),\n\"data\": testing.post_data(self.form_data),\n}\nself.assertHttpStatus(self.client.post(**request), 302)\nself.assertInstanceEqual(self._get_queryset().get(pk=instance1.pk), self.form_data)\n# Try to edit a non-permitted object\nrequest = {\n\"path\": self._get_url(\"edit\", instance2),\n\"data\": testing.post_data(self.form_data),\n}\nself.assertHttpStatus(self.client.post(**request), 404)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.views.ViewTestCases.GetObjectChangelogViewTestCase","title":"<code>GetObjectChangelogViewTestCase</code>","text":"<p>             Bases: <code>ModelViewTestCase</code></p> <p>View the changelog for an instance.</p> Source code in <code>nautobot/core/testing/views.py</code> <pre><code>class GetObjectChangelogViewTestCase(ModelViewTestCase):\n\"\"\"\n    View the changelog for an instance.\n    \"\"\"\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_get_object_changelog(self):\nurl = self._get_url(\"changelog\", self._get_queryset().first())\nresponse = self.client.get(url)\nself.assertHttpStatus(response, 200)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.views.ViewTestCases.GetObjectNotesViewTestCase","title":"<code>GetObjectNotesViewTestCase</code>","text":"<p>             Bases: <code>ModelViewTestCase</code></p> <p>View the notes for an instance.</p> Source code in <code>nautobot/core/testing/views.py</code> <pre><code>class GetObjectNotesViewTestCase(ModelViewTestCase):\n\"\"\"\n    View the notes for an instance.\n    \"\"\"\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_get_object_notes(self):\nif hasattr(self.model, \"notes\"):\nurl = self._get_url(\"notes\", self._get_queryset().first())\nresponse = self.client.get(url)\nself.assertHttpStatus(response, 200)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.views.ViewTestCases.GetObjectViewTestCase","title":"<code>GetObjectViewTestCase</code>","text":"<p>             Bases: <code>ModelViewTestCase</code></p> <p>Retrieve a single instance.</p> Source code in <code>nautobot/core/testing/views.py</code> <pre><code>class GetObjectViewTestCase(ModelViewTestCase):\n\"\"\"\n    Retrieve a single instance.\n    \"\"\"\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_get_object_anonymous(self):\n# Make the request as an unauthenticated user\nself.client.logout()\nresponse = self.client.get(self._get_queryset().first().get_absolute_url())\nself.assertHttpStatus(response, 200)\nresponse_body = response.content.decode(response.charset)\nself.assertIn(\n\"/login/?next=\" + self._get_queryset().first().get_absolute_url(), response_body, msg=response_body\n)\n# The \"Change Log\" tab should appear in the response since we have all exempt permissions\nif issubclass(self.model, extras_models.ChangeLoggedModel):\nresponse_body = testing.extract_page_body(response.content.decode(response.charset))\nself.assertIn(\"Change Log\", response_body, msg=response_body)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_get_object_without_permission(self):\ninstance = self._get_queryset().first()\n# Try GET without permission\nwith testing.disable_warnings(\"django.request\"):\nresponse = self.client.get(instance.get_absolute_url())\nself.assertHttpStatus(response, [403, 404])\nresponse_body = response.content.decode(response.charset)\nself.assertNotIn(\"/login/\", response_body, msg=response_body)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_get_object_with_permission(self):\ninstance = self._get_queryset().first()\n# Add model-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"view\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nresponse = self.client.get(instance.get_absolute_url())\nself.assertHttpStatus(response, 200)\nresponse_body = testing.extract_page_body(response.content.decode(response.charset))\n# The object's display name or string representation should appear in the response\nself.assertIn(escape(getattr(instance, \"display\", str(instance))), response_body, msg=response_body)\n# If any Relationships are defined, they should appear in the response\nif self.relationships is not None:\nfor relationship in self.relationships:  # false positive pylint: disable=not-an-iterable\ncontent_type = ContentType.objects.get_for_model(instance)\nif content_type == relationship.source_type:\nself.assertIn(\nescape(relationship.get_label(extras_choices.RelationshipSideChoices.SIDE_SOURCE)),\nresponse_body,\nmsg=response_body,\n)\nif content_type == relationship.destination_type:\nself.assertIn(\nescape(relationship.get_label(extras_choices.RelationshipSideChoices.SIDE_DESTINATION)),\nresponse_body,\nmsg=response_body,\n)\n# If any Custom Fields are defined, they should appear in the response\nif self.custom_fields is not None:\nfor custom_field in self.custom_fields:  # false positive pylint: disable=not-an-iterable\nself.assertIn(escape(str(custom_field)), response_body, msg=response_body)\nif custom_field.type == extras_choices.CustomFieldTypeChoices.TYPE_MULTISELECT:\nfor value in instance.cf.get(custom_field.key):\nself.assertIn(escape(str(value)), response_body, msg=response_body)\nelse:\nself.assertIn(\nescape(str(instance.cf.get(custom_field.key) or \"\")), response_body, msg=response_body\n)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_get_object_with_constrained_permission(self):\ninstance1, instance2 = self._get_queryset().all()[:2]\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": instance1.pk},\n# To get a different rendering flow than the `test_get_object_with_permission` test above,\n# enable additional permissions for this object so that add/edit/delete buttons are rendered.\nactions=[\"view\", \"add\", \"change\", \"delete\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET to permitted object\nself.assertHttpStatus(self.client.get(instance1.get_absolute_url()), 200)\n# Try GET to non-permitted object\nself.assertHttpStatus(self.client.get(instance2.get_absolute_url()), 404)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_has_advanced_tab(self):\ninstance = self._get_queryset().first()\n# Add model-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"view\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\nresponse = self.client.get(instance.get_absolute_url())\nresponse_body = testing.extract_page_body(response.content.decode(response.charset))\nadvanced_tab_href = f\"{instance.get_absolute_url()}#advanced\"\nself.assertIn(advanced_tab_href, response_body)\nself.assertIn(\"Advanced\", response_body)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.views.ViewTestCases.ListObjectsViewTestCase","title":"<code>ListObjectsViewTestCase</code>","text":"<p>             Bases: <code>ModelViewTestCase</code></p> <p>Retrieve multiple instances.</p> Source code in <code>nautobot/core/testing/views.py</code> <pre><code>class ListObjectsViewTestCase(ModelViewTestCase):\n\"\"\"\n    Retrieve multiple instances.\n    \"\"\"\nfilterset = None\ndef get_filterset(self):\nreturn self.filterset or lookup.get_filterset_for_model(self.model)\n# Helper methods to be overriden by special cases.\n# See ConsoleConnectionsTestCase, InterfaceConnectionsTestCase and PowerConnectionsTestCase\ndef get_list_url(self):\nreturn reverse(helpers.validated_viewname(self.model, \"list\"))\ndef get_title(self):\nreturn helpers.bettertitle(self.model._meta.verbose_name_plural)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_list_objects_anonymous(self):\n# Make the request as an unauthenticated user\nself.client.logout()\nresponse = self.client.get(self._get_url(\"list\"))\nself.assertHttpStatus(response, 200)\nresponse_body = response.content.decode(response.charset)\nself.assertIn(\"/login/?next=\" + self._get_url(\"list\"), response_body, msg=response_body)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\ndef test_list_objects_filtered(self):\ninstance1, instance2 = self._get_queryset().all()[:2]\nresponse = self.client.get(f\"{self._get_url('list')}?id={instance1.pk}\")\nself.assertHttpStatus(response, 200)\ncontent = testing.extract_page_body(response.content.decode(response.charset))\n# TODO: it'd make test failures more readable if we strip the page headers/footers from the content\nif hasattr(self.model, \"name\"):\nself.assertRegex(content, r\"&gt;\\s*\" + re.escape(escape(instance1.name)) + r\"\\s*&lt;\", msg=content)\nself.assertNotRegex(content, r\"&gt;\\s*\" + re.escape(escape(instance2.name)) + r\"\\s*&lt;\", msg=content)\nif instance1.get_absolute_url() in content:\nself.assertNotIn(instance2.get_absolute_url(), content, msg=content)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"], STRICT_FILTERING=True)\ndef test_list_objects_unknown_filter_strict_filtering(self):\n\"\"\"Verify that with STRICT_FILTERING, an unknown filter results in an error message and no matches.\"\"\"\nresponse = self.client.get(f\"{self._get_url('list')}?ice_cream_flavor=chocolate\")\nself.assertHttpStatus(response, 200)\ncontent = testing.extract_page_body(response.content.decode(response.charset))\n# TODO: it'd make test failures more readable if we strip the page headers/footers from the content\nself.assertIn(\"Unknown filter field\", content, msg=content)\n# There should be no table rows displayed except for the empty results row\nself.assertIn(f\"No {self.model._meta.verbose_name_plural} found\", content, msg=content)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"], STRICT_FILTERING=False)\ndef test_list_objects_unknown_filter_no_strict_filtering(self):\n\"\"\"Verify that without STRICT_FILTERING, an unknown filter is ignored.\"\"\"\ninstance1, instance2 = self._get_queryset().all()[:2]\nwith self.assertLogs(\"nautobot.core.filters\") as cm:\nresponse = self.client.get(f\"{self._get_url('list')}?ice_cream_flavor=chocolate\")\nfilterset = self.get_filterset()\nif not filterset:\nself.fail(\nf\"Couldn't find filterset for model {self.model}. The FilterSet class is expected to be in the \"\n\"filters module within the application associated with the model and its name is expected to be \"\nf\"{self.model.__name__}FilterSet.\"\n)\nself.assertEqual(\ncm.output,\n[\nf'WARNING:nautobot.core.filters:{filterset.__name__}: Unknown filter field \"ice_cream_flavor\"',\n],\n)\nself.assertHttpStatus(response, 200)\ncontent = testing.extract_page_body(response.content.decode(response.charset))\n# TODO: it'd make test failures more readable if we strip the page headers/footers from the content\nself.assertNotIn(\"Unknown filter field\", content, msg=content)\nself.assertNotIn(f\"No {self.model._meta.verbose_name_plural} found\", content, msg=content)\nif hasattr(self.model, \"name\"):\nself.assertRegex(content, r\"&gt;\\s*\" + re.escape(instance1.name) + r\"\\s*&lt;\", msg=content)\nself.assertRegex(content, r\"&gt;\\s*\" + re.escape(instance2.name) + r\"\\s*&lt;\", msg=content)\nif instance1.get_absolute_url() in content:\nself.assertIn(instance2.get_absolute_url(), content, msg=content)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_without_permission(self):\n# Try GET without permission\nwith testing.disable_warnings(\"django.request\"):\nresponse = self.client.get(self._get_url(\"list\"))\nself.assertHttpStatus(response, 403)\nresponse_body = response.content.decode(response.charset)\nself.assertNotIn(\"/login/\", response_body, msg=response_body)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_with_permission(self):\n# Add model-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"view\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nresponse = self.client.get(self._get_url(\"list\"))\nself.assertHttpStatus(response, 200)\nresponse_body = response.content.decode(response.charset)\nlist_url = self.get_list_url()\ntitle = self.get_title()\n# Check if breadcrumb is rendered correctly\nself.assertIn(\nf'&lt;a href=\"{list_url}\"&gt;{title}&lt;/a&gt;',\nresponse_body,\n)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_objects_with_constrained_permission(self):\ninstance1, instance2 = self._get_queryset().all()[:2]\n# Add object-level permission\nobj_perm = users_models.ObjectPermission(\nname=\"Test permission\",\nconstraints={\"pk\": instance1.pk},\nactions=[\"view\"],\n)\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with object-level permission\nresponse = self.client.get(self._get_url(\"list\"))\nself.assertHttpStatus(response, 200)\ncontent = testing.extract_page_body(response.content.decode(response.charset))\n# TODO: it'd make test failures more readable if we strip the page headers/footers from the content\nif hasattr(self.model, \"name\"):\nself.assertRegex(content, r\"&gt;\\s*\" + re.escape(instance1.name) + r\"\\s*&lt;\", msg=content)\nself.assertNotRegex(content, r\"&gt;\\s*\" + re.escape(instance2.name) + r\"\\s*&lt;\", msg=content)\nelif hasattr(self.model, \"get_absolute_url\"):\nself.assertIn(instance1.get_absolute_url(), content, msg=content)\nself.assertNotIn(instance2.get_absolute_url(), content, msg=content)\n@skipIf(\n\"example_plugin\" not in settings.PLUGINS,\n\"example_plugin not in settings.PLUGINS\",\n)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_view_plugin_banner(self):\n\"\"\"\n        If example plugin is installed, check if the plugin banner is rendered correctly in ObjectListView.\n        \"\"\"\n# Add model-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"view\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nresponse = self.client.get(self._get_url(\"list\"))\nself.assertHttpStatus(response, 200)\nresponse_body = response.content.decode(response.charset)\n# Check plugin banner is rendered correctly\nself.assertIn(\nf\"&lt;div&gt;You are viewing a table of {self.model._meta.verbose_name_plural}&lt;/div&gt;\", response_body\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.views.ViewTestCases.ListObjectsViewTestCase.test_list_objects_unknown_filter_no_strict_filtering","title":"<code>test_list_objects_unknown_filter_no_strict_filtering()</code>","text":"<p>Verify that without STRICT_FILTERING, an unknown filter is ignored.</p> Source code in <code>nautobot/core/testing/views.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"], STRICT_FILTERING=False)\ndef test_list_objects_unknown_filter_no_strict_filtering(self):\n\"\"\"Verify that without STRICT_FILTERING, an unknown filter is ignored.\"\"\"\ninstance1, instance2 = self._get_queryset().all()[:2]\nwith self.assertLogs(\"nautobot.core.filters\") as cm:\nresponse = self.client.get(f\"{self._get_url('list')}?ice_cream_flavor=chocolate\")\nfilterset = self.get_filterset()\nif not filterset:\nself.fail(\nf\"Couldn't find filterset for model {self.model}. The FilterSet class is expected to be in the \"\n\"filters module within the application associated with the model and its name is expected to be \"\nf\"{self.model.__name__}FilterSet.\"\n)\nself.assertEqual(\ncm.output,\n[\nf'WARNING:nautobot.core.filters:{filterset.__name__}: Unknown filter field \"ice_cream_flavor\"',\n],\n)\nself.assertHttpStatus(response, 200)\ncontent = testing.extract_page_body(response.content.decode(response.charset))\n# TODO: it'd make test failures more readable if we strip the page headers/footers from the content\nself.assertNotIn(\"Unknown filter field\", content, msg=content)\nself.assertNotIn(f\"No {self.model._meta.verbose_name_plural} found\", content, msg=content)\nif hasattr(self.model, \"name\"):\nself.assertRegex(content, r\"&gt;\\s*\" + re.escape(instance1.name) + r\"\\s*&lt;\", msg=content)\nself.assertRegex(content, r\"&gt;\\s*\" + re.escape(instance2.name) + r\"\\s*&lt;\", msg=content)\nif instance1.get_absolute_url() in content:\nself.assertIn(instance2.get_absolute_url(), content, msg=content)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.views.ViewTestCases.ListObjectsViewTestCase.test_list_objects_unknown_filter_strict_filtering","title":"<code>test_list_objects_unknown_filter_strict_filtering()</code>","text":"<p>Verify that with STRICT_FILTERING, an unknown filter results in an error message and no matches.</p> Source code in <code>nautobot/core/testing/views.py</code> <pre><code>@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"], STRICT_FILTERING=True)\ndef test_list_objects_unknown_filter_strict_filtering(self):\n\"\"\"Verify that with STRICT_FILTERING, an unknown filter results in an error message and no matches.\"\"\"\nresponse = self.client.get(f\"{self._get_url('list')}?ice_cream_flavor=chocolate\")\nself.assertHttpStatus(response, 200)\ncontent = testing.extract_page_body(response.content.decode(response.charset))\n# TODO: it'd make test failures more readable if we strip the page headers/footers from the content\nself.assertIn(\"Unknown filter field\", content, msg=content)\n# There should be no table rows displayed except for the empty results row\nself.assertIn(f\"No {self.model._meta.verbose_name_plural} found\", content, msg=content)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.views.ViewTestCases.ListObjectsViewTestCase.test_list_view_plugin_banner","title":"<code>test_list_view_plugin_banner()</code>","text":"<p>If example plugin is installed, check if the plugin banner is rendered correctly in ObjectListView.</p> Source code in <code>nautobot/core/testing/views.py</code> <pre><code>@skipIf(\n\"example_plugin\" not in settings.PLUGINS,\n\"example_plugin not in settings.PLUGINS\",\n)\n@override_settings(EXEMPT_VIEW_PERMISSIONS=[])\ndef test_list_view_plugin_banner(self):\n\"\"\"\n    If example plugin is installed, check if the plugin banner is rendered correctly in ObjectListView.\n    \"\"\"\n# Add model-level permission\nobj_perm = users_models.ObjectPermission(name=\"Test permission\", actions=[\"view\"])\nobj_perm.save()\nobj_perm.users.add(self.user)\nobj_perm.object_types.add(ContentType.objects.get_for_model(self.model))\n# Try GET with model-level permission\nresponse = self.client.get(self._get_url(\"list\"))\nself.assertHttpStatus(response, 200)\nresponse_body = response.content.decode(response.charset)\n# Check plugin banner is rendered correctly\nself.assertIn(\nf\"&lt;div&gt;You are viewing a table of {self.model._meta.verbose_name_plural}&lt;/div&gt;\", response_body\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.views.ViewTestCases.OrganizationalObjectViewTestCase","title":"<code>OrganizationalObjectViewTestCase</code>","text":"<p>             Bases: <code>GetObjectViewTestCase</code>, <code>GetObjectChangelogViewTestCase</code>, <code>GetObjectNotesViewTestCase</code>, <code>CreateObjectViewTestCase</code>, <code>EditObjectViewTestCase</code>, <code>DeleteObjectViewTestCase</code>, <code>ListObjectsViewTestCase</code>, <code>BulkImportObjectsViewTestCase</code>, <code>BulkDeleteObjectsViewTestCase</code></p> <p>TestCase suitable for all organizational objects</p> Source code in <code>nautobot/core/testing/views.py</code> <pre><code>class OrganizationalObjectViewTestCase(\nGetObjectViewTestCase,\nGetObjectChangelogViewTestCase,\nGetObjectNotesViewTestCase,\nCreateObjectViewTestCase,\nEditObjectViewTestCase,\nDeleteObjectViewTestCase,\nListObjectsViewTestCase,\nBulkImportObjectsViewTestCase,\nBulkDeleteObjectsViewTestCase,\n):\n\"\"\"\n    TestCase suitable for all organizational objects\n    \"\"\"\nmaxDiff = None\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.core.testing.views.ViewTestCases.PrimaryObjectViewTestCase","title":"<code>PrimaryObjectViewTestCase</code>","text":"<p>             Bases: <code>GetObjectViewTestCase</code>, <code>GetObjectChangelogViewTestCase</code>, <code>GetObjectNotesViewTestCase</code>, <code>CreateObjectViewTestCase</code>, <code>EditObjectViewTestCase</code>, <code>DeleteObjectViewTestCase</code>, <code>ListObjectsViewTestCase</code>, <code>BulkImportObjectsViewTestCase</code>, <code>BulkEditObjectsViewTestCase</code>, <code>BulkDeleteObjectsViewTestCase</code></p> <p>TestCase suitable for testing all standard View functions for primary objects</p> Source code in <code>nautobot/core/testing/views.py</code> <pre><code>class PrimaryObjectViewTestCase(\nGetObjectViewTestCase,\nGetObjectChangelogViewTestCase,\nGetObjectNotesViewTestCase,\nCreateObjectViewTestCase,\nEditObjectViewTestCase,\nDeleteObjectViewTestCase,\nListObjectsViewTestCase,\nBulkImportObjectsViewTestCase,\nBulkEditObjectsViewTestCase,\nBulkDeleteObjectsViewTestCase,\n):\n\"\"\"\n    TestCase suitable for testing all standard View functions for primary objects\n    \"\"\"\nmaxDiff = None\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing.create_job_result_and_run_job","title":"<code>nautobot.apps.testing.create_job_result_and_run_job(module, name, source='local', *args, **kwargs)</code>","text":"<p>Test helper function to call get_job_class_and_model() then call run_job_for_testing().</p> Source code in <code>nautobot/core/testing/__init__.py</code> <pre><code>def create_job_result_and_run_job(module, name, source=\"local\", *args, **kwargs):\n\"\"\"Test helper function to call get_job_class_and_model() then call run_job_for_testing().\"\"\"\n_job_class, job_model = get_job_class_and_model(module, name, source)\njob_result = run_job_for_testing(job=job_model, **kwargs)\njob_result.refresh_from_db()\nreturn job_result\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing.create_test_user","title":"<code>nautobot.apps.testing.create_test_user(username='testuser', permissions=None)</code>","text":"<p>Create a User with the given permissions.</p> Source code in <code>nautobot/core/testing/utils.py</code> <pre><code>def create_test_user(username=\"testuser\", permissions=None):\n\"\"\"\n    Create a User with the given permissions.\n    \"\"\"\nuser = User.objects.create_user(username=username)\nif permissions is None:\npermissions = ()\nfor perm_name in permissions:\napp, codename = perm_name.split(\".\")\nperm = Permission.objects.get(content_type__app_label=app, codename=codename)\nuser.user_permissions.add(perm)\nreturn user\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing.disable_warnings","title":"<code>nautobot.apps.testing.disable_warnings(logger_name)</code>","text":"<p>Temporarily suppress expected warning messages to keep the test output clean.</p> Source code in <code>nautobot/core/testing/utils.py</code> <pre><code>@contextmanager\ndef disable_warnings(logger_name):\n\"\"\"\n    Temporarily suppress expected warning messages to keep the test output clean.\n    \"\"\"\nlogger = logging.getLogger(logger_name)\ncurrent_level = logger.level\nlogger.setLevel(logging.ERROR)\nyield\nlogger.setLevel(current_level)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing.extract_form_failures","title":"<code>nautobot.apps.testing.extract_form_failures(content)</code>","text":"<p>Given decoded HTML content from an HTTP response, return a list of form errors.</p> Source code in <code>nautobot/core/testing/utils.py</code> <pre><code>def extract_form_failures(content):\n\"\"\"\n    Given decoded HTML content from an HTTP response, return a list of form errors.\n    \"\"\"\nFORM_ERROR_REGEX = r\"&lt;!-- FORM-ERROR (.*) --&gt;\"\nreturn re.findall(FORM_ERROR_REGEX, content)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing.extract_page_body","title":"<code>nautobot.apps.testing.extract_page_body(content)</code>","text":"<p>Given raw HTML content from an HTTP response, extract the main div only.</p> <p> ... ...        ...      ...     ...    <p></p> Source code in <code>nautobot/core/testing/utils.py</code> <pre><code>def extract_page_body(content):\n\"\"\"\n    Given raw HTML content from an HTTP response, extract the main div only.\n    &lt;html&gt;\n      &lt;head&gt;...&lt;/head&gt;\n      &lt;body&gt;\n        &lt;nav&gt;...&lt;/nav&gt;\n        &lt;div class=\"container-fluid wrapper\"&gt; &lt;!-- BEGIN --&gt;\n          ...\n        &lt;/div&gt; &lt;!-- END --&gt;\n        &lt;footer class=\"footer\"&gt;...&lt;/footer&gt;\n        ...\n      &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\ntry:\nreturn re.findall(r\"(?&lt;=&lt;/nav&gt;).*(?=&lt;footer)\", content, flags=(re.MULTILINE | re.DOTALL))[0]\nexcept IndexError:\nreturn content\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing.generate_random_device_asset_tag_of_specified_size","title":"<code>nautobot.apps.testing.generate_random_device_asset_tag_of_specified_size(size)</code>","text":"<p>This function is for testing purposes only and it will return a random string of size 100 consists of letters and numbers.</p> Source code in <code>nautobot/core/testing/utils.py</code> <pre><code>def generate_random_device_asset_tag_of_specified_size(size):\n\"\"\"\n    This function is for testing purposes only and it will return a random string of size 100 consists of letters and numbers.\n    \"\"\"\nasset_tag = \"\".join(random.choices(string.ascii_letters + string.digits, k=size))\nreturn asset_tag\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing.get_deletable_objects","title":"<code>nautobot.apps.testing.get_deletable_objects(model, queryset)</code>","text":"<p>Returns a queryset of objects in the supplied queryset that have no protected relationships that would prevent deletion.</p> Source code in <code>nautobot/core/testing/utils.py</code> <pre><code>def get_deletable_objects(model, queryset):\n\"\"\"\n    Returns a queryset of objects in the supplied queryset that have no protected relationships that would prevent deletion.\n    \"\"\"\nq = Q()\nfor field in model._meta.get_fields(include_parents=True):\nif getattr(field, \"on_delete\", None) is PROTECT:\nq &amp;= Q(**{f\"{field.name}__isnull\": True})\n# Only delete leaf nodes of trees to reduce complexity\nif isinstance(field, (TreeNodeForeignKey)):\nq &amp;= Q(**{f\"{field.related_query_name()}__isnull\": True})\nreturn queryset.filter(q)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing.get_job_class_and_model","title":"<code>nautobot.apps.testing.get_job_class_and_model(module, name, source='local')</code>","text":"<p>Test helper function to look up a job class and job model and ensure the latter is enabled.</p> <p>Parameters:</p> Name Type Description Default <code>module</code> <code>str</code> <p>Job module name</p> required <code>name</code> <code>str</code> <p>Job class name</p> required <code>source</code> <code>str</code> <p>Job grouping (default: \"local\")</p> <code>'local'</code> <p>Returns:</p> Type Description <code>JobClassInfo</code> <p>Named 2-tuple of (job_class, job_model)</p> Source code in <code>nautobot/core/testing/__init__.py</code> <pre><code>def get_job_class_and_model(module, name, source=\"local\"):\n\"\"\"\n    Test helper function to look up a job class and job model and ensure the latter is enabled.\n    Args:\n        module (str): Job module name\n        name (str): Job class name\n        source (str): Job grouping (default: \"local\")\n    Returns:\n        (JobClassInfo): Named 2-tuple of (job_class, job_model)\n    \"\"\"\njob_class = get_job(f\"{module}.{name}\")\njob_model = Job.objects.get(module_name=module, job_class_name=name)\njob_model.enabled = True\njob_model.validated_save()\nreturn JobClassInfo(job_class, job_model)\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing.post_data","title":"<code>nautobot.apps.testing.post_data(data)</code>","text":"<p>Take a dictionary of test data (suitable for comparison to an instance) and return a dict suitable for POSTing.</p> Source code in <code>nautobot/core/testing/utils.py</code> <pre><code>def post_data(data):\n\"\"\"\n    Take a dictionary of test data (suitable for comparison to an instance) and return a dict suitable for POSTing.\n    \"\"\"\nret = {}\nfor key, value in data.items():\nif value is None:\nret[key] = \"\"\nret.setdefault(\"_nullify\", [])\nret[\"_nullify\"].append(key)\nelif isinstance(value, (list, tuple)):\nif value and hasattr(value[0], \"pk\"):\n# Value is a list of instances\nret[key] = [v.pk for v in value]\nelse:\nret[key] = value\nelif hasattr(value, \"pk\"):\n# Value is an instance\nret[key] = value.pk\nelse:\nret[key] = str(value)\nreturn ret\n</code></pre>"},{"location":"code-reference/nautobot/apps/testing.html#nautobot.apps.testing.run_job_for_testing","title":"<code>nautobot.apps.testing.run_job_for_testing(job, username='test-user', profile=False, **kwargs)</code>","text":"<p>Provide a common interface to run Nautobot jobs as part of unit tests.</p> <p>Parameters:</p> Name Type Description Default <code>job</code> <code>Job</code> <p>Job model instance (not Job class) to run</p> required <code>username</code> <code>str</code> <p>Username of existing or to-be-created User account to own the JobResult.</p> <code>'test-user'</code> <code>profile</code> <code>bool</code> <p>Whether to profile the job execution.</p> <code>False</code> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>any</code> <p>Input keyword arguments for Job run method.</p> <p>Returns:</p> Type Description <code>JobResult</code> <p>representing the executed job</p> Source code in <code>nautobot/core/testing/__init__.py</code> <pre><code>def run_job_for_testing(job, username=\"test-user\", profile=False, **kwargs):\n\"\"\"\n    Provide a common interface to run Nautobot jobs as part of unit tests.\n    Args:\n        job (Job): Job model instance (not Job class) to run\n        username (str): Username of existing or to-be-created User account to own the JobResult.\n        profile (bool): Whether to profile the job execution.\n    Keyword Args:\n        **kwargs (any): Input keyword arguments for Job run method.\n    Returns:\n        (JobResult): representing the executed job\n    \"\"\"\n# Enable the job if it wasn't enabled before\nif not job.enabled:\njob.enabled = True\njob.validated_save()\nuser_instance, _ = User.objects.get_or_create(\nusername=username, defaults={\"is_superuser\": True, \"password\": \"password\"}\n)\n# Run the job synchronously in the current thread as if it were being executed by a worker\njob_result = JobResult.execute_job(\njob_model=job,\nuser=user_instance,\nprofile=profile,\n**kwargs,\n)\nreturn job_result\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html","title":"nautobot.apps.ui","text":""},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui","title":"<code>nautobot.apps.ui</code>","text":"<p>Utilities for apps to integrate with and extend the existing Nautobot UI.</p>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.Banner","title":"<code>nautobot.apps.ui.Banner</code>","text":"<p>Class that may be returned by a registered plugin_banners function.</p> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>class Banner:\n\"\"\"Class that may be returned by a registered plugin_banners function.\"\"\"\ndef __init__(self, content, banner_class=BannerClassChoices.CLASS_INFO):\nself.content = content\nif banner_class not in BannerClassChoices.values():\nraise ValueError(\"Banner class must be a choice within BannerClassChoices.\")\nself.banner_class = banner_class\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.BannerClassChoices","title":"<code>nautobot.apps.ui.BannerClassChoices</code>","text":"<p>             Bases: <code>ChoiceSet</code></p> <p>Styling choices for custom banners.</p> Source code in <code>nautobot/extras/choices.py</code> <pre><code>class BannerClassChoices(ChoiceSet):\n\"\"\"Styling choices for custom banners.\"\"\"\nCLASS_SUCCESS = \"success\"\nCLASS_INFO = \"info\"\nCLASS_WARNING = \"warning\"\nCLASS_DANGER = \"danger\"\nCHOICES = (\n(CLASS_SUCCESS, \"Success\"),\n(CLASS_INFO, \"Info\"),\n(CLASS_WARNING, \"Warning\"),\n(CLASS_DANGER, \"Danger\"),\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.ButtonColorChoices","title":"<code>nautobot.apps.ui.ButtonColorChoices</code>","text":"<p>             Bases: <code>ChoiceSet</code></p> <p>Map standard button color choices to Bootstrap color classes</p> Source code in <code>nautobot/core/choices.py</code> <pre><code>class ButtonColorChoices(ChoiceSet):\n\"\"\"\n    Map standard button color choices to Bootstrap color classes\n    \"\"\"\nDEFAULT = \"default\"\nBLUE = \"primary\"\nGREY = \"secondary\"\nGREEN = \"success\"\nRED = \"danger\"\nYELLOW = \"warning\"\nBLACK = \"dark\"\nCHOICES = (\n(DEFAULT, \"Default\"),\n(BLUE, \"Blue\"),\n(GREY, \"Grey\"),\n(GREEN, \"Green\"),\n(RED, \"Red\"),\n(YELLOW, \"Yellow\"),\n(BLACK, \"Black\"),\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.HomePageBase","title":"<code>nautobot.apps.ui.HomePageBase</code>","text":"<p>             Bases: <code>ABC</code></p> <p>Base class for homepage layout classes.</p> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>class HomePageBase(ABC):\n\"\"\"Base class for homepage layout classes.\"\"\"\n@property\n@abstractmethod\ndef initial_dict(self):  # to be implemented by each subclass\nreturn {}\n@property\n@abstractmethod\ndef fixed_fields(self):  # to be implemented by subclass\nreturn ()\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.HomePageGroup","title":"<code>nautobot.apps.ui.HomePageGroup</code>","text":"<p>             Bases: <code>HomePageBase</code>, <code>PermissionsMixin</code></p> <p>Defines properties that can be used for a panel group.</p> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>class HomePageGroup(HomePageBase, PermissionsMixin):\n\"\"\"Defines properties that can be used for a panel group.\"\"\"\nitems = []\n@property\ndef initial_dict(self):\nreturn {\n\"items\": {},\n\"permissions\": self.permissions,\n\"weight\": self.weight,\n}\n@property\ndef fixed_fields(self):\nreturn ()\ndef __init__(self, name, permissions=None, items=None, weight=1000):\n\"\"\"\n        Ensure group properties.\n        Args:\n            name (str): The name of the group.\n            permissions (list): The permissions required to view this group.\n            items (list): List of items to be rendered in this group.\n            weight (int): The weight of this group.\n        \"\"\"\nsuper().__init__(permissions)\nself.name = name\nself.weight = weight\nif items is not None:\nif not isinstance(items, (list, tuple)):\nraise TypeError(\"Items must be passed as a tuple or list.\")\nelif not all(isinstance(item, HomePageItem) for item in items):\nraise TypeError(\"All items defined in a group must be an instance of HomePageItem\")\nself.items = items\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.HomePageGroup.__init__","title":"<code>__init__(name, permissions=None, items=None, weight=1000)</code>","text":"<p>Ensure group properties.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the group.</p> required <code>permissions</code> <code>list</code> <p>The permissions required to view this group.</p> <code>None</code> <code>items</code> <code>list</code> <p>List of items to be rendered in this group.</p> <code>None</code> <code>weight</code> <code>int</code> <p>The weight of this group.</p> <code>1000</code> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>def __init__(self, name, permissions=None, items=None, weight=1000):\n\"\"\"\n    Ensure group properties.\n    Args:\n        name (str): The name of the group.\n        permissions (list): The permissions required to view this group.\n        items (list): List of items to be rendered in this group.\n        weight (int): The weight of this group.\n    \"\"\"\nsuper().__init__(permissions)\nself.name = name\nself.weight = weight\nif items is not None:\nif not isinstance(items, (list, tuple)):\nraise TypeError(\"Items must be passed as a tuple or list.\")\nelif not all(isinstance(item, HomePageItem) for item in items):\nraise TypeError(\"All items defined in a group must be an instance of HomePageItem\")\nself.items = items\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.HomePageItem","title":"<code>nautobot.apps.ui.HomePageItem</code>","text":"<p>             Bases: <code>HomePageBase</code>, <code>PermissionsMixin</code></p> <p>Defines properties that can be used for a panel item.</p> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>class HomePageItem(HomePageBase, PermissionsMixin):\n\"\"\"Defines properties that can be used for a panel item.\"\"\"\nitems = []\ntemplate_path = None\n@property\ndef initial_dict(self):\nreturn {\n\"custom_template\": self.custom_template,\n\"custom_data\": self.custom_data,\n\"description\": self.description,\n\"link\": self.link,\n\"model\": self.model,\n\"permissions\": self.permissions,\n\"template_path\": self.template_path,\n\"weight\": self.weight,\n}\n@property\ndef fixed_fields(self):\nreturn ()\ndef __init__(\nself,\nname,\nlink=None,\nmodel=None,\ncustom_template=None,\ncustom_data=None,\ndescription=None,\npermissions=None,\nweight=1000,\n):\n\"\"\"\n        Ensure item properties.\n        Args:\n            name (str): The name of the item.\n            link (str): The link to be used for this item.\n            model (str): The model to being used for this item to calculate the total count of objects.\n            custom_template (str): Name of custom template.\n            custom_data (dict): Custom data to be passed to the custom template.\n        \"\"\"\nsuper().__init__(permissions)\nself.name = name\nself.custom_template = custom_template\nself.custom_data = custom_data\nself.description = description\nself.link = link\nself.model = model\nself.weight = weight\nif model is not None and custom_template is not None:\nraise ValueError(\"Cannot specify model and custom_template at the same time.\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.HomePageItem.__init__","title":"<code>__init__(name, link=None, model=None, custom_template=None, custom_data=None, description=None, permissions=None, weight=1000)</code>","text":"<p>Ensure item properties.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the item.</p> required <code>link</code> <code>str</code> <p>The link to be used for this item.</p> <code>None</code> <code>model</code> <code>str</code> <p>The model to being used for this item to calculate the total count of objects.</p> <code>None</code> <code>custom_template</code> <code>str</code> <p>Name of custom template.</p> <code>None</code> <code>custom_data</code> <code>dict</code> <p>Custom data to be passed to the custom template.</p> <code>None</code> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>def __init__(\nself,\nname,\nlink=None,\nmodel=None,\ncustom_template=None,\ncustom_data=None,\ndescription=None,\npermissions=None,\nweight=1000,\n):\n\"\"\"\n    Ensure item properties.\n    Args:\n        name (str): The name of the item.\n        link (str): The link to be used for this item.\n        model (str): The model to being used for this item to calculate the total count of objects.\n        custom_template (str): Name of custom template.\n        custom_data (dict): Custom data to be passed to the custom template.\n    \"\"\"\nsuper().__init__(permissions)\nself.name = name\nself.custom_template = custom_template\nself.custom_data = custom_data\nself.description = description\nself.link = link\nself.model = model\nself.weight = weight\nif model is not None and custom_template is not None:\nraise ValueError(\"Cannot specify model and custom_template at the same time.\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.HomePagePanel","title":"<code>nautobot.apps.ui.HomePagePanel</code>","text":"<p>             Bases: <code>HomePageBase</code>, <code>PermissionsMixin</code></p> <p>Defines properties that can be used for a panel.</p> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>class HomePagePanel(HomePageBase, PermissionsMixin):\n\"\"\"Defines properties that can be used for a panel.\"\"\"\nitems = None\ntemplate_path = None\n@property\ndef initial_dict(self):\nreturn {\n\"custom_template\": self.custom_template,\n\"custom_data\": self.custom_data,\n\"weight\": self.weight,\n\"items\": {},\n\"permissions\": self.permissions,\n\"template_path\": self.template_path,\n}\n@property\ndef fixed_fields(self):\nreturn ()\ndef __init__(self, name, permissions=None, custom_data=None, custom_template=None, items=None, weight=1000):\n\"\"\"\n        Ensure panel properties.\n        Args:\n            name (str): The name of the panel.\n            permissions (list): The permissions required to view this panel.\n            custom_data (dict): Custom data to be passed to the custom template.\n            custom_template (str): Name of custom template.\n            items (list): List of items to be rendered in this panel.\n            weight (int): The weight of this panel.\n        \"\"\"\nsuper().__init__(permissions)\nself.custom_data = custom_data\nself.custom_template = custom_template\nself.name = name\nself.weight = weight\nif items is not None and custom_template is not None:\nraise ValueError(\"Cannot specify items and custom_template at the same time.\")\nif items is not None:\nif not isinstance(items, (list, tuple)):\nraise TypeError(\"Items must be passed as a tuple or list.\")\nelif not all(isinstance(item, (HomePageGroup, HomePageItem)) for item in items):\nraise TypeError(\"All items defined in a panel must be an instance of HomePageGroup or HomePageItem\")\nself.items = items\nelse:\nself.items = []\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.HomePagePanel.__init__","title":"<code>__init__(name, permissions=None, custom_data=None, custom_template=None, items=None, weight=1000)</code>","text":"<p>Ensure panel properties.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the panel.</p> required <code>permissions</code> <code>list</code> <p>The permissions required to view this panel.</p> <code>None</code> <code>custom_data</code> <code>dict</code> <p>Custom data to be passed to the custom template.</p> <code>None</code> <code>custom_template</code> <code>str</code> <p>Name of custom template.</p> <code>None</code> <code>items</code> <code>list</code> <p>List of items to be rendered in this panel.</p> <code>None</code> <code>weight</code> <code>int</code> <p>The weight of this panel.</p> <code>1000</code> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>def __init__(self, name, permissions=None, custom_data=None, custom_template=None, items=None, weight=1000):\n\"\"\"\n    Ensure panel properties.\n    Args:\n        name (str): The name of the panel.\n        permissions (list): The permissions required to view this panel.\n        custom_data (dict): Custom data to be passed to the custom template.\n        custom_template (str): Name of custom template.\n        items (list): List of items to be rendered in this panel.\n        weight (int): The weight of this panel.\n    \"\"\"\nsuper().__init__(permissions)\nself.custom_data = custom_data\nself.custom_template = custom_template\nself.name = name\nself.weight = weight\nif items is not None and custom_template is not None:\nraise ValueError(\"Cannot specify items and custom_template at the same time.\")\nif items is not None:\nif not isinstance(items, (list, tuple)):\nraise TypeError(\"Items must be passed as a tuple or list.\")\nelif not all(isinstance(item, (HomePageGroup, HomePageItem)) for item in items):\nraise TypeError(\"All items defined in a panel must be an instance of HomePageGroup or HomePageItem\")\nself.items = items\nelse:\nself.items = []\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.NavContext","title":"<code>nautobot.apps.ui.NavContext</code>","text":"<p>             Bases: <code>NavMenuBase</code></p> <p>Ths class represents a navigation menu tab for new ui.</p> <p>Groups are each specified as a list of NavGrouping instances.</p> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>class NavContext(NavMenuBase):\n\"\"\"Ths class represents a navigation menu tab for new ui.\n    Groups are each specified as a list of NavGrouping instances.\n    \"\"\"\ndef __init__(self, name, groups, weight=1000):\nself.name = name\nself.groups = groups\nself.weight = weight\nself.validate()\ndef validate(self):\n# NavContext name must belong in this group (\"Inventory\", \"Networks\", \"Security\", \"Automation\", \"Platform\")\nif self.name not in NAV_CONTEXT_NAMES:\nraise TypeError(f\"`{self.name}` is an invalid context name, valid choices are: {NAV_CONTEXT_NAMES}\")\nif self.groups:\ngroups = self.groups\nif not isinstance(groups, (list, tuple)):\nraise TypeError(\"Groups must be passed as a tuple or list.\")\nelif not all(isinstance(group, NavGrouping) for group in groups):\nraise TypeError(\"All groups defined in a NavContext must be an instance of NavGrouping\")\n@property\ndef initial_dict(self) -&gt; dict:\n\"\"\"Attributes to be stored when adding this item to the nav menu data for the first time.\"\"\"\nreturn {\n\"weight\": self.weight,\n\"data\": {},\n}\n@property\ndef fixed_fields(self) -&gt; tuple:\n\"\"\"Tuple of (name, attribute) entries describing fields that may not be altered after declaration.\"\"\"\nreturn ()\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.NavContext.fixed_fields","title":"<code>fixed_fields: tuple</code>  <code>property</code>","text":"<p>Tuple of (name, attribute) entries describing fields that may not be altered after declaration.</p>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.NavContext.initial_dict","title":"<code>initial_dict: dict</code>  <code>property</code>","text":"<p>Attributes to be stored when adding this item to the nav menu data for the first time.</p>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.NavGrouping","title":"<code>nautobot.apps.ui.NavGrouping</code>","text":"<p>             Bases: <code>NavMenuBase</code>, <code>PermissionsMixin</code></p> <p>Ths class represents a navigation menu group for the new ui. This is built up from a name and a weight value. The name is the display text and the weight defines its position in the navigation sidebar.</p> <p>Items are each specified as a list of NavItem or NavGrouping instances.</p> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>class NavGrouping(NavMenuBase, PermissionsMixin):\n\"\"\"\n    Ths class represents a navigation menu group for the new ui. This is built up from a name and a weight value. The name is\n    the display text and the weight defines its position in the navigation sidebar.\n    Items are each specified as a list of NavItem or NavGrouping instances.\n    \"\"\"\ndef __init__(self, name, items, weight=1000):\nself.name = name\nself.items = items\nself.weight = weight\nself.validate()\ndef validate(self):\nif self.items:\nitems = self.items\nif items is not None and not isinstance(items, (list, tuple)):\nraise TypeError(\"Items must be passed as a tuple or list.\")\nif not all(isinstance(item, (NavItem, self.__class__)) for item in items):\nraise TypeError(\"All items defined in a NavGrouping must be an instance of NavItem or NavGrouping\")\n@property\ndef initial_dict(self) -&gt; dict:\n\"\"\"Attributes to be stored when adding this item to the nav menu data for the first time.\"\"\"\nreturn {\n\"weight\": self.weight,\n\"data\": {},\n}\n@property\ndef fixed_fields(self) -&gt; tuple:\n\"\"\"Tuple of (name, attribute) entries describing fields that may not be altered after declaration.\"\"\"\nreturn ()\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.NavGrouping.fixed_fields","title":"<code>fixed_fields: tuple</code>  <code>property</code>","text":"<p>Tuple of (name, attribute) entries describing fields that may not be altered after declaration.</p>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.NavGrouping.initial_dict","title":"<code>initial_dict: dict</code>  <code>property</code>","text":"<p>Attributes to be stored when adding this item to the nav menu data for the first time.</p>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.NavItem","title":"<code>nautobot.apps.ui.NavItem</code>","text":"<p>             Bases: <code>NavMenuBase</code>, <code>PermissionsMixin</code></p> <p>This class represents a navigation menu item for the new ui. This constitutes link and its text.</p> <p>Links are specified as Django reverse URL strings.</p> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>class NavItem(NavMenuBase, PermissionsMixin):\n\"\"\"\n    This class represents a navigation menu item for the new ui. This constitutes link and its text.\n    Links are specified as Django reverse URL strings.\n    \"\"\"\ndef __init__(self, name, link, *args, permissions=None, weight=1000, **kwargs):\nself.name = name\nself.link = link\nself.permissions = permissions or []\nself.weight = weight\nself.args = args\nself.kwargs = kwargs\n@property\ndef initial_dict(self) -&gt; dict:\n\"\"\"Attributes to be stored when adding this item to the nav menu data for the first time.\"\"\"\nreturn {\n\"name\": self.name,\n\"weight\": self.weight,\n\"permissions\": self.permissions,\n\"data\": self.url(),\n}\n@property\ndef fixed_fields(self):\n\"\"\"Tuple of (name, attribute) entries describing fields that may not be altered after declaration.\"\"\"\nreturn (\n(\"name\", self.name),\n(\"permissions\", self.permissions),\n)\ndef url(self):\ntry:\nreturn reverse(self.link, args=self.args, kwargs=self.kwargs)\nexcept NoReverseMatch as e:\nlogger.error(\"Error in link construction for %s: %s\", self.name, e)\nreturn \"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.NavItem.fixed_fields","title":"<code>fixed_fields</code>  <code>property</code>","text":"<p>Tuple of (name, attribute) entries describing fields that may not be altered after declaration.</p>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.NavItem.initial_dict","title":"<code>initial_dict: dict</code>  <code>property</code>","text":"<p>Attributes to be stored when adding this item to the nav menu data for the first time.</p>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.NavMenuAddButton","title":"<code>nautobot.apps.ui.NavMenuAddButton</code>","text":"<p>             Bases: <code>NavMenuButton</code></p> <p>Add button subclass.</p> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>class NavMenuAddButton(NavMenuButton):\n\"\"\"Add button subclass.\"\"\"\ndef __init__(self, *args, **kwargs):\n\"\"\"Ensure button properties.\"\"\"\nif \"title\" not in kwargs:\nkwargs[\"title\"] = \"Add\"\nif \"icon_class\" not in kwargs:\nkwargs[\"icon_class\"] = ButtonActionIconChoices.ADD\nif \"button_class\" not in kwargs:\nkwargs[\"button_class\"] = ButtonActionColorChoices.ADD\nif \"weight\" not in kwargs:\nkwargs[\"weight\"] = 100\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.NavMenuAddButton.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>Ensure button properties.</p> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\"\"\"Ensure button properties.\"\"\"\nif \"title\" not in kwargs:\nkwargs[\"title\"] = \"Add\"\nif \"icon_class\" not in kwargs:\nkwargs[\"icon_class\"] = ButtonActionIconChoices.ADD\nif \"button_class\" not in kwargs:\nkwargs[\"button_class\"] = ButtonActionColorChoices.ADD\nif \"weight\" not in kwargs:\nkwargs[\"weight\"] = 100\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.NavMenuBase","title":"<code>nautobot.apps.ui.NavMenuBase</code>","text":"<p>             Bases: <code>ABC</code></p> <p>Base class for navigation classes.</p> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>class NavMenuBase(ABC):  # replaces PermissionsMixin\n\"\"\"Base class for navigation classes.\"\"\"\n@property\n@abstractmethod\ndef initial_dict(self) -&gt; dict:  # to be implemented by each subclass\n\"\"\"Attributes to be stored when adding this item to the nav menu data for the first time.\"\"\"\nreturn {}\n@property\n@abstractmethod\ndef fixed_fields(self) -&gt; tuple:  # to be implemented by subclass\n\"\"\"Tuple of (name, attribute) entries describing fields that may not be altered after declaration.\"\"\"\nreturn ()\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.NavMenuBase.fixed_fields","title":"<code>fixed_fields: tuple</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Tuple of (name, attribute) entries describing fields that may not be altered after declaration.</p>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.NavMenuBase.initial_dict","title":"<code>initial_dict: dict</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Attributes to be stored when adding this item to the nav menu data for the first time.</p>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.NavMenuButton","title":"<code>nautobot.apps.ui.NavMenuButton</code>","text":"<p>             Bases: <code>NavMenuBase</code>, <code>PermissionsMixin</code></p> <p>This class represents a button within a PluginMenuItem. Note that button colors should come from ButtonColorChoices.</p> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>class NavMenuButton(NavMenuBase, PermissionsMixin):\n\"\"\"\n    This class represents a button within a PluginMenuItem. Note that button colors should come from\n    ButtonColorChoices.\n    \"\"\"\n@property\ndef initial_dict(self) -&gt; dict:\n\"\"\"Attributes to be stored when adding this item to the nav menu data for the first time.\"\"\"\nreturn {\n\"link\": self.link,\n\"icon_class\": self.icon_class,\n\"button_class\": self.button_class,\n\"weight\": self.weight,\n\"buttons\": {},\n\"permissions\": self.permissions,\n}\n@property\ndef fixed_fields(self) -&gt; tuple:\n\"\"\"Tuple of (name, attribute) entries describing fields that may not be altered after declaration.\"\"\"\nreturn (\n(\"button_class\", self.button_class),\n(\"icon_class\", self.icon_class),\n(\"link\", self.link),\n(\"permissions\", self.permissions),\n)\ndef __init__(\nself,\nlink,\ntitle,\nicon_class,\nbutton_class=ButtonActionColorChoices.DEFAULT,\npermissions=None,\nweight=1000,\n):\n\"\"\"\n        Ensure button properties.\n        Args:\n            link (str): The link to be used for this button.\n            title (str): The title of the button.\n            icon_class (str): The icon class to be used as the icon for the start of the button.\n            button_class (str): The button class defines to be used to define the style of the button.\n            permissions (list): The permissions required to view this button.\n            weight (int): The weight of this button.\n        \"\"\"\nsuper().__init__(permissions)\nself.link = link\nself.title = title\nself.icon_class = icon_class\nself.weight = weight\nself.button_class = button_class\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.NavMenuButton.fixed_fields","title":"<code>fixed_fields: tuple</code>  <code>property</code>","text":"<p>Tuple of (name, attribute) entries describing fields that may not be altered after declaration.</p>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.NavMenuButton.initial_dict","title":"<code>initial_dict: dict</code>  <code>property</code>","text":"<p>Attributes to be stored when adding this item to the nav menu data for the first time.</p>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.NavMenuButton.__init__","title":"<code>__init__(link, title, icon_class, button_class=ButtonActionColorChoices.DEFAULT, permissions=None, weight=1000)</code>","text":"<p>Ensure button properties.</p> <p>Parameters:</p> Name Type Description Default <code>link</code> <code>str</code> <p>The link to be used for this button.</p> required <code>title</code> <code>str</code> <p>The title of the button.</p> required <code>icon_class</code> <code>str</code> <p>The icon class to be used as the icon for the start of the button.</p> required <code>button_class</code> <code>str</code> <p>The button class defines to be used to define the style of the button.</p> <code>ButtonActionColorChoices.DEFAULT</code> <code>permissions</code> <code>list</code> <p>The permissions required to view this button.</p> <code>None</code> <code>weight</code> <code>int</code> <p>The weight of this button.</p> <code>1000</code> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>def __init__(\nself,\nlink,\ntitle,\nicon_class,\nbutton_class=ButtonActionColorChoices.DEFAULT,\npermissions=None,\nweight=1000,\n):\n\"\"\"\n    Ensure button properties.\n    Args:\n        link (str): The link to be used for this button.\n        title (str): The title of the button.\n        icon_class (str): The icon class to be used as the icon for the start of the button.\n        button_class (str): The button class defines to be used to define the style of the button.\n        permissions (list): The permissions required to view this button.\n        weight (int): The weight of this button.\n    \"\"\"\nsuper().__init__(permissions)\nself.link = link\nself.title = title\nself.icon_class = icon_class\nself.weight = weight\nself.button_class = button_class\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.NavMenuGroup","title":"<code>nautobot.apps.ui.NavMenuGroup</code>","text":"<p>             Bases: <code>NavMenuBase</code>, <code>PermissionsMixin</code></p> <p>Ths class represents a navigation menu group. This is built up from a name and a weight value. The name is the display text and the weight defines its position in the navbar.</p> <p>Items are each specified as a list of NavMenuItem instances.</p> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>class NavMenuGroup(NavMenuBase, PermissionsMixin):\n\"\"\"\n    Ths class represents a navigation menu group. This is built up from a name and a weight value. The name is\n    the display text and the weight defines its position in the navbar.\n    Items are each specified as a list of NavMenuItem instances.\n    \"\"\"\npermissions = []\nitems = []\n@property\ndef initial_dict(self) -&gt; dict:\n\"\"\"Attributes to be stored when adding this item to the nav menu data for the first time.\"\"\"\nreturn {\n\"weight\": self.weight,\n\"items\": {},\n}\n@property\ndef fixed_fields(self) -&gt; tuple:\n\"\"\"Tuple of (name, attribute) entries describing fields that may not be altered after declaration.\"\"\"\nreturn ()\ndef __init__(self, name, items=None, weight=1000):\n\"\"\"\n        Ensure group properties.\n        Args:\n            name (str): The name of the group.\n            items (list): List of items to be rendered in this group.\n            weight (int): The weight of this group.\n        \"\"\"\nself.name = name\nself.weight = weight\nif items is not None and not isinstance(items, (list, tuple)):\nraise TypeError(\"Items must be passed as a tuple or list.\")\nelif not all(isinstance(item, NavMenuItem) for item in items):\nraise TypeError(\"All items defined in a group must be an instance of NavMenuItem\")\nself.items = items\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.NavMenuGroup.fixed_fields","title":"<code>fixed_fields: tuple</code>  <code>property</code>","text":"<p>Tuple of (name, attribute) entries describing fields that may not be altered after declaration.</p>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.NavMenuGroup.initial_dict","title":"<code>initial_dict: dict</code>  <code>property</code>","text":"<p>Attributes to be stored when adding this item to the nav menu data for the first time.</p>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.NavMenuGroup.__init__","title":"<code>__init__(name, items=None, weight=1000)</code>","text":"<p>Ensure group properties.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the group.</p> required <code>items</code> <code>list</code> <p>List of items to be rendered in this group.</p> <code>None</code> <code>weight</code> <code>int</code> <p>The weight of this group.</p> <code>1000</code> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>def __init__(self, name, items=None, weight=1000):\n\"\"\"\n    Ensure group properties.\n    Args:\n        name (str): The name of the group.\n        items (list): List of items to be rendered in this group.\n        weight (int): The weight of this group.\n    \"\"\"\nself.name = name\nself.weight = weight\nif items is not None and not isinstance(items, (list, tuple)):\nraise TypeError(\"Items must be passed as a tuple or list.\")\nelif not all(isinstance(item, NavMenuItem) for item in items):\nraise TypeError(\"All items defined in a group must be an instance of NavMenuItem\")\nself.items = items\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.NavMenuImportButton","title":"<code>nautobot.apps.ui.NavMenuImportButton</code>","text":"<p>             Bases: <code>NavMenuButton</code></p> <p>Import button subclass.</p> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>class NavMenuImportButton(NavMenuButton):\n\"\"\"Import button subclass.\"\"\"\ndef __init__(self, *args, **kwargs):\n\"\"\"Ensure button properties.\"\"\"\nif \"title\" not in kwargs:\nkwargs[\"title\"] = \"Import\"\nif \"icon_class\" not in kwargs:\nkwargs[\"icon_class\"] = ButtonActionIconChoices.IMPORT\nif \"button_class\" not in kwargs:\nkwargs[\"button_class\"] = ButtonActionColorChoices.IMPORT\nif \"weight\" not in kwargs:\nkwargs[\"weight\"] = 200\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.NavMenuImportButton.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>Ensure button properties.</p> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\"\"\"Ensure button properties.\"\"\"\nif \"title\" not in kwargs:\nkwargs[\"title\"] = \"Import\"\nif \"icon_class\" not in kwargs:\nkwargs[\"icon_class\"] = ButtonActionIconChoices.IMPORT\nif \"button_class\" not in kwargs:\nkwargs[\"button_class\"] = ButtonActionColorChoices.IMPORT\nif \"weight\" not in kwargs:\nkwargs[\"weight\"] = 200\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.NavMenuItem","title":"<code>nautobot.apps.ui.NavMenuItem</code>","text":"<p>             Bases: <code>NavMenuBase</code>, <code>PermissionsMixin</code></p> <p>This class represents a navigation menu item. This constitutes primary link and its text, but also allows for specifying additional link buttons that appear to the right of the item in the nav menu.</p> <p>Links are specified as Django reverse URL strings. Buttons are each specified as a list of NavMenuButton instances.</p> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>class NavMenuItem(NavMenuBase, PermissionsMixin):\n\"\"\"\n    This class represents a navigation menu item. This constitutes primary link and its text, but also allows for\n    specifying additional link buttons that appear to the right of the item in the nav menu.\n    Links are specified as Django reverse URL strings.\n    Buttons are each specified as a list of NavMenuButton instances.\n    \"\"\"\n@property\ndef initial_dict(self) -&gt; dict:\n\"\"\"Attributes to be stored when adding this item to the nav menu data for the first time.\"\"\"\nreturn {\n\"name\": self.name,\n\"weight\": self.weight,\n\"buttons\": {},\n\"permissions\": self.permissions,\n\"args\": [],\n\"kwargs\": {},\n}\n@property\ndef fixed_fields(self) -&gt; tuple:\n\"\"\"Tuple of (name, attribute) entries describing fields that may not be altered after declaration.\"\"\"\nreturn (\n(\"name\", self.name),\n(\"permissions\", self.permissions),\n)\npermissions = []\nbuttons = []\nargs = []\nkwargs = {}\ndef __init__(self, link, name, args=None, kwargs=None, permissions=None, buttons=(), weight=1000):\n\"\"\"\n        Ensure item properties.\n        Args:\n            link (str): The link to be used for this item.\n            name (str): The name of the item.\n            args (list): Arguments that are being passed to the url with reverse() method\n            kwargs (dict): Keyword arguments are are being passed to the url with reverse() method\n            permissions (list): The permissions required to view this item.\n            buttons (list): List of buttons to be rendered in this item.\n            weight (int): The weight of this item.\n        \"\"\"\nsuper().__init__(permissions)\nself.link = link\nself.name = name\nself.weight = weight\nself.args = args\nself.kwargs = kwargs\nif not isinstance(buttons, (list, tuple)):\nraise TypeError(\"Buttons must be passed as a tuple or list.\")\nelif not all(isinstance(button, NavMenuButton) for button in buttons):\nraise TypeError(\"All buttons defined in an item must be an instance or subclass of NavMenuButton\")\nself.buttons = buttons\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.NavMenuItem.fixed_fields","title":"<code>fixed_fields: tuple</code>  <code>property</code>","text":"<p>Tuple of (name, attribute) entries describing fields that may not be altered after declaration.</p>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.NavMenuItem.initial_dict","title":"<code>initial_dict: dict</code>  <code>property</code>","text":"<p>Attributes to be stored when adding this item to the nav menu data for the first time.</p>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.NavMenuItem.__init__","title":"<code>__init__(link, name, args=None, kwargs=None, permissions=None, buttons=(), weight=1000)</code>","text":"<p>Ensure item properties.</p> <p>Parameters:</p> Name Type Description Default <code>link</code> <code>str</code> <p>The link to be used for this item.</p> required <code>name</code> <code>str</code> <p>The name of the item.</p> required <code>args</code> <code>list</code> <p>Arguments that are being passed to the url with reverse() method</p> <code>None</code> <code>kwargs</code> <code>dict</code> <p>Keyword arguments are are being passed to the url with reverse() method</p> <code>None</code> <code>permissions</code> <code>list</code> <p>The permissions required to view this item.</p> <code>None</code> <code>buttons</code> <code>list</code> <p>List of buttons to be rendered in this item.</p> <code>()</code> <code>weight</code> <code>int</code> <p>The weight of this item.</p> <code>1000</code> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>def __init__(self, link, name, args=None, kwargs=None, permissions=None, buttons=(), weight=1000):\n\"\"\"\n    Ensure item properties.\n    Args:\n        link (str): The link to be used for this item.\n        name (str): The name of the item.\n        args (list): Arguments that are being passed to the url with reverse() method\n        kwargs (dict): Keyword arguments are are being passed to the url with reverse() method\n        permissions (list): The permissions required to view this item.\n        buttons (list): List of buttons to be rendered in this item.\n        weight (int): The weight of this item.\n    \"\"\"\nsuper().__init__(permissions)\nself.link = link\nself.name = name\nself.weight = weight\nself.args = args\nself.kwargs = kwargs\nif not isinstance(buttons, (list, tuple)):\nraise TypeError(\"Buttons must be passed as a tuple or list.\")\nelif not all(isinstance(button, NavMenuButton) for button in buttons):\nraise TypeError(\"All buttons defined in an item must be an instance or subclass of NavMenuButton\")\nself.buttons = buttons\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.NavMenuTab","title":"<code>nautobot.apps.ui.NavMenuTab</code>","text":"<p>             Bases: <code>NavMenuBase</code>, <code>PermissionsMixin</code></p> <p>Ths class represents a navigation menu tab. This is built up from a name and a weight value. The name is the display text and the weight defines its position in the navbar.</p> <p>Groups are each specified as a list of NavMenuGroup instances.</p> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>class NavMenuTab(NavMenuBase, PermissionsMixin):\n\"\"\"\n    Ths class represents a navigation menu tab. This is built up from a name and a weight value. The name is\n    the display text and the weight defines its position in the navbar.\n    Groups are each specified as a list of NavMenuGroup instances.\n    \"\"\"\npermissions = []\ngroups = []\n@property\ndef initial_dict(self) -&gt; dict:\n\"\"\"Attributes to be stored when adding this item to the nav menu data for the first time.\"\"\"\nreturn {\n\"weight\": self.weight,\n\"groups\": {},\n\"permissions\": set(),\n}\n@property\ndef fixed_fields(self) -&gt; tuple:\n\"\"\"Tuple of (name, attribute) entries describing fields that may not be altered after declaration.\"\"\"\nreturn ()\ndef __init__(self, name, permissions=None, groups=None, weight=1000):\n\"\"\"\n        Ensure tab properties.\n        Args:\n            name (str): The name of the tab.\n            permissions (list): The permissions required to view this tab.\n            groups (list): List of groups to be rendered in this tab.\n            weight (int): The weight of this tab.\n        \"\"\"\nsuper().__init__(permissions)\nself.name = name\nself.weight = weight\nif groups is not None:\nif not isinstance(groups, (list, tuple)):\nraise TypeError(\"Groups must be passed as a tuple or list.\")\nelif not all(isinstance(group, NavMenuGroup) for group in groups):\nraise TypeError(\"All groups defined in a tab must be an instance of NavMenuGroup\")\nself.groups = groups\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.NavMenuTab.fixed_fields","title":"<code>fixed_fields: tuple</code>  <code>property</code>","text":"<p>Tuple of (name, attribute) entries describing fields that may not be altered after declaration.</p>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.NavMenuTab.initial_dict","title":"<code>initial_dict: dict</code>  <code>property</code>","text":"<p>Attributes to be stored when adding this item to the nav menu data for the first time.</p>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.NavMenuTab.__init__","title":"<code>__init__(name, permissions=None, groups=None, weight=1000)</code>","text":"<p>Ensure tab properties.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the tab.</p> required <code>permissions</code> <code>list</code> <p>The permissions required to view this tab.</p> <code>None</code> <code>groups</code> <code>list</code> <p>List of groups to be rendered in this tab.</p> <code>None</code> <code>weight</code> <code>int</code> <p>The weight of this tab.</p> <code>1000</code> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>def __init__(self, name, permissions=None, groups=None, weight=1000):\n\"\"\"\n    Ensure tab properties.\n    Args:\n        name (str): The name of the tab.\n        permissions (list): The permissions required to view this tab.\n        groups (list): List of groups to be rendered in this tab.\n        weight (int): The weight of this tab.\n    \"\"\"\nsuper().__init__(permissions)\nself.name = name\nself.weight = weight\nif groups is not None:\nif not isinstance(groups, (list, tuple)):\nraise TypeError(\"Groups must be passed as a tuple or list.\")\nelif not all(isinstance(group, NavMenuGroup) for group in groups):\nraise TypeError(\"All groups defined in a tab must be an instance of NavMenuGroup\")\nself.groups = groups\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.PermissionsMixin","title":"<code>nautobot.apps.ui.PermissionsMixin</code>","text":"<p>Ensure permissions through init.</p> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>class PermissionsMixin:\n\"\"\"Ensure permissions through init.\"\"\"\ndef __init__(self, permissions=None):\n\"\"\"Ensure permissions.\"\"\"\nif permissions is not None and not isinstance(permissions, (list, tuple)):\nraise TypeError(\"Permissions must be passed as a tuple or list.\")\nself.permissions = set(permissions) if permissions else set()\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.core.apps.PermissionsMixin.__init__","title":"<code>__init__(permissions=None)</code>","text":"<p>Ensure permissions.</p> Source code in <code>nautobot/core/apps/__init__.py</code> <pre><code>def __init__(self, permissions=None):\n\"\"\"Ensure permissions.\"\"\"\nif permissions is not None and not isinstance(permissions, (list, tuple)):\nraise TypeError(\"Permissions must be passed as a tuple or list.\")\nself.permissions = set(permissions) if permissions else set()\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.apps.ui.TemplateExtension","title":"<code>nautobot.apps.ui.TemplateExtension</code>","text":"<p>This class is used to register plugin content to be injected into core Nautobot templates. It contains methods that are overridden by plugin authors to return template content.</p> <p>The <code>model</code> attribute on the class defines the which model detail page this class renders content for. It should be set as a string in the form <code>&lt;app_label&gt;.&lt;model_name&gt;</code>. <code>render()</code> provides the following context data:</p> <ul> <li>object - The object being viewed</li> <li>request - The current request</li> <li>settings - Global Nautobot settings</li> <li>config - Plugin-specific configuration parameters</li> </ul> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>class TemplateExtension:\n\"\"\"\n    This class is used to register plugin content to be injected into core Nautobot templates. It contains methods\n    that are overridden by plugin authors to return template content.\n    The `model` attribute on the class defines the which model detail page this class renders content for. It\n    should be set as a string in the form `&lt;app_label&gt;.&lt;model_name&gt;`. `render()` provides the following context data:\n    * object - The object being viewed\n    * request - The current request\n    * settings - Global Nautobot settings\n    * config - Plugin-specific configuration parameters\n    \"\"\"\nmodel = None\ndef __init__(self, context):\nself.context = context\ndef render(self, template_name, extra_context=None):\n\"\"\"\n        Convenience method for rendering the specified Django template using the default context data. An additional\n        context dictionary may be passed as `extra_context`.\n        \"\"\"\nif extra_context is None:\nextra_context = {}\nelif not isinstance(extra_context, dict):\nraise TypeError(\"extra_context must be a dictionary\")\nreturn get_template(template_name).render({**self.context, **extra_context})\ndef left_page(self):\n\"\"\"\n        Content that will be rendered on the left of the detail page view. Content should be returned as an\n        HTML string. Note that content does not need to be marked as safe because this is automatically handled.\n        \"\"\"\nraise NotImplementedError\ndef right_page(self):\n\"\"\"\n        Content that will be rendered on the right of the detail page view. Content should be returned as an\n        HTML string. Note that content does not need to be marked as safe because this is automatically handled.\n        \"\"\"\nraise NotImplementedError\ndef full_width_page(self):\n\"\"\"\n        Content that will be rendered within the full width of the detail page view. Content should be returned as an\n        HTML string. Note that content does not need to be marked as safe because this is automatically handled.\n        \"\"\"\nraise NotImplementedError\ndef buttons(self):\n\"\"\"\n        Buttons that will be rendered and added to the existing list of buttons on the detail page view. Content\n        should be returned as an HTML string. Note that content does not need to be marked as safe because this is\n        automatically handled.\n        \"\"\"\nraise NotImplementedError\ndef detail_tabs(self):\n\"\"\"\n        Tabs that will be rendered and added to the existing list of tabs on the detail page view.\n        Tabs will be ordered by their position in the list.\n        Content should be returned as a list of dicts in the following format:\n        ```\n        [\n            {\n                \"title\": \"&lt;title&gt;\",\n                \"url\": \"&lt;url for the tab link&gt;\",\n            },\n            {\n                \"title\": \"&lt;title&gt;\",\n                \"url\": \"&lt;url for the tab link&gt;\",\n            },\n        ]\n        ```\n        \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.extras.plugins.TemplateExtension.buttons","title":"<code>buttons()</code>","text":"<p>Buttons that will be rendered and added to the existing list of buttons on the detail page view. Content should be returned as an HTML string. Note that content does not need to be marked as safe because this is automatically handled.</p> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>def buttons(self):\n\"\"\"\n    Buttons that will be rendered and added to the existing list of buttons on the detail page view. Content\n    should be returned as an HTML string. Note that content does not need to be marked as safe because this is\n    automatically handled.\n    \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.extras.plugins.TemplateExtension.detail_tabs","title":"<code>detail_tabs()</code>","text":"<p>Tabs that will be rendered and added to the existing list of tabs on the detail page view. Tabs will be ordered by their position in the list.</p> <p>Content should be returned as a list of dicts in the following format: <pre><code>[\n    {\n        \"title\": \"&lt;title&gt;\",\n        \"url\": \"&lt;url for the tab link&gt;\",\n    },\n    {\n        \"title\": \"&lt;title&gt;\",\n        \"url\": \"&lt;url for the tab link&gt;\",\n    },\n]\n</code></pre></p> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>def detail_tabs(self):\n\"\"\"\n    Tabs that will be rendered and added to the existing list of tabs on the detail page view.\n    Tabs will be ordered by their position in the list.\n    Content should be returned as a list of dicts in the following format:\n    ```\n    [\n        {\n            \"title\": \"&lt;title&gt;\",\n            \"url\": \"&lt;url for the tab link&gt;\",\n        },\n        {\n            \"title\": \"&lt;title&gt;\",\n            \"url\": \"&lt;url for the tab link&gt;\",\n        },\n    ]\n    ```\n    \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.extras.plugins.TemplateExtension.full_width_page","title":"<code>full_width_page()</code>","text":"<p>Content that will be rendered within the full width of the detail page view. Content should be returned as an HTML string. Note that content does not need to be marked as safe because this is automatically handled.</p> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>def full_width_page(self):\n\"\"\"\n    Content that will be rendered within the full width of the detail page view. Content should be returned as an\n    HTML string. Note that content does not need to be marked as safe because this is automatically handled.\n    \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.extras.plugins.TemplateExtension.left_page","title":"<code>left_page()</code>","text":"<p>Content that will be rendered on the left of the detail page view. Content should be returned as an HTML string. Note that content does not need to be marked as safe because this is automatically handled.</p> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>def left_page(self):\n\"\"\"\n    Content that will be rendered on the left of the detail page view. Content should be returned as an\n    HTML string. Note that content does not need to be marked as safe because this is automatically handled.\n    \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.extras.plugins.TemplateExtension.render","title":"<code>render(template_name, extra_context=None)</code>","text":"<p>Convenience method for rendering the specified Django template using the default context data. An additional context dictionary may be passed as <code>extra_context</code>.</p> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>def render(self, template_name, extra_context=None):\n\"\"\"\n    Convenience method for rendering the specified Django template using the default context data. An additional\n    context dictionary may be passed as `extra_context`.\n    \"\"\"\nif extra_context is None:\nextra_context = {}\nelif not isinstance(extra_context, dict):\nraise TypeError(\"extra_context must be a dictionary\")\nreturn get_template(template_name).render({**self.context, **extra_context})\n</code></pre>"},{"location":"code-reference/nautobot/apps/ui.html#nautobot.extras.plugins.TemplateExtension.right_page","title":"<code>right_page()</code>","text":"<p>Content that will be rendered on the right of the detail page view. Content should be returned as an HTML string. Note that content does not need to be marked as safe because this is automatically handled.</p> Source code in <code>nautobot/extras/plugins/__init__.py</code> <pre><code>def right_page(self):\n\"\"\"\n    Content that will be rendered on the right of the detail page view. Content should be returned as an\n    HTML string. Note that content does not need to be marked as safe because this is automatically handled.\n    \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"code-reference/nautobot/apps/urls.html","title":"nautobot.apps.urls","text":""},{"location":"code-reference/nautobot/apps/urls.html#nautobot.apps.urls","title":"<code>nautobot.apps.urls</code>","text":"<p>Utilities for apps to implement URL routing.</p>"},{"location":"code-reference/nautobot/apps/urls.html#nautobot.apps.urls.NautobotUIViewSetRouter","title":"<code>nautobot.apps.urls.NautobotUIViewSetRouter</code>","text":"<p>             Bases: <code>SimpleRouter</code></p> <p>Nautobot Custom Router that is intended for UI use only.</p> Source code in <code>nautobot/core/views/routers.py</code> <pre><code>class NautobotUIViewSetRouter(SimpleRouter):\n\"\"\"\n    Nautobot Custom Router that is intended for UI use only.\n    \"\"\"\nroutes = [\nRoute(\nurl=r\"^{prefix}/$\",\nmapping={\"get\": \"list\"},\nname=\"{basename}_list\",\ndetail=False,\ninitkwargs={\"suffix\": \"List\"},\n),\nRoute(\nurl=r\"^{prefix}/add/$\",\nmapping={\n\"get\": \"create\",\n\"post\": \"create\",\n},\nname=\"{basename}_add\",\ndetail=False,\ninitkwargs={\"suffix\": \"Add\"},\n),\nRoute(\nurl=r\"^{prefix}/import/$\",\nmapping={\n\"get\": \"bulk_create\",\n\"post\": \"bulk_create\",\n},\nname=\"{basename}_import\",\ndetail=False,\ninitkwargs={\"suffix\": \"Import\"},\n),\nRoute(\nurl=r\"^{prefix}/edit/$\",\nmapping={\n\"post\": \"bulk_update\",\n},\nname=\"{basename}_bulk_edit\",\ndetail=False,\ninitkwargs={\"suffix\": \"Bulk Edit\"},\n),\nRoute(\nurl=r\"^{prefix}/delete/$\",\nmapping={\n\"post\": \"bulk_destroy\",\n},\nname=\"{basename}_bulk_delete\",\ndetail=False,\ninitkwargs={\"suffix\": \"Bulk Delete\"},\n),\nRoute(\nurl=r\"^{prefix}/{lookup}/$\",\nmapping={\"get\": \"retrieve\"},\nname=\"{basename}\",\ndetail=True,\ninitkwargs={\"suffix\": \"Detail\"},\n),\nRoute(\nurl=r\"^{prefix}/{lookup}/delete/$\",\nmapping={\n\"get\": \"destroy\",\n\"post\": \"destroy\",\n},\nname=\"{basename}_delete\",\ndetail=True,\ninitkwargs={\"suffix\": \"Delete\"},\n),\nRoute(\nurl=r\"^{prefix}/{lookup}/edit/$\",\nmapping={\n\"get\": \"update\",\n\"post\": \"update\",\n},\nname=\"{basename}_edit\",\ndetail=True,\ninitkwargs={\"suffix\": \"Edit\"},\n),\n# DynamicRoute will handle ChangeLog &amp; Notes UI Views\nDynamicRoute(\nurl=r\"^{prefix}/{lookup}/{url_path}{trailing_slash}$\",\nname=\"{basename}_{url_name}\",\ndetail=True,\ninitkwargs={},\n),\n]\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html","title":"nautobot.apps.utils","text":""},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils","title":"<code>nautobot.apps.utils</code>","text":"<p>Nautobot utility functions.</p>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.ChangeLoggedModelsQuery","title":"<code>nautobot.apps.utils.ChangeLoggedModelsQuery</code>","text":"<p>             Bases: <code>FeaturedQueryMixin</code></p> <p>Helper class to get ContentType for models that implements the to_objectchange method for change logging.</p> Source code in <code>nautobot/extras/utils.py</code> <pre><code>@deconstructible\nclass ChangeLoggedModelsQuery(FeaturedQueryMixin):\n\"\"\"\n    Helper class to get ContentType for models that implements the to_objectchange method for change logging.\n    \"\"\"\ndef list_subclasses(self):\n\"\"\"\n        Return a list of classes that implement the to_objectchange method\n        \"\"\"\nreturn [_class for _class in apps.get_models() if hasattr(_class, \"to_objectchange\")]\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.extras.utils.ChangeLoggedModelsQuery.list_subclasses","title":"<code>list_subclasses()</code>","text":"<p>Return a list of classes that implement the to_objectchange method</p> Source code in <code>nautobot/extras/utils.py</code> <pre><code>def list_subclasses(self):\n\"\"\"\n    Return a list of classes that implement the to_objectchange method\n    \"\"\"\nreturn [_class for _class in apps.get_models() if hasattr(_class, \"to_objectchange\")]\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.FeatureQuery","title":"<code>nautobot.apps.utils.FeatureQuery</code>","text":"<p>Helper class that delays evaluation of the registry contents for the functionality store until it has been populated.</p> Source code in <code>nautobot/extras/utils.py</code> <pre><code>@deconstructible\nclass FeatureQuery:\n\"\"\"\n    Helper class that delays evaluation of the registry contents for the functionality store\n    until it has been populated.\n    \"\"\"\ndef __init__(self, feature):\nself.feature = feature\ndef __call__(self):\nreturn self.get_query()\ndef get_query(self):\n\"\"\"\n        Given an extras feature, return a Q object for content type lookup\n        \"\"\"\n# The `populate_model_features_registry` function is called in the `FeatureQuery().get_query` method instead of\n# `ExtrasConfig.ready` because `FeatureQuery().get_query` is called before `ExtrasConfig.ready`.\n# This is because `FeatureQuery` is a helper class used in `Forms` and `Serializers` that are called during the\n# initialization of the application, before `ExtrasConfig.ready` is called.\n# Calling `populate_model_features_registry` in `ExtrasConfig.ready` would lead to an outdated `model_features`\n# `registry` record being used by `FeatureQuery`.\npopulate_model_features_registry()\nquery = Q()\nfor app_label, models in self.as_dict():\nquery |= Q(app_label=app_label, model__in=models)\nreturn query\ndef as_dict(self):\n\"\"\"\n        Given an extras feature, return a dict of app_label: [models] for content type lookup\n        \"\"\"\nreturn registry[\"model_features\"][self.feature].items()\ndef get_choices(self):\n\"\"\"\n        Given an extras feature, return a list of 2-tuple of `(model_label, pk)`\n        suitable for use as `choices` on a choice field:\n            &gt;&gt;&gt; FeatureQuery('statuses').get_choices()\n            [('dcim.device', 13), ('dcim.rack', 34)]\n        \"\"\"\nreturn [(f\"{ct.app_label}.{ct.model}\", ct.pk) for ct in ContentType.objects.filter(self.get_query())]\ndef list_subclasses(self):\n\"\"\"Return a list of model classes that declare this feature.\"\"\"\nreturn [ct.model_class() for ct in ContentType.objects.filter(self.get_query())]\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.extras.utils.FeatureQuery.as_dict","title":"<code>as_dict()</code>","text":"<p>Given an extras feature, return a dict of app_label: [models] for content type lookup</p> Source code in <code>nautobot/extras/utils.py</code> <pre><code>def as_dict(self):\n\"\"\"\n    Given an extras feature, return a dict of app_label: [models] for content type lookup\n    \"\"\"\nreturn registry[\"model_features\"][self.feature].items()\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.extras.utils.FeatureQuery.get_choices","title":"<code>get_choices()</code>","text":"<p>Given an extras feature, return a list of 2-tuple of <code>(model_label, pk)</code> suitable for use as <code>choices</code> on a choice field:</p> <pre><code>&gt;&gt;&gt; FeatureQuery('statuses').get_choices()\n[('dcim.device', 13), ('dcim.rack', 34)]\n</code></pre> Source code in <code>nautobot/extras/utils.py</code> <pre><code>def get_choices(self):\n\"\"\"\n    Given an extras feature, return a list of 2-tuple of `(model_label, pk)`\n    suitable for use as `choices` on a choice field:\n        &gt;&gt;&gt; FeatureQuery('statuses').get_choices()\n        [('dcim.device', 13), ('dcim.rack', 34)]\n    \"\"\"\nreturn [(f\"{ct.app_label}.{ct.model}\", ct.pk) for ct in ContentType.objects.filter(self.get_query())]\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.extras.utils.FeatureQuery.get_query","title":"<code>get_query()</code>","text":"<p>Given an extras feature, return a Q object for content type lookup</p> Source code in <code>nautobot/extras/utils.py</code> <pre><code>def get_query(self):\n\"\"\"\n    Given an extras feature, return a Q object for content type lookup\n    \"\"\"\n# The `populate_model_features_registry` function is called in the `FeatureQuery().get_query` method instead of\n# `ExtrasConfig.ready` because `FeatureQuery().get_query` is called before `ExtrasConfig.ready`.\n# This is because `FeatureQuery` is a helper class used in `Forms` and `Serializers` that are called during the\n# initialization of the application, before `ExtrasConfig.ready` is called.\n# Calling `populate_model_features_registry` in `ExtrasConfig.ready` would lead to an outdated `model_features`\n# `registry` record being used by `FeatureQuery`.\npopulate_model_features_registry()\nquery = Q()\nfor app_label, models in self.as_dict():\nquery |= Q(app_label=app_label, model__in=models)\nreturn query\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.extras.utils.FeatureQuery.list_subclasses","title":"<code>list_subclasses()</code>","text":"<p>Return a list of model classes that declare this feature.</p> Source code in <code>nautobot/extras/utils.py</code> <pre><code>def list_subclasses(self):\n\"\"\"Return a list of model classes that declare this feature.\"\"\"\nreturn [ct.model_class() for ct in ContentType.objects.filter(self.get_query())]\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.FeaturedQueryMixin","title":"<code>nautobot.apps.utils.FeaturedQueryMixin</code>","text":"<p>Mixin class that gets a list of featured models.</p> Source code in <code>nautobot/extras/utils.py</code> <pre><code>@deconstructible\nclass FeaturedQueryMixin:\n\"\"\"Mixin class that gets a list of featured models.\"\"\"\ndef list_subclasses(self):\n\"\"\"Return a list of classes that has implements this `name`.\"\"\"\nraise NotImplementedError(\"list_subclasses is not implemented\")\ndef __call__(self):\n\"\"\"\n        Given an extras feature, return a Q object for content type lookup\n        \"\"\"\nquery = Q()\nfor model in self.list_subclasses():\nquery |= Q(app_label=model._meta.app_label, model=model.__name__.lower())\nreturn query\ndef as_queryset(self):\nreturn ContentType.objects.filter(self()).order_by(\"app_label\", \"model\")\ndef get_choices(self):\nreturn [(f\"{ct.app_label}.{ct.model}\", ct.pk) for ct in self.as_queryset()]\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.extras.utils.FeaturedQueryMixin.__call__","title":"<code>__call__()</code>","text":"<p>Given an extras feature, return a Q object for content type lookup</p> Source code in <code>nautobot/extras/utils.py</code> <pre><code>def __call__(self):\n\"\"\"\n    Given an extras feature, return a Q object for content type lookup\n    \"\"\"\nquery = Q()\nfor model in self.list_subclasses():\nquery |= Q(app_label=model._meta.app_label, model=model.__name__.lower())\nreturn query\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.extras.utils.FeaturedQueryMixin.list_subclasses","title":"<code>list_subclasses()</code>","text":"<p>Return a list of classes that has implements this <code>name</code>.</p> Source code in <code>nautobot/extras/utils.py</code> <pre><code>def list_subclasses(self):\n\"\"\"Return a list of classes that has implements this `name`.\"\"\"\nraise NotImplementedError(\"list_subclasses is not implemented\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.GitRepo","title":"<code>nautobot.apps.utils.GitRepo</code>","text":"Source code in <code>nautobot/core/utils/git.py</code> <pre><code>class GitRepo:\ndef __init__(self, path, url, clone_initially=True):\n\"\"\"\n        Ensure that we have a clone of the given remote Git repository URL at the given local directory path.\n        Args:\n            path (str): path to git repo\n            url (str): git repo url\n            clone_initially (bool): True if the repo needs to be cloned\n        \"\"\"\nif os.path.isdir(path) and os.path.isdir(os.path.join(path, \".git\")):\nself.repo = Repo(path=path)\nelif clone_initially:\n# Don't log `url` as it may include authentication details.\nlogger.debug(\"Cloning git repository to %s...\", path)\nself.repo = Repo.clone_from(url, to_path=path, env=GIT_ENVIRONMENT)\nelse:\nself.repo = Repo.init(path)\nself.repo.create_remote(\"origin\", url=url)\nif url not in self.repo.remotes.origin.urls:\nself.repo.remotes.origin.set_url(url)\n@property\ndef head(self):\n\"\"\"Current checked out repository head commit.\"\"\"\nreturn self.repo.head.commit.hexsha\ndef fetch(self):\nwith self.repo.git.custom_environment(**GIT_ENVIRONMENT):\nself.repo.remotes.origin.fetch()\ndef checkout(self, branch, commit_hexsha=None):\n\"\"\"\n        Check out the given branch, and optionally the specified commit within that branch.\n        Returns:\n            (str, bool): commit_hexsha the repo contains now, whether any change occurred\n        \"\"\"\n# Short-circuit logic - do we already have this commit checked out?\nif commit_hexsha and commit_hexsha == self.head:\nlogger.debug(f\"Commit {commit_hexsha} is already checked out.\")\nreturn (commit_hexsha, False)\nself.fetch()\nif commit_hexsha:\n# Sanity check - GitPython doesn't provide a handy API for this so we just call a raw Git command:\n# $ git branch origin/&lt;branch&gt; --remotes --contains &lt;commit&gt;\n# prints the branch name if it DOES contain the commit, and nothing if it DOES NOT contain the commit.\n# Since we did a `fetch` and not a `pull` above, we need to check for the commit in the remote origin\n# branch, not the local (not-yet-updated) branch.\nif branch not in self.repo.git.branch(f\"origin/{branch}\", \"--remotes\", \"--contains\", commit_hexsha):\nraise RuntimeError(f\"Requested to check out commit `{commit_hexsha}`, but it's not in branch {branch}!\")\nlogger.info(f\"Checking out commit `{commit_hexsha}` on branch `{branch}`...\")\nself.repo.git.checkout(commit_hexsha)\nreturn (commit_hexsha, True)\nif branch in self.repo.heads:\nbranch_head = self.repo.heads[branch]\nelse:\ntry:\nbranch_head = self.repo.create_head(branch, self.repo.remotes.origin.refs[branch])\nbranch_head.set_tracking_branch(self.repo.remotes.origin.refs[branch])\nexcept IndexError as git_error:\nlogger.error(\n\"Branch %s does not exist at %s. %s\", branch, list(self.repo.remotes.origin.urls)[0], git_error\n)\nraise BranchDoesNotExist(\nf\"Please create branch '{branch}' in upstream and try again.\"\nf\" If this is a new repo, please add a commit before syncing. {git_error}\"\n)\nlogger.info(f\"Checking out latest commit on branch `{branch}`...\")\nbranch_head.checkout()\n# No specific commit hash was given, so make sure we get the latest from origin\n# We would use repo.remotes.origin.pull() here, but that will fail in the case where someone has\n# force-pushed to the upstream repo since the last time we did a pull. To be safe, we reset instead.\nself.repo.head.reset(f\"origin/{branch}\", index=True, working_tree=True)\ncommit_hexsha = self.repo.head.reference.commit.hexsha\nlogger.info(f\"Latest commit on branch `{branch}` is `{commit_hexsha}`\")\nreturn (commit_hexsha, True)\ndef diff_remote(self, branch):\nlogger.debug(\"Fetching from remote.\")\nself.fetch()\ntry:\nself.repo.remotes.origin.refs[branch]\nexcept IndexError as git_error:\nlogger.error(\n\"Branch %s does not exist at %s. %s\", branch, list(self.repo.remotes.origin.urls)[0], git_error\n)\nraise BranchDoesNotExist(\nf\"Please create branch '{branch}' in upstream and try again.\"\nf\" If this is a new repo, please add a commit before syncing. {git_error}\"\n)\nlogger.debug(\"Getting diff between local branch and remote branch\")\ndiff = self.repo.git.diff(\"--name-status\", f\"origin/{branch}\")\nif diff:  # if diff is not empty\nreturn convert_git_diff_log_to_list(diff)\nlogger.debug(\"No Difference\")\nreturn []\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.core.utils.git.GitRepo.head","title":"<code>head</code>  <code>property</code>","text":"<p>Current checked out repository head commit.</p>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.core.utils.git.GitRepo.__init__","title":"<code>__init__(path, url, clone_initially=True)</code>","text":"<p>Ensure that we have a clone of the given remote Git repository URL at the given local directory path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>path to git repo</p> required <code>url</code> <code>str</code> <p>git repo url</p> required <code>clone_initially</code> <code>bool</code> <p>True if the repo needs to be cloned</p> <code>True</code> Source code in <code>nautobot/core/utils/git.py</code> <pre><code>def __init__(self, path, url, clone_initially=True):\n\"\"\"\n    Ensure that we have a clone of the given remote Git repository URL at the given local directory path.\n    Args:\n        path (str): path to git repo\n        url (str): git repo url\n        clone_initially (bool): True if the repo needs to be cloned\n    \"\"\"\nif os.path.isdir(path) and os.path.isdir(os.path.join(path, \".git\")):\nself.repo = Repo(path=path)\nelif clone_initially:\n# Don't log `url` as it may include authentication details.\nlogger.debug(\"Cloning git repository to %s...\", path)\nself.repo = Repo.clone_from(url, to_path=path, env=GIT_ENVIRONMENT)\nelse:\nself.repo = Repo.init(path)\nself.repo.create_remote(\"origin\", url=url)\nif url not in self.repo.remotes.origin.urls:\nself.repo.remotes.origin.set_url(url)\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.core.utils.git.GitRepo.checkout","title":"<code>checkout(branch, commit_hexsha=None)</code>","text":"<p>Check out the given branch, and optionally the specified commit within that branch.</p> <p>Returns:</p> Type Description <code>(str, bool)</code> <p>commit_hexsha the repo contains now, whether any change occurred</p> Source code in <code>nautobot/core/utils/git.py</code> <pre><code>def checkout(self, branch, commit_hexsha=None):\n\"\"\"\n    Check out the given branch, and optionally the specified commit within that branch.\n    Returns:\n        (str, bool): commit_hexsha the repo contains now, whether any change occurred\n    \"\"\"\n# Short-circuit logic - do we already have this commit checked out?\nif commit_hexsha and commit_hexsha == self.head:\nlogger.debug(f\"Commit {commit_hexsha} is already checked out.\")\nreturn (commit_hexsha, False)\nself.fetch()\nif commit_hexsha:\n# Sanity check - GitPython doesn't provide a handy API for this so we just call a raw Git command:\n# $ git branch origin/&lt;branch&gt; --remotes --contains &lt;commit&gt;\n# prints the branch name if it DOES contain the commit, and nothing if it DOES NOT contain the commit.\n# Since we did a `fetch` and not a `pull` above, we need to check for the commit in the remote origin\n# branch, not the local (not-yet-updated) branch.\nif branch not in self.repo.git.branch(f\"origin/{branch}\", \"--remotes\", \"--contains\", commit_hexsha):\nraise RuntimeError(f\"Requested to check out commit `{commit_hexsha}`, but it's not in branch {branch}!\")\nlogger.info(f\"Checking out commit `{commit_hexsha}` on branch `{branch}`...\")\nself.repo.git.checkout(commit_hexsha)\nreturn (commit_hexsha, True)\nif branch in self.repo.heads:\nbranch_head = self.repo.heads[branch]\nelse:\ntry:\nbranch_head = self.repo.create_head(branch, self.repo.remotes.origin.refs[branch])\nbranch_head.set_tracking_branch(self.repo.remotes.origin.refs[branch])\nexcept IndexError as git_error:\nlogger.error(\n\"Branch %s does not exist at %s. %s\", branch, list(self.repo.remotes.origin.urls)[0], git_error\n)\nraise BranchDoesNotExist(\nf\"Please create branch '{branch}' in upstream and try again.\"\nf\" If this is a new repo, please add a commit before syncing. {git_error}\"\n)\nlogger.info(f\"Checking out latest commit on branch `{branch}`...\")\nbranch_head.checkout()\n# No specific commit hash was given, so make sure we get the latest from origin\n# We would use repo.remotes.origin.pull() here, but that will fail in the case where someone has\n# force-pushed to the upstream repo since the last time we did a pull. To be safe, we reset instead.\nself.repo.head.reset(f\"origin/{branch}\", index=True, working_tree=True)\ncommit_hexsha = self.repo.head.reference.commit.hexsha\nlogger.info(f\"Latest commit on branch `{branch}` is `{commit_hexsha}`\")\nreturn (commit_hexsha, True)\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.RoleModelsQuery","title":"<code>nautobot.apps.utils.RoleModelsQuery</code>","text":"<p>             Bases: <code>FeaturedQueryMixin</code></p> <p>Helper class to get ContentType models that implements role.</p> Source code in <code>nautobot/extras/utils.py</code> <pre><code>@deconstructible\nclass RoleModelsQuery(FeaturedQueryMixin):\n\"\"\"\n    Helper class to get ContentType models that implements role.\n    \"\"\"\ndef list_subclasses(self):\n\"\"\"\n        Return a list of classes that implements roles e.g roles = ...\n        \"\"\"\n# Avoid circular imports\nfrom nautobot.extras.models.roles import RoleField\nmodel_classes = []\nfor model_class in apps.get_models():\nif hasattr(model_class, \"role\") and isinstance(model_class._meta.get_field(\"role\"), RoleField):\nmodel_classes.append(model_class)\nreturn model_classes\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.extras.utils.RoleModelsQuery.list_subclasses","title":"<code>list_subclasses()</code>","text":"<p>Return a list of classes that implements roles e.g roles = ...</p> Source code in <code>nautobot/extras/utils.py</code> <pre><code>def list_subclasses(self):\n\"\"\"\n    Return a list of classes that implements roles e.g roles = ...\n    \"\"\"\n# Avoid circular imports\nfrom nautobot.extras.models.roles import RoleField\nmodel_classes = []\nfor model_class in apps.get_models():\nif hasattr(model_class, \"role\") and isinstance(model_class._meta.get_field(\"role\"), RoleField):\nmodel_classes.append(model_class)\nreturn model_classes\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.TaggableClassesQuery","title":"<code>nautobot.apps.utils.TaggableClassesQuery</code>","text":"<p>             Bases: <code>FeaturedQueryMixin</code></p> <p>Helper class to get ContentType models that implements tags(TagsField)</p> Source code in <code>nautobot/extras/utils.py</code> <pre><code>@deconstructible\nclass TaggableClassesQuery(FeaturedQueryMixin):\n\"\"\"\n    Helper class to get ContentType models that implements tags(TagsField)\n    \"\"\"\ndef list_subclasses(self):\n\"\"\"\n        Return a list of classes that has implements tags e.g tags = TagsField(...)\n        \"\"\"\nreturn [\n_class\nfor _class in apps.get_models()\nif (\nhasattr(_class, \"tags\")\nand isinstance(_class.tags, TagsManager)\nand \".tests.\" not in _class.__module__  # avoid leakage from nautobot.core.tests.test_filters\n)\n]\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.extras.utils.TaggableClassesQuery.list_subclasses","title":"<code>list_subclasses()</code>","text":"<p>Return a list of classes that has implements tags e.g tags = TagsField(...)</p> Source code in <code>nautobot/extras/utils.py</code> <pre><code>def list_subclasses(self):\n\"\"\"\n    Return a list of classes that has implements tags e.g tags = TagsField(...)\n    \"\"\"\nreturn [\n_class\nfor _class in apps.get_models()\nif (\nhasattr(_class, \"tags\")\nand isinstance(_class.tags, TagsManager)\nand \".tests.\" not in _class.__module__  # avoid leakage from nautobot.core.tests.test_filters\n)\n]\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.build_lookup_label","title":"<code>nautobot.apps.utils.build_lookup_label(field_name, _verbose_name)</code>","text":"<p>Return lookup expr with its verbose name</p> <p>Parameters:</p> Name Type Description Default <code>field_name</code> <code>str</code> <p>Field name e.g name__iew</p> required <code>_verbose_name</code> <code>str</code> <p>The verbose name for the lookup expr which is suffixed to the field name e.g iew -&gt; iendswith</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; build_lookup_label(\"name__iew\", \"iendswith\")\n&gt;&gt;&gt; \"ends-with (iew)\"\n</code></pre> Source code in <code>nautobot/core/utils/filtering.py</code> <pre><code>def build_lookup_label(field_name, _verbose_name):\n\"\"\"\n    Return lookup expr with its verbose name\n    Args:\n        field_name (str): Field name e.g name__iew\n        _verbose_name (str): The verbose name for the lookup expr which is suffixed to the field name e.g iew -&gt; iendswith\n    Examples:\n        &gt;&gt;&gt; build_lookup_label(\"name__iew\", \"iendswith\")\n        &gt;&gt;&gt; \"ends-with (iew)\"\n    \"\"\"\nverbose_name = verbose_lookup_expr(_verbose_name) or \"exact\"\nlabel = \"\"\nsearch = CONTAINS_LOOKUP_EXPR_RE.search(field_name)\nif search:\nlabel = f\" ({search.group()})\"\nverbose_name = \"not \" + verbose_name if label.startswith(\" (n\") else verbose_name\nreturn verbose_name + label\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.check_if_key_is_graphql_safe","title":"<code>nautobot.apps.utils.check_if_key_is_graphql_safe(model_name, key, field_name='key')</code>","text":"<p>Helper method to check if a key field is Python/GraphQL safe. Used in CustomField, ComputedField and Relationship models.</p> Source code in <code>nautobot/extras/utils.py</code> <pre><code>def check_if_key_is_graphql_safe(model_name, key, field_name=\"key\"):\n\"\"\"\n    Helper method to check if a key field is Python/GraphQL safe.\n    Used in CustomField, ComputedField and Relationship models.\n    \"\"\"\ngraphql_safe_pattern = re.compile(\"[_A-Za-z][_0-9A-Za-z]*\")\nif not graphql_safe_pattern.fullmatch(key):\nraise ValidationError(\n{\nf\"{field_name}\": f\"This {field_name} is not Python/GraphQL safe. Please do not start the {field_name} with a digit and do not use hyphens or whitespace\"\n}\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.class_deprecated","title":"<code>nautobot.apps.utils.class_deprecated(message)</code>","text":"<p>Decorator to mark a class as deprecated with a custom message about what to do instead of subclassing it.</p> Source code in <code>nautobot/core/utils/deprecation.py</code> <pre><code>def class_deprecated(message):\n\"\"\"Decorator to mark a class as deprecated with a custom message about what to do instead of subclassing it.\"\"\"\ndef decorate(cls):\ndef init_subclass(new_subclass):\n# Walk the stack up to the class declaration in question.\nstacklevel = 0\nfor fs in reversed(traceback.extract_stack()):\nstacklevel += 1\nif new_subclass.__name__ in fs.line:\nbreak\nelse:\nstacklevel = 1\nwarnings.warn(\nf\"Class {cls.__name__} is deprecated, and will be removed in a future Nautobot release. \"\nf\"Instead of deriving {new_subclass.__name__} from {cls.__name__}, {message}.\",\nDeprecationWarning,\nstacklevel=stacklevel,\n)\nif LOG_DEPRECATION_WARNINGS:\n# Since DeprecationWarnings are silenced by default, also log a traditional warning.\nlogger.warning(\nf\"Class {cls.__name__} is deprecated, and will be removed in a future Nautobot release. \"\nf\"Instead of deriving {new_subclass.__name__} from {cls.__name__}, {message}.\",\nstacklevel=stacklevel,\n)\ncls.__init_subclass__ = classmethod(init_subclass)\nreturn cls\nreturn decorate\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.class_deprecated_in_favor_of","title":"<code>nautobot.apps.utils.class_deprecated_in_favor_of(replacement_class)</code>","text":"<p>Decorator to mark a class as deprecated and suggest a replacement class if it is subclassed from.</p> Source code in <code>nautobot/core/utils/deprecation.py</code> <pre><code>def class_deprecated_in_favor_of(replacement_class):\n\"\"\"Decorator to mark a class as deprecated and suggest a replacement class if it is subclassed from.\"\"\"\nreturn class_deprecated(f\"please migrate your code to inherit from class {replacement_class.__name__} instead\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.convert_git_diff_log_to_list","title":"<code>nautobot.apps.utils.convert_git_diff_log_to_list(logs)</code>","text":"<pre><code>Convert Git diff log into a list splitted by \\n\n\nExample:\n    &gt;&gt;&gt; git_log = \"M        index.html\n</code></pre> <p>R       sample.txt\"         &gt;&gt;&gt; print(convert_git_diff_log_to_list(git_log))         [\"Modification - index.html\", \"Renaming - sample.txt\"]</p> Source code in <code>nautobot/core/utils/git.py</code> <pre><code>def convert_git_diff_log_to_list(logs):\n\"\"\"\n    Convert Git diff log into a list splitted by \\\\n\n    Example:\n        &gt;&gt;&gt; git_log = \"M\\tindex.html\\nR\\tsample.txt\"\n        &gt;&gt;&gt; print(convert_git_diff_log_to_list(git_log))\n        [\"Modification - index.html\", \"Renaming - sample.txt\"]\n    \"\"\"\nlogs = logs.split(\"\\n\")\nreturn [swap_status_initials(line) for line in logs]\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.convert_querydict_to_factory_formset_acceptable_querydict","title":"<code>nautobot.apps.utils.convert_querydict_to_factory_formset_acceptable_querydict(request_querydict, filterset)</code>","text":"<p>Convert request QueryDict/GET into an acceptable factory formset QueryDict while discarding <code>querydict</code> params which are not part of <code>filterset_class</code> params</p> <p>Parameters:</p> Name Type Description Default <code>request_querydict</code> <code>QueryDict</code> <p>QueryDict to convert</p> required <code>filterset</code> <code>FilterSet</code> <p>Filterset class</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; convert_querydict_to_factory_formset_acceptable_querydict({\"status\": [\"active\", \"decommissioning\"], \"name__ic\": [\"location\"]},)\n&gt;&gt;&gt; {\n...     'form-TOTAL_FORMS': [3],\n...     'form-INITIAL_FORMS': ['0'],\n...     'form-MIN_NUM_FORMS': [''],\n...     'form-MAX_NUM_FORMS': [''],\n...     'form-0-lookup_field': ['status'],\n...     'form-0-lookup_type': ['status'],\n...     'form-0-value': ['active', 'decommissioning'],\n...     'form-1-lookup_field': ['name'],\n...     'form-1-lookup_type': ['name__ic'],\n...     'form-1-value': ['location']\n... }\n</code></pre> Source code in <code>nautobot/core/utils/requests.py</code> <pre><code>def convert_querydict_to_factory_formset_acceptable_querydict(request_querydict, filterset):\n\"\"\"\n    Convert request QueryDict/GET into an acceptable factory formset QueryDict\n    while discarding `querydict` params which are not part of `filterset_class` params\n    Args:\n        request_querydict (QueryDict): QueryDict to convert\n        filterset (FilterSet): Filterset class\n    Examples:\n        &gt;&gt;&gt; convert_querydict_to_factory_formset_acceptable_querydict({\"status\": [\"active\", \"decommissioning\"], \"name__ic\": [\"location\"]},)\n        &gt;&gt;&gt; {\n        ...     'form-TOTAL_FORMS': [3],\n        ...     'form-INITIAL_FORMS': ['0'],\n        ...     'form-MIN_NUM_FORMS': [''],\n        ...     'form-MAX_NUM_FORMS': [''],\n        ...     'form-0-lookup_field': ['status'],\n        ...     'form-0-lookup_type': ['status'],\n        ...     'form-0-value': ['active', 'decommissioning'],\n        ...     'form-1-lookup_field': ['name'],\n        ...     'form-1-lookup_type': ['name__ic'],\n        ...     'form-1-value': ['location']\n        ... }\n    \"\"\"\nquery_dict = QueryDict(mutable=True)\nfilterset_class_fields = filterset.filters.keys()\nquery_dict.setdefault(\"form-INITIAL_FORMS\", 0)\nquery_dict.setdefault(\"form-MIN_NUM_FORMS\", 0)\nquery_dict.setdefault(\"form-MAX_NUM_FORMS\", 100)\nlookup_field_placeholder = \"form-%d-lookup_field\"\nlookup_type_placeholder = \"form-%d-lookup_type\"\nlookup_value_placeholder = \"form-%d-lookup_value\"\nnum = 0\nrequest_querydict = request_querydict.copy()\nrequest_querydict.pop(\"q\", None)\nfor filter_field_name, value in request_querydict.items():\n# Discard fields without values\nif value:\nif filter_field_name in filterset_class_fields:\nif hasattr(filterset.filters[filter_field_name], \"relationship\"):\nlookup_field = filter_field_name\nelse:\n# convert_querydict_to_factory_formset_acceptable_querydict expects to have a QueryDict as input\n# which means we may not have the exact field name as defined in the filterset class\n# it may contain a lookup expression (e.g. `name__ic`), so we need to strip it\n# this is so we can select the correct field in the formset for the \"field\" column\n# TODO: Since we likely need to instantiate the filterset class early in the request anyway\n# the filterset can handle the QueryDict conversion and we can just pass the QueryDict to the filterset\n# then use the FilterSet to de-dupe the field names\nlookup_field = re.sub(r\"__\\w+\", \"\", filter_field_name)\nlookup_value = request_querydict.getlist(filter_field_name)\nquery_dict.setlistdefault(lookup_field_placeholder % num, [lookup_field])\nquery_dict.setlistdefault(lookup_type_placeholder % num, [filter_field_name])\nquery_dict.setlistdefault(lookup_value_placeholder % num, lookup_value)\nnum += 1\nquery_dict.setdefault(\"form-TOTAL_FORMS\", max(num, 3))\nreturn query_dict\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.custom_validator_clean","title":"<code>nautobot.apps.utils.custom_validator_clean(model_clean_func)</code>","text":"<p>Decorator that wraps a models existing clean method to also execute registered plugin custom validators</p> <p>:param model_clean_func: The original model clean method which is to be wrapped</p> Source code in <code>nautobot/extras/plugins/validators.py</code> <pre><code>def custom_validator_clean(model_clean_func):\n\"\"\"\n    Decorator that wraps a models existing clean method to also execute registered plugin custom validators\n    :param model_clean_func: The original model clean method which is to be wrapped\n    \"\"\"\n@wraps(model_clean_func)\ndef wrapper(model_instance):\n# Run original model clean method\nmodel_clean_func(model_instance)\n# Run registered plugin custom validators\nmodel_name = model_instance._meta.label_lower\n# Note this registry holds instances of PluginCustomValidator registered from plugins\n# which is different than the `custom_validators` model features registry\ncustom_validators = registry[\"plugin_custom_validators\"].get(model_name, [])\nfor custom_validator in custom_validators:\n# If the class has not overridden the specified method, we can skip it (because we know it\n# will raise NotImplementedError).\nif getattr(custom_validator, \"clean\") == getattr(CustomValidator, \"clean\"):\ncontinue\ncustom_validator(model_instance).clean()\nreturn wrapper\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.deepmerge","title":"<code>nautobot.apps.utils.deepmerge(original, new)</code>","text":"<p>Deep merge two dictionaries (new into original) and return a new dict</p> Source code in <code>nautobot/core/utils/data.py</code> <pre><code>def deepmerge(original, new):\n\"\"\"\n    Deep merge two dictionaries (new into original) and return a new dict\n    \"\"\"\nmerged = OrderedDict(original)\nfor key, val in new.items():\nif key in original and isinstance(original[key], dict) and isinstance(val, dict):\nmerged[key] = deepmerge(original[key], val)\nelse:\nmerged[key] = val\nreturn merged\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.ensure_content_type_and_field_name_in_query_params","title":"<code>nautobot.apps.utils.ensure_content_type_and_field_name_in_query_params(query_params)</code>","text":"<p>Ensure <code>query_params</code> includes <code>content_type</code> and <code>field_name</code> and <code>content_type</code> is a valid ContentType.</p> <p>Return the 'ContentTypes' model and 'field_name' if validation was successful.</p> Source code in <code>nautobot/core/utils/requests.py</code> <pre><code>def ensure_content_type_and_field_name_in_query_params(query_params):\n\"\"\"Ensure `query_params` includes `content_type` and `field_name` and `content_type` is a valid ContentType.\n    Return the 'ContentTypes' model and 'field_name' if validation was successful.\n    \"\"\"\nif \"content_type\" not in query_params or \"field_name\" not in query_params:\nraise ValidationError(\"content_type and field_name are required parameters\", code=400)\ncontenttype = query_params.get(\"content_type\")\napp_label, model_name = contenttype.split(\".\")\ntry:\nmodel_contenttype = ContentType.objects.get(app_label=app_label, model=model_name)\nmodel = model_contenttype.model_class()\nif model is None:\nraise ValidationError(f\"model for content_type: &lt;{model_contenttype}&gt; not found\", code=500)\nexcept ContentType.DoesNotExist:\nraise ValidationError(\"content_type not found\", code=404)\nfield_name = query_params.get(\"field_name\")\nreturn field_name, model\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.fixup_null_statuses","title":"<code>nautobot.apps.utils.fixup_null_statuses(*, model, model_contenttype, status_model)</code>","text":"<p>For instances of model that have an invalid NULL status field, create and use a special status_model instance.</p> Source code in <code>nautobot/extras/utils.py</code> <pre><code>def fixup_null_statuses(*, model, model_contenttype, status_model):\n\"\"\"For instances of model that have an invalid NULL status field, create and use a special status_model instance.\"\"\"\ninstances_to_fixup = model.objects.filter(status__isnull=True)\nif instances_to_fixup.exists():\nnull_status, _ = status_model.objects.get_or_create(\nname=\"NULL\",\ndefaults={\n\"color\": ColorChoices.COLOR_BLACK,\n\"description\": \"Created by Nautobot to replace invalid null references\",\n},\n)\nnull_status.content_types.add(model_contenttype)\nupdated_count = instances_to_fixup.update(status=null_status)\nprint(f\"    Found and fixed {updated_count} instances of {model.__name__} that had null 'status' fields.\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.flatten_dict","title":"<code>nautobot.apps.utils.flatten_dict(d, prefix='', separator='.')</code>","text":"<p>Flatten nested dictionaries into a single level by joining key names with a separator.</p> <p>:param d: The dictionary to be flattened :param prefix: Initial prefix (if any) :param separator: The character to use when concatenating key names</p> Source code in <code>nautobot/core/utils/data.py</code> <pre><code>def flatten_dict(d, prefix=\"\", separator=\".\"):\n\"\"\"\n    Flatten nested dictionaries into a single level by joining key names with a separator.\n    :param d: The dictionary to be flattened\n    :param prefix: Initial prefix (if any)\n    :param separator: The character to use when concatenating key names\n    \"\"\"\nret = {}\nfor k, v in d.items():\nkey = separator.join([prefix, k]) if prefix else k\nif isinstance(v, dict):\nret.update(flatten_dict(v, prefix=key))\nelse:\nret[key] = v\nreturn ret\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.flatten_iterable","title":"<code>nautobot.apps.utils.flatten_iterable(iterable)</code>","text":"<p>Flatten a nested iterable such as a list of lists, keeping strings intact.</p> <p>:param iterable: The iterable to be flattened :returns: generator</p> Source code in <code>nautobot/core/utils/data.py</code> <pre><code>def flatten_iterable(iterable):\n\"\"\"\n    Flatten a nested iterable such as a list of lists, keeping strings intact.\n    :param iterable: The iterable to be flattened\n    :returns: generator\n    \"\"\"\nfor i in iterable:\nif hasattr(i, \"__iter__\") and not isinstance(i, str):\nfor j in flatten_iterable(i):\nyield j\nelse:\nyield i\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.foreground_color","title":"<code>nautobot.apps.utils.foreground_color(bg_color)</code>","text":"<p>Return the ideal foreground color (black or white) for a given background color in hexadecimal RGB format.</p> Source code in <code>nautobot/core/utils/color.py</code> <pre><code>def foreground_color(bg_color):\n\"\"\"\n    Return the ideal foreground color (black or white) for a given background color in hexadecimal RGB format.\n    \"\"\"\nbg_color = bg_color.strip(\"#\")\nr, g, b = hex_to_rgb(bg_color)\nif r * 0.299 + g * 0.587 + b * 0.114 &gt; 186:\nreturn \"000000\"\nelse:\nreturn \"ffffff\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.generate_signature","title":"<code>nautobot.apps.utils.generate_signature(request_body, secret)</code>","text":"<p>Return a cryptographic signature that can be used to verify the authenticity of webhook data.</p> Source code in <code>nautobot/extras/utils.py</code> <pre><code>def generate_signature(request_body, secret):\n\"\"\"\n    Return a cryptographic signature that can be used to verify the authenticity of webhook data.\n    \"\"\"\nhmac_prep = hmac.new(key=secret.encode(\"utf8\"), msg=request_body, digestmod=hashlib.sha512)\nreturn hmac_prep.hexdigest()\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.get_all_lookup_expr_for_field","title":"<code>nautobot.apps.utils.get_all_lookup_expr_for_field(model, field_name)</code>","text":"<p>Return all lookup expressions for <code>field_name</code> in <code>model</code> filterset</p> Source code in <code>nautobot/core/utils/filtering.py</code> <pre><code>def get_all_lookup_expr_for_field(model, field_name):\n\"\"\"\n    Return all lookup expressions for `field_name` in `model` filterset\n    \"\"\"\nfilterset = get_filterset_for_model(model)().filters\nif not filterset.get(field_name):\nraise exceptions.FilterSetFieldNotFound(\"field_name not found\")\nif field_name.startswith(\"has_\"):\nreturn [{\"id\": field_name, \"name\": \"exact\"}]\nlookup_expr_choices = []\nfor name, field in filterset.items():\n# remove the lookup_expr from field_name e.g name__iew -&gt; name\nif re.sub(r\"__\\w+\", \"\", name) == field_name and not name.startswith(\"has_\"):\nlookup_expr_choices.append(\n{\n\"id\": name,\n\"name\": build_lookup_label(name, field.lookup_expr),\n}\n)\nelif name == field_name and not name.startswith(\"has_\"):\nlookup_expr_choices.append(\n{\n\"id\": name,\n\"name\": \"exact\",\n}\n)\nreturn lookup_expr_choices\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.get_base_template","title":"<code>nautobot.apps.utils.get_base_template(base_template, model)</code>","text":"<p>Returns the name of the base template, if the base_template is not None Otherwise, default to using \"/.html\" as the base template, if it exists. Otherwise, check if \"/_retrieve.html\" used in <code>NautobotUIViewSet</code> exists. If both templates do not exist, fall back to \"base.html\". Source code in <code>nautobot/extras/utils.py</code> <pre><code>def get_base_template(base_template, model):\n\"\"\"\n    Returns the name of the base template, if the base_template is not None\n    Otherwise, default to using \"&lt;app&gt;/&lt;model&gt;.html\" as the base template, if it exists.\n    Otherwise, check if \"&lt;app&gt;/&lt;model&gt;_retrieve.html\" used in `NautobotUIViewSet` exists.\n    If both templates do not exist, fall back to \"base.html\".\n    \"\"\"\nif base_template is None:\nbase_template = f\"{model._meta.app_label}/{model._meta.model_name}.html\"\n# 2.0 TODO(Hanlin): This can be removed once an object view has been established for every model.\ntry:\nget_template(base_template)\nexcept TemplateDoesNotExist:\nbase_template = f\"{model._meta.app_label}/{model._meta.model_name}_retrieve.html\"\ntry:\nget_template(base_template)\nexcept TemplateDoesNotExist:\nbase_template = \"base.html\"\nreturn base_template\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.get_celery_queues","title":"<code>nautobot.apps.utils.get_celery_queues()</code>","text":"<p>Return a dictionary of celery queues and the number of workers active on the queue in the form {queue_name: num_workers}</p> Source code in <code>nautobot/extras/utils.py</code> <pre><code>def get_celery_queues():\n\"\"\"\n    Return a dictionary of celery queues and the number of workers active on the queue in\n    the form {queue_name: num_workers}\n    \"\"\"\nfrom nautobot.core.celery import app  # prevent circular import\ncelery_queues = {}\ncelery_inspect = app.control.inspect()\nactive_queues = celery_inspect.active_queues()\nif active_queues is None:\nreturn celery_queues\nfor task_queue_list in active_queues.values():\ndistinct_queues = {q[\"name\"] for q in task_queue_list}\nfor queue in distinct_queues:\ncelery_queues.setdefault(queue, 0)\ncelery_queues[queue] += 1\nreturn celery_queues\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.get_changes_for_model","title":"<code>nautobot.apps.utils.get_changes_for_model(model)</code>","text":"<p>Return a queryset of ObjectChanges for a model or instance. The queryset will be filtered by the model class. If an instance is provided, the queryset will also be filtered by the instance id.</p> Source code in <code>nautobot/core/utils/lookup.py</code> <pre><code>def get_changes_for_model(model):\n\"\"\"\n    Return a queryset of ObjectChanges for a model or instance. The queryset will be filtered\n    by the model class. If an instance is provided, the queryset will also be filtered by the instance id.\n    \"\"\"\nfrom nautobot.extras.models import ObjectChange  # prevent circular import\nif isinstance(model, Model):\nreturn ObjectChange.objects.filter(\nchanged_object_type=ContentType.objects.get_for_model(model._meta.model),\nchanged_object_id=model.pk,\n)\nif issubclass(model, Model):\nreturn ObjectChange.objects.filter(changed_object_type=ContentType.objects.get_for_model(model._meta.model))\nraise TypeError(f\"{model!r} is not a Django Model class or instance\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.get_filter_field_label","title":"<code>nautobot.apps.utils.get_filter_field_label(filter_field)</code>","text":"<p>Return a label for a given field name and value.</p> <p>Parameters:</p> Name Type Description Default <code>filter_field</code> <code>Filter</code> <p>The filter to get a label for</p> required <p>Returns:</p> Type Description <code>str</code> <p>The label for the given field</p> Source code in <code>nautobot/core/utils/filtering.py</code> <pre><code>def get_filter_field_label(filter_field):\n\"\"\"\n    Return a label for a given field name and value.\n    Args:\n        filter_field (Filter): The filter to get a label for\n    Returns:\n        (str): The label for the given field\n    \"\"\"\nif filter_field.label:\nreturn filter_field.label\nelif hasattr(filter_field, \"relationship\"):\nreturn filter_field.relationship.get_label(side=filter_field.side)\nelif hasattr(filter_field, \"custom_field\"):\nreturn filter_field.custom_field.label\nelse:\nreturn _field_name_to_display(filter_field.field_name)\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.get_filterable_params_from_filter_params","title":"<code>nautobot.apps.utils.get_filterable_params_from_filter_params(filter_params, non_filter_params, filterset)</code>","text":"<p>Remove any <code>non_filter_params</code> and fields that are not a part of the filterset from  <code>filter_params</code> to return only queryset filterable parameters.</p> <p>Parameters:</p> Name Type Description Default <code>filter_params</code> <code>QueryDict</code> <p>Filter param querydict</p> required <code>non_filter_params</code> <code>list</code> <p>Non queryset filterable params</p> required <code>filterset</code> <code>FilterSet</code> <p>The FilterSet class</p> required <p>Returns:</p> Type Description <code>QueryDict</code> <p>Filter param querydict with only queryset filterable params</p> Source code in <code>nautobot/core/utils/requests.py</code> <pre><code>def get_filterable_params_from_filter_params(filter_params, non_filter_params, filterset):\n\"\"\"\n    Remove any `non_filter_params` and fields that are not a part of the filterset from  `filter_params`\n    to return only queryset filterable parameters.\n    Args:\n        filter_params (QueryDict): Filter param querydict\n        non_filter_params (list): Non queryset filterable params\n        filterset (FilterSet): The FilterSet class\n    Returns:\n        (QueryDict): Filter param querydict with only queryset filterable params\n    \"\"\"\nfor non_filter_param in non_filter_params:\nfilter_params.pop(non_filter_param, None)\n# Some FilterSet field only accept single choice not multiple choices\n# e.g datetime field, bool fields etc.\nfinal_filter_params = {}\nfor field in filter_params.keys():\nif filter_params.get(field):\n# `is_single_choice_field` implements `get_filterset_field`, which throws an exception if a field is not found.\n# If an exception is thrown, instead of throwing an exception, set `_is_single_choice_field` to 'False'\n# because the fields that were not discovered are still necessary.\ntry:\n_is_single_choice_field = is_single_choice_field(filterset, field)\nexcept exceptions.FilterSetFieldNotFound:\n_is_single_choice_field = False\nfinal_filter_params[field] = (\nfilter_params.get(field) if _is_single_choice_field else filter_params.getlist(field)\n)\nreturn final_filter_params\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.get_filterset_for_model","title":"<code>nautobot.apps.utils.get_filterset_for_model(model)</code>","text":"<p>Return the <code>FilterSet</code> class associated with a given <code>model</code>.</p> <p>The <code>FilterSet</code> class is expected to be in the <code>filters</code> module within the application associated with the model and its name is expected to be <code>{ModelName}FilterSet</code>.</p> <p>If a matching <code>FilterSet</code> is not found, this will return <code>None</code>.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>BaseModel</code> <p>A model class</p> required <p>Returns:</p> Type Description <code>Union[FilterSet, None]</code> <p>Either the <code>FilterSet</code> class or <code>None</code></p> Source code in <code>nautobot/core/utils/lookup.py</code> <pre><code>def get_filterset_for_model(model):\n\"\"\"Return the `FilterSet` class associated with a given `model`.\n    The `FilterSet` class is expected to be in the `filters` module within the application\n    associated with the model and its name is expected to be `{ModelName}FilterSet`.\n    If a matching `FilterSet` is not found, this will return `None`.\n    Args:\n        model (BaseModel): A model class\n    Returns:\n        (Union[FilterSet,None]): Either the `FilterSet` class or `None`\n    \"\"\"\nreturn get_related_class_for_model(model, module_name=\"filters\", object_suffix=\"FilterSet\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.get_filterset_parameter_form_field","title":"<code>nautobot.apps.utils.get_filterset_parameter_form_field(model, parameter, filterset=None)</code>","text":"<p>Return the relevant form field instance for a filterset parameter e.g DynamicModelMultipleChoiceField, forms.IntegerField e.t.c</p> Source code in <code>nautobot/core/utils/filtering.py</code> <pre><code>def get_filterset_parameter_form_field(model, parameter, filterset=None):\n\"\"\"\n    Return the relevant form field instance for a filterset parameter e.g DynamicModelMultipleChoiceField, forms.IntegerField e.t.c\n    \"\"\"\n# Avoid circular import\nfrom nautobot.dcim.models import Device\nfrom nautobot.extras.filters import ContentTypeMultipleChoiceFilter, CustomFieldFilterMixin, StatusFilter\nfrom nautobot.extras.models import ConfigContext, Role, Status, Tag\nfrom nautobot.extras.utils import ChangeLoggedModelsQuery, RoleModelsQuery, TaggableClassesQuery\nfrom nautobot.core.filters import MultiValueDecimalFilter, MultiValueFloatFilter\nfrom nautobot.core.forms import (\nBOOLEAN_CHOICES,\nDynamicModelMultipleChoiceField,\nMultipleContentTypeField,\nStaticSelect2,\nStaticSelect2Multiple,\n)\nfrom nautobot.virtualization.models import VirtualMachine\nif filterset is None or filterset.Meta.model != model:\nfilterset = get_filterset_for_model(model)()\nfield = get_filterset_field(filterset, parameter)\nform_field = field.field\n# TODO(Culver): We are having to replace some widgets here because multivalue_field_factory that generates these isn't smart enough\nif isinstance(field, CustomFieldFilterMixin):\nform_field = field.custom_field.to_filter_form_field(lookup_expr=field.lookup_expr)\nelif isinstance(field, (MultiValueDecimalFilter, MultiValueFloatFilter)):\nform_field = forms.DecimalField()\nelif isinstance(field, NumberFilter):\nform_field = forms.IntegerField()\nelif isinstance(field, ModelMultipleChoiceFilter):\nrelated_model = Status if isinstance(field, StatusFilter) else field.extra[\"queryset\"].model\nform_attr = {\n\"queryset\": related_model.objects.all(),\n\"to_field_name\": field.extra.get(\"to_field_name\", \"id\"),\n}\n# ConfigContext requires content_type set to Device and VirtualMachine\nif model == ConfigContext:\nform_attr[\"query_params\"] = {\"content_types\": [Device._meta.label_lower, VirtualMachine._meta.label_lower]}\n# Status and Tag api requires content_type, to limit result to only related content_types\nelif related_model in [Role, Status, Tag]:\nform_attr[\"query_params\"] = {\"content_types\": model._meta.label_lower}\nform_field = DynamicModelMultipleChoiceField(**form_attr)\nelif isinstance(\nfield, ContentTypeMultipleChoiceFilter\n):  # While there are other objects using `ContentTypeMultipleChoiceFilter`, the case where\n# models that have such a filter and the `verbose_name_plural` has multiple words is ony one: \"dynamic groups\".\nfrom nautobot.core.models.fields import slugify_dashes_to_underscores  # Avoid circular import\nplural_name = slugify_dashes_to_underscores(model._meta.verbose_name_plural)\n# Cable-connectable models use \"cable_terminations\", not \"cables\", as the feature name\nif plural_name == \"cables\":\nplural_name == \"cable_terminations\"\ntry:\nform_field = MultipleContentTypeField(choices_as_strings=True, feature=plural_name)\nexcept KeyError:\n# `MultipleContentTypeField` employs `registry[\"model features\"][feature]`, which may\n# result in an error if `feature` is not found in the `registry[\"model features\"]` dict.\n# In this case use queryset\nqueryset_map = {\n\"tags\": TaggableClassesQuery,\n\"job_hooks\": ChangeLoggedModelsQuery,\n\"roles\": RoleModelsQuery,\n}\nform_field = MultipleContentTypeField(\nchoices_as_strings=True, queryset=queryset_map[plural_name]().as_queryset()\n)\nelif isinstance(field, (MultipleChoiceFilter, ChoiceFilter)) and \"choices\" in field.extra:\nform_field = forms.MultipleChoiceField(choices=field.extra.get(\"choices\"), widget=StaticSelect2Multiple)\nelif isinstance(field, BooleanFilter):\nform_field = forms.ChoiceField(choices=BOOLEAN_CHOICES, widget=StaticSelect2)\nform_field.required = False\nform_field.initial = None\nform_field.widget.attrs.pop(\"required\", None)\ncss_classes = form_field.widget.attrs.get(\"class\", \"\")\nform_field.widget.attrs[\"class\"] = \"form-control \" + css_classes\nreturn form_field\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.get_form_for_model","title":"<code>nautobot.apps.utils.get_form_for_model(model, form_prefix='')</code>","text":"<p>Return the <code>Form</code> class associated with a given <code>model</code>.</p> <p>The <code>Form</code> class is expected to be in the <code>forms</code> module within the application associated with the model and its name is expected to be <code>{ModelName}{form_prefix}Form</code>.</p> <p>If a matching <code>Form</code> is not found, this will return <code>None</code>.</p> <p>Parameters:</p> Name Type Description Default <code>form_prefix</code> <code>str</code> <p>An additional prefix for the form name (e.g. <code>Filter</code>, such as to retrieve <code>FooFilterForm</code>) that will come after the model name.</p> <code>''</code> <p>Returns:</p> Type Description <code>Union[Form, None]</code> <p>Either the <code>Form</code> class or <code>None</code></p> Source code in <code>nautobot/core/utils/lookup.py</code> <pre><code>def get_form_for_model(model, form_prefix=\"\"):\n\"\"\"Return the `Form` class associated with a given `model`.\n    The `Form` class is expected to be in the `forms` module within the application\n    associated with the model and its name is expected to be `{ModelName}{form_prefix}Form`.\n    If a matching `Form` is not found, this will return `None`.\n    Args:\n        form_prefix (str):\n            An additional prefix for the form name (e.g. `Filter`, such as to retrieve\n            `FooFilterForm`) that will come after the model name.\n    Returns:\n        (Union[Form, None]): Either the `Form` class or `None`\n    \"\"\"\nobject_suffix = f\"{form_prefix}Form\"\nreturn get_related_class_for_model(model, module_name=\"forms\", object_suffix=object_suffix)\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.get_latest_release","title":"<code>nautobot.apps.utils.get_latest_release(pre_releases=False)</code>","text":"<p>Get latest known Nautobot release from cache, or if not available, queue up a background task to populate the cache.</p> <p>Returns:</p> Type Description <code>(Version, str)</code> <p>Latest release version and the release URL, if found in the cache</p> <code>(unknown, None)</code> <p>If not present in the cache at this time</p> Source code in <code>nautobot/core/releases.py</code> <pre><code>def get_latest_release(pre_releases=False):\n\"\"\"\n    Get latest known Nautobot release from cache, or if not available, queue up a background task to populate the cache.\n    Returns:\n        (Version, str): Latest release version and the release URL, if found in the cache\n        (\"unknown\", None): If not present in the cache at this time\n    \"\"\"\nif get_settings_or_config(\"RELEASE_CHECK_URL\"):\nlogger.debug(\"Checking for most recent release\")\nlatest_release = cache.get(\"latest_release\")\nif latest_release is not None:\nlogger.debug(f\"Found cached release: {latest_release}\")\nreturn latest_release\n# Get the releases in the background worker, it will fill the cache\nlogger.info(\"Initiating background task to retrieve updated releases list\")\nget_releases.delay(pre_releases=pre_releases)\nelse:\nlogger.debug(\"Skipping release check; RELEASE_CHECK_URL not defined\")\nreturn \"unknown\", None\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.get_model_from_name","title":"<code>nautobot.apps.utils.get_model_from_name(model_name)</code>","text":"<p>Given a full model name in dotted format (example: <code>dcim.model</code>), a model class is returned if valid.</p> <p>:param model_name: Full dotted name for a model as a string (ex: <code>dcim.model</code>) :type model_name: str</p> <p>:raises TypeError: If given model name is not found.</p> <p>:return: Found model.</p> Source code in <code>nautobot/core/utils/lookup.py</code> <pre><code>def get_model_from_name(model_name):\n\"\"\"Given a full model name in dotted format (example: `dcim.model`), a model class is returned if valid.\n    :param model_name: Full dotted name for a model as a string (ex: `dcim.model`)\n    :type model_name: str\n    :raises TypeError: If given model name is not found.\n    :return: Found model.\n    \"\"\"\nfrom django.apps import apps\ntry:\nreturn apps.get_model(model_name)\nexcept (ValueError, LookupError) as exc:\nraise TypeError(exc) from exc\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.get_only_new_ui_ready_routes","title":"<code>nautobot.apps.utils.get_only_new_ui_ready_routes(patterns, prefix='')</code>","text":"<p>Recursively traverses Django URL patterns to find routes associated with view classes that have the <code>use_new_ui</code> attribute set to <code>True</code>.</p> <p>Parameters:</p> Name Type Description Default <code>patterns</code> <code>list</code> <p>List of URL patterns to traverse.</p> required <code>prefix</code> <code>str</code> <p>URL pattern prefix to include when constructing route patterns.</p> <code>''</code> <p>Returns:</p> Type Description <code>list</code> <p>A list of route patterns associated with view classes that use the new UI.</p> Source code in <code>nautobot/core/utils/navigation.py</code> <pre><code>def get_only_new_ui_ready_routes(patterns, prefix=\"\"):\n\"\"\"\n    Recursively traverses Django URL patterns to find routes associated with view classes\n    that have the `use_new_ui` attribute set to `True`.\n    Args:\n        patterns (list): List of URL patterns to traverse.\n        prefix (str): URL pattern prefix to include when constructing route patterns.\n    Returns:\n        (list): A list of route patterns associated with view classes that use the new UI.\n    \"\"\"\nnew_ui_routes = set()\nfor pattern in patterns:\nif hasattr(pattern, \"url_patterns\"):\nr_pattern = pattern.pattern.regex.pattern.lstrip(\"^\").rstrip(r\"\\Z\")\ncombined_pattern = prefix + r_pattern\nnew_ui_routes.update(get_only_new_ui_ready_routes(pattern.url_patterns, combined_pattern))\nelse:\nuse_new_ui = False\n# There are two types of generic view class ObjectView and NautobotUIViewSet which has different approach to validate if this route is a new_ui_ready route\nif hasattr(pattern.callback, \"view_class\"):\n# For ObjectView\nuse_new_ui = getattr(pattern.callback.view_class, \"use_new_ui\", False)\nelif hasattr(pattern.callback, \"cls\"):\n# For NautobotUIViewSet\nuse_new_ui_list = getattr(pattern.callback.cls, \"use_new_ui\", [])\n# Check if the current action is part of the allowed actions in this ViewSet class\nuse_new_ui = bool(set(use_new_ui_list) &amp; set(pattern.callback.actions.values()))\nif use_new_ui:\nr_pattern = pattern.pattern.regex.pattern.lstrip(\"^\")\nfinal_pattern = rf\"^{prefix}{r_pattern}\"\nnew_ui_routes.add(final_pattern)\nreturn new_ui_routes\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.get_permission_for_model","title":"<code>nautobot.apps.utils.get_permission_for_model(model, action)</code>","text":"<p>Resolve the named permission for a given model (or instance) and action (e.g. view or add).</p> <p>:param model: A model or instance :param action: View, add, change, or delete (string)</p> Source code in <code>nautobot/core/utils/permissions.py</code> <pre><code>def get_permission_for_model(model, action):\n\"\"\"\n    Resolve the named permission for a given model (or instance) and action (e.g. view or add).\n    :param model: A model or instance\n    :param action: View, add, change, or delete (string)\n    \"\"\"\nif action not in (\"view\", \"add\", \"change\", \"delete\"):\nraise ValueError(f\"Unsupported action: {action}\")\nreturn f\"{model._meta.app_label}.{action}_{model._meta.model_name}\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.get_related_class_for_model","title":"<code>nautobot.apps.utils.get_related_class_for_model(model, module_name, object_suffix)</code>","text":"<p>Return the appropriate class associated with a given model matching the <code>module_name</code> and <code>object_suffix</code>.</p> <p>The given <code>model</code> can either be a model class, a model instance, or a dotted representation (ex: <code>dcim.device</code>).</p> <p>The object class is expected to be in the module within the application associated with the model and its name is expected to be <code>{ModelName}{object_suffix}</code>.</p> <p>If a matching class is not found, this will return <code>None</code>.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>Union[BaseModel, str]</code> <p>A model class, instance, or dotted representation</p> required <code>module_name</code> <code>str</code> <p>The name of the module to search for the object class</p> required <code>object_suffix</code> <code>str</code> <p>The suffix to append to the model name to find the object class</p> required <p>Returns:</p> Type Description <code>Union[BaseModel, str]</code> <p>Either the matching object class or None</p> Source code in <code>nautobot/core/utils/lookup.py</code> <pre><code>def get_related_class_for_model(model, module_name, object_suffix):\n\"\"\"Return the appropriate class associated with a given model matching the `module_name` and\n    `object_suffix`.\n    The given `model` can either be a model class, a model instance, or a dotted representation (ex: `dcim.device`).\n    The object class is expected to be in the module within the application\n    associated with the model and its name is expected to be `{ModelName}{object_suffix}`.\n    If a matching class is not found, this will return `None`.\n    Args:\n        model (Union[BaseModel, str]): A model class, instance, or dotted representation\n        module_name (str): The name of the module to search for the object class\n        object_suffix (str): The suffix to append to the model name to find the object class\n    Returns:\n        (Union[BaseModel, str]): Either the matching object class or None\n    \"\"\"\nif isinstance(model, str):\nmodel = get_model_from_name(model)\nif isinstance(model, Model):\nmodel = type(model)\nif not inspect.isclass(model):\nraise TypeError(f\"{model!r} is not a Django Model class\")\nif not issubclass(model, Model):\nraise TypeError(f\"{model!r} is not a subclass of a Django Model class\")\n# e.g. \"nautobot.dcim.forms.DeviceFilterForm\"\napp_label = model._meta.app_label\nobject_name = f\"{model.__name__}{object_suffix}\"\nobject_path = f\"{app_label}.{module_name}.{object_name}\"\nif app_label not in settings.PLUGINS:\nobject_path = f\"nautobot.{object_path}\"\ntry:\nreturn import_string(object_path)\n# The name of the module is not correct or unable to find the desired object for this model\nexcept (AttributeError, ImportError, ModuleNotFoundError):\npass\nreturn None\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.get_route_for_model","title":"<code>nautobot.apps.utils.get_route_for_model(model, action, api=False)</code>","text":"<p>Return the URL route name for the given model and action. Does not perform any validation. Supports both core and plugin routes.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>(models.Model, str)</code> <p>Class, Instance, or dotted string of a Django Model</p> required <code>action</code> <code>str</code> <p>name of the action in the route</p> required <code>api</code> <code>bool</code> <p>If set, return an API route.</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>return the name of the view for the model/action provided.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_route_for_model(Device, \"list\")\n\"dcim:device_list\"\n&gt;&gt;&gt; get_route_for_model(Device, \"list\", api=True)\n\"dcim-api:device-list\"\n&gt;&gt;&gt; get_route_for_model(\"dcim.location\", \"list\")\n\"dcim:location_list\"\n&gt;&gt;&gt; get_route_for_model(\"dcim.location\", \"list\", api=True)\n\"dcim-api:location-list\"\n&gt;&gt;&gt; get_route_for_model(ExampleModel, \"list\")\n\"plugins:example_plugin:examplemodel_list\"\n&gt;&gt;&gt; get_route_for_model(ExampleModel, \"list\", api=True)\n\"plugins-api:example_plugin-api:examplemodel-list\"\n</code></pre> Source code in <code>nautobot/core/utils/lookup.py</code> <pre><code>def get_route_for_model(model, action, api=False):\n\"\"\"\n    Return the URL route name for the given model and action. Does not perform any validation.\n    Supports both core and plugin routes.\n    Args:\n        model (models.Model, str): Class, Instance, or dotted string of a Django Model\n        action (str): name of the action in the route\n        api (bool): If set, return an API route.\n    Returns:\n        (str): return the name of the view for the model/action provided.\n    Examples:\n        &gt;&gt;&gt; get_route_for_model(Device, \"list\")\n        \"dcim:device_list\"\n        &gt;&gt;&gt; get_route_for_model(Device, \"list\", api=True)\n        \"dcim-api:device-list\"\n        &gt;&gt;&gt; get_route_for_model(\"dcim.location\", \"list\")\n        \"dcim:location_list\"\n        &gt;&gt;&gt; get_route_for_model(\"dcim.location\", \"list\", api=True)\n        \"dcim-api:location-list\"\n        &gt;&gt;&gt; get_route_for_model(ExampleModel, \"list\")\n        \"plugins:example_plugin:examplemodel_list\"\n        &gt;&gt;&gt; get_route_for_model(ExampleModel, \"list\", api=True)\n        \"plugins-api:example_plugin-api:examplemodel-list\"\n    \"\"\"\nif isinstance(model, str):\nmodel = get_model_from_name(model)\nsuffix = \"\" if not api else \"-api\"\n# The `contenttypes` and `auth` app doesn't provide REST API endpoints,\n# but Nautobot provides one for the ContentType model in our `extras` and Group model in `users` app.\nif model is ContentType:\napp_label = \"extras\"\nelif model is Group:\napp_label = \"users\"\nelse:\napp_label = model._meta.app_label\nprefix = f\"{app_label}{suffix}:{model._meta.model_name}\"\nsep = \"\"\nif action != \"\":\nsep = \"_\" if not api else \"-\"\nviewname = f\"{prefix}{sep}{action}\"\nif model._meta.app_label in settings.PLUGINS:\nviewname = f\"plugins{suffix}:{viewname}\"\nreturn viewname\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.get_settings_or_config","title":"<code>nautobot.apps.utils.get_settings_or_config(variable_name)</code>","text":"<p>Get a value from Django settings (if specified there) or Constance configuration (otherwise).</p> Source code in <code>nautobot/core/utils/config.py</code> <pre><code>def get_settings_or_config(variable_name):\n\"\"\"Get a value from Django settings (if specified there) or Constance configuration (otherwise).\"\"\"\n# Explicitly set in settings.py or nautobot_config.py takes precedence, for now\nif hasattr(settings, variable_name):\nreturn getattr(settings, variable_name)\nreturn getattr(config, variable_name)\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.get_table_for_model","title":"<code>nautobot.apps.utils.get_table_for_model(model)</code>","text":"<p>Return the <code>Table</code> class associated with a given <code>model</code>.</p> <p>The <code>Table</code> class is expected to be in the <code>tables</code> module within the application associated with the model and its name is expected to be <code>{ModelName}Table</code>.</p> <p>If a matching <code>Table</code> is not found, this will return <code>None</code>.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>BaseModel</code> <p>A model class</p> required <p>Returns:</p> Type Description <code>Union[Table, None]</code> <p>Either the <code>Table</code> class or <code>None</code></p> Source code in <code>nautobot/core/utils/lookup.py</code> <pre><code>def get_table_for_model(model):\n\"\"\"Return the `Table` class associated with a given `model`.\n    The `Table` class is expected to be in the `tables` module within the application\n    associated with the model and its name is expected to be `{ModelName}Table`.\n    If a matching `Table` is not found, this will return `None`.\n    Args:\n        model (BaseModel): A model class\n    Returns:\n        (Union[Table, None]): Either the `Table` class or `None`\n    \"\"\"\nreturn get_related_class_for_model(model, module_name=\"tables\", object_suffix=\"Table\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.get_worker_count","title":"<code>nautobot.apps.utils.get_worker_count(request=None, queue=None)</code>","text":"<p>Return a count of the active Celery workers in a specified queue. Defaults to the <code>CELERY_TASK_DEFAULT_QUEUE</code> setting.</p> Source code in <code>nautobot/extras/utils.py</code> <pre><code>def get_worker_count(request=None, queue=None):\n\"\"\"\n    Return a count of the active Celery workers in a specified queue. Defaults to the `CELERY_TASK_DEFAULT_QUEUE` setting.\n    \"\"\"\ncelery_queues = get_celery_queues()\nif not queue:\nqueue = settings.CELERY_TASK_DEFAULT_QUEUE\nreturn celery_queues.get(queue, 0)\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.hex_to_rgb","title":"<code>nautobot.apps.utils.hex_to_rgb(hex_str)</code>","text":"<p>Map a hex string like \"00ff00\" to individual r, g, b integer values.</p> Source code in <code>nautobot/core/utils/color.py</code> <pre><code>def hex_to_rgb(hex_str):\n\"\"\"\n    Map a hex string like \"00ff00\" to individual r, g, b integer values.\n    \"\"\"\nreturn [int(hex_str[c : c + 2], 16) for c in (0, 2, 4)]  # noqa: E203\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.image_upload","title":"<code>nautobot.apps.utils.image_upload(instance, filename)</code>","text":"<p>Return a path for uploading image attachments.</p> Source code in <code>nautobot/extras/utils.py</code> <pre><code>def image_upload(instance, filename):\n\"\"\"\n    Return a path for uploading image attachments.\n    \"\"\"\npath = \"image-attachments/\"\n# Rename the file to the provided name, if any. Attempt to preserve the file extension.\nextension = filename.rsplit(\".\")[-1].lower()\nif instance.name and extension in [\"bmp\", \"gif\", \"jpeg\", \"jpg\", \"png\"]:\nfilename = \".\".join([instance.name, extension])\nelif instance.name:\nfilename = instance.name\nreturn f\"{path}{instance.content_type.name}_{instance.object_id}_{filename}\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.is_url","title":"<code>nautobot.apps.utils.is_url(value)</code>","text":"<p>Validate whether a value is a URL.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>String to validate.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the value is a valid URL, False otherwise.</p> Source code in <code>nautobot/core/utils/data.py</code> <pre><code>def is_url(value):\n\"\"\"\n    Validate whether a value is a URL.\n    Args:\n        value (str): String to validate.\n    Returns:\n        (bool): True if the value is a valid URL, False otherwise.\n    \"\"\"\ntry:\nreturn validators.URLValidator()(value) is None\nexcept validators.ValidationError:\nreturn False\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.lighten_color","title":"<code>nautobot.apps.utils.lighten_color(r, g, b, factor)</code>","text":"<p>Make a given RGB color lighter (closer to white).</p> Source code in <code>nautobot/core/utils/color.py</code> <pre><code>def lighten_color(r, g, b, factor):\n\"\"\"\n    Make a given RGB color lighter (closer to white).\n    \"\"\"\nreturn [\nint(255 - (255 - r) * (1.0 - factor)),\nint(255 - (255 - g) * (1.0 - factor)),\nint(255 - (255 - b) * (1.0 - factor)),\n]\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.merge_dicts_without_collision","title":"<code>nautobot.apps.utils.merge_dicts_without_collision(d1, d2)</code>","text":"<p>Merge two dicts into a new dict, but raise a ValueError if any key exists with differing values across both dicts.</p> Source code in <code>nautobot/core/utils/data.py</code> <pre><code>def merge_dicts_without_collision(d1, d2):\n\"\"\"\n    Merge two dicts into a new dict, but raise a ValueError if any key exists with differing values across both dicts.\n    \"\"\"\nintersection = d1.keys() &amp; d2.keys()\nfor k in intersection:\nif d1[k] != d2[k]:\nraise ValueError(f'Conflicting values for key \"{k}\": ({d1[k]!r}, {d2[k]!r})')\nreturn {**d1, **d2}\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.migrate_role_data","title":"<code>nautobot.apps.utils.migrate_role_data(model_to_migrate, *, from_role_field_name, from_role_model=None, from_role_choiceset=None, to_role_field_name, to_role_model=None, to_role_choiceset=None, is_m2m_field=False)</code>","text":"<p>Update all <code>model_to_migrate</code> with a value for <code>to_role_field</code> based on <code>from_role_field</code> values.</p> <p>Parameters:</p> Name Type Description Default <code>model_to_migrate</code> <code>Model</code> <p>Model with role fields to alter</p> required <code>from_role_field_name</code> <code>str</code> <p>Name of the field on <code>model_to_migrate</code> to use as source data</p> required <code>from_role_model</code> <code>Model</code> <p>If <code>from_role_field</code> is a ForeignKey or M2M field, the corresponding model for it</p> <code>None</code> <code>from_role_choiceset</code> <code>ChoiceSet</code> <p>If <code>from_role_field</code> is a choices field, the corresponding ChoiceSet for it</p> <code>None</code> <code>to_role_field_name</code> <code>str</code> <p>Name of the field on <code>model_to_migrate</code> to update based on the <code>from_role_field</code></p> required <code>to_role_model</code> <code>Model</code> <p>If <code>to_role_field</code> is a ForeignKey or M2M field, the corresponding model for it</p> <code>None</code> <code>to_role_choiceset</code> <code>ChoiceSet</code> <p>If <code>to_role_field</code> is a choices field, the corresponding ChoiceSet for it</p> <code>None</code> <code>is_m2m_field</code> <code>bool</code> <p>True if the role fields are both ManyToManyFields, else False</p> <code>False</code> Source code in <code>nautobot/extras/utils.py</code> <pre><code>def migrate_role_data(\nmodel_to_migrate,\n*,\nfrom_role_field_name,\nfrom_role_model=None,\nfrom_role_choiceset=None,\nto_role_field_name,\nto_role_model=None,\nto_role_choiceset=None,\nis_m2m_field=False,\n):\n\"\"\"\n    Update all `model_to_migrate` with a value for `to_role_field` based on `from_role_field` values.\n    Args:\n        model_to_migrate (Model): Model with role fields to alter\n        from_role_field_name (str): Name of the field on `model_to_migrate` to use as source data\n        from_role_model (Model): If `from_role_field` is a ForeignKey or M2M field, the corresponding model for it\n        from_role_choiceset (ChoiceSet): If `from_role_field` is a choices field, the corresponding ChoiceSet for it\n        to_role_field_name (str): Name of the field on `model_to_migrate` to update based on the `from_role_field`\n        to_role_model (Model): If `to_role_field` is a ForeignKey or M2M field, the corresponding model for it\n        to_role_choiceset (ChoiceSet): If `to_role_field` is a choices field, the corresponding ChoiceSet for it\n        is_m2m_field (bool): True if the role fields are both ManyToManyFields, else False\n    \"\"\"\nif from_role_model is not None:\nassert from_role_choiceset is None\nif to_role_model is not None:\nassert to_role_choiceset is None\n# Mapping \"from\" model instances to corresponding \"to\" model instances\nroles_translation_mapping = {\n# Use .filter().first(), not .get() because \"to\" role might not exist, especially on reverse migrations\nfrom_role: to_role_model.objects.filter(name=from_role.name).first()\nfor from_role in from_role_model.objects.all()\n}\nelse:\nassert to_role_choiceset is not None\n# Mapping \"from\" model instances to corresponding \"to\" choices\n# We need to use `label` to look up the from_role instance, but `value` is what we set for the to_role_field\ninverted_to_role_choiceset = {label: value for value, label in to_role_choiceset.CHOICES}\nroles_translation_mapping = {\nfrom_role: inverted_to_role_choiceset.get(from_role.name, None)\nfor from_role in from_role_model.objects.all()\n}\nelse:\nassert from_role_choiceset is not None\nif to_role_model is not None:\nassert to_role_choiceset is None\n# Mapping \"from\" choices to corresponding \"to\" model instances\nroles_translation_mapping = {\n# Use .filter().first(), not .get() because \"to\" role might not exist, especially on reverse migrations\nfrom_role_value: to_role_model.objects.filter(name=from_role_label).first()\nfor from_role_value, from_role_label in from_role_choiceset.CHOICES\n}\nelse:\nassert to_role_choiceset is not None\n# Mapping \"from\" choices to corresponding \"to\" choices; we don't currently use this case, but it should work\n# We need to use `label` to look up the from_role instance, but `value` is what we set for the to_role_field\ninverted_to_role_choiceset = {label: value for value, label in to_role_choiceset.CHOICES}\nroles_translation_mapping = {\nfrom_role_value: inverted_to_role_choiceset.get(from_role_label, None)\nfor from_role_value, from_role_label in from_role_choiceset.CHOICES\n}\nif not is_m2m_field:\n# Bulk updates of a single field are easy enough...\nfor from_role_value, to_role_value in roles_translation_mapping.items():\nif to_role_value is not None:\nupdated_count = model_to_migrate.objects.filter(**{from_role_field_name: from_role_value}).update(\n**{to_role_field_name: to_role_value}\n)\nlogger.info(\n'Updated %d %s records to reference %s \"%s\"',\nupdated_count,\nmodel_to_migrate._meta.label,\nto_role_field_name,\nto_role_value.name if to_role_model else to_role_value,\n)\nelse:\n# ...but we have to update each instance's M2M field independently?\nfor instance in model_to_migrate.objects.all():\nto_role_set = {\nroles_translation_mapping[from_role_value]\nfor from_role_value in getattr(instance, from_role_field_name).all()\n}\n# Discard any null values\nto_role_set.discard(None)\ngetattr(instance, to_role_field_name).set(to_role_set)\nlogger.info(\n\"Updated %d %s record %s M2M fields\",\nmodel_to_migrate.objects.count(),\nmodel_to_migrate._meta.label,\nto_role_field_name,\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.normalize_querydict","title":"<code>nautobot.apps.utils.normalize_querydict(querydict, form_class=None)</code>","text":"<p>Convert a QueryDict to a normal, mutable dictionary, preserving list values. For example,</p> <pre><code>QueryDict('foo=1&amp;bar=2&amp;bar=3&amp;baz=')\n</code></pre> becomes <p>{'foo': '1', 'bar': ['2', '3'], 'baz': ''}</p> <p>This function is necessary because QueryDict does not provide any built-in mechanism which preserves multiple values.</p> <p>A <code>form_class</code> can be provided as a way to hint which query parameters should be treated as lists.</p> Source code in <code>nautobot/core/utils/requests.py</code> <pre><code>def normalize_querydict(querydict, form_class=None):\n\"\"\"\n    Convert a QueryDict to a normal, mutable dictionary, preserving list values. For example,\n        QueryDict('foo=1&amp;bar=2&amp;bar=3&amp;baz=')\n    becomes:\n        {'foo': '1', 'bar': ['2', '3'], 'baz': ''}\n    This function is necessary because QueryDict does not provide any built-in mechanism which preserves multiple\n    values.\n    A `form_class` can be provided as a way to hint which query parameters should be treated as lists.\n    \"\"\"\nresult = {}\nif querydict:\nfor key, value_list in querydict.lists():\nif len(value_list) &gt; 1:\n# More than one value in the querydict for this key, so keep it as a list\n# TODO: we could check here and de-listify value_list if the form_class field is a single-value one?\nresult[key] = value_list\nelif (\nform_class is not None\nand key in form_class.base_fields\n# ModelMultipleChoiceField is *not* itself a subclass of MultipleChoiceField, thanks Django!\nand isinstance(form_class.base_fields[key], (forms.MultipleChoiceField, forms.ModelMultipleChoiceField))\n):\n# Even though there's only a single value in the querydict for this key, the form wants it as a list\nresult[key] = value_list\nelse:\n# Only a single value in the querydict for this key, and no guidance otherwise, so make it single\nresult[key] = value_list[0]\nreturn result\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.permission_is_exempt","title":"<code>nautobot.apps.utils.permission_is_exempt(name)</code>","text":"<p>Determine whether a specified permission is exempt from evaluation.</p> <p>:param name: Permission name in the format ._ Source code in <code>nautobot/core/utils/permissions.py</code> <pre><code>def permission_is_exempt(name):\n\"\"\"\n    Determine whether a specified permission is exempt from evaluation.\n    :param name: Permission name in the format &lt;app_label&gt;.&lt;action&gt;_&lt;model&gt;\n    \"\"\"\napp_label, action, model_name = resolve_permission(name)\nif action == \"view\":\nif (\n# All models (excluding those in EXEMPT_EXCLUDE_MODELS) are exempt from view permission enforcement\n\"*\" in settings.EXEMPT_VIEW_PERMISSIONS\nand (app_label, model_name) not in settings.EXEMPT_EXCLUDE_MODELS\n) or (\n# This specific model is exempt from view permission enforcement\nf\"{app_label}.{model_name}\"\nin settings.EXEMPT_VIEW_PERMISSIONS\n):\nreturn True\nreturn False\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.populate_model_features_registry","title":"<code>nautobot.apps.utils.populate_model_features_registry(refresh=False)</code>","text":"<p>Populate the registry model features with new apps.</p> <p>This function updates the registry model features.</p> <p>Behavior: - Defines a list of dictionaries called lookup_confs. Each dictionary contains:     - 'feature_name': The name of the feature to be updated in the registry.     - 'field_names': A list of names of fields that must be present in order for the model to be considered                     a valid model_feature.     - 'field_attributes': Optional dictionary of attributes to filter the fields by. Only model which fields match                         all the attributes specified in the dictionary will be considered. This parameter can be                         useful to narrow down the search for fields that match certain criteria. For example, if                         <code>field_attributes</code> is set to {\"related_model\": RelationshipAssociation}, only fields with                         a related model of RelationshipAssociation will be considered. - Looks up all the models in the installed apps. - For each dictionary in lookup_confs, calls lookup_by_field() function to look for all models that have fields with the names given in the dictionary. - Groups the results by app and updates the registry model features for each app.</p> Source code in <code>nautobot/extras/utils.py</code> <pre><code>def populate_model_features_registry(refresh=False):\n\"\"\"\n    Populate the registry model features with new apps.\n    This function updates the registry model features.\n    Behavior:\n    - Defines a list of dictionaries called lookup_confs. Each dictionary contains:\n        - 'feature_name': The name of the feature to be updated in the registry.\n        - 'field_names': A list of names of fields that must be present in order for the model to be considered\n                        a valid model_feature.\n        - 'field_attributes': Optional dictionary of attributes to filter the fields by. Only model which fields match\n                            all the attributes specified in the dictionary will be considered. This parameter can be\n                            useful to narrow down the search for fields that match certain criteria. For example, if\n                            `field_attributes` is set to {\"related_model\": RelationshipAssociation}, only fields with\n                            a related model of RelationshipAssociation will be considered.\n    - Looks up all the models in the installed apps.\n    - For each dictionary in lookup_confs, calls lookup_by_field() function to look for all models that have fields with the names given in the dictionary.\n    - Groups the results by app and updates the registry model features for each app.\n    \"\"\"\nif registry.get(\"populate_model_features_registry_called\", False) and not refresh:\nreturn\nRelationshipAssociation = apps.get_model(app_label=\"extras\", model_name=\"relationshipassociation\")\nlookup_confs = [\n{\n\"feature_name\": \"custom_fields\",\n\"field_names\": [\"_custom_field_data\"],\n},\n{\n\"feature_name\": \"relationships\",\n\"field_names\": [\"source_for_associations\", \"destination_for_associations\"],\n\"field_attributes\": {\"related_model\": RelationshipAssociation},\n},\n]\napp_models = apps.get_models()\nfor lookup_conf in lookup_confs:\nregistry_items = find_models_with_matching_fields(\napp_models=app_models,\nfield_names=lookup_conf[\"field_names\"],\nfield_attributes=lookup_conf.get(\"field_attributes\"),\n)\nfeature_name = lookup_conf[\"feature_name\"]\nregistry[\"model_features\"][feature_name] = registry_items\nif not registry.get(\"populate_model_features_registry_called\", False):\nregistry[\"populate_model_features_registry_called\"] = True\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.refresh_job_model_from_job_class","title":"<code>nautobot.apps.utils.refresh_job_model_from_job_class(job_model_class, job_class)</code>","text":"<p>Create or update a job_model record based on the metadata of the provided job_class.</p> <p>Note that job_model_class is a parameter (rather than doing a \"from nautobot.extras.models import Job\") because this function may be called from various initialization processes (such as the \"nautobot_database_ready\" signal) and in that case we need to not import models ourselves.</p> Source code in <code>nautobot/extras/utils.py</code> <pre><code>def refresh_job_model_from_job_class(job_model_class, job_class):\n\"\"\"\n    Create or update a job_model record based on the metadata of the provided job_class.\n    Note that job_model_class is a parameter (rather than doing a \"from nautobot.extras.models import Job\") because\n    this function may be called from various initialization processes (such as the \"nautobot_database_ready\" signal)\n    and in that case we need to not import models ourselves.\n    \"\"\"\nfrom nautobot.extras.jobs import (\nJobHookReceiver,\nJobButtonReceiver,\n)  # imported here to prevent circular import problem\n# Unrecoverable errors\nif len(job_class.__module__) &gt; JOB_MAX_NAME_LENGTH:\nlogger.error(\n'Unable to store Jobs from module \"%s\" as Job models because the module exceeds %d characters in length!',\njob_class.__module__,\nJOB_MAX_NAME_LENGTH,\n)\nreturn (None, False)\nif len(job_class.__name__) &gt; JOB_MAX_NAME_LENGTH:\nlogger.error(\n'Unable to represent Job class \"%s\" as a Job model because the class name exceeds %d characters in length!',\njob_class.__name__,\nJOB_MAX_NAME_LENGTH,\n)\nreturn (None, False)\nif issubclass(job_class, JobHookReceiver) and issubclass(job_class, JobButtonReceiver):\nlogger.error(\n'Job class \"%s\" must not sub-class from both JobHookReceiver and JobButtonReceiver!',\njob_class.__name__,\n)\nreturn (None, False)\n# Recoverable errors\nif len(job_class.grouping) &gt; JOB_MAX_GROUPING_LENGTH:\nlogger.warning(\n'Job class \"%s\" grouping \"%s\" exceeds %d characters in length, it will be truncated in the database.',\njob_class.__name__,\njob_class.grouping,\nJOB_MAX_GROUPING_LENGTH,\n)\nif len(job_class.name) &gt; JOB_MAX_NAME_LENGTH:\nlogger.warning(\n'Job class \"%s\" name \"%s\" exceeds %d characters in length, it will be truncated in the database.',\njob_class.__name__,\njob_class.name,\nJOB_MAX_NAME_LENGTH,\n)\n# handle duplicate names by appending an incrementing counter to the end\ndefault_job_name = job_class.name[:JOB_MAX_NAME_LENGTH]\njob_name = default_job_name\nappend_counter = 2\nexisting_job_names = (\njob_model_class.objects.filter(name__startswith=job_name)\n.exclude(\nmodule_name=job_class.__module__[:JOB_MAX_NAME_LENGTH],\njob_class_name=job_class.__name__[:JOB_MAX_NAME_LENGTH],\n)\n.values_list(\"name\", flat=True)\n)\nwhile job_name in existing_job_names:\njob_name_append = f\" ({append_counter})\"\nmax_name_length = JOB_MAX_NAME_LENGTH - len(job_name_append)\njob_name = default_job_name[:max_name_length] + job_name_append\nappend_counter += 1\nif job_name != default_job_name and \"test\" not in sys.argv:\nlogger.warning(\n'Job class \"%s\" name \"%s\" is not unique, changing to \"%s\".',\njob_class.__name__,\ndefault_job_name,\njob_name,\n)\ntry:\nwith transaction.atomic():\njob_model, created = job_model_class.objects.get_or_create(\nmodule_name=job_class.__module__[:JOB_MAX_NAME_LENGTH],\njob_class_name=job_class.__name__[:JOB_MAX_NAME_LENGTH],\ndefaults={\n\"grouping\": job_class.grouping[:JOB_MAX_GROUPING_LENGTH],\n\"name\": job_name,\n\"is_job_hook_receiver\": issubclass(job_class, JobHookReceiver),\n\"is_job_button_receiver\": issubclass(job_class, JobButtonReceiver),\n\"read_only\": job_class.read_only,\n\"supports_dryrun\": job_class.supports_dryrun,\n\"installed\": True,\n\"enabled\": False,\n},\n)\nif job_name != default_job_name:\njob_model.name_override = True\nif created and job_model.module_name.startswith(\"nautobot.\"):\n# System jobs should be enabled by default when first created\njob_model.enabled = True\nfor field_name in JOB_OVERRIDABLE_FIELDS:\n# Was this field directly inherited from the job before, or was it overridden in the database?\nif not getattr(job_model, f\"{field_name}_override\", False):\n# It was inherited and not overridden\nsetattr(job_model, field_name, getattr(job_class, field_name))\nif not created:\n# Mark it as installed regardless\njob_model.installed = True\n# Update the non-overridable flags in case they've changed in the source\njob_model.is_job_hook_receiver = issubclass(job_class, JobHookReceiver)\njob_model.is_job_button_receiver = issubclass(job_class, JobButtonReceiver)\njob_model.read_only = job_class.read_only\njob_model.supports_dryrun = job_class.supports_dryrun\njob_model.save()\nexcept Exception as exc:\nlogger.error(\n'Exception while trying to create/update a database record for Job class \"%s\": %s', job_class.__name__, exc\n)\nreturn (None, False)\nlogger.info(\n'%s Job \"%s: %s\" from &lt;%s&gt;',\n\"Created\" if created else \"Refreshed\",\njob_model.grouping,\njob_model.name,\njob_class.__name__,\n)\nreturn (job_model, created)\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.remove_prefix_from_cf_key","title":"<code>nautobot.apps.utils.remove_prefix_from_cf_key(field_name)</code>","text":"<p>field_name (str): f\"cf_{cf.key}\"</p> <p>Helper method to remove the \"cf_\" prefix</p> Source code in <code>nautobot/extras/utils.py</code> <pre><code>def remove_prefix_from_cf_key(field_name):\n\"\"\"\n    field_name (str): f\"cf_{cf.key}\"\n    Helper method to remove the \"cf_\" prefix\n    \"\"\"\nreturn field_name[3:]\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.render_jinja2","title":"<code>nautobot.apps.utils.render_jinja2(template_code, context)</code>","text":"<p>Render a Jinja2 template with the provided context. Return the rendered content.</p> Source code in <code>nautobot/core/utils/data.py</code> <pre><code>def render_jinja2(template_code, context):\n\"\"\"\n    Render a Jinja2 template with the provided context. Return the rendered content.\n    \"\"\"\nrendering_engine = engines[\"jinja\"]\ntemplate = rendering_engine.from_string(template_code)\n# For reasons unknown to me, django-jinja2 `template.render()` implicitly calls `mark_safe()` on the rendered text.\n# This is a security risk in general, especially so in our case because we're often using this function to render\n# a user-provided template and don't want to open ourselves up to script injection or similar issues.\n# There's no `mark_unsafe()` function, but concatenating a SafeString to an ordinary string (even \"\") suffices.\nreturn \"\" + template.render(context=context)\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.resolve_permission","title":"<code>nautobot.apps.utils.resolve_permission(name)</code>","text":"<p>Given a permission name, return the app_label, action, and model_name components. For example, \"dcim.view_location\" returns (\"dcim\", \"view\", \"location\").</p> <p>:param name: Permission name in the format ._ Source code in <code>nautobot/core/utils/permissions.py</code> <pre><code>def resolve_permission(name):\n\"\"\"\n    Given a permission name, return the app_label, action, and model_name components. For example, \"dcim.view_location\"\n    returns (\"dcim\", \"view\", \"location\").\n    :param name: Permission name in the format &lt;app_label&gt;.&lt;action&gt;_&lt;model&gt;\n    \"\"\"\ntry:\napp_label, codename = name.split(\".\")\naction, model_name = codename.rsplit(\"_\", 1)\nexcept ValueError:\nraise ValueError(f\"Invalid permission name: {name}. Must be in the format &lt;app_label&gt;.&lt;action&gt;_&lt;model&gt;\")\nreturn app_label, action, model_name\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.resolve_permission_ct","title":"<code>nautobot.apps.utils.resolve_permission_ct(name)</code>","text":"<p>Given a permission name, return the relevant ContentType and action. For example, \"dcim.view_location\" returns (Location, \"view\").</p> <p>:param name: Permission name in the format ._ Source code in <code>nautobot/core/utils/permissions.py</code> <pre><code>def resolve_permission_ct(name):\n\"\"\"\n    Given a permission name, return the relevant ContentType and action. For example, \"dcim.view_location\" returns\n    (Location, \"view\").\n    :param name: Permission name in the format &lt;app_label&gt;.&lt;action&gt;_&lt;model&gt;\n    \"\"\"\napp_label, action, model_name = resolve_permission(name)\ntry:\ncontent_type = ContentType.objects.get(app_label=app_label, model=model_name)\nexcept ContentType.DoesNotExist:\nraise ValueError(f\"Unknown app_label/model_name for {name}\")\nreturn content_type, action\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.rgb_to_hex","title":"<code>nautobot.apps.utils.rgb_to_hex(r, g, b)</code>","text":"<p>Map r, g, b values to a hex string.</p> Source code in <code>nautobot/core/utils/color.py</code> <pre><code>def rgb_to_hex(r, g, b):\n\"\"\"\n    Map r, g, b values to a hex string.\n    \"\"\"\nreturn \"%02x%02x%02x\" % (r, g, b)  # pylint: disable=consider-using-f-string\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.sanitize","title":"<code>nautobot.apps.utils.sanitize(string, replacement='(redacted)')</code>","text":"<p>Make an attempt at stripping potentially-sensitive information from the given string.</p> <p>Obviously this will never be 100% foolproof but we can at least try.</p> <p>Uses settings.SANITIZER_PATTERNS as the list of (regexp, repl) tuples to apply.</p> Source code in <code>nautobot/core/utils/logging.py</code> <pre><code>def sanitize(string, replacement=\"(redacted)\"):\n\"\"\"\n    Make an attempt at stripping potentially-sensitive information from the given string.\n    Obviously this will never be 100% foolproof but we can at least try.\n    Uses settings.SANITIZER_PATTERNS as the list of (regexp, repl) tuples to apply.\n    \"\"\"\n# Don't allow regex match groups to be referenced in the replacement string!\nassert not re.search(r\"\\\\\\d|\\\\g&lt;\\d+&gt;\", replacement)\nfor sanitizer, repl in settings.SANITIZER_PATTERNS:\ntry:\nstring = sanitizer.sub(repl.format(replacement=replacement), string)\nexcept re.error:\nlogger.error('Error in string sanitization using \"%s\"', sanitizer)\nreturn string\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.shallow_compare_dict","title":"<code>nautobot.apps.utils.shallow_compare_dict(source_dict, destination_dict, exclude=None)</code>","text":"<p>Return a new dictionary of the different keys. The values of <code>destination_dict</code> are returned. Only the equality of the first layer of keys/values is checked. <code>exclude</code> is a list or tuple of keys to be ignored.</p> Source code in <code>nautobot/core/utils/data.py</code> <pre><code>def shallow_compare_dict(source_dict, destination_dict, exclude=None):\n\"\"\"\n    Return a new dictionary of the different keys. The values of `destination_dict` are returned. Only the equality of\n    the first layer of keys/values is checked. `exclude` is a list or tuple of keys to be ignored.\n    \"\"\"\ndifference = {}\nfor key in destination_dict:\nif source_dict.get(key) != destination_dict[key]:\nif isinstance(exclude, (list, tuple)) and key in exclude:\ncontinue\ndifference[key] = destination_dict[key]\nreturn difference\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.swap_status_initials","title":"<code>nautobot.apps.utils.swap_status_initials(data)</code>","text":"<p>Swap Git status initials with its equivalent.</p> Source code in <code>nautobot/core/utils/git.py</code> <pre><code>def swap_status_initials(data):\n\"\"\"Swap Git status initials with its equivalent.\"\"\"\ninitial, text = data.split(\"\\t\")\nreturn GitDiffLog(status=GIT_STATUS_MAP.get(initial), text=text)\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.task_queues_as_choices","title":"<code>nautobot.apps.utils.task_queues_as_choices(task_queues)</code>","text":"<p>Returns a list of 2-tuples for use in the form field <code>choices</code> argument. Appends worker count to the description.</p> Source code in <code>nautobot/extras/utils.py</code> <pre><code>def task_queues_as_choices(task_queues):\n\"\"\"\n    Returns a list of 2-tuples for use in the form field `choices` argument. Appends\n    worker count to the description.\n    \"\"\"\nif not task_queues:\ntask_queues = [settings.CELERY_TASK_DEFAULT_QUEUE]\nchoices = []\ncelery_queues = get_celery_queues()\nfor queue in task_queues:\nif not queue:\nworker_count = celery_queues.get(settings.CELERY_TASK_DEFAULT_QUEUE, 0)\nelse:\nworker_count = celery_queues.get(queue, 0)\ndescription = f\"{queue if queue else 'default queue'} ({worker_count} worker{'s'[:worker_count^1]})\"\nchoices.append((queue, description))\nreturn choices\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.to_meters","title":"<code>nautobot.apps.utils.to_meters(length, unit)</code>","text":"<p>Convert the given length to meters.</p> Source code in <code>nautobot/core/utils/data.py</code> <pre><code>def to_meters(length, unit):\n\"\"\"\n    Convert the given length to meters.\n    \"\"\"\nlength = int(length)\nif length &lt; 0:\nraise ValueError(\"Length must be a positive integer\")\nvalid_units = choices.CableLengthUnitChoices.values()\nif unit not in valid_units:\nraise ValueError(f\"Unknown unit {unit}. Must be one of the following: {', '.join(valid_units)}\")\nif unit == choices.CableLengthUnitChoices.UNIT_METER:\nreturn length\nif unit == choices.CableLengthUnitChoices.UNIT_CENTIMETER:\nreturn length / 100\nif unit == choices.CableLengthUnitChoices.UNIT_FOOT:\nreturn length * Decimal(\"0.3048\")\nif unit == choices.CableLengthUnitChoices.UNIT_INCH:\nreturn length * Decimal(\"0.3048\") * 12\nraise ValueError(f\"Unknown unit {unit}. Must be 'm', 'cm', 'ft', or 'in'.\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/utils.html#nautobot.apps.utils.wrap_model_clean_methods","title":"<code>nautobot.apps.utils.wrap_model_clean_methods()</code>","text":"<p>Helper function that wraps plugin model validator registered clean methods for all applicable models</p> Source code in <code>nautobot/extras/plugins/validators.py</code> <pre><code>def wrap_model_clean_methods():\n\"\"\"\n    Helper function that wraps plugin model validator registered clean methods for all applicable models\n    \"\"\"\nfor app_label, models in FeatureQuery(\"custom_validators\").as_dict():\nfor model in models:\nmodel_class = apps.get_model(app_label=app_label, model_name=model)\nmodel_class.clean = custom_validator_clean(model_class.clean)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html","title":"nautobot.apps.views","text":""},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views","title":"<code>nautobot.apps.views</code>","text":"<p>Utilities for apps to implement UI views.</p>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.AdminRequiredMixin","title":"<code>nautobot.apps.views.AdminRequiredMixin</code>","text":"<p>             Bases: <code>AccessMixin</code></p> <p>Allows access only to admin users.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>class AdminRequiredMixin(AccessMixin):\n\"\"\"\n    Allows access only to admin users.\n    \"\"\"\ndef has_permission(self):\nreturn bool(\nself.request.user\nand self.request.user.is_active\nand (self.request.user.is_staff or self.request.user.is_superuser)\n)\ndef dispatch(self, request, *args, **kwargs):\nif not self.has_permission():\nreturn self.handle_no_permission()\nreturn super().dispatch(request, *args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.BulkComponentCreateView","title":"<code>nautobot.apps.views.BulkComponentCreateView</code>","text":"<p>             Bases: <code>GetReturnURLMixin</code>, <code>ObjectPermissionRequiredMixin</code>, <code>View</code></p> <p>Add one or more components (e.g. interfaces, console ports, etc.) to a set of Devices or VirtualMachines.</p> Source code in <code>nautobot/core/views/generic.py</code> <pre><code>class BulkComponentCreateView(GetReturnURLMixin, ObjectPermissionRequiredMixin, View):\n\"\"\"\n    Add one or more components (e.g. interfaces, console ports, etc.) to a set of Devices or VirtualMachines.\n    \"\"\"\nparent_model = None\nparent_field = None\nform = None\nqueryset = None\nmodel_form = None\nfilterset = None\ntable = None\ntemplate_name = \"generic/object_bulk_add_component.html\"\ndef get_required_permission(self):\nreturn f\"dcim.add_{self.queryset.model._meta.model_name}\"\ndef post(self, request):\nlogger = logging.getLogger(__name__ + \".BulkComponentCreateView\")\nparent_model_name = self.parent_model._meta.verbose_name_plural\nmodel_name = self.queryset.model._meta.verbose_name_plural\nmodel = self.queryset.model\n# Are we editing *all* objects in the queryset or just a selected subset?\nif request.POST.get(\"_all\") and self.filterset is not None:\npk_list = [obj.pk for obj in self.filterset(request.GET, self.parent_model.objects.only(\"pk\")).qs]\nelse:\npk_list = request.POST.getlist(\"pk\")\nselected_objects = self.parent_model.objects.filter(pk__in=pk_list)\nif not selected_objects:\nmessages.warning(\nrequest,\nf\"No {self.parent_model._meta.verbose_name_plural} were selected.\",\n)\nreturn redirect(self.get_return_url(request))\ntable = self.table(selected_objects)\nif \"_create\" in request.POST:\nform = self.form(model, request.POST)\nif form.is_valid():\nlogger.debug(\"Form validation was successful\")\nnew_components = []\ndata = deepcopy(form.cleaned_data)\ntry:\nwith transaction.atomic():\nfor obj in data[\"pk\"]:\nnames = data[\"name_pattern\"]\nlabels = data[\"label_pattern\"] if \"label_pattern\" in data else None\nfor i, name in enumerate(names):\nlabel = labels[i] if labels else None\ncomponent_data = {\nself.parent_field: obj.pk,\n\"name\": name,\n\"label\": label,\n}\ncomponent_data.update(data)\ncomponent_form = self.model_form(component_data)\nif component_form.is_valid():\ninstance = component_form.save()\nlogger.debug(f\"Created {instance} on {instance.parent}\")\nnew_components.append(instance)\nelse:\nfor (\nfield,\nerrors,\n) in component_form.errors.as_data().items():\nfor e in errors:\nerr_str = \", \".join(e)\nform.add_error(\nfield,\nf\"{obj} {name}: {err_str}\",\n)\n# Enforce object-level permissions\nif self.queryset.filter(pk__in=[obj.pk for obj in new_components]).count() != len(\nnew_components\n):\nraise ObjectDoesNotExist\nexcept IntegrityError:\npass\nexcept ObjectDoesNotExist:\nmsg = \"Component creation failed due to object-level permissions violation\"\nlogger.debug(msg)\nform.add_error(None, msg)\nif not form.errors:\nmsg = f\"Added {len(new_components)} {model_name} to {len(form.cleaned_data['pk'])} {parent_model_name}.\"\nlogger.info(msg)\nmessages.success(request, msg)\nreturn redirect(self.get_return_url(request))\nelse:\nlogger.debug(\"Form validation failed\")\nelse:\nform = self.form(model, initial={\"pk\": pk_list})\nreturn render(\nrequest,\nself.template_name,\n{\n\"form\": form,\n\"parent_model_name\": parent_model_name,\n\"model_name\": model_name,\n\"table\": table,\n\"return_url\": self.get_return_url(request),\n},\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.BulkCreateView","title":"<code>nautobot.apps.views.BulkCreateView</code>","text":"<p>             Bases: <code>GetReturnURLMixin</code>, <code>ObjectPermissionRequiredMixin</code>, <code>View</code></p> <p>Create new objects in bulk.</p> <p>queryset: Base queryset for the objects being created form: Form class which provides the <code>pattern</code> field model_form: The ModelForm used to create individual objects pattern_target: Name of the field to be evaluated as a pattern (if any) template_name: The name of the template</p> Source code in <code>nautobot/core/views/generic.py</code> <pre><code>class BulkCreateView(GetReturnURLMixin, ObjectPermissionRequiredMixin, View):\n\"\"\"\n    Create new objects in bulk.\n    queryset: Base queryset for the objects being created\n    form: Form class which provides the `pattern` field\n    model_form: The ModelForm used to create individual objects\n    pattern_target: Name of the field to be evaluated as a pattern (if any)\n    template_name: The name of the template\n    \"\"\"\nqueryset = None\nform = None\nmodel_form = None\npattern_target = \"\"\ntemplate_name = None\ndef get_required_permission(self):\nreturn get_permission_for_model(self.queryset.model, \"add\")\ndef get(self, request):\n# Set initial values for visible form fields from query args\ninitial = {}\nfor field in getattr(self.model_form._meta, \"fields\", []):\nif request.GET.get(field):\ninitial[field] = request.GET[field]\nform = self.form()\nmodel_form = self.model_form(initial=initial)\nreturn render(\nrequest,\nself.template_name,\n{\n\"obj_type\": self.model_form._meta.model._meta.verbose_name,\n\"form\": form,\n\"model_form\": model_form,\n\"return_url\": self.get_return_url(request),\n},\n)\ndef post(self, request):\nlogger = logging.getLogger(__name__ + \".BulkCreateView\")\nmodel = self.queryset.model\nform = self.form(request.POST)\nmodel_form = self.model_form(request.POST)\nif form.is_valid():\nlogger.debug(\"Form validation was successful\")\npattern = form.cleaned_data[\"pattern\"]\nnew_objs = []\ntry:\nwith transaction.atomic():\n# Create objects from the expanded. Abort the transaction on the first validation error.\nfor value in pattern:\n# Reinstantiate the model form each time to avoid overwriting the same instance. Use a mutable\n# copy of the POST QueryDict so that we can update the target field value.\nmodel_form = self.model_form(request.POST.copy())\nmodel_form.data[self.pattern_target] = value\n# Validate each new object independently.\nif model_form.is_valid():\nobj = model_form.save()\nlogger.debug(f\"Created {obj} (PK: {obj.pk})\")\nnew_objs.append(obj)\nelse:\n# Copy any errors on the pattern target field to the pattern form.\nerrors = model_form.errors.as_data()\nif errors.get(self.pattern_target):\nform.add_error(\"pattern\", errors[self.pattern_target])\n# Raise an IntegrityError to break the for loop and abort the transaction.\nraise IntegrityError()\n# Enforce object-level permissions\nif self.queryset.filter(pk__in=[obj.pk for obj in new_objs]).count() != len(new_objs):\nraise ObjectDoesNotExist\n# If we make it to this point, validation has succeeded on all new objects.\nmsg = f\"Added {len(new_objs)} {model._meta.verbose_name_plural}\"\nlogger.info(msg)\nmessages.success(request, msg)\nif \"_addanother\" in request.POST:\nreturn redirect(request.path)\nreturn redirect(self.get_return_url(request))\nexcept IntegrityError:\npass\nexcept ObjectDoesNotExist:\nmsg = \"Object creation failed due to object-level permissions violation\"\nlogger.debug(msg)\nform.add_error(None, msg)\nelse:\nlogger.debug(\"Form validation failed\")\nreturn render(\nrequest,\nself.template_name,\n{\n\"form\": form,\n\"model_form\": model_form,\n\"obj_type\": model._meta.verbose_name,\n\"return_url\": self.get_return_url(request),\n},\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.BulkDeleteView","title":"<code>nautobot.apps.views.BulkDeleteView</code>","text":"<p>             Bases: <code>GetReturnURLMixin</code>, <code>ObjectPermissionRequiredMixin</code>, <code>View</code></p> <p>Delete objects in bulk.</p> <p>queryset: Custom queryset to use when retrieving objects (e.g. to select related objects) filter: FilterSet to apply when deleting by QuerySet table: The table used to display devices being deleted form: The form class used to delete objects in bulk template_name: The name of the template</p> Source code in <code>nautobot/core/views/generic.py</code> <pre><code>class BulkDeleteView(GetReturnURLMixin, ObjectPermissionRequiredMixin, View):\n\"\"\"\n    Delete objects in bulk.\n    queryset: Custom queryset to use when retrieving objects (e.g. to select related objects)\n    filter: FilterSet to apply when deleting by QuerySet\n    table: The table used to display devices being deleted\n    form: The form class used to delete objects in bulk\n    template_name: The name of the template\n    \"\"\"\nqueryset = None\nfilterset = None\ntable = None\nform = None\ntemplate_name = \"generic/object_bulk_delete.html\"\ndef get_required_permission(self):\nreturn get_permission_for_model(self.queryset.model, \"delete\")\ndef get(self, request):\nreturn redirect(self.get_return_url(request))\ndef post(self, request, **kwargs):\nlogger = logging.getLogger(__name__ + \".BulkDeleteView\")\nmodel = self.queryset.model\n# Are we deleting *all* objects in the queryset or just a selected subset?\nif request.POST.get(\"_all\"):\nif self.filterset is not None:\npk_list = list(self.filterset(request.GET, model.objects.only(\"pk\")).qs.values_list(\"pk\", flat=True))\nelse:\npk_list = list(model.objects.all().values_list(\"pk\", flat=True))\nelse:\npk_list = request.POST.getlist(\"pk\")\nform_cls = self.get_form()\nif \"_confirm\" in request.POST:\nform = form_cls(request.POST)\nif form.is_valid():\nlogger.debug(\"Form validation was successful\")\n# Delete objects\nqueryset = self.queryset.filter(pk__in=pk_list)\nself.perform_pre_delete(request, queryset)\ntry:\n_, deleted_info = queryset.delete()\ndeleted_count = deleted_info[model._meta.label]\nexcept ProtectedError as e:\nlogger.info(\"Caught ProtectedError while attempting to delete objects\")\nhandle_protectederror(queryset, request, e)\nreturn redirect(self.get_return_url(request))\nmsg = f\"Deleted {deleted_count} {model._meta.verbose_name_plural}\"\nlogger.info(msg)\nmessages.success(request, msg)\nreturn redirect(self.get_return_url(request))\nelse:\nlogger.debug(\"Form validation failed\")\nelse:\nform = form_cls(\ninitial={\n\"pk\": pk_list,\n\"return_url\": self.get_return_url(request),\n}\n)\n# Retrieve objects being deleted\ntable = self.table(self.queryset.filter(pk__in=pk_list), orderable=False)\nif not table.rows:\nmessages.warning(\nrequest,\nf\"No {model._meta.verbose_name_plural} were selected for deletion.\",\n)\nreturn redirect(self.get_return_url(request))\ncontext = {\n\"form\": form,\n\"obj_type_plural\": model._meta.verbose_name_plural,\n\"table\": table,\n\"return_url\": self.get_return_url(request),\n}\ncontext.update(self.extra_context())\nreturn render(request, self.template_name, context)\ndef perform_pre_delete(self, request, queryset):\npass\ndef extra_context(self):\nreturn {}\ndef get_form(self):\n\"\"\"\n        Provide a standard bulk delete form if none has been specified for the view\n        \"\"\"\nclass BulkDeleteForm(ConfirmationForm):\npk = ModelMultipleChoiceField(queryset=self.queryset, widget=MultipleHiddenInput)\nif self.form:\nreturn self.form\nreturn BulkDeleteForm\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.generic.BulkDeleteView.get_form","title":"<code>get_form()</code>","text":"<p>Provide a standard bulk delete form if none has been specified for the view</p> Source code in <code>nautobot/core/views/generic.py</code> <pre><code>def get_form(self):\n\"\"\"\n    Provide a standard bulk delete form if none has been specified for the view\n    \"\"\"\nclass BulkDeleteForm(ConfirmationForm):\npk = ModelMultipleChoiceField(queryset=self.queryset, widget=MultipleHiddenInput)\nif self.form:\nreturn self.form\nreturn BulkDeleteForm\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.BulkEditView","title":"<code>nautobot.apps.views.BulkEditView</code>","text":"<p>             Bases: <code>GetReturnURLMixin</code>, <code>ObjectPermissionRequiredMixin</code>, <code>View</code></p> <p>Edit objects in bulk.</p> <p>queryset: Custom queryset to use when retrieving objects (e.g. to select related objects) filter: FilterSet to apply when deleting by QuerySet table: The table used to display devices being edited form: The form class used to edit objects in bulk template_name: The name of the template</p> Source code in <code>nautobot/core/views/generic.py</code> <pre><code>class BulkEditView(GetReturnURLMixin, ObjectPermissionRequiredMixin, View):\n\"\"\"\n    Edit objects in bulk.\n    queryset: Custom queryset to use when retrieving objects (e.g. to select related objects)\n    filter: FilterSet to apply when deleting by QuerySet\n    table: The table used to display devices being edited\n    form: The form class used to edit objects in bulk\n    template_name: The name of the template\n    \"\"\"\nqueryset = None\nfilterset = None\ntable = None\nform = None\ntemplate_name = \"generic/object_bulk_edit.html\"\ndef get_required_permission(self):\nreturn get_permission_for_model(self.queryset.model, \"change\")\ndef get(self, request):\nreturn redirect(self.get_return_url(request))\ndef alter_obj(self, obj, request, url_args, url_kwargs):\n# Allow views to add extra info to an object before it is processed.\n# For example, a parent object can be defined given some parameter from the request URL.\nreturn obj\ndef post(self, request, **kwargs):\nlogger = logging.getLogger(__name__ + \".BulkEditView\")\nmodel = self.queryset.model\n# If we are editing *all* objects in the queryset, replace the PK list with all matched objects.\nif request.POST.get(\"_all\"):\nif self.filterset is not None:\npk_list = list(self.filterset(request.GET, model.objects.only(\"pk\")).qs.values_list(\"pk\", flat=True))\nelse:\npk_list = list(model.objects.all().values_list(\"pk\", flat=True))\nelse:\npk_list = request.POST.getlist(\"pk\")\nif \"_apply\" in request.POST:\nform = self.form(model, request.POST)\nrestrict_form_fields(form, request.user)\nif form.is_valid():\nlogger.debug(\"Form validation was successful\")\nform_custom_fields = getattr(form, \"custom_fields\", [])\nform_relationships = getattr(form, \"relationships\", [])\nstandard_fields = [\nfield\nfor field in form.fields\nif field not in form_custom_fields + form_relationships + [\"pk\"] + [\"object_note\"]\n]\nnullified_fields = request.POST.getlist(\"_nullify\")\ntry:\nwith transaction.atomic():\nupdated_objects = []\nfor obj in self.queryset.filter(pk__in=form.cleaned_data[\"pk\"]):\nobj = self.alter_obj(obj, request, [], kwargs)\n# Update standard fields. If a field is listed in _nullify, delete its value.\nfor name in standard_fields:\ntry:\nmodel_field = model._meta.get_field(name)\nexcept FieldDoesNotExist:\n# This form field is used to modify a field rather than set its value directly\nmodel_field = None\n# Handle nullification\nif name in form.nullable_fields and name in nullified_fields:\nif isinstance(model_field, ManyToManyField):\ngetattr(obj, name).set([])\nelse:\nsetattr(obj, name, None if model_field is not None and model_field.null else \"\")\n# ManyToManyFields\nelif isinstance(model_field, ManyToManyField):\nif form.cleaned_data[name]:\ngetattr(obj, name).set(form.cleaned_data[name])\n# Normal fields\nelif form.cleaned_data[name] not in (None, \"\"):\nsetattr(obj, name, form.cleaned_data[name])\n# Update custom fields\nfor field_name in form_custom_fields:\nif field_name in form.nullable_fields and field_name in nullified_fields:\nobj.cf[remove_prefix_from_cf_key(field_name)] = None\nelif form.cleaned_data.get(field_name) not in (None, \"\", []):\nobj.cf[remove_prefix_from_cf_key(field_name)] = form.cleaned_data[field_name]\nobj.full_clean()\nobj.save()\nupdated_objects.append(obj)\nlogger.debug(f\"Saved {obj} (PK: {obj.pk})\")\n# Add/remove tags\nif form.cleaned_data.get(\"add_tags\", None):\nobj.tags.add(*form.cleaned_data[\"add_tags\"])\nif form.cleaned_data.get(\"remove_tags\", None):\nobj.tags.remove(*form.cleaned_data[\"remove_tags\"])\nif hasattr(form, \"save_relationships\") and callable(form.save_relationships):\n# Add/remove relationship associations\nform.save_relationships(instance=obj, nullified_fields=nullified_fields)\nif hasattr(form, \"save_note\") and callable(form.save_note):\nform.save_note(instance=obj, user=request.user)\n# Enforce object-level permissions\nif self.queryset.filter(pk__in=[obj.pk for obj in updated_objects]).count() != len(\nupdated_objects\n):\nraise ObjectDoesNotExist\nif updated_objects:\nmsg = f\"Updated {len(updated_objects)} {model._meta.verbose_name_plural}\"\nlogger.info(msg)\nmessages.success(self.request, msg)\nreturn redirect(self.get_return_url(request))\nexcept ValidationError as e:\nmessages.error(self.request, f\"{obj} failed validation: {e}\")\nexcept ObjectDoesNotExist:\nmsg = \"Object update failed due to object-level permissions violation\"\nlogger.debug(msg)\nform.add_error(None, msg)\nelse:\nlogger.debug(\"Form validation failed\")\nelse:\n# Include the PK list as initial data for the form\ninitial_data = {\"pk\": pk_list}\n# Check for other contextual data needed for the form. We avoid passing all of request.GET because the\n# filter values will conflict with the bulk edit form fields.\n# TODO: Find a better way to accomplish this\nif \"device\" in request.GET:\ninitial_data[\"device\"] = request.GET.get(\"device\")\nelif \"device_type\" in request.GET:\ninitial_data[\"device_type\"] = request.GET.get(\"device_type\")\nform = self.form(model, initial=initial_data)\nrestrict_form_fields(form, request.user)\n# Retrieve objects being edited\ntable = self.table(self.queryset.filter(pk__in=pk_list), orderable=False)\nif not table.rows:\nmessages.warning(request, f\"No {model._meta.verbose_name_plural} were selected.\")\nreturn redirect(self.get_return_url(request))\ncontext = {\n\"form\": form,\n\"table\": table,\n\"obj_type_plural\": model._meta.verbose_name_plural,\n\"return_url\": self.get_return_url(request),\n}\ncontext.update(self.extra_context())\nreturn render(request, self.template_name, context)\ndef extra_context(self):\nreturn {}\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.BulkImportView","title":"<code>nautobot.apps.views.BulkImportView</code>","text":"<p>             Bases: <code>GetReturnURLMixin</code>, <code>ObjectPermissionRequiredMixin</code>, <code>View</code></p> <p>Import objects in bulk (CSV format).</p> <p>queryset: Base queryset for the model table: The django-tables2 Table used to render the list of imported objects template_name: The name of the template</p> Source code in <code>nautobot/core/views/generic.py</code> <pre><code>class BulkImportView(GetReturnURLMixin, ObjectPermissionRequiredMixin, View):\n\"\"\"\n    Import objects in bulk (CSV format).\n    queryset: Base queryset for the model\n    table: The django-tables2 Table used to render the list of imported objects\n    template_name: The name of the template\n    \"\"\"\nqueryset = None\ntable = None\ntemplate_name = \"generic/object_bulk_import.html\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.serializer_class = get_serializer_for_model(self.queryset.model)\nself.fields = get_csv_form_fields_from_serializer_class(self.serializer_class)\nself.required_field_names = [\nfield[\"name\"]\nfor field in get_csv_form_fields_from_serializer_class(self.serializer_class)\nif field[\"required\"]\n]\ndef _import_form(self, *args, **kwargs):\nclass CSVImportForm(BootstrapMixin, Form):\ncsv_data = CSVDataField(required_field_names=self.required_field_names)\ncsv_file = CSVFileField()\nreturn CSVImportForm(*args, **kwargs)\ndef get_required_permission(self):\nreturn get_permission_for_model(self.queryset.model, \"add\")\ndef get(self, request):\nreturn render(\nrequest,\nself.template_name,\n{\n\"form\": self._import_form(),\n\"fields\": self.fields,\n\"obj_type\": self.queryset.model._meta.verbose_name,\n\"return_url\": self.get_return_url(request),\n\"active_tab\": \"csv-data\",\n},\n)\ndef post(self, request):\nlogger = logging.getLogger(__name__ + \".BulkImportView\")\nnew_objs = []\nform = self._import_form(request.POST, request.FILES)\nif form.is_valid():\nlogger.debug(\"Form validation was successful\")\ntry:\n# Iterate through CSV data and bind each row to a new model form instance.\nwith transaction.atomic():\nif request.FILES:\nfield_name = \"csv_file\"\nelse:\nfield_name = \"csv_data\"\ncsvtext = form.cleaned_data[field_name]\ntry:\ndata = NautobotCSVParser().parse(\nstream=BytesIO(csvtext.encode(\"utf-8\")),\nparser_context={\"request\": request, \"serializer_class\": self.serializer_class},\n)\nserializer = self.serializer_class(data=data, context={\"request\": request}, many=True)\nif serializer.is_valid():\nnew_objs = serializer.save()\nelse:\nfor row, errors in enumerate(serializer.errors, start=1):\nfor field, err in errors.items():\nform.add_error(field_name, f\"Row {row}: {field}: {err[0]}\")\nraise ValidationError(\"\")\nexcept ParseError as exc:\nform.add_error(None, str(exc))\nraise ValidationError(\"\")\n# Enforce object-level permissions\nif self.queryset.filter(pk__in=[obj.pk for obj in new_objs]).count() != len(new_objs):\nraise ObjectDoesNotExist\n# Compile a table containing the imported objects\nobj_table = self.table(new_objs)\nif new_objs:\nmsg = f\"Imported {len(new_objs)} {new_objs[0]._meta.verbose_name_plural}\"\nlogger.info(msg)\nmessages.success(request, msg)\nreturn render(\nrequest,\n\"import_success.html\",\n{\n\"table\": obj_table,\n\"return_url\": self.get_return_url(request),\n},\n)\nexcept ValidationError:\npass\nexcept ObjectDoesNotExist:\nmsg = \"Object import failed due to object-level permissions violation\"\nlogger.debug(msg)\nform.add_error(None, msg)\nelse:\nlogger.debug(\"Form validation failed\")\nreturn render(\nrequest,\nself.template_name,\n{\n\"form\": form,\n\"fields\": self.fields,\n\"obj_type\": self.queryset.model._meta.verbose_name,\n\"return_url\": self.get_return_url(request),\n\"active_tab\": \"csv-file\" if form.has_error(\"csv_file\") else \"csv-data\",\n},\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.BulkRenameView","title":"<code>nautobot.apps.views.BulkRenameView</code>","text":"<p>             Bases: <code>GetReturnURLMixin</code>, <code>ObjectPermissionRequiredMixin</code>, <code>View</code></p> <p>An extendable view for renaming objects in bulk.</p> Source code in <code>nautobot/core/views/generic.py</code> <pre><code>class BulkRenameView(GetReturnURLMixin, ObjectPermissionRequiredMixin, View):\n\"\"\"\n    An extendable view for renaming objects in bulk.\n    \"\"\"\nqueryset = None\ntemplate_name = \"generic/object_bulk_rename.html\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\n# Create a new Form class from BulkRenameForm\nclass _Form(BulkRenameForm):\npk = ModelMultipleChoiceField(queryset=self.queryset, widget=MultipleHiddenInput())\nself.form = _Form\ndef get_required_permission(self):\nreturn get_permission_for_model(self.queryset.model, \"change\")\ndef post(self, request):\nlogger = logging.getLogger(__name__ + \".BulkRenameView\")\nquery_pks = request.POST.getlist(\"pk\")\nselected_objects = self.queryset.filter(pk__in=query_pks) if query_pks else None\n# selected_objects would return False; if no query_pks or invalid query_pks\nif not selected_objects:\nmessages.warning(request, f\"No valid {self.queryset.model._meta.verbose_name_plural} were selected.\")\nreturn redirect(self.get_return_url(request))\nif \"_preview\" in request.POST or \"_apply\" in request.POST:\nform = self.form(request.POST, initial={\"pk\": query_pks})\nif form.is_valid():\ntry:\nwith transaction.atomic():\nrenamed_pks = []\nfor obj in selected_objects:\nfind = form.cleaned_data[\"find\"]\nreplace = form.cleaned_data[\"replace\"]\nif form.cleaned_data[\"use_regex\"]:\ntry:\nobj.new_name = re.sub(find, replace, obj.name)\n# Catch regex group reference errors\nexcept re.error:\nobj.new_name = obj.name\nelse:\nobj.new_name = obj.name.replace(find, replace)\nrenamed_pks.append(obj.pk)\nif \"_apply\" in request.POST:\nfor obj in selected_objects:\nobj.name = obj.new_name\nobj.save()\n# Enforce constrained permissions\nif self.queryset.filter(pk__in=renamed_pks).count() != len(selected_objects):\nraise ObjectDoesNotExist\nmessages.success(\nrequest,\nf\"Renamed {len(selected_objects)} {self.queryset.model._meta.verbose_name_plural}\",\n)\nreturn redirect(self.get_return_url(request))\nexcept ObjectDoesNotExist:\nmsg = \"Object update failed due to object-level permissions violation\"\nlogger.debug(msg)\nform.add_error(None, msg)\nelse:\nform = self.form(initial={\"pk\": query_pks})\nreturn render(\nrequest,\nself.template_name,\n{\n\"form\": form,\n\"obj_type_plural\": self.queryset.model._meta.verbose_name_plural,\n\"selected_objects\": selected_objects,\n\"return_url\": self.get_return_url(request),\n\"parent_name\": self.get_selected_objects_parents_name(selected_objects),\n},\n)\ndef get_selected_objects_parents_name(self, selected_objects):\n\"\"\"\n        Return selected_objects parent name.\n        This method is intended to be overridden by child classes to return the parent name of the selected objects.\n        Args:\n            selected_objects (list[BaseModel]): The objects being renamed\n        Returns:\n            (str): The parent name of the selected objects\n        \"\"\"\nreturn \"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.generic.BulkRenameView.get_selected_objects_parents_name","title":"<code>get_selected_objects_parents_name(selected_objects)</code>","text":"<p>Return selected_objects parent name.</p> <p>This method is intended to be overridden by child classes to return the parent name of the selected objects.</p> <p>Parameters:</p> Name Type Description Default <code>selected_objects</code> <code>list[BaseModel]</code> <p>The objects being renamed</p> required <p>Returns:</p> Type Description <code>str</code> <p>The parent name of the selected objects</p> Source code in <code>nautobot/core/views/generic.py</code> <pre><code>def get_selected_objects_parents_name(self, selected_objects):\n\"\"\"\n    Return selected_objects parent name.\n    This method is intended to be overridden by child classes to return the parent name of the selected objects.\n    Args:\n        selected_objects (list[BaseModel]): The objects being renamed\n    Returns:\n        (str): The parent name of the selected objects\n    \"\"\"\nreturn \"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.ComponentCreateView","title":"<code>nautobot.apps.views.ComponentCreateView</code>","text":"<p>             Bases: <code>GetReturnURLMixin</code>, <code>ObjectPermissionRequiredMixin</code>, <code>View</code></p> <p>Add one or more components (e.g. interfaces, console ports, etc.) to a Device or VirtualMachine.</p> Source code in <code>nautobot/core/views/generic.py</code> <pre><code>class ComponentCreateView(GetReturnURLMixin, ObjectPermissionRequiredMixin, View):\n\"\"\"\n    Add one or more components (e.g. interfaces, console ports, etc.) to a Device or VirtualMachine.\n    \"\"\"\nqueryset = None\nform = None\nmodel_form = None\ntemplate_name = None\ndef get_required_permission(self):\nreturn get_permission_for_model(self.queryset.model, \"add\")\ndef get(self, request):\nform = self.form(initial=request.GET)\nmodel_form = self.model_form(request.GET)\nreturn render(\nrequest,\nself.template_name,\n{\n\"component_type\": self.queryset.model._meta.verbose_name,\n\"model_form\": model_form,\n\"form\": form,\n\"return_url\": self.get_return_url(request),\n},\n)\ndef post(self, request):\nlogger = logging.getLogger(__name__ + \".ComponentCreateView\")\nform = self.form(request.POST, initial=request.GET)\nmodel_form = self.model_form(request.POST)\nif form.is_valid():\nnew_components = []\ndata = deepcopy(request.POST)\nnames = form.cleaned_data[\"name_pattern\"]\nlabels = form.cleaned_data.get(\"label_pattern\")\nfor i, name in enumerate(names):\nlabel = labels[i] if labels else None\n# Initialize the individual component form\ndata[\"name\"] = name\ndata[\"label\"] = label\nif hasattr(form, \"get_iterative_data\"):\ndata.update(form.get_iterative_data(i))\ncomponent_form = self.model_form(data)\nif component_form.is_valid():\nnew_components.append(component_form)\nelse:\nfor field, errors in component_form.errors.as_data().items():\n# Assign errors on the child form's name/label field to name_pattern/label_pattern on the parent form\nif field == \"name\":\nfield = \"name_pattern\"\nelif field == \"label\":\nfield = \"label_pattern\"\nfor e in errors:\nerr_str = \", \".join(e)\nform.add_error(field, f\"{name}: {err_str}\")\nif not form.errors:\ntry:\nwith transaction.atomic():\n# Create the new components\nnew_objs = []\nfor component_form in new_components:\nobj = component_form.save()\nnew_objs.append(obj)\n# Enforce object-level permissions\nif self.queryset.filter(pk__in=[obj.pk for obj in new_objs]).count() != len(new_objs):\nraise ObjectDoesNotExist\nmessages.success(\nrequest,\nf\"Added {len(new_components)} {self.queryset.model._meta.verbose_name_plural}\",\n)\nif \"_addanother\" in request.POST:\nreturn redirect(request.get_full_path())\nelse:\nreturn redirect(self.get_return_url(request))\nexcept ObjectDoesNotExist:\nmsg = \"Component creation failed due to object-level permissions violation\"\nlogger.debug(msg)\nform.add_error(None, msg)\nreturn render(\nrequest,\nself.template_name,\n{\n\"component_type\": self.queryset.model._meta.verbose_name,\n\"form\": form,\n\"model_form\": model_form,\n\"return_url\": self.get_return_url(request),\n},\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.ContentTypePermissionRequiredMixin","title":"<code>nautobot.apps.views.ContentTypePermissionRequiredMixin</code>","text":"<p>             Bases: <code>AccessMixin</code></p> <p>Similar to Django's built-in PermissionRequiredMixin, but extended to check model-level permission assignments. This is related to ObjectPermissionRequiredMixin, except that is does not enforce object-level permissions, and fits within Nautobot's custom permission enforcement system.</p> An optional iterable of statically declared permissions to evaluate in addition to those <p>derived from the object type</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>class ContentTypePermissionRequiredMixin(AccessMixin):\n\"\"\"\n    Similar to Django's built-in PermissionRequiredMixin, but extended to check model-level permission assignments.\n    This is related to ObjectPermissionRequiredMixin, except that is does not enforce object-level permissions,\n    and fits within Nautobot's custom permission enforcement system.\n    additional_permissions: An optional iterable of statically declared permissions to evaluate in addition to those\n                            derived from the object type\n    \"\"\"\nadditional_permissions = []\ndef get_required_permission(self):\n\"\"\"\n        Return the specific permission necessary to perform the requested action on an object.\n        \"\"\"\nraise NotImplementedError(f\"{self.__class__.__name__} must implement get_required_permission()\")\ndef has_permission(self):\nuser = self.request.user\npermission_required = self.get_required_permission()\n# Check that the user has been granted the required permission(s).\nif user.has_perms((permission_required, *self.additional_permissions)):\nreturn True\nreturn False\ndef dispatch(self, request, *args, **kwargs):\nif not self.has_permission():\nreturn self.handle_no_permission()\nreturn super().dispatch(request, *args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ContentTypePermissionRequiredMixin.get_required_permission","title":"<code>get_required_permission()</code>","text":"<p>Return the specific permission necessary to perform the requested action on an object.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def get_required_permission(self):\n\"\"\"\n    Return the specific permission necessary to perform the requested action on an object.\n    \"\"\"\nraise NotImplementedError(f\"{self.__class__.__name__} must implement get_required_permission()\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.GetReturnURLMixin","title":"<code>nautobot.apps.views.GetReturnURLMixin</code>","text":"<p>Provides logic for determining where a user should be redirected after processing a form.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>class GetReturnURLMixin:\n\"\"\"\n    Provides logic for determining where a user should be redirected after processing a form.\n    \"\"\"\ndefault_return_url = None\ndef get_return_url(self, request, obj=None):\n# First, see if `return_url` was specified as a query parameter or form data. Use this URL only if it's\n# considered safe.\nquery_param = request.GET.get(\"return_url\") or request.POST.get(\"return_url\")\nif query_param and is_safe_url(url=query_param, allowed_hosts=request.get_host()):\nreturn query_param\n# Next, check if the object being modified (if any) has an absolute URL.\n# Note that the use of both `obj.present_in_database` and `obj.pk` is correct here because this conditional\n# handles all three of the create, update, and delete operations. When Django deletes an instance\n# from the DB, it sets the instance's PK field to None, regardless of the use of a UUID.\ntry:\nif obj is not None and obj.present_in_database and obj.pk:\nreturn obj.get_absolute_url()\nexcept AttributeError:\n# Model has no get_absolute_url() method or no reverse match\npass\n# Fall back to the default URL (if specified) for the view.\nif self.default_return_url is not None:\nreturn reverse(self.default_return_url)\n# Attempt to dynamically resolve the list view for the object\nif hasattr(self, \"queryset\"):\ntry:\nreturn reverse(lookup.get_route_for_model(self.queryset.model, \"list\"))\nexcept NoReverseMatch:\npass\n# If all else fails, return home. Ideally this should never happen.\nreturn reverse(\"home\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.NautobotHTMLRenderer","title":"<code>nautobot.apps.views.NautobotHTMLRenderer</code>","text":"<p>             Bases: <code>renderers.BrowsableAPIRenderer</code></p> <p>Inherited from BrowsableAPIRenderer to do most of the heavy lifting for getting the context needed for templates and template rendering.</p> Source code in <code>nautobot/core/views/renderers.py</code> <pre><code>class NautobotHTMLRenderer(renderers.BrowsableAPIRenderer):\n\"\"\"\n    Inherited from BrowsableAPIRenderer to do most of the heavy lifting for getting the context needed for templates and template rendering.\n    \"\"\"\n# Log error messages within NautobotHTMLRenderer\nlogger = logging.getLogger(__name__)\ndef get_dynamic_filter_form(self, view, request, *args, filterset_class=None, **kwargs):\n\"\"\"\n        Helper function to obtain the filter_form_class,\n        and then initialize and return the filter_form used in the ObjectListView UI.\n        \"\"\"\nfactory_formset_params = {}\nfilterset = None\nif filterset_class:\nfilterset = filterset_class()\nfactory_formset_params = convert_querydict_to_factory_formset_acceptable_querydict(request.GET, filterset)\nreturn DynamicFilterFormSet(filterset=filterset, data=factory_formset_params)\ndef construct_user_permissions(self, request, model):\n\"\"\"\n        Helper function to gather the user's permissions to add, change, delete and view the model,\n        and then render the action buttons accordingly allowed in the ObjectListView UI.\n        \"\"\"\npermissions = {}\nfor action in (\"add\", \"change\", \"delete\", \"view\"):\nperm_name = get_permission_for_model(model, action)\npermissions[action] = request.user.has_perm(perm_name)\nreturn permissions\ndef construct_table(self, view, **kwargs):\n\"\"\"\n        Helper function to construct and paginate the table for rendering used in the ObjectListView, ObjectBulkUpdateView and ObjectBulkDestroyView.\n        \"\"\"\ntable_class = view.get_table_class()\nrequest = kwargs.get(\"request\", view.request)\nqueryset = view.alter_queryset(request)\nif view.action in [\"list\", \"notes\", \"changelog\"]:\nif view.action == \"list\":\npermissions = kwargs.get(\"permissions\", {})\ntable = table_class(queryset, user=request.user)\nif \"pk\" in table.base_columns and (permissions[\"change\"] or permissions[\"delete\"]):\ntable.columns.show(\"pk\")\nelif view.action == \"notes\":\nobj = kwargs.get(\"object\")\ntable = table_class(obj.notes, user=request.user)\nelif view.action == \"changelog\":\nobj = kwargs.get(\"object\")\ncontent_type = kwargs.get(\"content_type\")\nobjectchanges = (\nObjectChange.objects.restrict(request.user, \"view\")\n.prefetch_related(\"user\", \"changed_object_type\")\n.filter(\nQ(changed_object_type=content_type, changed_object_id=obj.pk)\n| Q(related_object_type=content_type, related_object_id=obj.pk)\n)\n)\ntable = table_class(data=objectchanges, orderable=False)\n# Apply the request context\npaginate = {\n\"paginator_class\": EnhancedPaginator,\n\"per_page\": get_paginate_count(request),\n}\nmax_page_size = get_settings_or_config(\"MAX_PAGE_SIZE\")\nif max_page_size and paginate[\"per_page\"] &gt; max_page_size:\nmessages.warning(\nrequest,\nf'Requested \"per_page\" is too large. No more than {max_page_size} items may be displayed at a time.',\n)\nreturn RequestConfig(request, paginate).configure(table)\nelse:\npk_list = kwargs.get(\"pk_list\", [])\ntable = table_class(queryset.filter(pk__in=pk_list), orderable=False)\nreturn table\ndef validate_action_buttons(self, view, request):\n\"\"\"Verify actions in self.action_buttons are valid view actions.\"\"\"\nqueryset = view.alter_queryset(request)\nalways_valid_actions = (\"export\",)\nvalid_actions = []\ninvalid_actions = []\n# added check for whether the action_buttons exist because of issue #2107\nif view.action_buttons is None:\nview.action_buttons = []\nfor action in view.action_buttons:\nif action in always_valid_actions or validated_viewname(queryset.model, action) is not None:\nvalid_actions.append(action)\nelse:\ninvalid_actions.append(action)\nif invalid_actions:\nmessages.error(request, f\"Missing views for action(s) {', '.join(invalid_actions)}\")\nreturn valid_actions\ndef get_context(self, data, accepted_media_type, renderer_context):\n\"\"\"\n        Override get_context() from BrowsableAPIRenderer to obtain the context data we need to render our templates.\n        context variable contains template context needed to render Nautobot generic templates / circuits templates.\n        Override this function to add additional key/value pair to pass it to your templates.\n        \"\"\"\nif renderer_context is None:\n# renderer_context content is automatically provided with the view returning the Response({}) object.\n# The only way renderer_context is None if the user directly calls it from the renderer without a view.\nself.logger.debug(\n\"renderer_context is None, please do not directly call get_context() from NautobotHTMLRenderer without specifying the view.\"\n)\nreturn {}\nview = renderer_context[\"view\"]\nrequest = renderer_context[\"request\"]\n# Check if queryset attribute is set before doing anything\nqueryset = view.alter_queryset(request)\nmodel = queryset.model\nform_class = view.get_form_class()\ncontent_type = ContentType.objects.get_for_model(model)\nform = None\ntable = None\nsearch_form = None\ninstance = None\nfilter_form = None\ndisplay_filter_params = []\n# Compile a dictionary indicating which permissions are available to the current user for this model\npermissions = self.construct_user_permissions(request, model)\nif view.action in [\"create\", \"retrieve\", \"update\", \"destroy\", \"changelog\", \"notes\"]:\ninstance = view.get_object()\nreturn_url = view.get_return_url(request, instance)\nelse:\nreturn_url = view.get_return_url(request)\n# Get form for context rendering according to view.action unless it is previously set.\n# A form will be passed in from the views if the form has errors.\nif data.get(\"form\"):\nform = data[\"form\"]\nelse:\nif view.action == \"list\":\nif view.filterset_class is not None:\nview.queryset = view.filter_queryset(queryset)\nif view.filterset is not None:\nfilterset_filters = view.filterset.filters\nelse:\nfilterset_filters = view.filterset.get_filters()\ndisplay_filter_params = [\ncheck_filter_for_display(filterset_filters, field_name, values)\nfor field_name, values in view.filter_params.items()\n]\nif view.filterset_form_class is not None:\nfilter_form = view.filterset_form_class(request.GET, label_suffix=\"\")\ntable = self.construct_table(view, request=request, permissions=permissions)\nsearch_form = SearchForm(data=request.GET)\nelif view.action == \"destroy\":\nform = form_class(initial=request.GET)\nelif view.action in [\"create\", \"update\"]:\ninitial_data = normalize_querydict(request.GET, form_class=form_class)\nform = form_class(instance=instance, initial=initial_data)\nrestrict_form_fields(form, request.user)\nelif view.action == \"bulk_destroy\":\npk_list = getattr(view, \"pk_list\", [])\nif pk_list:\ninitial = {\n\"pk\": pk_list,\n\"return_url\": return_url,\n}\nform = form_class(initial=initial)\ntable = self.construct_table(view, pk_list=pk_list)\nelif view.action == \"bulk_create\":\nform = view.get_form()\nif request.data:\ntable = data.get(\"table\")\nelif view.action == \"bulk_update\":\npk_list = getattr(view, \"pk_list\", [])\nif pk_list:\ninitial_data = {\"pk\": pk_list}\nform = form_class(model, initial=initial_data)\nrestrict_form_fields(form, request.user)\ntable = self.construct_table(view, pk_list=pk_list)\nelif view.action == \"notes\":\ninitial_data = {\n\"assigned_object_type\": content_type,\n\"assigned_object_id\": instance.pk,\n}\nform = form_class(initial=initial_data)\ntable = self.construct_table(view, object=instance)\nelif view.action == \"changelog\":\ntable = self.construct_table(view, object=instance, content_type=content_type)\ncontext = {\n\"content_type\": content_type,\n\"form\": form,\n\"filter_form\": filter_form,\n\"dynamic_filter_form\": self.get_dynamic_filter_form(view, request, filterset_class=view.filterset_class),\n\"search_form\": search_form,\n\"filter_params\": display_filter_params,\n\"object\": instance,\n\"obj\": instance,  # NOTE: This context key is deprecated in favor of `object`.\n\"obj_type\": queryset.model._meta.verbose_name,  # NOTE: This context key is deprecated in favor of `verbose_name`.\n\"obj_type_plural\": queryset.model._meta.verbose_name_plural,  # NOTE: This context key is deprecated in favor of `verbose_name_plural`.\n\"permissions\": permissions,\n\"return_url\": return_url,\n\"table\": table if table is not None else data.get(\"table\", None),\n\"table_config_form\": TableConfigForm(table=table) if table else None,\n\"verbose_name\": queryset.model._meta.verbose_name,\n\"verbose_name_plural\": queryset.model._meta.verbose_name_plural,\n}\nif view.action == \"retrieve\":\ncontext.update(view.get_extra_context(request, instance))\nelse:\nif view.action == \"list\":\n# Construct valid actions for list view.\nvalid_actions = self.validate_action_buttons(view, request)\ncontext.update(\n{\n\"action_buttons\": valid_actions,\n\"list_url\": validated_viewname(model, \"list\"),\n\"title\": bettertitle(model._meta.verbose_name_plural),\n}\n)\nelif view.action in [\"create\", \"update\"]:\ncontext.update(\n{\n\"editing\": instance.present_in_database,\n}\n)\nelif view.action == \"bulk_create\":\ncontext.update(\n{\n\"active_tab\": view.bulk_create_active_tab if view.bulk_create_active_tab else \"csv-data\",\n\"fields\": get_csv_form_fields_from_serializer_class(view.serializer_class),\n}\n)\nelif view.action in [\"changelog\", \"notes\"]:\ncontext.update(\n{\n\"base_template\": get_base_template(data.get(\"base_template\"), model),\n\"active_tab\": view.action,\n}\n)\ncontext.update(view.get_extra_context(request, instance=None))\nreturn context\ndef render(self, data, accepted_media_type=None, renderer_context=None):\n\"\"\"\n        Overrode render() from BrowsableAPIRenderer to set self.template with NautobotViewSet's get_template_name() before it is rendered.\n        \"\"\"\nview = renderer_context[\"view\"]\n# Get the corresponding template based on self.action in view.get_template_name() unless it is already specified in the Response() data.\n# See form_valid() for self.action == \"bulk_create\".\nself.template = data.get(\"template\", view.get_template_name())\n# NautobotUIViewSets pass \"use_new_ui\" in context as they share the same class and are just different methods\nself.use_new_ui = data.get(\"use_new_ui\", False)\nreturn super().render(data, accepted_media_type=accepted_media_type, renderer_context=renderer_context)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.renderers.NautobotHTMLRenderer.construct_table","title":"<code>construct_table(view, **kwargs)</code>","text":"<p>Helper function to construct and paginate the table for rendering used in the ObjectListView, ObjectBulkUpdateView and ObjectBulkDestroyView.</p> Source code in <code>nautobot/core/views/renderers.py</code> <pre><code>def construct_table(self, view, **kwargs):\n\"\"\"\n    Helper function to construct and paginate the table for rendering used in the ObjectListView, ObjectBulkUpdateView and ObjectBulkDestroyView.\n    \"\"\"\ntable_class = view.get_table_class()\nrequest = kwargs.get(\"request\", view.request)\nqueryset = view.alter_queryset(request)\nif view.action in [\"list\", \"notes\", \"changelog\"]:\nif view.action == \"list\":\npermissions = kwargs.get(\"permissions\", {})\ntable = table_class(queryset, user=request.user)\nif \"pk\" in table.base_columns and (permissions[\"change\"] or permissions[\"delete\"]):\ntable.columns.show(\"pk\")\nelif view.action == \"notes\":\nobj = kwargs.get(\"object\")\ntable = table_class(obj.notes, user=request.user)\nelif view.action == \"changelog\":\nobj = kwargs.get(\"object\")\ncontent_type = kwargs.get(\"content_type\")\nobjectchanges = (\nObjectChange.objects.restrict(request.user, \"view\")\n.prefetch_related(\"user\", \"changed_object_type\")\n.filter(\nQ(changed_object_type=content_type, changed_object_id=obj.pk)\n| Q(related_object_type=content_type, related_object_id=obj.pk)\n)\n)\ntable = table_class(data=objectchanges, orderable=False)\n# Apply the request context\npaginate = {\n\"paginator_class\": EnhancedPaginator,\n\"per_page\": get_paginate_count(request),\n}\nmax_page_size = get_settings_or_config(\"MAX_PAGE_SIZE\")\nif max_page_size and paginate[\"per_page\"] &gt; max_page_size:\nmessages.warning(\nrequest,\nf'Requested \"per_page\" is too large. No more than {max_page_size} items may be displayed at a time.',\n)\nreturn RequestConfig(request, paginate).configure(table)\nelse:\npk_list = kwargs.get(\"pk_list\", [])\ntable = table_class(queryset.filter(pk__in=pk_list), orderable=False)\nreturn table\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.renderers.NautobotHTMLRenderer.construct_user_permissions","title":"<code>construct_user_permissions(request, model)</code>","text":"<p>Helper function to gather the user's permissions to add, change, delete and view the model, and then render the action buttons accordingly allowed in the ObjectListView UI.</p> Source code in <code>nautobot/core/views/renderers.py</code> <pre><code>def construct_user_permissions(self, request, model):\n\"\"\"\n    Helper function to gather the user's permissions to add, change, delete and view the model,\n    and then render the action buttons accordingly allowed in the ObjectListView UI.\n    \"\"\"\npermissions = {}\nfor action in (\"add\", \"change\", \"delete\", \"view\"):\nperm_name = get_permission_for_model(model, action)\npermissions[action] = request.user.has_perm(perm_name)\nreturn permissions\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.renderers.NautobotHTMLRenderer.get_context","title":"<code>get_context(data, accepted_media_type, renderer_context)</code>","text":"<p>Override get_context() from BrowsableAPIRenderer to obtain the context data we need to render our templates. context variable contains template context needed to render Nautobot generic templates / circuits templates. Override this function to add additional key/value pair to pass it to your templates.</p> Source code in <code>nautobot/core/views/renderers.py</code> <pre><code>def get_context(self, data, accepted_media_type, renderer_context):\n\"\"\"\n    Override get_context() from BrowsableAPIRenderer to obtain the context data we need to render our templates.\n    context variable contains template context needed to render Nautobot generic templates / circuits templates.\n    Override this function to add additional key/value pair to pass it to your templates.\n    \"\"\"\nif renderer_context is None:\n# renderer_context content is automatically provided with the view returning the Response({}) object.\n# The only way renderer_context is None if the user directly calls it from the renderer without a view.\nself.logger.debug(\n\"renderer_context is None, please do not directly call get_context() from NautobotHTMLRenderer without specifying the view.\"\n)\nreturn {}\nview = renderer_context[\"view\"]\nrequest = renderer_context[\"request\"]\n# Check if queryset attribute is set before doing anything\nqueryset = view.alter_queryset(request)\nmodel = queryset.model\nform_class = view.get_form_class()\ncontent_type = ContentType.objects.get_for_model(model)\nform = None\ntable = None\nsearch_form = None\ninstance = None\nfilter_form = None\ndisplay_filter_params = []\n# Compile a dictionary indicating which permissions are available to the current user for this model\npermissions = self.construct_user_permissions(request, model)\nif view.action in [\"create\", \"retrieve\", \"update\", \"destroy\", \"changelog\", \"notes\"]:\ninstance = view.get_object()\nreturn_url = view.get_return_url(request, instance)\nelse:\nreturn_url = view.get_return_url(request)\n# Get form for context rendering according to view.action unless it is previously set.\n# A form will be passed in from the views if the form has errors.\nif data.get(\"form\"):\nform = data[\"form\"]\nelse:\nif view.action == \"list\":\nif view.filterset_class is not None:\nview.queryset = view.filter_queryset(queryset)\nif view.filterset is not None:\nfilterset_filters = view.filterset.filters\nelse:\nfilterset_filters = view.filterset.get_filters()\ndisplay_filter_params = [\ncheck_filter_for_display(filterset_filters, field_name, values)\nfor field_name, values in view.filter_params.items()\n]\nif view.filterset_form_class is not None:\nfilter_form = view.filterset_form_class(request.GET, label_suffix=\"\")\ntable = self.construct_table(view, request=request, permissions=permissions)\nsearch_form = SearchForm(data=request.GET)\nelif view.action == \"destroy\":\nform = form_class(initial=request.GET)\nelif view.action in [\"create\", \"update\"]:\ninitial_data = normalize_querydict(request.GET, form_class=form_class)\nform = form_class(instance=instance, initial=initial_data)\nrestrict_form_fields(form, request.user)\nelif view.action == \"bulk_destroy\":\npk_list = getattr(view, \"pk_list\", [])\nif pk_list:\ninitial = {\n\"pk\": pk_list,\n\"return_url\": return_url,\n}\nform = form_class(initial=initial)\ntable = self.construct_table(view, pk_list=pk_list)\nelif view.action == \"bulk_create\":\nform = view.get_form()\nif request.data:\ntable = data.get(\"table\")\nelif view.action == \"bulk_update\":\npk_list = getattr(view, \"pk_list\", [])\nif pk_list:\ninitial_data = {\"pk\": pk_list}\nform = form_class(model, initial=initial_data)\nrestrict_form_fields(form, request.user)\ntable = self.construct_table(view, pk_list=pk_list)\nelif view.action == \"notes\":\ninitial_data = {\n\"assigned_object_type\": content_type,\n\"assigned_object_id\": instance.pk,\n}\nform = form_class(initial=initial_data)\ntable = self.construct_table(view, object=instance)\nelif view.action == \"changelog\":\ntable = self.construct_table(view, object=instance, content_type=content_type)\ncontext = {\n\"content_type\": content_type,\n\"form\": form,\n\"filter_form\": filter_form,\n\"dynamic_filter_form\": self.get_dynamic_filter_form(view, request, filterset_class=view.filterset_class),\n\"search_form\": search_form,\n\"filter_params\": display_filter_params,\n\"object\": instance,\n\"obj\": instance,  # NOTE: This context key is deprecated in favor of `object`.\n\"obj_type\": queryset.model._meta.verbose_name,  # NOTE: This context key is deprecated in favor of `verbose_name`.\n\"obj_type_plural\": queryset.model._meta.verbose_name_plural,  # NOTE: This context key is deprecated in favor of `verbose_name_plural`.\n\"permissions\": permissions,\n\"return_url\": return_url,\n\"table\": table if table is not None else data.get(\"table\", None),\n\"table_config_form\": TableConfigForm(table=table) if table else None,\n\"verbose_name\": queryset.model._meta.verbose_name,\n\"verbose_name_plural\": queryset.model._meta.verbose_name_plural,\n}\nif view.action == \"retrieve\":\ncontext.update(view.get_extra_context(request, instance))\nelse:\nif view.action == \"list\":\n# Construct valid actions for list view.\nvalid_actions = self.validate_action_buttons(view, request)\ncontext.update(\n{\n\"action_buttons\": valid_actions,\n\"list_url\": validated_viewname(model, \"list\"),\n\"title\": bettertitle(model._meta.verbose_name_plural),\n}\n)\nelif view.action in [\"create\", \"update\"]:\ncontext.update(\n{\n\"editing\": instance.present_in_database,\n}\n)\nelif view.action == \"bulk_create\":\ncontext.update(\n{\n\"active_tab\": view.bulk_create_active_tab if view.bulk_create_active_tab else \"csv-data\",\n\"fields\": get_csv_form_fields_from_serializer_class(view.serializer_class),\n}\n)\nelif view.action in [\"changelog\", \"notes\"]:\ncontext.update(\n{\n\"base_template\": get_base_template(data.get(\"base_template\"), model),\n\"active_tab\": view.action,\n}\n)\ncontext.update(view.get_extra_context(request, instance=None))\nreturn context\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.renderers.NautobotHTMLRenderer.get_dynamic_filter_form","title":"<code>get_dynamic_filter_form(view, request, *args, filterset_class=None, **kwargs)</code>","text":"<p>Helper function to obtain the filter_form_class, and then initialize and return the filter_form used in the ObjectListView UI.</p> Source code in <code>nautobot/core/views/renderers.py</code> <pre><code>def get_dynamic_filter_form(self, view, request, *args, filterset_class=None, **kwargs):\n\"\"\"\n    Helper function to obtain the filter_form_class,\n    and then initialize and return the filter_form used in the ObjectListView UI.\n    \"\"\"\nfactory_formset_params = {}\nfilterset = None\nif filterset_class:\nfilterset = filterset_class()\nfactory_formset_params = convert_querydict_to_factory_formset_acceptable_querydict(request.GET, filterset)\nreturn DynamicFilterFormSet(filterset=filterset, data=factory_formset_params)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.renderers.NautobotHTMLRenderer.render","title":"<code>render(data, accepted_media_type=None, renderer_context=None)</code>","text":"<p>Overrode render() from BrowsableAPIRenderer to set self.template with NautobotViewSet's get_template_name() before it is rendered.</p> Source code in <code>nautobot/core/views/renderers.py</code> <pre><code>def render(self, data, accepted_media_type=None, renderer_context=None):\n\"\"\"\n    Overrode render() from BrowsableAPIRenderer to set self.template with NautobotViewSet's get_template_name() before it is rendered.\n    \"\"\"\nview = renderer_context[\"view\"]\n# Get the corresponding template based on self.action in view.get_template_name() unless it is already specified in the Response() data.\n# See form_valid() for self.action == \"bulk_create\".\nself.template = data.get(\"template\", view.get_template_name())\n# NautobotUIViewSets pass \"use_new_ui\" in context as they share the same class and are just different methods\nself.use_new_ui = data.get(\"use_new_ui\", False)\nreturn super().render(data, accepted_media_type=accepted_media_type, renderer_context=renderer_context)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.renderers.NautobotHTMLRenderer.validate_action_buttons","title":"<code>validate_action_buttons(view, request)</code>","text":"<p>Verify actions in self.action_buttons are valid view actions.</p> Source code in <code>nautobot/core/views/renderers.py</code> <pre><code>def validate_action_buttons(self, view, request):\n\"\"\"Verify actions in self.action_buttons are valid view actions.\"\"\"\nqueryset = view.alter_queryset(request)\nalways_valid_actions = (\"export\",)\nvalid_actions = []\ninvalid_actions = []\n# added check for whether the action_buttons exist because of issue #2107\nif view.action_buttons is None:\nview.action_buttons = []\nfor action in view.action_buttons:\nif action in always_valid_actions or validated_viewname(queryset.model, action) is not None:\nvalid_actions.append(action)\nelse:\ninvalid_actions.append(action)\nif invalid_actions:\nmessages.error(request, f\"Missing views for action(s) {', '.join(invalid_actions)}\")\nreturn valid_actions\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.NautobotUIViewSet","title":"<code>nautobot.apps.views.NautobotUIViewSet</code>","text":"<p>             Bases: <code>mixins.ObjectDetailViewMixin</code>, <code>mixins.ObjectListViewMixin</code>, <code>mixins.ObjectEditViewMixin</code>, <code>mixins.ObjectDestroyViewMixin</code>, <code>mixins.ObjectBulkDestroyViewMixin</code>, <code>mixins.ObjectBulkCreateViewMixin</code>, <code>mixins.ObjectBulkUpdateViewMixin</code>, <code>mixins.ObjectChangeLogViewMixin</code>, <code>mixins.ObjectNotesViewMixin</code></p> <p>Nautobot BaseViewSet that is intended for UI use only. It provides default Nautobot functionalities such as <code>create()</code>, <code>bulk_create()</code>, <code>update()</code>, <code>partial_update()</code>, <code>bulk_update()</code>, <code>destroy()</code>, <code>bulk_destroy()</code>, <code>retrieve()</code> <code>notes()</code>, <code>changelog()</code> and <code>list()</code> actions.</p> Source code in <code>nautobot/core/views/viewsets.py</code> <pre><code>class NautobotUIViewSet(\nmixins.ObjectDetailViewMixin,\nmixins.ObjectListViewMixin,\nmixins.ObjectEditViewMixin,\nmixins.ObjectDestroyViewMixin,\nmixins.ObjectBulkDestroyViewMixin,\nmixins.ObjectBulkCreateViewMixin,\nmixins.ObjectBulkUpdateViewMixin,\nmixins.ObjectChangeLogViewMixin,\nmixins.ObjectNotesViewMixin,\n):\n\"\"\"\n    Nautobot BaseViewSet that is intended for UI use only. It provides default Nautobot functionalities such as\n    `create()`, `bulk_create()`, `update()`, `partial_update()`, `bulk_update()`, `destroy()`, `bulk_destroy()`, `retrieve()`\n    `notes()`, `changelog()` and `list()` actions.\n    \"\"\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.NautobotViewSetMixin","title":"<code>nautobot.apps.views.NautobotViewSetMixin</code>","text":"<p>             Bases: <code>GenericViewSet</code>, <code>AccessMixin</code>, <code>GetReturnURLMixin</code>, <code>FormView</code></p> <p>NautobotViewSetMixin is an aggregation of various mixins from DRF, Django and Nautobot to acheive the desired behavior pattern for NautobotUIViewSet</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>@extend_schema(exclude=True)\nclass NautobotViewSetMixin(GenericViewSet, AccessMixin, GetReturnURLMixin, FormView):\n\"\"\"\n    NautobotViewSetMixin is an aggregation of various mixins from DRF, Django and Nautobot to acheive the desired behavior pattern for NautobotUIViewSet\n    \"\"\"\nrenderer_classes = [NautobotHTMLRenderer]\nlogger = logging.getLogger(__name__)\n# Attributes that need to be specified: form_class, queryset, serializer_class, table_class for most mixins.\n# filterset and filter_params will be initialized in filter_queryset() in ObjectListViewMixin\nfilter_params = None\nfilterset = None\nfilterset_class = None\nfilterset_form_class = None\nform_class = None\ncreate_form_class = None\nupdate_form_class = None\nparser_classes = [FormParser, MultiPartParser]\nqueryset = None\n# serializer_class has to be specified to eliminate the need to override retrieve() in the RetrieveModelMixin for now.\nserializer_class = None\ntable_class = None\nnotes_form_class = NoteForm\ndef get_permissions_for_model(self, model, actions):\n\"\"\"\n        Resolve the named permissions for a given model (or instance) and a list of actions (e.g. view or add).\n        :param model: A model or instance\n        :param actions: A list of actions to perform on the model\n        \"\"\"\nmodel_permissions = []\nfor action in actions:\nif action not in (\"view\", \"add\", \"change\", \"delete\"):\nraise ValueError(f\"Unsupported action: {action}\")\nmodel_permissions.append(f\"{model._meta.app_label}.{action}_{model._meta.model_name}\")\nreturn model_permissions\ndef get_required_permission(self):\n\"\"\"\n        Obtain the permissions needed to perform certain actions on a model.\n        \"\"\"\nqueryset = self.get_queryset()\ntry:\nactions = [PERMISSIONS_ACTION_MAP[self.action]]\nexcept KeyError:\nmessages.error(\nself.request,\n\"This action is not permitted. Please use the buttons at the bottom of the table for Bulk Delete and Bulk Update\",\n)\nreturn self.get_permissions_for_model(queryset.model, actions)\ndef check_permissions(self, request):\n\"\"\"\n        Check whether the user has the permissions needed to perform certain actions.\n        \"\"\"\nuser = self.request.user\npermission_required = self.get_required_permission()\n# Check that the user has been granted the required permission(s) one by one.\n# In case the permission has `message` or `code`` attribute, we want to include those information in the permission_denied error.\nfor permission in permission_required:\n# If the user does not have the permission required, we raise DRF's `NotAuthenticated` or `PermissionDenied` exception\n# which will be handled by self.handle_no_permission() in the UI appropriately in the dispatch() method\n# Cast permission to a list since has_perms() takes a list type parameter.\nif not user.has_perms([permission]):\nself.permission_denied(\nrequest,\nmessage=getattr(permission, \"message\", None),\ncode=getattr(permission, \"code\", None),\n)\ndef dispatch(self, request, *args, **kwargs):\n\"\"\"\n        Override the default dispatch() method to check permissions first.\n        Used to determine whether the user has permissions to a view and object-level permissions.\n        Using AccessMixin handle_no_permission() to deal with Object-Level permissions and API-Level permissions in one pass.\n        \"\"\"\n# self.initialize_request() converts a WSGI request and returns an API request object which can be passed into self.check_permissions()\n# If the user is not authenticated or does not have the permission to perform certain actions,\n# DRF NotAuthenticated or PermissionDenied exception can be raised appropriately and handled by self.handle_no_permission() in the UI.\n# initialize_request() also instantiates self.action which is needed for permission checks.\napi_request = self.initialize_request(request, *args, **kwargs)\ntry:\nself.check_permissions(api_request)\n# check_permissions() could raise NotAuthenticated and PermissionDenied Error.\n# We handle them by a single except statement since self.handle_no_permission() is able to handle both errors\nexcept (exceptions.NotAuthenticated, exceptions.PermissionDenied):\nreturn self.handle_no_permission()\nreturn super().dispatch(request, *args, **kwargs)\ndef get_table_class(self):\n# Check if self.table_class is specified in the ModelViewSet before performing subsequent actions\n# If not, display an error message\nif self.action == \"notes\":\nreturn NoteTable\nelif self.action == \"changelog\":\nreturn ObjectChangeTable\nassert (\nself.table_class is not None\n), f\"'{self.__class__.__name__}' should include a `table_class` attribute for bulk operations\"\nreturn self.table_class\ndef _process_destroy_form(self, form):\n\"\"\"\n        Helper method to destroy an object after the form is validated successfully.\n        \"\"\"\nraise NotImplementedError(\"_process_destroy_form() is not implemented\")\ndef _process_bulk_destroy_form(self, form):\n\"\"\"\n        Helper method to destroy objects after the form is validated successfully.\n        \"\"\"\nraise NotImplementedError(\"_process_bulk_destroy_form() is not implemented\")\ndef _process_create_or_update_form(self, form):\n\"\"\"\n        Helper method to create or update an object after the form is validated successfully.\n        \"\"\"\nraise NotImplementedError(\"_process_create_or_update_form() is not implemented\")\ndef _process_bulk_update_form(self, form):\n\"\"\"\n        Helper method to edit objects in bulk after the form is validated successfully.\n        \"\"\"\nraise NotImplementedError(\"_process_bulk_update_form() is not implemented\")\ndef _process_bulk_create_form(self, form):\n\"\"\"\n        Helper method to create objects in bulk after the form is validated successfully.\n        \"\"\"\nraise NotImplementedError(\"_process_bulk_create_form() is not implemented\")\ndef _handle_object_does_not_exist(self, form):\nmsg = \"Object import failed due to object-level permissions violation\"\nself.logger.debug(msg)\nself.has_error = True\nform.add_error(None, msg)\nreturn form\ndef _handle_not_implemented_error(self):\n# Blanket handler for NotImplementedError raised by form helper functions\nmsg = \"Please provide the appropriate mixin before using this helper function\"\nmessages.error(self.request, msg)\nself.has_error = True\ndef _handle_validation_error(self, e):\n# For bulk_create/bulk_update view, self.obj is not set since there are multiple\n# The errors will be rendered on the form itself.\nif self.action not in [\"bulk_create\", \"bulk_update\"]:\nmessages.error(self.request, f\"{self.obj} failed validation: {e}\")\nself.has_error = True\ndef form_valid(self, form):\n\"\"\"\n        Handle valid forms and redirect to success_url.\n        \"\"\"\nrequest = self.request\nself.has_error = False\nqueryset = self.get_queryset()\ntry:\nif self.action == \"destroy\":\nself._process_destroy_form(form)\nelif self.action == \"bulk_destroy\":\nself._process_bulk_destroy_form(form)\nelif self.action in [\"create\", \"update\"]:\nself._process_create_or_update_form(form)\nelif self.action == \"bulk_update\":\nself._process_bulk_update_form(form)\nelif self.action == \"bulk_create\":\nself.obj_table = self._process_bulk_create_form(form)\nexcept ValidationError as e:\nself._handle_validation_error(e)\nexcept ObjectDoesNotExist:\nform = self._handle_object_does_not_exist(form)\nexcept NotImplementedError:\nself._handle_not_implemented_error()\nif not self.has_error:\nself.logger.debug(\"Form validation was successful\")\nif self.action == \"bulk_create\":\nreturn Response(\n{\n\"table\": self.obj_table,\n\"template\": \"import_success.html\",\n}\n)\nreturn super().form_valid(form)\nelse:\n# render the form with the error message.\ndata = {}\nif self.action in [\"bulk_update\", \"bulk_destroy\"]:\npk_list = self.pk_list\ntable_class = self.get_table_class()\ntable = table_class(queryset.filter(pk__in=pk_list), orderable=False)\nif not table.rows:\nmessages.warning(\nrequest,\nf\"No {queryset.model._meta.verbose_name_plural} were selected for {self.action}.\",\n)\nreturn redirect(self.get_return_url(request))\ndata.update({\"table\": table})\ndata.update({\"form\": form})\nreturn Response(data)\ndef form_invalid(self, form):\n\"\"\"\n        Handle invalid forms.\n        \"\"\"\ndata = {}\nrequest = self.request\nqueryset = self.get_queryset()\nif self.action in [\"bulk_update\", \"bulk_destroy\"]:\npk_list = self.pk_list\ntable_class = self.get_table_class()\ntable = table_class(queryset.filter(pk__in=pk_list), orderable=False)\nif not table.rows:\nmessages.warning(\nrequest,\nf\"No {queryset.model._meta.verbose_name_plural} were selected for {self.action}.\",\n)\nreturn redirect(self.get_return_url(request))\ndata = {\n\"table\": table,\n}\ndata.update({\"form\": form})\nreturn Response(data)\ndef get_object(self):\n\"\"\"\n        Returns the object the view is displaying.\n        You may want to override this if you need to provide non-standard\n        queryset lookups.  Eg if objects are referenced using multiple\n        keyword arguments in the url conf.\n        \"\"\"\nqueryset = self.get_queryset()\n# Perform the lookup filtering.\nlookup_url_kwarg = self.lookup_url_kwarg or self.lookup_field\nif lookup_url_kwarg not in self.kwargs:\nreturn queryset.model()\nfilter_kwargs = {self.lookup_field: self.kwargs[lookup_url_kwarg]}\nobj = get_object_or_404(queryset, **filter_kwargs)\nreturn obj\ndef get_filter_params(self, request):\n\"\"\"Helper function - take request.GET and discard any parameters that are not used for queryset filtering.\"\"\"\nfilter_params = request.GET.copy()\nreturn get_filterable_params_from_filter_params(filter_params, self.non_filter_params, self.filterset_class())\ndef get_queryset(self):\n\"\"\"\n        Get the list of items for this view.\n        This must be an iterable, and may be a queryset.\n        Defaults to using `self.queryset`.\n        This method should always be used rather than accessing `self.queryset`\n        directly, as `self.queryset` gets evaluated only once, and those results\n        are cached for all subsequent requests.\n        Override the original `get_queryset()` to apply permission specific to the user and action.\n        \"\"\"\nqueryset = super().get_queryset()\nreturn queryset.restrict(self.request.user, PERMISSIONS_ACTION_MAP[self.action])\ndef get_extra_context(self, request, instance=None):\n\"\"\"\n        Return any additional context data for the template.\n        request: The current request\n        instance: The object being viewed\n        \"\"\"\nreturn {}\ndef get_template_name(self):\n# Use \"&lt;app&gt;/&lt;model&gt;_&lt;action&gt; if available, else fall back to generic templates\nqueryset = self.get_queryset()\nmodel_opts = queryset.model._meta\napp_label = model_opts.app_label\naction = self.action\ntry:\ntemplate_name = f\"{app_label}/{model_opts.model_name}_{action}.html\"\nselect_template([template_name])\nexcept TemplateDoesNotExist:\ntry:\nif action == \"create\":\n# When the action is `create`, try {object}_update.html as a fallback\n# If both are not defined, fall back to generic/object_create.html\ntemplate_name = f\"{app_label}/{model_opts.model_name}_update.html\"\nselect_template([template_name])\nelif action == \"update\":\n# When the action is `update`, try {object}_create.html as a fallback\n# If both are not defined, fall back to generic/object_update.html\ntemplate_name = f\"{app_label}/{model_opts.model_name}_create.html\"\nselect_template([template_name])\nelse:\n# No special case fallback, fall back to generic/object_{action}.html\nraise TemplateDoesNotExist(\"\")\nexcept TemplateDoesNotExist:\ntemplate_name = f\"generic/object_{action}.html\"\nreturn template_name\ndef get_form(self, *args, **kwargs):\n\"\"\"\n        Helper function to get form for different views if specified.\n        If not, return instantiated form using form_class.\n        \"\"\"\nform = getattr(self, f\"{self.action}_form\", None)\nif not form:\nform_class = self.get_form_class()\nif not form_class:\nself.logger.debug(f\"{self.action}_form_class is not defined\")\nreturn None\nform = form_class(*args, **kwargs)\nreturn form\ndef get_form_class(self, **kwargs):\n\"\"\"\n        Helper function to get form_class for different views.\n        \"\"\"\nif self.action in [\"create\", \"update\"]:\nif getattr(self, f\"{self.action}_form_class\"):\nform_class = getattr(self, f\"{self.action}_form_class\")\nelse:\nform_class = getattr(self, \"form_class\", None)\nelif self.action == \"bulk_create\":\nrequired_field_names = [\nfield[\"name\"]\nfor field in get_csv_form_fields_from_serializer_class(self.serializer_class)\nif field[\"required\"]\n]\nclass BulkCreateForm(BootstrapMixin, Form):\ncsv_data = CSVDataField(required_field_names=required_field_names)\ncsv_file = CSVFileField()\nform_class = BulkCreateForm\nelse:\nform_class = getattr(self, f\"{self.action}_form_class\", None)\nif not form_class:\nif self.action == \"bulk_destroy\":\nqueryset = self.get_queryset()\nclass BulkDestroyForm(ConfirmationForm):\npk = ModelMultipleChoiceField(queryset=queryset, widget=MultipleHiddenInput)\nreturn BulkDestroyForm\nelse:\n# Check for request first and then kwargs for form_class specified.\nform_class = self.request.data.get(\"form_class\", None)\nif not form_class:\nform_class = kwargs.get(\"form_class\", None)\nreturn form_class\ndef form_save(self, form, **kwargs):\n\"\"\"\n        Generic method to save the object from form.\n        Should be overriden by user if customization is needed.\n        \"\"\"\nreturn form.save()\ndef alter_queryset(self, request):\n# .all() is necessary to avoid caching queries\nqueryset = self.get_queryset()\nreturn queryset.all()\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.NautobotViewSetMixin.check_permissions","title":"<code>check_permissions(request)</code>","text":"<p>Check whether the user has the permissions needed to perform certain actions.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def check_permissions(self, request):\n\"\"\"\n    Check whether the user has the permissions needed to perform certain actions.\n    \"\"\"\nuser = self.request.user\npermission_required = self.get_required_permission()\n# Check that the user has been granted the required permission(s) one by one.\n# In case the permission has `message` or `code`` attribute, we want to include those information in the permission_denied error.\nfor permission in permission_required:\n# If the user does not have the permission required, we raise DRF's `NotAuthenticated` or `PermissionDenied` exception\n# which will be handled by self.handle_no_permission() in the UI appropriately in the dispatch() method\n# Cast permission to a list since has_perms() takes a list type parameter.\nif not user.has_perms([permission]):\nself.permission_denied(\nrequest,\nmessage=getattr(permission, \"message\", None),\ncode=getattr(permission, \"code\", None),\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.NautobotViewSetMixin.dispatch","title":"<code>dispatch(request, *args, **kwargs)</code>","text":"<p>Override the default dispatch() method to check permissions first. Used to determine whether the user has permissions to a view and object-level permissions. Using AccessMixin handle_no_permission() to deal with Object-Level permissions and API-Level permissions in one pass.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def dispatch(self, request, *args, **kwargs):\n\"\"\"\n    Override the default dispatch() method to check permissions first.\n    Used to determine whether the user has permissions to a view and object-level permissions.\n    Using AccessMixin handle_no_permission() to deal with Object-Level permissions and API-Level permissions in one pass.\n    \"\"\"\n# self.initialize_request() converts a WSGI request and returns an API request object which can be passed into self.check_permissions()\n# If the user is not authenticated or does not have the permission to perform certain actions,\n# DRF NotAuthenticated or PermissionDenied exception can be raised appropriately and handled by self.handle_no_permission() in the UI.\n# initialize_request() also instantiates self.action which is needed for permission checks.\napi_request = self.initialize_request(request, *args, **kwargs)\ntry:\nself.check_permissions(api_request)\n# check_permissions() could raise NotAuthenticated and PermissionDenied Error.\n# We handle them by a single except statement since self.handle_no_permission() is able to handle both errors\nexcept (exceptions.NotAuthenticated, exceptions.PermissionDenied):\nreturn self.handle_no_permission()\nreturn super().dispatch(request, *args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.NautobotViewSetMixin.form_invalid","title":"<code>form_invalid(form)</code>","text":"<p>Handle invalid forms.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def form_invalid(self, form):\n\"\"\"\n    Handle invalid forms.\n    \"\"\"\ndata = {}\nrequest = self.request\nqueryset = self.get_queryset()\nif self.action in [\"bulk_update\", \"bulk_destroy\"]:\npk_list = self.pk_list\ntable_class = self.get_table_class()\ntable = table_class(queryset.filter(pk__in=pk_list), orderable=False)\nif not table.rows:\nmessages.warning(\nrequest,\nf\"No {queryset.model._meta.verbose_name_plural} were selected for {self.action}.\",\n)\nreturn redirect(self.get_return_url(request))\ndata = {\n\"table\": table,\n}\ndata.update({\"form\": form})\nreturn Response(data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.NautobotViewSetMixin.form_save","title":"<code>form_save(form, **kwargs)</code>","text":"<p>Generic method to save the object from form. Should be overriden by user if customization is needed.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def form_save(self, form, **kwargs):\n\"\"\"\n    Generic method to save the object from form.\n    Should be overriden by user if customization is needed.\n    \"\"\"\nreturn form.save()\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.NautobotViewSetMixin.form_valid","title":"<code>form_valid(form)</code>","text":"<p>Handle valid forms and redirect to success_url.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def form_valid(self, form):\n\"\"\"\n    Handle valid forms and redirect to success_url.\n    \"\"\"\nrequest = self.request\nself.has_error = False\nqueryset = self.get_queryset()\ntry:\nif self.action == \"destroy\":\nself._process_destroy_form(form)\nelif self.action == \"bulk_destroy\":\nself._process_bulk_destroy_form(form)\nelif self.action in [\"create\", \"update\"]:\nself._process_create_or_update_form(form)\nelif self.action == \"bulk_update\":\nself._process_bulk_update_form(form)\nelif self.action == \"bulk_create\":\nself.obj_table = self._process_bulk_create_form(form)\nexcept ValidationError as e:\nself._handle_validation_error(e)\nexcept ObjectDoesNotExist:\nform = self._handle_object_does_not_exist(form)\nexcept NotImplementedError:\nself._handle_not_implemented_error()\nif not self.has_error:\nself.logger.debug(\"Form validation was successful\")\nif self.action == \"bulk_create\":\nreturn Response(\n{\n\"table\": self.obj_table,\n\"template\": \"import_success.html\",\n}\n)\nreturn super().form_valid(form)\nelse:\n# render the form with the error message.\ndata = {}\nif self.action in [\"bulk_update\", \"bulk_destroy\"]:\npk_list = self.pk_list\ntable_class = self.get_table_class()\ntable = table_class(queryset.filter(pk__in=pk_list), orderable=False)\nif not table.rows:\nmessages.warning(\nrequest,\nf\"No {queryset.model._meta.verbose_name_plural} were selected for {self.action}.\",\n)\nreturn redirect(self.get_return_url(request))\ndata.update({\"table\": table})\ndata.update({\"form\": form})\nreturn Response(data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.NautobotViewSetMixin.get_extra_context","title":"<code>get_extra_context(request, instance=None)</code>","text":"<p>Return any additional context data for the template. request: The current request instance: The object being viewed</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def get_extra_context(self, request, instance=None):\n\"\"\"\n    Return any additional context data for the template.\n    request: The current request\n    instance: The object being viewed\n    \"\"\"\nreturn {}\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.NautobotViewSetMixin.get_filter_params","title":"<code>get_filter_params(request)</code>","text":"<p>Helper function - take request.GET and discard any parameters that are not used for queryset filtering.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def get_filter_params(self, request):\n\"\"\"Helper function - take request.GET and discard any parameters that are not used for queryset filtering.\"\"\"\nfilter_params = request.GET.copy()\nreturn get_filterable_params_from_filter_params(filter_params, self.non_filter_params, self.filterset_class())\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.NautobotViewSetMixin.get_form","title":"<code>get_form(*args, **kwargs)</code>","text":"<p>Helper function to get form for different views if specified. If not, return instantiated form using form_class.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def get_form(self, *args, **kwargs):\n\"\"\"\n    Helper function to get form for different views if specified.\n    If not, return instantiated form using form_class.\n    \"\"\"\nform = getattr(self, f\"{self.action}_form\", None)\nif not form:\nform_class = self.get_form_class()\nif not form_class:\nself.logger.debug(f\"{self.action}_form_class is not defined\")\nreturn None\nform = form_class(*args, **kwargs)\nreturn form\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.NautobotViewSetMixin.get_form_class","title":"<code>get_form_class(**kwargs)</code>","text":"<p>Helper function to get form_class for different views.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def get_form_class(self, **kwargs):\n\"\"\"\n    Helper function to get form_class for different views.\n    \"\"\"\nif self.action in [\"create\", \"update\"]:\nif getattr(self, f\"{self.action}_form_class\"):\nform_class = getattr(self, f\"{self.action}_form_class\")\nelse:\nform_class = getattr(self, \"form_class\", None)\nelif self.action == \"bulk_create\":\nrequired_field_names = [\nfield[\"name\"]\nfor field in get_csv_form_fields_from_serializer_class(self.serializer_class)\nif field[\"required\"]\n]\nclass BulkCreateForm(BootstrapMixin, Form):\ncsv_data = CSVDataField(required_field_names=required_field_names)\ncsv_file = CSVFileField()\nform_class = BulkCreateForm\nelse:\nform_class = getattr(self, f\"{self.action}_form_class\", None)\nif not form_class:\nif self.action == \"bulk_destroy\":\nqueryset = self.get_queryset()\nclass BulkDestroyForm(ConfirmationForm):\npk = ModelMultipleChoiceField(queryset=queryset, widget=MultipleHiddenInput)\nreturn BulkDestroyForm\nelse:\n# Check for request first and then kwargs for form_class specified.\nform_class = self.request.data.get(\"form_class\", None)\nif not form_class:\nform_class = kwargs.get(\"form_class\", None)\nreturn form_class\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.NautobotViewSetMixin.get_object","title":"<code>get_object()</code>","text":"<p>Returns the object the view is displaying. You may want to override this if you need to provide non-standard queryset lookups.  Eg if objects are referenced using multiple keyword arguments in the url conf.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def get_object(self):\n\"\"\"\n    Returns the object the view is displaying.\n    You may want to override this if you need to provide non-standard\n    queryset lookups.  Eg if objects are referenced using multiple\n    keyword arguments in the url conf.\n    \"\"\"\nqueryset = self.get_queryset()\n# Perform the lookup filtering.\nlookup_url_kwarg = self.lookup_url_kwarg or self.lookup_field\nif lookup_url_kwarg not in self.kwargs:\nreturn queryset.model()\nfilter_kwargs = {self.lookup_field: self.kwargs[lookup_url_kwarg]}\nobj = get_object_or_404(queryset, **filter_kwargs)\nreturn obj\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.NautobotViewSetMixin.get_permissions_for_model","title":"<code>get_permissions_for_model(model, actions)</code>","text":"<p>Resolve the named permissions for a given model (or instance) and a list of actions (e.g. view or add).</p> <p>:param model: A model or instance :param actions: A list of actions to perform on the model</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def get_permissions_for_model(self, model, actions):\n\"\"\"\n    Resolve the named permissions for a given model (or instance) and a list of actions (e.g. view or add).\n    :param model: A model or instance\n    :param actions: A list of actions to perform on the model\n    \"\"\"\nmodel_permissions = []\nfor action in actions:\nif action not in (\"view\", \"add\", \"change\", \"delete\"):\nraise ValueError(f\"Unsupported action: {action}\")\nmodel_permissions.append(f\"{model._meta.app_label}.{action}_{model._meta.model_name}\")\nreturn model_permissions\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.NautobotViewSetMixin.get_queryset","title":"<code>get_queryset()</code>","text":"<p>Get the list of items for this view. This must be an iterable, and may be a queryset. Defaults to using <code>self.queryset</code>. This method should always be used rather than accessing <code>self.queryset</code> directly, as <code>self.queryset</code> gets evaluated only once, and those results are cached for all subsequent requests. Override the original <code>get_queryset()</code> to apply permission specific to the user and action.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def get_queryset(self):\n\"\"\"\n    Get the list of items for this view.\n    This must be an iterable, and may be a queryset.\n    Defaults to using `self.queryset`.\n    This method should always be used rather than accessing `self.queryset`\n    directly, as `self.queryset` gets evaluated only once, and those results\n    are cached for all subsequent requests.\n    Override the original `get_queryset()` to apply permission specific to the user and action.\n    \"\"\"\nqueryset = super().get_queryset()\nreturn queryset.restrict(self.request.user, PERMISSIONS_ACTION_MAP[self.action])\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.NautobotViewSetMixin.get_required_permission","title":"<code>get_required_permission()</code>","text":"<p>Obtain the permissions needed to perform certain actions on a model.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def get_required_permission(self):\n\"\"\"\n    Obtain the permissions needed to perform certain actions on a model.\n    \"\"\"\nqueryset = self.get_queryset()\ntry:\nactions = [PERMISSIONS_ACTION_MAP[self.action]]\nexcept KeyError:\nmessages.error(\nself.request,\n\"This action is not permitted. Please use the buttons at the bottom of the table for Bulk Delete and Bulk Update\",\n)\nreturn self.get_permissions_for_model(queryset.model, actions)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.ObjectBulkCreateViewMixin","title":"<code>nautobot.apps.views.ObjectBulkCreateViewMixin</code>","text":"<p>             Bases: <code>NautobotViewSetMixin</code></p> <p>UI mixin to bulk create model instances.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>class ObjectBulkCreateViewMixin(NautobotViewSetMixin):\n\"\"\"\n    UI mixin to bulk create model instances.\n    \"\"\"\nbulk_create_active_tab = \"csv-data\"\ndef _process_bulk_create_form(self, form):\n# Iterate through CSV data and bind each row to a new model form instance.\nnew_objs = []\nrequest = self.request\nqueryset = self.get_queryset()\nwith transaction.atomic():\nif request.FILES:\nfield_name = \"csv_file\"\n# Set the bulk_create_active_tab to \"csv-file\"\n# In case the form validation fails, the user will be redirected\n# to the tab with errors rendered on the form.\nself.bulk_create_active_tab = \"csv-file\"\nelse:\nfield_name = \"csv_data\"\ncsvtext = form.cleaned_data[field_name]\ntry:\ndata = NautobotCSVParser().parse(\nstream=BytesIO(csvtext.encode(\"utf-8\")),\nparser_context={\"request\": request, \"serializer_class\": self.serializer_class},\n)\nserializer = self.serializer_class(data=data, context={\"request\": request}, many=True)\nif serializer.is_valid():\nnew_objs = serializer.save()\nelse:\nfor row, errors in enumerate(serializer.errors, start=1):\nfor field, err in errors.items():\nform.add_error(field_name, f\"Row {row}: {field}: {err[0]}\")\nraise ValidationError(\"\")\nexcept exceptions.ParseError as exc:\nform.add_error(None, str(exc))\nraise ValidationError(\"\")\n# Enforce object-level permissions\nif queryset.filter(pk__in=[obj.pk for obj in new_objs]).count() != len(new_objs):\nraise ObjectDoesNotExist\n# Compile a table containing the imported objects\ntable_class = self.get_table_class()\nobj_table = table_class(new_objs)\nif new_objs:\nmsg = f\"Imported {len(new_objs)} {new_objs[0]._meta.verbose_name_plural}\"\nself.logger.info(msg)\nmessages.success(request, msg)\nreturn obj_table\ndef bulk_create(self, request, *args, **kwargs):\ncontext = {}\nif request.method == \"POST\":\nreturn self.perform_bulk_create(request)\nreturn Response(context)\ndef perform_bulk_create(self, request):\nform_class = self.get_form_class()\nform = form_class(request.POST, request.FILES)\nif form.is_valid():\nreturn self.form_valid(form)\nelse:\nreturn self.form_invalid(form)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.ObjectBulkDestroyViewMixin","title":"<code>nautobot.apps.views.ObjectBulkDestroyViewMixin</code>","text":"<p>             Bases: <code>NautobotViewSetMixin</code>, <code>BulkDestroyModelMixin</code></p> <p>UI mixin to bulk destroy model instances.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>class ObjectBulkDestroyViewMixin(NautobotViewSetMixin, BulkDestroyModelMixin):\n\"\"\"\n    UI mixin to bulk destroy model instances.\n    \"\"\"\nbulk_destroy_form_class = None\nfilterset_class = None\ndef _process_bulk_destroy_form(self, form):\nrequest = self.request\npk_list = self.pk_list\nqueryset = self.get_queryset()\nmodel = queryset.model\n# Delete objects\nqueryset = queryset.filter(pk__in=pk_list)\ntry:\nwith transaction.atomic():\ndeleted_count = queryset.delete()[1][model._meta.label]\nmsg = f\"Deleted {deleted_count} {model._meta.verbose_name_plural}\"\nself.logger.info(msg)\nself.success_url = self.get_return_url(request)\nmessages.success(request, msg)\nexcept ProtectedError as e:\nself.logger.info(\"Caught ProtectedError while attempting to delete objects\")\nhandle_protectederror(queryset, request, e)\nself.success_url = self.get_return_url(request)\ndef bulk_destroy(self, request, *args, **kwargs):\n\"\"\"\n        Call perform_bulk_destroy().\n        The function exist to keep the DRF's get/post pattern of {action}/perform_{action}, we will need it when we transition from using forms to serializers in the UI.\n        User should override this function to handle any actions as needed before bulk destroy.\n        \"\"\"\nreturn self.perform_bulk_destroy(request, **kwargs)\ndef perform_bulk_destroy(self, request, **kwargs):\n\"\"\"\n        request.POST \"_delete\": Function to render the user selection of objects in a table form/BulkDestroyConfirmationForm via Response that is passed to NautobotHTMLRenderer.\n        request.POST \"_confirm\": Function to validate the table form/BulkDestroyConfirmationForm and to perform the action of bulk destroy. Render the form with errors if exceptions are raised.\n        \"\"\"\nqueryset = self.get_queryset()\nmodel = queryset.model\n# Are we deleting *all* objects in the queryset or just a selected subset?\nif request.POST.get(\"_all\"):\nfilter_params = self.get_filter_params(request)\nif not filter_params:\nself.pk_list = model.objects.only(\"pk\").all().values_list(\"pk\", flat=True)\nelif self.filterset_class is None:\nraise NotImplementedError(\"filterset_class must be defined to use _all\")\nelse:\nself.pk_list = self.filterset_class(filter_params, model.objects.only(\"pk\")).qs\nelse:\nself.pk_list = request.POST.getlist(\"pk\")\nform_class = self.get_form_class(**kwargs)\ndata = {}\nif \"_confirm\" in request.POST:\nform = form_class(request.POST)\nif form.is_valid():\nreturn self.form_valid(form)\nelse:\nreturn self.form_invalid(form)\ntable_class = self.get_table_class()\ntable = table_class(queryset.filter(pk__in=self.pk_list), orderable=False)\nif not table.rows:\nmessages.warning(\nrequest,\nf\"No {queryset.model._meta.verbose_name_plural} were selected for deletion.\",\n)\nreturn redirect(self.get_return_url(request))\ndata.update({\"table\": table})\nreturn Response(data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ObjectBulkDestroyViewMixin.bulk_destroy","title":"<code>bulk_destroy(request, *args, **kwargs)</code>","text":"<p>Call perform_bulk_destroy(). The function exist to keep the DRF's get/post pattern of {action}/perform_{action}, we will need it when we transition from using forms to serializers in the UI. User should override this function to handle any actions as needed before bulk destroy.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def bulk_destroy(self, request, *args, **kwargs):\n\"\"\"\n    Call perform_bulk_destroy().\n    The function exist to keep the DRF's get/post pattern of {action}/perform_{action}, we will need it when we transition from using forms to serializers in the UI.\n    User should override this function to handle any actions as needed before bulk destroy.\n    \"\"\"\nreturn self.perform_bulk_destroy(request, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ObjectBulkDestroyViewMixin.perform_bulk_destroy","title":"<code>perform_bulk_destroy(request, **kwargs)</code>","text":"<p>request.POST \"_delete\": Function to render the user selection of objects in a table form/BulkDestroyConfirmationForm via Response that is passed to NautobotHTMLRenderer. request.POST \"_confirm\": Function to validate the table form/BulkDestroyConfirmationForm and to perform the action of bulk destroy. Render the form with errors if exceptions are raised.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def perform_bulk_destroy(self, request, **kwargs):\n\"\"\"\n    request.POST \"_delete\": Function to render the user selection of objects in a table form/BulkDestroyConfirmationForm via Response that is passed to NautobotHTMLRenderer.\n    request.POST \"_confirm\": Function to validate the table form/BulkDestroyConfirmationForm and to perform the action of bulk destroy. Render the form with errors if exceptions are raised.\n    \"\"\"\nqueryset = self.get_queryset()\nmodel = queryset.model\n# Are we deleting *all* objects in the queryset or just a selected subset?\nif request.POST.get(\"_all\"):\nfilter_params = self.get_filter_params(request)\nif not filter_params:\nself.pk_list = model.objects.only(\"pk\").all().values_list(\"pk\", flat=True)\nelif self.filterset_class is None:\nraise NotImplementedError(\"filterset_class must be defined to use _all\")\nelse:\nself.pk_list = self.filterset_class(filter_params, model.objects.only(\"pk\")).qs\nelse:\nself.pk_list = request.POST.getlist(\"pk\")\nform_class = self.get_form_class(**kwargs)\ndata = {}\nif \"_confirm\" in request.POST:\nform = form_class(request.POST)\nif form.is_valid():\nreturn self.form_valid(form)\nelse:\nreturn self.form_invalid(form)\ntable_class = self.get_table_class()\ntable = table_class(queryset.filter(pk__in=self.pk_list), orderable=False)\nif not table.rows:\nmessages.warning(\nrequest,\nf\"No {queryset.model._meta.verbose_name_plural} were selected for deletion.\",\n)\nreturn redirect(self.get_return_url(request))\ndata.update({\"table\": table})\nreturn Response(data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.ObjectBulkUpdateViewMixin","title":"<code>nautobot.apps.views.ObjectBulkUpdateViewMixin</code>","text":"<p>             Bases: <code>NautobotViewSetMixin</code>, <code>BulkUpdateModelMixin</code></p> <p>UI mixin to bulk update model instances.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>class ObjectBulkUpdateViewMixin(NautobotViewSetMixin, BulkUpdateModelMixin):\n\"\"\"\n    UI mixin to bulk update model instances.\n    \"\"\"\nfilterset_class = None\nbulk_update_form_class = None\ndef _process_bulk_update_form(self, form):\nrequest = self.request\nqueryset = self.get_queryset()\nmodel = queryset.model\nform_custom_fields = getattr(form, \"custom_fields\", [])\nform_relationships = getattr(form, \"relationships\", [])\n# Standard fields are those that are intrinsic to self.model in the form\n# Relationships, custom fields, object_note are extrinsic fields\n# PK is used to identify an existing instance, not to modify the object\nstandard_fields = [\nfield\nfor field in form.fields\nif field not in form_custom_fields + form_relationships + [\"pk\"] + [\"object_note\"]\n]\nnullified_fields = request.POST.getlist(\"_nullify\")\nwith transaction.atomic():\nupdated_objects = []\nfor obj in queryset.filter(pk__in=form.cleaned_data[\"pk\"]):\nself.obj = obj\n# Update standard fields. If a field is listed in _nullify, delete its value.\nfor name in standard_fields:\ntry:\nmodel_field = model._meta.get_field(name)\nexcept FieldDoesNotExist:\n# This form field is used to modify a field rather than set its value directly\nmodel_field = None\n# Handle nullification\nif name in form.nullable_fields and name in nullified_fields:\nif isinstance(model_field, ManyToManyField):\ngetattr(obj, name).set([])\nelse:\nsetattr(obj, name, None if model_field is not None and model_field.null else \"\")\n# ManyToManyFields\nelif isinstance(model_field, ManyToManyField):\nif form.cleaned_data[name]:\ngetattr(obj, name).set(form.cleaned_data[name])\n# Normal fields\nelif form.cleaned_data[name] not in (None, \"\"):\nsetattr(obj, name, form.cleaned_data[name])\n# Update custom fields\nfor field_name in form_custom_fields:\nif field_name in form.nullable_fields and field_name in nullified_fields:\nobj.cf[remove_prefix_from_cf_key(field_name)] = None\nelif form.cleaned_data.get(field_name) not in (None, \"\", []):\nobj.cf[remove_prefix_from_cf_key(field_name)] = form.cleaned_data[field_name]\nobj.validated_save()\nupdated_objects.append(obj)\nself.logger.debug(f\"Saved {obj} (PK: {obj.pk})\")\n# Add/remove tags\nif form.cleaned_data.get(\"add_tags\", None):\nobj.tags.add(*form.cleaned_data[\"add_tags\"])\nif form.cleaned_data.get(\"remove_tags\", None):\nobj.tags.remove(*form.cleaned_data[\"remove_tags\"])\nif hasattr(form, \"save_relationships\") and callable(form.save_relationships):\n# Add/remove relationship associations\nform.save_relationships(instance=obj, nullified_fields=nullified_fields)\nif hasattr(form, \"save_note\") and callable(form.save_note):\nform.save_note(instance=obj, user=request.user)\n# Enforce object-level permissions\nif queryset.filter(pk__in=[obj.pk for obj in updated_objects]).count() != len(updated_objects):\nraise ObjectDoesNotExist\nif updated_objects:\nmsg = f\"Updated {len(updated_objects)} {model._meta.verbose_name_plural}\"\nself.logger.info(msg)\nmessages.success(self.request, msg)\nself.success_url = self.get_return_url(request)\ndef bulk_update(self, request, *args, **kwargs):\n\"\"\"\n        Call perform_bulk_update().\n        The function exist to keep the DRF's get/post pattern of {action}/perform_{action}, we will need it when we transition from using forms to serializers in the UI.\n        User should override this function to handle any actions as needed before bulk update.\n        \"\"\"\nreturn self.perform_bulk_update(request, **kwargs)\n# TODO: this conflicts with BulkUpdateModelMixin.perform_bulk_update(self, objects, update_data, partial)\ndef perform_bulk_update(self, request, **kwargs):  # pylint: disable=arguments-differ\n\"\"\"\n        request.POST \"_edit\": Function to render the user selection of objects in a table form/BulkUpdateForm via Response that is passed to NautobotHTMLRenderer.\n        request.POST \"_apply\": Function to validate the table form/BulkUpdateForm and to perform the action of bulk update. Render the form with errors if exceptions are raised.\n        \"\"\"\nqueryset = self.get_queryset()\nmodel = queryset.model\n# If we are editing *all* objects in the queryset, replace the PK list with all matched objects.\nif request.POST.get(\"_all\"):\nfilter_params = self.get_filter_params(request)\nif not filter_params:\nself.pk_list = model.objects.only(\"pk\").all().values_list(\"pk\", flat=True)\nelif self.filterset_class is None:\nraise NotImplementedError(\"filterset_class must be defined to use _all\")\nelse:\nself.pk_list = self.filterset_class(filter_params, model.objects.only(\"pk\")).qs\nelse:\nself.pk_list = request.POST.getlist(\"pk\")\ndata = {}\nform_class = self.get_form_class()\nif \"_apply\" in request.POST:\nself.kwargs = kwargs\nform = form_class(model, request.POST)\nrestrict_form_fields(form, request.user)\nif form.is_valid():\nreturn self.form_valid(form)\nelse:\nreturn self.form_invalid(form)\ntable_class = self.get_table_class()\ntable = table_class(queryset.filter(pk__in=self.pk_list), orderable=False)\nif not table.rows:\nmessages.warning(\nrequest,\nf\"No {queryset.model._meta.verbose_name_plural} were selected to update.\",\n)\nreturn redirect(self.get_return_url(request))\ndata.update({\"table\": table})\nreturn Response(data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ObjectBulkUpdateViewMixin.bulk_update","title":"<code>bulk_update(request, *args, **kwargs)</code>","text":"<p>Call perform_bulk_update(). The function exist to keep the DRF's get/post pattern of {action}/perform_{action}, we will need it when we transition from using forms to serializers in the UI. User should override this function to handle any actions as needed before bulk update.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def bulk_update(self, request, *args, **kwargs):\n\"\"\"\n    Call perform_bulk_update().\n    The function exist to keep the DRF's get/post pattern of {action}/perform_{action}, we will need it when we transition from using forms to serializers in the UI.\n    User should override this function to handle any actions as needed before bulk update.\n    \"\"\"\nreturn self.perform_bulk_update(request, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ObjectBulkUpdateViewMixin.perform_bulk_update","title":"<code>perform_bulk_update(request, **kwargs)</code>","text":"<p>request.POST \"_edit\": Function to render the user selection of objects in a table form/BulkUpdateForm via Response that is passed to NautobotHTMLRenderer. request.POST \"_apply\": Function to validate the table form/BulkUpdateForm and to perform the action of bulk update. Render the form with errors if exceptions are raised.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def perform_bulk_update(self, request, **kwargs):  # pylint: disable=arguments-differ\n\"\"\"\n    request.POST \"_edit\": Function to render the user selection of objects in a table form/BulkUpdateForm via Response that is passed to NautobotHTMLRenderer.\n    request.POST \"_apply\": Function to validate the table form/BulkUpdateForm and to perform the action of bulk update. Render the form with errors if exceptions are raised.\n    \"\"\"\nqueryset = self.get_queryset()\nmodel = queryset.model\n# If we are editing *all* objects in the queryset, replace the PK list with all matched objects.\nif request.POST.get(\"_all\"):\nfilter_params = self.get_filter_params(request)\nif not filter_params:\nself.pk_list = model.objects.only(\"pk\").all().values_list(\"pk\", flat=True)\nelif self.filterset_class is None:\nraise NotImplementedError(\"filterset_class must be defined to use _all\")\nelse:\nself.pk_list = self.filterset_class(filter_params, model.objects.only(\"pk\")).qs\nelse:\nself.pk_list = request.POST.getlist(\"pk\")\ndata = {}\nform_class = self.get_form_class()\nif \"_apply\" in request.POST:\nself.kwargs = kwargs\nform = form_class(model, request.POST)\nrestrict_form_fields(form, request.user)\nif form.is_valid():\nreturn self.form_valid(form)\nelse:\nreturn self.form_invalid(form)\ntable_class = self.get_table_class()\ntable = table_class(queryset.filter(pk__in=self.pk_list), orderable=False)\nif not table.rows:\nmessages.warning(\nrequest,\nf\"No {queryset.model._meta.verbose_name_plural} were selected to update.\",\n)\nreturn redirect(self.get_return_url(request))\ndata.update({\"table\": table})\nreturn Response(data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.ObjectChangeLogViewMixin","title":"<code>nautobot.apps.views.ObjectChangeLogViewMixin</code>","text":"<p>             Bases: <code>NautobotViewSetMixin</code></p> <p>UI mixin to list a model's changelog queryset</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>class ObjectChangeLogViewMixin(NautobotViewSetMixin):\n\"\"\"\n    UI mixin to list a model's changelog queryset\n    \"\"\"\nbase_template = None\n@drf_action(detail=True)\ndef changelog(self, request, *args, **kwargs):\ndata = {\n\"base_template\": self.base_template,\n}\nreturn Response(data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.ObjectDeleteView","title":"<code>nautobot.apps.views.ObjectDeleteView</code>","text":"<p>             Bases: <code>GetReturnURLMixin</code>, <code>ObjectPermissionRequiredMixin</code>, <code>View</code></p> <p>Delete a single object.</p> <p>queryset: The base queryset for the object being deleted template_name: The name of the template</p> Source code in <code>nautobot/core/views/generic.py</code> <pre><code>class ObjectDeleteView(GetReturnURLMixin, ObjectPermissionRequiredMixin, View):\n\"\"\"\n    Delete a single object.\n    queryset: The base queryset for the object being deleted\n    template_name: The name of the template\n    \"\"\"\nqueryset = None\ntemplate_name = \"generic/object_delete.html\"\ndef get_required_permission(self):\nreturn get_permission_for_model(self.queryset.model, \"delete\")\ndef get_object(self, kwargs):\n\"\"\"Retrieve an object based on `kwargs`.\"\"\"\n# Look up an existing object by PK, name, or slug, if provided.\nfor field in (\"pk\", \"name\", \"slug\"):\nif field in kwargs:\nreturn get_object_or_404(self.queryset, **{field: kwargs[field]})\nreturn self.queryset.model()\ndef get(self, request, **kwargs):\nobj = self.get_object(kwargs)\nform = ConfirmationForm(initial=request.GET)\nreturn render(\nrequest,\nself.template_name,\n{\n\"obj\": obj,\n\"form\": form,\n\"obj_type\": self.queryset.model._meta.verbose_name,\n\"return_url\": self.get_return_url(request, obj),\n},\n)\ndef post(self, request, **kwargs):\nlogger = logging.getLogger(__name__ + \".ObjectDeleteView\")\nobj = self.get_object(kwargs)\nform = ConfirmationForm(request.POST)\nif form.is_valid():\nlogger.debug(\"Form validation was successful\")\ntry:\nobj.delete()\nexcept ProtectedError as e:\nlogger.info(\"Caught ProtectedError while attempting to delete object\")\nhandle_protectederror([obj], request, e)\nreturn redirect(obj.get_absolute_url())\nmsg = f\"Deleted {self.queryset.model._meta.verbose_name} {obj}\"\nlogger.info(msg)\nmessages.success(request, msg)\nreturn_url = form.cleaned_data.get(\"return_url\")\nif return_url is not None and is_safe_url(url=return_url, allowed_hosts=request.get_host()):\nreturn redirect(return_url)\nelse:\nreturn redirect(self.get_return_url(request, obj))\nelse:\nlogger.debug(\"Form validation failed\")\nreturn render(\nrequest,\nself.template_name,\n{\n\"obj\": obj,\n\"form\": form,\n\"obj_type\": self.queryset.model._meta.verbose_name,\n\"return_url\": self.get_return_url(request, obj),\n},\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.generic.ObjectDeleteView.get_object","title":"<code>get_object(kwargs)</code>","text":"<p>Retrieve an object based on <code>kwargs</code>.</p> Source code in <code>nautobot/core/views/generic.py</code> <pre><code>def get_object(self, kwargs):\n\"\"\"Retrieve an object based on `kwargs`.\"\"\"\n# Look up an existing object by PK, name, or slug, if provided.\nfor field in (\"pk\", \"name\", \"slug\"):\nif field in kwargs:\nreturn get_object_or_404(self.queryset, **{field: kwargs[field]})\nreturn self.queryset.model()\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.ObjectDestroyViewMixin","title":"<code>nautobot.apps.views.ObjectDestroyViewMixin</code>","text":"<p>             Bases: <code>NautobotViewSetMixin</code>, <code>mixins.DestroyModelMixin</code></p> <p>UI mixin to destroy a model instance.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>class ObjectDestroyViewMixin(NautobotViewSetMixin, mixins.DestroyModelMixin):\n\"\"\"\n    UI mixin to destroy a model instance.\n    \"\"\"\ndestroy_form_class = ConfirmationForm\ndef _process_destroy_form(self, form):\nrequest = self.request\nobj = self.obj\nqueryset = self.get_queryset()\ntry:\nwith transaction.atomic():\nobj.delete()\nmsg = f\"Deleted {queryset.model._meta.verbose_name} {obj}\"\nself.logger.info(msg)\nmessages.success(request, msg)\nself.success_url = self.get_return_url(request, obj)\nexcept ProtectedError as e:\nself.logger.info(\"Caught ProtectedError while attempting to delete object\")\nhandle_protectederror([obj], request, e)\nself.success_url = obj.get_absolute_url()\ndef destroy(self, request, *args, **kwargs):\n\"\"\"\n        request.GET: render the ObjectDeleteConfirmationForm which is passed to NautobotHTMLRenderer as Response.\n        request.POST: call perform_destroy() which validates the form and perform the action of delete.\n        Override to add more variables to Response\n        \"\"\"\ncontext = {}\nif request.method == \"POST\":\nreturn self.perform_destroy(request, **kwargs)\nreturn Response(context)\ndef perform_destroy(self, request, **kwargs):\n\"\"\"\n        Function to validate the ObjectDeleteConfirmationForm and to delete the object.\n        \"\"\"\nself.obj = self.get_object()\nform_class = self.get_form_class()\nform = form_class(request.POST)\nif form.is_valid():\nreturn self.form_valid(form)\nelse:\nreturn self.form_invalid(form)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ObjectDestroyViewMixin.destroy","title":"<code>destroy(request, *args, **kwargs)</code>","text":"<p>request.GET: render the ObjectDeleteConfirmationForm which is passed to NautobotHTMLRenderer as Response. request.POST: call perform_destroy() which validates the form and perform the action of delete. Override to add more variables to Response</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def destroy(self, request, *args, **kwargs):\n\"\"\"\n    request.GET: render the ObjectDeleteConfirmationForm which is passed to NautobotHTMLRenderer as Response.\n    request.POST: call perform_destroy() which validates the form and perform the action of delete.\n    Override to add more variables to Response\n    \"\"\"\ncontext = {}\nif request.method == \"POST\":\nreturn self.perform_destroy(request, **kwargs)\nreturn Response(context)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ObjectDestroyViewMixin.perform_destroy","title":"<code>perform_destroy(request, **kwargs)</code>","text":"<p>Function to validate the ObjectDeleteConfirmationForm and to delete the object.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def perform_destroy(self, request, **kwargs):\n\"\"\"\n    Function to validate the ObjectDeleteConfirmationForm and to delete the object.\n    \"\"\"\nself.obj = self.get_object()\nform_class = self.get_form_class()\nform = form_class(request.POST)\nif form.is_valid():\nreturn self.form_valid(form)\nelse:\nreturn self.form_invalid(form)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.ObjectDetailViewMixin","title":"<code>nautobot.apps.views.ObjectDetailViewMixin</code>","text":"<p>             Bases: <code>NautobotViewSetMixin</code>, <code>mixins.RetrieveModelMixin</code></p> <p>UI mixin to retrieve a model instance.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>class ObjectDetailViewMixin(NautobotViewSetMixin, mixins.RetrieveModelMixin):\n\"\"\"\n    UI mixin to retrieve a model instance.\n    \"\"\"\ndef retrieve(self, request, *args, **kwargs):\n\"\"\"\n        Retrieve a model instance.\n        \"\"\"\ninstance = self.get_object()\nserializer = self.get_serializer(instance)\ncontext = serializer.data\ncontext[\"use_new_ui\"] = True\nreturn Response(context)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ObjectDetailViewMixin.retrieve","title":"<code>retrieve(request, *args, **kwargs)</code>","text":"<p>Retrieve a model instance.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def retrieve(self, request, *args, **kwargs):\n\"\"\"\n    Retrieve a model instance.\n    \"\"\"\ninstance = self.get_object()\nserializer = self.get_serializer(instance)\ncontext = serializer.data\ncontext[\"use_new_ui\"] = True\nreturn Response(context)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.ObjectDynamicGroupsView","title":"<code>nautobot.apps.views.ObjectDynamicGroupsView</code>","text":"<p>             Bases: <code>View</code></p> <p>Present a list of dynamic groups associated to a particular object. base_template: The name of the template to extend. If not provided, \"/.html\" will be used. Source code in <code>nautobot/extras/views.py</code> <pre><code>class ObjectDynamicGroupsView(View):\n\"\"\"\n    Present a list of dynamic groups associated to a particular object.\n    base_template: The name of the template to extend. If not provided, \"&lt;app&gt;/&lt;model&gt;.html\" will be used.\n    \"\"\"\nbase_template = None\ndef get(self, request, model, **kwargs):\n# Handle QuerySet restriction of parent object if needed\nif hasattr(model.objects, \"restrict\"):\nobj = get_object_or_404(model.objects.restrict(request.user, \"view\"), **kwargs)\nelse:\nobj = get_object_or_404(model, **kwargs)\n# Gather all dynamic groups for this object (and its related objects)\ndynamicsgroups_table = tables.DynamicGroupTable(data=obj.dynamic_groups_cached, orderable=False)\n# Apply the request context\npaginate = {\n\"paginator_class\": EnhancedPaginator,\n\"per_page\": get_paginate_count(request),\n}\nRequestConfig(request, paginate).configure(dynamicsgroups_table)\nself.base_template = get_base_template(self.base_template, model)\nreturn render(\nrequest,\n\"extras/object_dynamicgroups.html\",\n{\n\"object\": obj,\n\"verbose_name\": obj._meta.verbose_name,\n\"verbose_name_plural\": obj._meta.verbose_name_plural,\n\"table\": dynamicsgroups_table,\n\"base_template\": self.base_template,\n\"active_tab\": \"dynamic-groups\",\n},\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.ObjectEditView","title":"<code>nautobot.apps.views.ObjectEditView</code>","text":"<p>             Bases: <code>GetReturnURLMixin</code>, <code>ObjectPermissionRequiredMixin</code>, <code>View</code></p> <p>Create or edit a single object.</p> <p>queryset: The base queryset for the object being modified model_form: The form used to create or edit the object template_name: The name of the template</p> Source code in <code>nautobot/core/views/generic.py</code> <pre><code>class ObjectEditView(GetReturnURLMixin, ObjectPermissionRequiredMixin, View):\n\"\"\"\n    Create or edit a single object.\n    queryset: The base queryset for the object being modified\n    model_form: The form used to create or edit the object\n    template_name: The name of the template\n    \"\"\"\nqueryset = None\nmodel_form = None\ntemplate_name = \"generic/object_edit.html\"\ndef get_required_permission(self):\n# self._permission_action is set by dispatch() to either \"add\" or \"change\" depending on whether\n# we are modifying an existing object or creating a new one.\nreturn get_permission_for_model(self.queryset.model, self._permission_action)\ndef get_object(self, kwargs):\n\"\"\"Retrieve an object based on `kwargs`.\"\"\"\n# Look up an existing object by PK, name, or slug, if provided.\nfor field in (\"pk\", \"name\", \"slug\"):\nif field in kwargs:\nreturn get_object_or_404(self.queryset, **{field: kwargs[field]})\nreturn self.queryset.model()\ndef get_extra_context(self, request, instance):\n\"\"\"\n        Return any additional context data for the template.\n        Args:\n            request (HttpRequest): The current request\n            instance (Model): The object being edited\n        Returns:\n            (dict): Additional context data\n        \"\"\"\nreturn {}\ndef alter_obj(self, obj, request, url_args, url_kwargs):\n# Allow views to add extra info to an object before it is processed. For example, a parent object can be defined\n# given some parameter from the request URL.\nreturn obj\ndef dispatch(self, request, *args, **kwargs):\n# Determine required permission based on whether we are editing an existing object\nself._permission_action = \"change\" if kwargs else \"add\"\nreturn super().dispatch(request, *args, **kwargs)\ndef get(self, request, *args, **kwargs):\nobj = self.alter_obj(self.get_object(kwargs), request, args, kwargs)\ninitial_data = normalize_querydict(request.GET, form_class=self.model_form)\nform = self.model_form(instance=obj, initial=initial_data)\nrestrict_form_fields(form, request.user)\nreturn render(\nrequest,\nself.template_name,\n{\n\"obj\": obj,\n\"obj_type\": self.queryset.model._meta.verbose_name,\n\"form\": form,\n\"return_url\": self.get_return_url(request, obj),\n\"editing\": obj.present_in_database,\n**self.get_extra_context(request, obj),\n},\n)\ndef successful_post(self, request, obj, created, logger):\n\"\"\"Callback after the form is successfully saved but before redirecting the user.\"\"\"\nverb = \"Created\" if created else \"Modified\"\nmsg = f\"{verb} {self.queryset.model._meta.verbose_name}\"\nlogger.info(f\"{msg} {obj} (PK: {obj.pk})\")\nif hasattr(obj, \"get_absolute_url\"):\nmsg = format_html('{} &lt;a href=\"{}\"&gt;{}&lt;/a&gt;', msg, obj.get_absolute_url(), obj)\nelse:\nmsg = format_html(\"{} {}\", msg, obj)\nmessages.success(request, msg)\ndef post(self, request, *args, **kwargs):\nlogger = logging.getLogger(__name__ + \".ObjectEditView\")\nobj = self.alter_obj(self.get_object(kwargs), request, args, kwargs)\nform = self.model_form(data=request.POST, files=request.FILES, instance=obj)\nrestrict_form_fields(form, request.user)\nif form.is_valid():\nlogger.debug(\"Form validation was successful\")\ntry:\nwith transaction.atomic():\nobject_created = not form.instance.present_in_database\nobj = form.save()\n# Check that the new object conforms with any assigned object-level permissions\nself.queryset.get(pk=obj.pk)\nif hasattr(form, \"save_note\") and callable(form.save_note):\nform.save_note(instance=obj, user=request.user)\nself.successful_post(request, obj, object_created, logger)\nif \"_addanother\" in request.POST:\n# If the object has clone_fields, pre-populate a new instance of the form\nif hasattr(obj, \"clone_fields\"):\nurl = f\"{request.path}?{prepare_cloned_fields(obj)}\"\nreturn redirect(url)\nreturn redirect(request.get_full_path())\nreturn_url = form.cleaned_data.get(\"return_url\")\nif return_url is not None and is_safe_url(url=return_url, allowed_hosts=request.get_host()):\nreturn redirect(return_url)\nelse:\nreturn redirect(self.get_return_url(request, obj))\nexcept ObjectDoesNotExist:\nmsg = \"Object save failed due to object-level permissions violation\"\nlogger.debug(msg)\nform.add_error(None, msg)\nelse:\nlogger.debug(\"Form validation failed\")\nreturn render(\nrequest,\nself.template_name,\n{\n\"obj\": obj,\n\"obj_type\": self.queryset.model._meta.verbose_name,\n\"form\": form,\n\"return_url\": self.get_return_url(request, obj),\n\"editing\": obj.present_in_database,\n**self.get_extra_context(request, obj),\n},\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.generic.ObjectEditView.get_extra_context","title":"<code>get_extra_context(request, instance)</code>","text":"<p>Return any additional context data for the template.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The current request</p> required <code>instance</code> <code>Model</code> <p>The object being edited</p> required <p>Returns:</p> Type Description <code>dict</code> <p>Additional context data</p> Source code in <code>nautobot/core/views/generic.py</code> <pre><code>def get_extra_context(self, request, instance):\n\"\"\"\n    Return any additional context data for the template.\n    Args:\n        request (HttpRequest): The current request\n        instance (Model): The object being edited\n    Returns:\n        (dict): Additional context data\n    \"\"\"\nreturn {}\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.generic.ObjectEditView.get_object","title":"<code>get_object(kwargs)</code>","text":"<p>Retrieve an object based on <code>kwargs</code>.</p> Source code in <code>nautobot/core/views/generic.py</code> <pre><code>def get_object(self, kwargs):\n\"\"\"Retrieve an object based on `kwargs`.\"\"\"\n# Look up an existing object by PK, name, or slug, if provided.\nfor field in (\"pk\", \"name\", \"slug\"):\nif field in kwargs:\nreturn get_object_or_404(self.queryset, **{field: kwargs[field]})\nreturn self.queryset.model()\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.generic.ObjectEditView.successful_post","title":"<code>successful_post(request, obj, created, logger)</code>","text":"<p>Callback after the form is successfully saved but before redirecting the user.</p> Source code in <code>nautobot/core/views/generic.py</code> <pre><code>def successful_post(self, request, obj, created, logger):\n\"\"\"Callback after the form is successfully saved but before redirecting the user.\"\"\"\nverb = \"Created\" if created else \"Modified\"\nmsg = f\"{verb} {self.queryset.model._meta.verbose_name}\"\nlogger.info(f\"{msg} {obj} (PK: {obj.pk})\")\nif hasattr(obj, \"get_absolute_url\"):\nmsg = format_html('{} &lt;a href=\"{}\"&gt;{}&lt;/a&gt;', msg, obj.get_absolute_url(), obj)\nelse:\nmsg = format_html(\"{} {}\", msg, obj)\nmessages.success(request, msg)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.ObjectEditViewMixin","title":"<code>nautobot.apps.views.ObjectEditViewMixin</code>","text":"<p>             Bases: <code>NautobotViewSetMixin</code>, <code>mixins.CreateModelMixin</code>, <code>mixins.UpdateModelMixin</code></p> <p>UI mixin to create or update a model instance.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>class ObjectEditViewMixin(NautobotViewSetMixin, mixins.CreateModelMixin, mixins.UpdateModelMixin):\n\"\"\"\n    UI mixin to create or update a model instance.\n    \"\"\"\ndef _process_create_or_update_form(self, form):\n\"\"\"\n        Helper method to create or update an object after the form is validated successfully.\n        \"\"\"\nrequest = self.request\nqueryset = self.get_queryset()\nwith transaction.atomic():\nobject_created = not form.instance.present_in_database\nobj = self.form_save(form)\n# Check that the new object conforms with any assigned object-level permissions\nqueryset.get(pk=obj.pk)\nif hasattr(form, \"save_note\") and callable(form.save_note):\nform.save_note(instance=obj, user=request.user)\nmsg = f'{\"Created\" if object_created else \"Modified\"} {queryset.model._meta.verbose_name}'\nself.logger.info(f\"{msg} {obj} (PK: {obj.pk})\")\nif hasattr(obj, \"get_absolute_url\"):\nmsg = format_html('{} &lt;a href=\"{}\"&gt;{}&lt;/a&gt;', msg, obj.get_absolute_url(), obj)\nelse:\nmsg = format_html(\"{} {}\", msg, obj)\nmessages.success(request, msg)\nif \"_addanother\" in request.POST:\n# If the object has clone_fields, pre-populate a new instance of the form\nif hasattr(obj, \"clone_fields\"):\nurl = f\"{request.path}?{prepare_cloned_fields(obj)}\"\nself.success_url = url\nself.success_url = request.get_full_path()\nelse:\nreturn_url = form.cleaned_data.get(\"return_url\")\nif return_url is not None and is_safe_url(url=return_url, allowed_hosts=request.get_host()):\nself.success_url = return_url\nelse:\nself.success_url = self.get_return_url(request, obj)\ndef create(self, request, *args, **kwargs):\n\"\"\"\n        request.GET: render the ObjectForm which is passed to NautobotHTMLRenderer as Response.\n        request.POST: call perform_create() which validates the form and perform the action of create.\n        Override to add more variables to Response.\n        \"\"\"\ncontext = {}\nif request.method == \"POST\":\nreturn self.perform_create(request, *args, **kwargs)\nreturn Response(context)\n# TODO: this conflicts with DRF's CreateModelMixin.perform_create(self, serializer) API\ndef perform_create(self, request, *args, **kwargs):  # pylint: disable=arguments-differ\n\"\"\"\n        Function to validate the ObjectForm and to create a new object.\n        \"\"\"\nself.obj = self.get_object()\nform_class = self.get_form_class()\nform = form_class(data=request.POST, files=request.FILES, instance=self.obj)\nrestrict_form_fields(form, request.user)\nif form.is_valid():\nreturn self.form_valid(form)\nelse:\nreturn self.form_invalid(form)\ndef update(self, request, *args, **kwargs):\n\"\"\"\n        request.GET: render the ObjectEditForm which is passed to NautobotHTMLRenderer as Response.\n        request.POST: call perform_update() which validates the form and perform the action of update/partial_update of an existing object.\n        Override to add more variables to Response.\n        \"\"\"\ncontext = {}\nif request.method == \"POST\":\nreturn self.perform_update(request, *args, **kwargs)\nreturn Response(context)\n# TODO: this conflicts with DRF's UpdateModelMixin.perform_update(self, serializer) API\ndef perform_update(self, request, *args, **kwargs):  # pylint: disable=arguments-differ\n\"\"\"\n        Function to validate the ObjectEditForm and to update/partial_update an existing object.\n        \"\"\"\nself.obj = self.get_object()\nform_class = self.get_form_class()\nform = form_class(data=request.POST, files=request.FILES, instance=self.obj)\nrestrict_form_fields(form, request.user)\nif form.is_valid():\nreturn self.form_valid(form)\nelse:\nreturn self.form_invalid(form)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ObjectEditViewMixin.create","title":"<code>create(request, *args, **kwargs)</code>","text":"<p>request.GET: render the ObjectForm which is passed to NautobotHTMLRenderer as Response. request.POST: call perform_create() which validates the form and perform the action of create. Override to add more variables to Response.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def create(self, request, *args, **kwargs):\n\"\"\"\n    request.GET: render the ObjectForm which is passed to NautobotHTMLRenderer as Response.\n    request.POST: call perform_create() which validates the form and perform the action of create.\n    Override to add more variables to Response.\n    \"\"\"\ncontext = {}\nif request.method == \"POST\":\nreturn self.perform_create(request, *args, **kwargs)\nreturn Response(context)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ObjectEditViewMixin.perform_create","title":"<code>perform_create(request, *args, **kwargs)</code>","text":"<p>Function to validate the ObjectForm and to create a new object.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def perform_create(self, request, *args, **kwargs):  # pylint: disable=arguments-differ\n\"\"\"\n    Function to validate the ObjectForm and to create a new object.\n    \"\"\"\nself.obj = self.get_object()\nform_class = self.get_form_class()\nform = form_class(data=request.POST, files=request.FILES, instance=self.obj)\nrestrict_form_fields(form, request.user)\nif form.is_valid():\nreturn self.form_valid(form)\nelse:\nreturn self.form_invalid(form)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ObjectEditViewMixin.perform_update","title":"<code>perform_update(request, *args, **kwargs)</code>","text":"<p>Function to validate the ObjectEditForm and to update/partial_update an existing object.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def perform_update(self, request, *args, **kwargs):  # pylint: disable=arguments-differ\n\"\"\"\n    Function to validate the ObjectEditForm and to update/partial_update an existing object.\n    \"\"\"\nself.obj = self.get_object()\nform_class = self.get_form_class()\nform = form_class(data=request.POST, files=request.FILES, instance=self.obj)\nrestrict_form_fields(form, request.user)\nif form.is_valid():\nreturn self.form_valid(form)\nelse:\nreturn self.form_invalid(form)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ObjectEditViewMixin.update","title":"<code>update(request, *args, **kwargs)</code>","text":"<p>request.GET: render the ObjectEditForm which is passed to NautobotHTMLRenderer as Response. request.POST: call perform_update() which validates the form and perform the action of update/partial_update of an existing object. Override to add more variables to Response.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def update(self, request, *args, **kwargs):\n\"\"\"\n    request.GET: render the ObjectEditForm which is passed to NautobotHTMLRenderer as Response.\n    request.POST: call perform_update() which validates the form and perform the action of update/partial_update of an existing object.\n    Override to add more variables to Response.\n    \"\"\"\ncontext = {}\nif request.method == \"POST\":\nreturn self.perform_update(request, *args, **kwargs)\nreturn Response(context)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.ObjectImportView","title":"<code>nautobot.apps.views.ObjectImportView</code>","text":"<p>             Bases: <code>GetReturnURLMixin</code>, <code>ObjectPermissionRequiredMixin</code>, <code>View</code></p> <p>Import a single object (YAML or JSON format).</p> <p>queryset: Base queryset for the objects being created model_form: The ModelForm used to create individual objects related_object_forms: A dictionary mapping of forms to be used for the creation of related (child) objects template_name: The name of the template</p> Source code in <code>nautobot/core/views/generic.py</code> <pre><code>class ObjectImportView(GetReturnURLMixin, ObjectPermissionRequiredMixin, View):\n\"\"\"\n    Import a single object (YAML or JSON format).\n    queryset: Base queryset for the objects being created\n    model_form: The ModelForm used to create individual objects\n    related_object_forms: A dictionary mapping of forms to be used for the creation of related (child) objects\n    template_name: The name of the template\n    \"\"\"\nqueryset = None\nmodel_form = None\nrelated_object_forms = {}\ntemplate_name = \"generic/object_import.html\"\ndef get_required_permission(self):\nreturn get_permission_for_model(self.queryset.model, \"add\")\ndef get(self, request):\nform = ImportForm()\nreturn render(\nrequest,\nself.template_name,\n{\n\"form\": form,\n\"obj_type\": self.queryset.model._meta.verbose_name,\n\"return_url\": self.get_return_url(request),\n},\n)\ndef post(self, request):\nlogger = logging.getLogger(__name__ + \".ObjectImportView\")\nform = ImportForm(request.POST)\nif form.is_valid():\nlogger.debug(\"Import form validation was successful\")\n# Initialize model form\ndata = form.cleaned_data[\"data\"]\nmodel_form = self.model_form(data)\nrestrict_form_fields(model_form, request.user)\n# Assign default values for any fields which were not specified. We have to do this manually because passing\n# 'initial=' to the form on initialization merely sets default values for the widgets. Since widgets are not\n# used for YAML/JSON import, we first bind the imported data normally, then update the form's data with the\n# applicable field defaults as needed prior to form validation.\nfor field_name, field in model_form.fields.items():\nif field_name not in data and hasattr(field, \"initial\"):\nmodel_form.data[field_name] = field.initial\nif model_form.is_valid():\ntry:\nwith transaction.atomic():\n# Save the primary object\nobj = model_form.save()\n# Enforce object-level permissions\nself.queryset.get(pk=obj.pk)\nlogger.debug(f\"Created {obj} (PK: {obj.pk})\")\n# Iterate through the related object forms (if any), validating and saving each instance.\nfor (\nfield_name,\nrelated_object_form,\n) in self.related_object_forms.items():\nlogger.debug(\"Processing form for related objects: {related_object_form}\")\nrelated_obj_pks = []\nfor i, rel_obj_data in enumerate(data.get(field_name, [])):\nf = related_object_form(obj, rel_obj_data)\nfor subfield_name, field in f.fields.items():\nif subfield_name not in rel_obj_data and hasattr(field, \"initial\"):\nf.data[subfield_name] = field.initial\nif f.is_valid():\nrelated_obj = f.save()\nrelated_obj_pks.append(related_obj.pk)\nelse:\n# Replicate errors on the related object form to the primary form for display\nfor subfield_name, errors in f.errors.items():\nfor err in errors:\nerr_msg = f\"{field_name}[{i}] {subfield_name}: {err}\"\nmodel_form.add_error(None, err_msg)\nraise AbortTransaction()\n# Enforce object-level permissions on related objects\nmodel = related_object_form.Meta.model\nif model.objects.filter(pk__in=related_obj_pks).count() != len(related_obj_pks):\nraise ObjectDoesNotExist\nexcept AbortTransaction:\npass\nexcept ObjectDoesNotExist:\nmsg = \"Object creation failed due to object-level permissions violation\"\nlogger.debug(msg)\nform.add_error(None, msg)\nif not model_form.errors:\nlogger.info(f\"Import object {obj} (PK: {obj.pk})\")\nmessages.success(\nrequest,\nformat_html('Imported object: &lt;a href=\"{}\"&gt;{}&lt;/a&gt;', obj.get_absolute_url(), obj),\n)\nif \"_addanother\" in request.POST:\nreturn redirect(request.get_full_path())\nreturn_url = form.cleaned_data.get(\"return_url\")\nif return_url is not None and is_safe_url(url=return_url, allowed_hosts=request.get_host()):\nreturn redirect(return_url)\nelse:\nreturn redirect(self.get_return_url(request, obj))\nelse:\nlogger.debug(\"Model form validation failed\")\n# Replicate model form errors for display\nfor field, errors in model_form.errors.items():\nfor err in errors:\nif field == \"__all__\":\nform.add_error(None, err)\nelse:\nform.add_error(None, f\"{field}: {err}\")\nelse:\nlogger.debug(\"Import form validation failed\")\nreturn render(\nrequest,\nself.template_name,\n{\n\"form\": form,\n\"obj_type\": self.queryset.model._meta.verbose_name,\n\"return_url\": self.get_return_url(request),\n},\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.ObjectListView","title":"<code>nautobot.apps.views.ObjectListView</code>","text":"<p>             Bases: <code>ObjectPermissionRequiredMixin</code>, <code>View</code></p> <p>List a series of objects.</p> The queryset of objects to display. Note: Prefetching related objects is not necessary, as the <p>table will prefetch objects as needed depending on the columns being displayed.</p> <p>filter: A django-filter FilterSet that is applied to the queryset filter_form: The form used to render filter options table: The django-tables2 Table used to render the objects list template_name: The name of the template non_filter_params: List of query parameters that are not used for queryset filtering</p> Source code in <code>nautobot/core/views/generic.py</code> <pre><code>class ObjectListView(ObjectPermissionRequiredMixin, View):\n\"\"\"\n    List a series of objects.\n    queryset: The queryset of objects to display. Note: Prefetching related objects is not necessary, as the\n      table will prefetch objects as needed depending on the columns being displayed.\n    filter: A django-filter FilterSet that is applied to the queryset\n    filter_form: The form used to render filter options\n    table: The django-tables2 Table used to render the objects list\n    template_name: The name of the template\n    non_filter_params: List of query parameters that are **not** used for queryset filtering\n    \"\"\"\nqueryset = None\nfilterset = None\nfilterset_form = None\ntable = None\ntemplate_name = \"generic/object_list.html\"\naction_buttons = (\"add\", \"import\", \"export\")\nnon_filter_params = (\n\"export\",  # trigger for CSV/export-template/YAML export\n\"page\",  # used by django-tables2.RequestConfig\n\"per_page\",  # used by get_paginate_count\n\"sort\",  # table sorting\n)\ndef get_filter_params(self, request):\n\"\"\"Helper function - take request.GET and discard any parameters that are not used for queryset filtering.\"\"\"\nfilter_params = request.GET.copy()\nreturn get_filterable_params_from_filter_params(filter_params, self.non_filter_params, self.filterset())\ndef get_required_permission(self):\nreturn get_permission_for_model(self.queryset.model, \"view\")\n# TODO: remove this as well?\ndef queryset_to_yaml(self):\n\"\"\"\n        Export the queryset of objects as concatenated YAML documents.\n        \"\"\"\nyaml_data = [obj.to_yaml() for obj in self.queryset]\nreturn \"---\\n\".join(yaml_data)\ndef validate_action_buttons(self, request):\n\"\"\"Verify actions in self.action_buttons are valid view actions.\"\"\"\nalways_valid_actions = (\"export\",)\nvalid_actions = []\ninvalid_actions = []\n# added check for whether the action_buttons exist because of issue #2107\nif self.action_buttons is None:\nself.action_buttons = []\nfor action in self.action_buttons:\nif action in always_valid_actions or validated_viewname(self.queryset.model, action) is not None:\nvalid_actions.append(action)\nelse:\ninvalid_actions.append(action)\nif invalid_actions:\nmessages.error(request, f\"Missing views for action(s) {', '.join(invalid_actions)}\")\nreturn valid_actions\ndef get(self, request):\nmodel = self.queryset.model\ncontent_type = ContentType.objects.get_for_model(model)\ndisplay_filter_params = []\ndynamic_filter_form = None\nfilter_form = None\nif self.filterset:\nfilter_params = self.get_filter_params(request)\nfilterset = self.filterset(filter_params, self.queryset)\nself.queryset = filterset.qs\nif not filterset.is_valid():\nmessages.error(\nrequest,\nformat_html(\"Invalid filters were specified: {}\", filterset.errors),\n)\nself.queryset = self.queryset.none()\ndisplay_filter_params = [\ncheck_filter_for_display(filterset.filters, field_name, values)\nfor field_name, values in filter_params.items()\n]\nif request.GET:\nfactory_formset_params = convert_querydict_to_factory_formset_acceptable_querydict(\nrequest.GET, filterset\n)\ndynamic_filter_form = DynamicFilterFormSet(filterset=filterset, data=factory_formset_params)\nelse:\ndynamic_filter_form = DynamicFilterFormSet(filterset=filterset)\nif self.filterset_form:\nfilter_form = self.filterset_form(filter_params, label_suffix=\"\")\n# Check for export template rendering\nif request.GET.get(\"export\"):\net = get_object_or_404(\nExportTemplate,\ncontent_type=content_type,\nname=request.GET.get(\"export\"),\n)\ntry:\nreturn et.render_to_response(self.queryset)\nexcept Exception as e:\nmessages.error(\nrequest,\nf\"There was an error rendering the selected export template ({et.name}): {e}\",\n)\n# Check for YAML export support\nelif \"export\" in request.GET and hasattr(model, \"to_yaml\"):\nresponse = HttpResponse(self.queryset_to_yaml(), content_type=\"text/yaml\")\nfilename = f\"{settings.BRANDING_PREPENDED_FILENAME}{self.queryset.model._meta.verbose_name_plural}.yaml\"\nresponse[\"Content-Disposition\"] = f'attachment; filename=\"{filename}\"'\nreturn response\n# Provide a hook to tweak the queryset based on the request immediately prior to rendering the object list\nself.queryset = self.alter_queryset(request)\n# Compile a dictionary indicating which permissions are available to the current user for this model\npermissions = {}\nfor action in (\"add\", \"change\", \"delete\", \"view\"):\nperm_name = get_permission_for_model(model, action)\npermissions[action] = request.user.has_perm(perm_name)\ntable = None\ntable_config_form = None\nif self.table:\n# Construct the objects table\n# Order By is needed in the table `__init__` method\norder_by = self.request.GET.getlist(\"sort\")\ntable = self.table(self.queryset, user=request.user, order_by=order_by)\nif \"pk\" in table.base_columns and (permissions[\"change\"] or permissions[\"delete\"]):\ntable.columns.show(\"pk\")\n# Apply the request context\npaginate = {\n\"paginator_class\": EnhancedPaginator,\n\"per_page\": get_paginate_count(request),\n}\nRequestConfig(request, paginate).configure(table)\ntable_config_form = TableConfigForm(table=table)\nmax_page_size = get_settings_or_config(\"MAX_PAGE_SIZE\")\nif max_page_size and paginate[\"per_page\"] &gt; max_page_size:\nmessages.warning(\nrequest,\nf'Requested \"per_page\" is too large. No more than {max_page_size} items may be displayed at a time.',\n)\n# For the search form field, use a custom placeholder.\nq_placeholder = \"Search \" + bettertitle(model._meta.verbose_name_plural)\nsearch_form = SearchForm(data=request.GET, q_placeholder=q_placeholder)\nvalid_actions = self.validate_action_buttons(request)\ncontext = {\n\"content_type\": content_type,\n\"table\": table,\n\"permissions\": permissions,\n\"action_buttons\": valid_actions,\n\"table_config_form\": table_config_form,\n\"filter_params\": display_filter_params,\n\"filter_form\": filter_form,\n\"dynamic_filter_form\": dynamic_filter_form,\n\"search_form\": search_form,\n\"list_url\": validated_viewname(model, \"list\"),\n\"title\": bettertitle(model._meta.verbose_name_plural),\n}\n# `extra_context()` would require `request` access, however `request` parameter cannot simply be\n# added to `extra_context()` because  this method has been used by multiple apps without any parameters.\n# Changing 'def extra context()' to 'def extra context(request)' might break current methods\n# in plugins and core that either override or implement it without request.\nsetattr(self, \"request\", request)\ncontext.update(self.extra_context())\nreturn render(request, self.template_name, context)\ndef alter_queryset(self, request):\n# .all() is necessary to avoid caching queries\nreturn self.queryset.all()\ndef extra_context(self):\nreturn {}\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.generic.ObjectListView.get_filter_params","title":"<code>get_filter_params(request)</code>","text":"<p>Helper function - take request.GET and discard any parameters that are not used for queryset filtering.</p> Source code in <code>nautobot/core/views/generic.py</code> <pre><code>def get_filter_params(self, request):\n\"\"\"Helper function - take request.GET and discard any parameters that are not used for queryset filtering.\"\"\"\nfilter_params = request.GET.copy()\nreturn get_filterable_params_from_filter_params(filter_params, self.non_filter_params, self.filterset())\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.generic.ObjectListView.queryset_to_yaml","title":"<code>queryset_to_yaml()</code>","text":"<p>Export the queryset of objects as concatenated YAML documents.</p> Source code in <code>nautobot/core/views/generic.py</code> <pre><code>def queryset_to_yaml(self):\n\"\"\"\n    Export the queryset of objects as concatenated YAML documents.\n    \"\"\"\nyaml_data = [obj.to_yaml() for obj in self.queryset]\nreturn \"---\\n\".join(yaml_data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.generic.ObjectListView.validate_action_buttons","title":"<code>validate_action_buttons(request)</code>","text":"<p>Verify actions in self.action_buttons are valid view actions.</p> Source code in <code>nautobot/core/views/generic.py</code> <pre><code>def validate_action_buttons(self, request):\n\"\"\"Verify actions in self.action_buttons are valid view actions.\"\"\"\nalways_valid_actions = (\"export\",)\nvalid_actions = []\ninvalid_actions = []\n# added check for whether the action_buttons exist because of issue #2107\nif self.action_buttons is None:\nself.action_buttons = []\nfor action in self.action_buttons:\nif action in always_valid_actions or validated_viewname(self.queryset.model, action) is not None:\nvalid_actions.append(action)\nelse:\ninvalid_actions.append(action)\nif invalid_actions:\nmessages.error(request, f\"Missing views for action(s) {', '.join(invalid_actions)}\")\nreturn valid_actions\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.ObjectListViewMixin","title":"<code>nautobot.apps.views.ObjectListViewMixin</code>","text":"<p>             Bases: <code>NautobotViewSetMixin</code>, <code>mixins.ListModelMixin</code></p> <p>UI mixin to list a model queryset</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>class ObjectListViewMixin(NautobotViewSetMixin, mixins.ListModelMixin):\n\"\"\"\n    UI mixin to list a model queryset\n    \"\"\"\naction_buttons = (\"add\", \"import\", \"export\")\nfilterset_class = None\nfilterset_form_class = None\nnon_filter_params = (\n\"export\",  # trigger for CSV/export-template/YAML export\n\"page\",  # used by django-tables2.RequestConfig\n\"per_page\",  # used by get_paginate_count\n\"sort\",  # table sorting\n)\ndef filter_queryset(self, queryset):\n\"\"\"\n        Filter a query with request querystrings.\n        \"\"\"\nif self.filterset_class is not None:\nself.filter_params = self.get_filter_params(self.request)\nself.filterset = self.filterset_class(self.filter_params, queryset)\nqueryset = self.filterset.qs\nif not self.filterset.is_valid():\nmessages.error(\nself.request,\nformat_html(\"Invalid filters were specified: {}\", self.filterset.errors),\n)\nqueryset = queryset.none()\nreturn queryset\ndef check_for_export(self, request, model, content_type):\n# Check for export template rendering\nqueryset = self.filter_queryset(self.get_queryset())\nif request.GET.get(\"export\"):\net = get_object_or_404(\nExportTemplate,\ncontent_type=content_type,\nname=request.GET.get(\"export\"),\n)\ntry:\nreturn et.render_to_response(queryset)\nexcept Exception as e:\nmessages.error(\nrequest,\nf\"There was an error rendering the selected export template ({et.name}): {e}\",\n)\n# Check for YAML export support\nelif \"export\" in request.GET and hasattr(model, \"to_yaml\"):\nresponse = HttpResponse(self.queryset_to_yaml(), content_type=\"text/yaml\")\nfilename = f\"nautobot_{queryset.model._meta.verbose_name_plural}.yaml\"\nresponse[\"Content-Disposition\"] = f'attachment; filename=\"{filename}\"'\nreturn response\nreturn None\ndef queryset_to_yaml(self):\n\"\"\"\n        Export the queryset of objects as concatenated YAML documents.\n        \"\"\"\nqueryset = self.filter_queryset(self.get_queryset())\nyaml_data = [obj.to_yaml() for obj in queryset]\nreturn \"---\\n\".join(yaml_data)\ndef list(self, request, *args, **kwargs):\n\"\"\"\n        List the model instances.\n        \"\"\"\ncontext = {\"use_new_ui\": True}\nif \"export\" in request.GET:\nqueryset = self.get_queryset()\nmodel = queryset.model\ncontent_type = ContentType.objects.get_for_model(model)\nresponse = self.check_for_export(request, model, content_type)\nif response is not None:\nreturn response\nreturn Response(context)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ObjectListViewMixin.filter_queryset","title":"<code>filter_queryset(queryset)</code>","text":"<p>Filter a query with request querystrings.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def filter_queryset(self, queryset):\n\"\"\"\n    Filter a query with request querystrings.\n    \"\"\"\nif self.filterset_class is not None:\nself.filter_params = self.get_filter_params(self.request)\nself.filterset = self.filterset_class(self.filter_params, queryset)\nqueryset = self.filterset.qs\nif not self.filterset.is_valid():\nmessages.error(\nself.request,\nformat_html(\"Invalid filters were specified: {}\", self.filterset.errors),\n)\nqueryset = queryset.none()\nreturn queryset\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ObjectListViewMixin.list","title":"<code>list(request, *args, **kwargs)</code>","text":"<p>List the model instances.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def list(self, request, *args, **kwargs):\n\"\"\"\n    List the model instances.\n    \"\"\"\ncontext = {\"use_new_ui\": True}\nif \"export\" in request.GET:\nqueryset = self.get_queryset()\nmodel = queryset.model\ncontent_type = ContentType.objects.get_for_model(model)\nresponse = self.check_for_export(request, model, content_type)\nif response is not None:\nreturn response\nreturn Response(context)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ObjectListViewMixin.queryset_to_yaml","title":"<code>queryset_to_yaml()</code>","text":"<p>Export the queryset of objects as concatenated YAML documents.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def queryset_to_yaml(self):\n\"\"\"\n    Export the queryset of objects as concatenated YAML documents.\n    \"\"\"\nqueryset = self.filter_queryset(self.get_queryset())\nyaml_data = [obj.to_yaml() for obj in queryset]\nreturn \"---\\n\".join(yaml_data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.ObjectNotesView","title":"<code>nautobot.apps.views.ObjectNotesView</code>","text":"<p>             Bases: <code>View</code></p> <p>Present a list of notes associated to a particular object. base_template: The name of the template to extend. If not provided, \"/.html\" will be used. Source code in <code>nautobot/extras/views.py</code> <pre><code>class ObjectNotesView(View):\n\"\"\"\n    Present a list of notes associated to a particular object.\n    base_template: The name of the template to extend. If not provided, \"&lt;app&gt;/&lt;model&gt;.html\" will be used.\n    \"\"\"\nbase_template = None\ndef get(self, request, model, **kwargs):\n# Handle QuerySet restriction of parent object if needed\nif hasattr(model.objects, \"restrict\"):\nobj = get_object_or_404(model.objects.restrict(request.user, \"view\"), **kwargs)\nelse:\nobj = get_object_or_404(model, **kwargs)\nnotes_form = forms.NoteForm(\ninitial={\n\"assigned_object_type\": ContentType.objects.get_for_model(obj),\n\"assigned_object_id\": obj.pk,\n}\n)\nnotes_table = tables.NoteTable(obj.notes)\n# Apply the request context\npaginate = {\n\"paginator_class\": EnhancedPaginator,\n\"per_page\": get_paginate_count(request),\n}\nRequestConfig(request, paginate).configure(notes_table)\nself.base_template = get_base_template(self.base_template, model)\nreturn render(\nrequest,\n\"extras/object_notes.html\",\n{\n\"object\": obj,\n\"verbose_name\": obj._meta.verbose_name,\n\"verbose_name_plural\": obj._meta.verbose_name_plural,\n\"table\": notes_table,\n\"base_template\": self.base_template,\n\"active_tab\": \"notes\",\n\"form\": notes_form,\n},\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.ObjectNotesViewMixin","title":"<code>nautobot.apps.views.ObjectNotesViewMixin</code>","text":"<p>             Bases: <code>NautobotViewSetMixin</code></p> <p>UI Mixin for an Object's Notes.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>class ObjectNotesViewMixin(NautobotViewSetMixin):\n\"\"\"\n    UI Mixin for an Object's Notes.\n    \"\"\"\nbase_template = None\n@drf_action(detail=True)\ndef notes(self, request, *args, **kwargs):\ndata = {\n\"base_template\": self.base_template,\n}\nreturn Response(data)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.ObjectPermissionRequiredMixin","title":"<code>nautobot.apps.views.ObjectPermissionRequiredMixin</code>","text":"<p>             Bases: <code>AccessMixin</code></p> <p>Similar to Django's built-in PermissionRequiredMixin, but extended to check for both model-level and object-level permission assignments. If the user has only object-level permissions assigned, the view's queryset is filtered to return only those objects on which the user is permitted to perform the specified action.</p> An optional iterable of statically declared permissions to evaluate in addition to those <p>derived from the object type</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>class ObjectPermissionRequiredMixin(AccessMixin):\n\"\"\"\n    Similar to Django's built-in PermissionRequiredMixin, but extended to check for both model-level and object-level\n    permission assignments. If the user has only object-level permissions assigned, the view's queryset is filtered\n    to return only those objects on which the user is permitted to perform the specified action.\n    additional_permissions: An optional iterable of statically declared permissions to evaluate in addition to those\n                            derived from the object type\n    \"\"\"\nadditional_permissions = []\ndef get_required_permission(self):\n\"\"\"\n        Return the specific permission necessary to perform the requested action on an object.\n        \"\"\"\nraise NotImplementedError(f\"{self.__class__.__name__} must implement get_required_permission()\")\ndef has_permission(self):\nuser = self.request.user\npermission_required = self.get_required_permission()\n# Check that the user has been granted the required permission(s).\nif user.has_perms((permission_required, *self.additional_permissions)):\n# Update the view's QuerySet to filter only the permitted objects\naction = permissions.resolve_permission(permission_required)[1]\nself.queryset = self.queryset.restrict(user, action)\nreturn True\nreturn False\ndef dispatch(self, request, *args, **kwargs):\nif not hasattr(self, \"queryset\"):\nraise ImproperlyConfigured(\n(\nf\"{self.__class__.__name__} has no queryset defined. \"\n\"ObjectPermissionRequiredMixin may only be used on views which define a base queryset\"\n)\n)\nif not self.has_permission():\nreturn self.handle_no_permission()\nreturn super().dispatch(request, *args, **kwargs)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.mixins.ObjectPermissionRequiredMixin.get_required_permission","title":"<code>get_required_permission()</code>","text":"<p>Return the specific permission necessary to perform the requested action on an object.</p> Source code in <code>nautobot/core/views/mixins.py</code> <pre><code>def get_required_permission(self):\n\"\"\"\n    Return the specific permission necessary to perform the requested action on an object.\n    \"\"\"\nraise NotImplementedError(f\"{self.__class__.__name__} must implement get_required_permission()\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.ObjectView","title":"<code>nautobot.apps.views.ObjectView</code>","text":"<p>             Bases: <code>ObjectPermissionRequiredMixin</code>, <code>View</code></p> <p>Retrieve a single object for display.</p> <p>queryset: The base queryset for retrieving the object template_name: Name of the template to use</p> Source code in <code>nautobot/core/views/generic.py</code> <pre><code>class ObjectView(ObjectPermissionRequiredMixin, View):\n\"\"\"\n    Retrieve a single object for display.\n    queryset: The base queryset for retrieving the object\n    template_name: Name of the template to use\n    \"\"\"\nqueryset = None\ntemplate_name = None\ndef get_required_permission(self):\nreturn get_permission_for_model(self.queryset.model, \"view\")\ndef get_template_name(self):\n\"\"\"\n        Return self.template_name if set. Otherwise, resolve the template path by model app_label and name.\n        \"\"\"\nif self.template_name is not None:\nreturn self.template_name\nmodel_opts = self.queryset.model._meta\nreturn f\"{model_opts.app_label}/{model_opts.model_name}.html\"\ndef get_extra_context(self, request, instance):\n\"\"\"\n        Return any additional context data for the template.\n        Args:\n            request (Request): The current request\n            instance (Model): The object being viewed\n        Returns:\n            (dict): Additional context data\n        \"\"\"\nreturn {\n\"active_tab\": request.GET.get(\"tab\", \"main\"),\n}\ndef get(self, request, *args, **kwargs):\n\"\"\"\n        Generic GET handler for accessing an object.\n        \"\"\"\ninstance = get_object_or_404(self.queryset, **kwargs)\n# TODO: this feels inelegant - should the tabs lookup be a dedicated endpoint rather than piggybacking\n# on the object-retrieve endpoint?\n# TODO: similar functionality probably needed in NautobotUIViewSet as well, not currently present\nif request.GET.get(\"viewconfig\", None) == \"true\":\n# TODO: we shouldn't be importing a private-named function from another module. Should it be renamed?\nfrom nautobot.extras.templatetags.plugins import _get_registered_content\ntemp_fake_context = {\n\"object\": instance,\n\"request\": request,\n\"settings\": {},\n\"csrf_token\": \"\",\n\"perms\": {},\n}\nplugin_tabs = _get_registered_content(instance, \"detail_tabs\", temp_fake_context, return_html=False)\nresp = {\"tabs\": plugin_tabs}\nreturn JsonResponse(resp)\nelse:\nreturn render(\nrequest,\nself.get_template_name(),\n{\n\"object\": instance,\n\"verbose_name\": self.queryset.model._meta.verbose_name,\n\"verbose_name_plural\": self.queryset.model._meta.verbose_name_plural,\n**self.get_extra_context(request, instance),\n},\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.generic.ObjectView.get","title":"<code>get(request, *args, **kwargs)</code>","text":"<p>Generic GET handler for accessing an object.</p> Source code in <code>nautobot/core/views/generic.py</code> <pre><code>def get(self, request, *args, **kwargs):\n\"\"\"\n    Generic GET handler for accessing an object.\n    \"\"\"\ninstance = get_object_or_404(self.queryset, **kwargs)\n# TODO: this feels inelegant - should the tabs lookup be a dedicated endpoint rather than piggybacking\n# on the object-retrieve endpoint?\n# TODO: similar functionality probably needed in NautobotUIViewSet as well, not currently present\nif request.GET.get(\"viewconfig\", None) == \"true\":\n# TODO: we shouldn't be importing a private-named function from another module. Should it be renamed?\nfrom nautobot.extras.templatetags.plugins import _get_registered_content\ntemp_fake_context = {\n\"object\": instance,\n\"request\": request,\n\"settings\": {},\n\"csrf_token\": \"\",\n\"perms\": {},\n}\nplugin_tabs = _get_registered_content(instance, \"detail_tabs\", temp_fake_context, return_html=False)\nresp = {\"tabs\": plugin_tabs}\nreturn JsonResponse(resp)\nelse:\nreturn render(\nrequest,\nself.get_template_name(),\n{\n\"object\": instance,\n\"verbose_name\": self.queryset.model._meta.verbose_name,\n\"verbose_name_plural\": self.queryset.model._meta.verbose_name_plural,\n**self.get_extra_context(request, instance),\n},\n)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.generic.ObjectView.get_extra_context","title":"<code>get_extra_context(request, instance)</code>","text":"<p>Return any additional context data for the template.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The current request</p> required <code>instance</code> <code>Model</code> <p>The object being viewed</p> required <p>Returns:</p> Type Description <code>dict</code> <p>Additional context data</p> Source code in <code>nautobot/core/views/generic.py</code> <pre><code>def get_extra_context(self, request, instance):\n\"\"\"\n    Return any additional context data for the template.\n    Args:\n        request (Request): The current request\n        instance (Model): The object being viewed\n    Returns:\n        (dict): Additional context data\n    \"\"\"\nreturn {\n\"active_tab\": request.GET.get(\"tab\", \"main\"),\n}\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.core.views.generic.ObjectView.get_template_name","title":"<code>get_template_name()</code>","text":"<p>Return self.template_name if set. Otherwise, resolve the template path by model app_label and name.</p> Source code in <code>nautobot/core/views/generic.py</code> <pre><code>def get_template_name(self):\n\"\"\"\n    Return self.template_name if set. Otherwise, resolve the template path by model app_label and name.\n    \"\"\"\nif self.template_name is not None:\nreturn self.template_name\nmodel_opts = self.queryset.model._meta\nreturn f\"{model_opts.app_label}/{model_opts.model_name}.html\"\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.check_and_call_git_repository_function","title":"<code>nautobot.apps.views.check_and_call_git_repository_function(request, pk, func)</code>","text":"<p>Helper for checking Git permissions and worker availability, then calling provided function if all is well</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>request object.</p> required <code>pk</code> <code>UUID</code> <p>GitRepository pk value.</p> required <code>func</code> <code>function</code> <p>Enqueue git repo function.</p> required <p>Returns:</p> Type Description <code>Union[HttpResponseForbidden, redirect]</code> <p>HttpResponseForbidden if user does not have permission to run the job, otherwise redirect to the job result page.</p> Source code in <code>nautobot/extras/views.py</code> <pre><code>def check_and_call_git_repository_function(request, pk, func):\n\"\"\"Helper for checking Git permissions and worker availability, then calling provided function if all is well\n    Args:\n        request (HttpRequest): request object.\n        pk (UUID): GitRepository pk value.\n        func (function): Enqueue git repo function.\n    Returns:\n        (Union[HttpResponseForbidden,redirect]): HttpResponseForbidden if user does not have permission to run the job,\n            otherwise redirect to the job result page.\n    \"\"\"\nif not request.user.has_perm(\"extras.change_gitrepository\"):\nreturn HttpResponseForbidden()\n# Allow execution only if a worker process is running.\nif not get_worker_count():\nmessages.error(request, \"Unable to run job: Celery worker process not running.\")\nreturn redirect(request.get_full_path(), permanent=False)\nelse:\nrepository = get_object_or_404(GitRepository, pk=pk)\njob_result = func(repository, request.user)\nreturn redirect(job_result.get_absolute_url())\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.check_filter_for_display","title":"<code>nautobot.apps.views.check_filter_for_display(filters, field_name, values)</code>","text":"<p>Return any additional context data for the template.</p> <p>Parameters:</p> Name Type Description Default <code>filters</code> <code>OrderedDict</code> <p>The output of <code>.get_filters()</code> of a desired FilterSet</p> required <code>field_name</code> <code>str</code> <p>The name of the filter to get a label for and lookup values</p> required <code>values</code> <code>list[str]</code> <p>List of strings that may be PKs to look up</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A dict containing: - name: (str) Field name - display: (str) Resolved field name, whether that's a field label or fallback to inputted <code>field_name</code> if label unavailable - values: (list) List of dictionaries with the same <code>name</code> and <code>display</code> keys</p> Source code in <code>nautobot/core/views/utils.py</code> <pre><code>def check_filter_for_display(filters, field_name, values):\n\"\"\"\n    Return any additional context data for the template.\n    Args:\n        filters (OrderedDict): The output of `.get_filters()` of a desired FilterSet\n        field_name (str): The name of the filter to get a label for and lookup values\n        values (list[str]): List of strings that may be PKs to look up\n    Returns:\n        (dict): A dict containing:\n            - name: (str) Field name\n            - display: (str) Resolved field name, whether that's a field label or fallback to inputted `field_name` if label unavailable\n            - values: (list) List of dictionaries with the same `name` and `display` keys\n    \"\"\"\nvalues = values if isinstance(values, (list, tuple)) else [values]\nresolved_filter = {\n\"name\": field_name,\n\"display\": field_name,\n\"values\": [{\"name\": value, \"display\": value} for value in values],\n}\nif field_name not in filters.keys():\nreturn resolved_filter\nfilter_field = filters[field_name]\nresolved_filter[\"display\"] = get_filter_field_label(filter_field)\nif len(values) == 0 or not hasattr(filter_field, \"queryset\") or not is_uuid(values[0]):\nreturn resolved_filter\nelse:\ntry:\nnew_values = []\nfor value in filter_field.queryset.filter(pk__in=values):\nnew_values.append({\"name\": str(value.pk), \"display\": getattr(value, \"display\", str(value))})\nresolved_filter[\"values\"] = new_values\nexcept (FieldError, AttributeError):\npass\nreturn resolved_filter\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.csv_format","title":"<code>nautobot.apps.views.csv_format(data)</code>","text":"<p>Convert the given list of data to a CSV row string.</p> <p>Encapsulate any data which contains a comma within double quotes.</p> <p>Obsolete, as CSV rendering in Nautobot core is now handled by nautobot.core.api.renderers.NautobotCSVRenderer.</p> Source code in <code>nautobot/core/views/utils.py</code> <pre><code>def csv_format(data):\n\"\"\"\n    Convert the given list of data to a CSV row string.\n    Encapsulate any data which contains a comma within double quotes.\n    Obsolete, as CSV rendering in Nautobot core is now handled by nautobot.core.api.renderers.NautobotCSVRenderer.\n    \"\"\"\ncsv = []\nfor value in data:\n# Represent None or False with empty string\nif value is None or value is False:\ncsv.append(\"\")\ncontinue\n# Convert dates to ISO format\nif isinstance(value, (datetime.date, datetime.datetime)):\nvalue = value.isoformat()\n# Force conversion to string first so we can check for any commas\nif not isinstance(value, str):\nvalue = f\"{value}\"\n# Double-quote the value if it contains a comma or line break\nif \",\" in value or \"\\n\" in value:\nvalue = value.replace('\"', '\"\"')  # Escape double-quotes\ncsv.append(f'\"{value}\"')\nelse:\ncsv.append(f\"{value}\")\nreturn \",\".join(csv)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.get_csv_form_fields_from_serializer_class","title":"<code>nautobot.apps.views.get_csv_form_fields_from_serializer_class(serializer_class)</code>","text":"<p>From the given serializer class, build a list of field dicts suitable for rendering in the CSV import form.</p> Source code in <code>nautobot/core/views/utils.py</code> <pre><code>def get_csv_form_fields_from_serializer_class(serializer_class):\n\"\"\"From the given serializer class, build a list of field dicts suitable for rendering in the CSV import form.\"\"\"\nserializer = serializer_class(context={\"request\": None, \"depth\": 0})\nfields = []\nfor field_name, field in serializer.fields.items():\nif field.read_only:\ncontinue\nif field_name == \"custom_fields\":\nfrom nautobot.extras.choices import CustomFieldTypeChoices\nfrom nautobot.extras.models import CustomField\ncfs = CustomField.objects.get_for_model(serializer_class.Meta.model)\nfor cf in cfs:\ncf_form_field = cf.to_form_field(set_initial=False)\nfield_info = {\n\"name\": cf.add_prefix_to_cf_key(),\n\"required\": cf_form_field.required,\n\"label\": cf_form_field.label,\n\"help_text\": cf_form_field.help_text,\n}\nif cf.type == CustomFieldTypeChoices.TYPE_BOOLEAN:\nfield_info[\"format\"] = mark_safe(\"&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;\")  # noqa: S308\nelif cf.type == CustomFieldTypeChoices.TYPE_DATE:\nfield_info[\"format\"] = mark_safe(\"&lt;code&gt;YYYY-MM-DD&lt;/code&gt;\")  # noqa: S308\nelif cf.type == CustomFieldTypeChoices.TYPE_SELECT:\nfield_info[\"choices\"] = {cfc.value: cfc.value for cfc in cf.custom_field_choices.all()}\nelif cf.type == CustomFieldTypeChoices.TYPE_MULTISELECT:\nfield_info[\"format\"] = mark_safe('&lt;code&gt;\"value,value\"&lt;/code&gt;')  # noqa: S308\nfield_info[\"choices\"] = {cfc.value: cfc.value for cfc in cf.custom_field_choices.all()}\nfields.append(field_info)\ncontinue\nfield_info = {\n\"name\": field_name,\n\"required\": field.required,\n\"label\": field.label,\n\"help_text\": field.help_text,\n}\nif isinstance(field, serializers.BooleanField):\nfield_info[\"format\"] = mark_safe(\"&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;\")  # noqa: S308\nelif isinstance(field, serializers.DateField):\nfield_info[\"format\"] = mark_safe(\"&lt;code&gt;YYYY-MM-DD&lt;/code&gt;\")  # noqa: S308\nelif isinstance(field, TimeZoneSerializerField):\nfield_info[\"format\"] = mark_safe(  # noqa: S308\n'&lt;a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\"&gt;available options&lt;/a&gt;'\n)\nelif isinstance(field, serializers.ManyRelatedField):\nif field.field_name == \"tags\":\nfield_info[\"format\"] = mark_safe('&lt;code&gt;\"name,name\"&lt;/code&gt; or &lt;code&gt;\"UUID,UUID\"&lt;/code&gt;')  # noqa: S308\nelif isinstance(field.child_relation, ContentTypeField):\nfield_info[\"format\"] = mark_safe('&lt;code&gt;\"app_label.model,app_label.model\"&lt;/code&gt;')  # noqa: S308\nelse:\nfield_info[\"format\"] = mark_safe('&lt;code&gt;\"UUID,UUID\"&lt;/code&gt;')  # noqa: S308\nelif isinstance(field, serializers.RelatedField):\nif isinstance(field, ContentTypeField):\nfield_info[\"format\"] = mark_safe(\"&lt;code&gt;app_label.model&lt;/code&gt;\")  # noqa: S308\nelse:\nfield_info[\"format\"] = mark_safe(\"&lt;code&gt;UUID&lt;/code&gt;\")  # noqa: S308\nelif isinstance(field, (serializers.ListField, serializers.MultipleChoiceField)):\nfield_info[\"format\"] = mark_safe('&lt;code&gt;\"value,value\"&lt;/code&gt;')  # noqa: S308\nelif isinstance(field, (serializers.DictField, serializers.JSONField)):\npass  # Not trivial to specify a format as it could be a JSON dict or a comma-separated string\nif isinstance(field, ChoiceField):\nfield_info[\"choices\"] = field.choices\nfields.append(field_info)\n# Move all required fields to the start of the list\n# TODO this ordering should be defined by the serializer instead...\nfields = sorted(fields, key=lambda info: 1 if info[\"required\"] else 2)\nreturn fields\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.get_paginate_count","title":"<code>nautobot.apps.views.get_paginate_count(request)</code>","text":"<p>Determine the length of a page, using the following in order:</p> <pre><code>1. per_page URL query parameter\n2. Saved user preference\n3. PAGINATE_COUNT global setting.\n</code></pre> Source code in <code>nautobot/core/views/paginator.py</code> <pre><code>def get_paginate_count(request):\n\"\"\"\n    Determine the length of a page, using the following in order:\n        1. per_page URL query parameter\n        2. Saved user preference\n        3. PAGINATE_COUNT global setting.\n    \"\"\"\nif \"per_page\" in request.GET:\ntry:\nper_page = int(request.GET.get(\"per_page\"))\nif request.user.is_authenticated:\nrequest.user.set_config(\"pagination.per_page\", per_page, commit=True)\nreturn per_page\nexcept ValueError:\npass\nif request.user.is_authenticated:\nreturn request.user.get_config(\"pagination.per_page\", config.get_settings_or_config(\"PAGINATE_COUNT\"))\nreturn config.get_settings_or_config(\"PAGINATE_COUNT\")\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.handle_protectederror","title":"<code>nautobot.apps.views.handle_protectederror(obj_list, request, e)</code>","text":"<p>Generate a user-friendly error message in response to a ProtectedError exception.</p> Source code in <code>nautobot/core/views/utils.py</code> <pre><code>def handle_protectederror(obj_list, request, e):\n\"\"\"\n    Generate a user-friendly error message in response to a ProtectedError exception.\n    \"\"\"\nprotected_objects = list(e.protected_objects)\nprotected_count = len(protected_objects) if len(protected_objects) &lt;= 50 else \"More than 50\"\nerr_message = format_html(\n\"Unable to delete &lt;strong&gt;{}&lt;/strong&gt;. {} dependent objects were found: \",\n\", \".join(str(obj) for obj in obj_list),\nprotected_count,\n)\n# Append dependent objects to error message\nerr_message += format_html_join(\n\", \",\n'&lt;a href=\"{}\"&gt;{}&lt;/a&gt;',\n((dependent.get_absolute_url(), dependent) for dependent in protected_objects[:50]),\n)\nmessages.error(request, err_message)\n</code></pre>"},{"location":"code-reference/nautobot/apps/views.html#nautobot.apps.views.prepare_cloned_fields","title":"<code>nautobot.apps.views.prepare_cloned_fields(instance)</code>","text":"<p>Compile an object's <code>clone_fields</code> list into a string of URL query parameters. Tags are automatically cloned where applicable.</p> Source code in <code>nautobot/core/views/utils.py</code> <pre><code>def prepare_cloned_fields(instance):\n\"\"\"\n    Compile an object's `clone_fields` list into a string of URL query parameters. Tags are automatically cloned where\n    applicable.\n    \"\"\"\nform_class = get_form_for_model(instance)\nform = form_class() if form_class is not None else None\nparams = []\nfor field_name in getattr(instance, \"clone_fields\", []):\nfield = instance._meta.get_field(field_name)\nfield_value = field.value_from_object(instance)\n# For foreign-key fields, if the ModelForm's field has a defined `to_field_name`,\n# use that field from the related object instead of its PK.\n# Example: Location.parent, LocationForm().fields[\"parent\"].to_field_name = \"name\", so use name rather than PK.\nif isinstance(field, ForeignKey):\nrelated_object = getattr(instance, field_name)\nif (\nrelated_object is not None\nand form is not None\nand field_name in form.fields\nand hasattr(form.fields[field_name], \"to_field_name\")\nand form.fields[field_name].to_field_name is not None\n):\nfield_value = getattr(related_object, form.fields[field_name].to_field_name)\n# Swap out False with URL-friendly value\nif field_value is False:\nfield_value = \"\"\n# This is likely an m2m field\nif isinstance(field_value, list):\nfor fv in field_value:\nitem_value = getattr(fv, \"pk\", str(fv))  # pk or str()\nparams.append((field_name, item_value))\n# Omit empty values\nelif field_value not in (None, \"\"):\nparams.append((field_name, field_value))\n# Copy tags\nif is_taggable(instance):\nfor tag in instance.tags.all():\nparams.append((\"tags\", tag.pk))\n# Concatenate parameters into a URL query string\nparam_string = \"&amp;\".join([f\"{k}={v}\" for k, v in params])\nreturn param_string\n</code></pre>"},{"location":"development/index.html","title":"Developer Guide","text":""},{"location":"development/apps/index.html","title":"App Development","text":"<p>This documentation covers the development of custom apps (plugins) for Nautobot. Nautobot apps are essentially self-contained Django applications which integrate with Nautobot to provide custom functionality. Since the development of Django applications is already very well-documented, this will only be covering the aspects that are specific to Nautobot.</p> <p>Apps can do a lot of different things, all of which will be covered in detail in this document. Keep in mind that each piece of functionality is entirely optional. For example, if your app merely adds a piece of middleware or an API endpoint for existing data, there's no need to define any new models.</p> <p>Changed in version 1.5.2</p> <p>The <code>nautobot.apps</code> namespace was added in Nautobot 1.5.2. If developing apps to be backwards-compatible with older versions of Nautobot, please refer to the app developer documentation of your required Nautobot version.</p> <p>Tip</p> <p>The app detail view (<code>/plugins/installed-plugins/&lt;plugin_name&gt;/</code>, accessible to superusers via Plugins -&gt; Installed Plugins in the navigation menu, then selecting a specific app) provides in-depth information about which features any installed app is implementing or making use of.</p>"},{"location":"development/apps/index.html#installing-and-using-plugins","title":"Installing and Using Plugins","text":"<p>Plugins are packaged Django apps that can be installed alongside Nautobot to provide custom functionality not present in the core application. Plugins can introduce their own models and views, but cannot interfere with existing components. A Nautobot user may opt to install plugins provided by the community or build his or her own.</p>"},{"location":"development/apps/index.html#capabilities","title":"Capabilities","text":"<p>The Nautobot plugin architecture allows for plugins to do any or all of the following:</p>"},{"location":"development/apps/index.html#extend-the-existing-nautobot-ui","title":"Extend the existing Nautobot UI","text":"<ul> <li>Add navigation menu items. A plugin can extend the navigation menus with new links and buttons or even entirely new menus.</li> <li>Add home page content. A plugin can add custom items or custom panels to the Nautobot home page.</li> <li>Add content to existing model detail views. A plugin can inject custom HTML content within the view of a core Nautobot model. This content can appear in the left column, right column, or full width of the page, and can also include custom buttons at the top of the page.</li> </ul> <p>Added in version 1.2.0</p> <ul> <li>Add a banner. A plugin can add a custom banner to the top of any appropriate views.</li> </ul> <p>Added in version 1.4.0</p> <ul> <li>Add extra tabs to existing model detail views. A plugin can inject additional tabs which will appear at the end of the object detail tabs list.</li> </ul>"},{"location":"development/apps/index.html#extend-and-customize-existing-nautobot-functionality","title":"Extend and customize existing Nautobot functionality","text":"<ul> <li>Add custom validation logic to existing data models. A plugin can provide additional logic to customize the rules for validating created/updated data records.</li> <li>Provide Jobs. A plugin can serve as a convenient way to package and install Jobs.</li> <li>Add additional Git data types. A plugin can add support for processing additional types of data stored in a Git repository.</li> </ul> <p>Added in version 1.1.0</p> <ul> <li>Register additional Jinja2 filters. A plugin can define custom Jinja2 filters to be used in computed fields, webhooks, custom links, and export templates.</li> </ul> <p>Added in version 1.2.0</p> <ul> <li> <p>Populate extensibility features in the database. A plugin can add content to the Nautobot database when installed, such as automatically creating new custom fields, relationships, and so forth.</p> </li> <li> <p>Add additional secrets providers. A plugin can add support for retrieving Secret values from additional sources or external systems.</p> </li> </ul> <p>Added in version 1.4.0</p> <ul> <li>Override already-defined views. A plugin can define a view which can be set to override a view from the core set of views or another plugin's view.</li> </ul>"},{"location":"development/apps/index.html#add-entirely-new-features","title":"Add entirely new features","text":"<ul> <li>Add new data models. A plugin can introduce one or more models to hold data. (A model is essentially a table in the SQL database.) These models can be integrated with core implementations of GraphQL, webhooks, logging, custom relationships, custom fields, and tags.</li> <li>Add new URLs and views. A plugin can register URLs under the <code>/plugins/</code> root path to provide browseable views (pages) for users.</li> <li>Add new REST API endpoints. A plugin can register URLs under the <code>/api/plugins/</code> root path to provide new REST API views.</li> <li>Add custom middleware. A plugin can provide and register custom Django middleware.</li> </ul> <p>Added in version 2.0.0</p> <ul> <li>Register data models for the global search. A plugin's data models can easily be included in the top-level \"global\" search.</li> </ul>"},{"location":"development/apps/index.html#declare-dependencies-and-requirements","title":"Declare dependencies and requirements","text":"<ul> <li>Declare configuration parameters. A plugin can define required, optional, and default configuration parameters within its unique namespace. Plugin configuration parameters are configurable under <code>PLUGINS_CONFIG</code> in <code>nautobot_config.py</code>.</li> <li>Limit installation by Nautobot version. A plugin can specify a minimum and/or maximum Nautobot version with which it is compatible.</li> <li>Add additional Django dependencies. A plugin can define additional Django application dependencies to require when the plugin is enabled.</li> </ul>"},{"location":"development/apps/index.html#limitations","title":"Limitations","text":"<p>Either by policy or by technical limitation, the interaction of plugins with Nautobot core is restricted in certain ways. A plugin may not:</p> <ul> <li>Modify core models. Plugins may not alter, remove, or override core Nautobot models in any way. This rule is in place to ensure the integrity of the core data model.</li> <li>Register URLs outside the <code>/plugins</code> root. All plugin URLs are restricted to this path to prevent path collisions with core or other plugins.</li> <li>Override core templates. Plugins can inject additional content where supported, but may not manipulate or remove core content.</li> <li>Modify core settings. A configuration registry is provided for plugins, however they cannot alter or delete the core configuration.</li> <li>Disable core components. Plugins are not permitted to disable or hide core Nautobot components.</li> </ul>"},{"location":"development/apps/porting-from-netbox.html","title":"Porting NetBox Plugins to Nautobot","text":"<p>Given an existing NetBox plugin, it will range from straightforward to very complicated to create a port of this plugin that's compatible with Nautobot, though in general it should be easier than developing a comparable plugin entirely from scratch. Of course, it would be impossible to provide a generalized, step-by-step guide that would cover all possibilities, but this document at least documents some known tips and tricks for this purpose.</p>"},{"location":"development/apps/porting-from-netbox.html#updating-python-module-import-paths","title":"Updating Python module import paths","text":"<p>The most likely first issue you will encounter will be a module import problem, and in most cases a simple change to the name of imported modules will suffice:</p> <ul> <li><code>circuits.* -&gt; nautobot.circuits.*</code></li> <li><code>dcim.* -&gt; nautobot.dcim.*</code></li> <li><code>extras.* -&gt; nautobot.extras.*</code></li> <li><code>ipam.* -&gt; nautobot.ipam.*</code></li> <li><code>netbox.* -&gt; nautobot.core.*</code></li> <li><code>tenancy.* -&gt; nautobot.tenancy.*</code></li> <li><code>utilities.* -&gt; nautobot.core.*</code></li> <li><code>virtualization.* -&gt; nautobot.virtualization.*</code></li> </ul> <p>Changed in version 2.0.0</p> <p>The equivalent of NetBox's <code>utilities</code> module moved from <code>nautobot.utilities</code> to <code>nautobot.core</code>.</p>"},{"location":"development/apps/porting-from-netbox.html#regenerating-database-migrations","title":"Regenerating database migrations","text":"<p>In general, your migrations files will not port over easily; you will probably want to delete and re-generate them (<code>nautobot-server makemigrations &lt;plugin-name&gt;</code>) instead.</p>"},{"location":"development/apps/api/configuration-view.html","title":"Adding Links to the Installed Apps View","text":"<p>Added in version 1.2.0</p> <p>It's common for many apps to provide an \"app configuration\" view used for interactive configuration of aspects of the app that don't necessarily need to be managed by a system administrator via <code>PLUGINS_CONFIG</code>. The <code>NautobotAppConfig</code> setting of <code>config_view_name</code> lets you provide the URL pattern name defined for this view, which will then be accessible via a button on the Plugins -&gt; Installed Plugins UI view.</p> <p>For example, if the <code>animal_sounds</code> app provides a configuration view, which is set up in <code>urls.py</code> as follows:</p> <pre><code># urls.py\nfrom django.urls import path\nfrom . import views\nurlpatterns = [\npath(\"/configuration/\", views.AnimalSoundsConfigView.as_view(), name=\"config\"),\n]\n</code></pre> <p>then in your <code>AnimalSoundsConfig</code> you could refer to the view by name:</p> <pre><code># __init__.py\nfrom nautobot.apps import NautobotAppConfig\nclass AnimalSoundsConfig(NautobotAppConfig):\n# ...\nconfig_view_name = \"plugins:animal_sounds:config\"\nconfig = AnimalSoundsConfig\n</code></pre> <p>and now the \"Configuration\" button that appears in the Installed Plugins table next to \"Animal Sounds\" will be a link to your configuration view.</p> <p>Similarly, if your app provides an \"app home\" or \"dashboard\" view, you can provide a link for the \"Home\" button in the Installed Plugins table by defining <code>home_view_name</code> on your <code>NautobotAppConfig</code> class. This can also be done for documentation by defining <code>docs_view_name</code> on your <code>NautobotAppConfig</code> class.</p>"},{"location":"development/apps/api/database-backend-config.html","title":"Adding Database Backed Config","text":"<p>Added in version 2.0.0</p> <p>Apps can define settings that will be stored in the Database Backend through Django Constance. All of the standard Django Constance types are supported. A Constance Fieldset will automatically be created for your plugin. We have added the <code>ConstanceConfigItem</code> <code>namedtuple</code> to assist in the configurations.</p> <pre><code># __init__.py\nfrom nautobot.apps import ConstanceConfigItem, NautobotAppConfig\nclass AnimalSoundsConfig(NautobotAppConfig):\n# ...\nconstance_config = {\n'DOG_SOUND': ConstanceConfigItem(default='woof', help_text='Dog sound'),\n'CAT_SOUND': ConstanceConfigItem(default='meow', help_text='Cat sound'),\n'fox_sound': ConstanceConfigItem(default=123, help_text='Fox sound', field_type=int),\n}\n</code></pre> <p>Note</p> <p>If moving an existing variable to a Database Backed variable, you should keep the variable name as previously defined.</p> <p></p> <p>Warning</p> <p>Do not store secrets in the constance_config, instead use Nautobot Secrets.</p>"},{"location":"development/apps/api/nautobot-app-config.html","title":"NautobotAppConfig","text":"<p>The <code>NautobotAppConfig</code> class is a Nautobot-specific wrapper around Django's built-in <code>AppConfig</code> class. It is used to declare Nautobot app functionality within a Python package. Each app should provide its own subclass, defining its name, metadata, and default and required configuration parameters. An example is below:</p> <pre><code>from nautobot.apps import NautobotAppConfig\nclass AnimalSoundsConfig(NautobotAppConfig):\nname = 'nautobot_animal_sounds'\nverbose_name = 'Animal Sounds'\ndescription = 'An example app for development purposes'\nversion = '0.1'\nauthor = 'Bob Jones'\nauthor_email = 'bob@example.com'\nbase_url = 'animal-sounds'\nrequired_settings = []\ndefault_settings = {\n'loud': False\n}\nconfig = AnimalSoundsConfig\n</code></pre> <p>Nautobot looks for the <code>config</code> variable within an app's <code>__init__.py</code> to load its configuration. Typically, this will be set to the <code>NautobotAppConfig</code> subclass, but you may wish to dynamically generate a <code>NautobotAppConfig</code> class based on environment variables or other factors.</p>"},{"location":"development/apps/api/nautobot-app-config.html#required-nautobotappconfig-attributes","title":"Required NautobotAppConfig Attributes","text":"Name Description <code>author</code> Name of app's author <code>author_email</code> Author's public email address <code>description</code> Brief description of the app's purpose <code>name</code> Raw app name; same as the app's source directory <code>verbose_name</code> Human-friendly name for the app <code>version</code> Current release (semantic versioning is encouraged)"},{"location":"development/apps/api/nautobot-app-config.html#optional-nautobotappconfig-attributes","title":"Optional NautobotAppConfig Attributes","text":"Name Default Description <code>base_url</code> Same as specified <code>name</code> Base path to use for app URLs <code>config_view_name</code> <code>None</code> URL name for a \"configuration\" view defined by this app <code>default_settings</code> <code>{}</code> A dictionary of configuration parameters and their default values <code>home_view_name</code> <code>None</code> URL name for a \"home\" or \"dashboard\" view defined by this app <code>docs_view_name</code> <code>None</code> URL name for a \"documentation\" view defined by this app <code>installed_apps</code> <code>[]</code> A list of additional Django application dependencies to automatically enable when the app is activated (you must still make sure these underlying dependent libraries are installed) <code>max_version</code> <code>None</code> Maximum version of Nautobot with which the app is compatible <code>middleware</code> <code>[]</code> A list of middleware classes to append after Nautobot's built-in middleware <code>min_version</code> <code>None</code> Minimum version of Nautobot with which the app is compatible <code>required_settings</code> <code>[]</code> A list of any configuration parameters that must be defined by the user <code>searchable_models</code> <code>[]</code> A list of model names to include in the global Nautobot search <code>constance_config</code> <code>{}</code> Django Constance configuration parameters for settings. <p>Added in version 2.0.0</p> <p>Support for the <code>searchable_models</code> and <code>constance_config</code> attributes were added.</p> <p>Removed in version 2.0.0</p> <p>Support for <code>caching_config</code> was removed with the removal of <code>django-cacheops</code>.</p> <p>Note</p> <p>All <code>required_settings</code> must be configured in <code>PLUGINS_CONFIG</code> in <code>nautobot_config.py</code> before the app can be used.</p> <p>Warning</p> <p>If a configuration parameter is listed in either of <code>required_settings</code> or <code>constance_config</code>, and also in <code>default_settings</code>, the default setting will be ignored.</p>"},{"location":"development/apps/api/nautobot-app-config.html#nautobotappconfig-code-location-attributes","title":"NautobotAppConfig Code Location Attributes","text":"<p>The following <code>NautobotAppConfig</code> attributes can be configured to customize where Nautobot will look to locate various pieces of app code. In most cases you will not need to change these, but they are provided as options in case your app has a non-standard organizational structure.</p> <p>Info</p> <p>As used below, a \"dotted path\" is the combination of a Python module path within the app and the name of a variable within that module. For example, <code>\"template_content.template_extensions\"</code> refers to a variable named <code>template_extensions</code> inside a <code>template_content</code> module located at the root of the app.</p> Name Default Description <code>banner_function</code> <code>\"banner.banner\"</code> Dotted path to a function that can render a custom banner <code>custom_validators</code> <code>\"custom_validators.custom_validators\"</code> Dotted path to a list of custom validator classes <code>datasource_contents</code> <code>\"datasources.datasource_contents\"</code> Dotted path to a list of datasource (Git, etc.) content types to register <code>graphql_types</code> <code>graphql.types.graphql_types</code> Dotted path to a list of GraphQL type classes <code>homepage_layout</code> <code>\"homepage.layout\"</code> Dotted path to a list of home page items provided by the app <code>jinja_filters</code> <code>\"jinja_filters\"</code> Path to a module that contains Jinja2 filters to be registered <code>jobs</code> <code>\"jobs.jobs\"</code> Dotted path to a list of Job classes <code>menu_items</code> <code>\"navigation.menu_items\"</code> Dotted path to a list of navigation menu items provided by the app <code>secrets_providers</code> <code>\"secrets.secrets_providers\"</code> Dotted path to a list of secrets providers in the app <code>template_extensions</code> <code>\"template_content.template_extensions\"</code> Dotted path to a list of template extension classes"},{"location":"development/apps/api/prometheus.html","title":"Prometheus Metrics","text":"<p>Added in version 1.5.13</p> <p>It is possible for Nautobot apps to provide their own Prometheus metrics. There are two general ways to achieve this:</p> <ol> <li>Use the <code>prometheus_client</code> library directly in your app code. Depending on whether that code runs in the web server or the worker context, the metric will show up in the respective <code>/metrics</code> endpoint(s) (i.e. metrics generated in the worker context show up in the worker's endpoint and those generated in the web application's context show up in the web application's endpoint).</li> <li>If the metric cannot be generated alongside existing code, apps can implement individual metric generator functions and register them into a list called <code>metrics</code> in a file named <code>metrics.py</code> at the root of the app. Nautobot will automatically read these and expose them via its <code>/metrics</code> endpoint. The following code snippet shows an example metric defined this way:</li> </ol> <pre><code># metrics.py\nfrom prometheus_client.metrics_core import GaugeMetricFamily\nfrom nautobot_animal_sounds.models import Animal\ndef metric_animals():\ngauges = GaugeMetricFamily(\"nautobot_noisy_animals_count\", \"Nautobot Noisy Animals Count\", labels=[])\nscreaming_animal_count = Animal.objects.filter(loudness=\"noisy\").count()\ngauges.add_metric(labels=[], value=screaming_animal_count)\nyield gauges\nmetrics = [metric_example]\n</code></pre>"},{"location":"development/apps/api/setup.html","title":"Initial Setup","text":"<p>Use a Development Environment, Not Production For App Development</p> <p>You should not use your production environment for app development. For information on getting started with a development environment, check out Nautobot development guide.</p>"},{"location":"development/apps/api/setup.html#app-structure","title":"App Structure","text":"<p>Although the specific structure of an app is largely left to the discretion of its authors, a Nautobot app that makes use of all available app features described in this document could potentially look something like this:</p> <pre><code>app_name/\n  - app_name/\n    - __init__.py           # required\n    - admin.py              # Django Admin Interface\n    - api/\n      - serializers.py      # REST API Model serializers\n      - urls.py             # REST API URL patterns\n      - views.py            # REST API view sets\n    - banner.py             # Banners\n    - custom_validators.py  # Custom Validators\n    - datasources.py        # Loading Data from a Git Repository\n    - filter_extensions.py  # Extending Filters\n    - filters.py            # Filtersets for UI, REST API, and GraphQL Model Filtering\n    - forms.py              # UI Forms and Filter Forms\n    - graphql/\n      - types.py            # GraphQL Type Objects\n    - homepage.py           # Home Page Content\n    - jinja_filters.py      # Jinja Filters\n    - jobs.py               # Job classes\n    - middleware.py         # Request/response middleware\n    - migrations/\n      - 0001_initial.py     # Database Models\n    - models.py             # Database Models\n    - navigation.py         # Navigation Menu Items\n    - secrets.py            # Secret Providers\n    - signals.py            # Signal Handler Functions\n    - template_content.py   # Extending Core Templates\n    - templates/\n      - app_name/\n        - *.html            # UI content templates\n    - urls.py               # UI URL Patterns\n    - views.py              # UI Views and any view override definitions\n  - pyproject.toml          # *** REQUIRED *** - Project package definition\n  - README.md\n</code></pre> <p>The top level is the project root. Immediately within the root should exist several items:</p> <ul> <li><code>pyproject.toml</code> - This is the new unified Python project settings file that replaces <code>setup.py</code>, <code>requirements.txt</code>, and various other setup files (like <code>setup.cfg</code>, <code>MANIFEST.in</code>, among others).</li> <li><code>README.md</code> - A brief introduction to your app, how to install and configure it, where to find help, and any other pertinent information. It is recommended to write README files using a markup language such as Markdown.</li> <li>The app source directory, with the same name as your app.</li> </ul> <p>The app source directory contains all of the actual Python code and other resources used by your app. Its structure is left to the author's discretion, however it is recommended to follow best practices as outlined in the Django documentation. At a minimum, this directory must contain an <code>__init__.py</code> file containing an instance of Nautobot's <code>NautobotAppConfig</code> class.</p> <p>Note</p> <p>Nautobot includes a command to help create the app directory: <code>nautobot-server startplugin [app_name]</code> Please see the Nautobot Server Guide for more information.</p>"},{"location":"development/apps/api/setup.html#create-pyprojecttoml","title":"Create pyproject.toml","text":""},{"location":"development/apps/api/setup.html#poetry-init-recommended","title":"Poetry Init (Recommended)","text":"<p>To get started with a project using Python Poetry you use the <code>poetry init</code> command. This will guide you through the prompts necessary to generate a pyproject.toml with details required for packaging.</p> <pre><code>This command will guide you through creating your pyproject.toml config.\n\nPackage name [tmp]:  nautobot-animal-sounds\nVersion [0.1.0]:\nDescription []:  An example Nautobot app\nAuthor [, n to skip]:  Bob Jones\nLicense []:  Apache 2.0\nCompatible Python versions [^3.8]:  ^3.8\n\nWould you like to define your main dependencies interactively? (yes/no) [yes] no\nWould you like to define your development dependencies interactively? (yes/no) [yes] no\nGenerated file\n\n[tool.poetry]\nname = \"nautobot-animal-sounds\"\nversion = \"0.1.0\"\ndescription = \"An example Nautobot app\"\nauthors = [\"Bob Jones\"]\nlicense = \"Apache 2.0\"\n\n[tool.poetry.dependencies]\npython = \"^3.8\"\n\n[tool.poetry.dev-dependencies]\n\n[build-system]\nrequires = [\"poetry-core&gt;=1.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\"\n\nDo you confirm generation? (yes/no) [yes]\n</code></pre>"},{"location":"development/apps/api/setup.html#install-the-app-for-development","title":"Install the App for Development","text":"<p>The app needs to be installed into the same python environment where Nautobot is, so that we can get access to <code>nautobot-server</code> command, and also so that the nautobot-server is aware of the new app.</p> <p>If you installed Nautobot using Poetry, then go to the root directory of your clone of the Nautobot repository and run <code>poetry shell</code> there.  Afterward, return to the root directory of your app to continue development.</p> <p>Otherwise if using the pip install or Docker workflows, manually activate nautobot using <code>source /opt/nautobot/bin/activate</code>.</p> <p>To install the app for development the following steps should be taken:</p> <ul> <li>Activate the Nautobot virtual environment (as detailed above)</li> <li>Navigate to the project root, where the <code>pyproject.toml</code> file exists for the app</li> <li>Execute the command <code>poetry install</code> to install the local package into the Nautobot virtual environment</li> </ul> <p>Note</p> <p>Poetry installs the current project and its dependencies in editable mode (aka \"development mode\").</p> <p>This should be done in development environment</p> <p>You should not use your production environment for app development. For information on getting started with a development environment, check out Nautobot development guide.</p> <pre><code>poetry install\n</code></pre> <p>Once the app has been installed, add it to the configuration for Nautobot:</p> <pre><code>PLUGINS = [\"animal_sounds\"]\n</code></pre>"},{"location":"development/apps/api/setup.html#verify-that-the-app-is-installed","title":"Verify that the App is Installed","text":"<p>After restarting the Nautobot server, the newly installed app should appear in Plugins -&gt; Installed Plugins if everything is configured correctly. You can also click on the app's name in this table to view more detailed information about this app based on its NautobotAppConfig and other contents.</p>"},{"location":"development/apps/api/testing.html","title":"Testing Apps","text":"<p>In general apps can be tested like other Django apps. In most cases you'll want to run your automated tests via the <code>nautobot-server test &lt;app_module&gt;</code> command or, if using the <code>coverage</code> Python library, <code>coverage run --module nautobot.core.cli test &lt;app_module&gt;</code>.</p>"},{"location":"development/apps/api/testing.html#factories","title":"Factories","text":"<p>Added in version 1.5.0</p> <p>The <code>TEST_USE_FACTORIES</code> setting defaults to <code>False</code> when testing apps, primarily for backwards-compatibility reasons. It can prove a useful way of populating a baseline of Nautobot database data for your tests and save you the trouble of creating a large amount of baseline data yourself. We recommend adding <code>factory-boy</code> to your app's development dependencies and settings <code>TEST_USE_FACTORIES = True</code> in your app's development/test <code>nautobot_config.py</code> to take advantage of this.</p>"},{"location":"development/apps/api/testing.html#performance-tests","title":"Performance Tests","text":"<p>Added in version 1.5.0</p>"},{"location":"development/apps/api/testing.html#running-performance-tests","title":"Running Performance Tests","text":"<p>You need to install <code>django-slowtests</code> as a part of your app dev dependency to run performance tests. It has a very intuitive way to measure the performance of your own tests for your app  (all you have to do is tag your tests with <code>performance</code>) and do <code>invoke performance-test</code> to get the time to run your tests with <code>NautobotPerformanceTestRunner</code>.</p> <p><code>NautobotPerformanceTestRunner</code> is used by adding the flag <code>--testrunner nautobot.core.tests.runner.NautobotPerformanceTestRunner</code> to the <code>coverage run</code> command used for unit tests. This flag will replace the default <code>NautobotTestRunner</code> while retaining all its functionalities with the addition of performance evaluation after test runs. Checkout Performance Tests for more detail.</p> <pre><code>@tag(\"performance\")\ndef test_your_app(self)\npass\n...\n</code></pre>"},{"location":"development/apps/api/testing.html#gathering-performance-test-baseline-data","title":"Gathering Performance Test Baseline Data","text":"<p>If you want to add baselines for your own test to <code>nautobot/core/tests/performance_baselines.yml</code> or have your own baseline yaml file for performance testing, specify a different file path for  <code>TEST_PERFORMANCE_BASELINE_FILE</code> in app's development/test <code>nautobot_config.py</code>, and store the output of <code>invoke performance-test --performance-snapshot</code> command in that file. <code>--performance-snapshot</code> flag will store the results of your performance test to <code>report.yml</code> and all you need to do is copy/paste the result to the file set by <code>TEST_PERFORMANCE_BASELINE_FILE</code>. Now you have baselines for your own tests! Example output of <code>invoke performance-test --performance-snapshot</code>:</p> <pre><code>tests:\n- name: &gt;-\ntest_run_job_with_sensitive_variables_and_requires_approval\n(nautobot.extras.tests.test_views.JobTestCase)\nexecution_time: 4.799533\n- name: test_run_missing_schedule (nautobot.extras.tests.test_views.JobTestCase)\nexecution_time: 4.367563\n- name: test_run_now_missing_args (nautobot.extras.tests.test_views.JobTestCase)\nexecution_time: 4.363194\n- name: &gt;-\ntest_create_object_with_constrained_permission\n(nautobot.extras.tests.test_views.GraphQLQueriesTestCase)\nexecution_time: 3.474244\n- name: &gt;-\ntest_run_now_constrained_permissions\n(nautobot.extras.tests.test_views.JobTestCase)\nexecution_time: 2.727531\n</code></pre> <p>We recommend adding <code>django-slowtests</code> to your app's development dependencies to leverage this functionality to build better performing apps.</p>"},{"location":"development/apps/api/models/index.html","title":"Adding Database Models","text":"<p>If your app introduces a new type of object in Nautobot, you'll probably want to create a Django model for it. A model is essentially a Python representation of a database table, with attributes that represent individual columns. Model instances can be created, manipulated, and deleted using queries. Models must be defined within a file named <code>models.py</code>.</p> <p>It is highly recommended to have app models inherit from at least <code>nautobot.apps.models.BaseModel</code> which provides base functionality and convenience methods common to all models.</p> <p>For more advanced usage, you may want to instead inherit from one of Nautobot's \"generic\" models derived from <code>BaseModel</code> -- <code>nautobot.apps.models.OrganizationalModel</code> or <code>nautobot.apps.models.PrimaryModel</code>. The inherent capabilities provided by inheriting from these various parent models differ as follows:</p> Feature <code>django.db.models.Model</code> <code>BaseModel</code> <code>OrganizationalModel</code> <code>PrimaryModel</code> UUID primary key \u274c \u2705 \u2705 \u2705 Natural keys \u274c \u2705 \u2705 \u2705 Object permissions \u274c \u2705 \u2705 \u2705 <code>validated_save()</code> \u274c \u2705 \u2705 \u2705 Change logging \u274c \u274c \u2705 \u2705 Custom fields \u274c \u274c \u2705 \u2705 Relationships \u274c \u274c \u2705 \u2705 Note \u274c \u274c \u2705 \u2705 Tags \u274c \u274c \u274c \u2705 <p>Below is an example <code>models.py</code> file containing a basic model with two character fields:</p> <pre><code># models.py\nfrom django.db import models\nfrom nautobot.apps.models import BaseModel\nclass Animal(BaseModel):\n\"\"\"Base model for animals.\"\"\"\nname = models.CharField(max_length=50)\nsound = models.CharField(max_length=50)\ndef __str__(self):\nreturn self.name\nclass Meta:\nunique_together = [[\"name\", \"sound\"]]\n</code></pre> <p>Once you have defined the model(s) for your app, you'll need to create the database schema migrations. A migration file is essentially a set of instructions for manipulating the database to support your new model, or to alter existing models.</p> <p>Creating migrations can be done automatically using the <code>nautobot-server makemigrations &lt;app_name&gt;</code> management command, where <code>&lt;app_name&gt;</code> is the name of the Python package for your app (e.g. <code>nautobot_animal_sounds</code>):</p> <pre><code>nautobot-server makemigrations nautobot_animal_sounds\n</code></pre> <p>Note</p> <p>An app must be installed before it can be used with Django management commands. If you skipped this step above, run <code>poetry install</code> from the app's root directory.</p> <pre><code>nautobot-server makemigrations nautobot_animal_sounds\n</code></pre> <p>Example output:</p> <pre><code>Migrations for 'nautobot_animal_sounds':\n  /home/bjones/animal_sounds/nautobot_animal_sounds/migrations/0001_initial.py\n    - Create model Animal\n</code></pre> <p>Next, apply the migration to the database with the <code>nautobot-server migrate &lt;app_name&gt;</code> command:</p> <pre><code>nautobot-server migrate nautobot_animal_sounds\n</code></pre> <p>Example output:</p> <pre><code>Operations to perform:\n  Apply all migrations: nautobot_animal_sounds\nRunning migrations:\n  Applying nautobot_animal_sounds.0001_initial... OK\n</code></pre> <p>For more background on schema migrations, see the Django documentation.</p>"},{"location":"development/apps/api/models/django-admin.html","title":"Using the Django Admin Interface","text":"<p>Apps can optionally expose their models via Django's built-in administrative interface. This can greatly improve troubleshooting ability, particularly during development. To expose a model, simply register it using Django's <code>admin.register()</code> function. An example <code>admin.py</code> file for the above model is shown below:</p> <pre><code># admin.py\nfrom django.contrib import admin\nfrom nautobot.apps.admin import NautobotModelAdmin\nfrom .models import Animal\n@admin.register(Animal)\nclass AnimalAdmin(NautobotModelAdmin):\nlist_display = ('name', 'sound')\n</code></pre> <p>This will display the app and its model in the admin UI. Staff users can create, change, and delete model instances via the admin UI without needing to create a custom view.</p> <p></p>"},{"location":"development/apps/api/models/global-search.html","title":"Including Models in the Global Search","text":"<p>Added in version 2.0.0</p> <p>Simply define a <code>searchable_models</code> array on the NautobotAppConfig for your app, listing the lowercase names of the model(s) from your app that you wish to include in the Nautobot global search.</p> <pre><code>class AnimalSoundsConfig(NautobotAppConfig):\n...\nsearchable_models = [\"animal\"]\n</code></pre>"},{"location":"development/apps/api/models/graphql.html","title":"Integrating with GraphQL","text":"<p>Apps can optionally expose their models via the GraphQL interface to allow the models to be part of the Graph and to be queried easily. There are two mutually exclusive ways to expose a model to the GraphQL interface.</p> <ul> <li>By using the <code>@extras_features</code> decorator</li> <li>By creating your own GraphQL type definition and registering it within <code>graphql/types.py</code> of your app (the decorator should not be used in this case)</li> </ul> <p>All GraphQL model types defined by your app, regardless of which method is chosen, will automatically support some built-in Nautobot features:</p> <ul> <li>Support for object permissions based on their associated <code>Model</code> class</li> <li>Include any custom fields defined for their <code>Model</code></li> <li>Include any relationships defined for their <code>Model</code></li> <li>Include tags, if the <code>Model</code> supports them</li> </ul>"},{"location":"development/apps/api/models/graphql.html#using-the-extras_features-decorator-for-graphql","title":"Using the <code>@extras_features</code> Decorator for GraphQL","text":"<p>To expose a model via GraphQL, simply register it using the <code>@extras_features(\"graphql\")</code> decorator. Nautobot will detect this and will automatically create a GraphQL type definition based on the model. Additionally, if a <code>FilterSet</code> is available at <code>&lt;app_name&gt;.filters.&lt;ModelName&gt;FilterSet</code>, Nautobot will automatically use the filterset to generate GraphQL filtering options for this type as well.</p> <pre><code># models.py\nfrom django.db import models\nfrom nautobot.apps.models import BaseModel, extras_features\n@extras_features(\"graphql\")\nclass Animal(BaseModel):\n\"\"\"Base model for animals.\"\"\"\nname = models.CharField(max_length=50)\nsound = models.CharField(max_length=50)\ndef __str__(self):\nreturn self.name\n</code></pre>"},{"location":"development/apps/api/models/graphql.html#creating-your-own-graphql-type-object","title":"Creating Your Own GraphQL Type Object","text":"<p>Changed in version 1.6.2</p> <p>A new base class was introduced for Nautobot GraphQL object types: <code>nautobot.core.graphql.types.OptimizedNautobotObjectType</code>. This class inherits from <code>graphene_django_optimizer.OptimizedDjangoObjectType</code> and adds generic Nautobot specific functionality.</p> <p>In some cases, such as when a model is using Generic Foreign Keys, or when a model has constructed fields that should also be reflected in GraphQL, the default GraphQL type definition generated by the <code>@extras_features</code> decorator may not work as the developer intends, and it will be preferable to provide custom GraphQL types.</p> <p>By default, Nautobot looks for custom GraphQL types in an iterable named <code>graphql_types</code> within a <code>graphql/types.py</code> file. (This can be overridden by setting <code>graphql_types</code> to a custom value on the app's <code>NautobotAppConfig</code>.) Each type defined in this way must be a class inheriting from <code>graphene_django.DjangoObjectType</code>, <code>graphene_django_optimizer.OptimizedDjangoObjectType</code>, or <code>nautobot.core.graphql.types.OptimizedNautobotObjectType</code> and must follow the standards defined by graphene-django.</p> <p>Nautobot uses a library called <code>graphene-django-optimizer</code> to decrease the time queries take to process. By inheriting from <code>graphene_django_optimizer</code> type classes are automatically optimized.</p> <p>Warning</p> <p>When defining types this way, do not use the <code>@extras_features(\"graphql\")</code> decorator on the corresponding Model class, as no auto-generated GraphQL type is desired for this model.</p> <pre><code># graphql/types.py\nimport graphene_django_optimizer as gql_optimizer\nfrom nautobot_animal_sounds.models import Animal\nfrom nautobot.core.graphql.types import OptimizedNautobotObjectType\nclass AnimalType(OptimizedNautobotObjectType):\n\"\"\"GraphQL Type for Animal\"\"\"\nclass Meta:\nmodel = Animal\nexclude = [\"sound\"]\ngraphql_types = [AnimalType]\n</code></pre>"},{"location":"development/apps/api/models/graphql.html#using-graphql-orm-utilities","title":"Using GraphQL ORM Utilities","text":"<p>GraphQL utility functions:</p> <ol> <li><code>execute_query()</code>: Runs string as a query against GraphQL.</li> <li><code>execute_saved_query()</code>: Execute a saved query from Nautobot database.</li> </ol> <p>Both functions have the same arguments other than <code>execute_saved_query()</code> which requires a name to identify the saved query rather than a string holding a query.</p> <p>Changed in version 2.0.0</p> <p><code>execute_saved_query()</code> now expects a <code>saved_query_name</code> rather than a <code>saved_query_slug</code>.</p> <p>For authentication either a request object or user object needs to be passed in. If there is none, the function will error out.</p> <p>Arguments:</p> <ul> <li><code>execute_query()</code>:<ul> <li><code>query</code> (str): String with GraphQL query.</li> <li><code>variables</code> (dict, optional): If the query has variables they need to be passed in as a dictionary.</li> <li><code>request</code> (django.test.client.RequestFactory, optional): Used to authenticate.</li> <li><code>user</code> (django.contrib.auth.models.User, optional): Used to authenticate.</li> </ul> </li> <li><code>execute_saved_query()</code>:<ul> <li><code>saved_query_name</code> (str): Name of a saved GraphQL query.</li> <li><code>variables</code> (dict, optional): If the query has variables they need to be passed in as a dictionary.</li> <li><code>request</code> (django.test.client.RequestFactory, optional): Used to authenticate.</li> <li><code>user</code> (django.contrib.auth.models.User, optional): Used to authenticate.</li> </ul> </li> </ul> <p>Returned is a GraphQL object which holds the same data as returned from GraphiQL. Use <code>execute_query().to_dict()</code> to get the data back inside of a dictionary.</p>"},{"location":"development/apps/api/platform-features/index.html","title":"Extending Existing Functionality","text":""},{"location":"development/apps/api/platform-features/custom-validators.html","title":"Implementing Custom Validators","text":"<p>Apps can register custom validator classes which implement model validation logic to be executed during a model's <code>clean()</code> method. Like template extensions, custom validators are registered to a single model and offer a method which app authors override to implement their validation logic. This is accomplished by subclassing <code>CustomValidator</code> and implementing the <code>clean()</code> method.</p> <p>App authors must raise <code>django.core.exceptions.ValidationError</code> within the <code>clean()</code> method to trigger validation error messages which are propagated to the user and prevent saving of the model instance. A convenience method <code>validation_error()</code> may be used to simplify this process. Raising a <code>ValidationError</code> is no different than vanilla Django, and the convenience method will simply pass the provided message through to the exception.</p> <p>When a CustomValidator is instantiated, the model instance is assigned to context dictionary using the <code>object</code> key, much like TemplateExtension. E.g. <code>self.context['object']</code>.</p> <p>Declared subclasses should be gathered into a list or tuple for integration with Nautobot. By default, Nautobot looks for an iterable named <code>custom_validators</code> within a <code>custom_validators.py</code> file. (This can be overridden by setting <code>custom_validators</code> to a custom value on the app's <code>NautobotAppConfig</code>.) An example is below.</p> <pre><code># custom_validators.py\nfrom nautobot.apps.models import CustomValidator\nclass LocationValidator(CustomValidator):\n\"\"\"Custom validator for Locations to enforce that they must have a Tenant.\"\"\"\nmodel = 'dcim.location'\ndef clean(self):\nif self.context['object'].tenant is None:\n# Enforce that all locations must have a tenant\nself.validation_error({\n\"tenant\": \"All locations must have a tenant\"\n})\ncustom_validators = [LocationValidator]\n</code></pre>"},{"location":"development/apps/api/platform-features/filter-extensions.html","title":"Extending Filters","text":"<p>Added in version 1.3.0</p> <p>Apps can extend any model-based <code>FilterSet</code> and <code>FilterForm</code> classes that are provided by the Nautobot core.</p> <p>The requirements to extend a filter set or a filter form (or both) are:</p> <ul> <li>The file must be named <code>filter_extensions.py</code></li> <li>The variable <code>filter_extensions</code> must be declared in that file, and contain a list of <code>FilterExtension</code> subclasses</li> <li>The <code>model</code> attribute of each <code>FilterExtension</code> subclass must be set to a valid model name in the dotted pair format (<code>{app_label}.{model}</code>, e.g. <code>tenant.tenant</code> or <code>dcim.device</code>)</li> </ul> <p>Nautobot dynamically creates many additional filters based upon the defined filter type. Specifically, there are additional lookup expressions (referred to in code as <code>lookup_expr</code>) that are created for each filter, when there is neither a <code>lookup_expr</code> nor <code>method</code> parameter already set. These dynamically-added lookup expressions are added using a shorthand notation (e.g. <code>icontains</code> is <code>ic</code>). Nautobot will also add the negation of each, for example, so <code>icontains</code> will be added along with not <code>icontains</code> using the <code>ic</code> and <code>nic</code> expressions respectively.</p> <p>The dynamically-added lookup expressions can be found in the source code at nautobot/core/constants.py and the mapping logic can be found in nautobot/core/filters.py. Please see the documentation on filtering for more information.</p> <p>Tip</p> <p>For developers of apps that define their own model filters, note that the above are added dynamically, as long as the class inherits from <code>nautobot.apps.filters.BaseFilterSet</code>.</p> <p>However, that does not cover every possible use case, to list a few examples:</p> <ul> <li>Usage of a custom <code>method</code> argument on a filter that points to a <code>FilterSet</code> method, which would allow arbitrary filtering using custom logic. This is how the <code>q</code> field search logic is currently performed.</li> <li>Creation of a filter on a field that does not currently have filtering support</li> <li>Convenience methods for highly nested fields</li> </ul> <p>There are several conditions that must be met in order to extend a filter:</p> <ul> <li>The original FilterSet must follow the pattern: <code>f\"{model.__name__}FilterSet\"</code> e.g. <code>TenantFilterSet</code></li> <li>The <code>FilterExtension.filterset_fields</code> attribute must be a valid dict, with each key being the filter name (which must start with the plugin's <code>name</code> + <code>_</code>, e.g. <code>\"example_plugin_description\"</code>, not merely <code>\"description\"</code>) and each value being a valid django-filter filter</li> </ul> <p>Nautobot will dynamically generate the additional relevant lookup expressions of an app's defined custom FilterSet field, so no need to additionally register <code>example_plugin_description__ic</code>, etc.</p> <p>Similar to <code>FilterSet</code> fields, Nautobot provides a default filter form for each model, however that does not cover every possible use case. To list a few examples of why one may want to extend a filter form:</p> <ul> <li>The base filter form does not include a custom filter defined by the app as described above</li> <li>The base filter form does not provide a specific lookup expression to a filterable field, such as allowing regex on name</li> </ul> <p>There are several conditions that must be met in order to extend a filter:</p> <ul> <li>The original <code>FilterForm</code> must follow the pattern: <code>f\"{model.__name__}FilterForm\"</code>, e.g. <code>TenantFilterForm</code></li> <li>The <code>filterform_fields</code> attribute must be a valid dictionary of Django form fields</li> </ul> <p>Note</p> <p>An app is not required to define both <code>filterset_fields</code> and <code>filterform_fields</code>.</p> <p>You can view an example of <code>filter_extensions.py</code> by viewing the one provided with the Example Plugin.</p> <p>Tip</p> <p>The <code>method</code> parameter, if used, must be a callable (method/function). Note that because filters with a <code>method</code> do their filtering in Python code rather than at the database level, performance of <code>method</code> filters is generally much poorer than pure-database filters. The <code>method</code> parameter is not supported when using Dynamic Groups.</p>"},{"location":"development/apps/api/platform-features/git-repository-content.html","title":"Loading Data from a Git Repository","text":"<p>It's possible for an app to register additional types of data that can be provided by a Git repository and be automatically notified when such a repository is refreshed with new data. By default, Nautobot looks for an iterable named <code>datasource_contents</code> within a <code>datasources.py</code> file. (This can be overridden by setting <code>datasource_contents</code> to a custom value on the app's <code>NautobotAppConfig</code>.) An example is below.</p> <pre><code># datasources.py\nimport yaml\nimport os\nfrom nautobot.extras.choices import LogLevelChoices\nfrom nautobot.apps.datasources import DatasourceContent\nfrom .models import Animal\ndef refresh_git_animals(repository_record, job_result, delete=False):\n\"\"\"Callback for GitRepository updates - refresh Animals managed by it.\"\"\"\nif 'nautobot_animal_sounds.Animal' not in repository_record.provided_contents or delete:\n# This repository is defined not to provide Animal records.\n# In a more complete worked example, we might want to iterate over any\n# Animals that might have been previously created by this GitRepository\n# and ensure their deletion, but for now this is a no-op.\nreturn\n# We have decided that a Git repository can provide YAML files in a\n# /animals/ directory at the repository root.\nanimal_path = os.path.join(repository_record.filesystem_path, 'animals')\nfor filename in os.listdir(animal_path):\nwith open(os.path.join(animal_path, filename)) as fd:\nanimal_data = yaml.safe_load(fd)\n# Create or update an Animal record based on the provided data\nanimal_record, created = Animal.objects.update_or_create(\nname=animal_data['name'],\ndefaults={'sound': animal_data['sound']}\n)\n# Record the outcome in the JobResult record\njob_result.log(\n\"Successfully created/updated animal\",\nobj=animal_record,\nlevel_choice=LogLevelChoices.LOG_INFO,\ngrouping=\"animals\",\n)\n# Register that Animal records can be loaded from a Git repository,\n# and register the callback function used to do so\ndatasource_contents = [\n(\n'extras.gitrepository',                                  # datasource class we are registering for\nDatasourceContent(\nname='animals',                                      # human-readable name to display in the UI\ncontent_identifier='nautobot_animal_sounds.animal',  # internal slug to identify the data type\nicon='mdi-paw',                                      # Material Design Icons icon to use in UI\ncallback=refresh_git_animals,                        # callback function on GitRepository refresh\n)\n)\n]\n</code></pre> <p>With this code, once your app is installed, the Git repository creation/editing UI will now include \"Animals\" as an option for the type(s) of data that a given repository may provide. If this option is selected for a given Git repository, your <code>refresh_git_animals</code> function will be automatically called when the repository is synced.</p>"},{"location":"development/apps/api/platform-features/jinja2-filters.html","title":"Adding Jinja2 Filters","text":"<p>Added in version 1.1.0</p> <p>Apps can define custom Jinja2 filters to be used when rendering templates defined in computed fields. Check out the official Jinja2 documentation on how to create filter functions.</p> <p>In the file that defines your filters (by default <code>jinja_filters.py</code>, but configurable in the <code>NautobotAppConfig</code> if desired), you must import the <code>library</code> module from the <code>django_jinja</code> library. Filters must then be decorated with <code>@library.filter</code>. See an example below that defines a filter called <code>leet_speak</code>.</p> <pre><code>from django_jinja import library\n@library.filter\ndef leet_speak(input_str):\ncharset = {\"a\": \"4\", \"e\": \"3\", \"l\": \"1\", \"o\": \"0\", \"s\": \"5\", \"t\": \"7\"}\noutput_str = \"\"\nfor char in input_str:\noutput_str += charset.get(char.lower(), char)\nreturn output_str\n</code></pre> <p>This filter will then be available for use in computed field templates like so:</p> <pre><code>{{ \"HELLO WORLD\" | leet_speak }}\n</code></pre> <p>The output of this template results in the string <code>\"H3110 W0R1D\"</code>.</p>"},{"location":"development/apps/api/platform-features/jobs.html","title":"Including Jobs","text":"<p>Apps can provide Jobs to take advantage of all the built-in functionality provided by that feature (user input forms, background execution, results logging and reporting, etc.).</p> <p>By default, for each app, Nautobot looks for an iterable named <code>jobs</code> within a <code>jobs.py</code> file. (This can be overridden by setting <code>jobs</code> to a custom value on the app's <code>NautobotAppConfig</code>.) A brief example is below; for more details on Job design and implementation, refer to the Jobs feature documentation.</p> <pre><code># jobs.py\nfrom nautobot.apps.jobs import Job, register_jobs\nclass CreateDevices(Job):\n...\nclass DeviceConnectionsReport(Job):\n...\nclass DeviceIPsReport(Job):\n...\njobs = [CreateDevices, DeviceConnectionsReport, DeviceIPsReport]\nregister_jobs(*jobs)\n</code></pre> <p>Changed in version 2.0.0</p> <p>Because Jobs are now proper Celery tasks, you now must call <code>register_jobs()</code> from within your <code>jobs.py</code> file when it is imported; any jobs not included in this call will not be available for Celery to schedule and execute.</p>"},{"location":"development/apps/api/platform-features/populating-extensibility-features.html","title":"Populating Extensibility Features","text":"<p>Added in version 1.2.0</p> <p>In many cases, an app may wish to make use of Nautobot's various extensibility features, such as custom fields or relationships. It can be useful for an app to automatically create a custom field definition or relationship definition as a consequence of being installed and activated, so that everyday usage of the app can rely upon these definitions to be present.</p> <p>To make this possible, Nautobot provides a custom signal, <code>nautobot_database_ready</code>, that apps can register to listen for. This signal is triggered when <code>nautobot-server migrate</code> or <code>nautobot-server post_upgrade</code> is run after installing an app, and provides an opportunity for the app to make any desired additions to the database at this time.</p> <p>For example, maybe we want our app to make use of a Relationship allowing each Location to be linked to our Animal model. We would define our callback function that makes sure this Relationship exists, by convention in a <code>signals.py</code> file:</p> <pre><code># signals.py\nfrom nautobot.extras.choices import RelationshipTypeChoices\ndef create_location_to_animal_relationship(sender, apps, **kwargs):\n\"\"\"Create a Location-to-Animal Relationship if it doesn't already exist.\"\"\"\n# Use apps.get_model to look up Nautobot core models\nContentType = apps.get_model(\"contenttypes\", \"ContentType\")\nRelationship = apps.get_model(\"extras\", \"Relationship\")\nLocation = apps.get_model(\"dcim\", \"Location\")\n# Use sender.get_model to look up models from this app\nAnimal = sender.get_model(\"Animal\")\n# Ensure that the Relationship exists\nRelationship.objects.update_or_create(\nkey=\"location_favorite_animal\",\ndefaults={\n\"label\": \"Location's Favorite Animal\",\n\"type\": RelationshipTypeChoices.TYPE_ONE_TO_MANY,\n\"source_type\": ContentType.objects.get_for_model(Animal),\n\"source_label\": \"Locations that love this Animal\",\n\"destination_type\": ContentType.objects.get_for_model(Location),\n\"destination_label\": \"Favorite Animal\",\n},\n)\n</code></pre> <p>Then, in the <code>NautobotAppConfig</code> <code>ready()</code> function, we connect this callback function to the <code>nautobot_database_ready</code> signal:</p> <pre><code># __init__.py\nfrom nautobot.apps import nautobot_database_ready, NautobotAppConfig\nfrom .signals import create_location_to_animal_relationship\nclass AnimalSoundsConfig(NautobotAppConfig):\n# ...\ndef ready(self):\nsuper().ready()\nnautobot_database_ready.connect(create_location_to_animal_relationship, sender=self)\nconfig = AnimalSoundsConfig\n</code></pre> <p>After writing this code, run <code>nautobot-server migrate</code> or <code>nautobot-server post_upgrade</code>, then restart the Nautobot server, and you should see that this custom Relationship has now been automatically created.</p>"},{"location":"development/apps/api/platform-features/secrets-providers.html","title":"Implementing Secrets Providers","text":"<p>Added in version 1.2.0</p> <p>An app can define and register additional providers (sources) for Secrets, allowing Nautobot to retrieve secret values from additional systems or data sources. By default, Nautobot looks for an iterable named <code>secrets_providers</code> within a <code>secrets.py</code> file. (This can be overridden by setting <code>secrets_providers</code> to a custom value on the app's <code>NautobotAppConfig</code>.)</p> <p>To define a new <code>SecretsProvider</code> subclass, we must specify the following:</p> <ul> <li>A unique <code>slug</code> string identifying this provider</li> <li>A human-readable <code>name</code> string (optional; the <code>slug</code> will be used if this is not specified)</li> <li>A Django form for entering the parameters required by this provider, as an inner class named <code>ParametersForm</code></li> <li>An implementation of the <code>get_value_for_secret()</code> API to actually retrieve the value of a given secret</li> </ul> <p>For a simple (insecure!) example, we could define a \"constant-value\" provider that simply stores a constant value in Nautobot itself and returns this value on demand.</p> <p>Warning</p> <p>This is an intentionally simplistic example and should not be used in practice! Sensitive secret data should never be stored directly in Nautobot's database itself.</p> <pre><code># secrets.py\nfrom django import forms\nfrom nautobot.apps.secrets import SecretsProvider\nfrom nautobot.utilities.forms import BootstrapMixin\nclass ConstantValueSecretsProvider(SecretsProvider):\n\"\"\"\n    Example SecretsProvider - this one just returns a user-specified constant value.\n    Obviously this is insecure and not something you'd want to actually use!\n    \"\"\"\nslug = \"constant-value\"\nname = \"Constant Value\"\nclass ParametersForm(BootstrapMixin, forms.Form):\n\"\"\"\n        User-friendly form for specifying the required parameters of this provider.\n        \"\"\"\nconstant = forms.CharField(\nrequired=True,\nhelp_text=\"Constant secret value. &lt;strong&gt;DO NOT USE FOR REAL DATA&lt;/strong&gt;\"\n)\n@classmethod\ndef get_value_for_secret(cls, secret, obj=None, **kwargs):\n\"\"\"\n        Return the value defined in the Secret.parameters \"constant\" key.\n        A more realistic SecretsProvider would make calls to external APIs, etc.,\n        to retrieve a secret from another system as desired.\n        Args:\n            secret (nautobot.extras.models.Secret): The secret whose value should be retrieved.\n            obj (object): The object (Django model or similar) providing context for the secret's\n                parameters.\n        \"\"\"\nreturn secret.rendered_parameters(obj=obj).get(\"constant\")\nsecrets_providers = [ConstantValueSecretsProvider]\n</code></pre> <p>After installing and enabling your app, you should now be able to navigate to <code>Secrets &gt; Secrets</code> and create a new Secret, at which point <code>\"constant-value\"</code> should now be available as a new secrets provider to use.</p>"},{"location":"development/apps/api/platform-features/uniquely-identify-objects.html","title":"Uniquely Identifying a Nautobot Object","text":"<p>In Nautobot v1.X, the slug field of many models could be used to uniquely identify a specific instance in the database. This was a convenient way to reference an object, but the slug field had some drawbacks and slugs were ultimately removed in Nautobot v2.0. As a result, new patterns will have to be adopted when trying to retrieve specific objects from the database.</p>"},{"location":"development/apps/api/platform-features/uniquely-identify-objects.html#primary-keys-vs-natural-keys","title":"Primary Keys vs. Natural Keys","text":"<p>When designing an application for Nautobot, one of the key decisions is whether to use a primary key or a natural key to uniquely identify individual model instances. Here are some trade-offs to consider:</p>"},{"location":"development/apps/api/platform-features/uniquely-identify-objects.html#primary-keys","title":"Primary Keys","text":"<p>The primary key is a concrete database field and is the primary method for referencing an object or relating multiple objects in the Nautobot database. Here are some advantages of using primary keys:</p> <ul> <li>Uniqueness: Primary keys are guaranteed to be unique.</li> <li>Performance: Primary keys are always indexed in Nautobot, which makes lookups very fast.</li> </ul> <p>However, there are also some disadvantages to using primary keys:</p> <ul> <li>Usability: Primary keys in Nautobot use UUIDs and can be difficult to work with directly.</li> <li>Portability: Primary keys are specific to a single database and cannot be used to identify an object in multiple contexts, such as in external applications or in different databases.</li> </ul>"},{"location":"development/apps/api/platform-features/uniquely-identify-objects.html#natural-keys","title":"Natural Keys","text":"<p>A natural key is an identifier that is based on the natural attributes of a record, such as a platform's name or, in the case of some Nautobot models, a combination of fields. For example, the Prefix model's natural key is formed using a combination of the <code>prefix</code> field and the associated Namespace's <code>name</code>. Here are some advantages of using natural keys:</p> <ul> <li>Usability: Natural keys are more user-friendly and easier to remember.</li> <li>Portability: Natural keys can be used to identify an object in multiple contexts, such as in external applications or in different databases.</li> </ul> <p>However, there are also some disadvantages to using natural keys:</p> <ul> <li>Complexity: Using natural keys can make it more difficult to change the underlying data structure without breaking existing integrations.</li> <li>Performance: Natural keys are not guaranteed to be indexed which can make lookups slower. Also, natural keys that include fields from related objects will require database joins to retrieve the object from the database.</li> </ul> <p>In general, the decision of whether to use a primary key or a natural key depends on the specific requirements of the application. If uniqueness is critical, or if performance is a concern, a primary key may be the best choice. If human-readability is important, or if portability is a concern, a natural key may be the best choice.</p>"},{"location":"development/apps/api/platform-features/uniquely-identify-objects.html#using-primary-keys","title":"Using Primary Keys","text":"<p>In Nautobot v2.0, all object view URLs use the primary key of the object. In the web UI and REST API, the object can be accessed by building a URL using the primary key. For example, to retrieve the device with primary key <code>00000000-0000-0000-0000-000000000000</code>, the REST API URL would be <code>/api/dcim/devices/00000000-0000-0000-0000-000000000000/</code>.</p> <p>In the Python ORM, the object can be retrieved using the <code>get()</code> method of the model manager. For example, to retrieve the device with primary key <code>00000000-0000-0000-0000-000000000000</code>, the Python ORM call would be <code>Device.objects.get(pk='00000000-0000-0000-0000-000000000000')</code>. Once an instance of the object is retrieved, the primary key can be accessed using the <code>pk</code> attribute.</p>"},{"location":"development/apps/api/platform-features/uniquely-identify-objects.html#using-natural-keys","title":"Using Natural Keys","text":"<p>Natural keys in Nautobot v2.0 are determined by the combination of database fields that uniquely identify an object. In some cases, such as the Platform model, this is a single field (<code>name</code>). In other cases, such as the Prefix model, this is a combination of fields (<code>namespace__name</code>, <code>prefix</code>). To retrieve the list of lookups that are used to form the natural key for a model, use the <code>natural_key_field_lookups</code> property of the model. For example, to retrieve the list of fields that are used to form the natural key for the Prefix model, the Python ORM call would be <code>Prefix.natural_key_field_lookups</code>.</p> <p>In Nautobot v2.0, the REST API and web UI list views can be filtered to find objects based on their attributes. In some cases, these filters will be sufficient for filtering a list down to an individual object. For example, to retrieve the device with name \"router1\" in tenant \"xyz\", the REST API URL would be <code>/api/dcim/devices/?name=router1&amp;tenant=xyz</code>. However, the filters in Nautobot do not currently cover all combinations of natural key field lookups for all models and the previous example could return multiple objects because it does not filter on the location field which is also required to uniquely define a device.</p> <p>In the Python ORM, objects can be retrieved using the <code>get_by_natural_key()</code> method of the model manager. For example, to retrieve the prefix for \"10.0.0.0/8\" in namespace \"Global\", the Python ORM call would be <code>Prefix.objects.get_by_natural_key(\"Global\", \"10.0.0.0/8\")</code>. Once an instance of a model is retrieved, the natural key can be accessed using the <code>natural_key</code> method:</p> <pre><code>&gt;&gt;&gt; prefix = Prefix.objects.get_by_natural_key(\"Global\", \"10.0.0.0/8\")\n&gt;&gt;&gt; prefix.natural_key()\n['Global', '10.0.0.0/8']\n</code></pre> <p>Info</p> <p>See the documentation on natural keys for more information on Nautobot's natural key implementation.</p>"},{"location":"development/apps/api/platform-features/uniquely-identify-objects.html#customizing-natural-keys","title":"Customizing Natural Keys","text":"<p>Nautobot provides settings for overriding the default behavior of the natural key for some models. These allow the natural key to be formed by a single field instead of a combination of fields. For more information, see the documentation for the settings listed below.</p> <ul> <li>DEVICE_NAME_AS_NATURAL_KEY</li> <li>LOCATION_NAME_AS_NATURAL_KEY</li> </ul>"},{"location":"development/apps/api/ui-extensions/index.html","title":"Extending the Existing Nautobot UI","text":""},{"location":"development/apps/api/ui-extensions/banners.html","title":"Adding a Banner","text":"<p>Added in version 1.2.0</p> <p>An app can provide a function that renders a custom banner on any number of Nautobot views. By default Nautobot looks for a function <code>banner()</code> inside of <code>banner.py</code>. (This can be overridden by setting <code>banner_function</code> to a custom value on the app's <code>NautobotAppConfig</code>.)</p> <p>This function currently receives a single argument, <code>context</code>, which is the Django request context in which the current page is being rendered. The function can return <code>None</code> if no banner is needed for a given page view, or can return a <code>Banner</code> object describing the banner contents. Here's a simple example <code>banner.py</code>:</p> <pre><code># banner.py\nfrom django.utils.html import format_html\nfrom nautobot.apps.ui import Banner, BannerClassChoices\ndef banner(context, *args, **kwargs):\n\"\"\"Greet the user, if logged in.\"\"\"\n# Request parameters can be accessed via context.request\nif not context.request.user.is_authenticated:\n# No banner if the user isn't logged in\nreturn None\nelse:\nreturn Banner(\ncontent=format_html(\"Hello, &lt;strong&gt;{}&lt;/strong&gt;! \ud83d\udc4b\", context.request.user),\nbanner_class=BannerClassChoices.CLASS_SUCCESS,\n)\n</code></pre>"},{"location":"development/apps/api/ui-extensions/home-page.html","title":"Adding Home Page Content","text":"<p>Added in version 1.2.0</p> <p>Apps can add content to the Nautobot home page. By default, Nautobot looks for a <code>layout</code> list inside of <code>homepage.py</code>. (This can be overridden by setting <code>homepage_layout</code> to a custom value on the app's <code>NautobotAppConfig</code>.)</p> <p>Using a key and weight system, a developer can integrate the app content amongst existing panels, groups, and items and/or create entirely new panels as desired.</p> <p>More documentation and examples can be found in the guide on Home Page Panels.</p>"},{"location":"development/apps/api/ui-extensions/navigation.html","title":"Adding Navigation Menu Items","text":"<p>Apps can extend the existing navigation bar layout. By default, Nautobot looks for a <code>menu_items</code> list inside of <code>navigation.py</code>. (This can be overridden by setting <code>menu_items</code> to a custom value on the app's <code>NautobotAppConfig</code>.)</p> <p>Using a key and weight system, a developer can integrate the app's menu additions amongst existing menu tabs, groups, and items.</p> <p>Removed in version 2.0.0</p> <p>As part of the Nautobot 2.0 UI redesign, the option for apps to add entirely new top-level menu \"tabs\" has been removed. Additionally, buttons can no longer be added to menu items.</p> <p>More documentation and examples can be found in the Navigation Menu guide.</p> <p>Tip</p> <p>To reduce the amount of clutter in the navigation menu, if your app provides an \"app configuration\" view, we recommend linking it from the main \"Installed Plugins\" page rather than adding it as a separate item in the navigation menu.</p> <p>Similarly, if your app provides an \"app home\" or \"dashboard\" view, consider linking it from the \"Installed Plugins\" page, and/or adding a link from the Nautobot home page (see below), rather than adding it to the navigation menu.</p>"},{"location":"development/apps/api/ui-extensions/object-detail-views.html","title":"Extending Object Detail Views","text":"<p>Apps can inject custom content into certain areas of the detail views of applicable models. This is accomplished by subclassing <code>TemplateExtension</code>, designating a particular Nautobot model, and defining the desired methods to render custom content. Four methods are available:</p> <ul> <li><code>left_page()</code> - Inject content on the left side of the page</li> <li><code>right_page()</code> - Inject content on the right side of the page</li> <li><code>full_width_page()</code> - Inject content across the entire bottom of the page</li> <li><code>buttons()</code> - Add buttons to the top of the page</li> <li><code>detail_tabs()</code> - Add extra tabs to the end of the list of tabs within the page tabs navigation</li> </ul> <p>Additionally, a <code>render()</code> method is available for convenience. This method accepts the name of a template to render, and any additional context data you want to pass. Its use is optional, however.</p> <p>When a TemplateExtension is instantiated, context data is assigned to <code>self.context</code>. Available data include:</p> <ul> <li><code>object</code> - The object being viewed</li> <li><code>request</code> - The current request</li> <li><code>settings</code> - Global Nautobot settings</li> <li><code>config</code> - App-specific configuration parameters</li> </ul> <p>For example, accessing <code>{{ request.user }}</code> within a template will return the current user.</p> <p>Declared subclasses should be gathered into a list or tuple for integration with Nautobot. By default, Nautobot looks for an iterable named <code>template_extensions</code> within a <code>template_content.py</code> file. (This can be overridden by setting <code>template_extensions</code> to a custom value on the app's <code>NautobotAppConfig</code>.) An example is below.</p> <pre><code># template_content.py\nfrom django.urls import reverse\nfrom nautobot.apps.ui import TemplateExtension\nfrom .models import Animal\nclass LocationAnimalCount(TemplateExtension):\n\"\"\"Template extension to display animal count on the right side of the page.\"\"\"\nmodel = 'dcim.location'\ndef right_page(self):\nreturn self.render('nautobot_animal_sounds/inc/animal_count.html', extra_context={\n'animal_count': Animal.objects.count(),\n})\nclass DeviceExtraTabs(TemplateExtension):\n\"\"\"Template extension to add extra tabs to the object detail tabs.\"\"\"\nmodel = 'dcim.device'\ndef detail_tabs(self):\n\"\"\"\n        You may define extra tabs to render on a model's detail page by utilizing this method.\n        Each tab is defined as a dict in a list of dicts.\n        For each of the tabs defined:\n        - The &lt;title&gt; key's value will become the tab link's title.\n        - The &lt;url&gt; key's value is used to render the HTML link for the tab\n        These tabs will be visible (in this instance) on the Device model's detail page as\n        set by the DeviceContent.model attribute \"dcim.device\"\n        This example demonstrates defining two tabs. The tabs will be ordered by their position in list.\n        \"\"\"\nreturn [\n{\n\"title\": \"App Tab 1\",\n\"url\": reverse(\"plugins:example_plugin:device_detail_tab_1\", kwargs={\"pk\": self.context[\"object\"].pk}),\n},\n{\n\"title\": \"App Tab 2\",\n\"url\": reverse(\"plugins:example_plugin:device_detail_tab_2\", kwargs={\"pk\": self.context[\"object\"].pk}),\n},\n]\ntemplate_extensions = [DeviceExtraTabs, LocationAnimalCount]\n</code></pre>"},{"location":"development/apps/api/ui-extensions/tabs.html","title":"Adding Extra Tabs","text":"<p>Added in version 1.4.0</p> <p>In order for any extra tabs to work properly, the <code>\"url\"</code> key must reference a view which inherits from the <code>nautobot.apps.views.ObjectView</code> class and the template must extend the object's detail template such as:</p> <pre><code>&lt;!-- example_plugin/tab_device_detail_1.html --&gt;\n{% extends 'dcim/device.html' %}\n\n{% block content %}\n    &lt;h2&gt;Device App Tab 1&lt;/h2&gt;\n&lt;p&gt;I am some content for the example plugin's device ({{ object.pk }}) detail tab 1.&lt;/p&gt;\n{% endblock %}\n</code></pre> <p>Here's a basic example of a tab's view</p> <pre><code># views.py\nfrom nautobot.apps.views import ObjectView\nfrom nautobot.dcim.models import Device\nclass DeviceDetailAppTabOne(ObjectView):\n\"\"\"\n    This view's template extends the device detail template,\n    making it suitable to show as a tab on the device detail page.\n    Views that are intended to be for an object detail tab's content rendering must\n    always inherit from nautobot.apps.views.ObjectView.\n    \"\"\"\nqueryset = Device.objects.all()\ntemplate_name = \"example_plugin/tab_device_detail_1.html\"\n</code></pre> <p>You must also add the view to the <code>url_patterns</code> like so (make sure to read the note after this code snippet):</p> <pre><code># urls.py\nfrom django.urls import path\nfrom example_plugin import views\nurlpatterns = [\n# ... previously defined urls\npath(\"devices/&lt;uuid:pk&gt;/example-plugin-tab-1/\", views.DeviceDetailAppTabOne.as_view(), name=\"device_detail_tab_1\"),\n]\n</code></pre> <p>Note</p> <p>For added tab views, we recommend for consistency that you follow the URL pattern established by the base model detail view and tabs (if any). For example, <code>nautobot/dcim/urls.py</code> references Device tab views with the URL pattern <code>devices/&lt;uuid:pk&gt;/TAB-NAME/</code>, so above we have followed that same pattern.</p>"},{"location":"development/apps/api/views/index.html","title":"Adding Web UI Views","text":"<p>If your app needs its own page or pages in the Nautobot web UI, you'll need to define views. A view is a particular page tied to a URL within Nautobot, which renders content using a template.</p>"},{"location":"development/apps/api/views/base-template.html","title":"Extending the Base Template","text":"<p>Nautobot provides a base template to ensure a consistent user experience, which apps can extend with their own content. This template includes four content blocks:</p> <ul> <li><code>title</code> - The page title</li> <li><code>header</code> - The upper portion of the page</li> <li><code>content</code> - The main page body</li> <li><code>javascript</code> - A section at the end of the page for including Javascript code</li> </ul> <p>For more information on how template blocks work, consult the Django documentation.</p> <pre><code>{# templates/nautobot_animal_sounds/animal.html #}\n{% extends 'base.html' %}\n\n{% block content %}\n    {% with config=settings.PLUGINS_CONFIG.nautobot_animal_sounds %}\n        &lt;h2 class=\"text-center\" style=\"margin-top: 200px\"&gt;\n            {% if animal %}\n                The {{ animal.name|lower }} says\n                {% if config.loud %}\n                    {{ animal.sound|upper }}!\n                {% else %}\n                    {{ animal.sound }}\n                {% endif %}\n            {% else %}\n                No animals have been created yet!\n            {% endif %}\n        &lt;/h2&gt;\n    {% endwith %}\n{% endblock %}\n</code></pre> <p>The first line of the template instructs Django to extend the Nautobot base template and inject our custom content within its <code>content</code> block.</p> <p>Note</p> <p>Django renders templates with its own custom template language. This template language is very similar to Jinja2, however there are some important differences to keep in mind.</p>"},{"location":"development/apps/api/views/core-view-overrides.html","title":"Replacing Views","text":"<p>Added in version 1.4.0</p> <p>You may override any of the core or app views by providing an <code>override_views</code> <code>dict</code> in an app's <code>views.py</code> file.</p> <p>To override a view, you must specify the view's fully qualified name as the <code>dict</code> key which consists of the app name followed by the view's name separated by a colon, for instance <code>dcim:device</code>. The <code>dict</code> value should be the overriding view function.</p> <p>A simple example to override the device detail view:</p> <pre><code># views.py\nfrom django.shortcuts import HttpResponse\nfrom django.views import generic\nclass DeviceViewOverride(generic.View):\ndef get(self, request, *args, **kwargs):\nreturn HttpResponse((\"Hello world! I'm a view which \"\n\"overrides the device object detail view.\"))\noverride_views = {\n\"dcim:device\": DeviceViewOverride.as_view(),\n}\n</code></pre>"},{"location":"development/apps/api/views/django-generic-views.html","title":"Utilizing Generic Django Views","text":"<p>The use of <code>generic</code> Django views can aid in app development. As an example, let's write a view which displays a random animal and the sound it makes. First, create the view in <code>views.py</code>:</p> <pre><code># views.py\nfrom django.shortcuts import render\nfrom django.views.generic import View\nfrom .models import Animal\nclass RandomAnimalView(View):\n\"\"\"Display a randomly-selected Animal.\"\"\"\ndef get(self, request):\nanimal = Animal.objects.order_by('?').first()\nreturn render(request, 'nautobot_animal_sounds/animal.html', {\n'animal': animal,\n})\n</code></pre> <p>This view retrieves a random animal from the database and and passes it as a context variable when rendering a template named <code>animal.html</code>, which doesn't exist yet. To create this template, first create a directory named <code>templates/nautobot_animal_sounds/</code> within the app source directory. (We use the app's name as a subdirectory to guard against naming collisions with other apps.) Then, create a template named <code>animal.html</code> as described below.</p>"},{"location":"development/apps/api/views/help-documentation.html","title":"Adding Help Documentation","text":"<p>If you are using the <code>generic.ObjectEditView</code> from Nautobot for your object, the form can automatically include a help icon with a link to that object's documentation. For this to happen, Nautobot must be able to find the documentation for this object in a specific directory tree within your app:</p> <pre><code>app_name/                   # \"nautobot_animal_sounds\"\n  - static/\n    - app_name/             # \"nautobot_animal_sounds\"\n      - docs/\n        - index.html\n        - core-data-model/\n          - object_model.html  # \"animal.html\"\n</code></pre> <p>Changed in version 2.0.0</p> <p>If you have a need to deviate from this structure, your model can define as a class attribute a <code>documentation_static_path</code> string to provide a different location within the <code>static/</code> subdirectory.</p>"},{"location":"development/apps/api/views/nautobot-generic-views.html","title":"Utilizing Nautobot Generic Views","text":"<p>Added in version 1.1.0</p> <p>Via PR #14, some <code>generic</code> views have been exposed to help aid in plugin development. These views have some requirements that must be in place in order to work. These can be used by importing them from <code>from nautobot.core.views import generic</code>.</p> <p>More documentation and examples can be found in Generic Views guide.</p>"},{"location":"development/apps/api/views/nautobot-generic-views.html#note-url-endpoint","title":"Note URL Endpoint","text":"<p>Added in version 1.4.0</p> <p>Models that inherit from <code>PrimaryModel</code> and <code>OrganizationalModel</code> can have notes associated. In order to utilize this new feature you will need to add the endpoint to <code>urls.py</code>. Here is an option to be able to support both 1.4+ and older versions of Nautobot:</p> <p>Tip</p> <p>This is only necessary if you are not using NautobotUIViewSet &amp; NautobotUIViewSetRouter and wish to include Notes functionality.</p> <pre><code>urlpatterns = [\npath('random/', views.RandomAnimalView.as_view(), name='random_animal'),\n]\ntry:\nfrom nautobot.extras.views import ObjectNotesView\nurlpatterns.append(\npath(\n'random/&lt;uuid:pk&gt;/notes/),\nObjectNotesView.as_view(),\nname=\"random_notes\",\nkwargs={\"model\": Random},\n)\n)\nexcept ImportError:\npass\n</code></pre>"},{"location":"development/apps/api/views/nautobotuiviewset.html","title":"NautobotUIViewSet","text":"<p>Added in version 1.4.0</p> <p>New in Nautobot 1.4 is the debut of <code>NautobotUIViewSet</code>: A powerful app development tool that can save app developer hundreds of lines of code compared to using legacy <code>generic.views</code>. Using it to gain access to default functionalities previous provided by <code>generic.views</code> such as <code>create()</code>, <code>bulk_create()</code>, <code>update()</code>, <code>partial_update()</code>, <code>bulk_update()</code>, <code>destroy()</code>, <code>bulk_destroy()</code>, <code>retrieve()</code> and <code>list()</code> actions.</p> <p>Note that this ViewSet is catered specifically to the UI, not the API.</p> <p>Concrete examples on how to use <code>NautobotUIViewSet</code> resides in <code>nautobot.circuits.views</code>.</p> <p>Below we provide an example on how to use <code>NautobotUIViewSet</code> on a theoretical app model.</p> <pre><code>from nautobot.apps.views import NautobotUIViewSet\nfrom yourapp import filters, forms, models, tables\nfrom yourapp.api import serializers\nclass YourAppModelUIViewSet(NautobotUIViewSet):\nbulk_update_form_class = forms.YourAppModelBulkEditForm\nfilterset_class = filters.YourAppModelFilterSet\nfilterset_form_class = forms.YourAppModelFilterForm\nform_class = forms.YourAppModelForm\nqueryset = models.YourAppModel.objects.all()\nserializer_class = serializers.YourAppModelSerializer\ntable_class = tables.YourAppModelTable\n</code></pre>"},{"location":"development/apps/api/views/nautobotuiviewset.html#setting-viewset-attributes","title":"Setting ViewSet Attributes","text":"<p>One caveat of using the NautobotUIViewSet is that the <code>queryset</code>, <code>serializer_class</code> and <code>table_class</code> attribute of the <code>YourAppModelUIViewSet</code> has to be set before most of the <code>NautobotUIViewSet</code> functionalities will become available.</p> <p>By default the URL patterns generated by a <code>NautobotUIViewSet</code> are based on the model's <code>pk</code> (<code>/model-name/&lt;pk&gt;/</code> for the detail view, <code>/model-name/&lt;pk&gt;/edit/</code> for the edit view, etc.). if you need to use a different field to look up an object, just override the default <code>lookup_field</code> in your ViewSet attributes:</p> <pre><code>from nautobot.apps.views import NautobotUIViewSet\nclass YourAppModelUIViewSet(NautobotUIViewSet):\n...\nlookup_field = \"slug\"\n...\n</code></pre> <p>Changed in version 2.0.0</p> <p>The default <code>lookup_field</code> for <code>NautobotUIViewSet</code> has been changed from <code>\"slug\"</code> to <code>\"pk\"</code>.</p> <p>Note</p> <p>Using a field other than the default <code>pk</code> or the alternative field <code>slug</code> (as shown in the example above), may result in certain pieces of the UI not displaying (for example, the edit and delete buttons on the object detail view). This is due to the URL expecting a named key of slug or pk, rather than id.</p>"},{"location":"development/apps/api/views/nautobotuiviewset.html#view-template-context","title":"View Template Context","text":"<p>Templates can benefit from a very rich context passed down from the views and renderer, including forms, tables, as well as any other information that may be helpful for rendering templates. The keys it provides are as follows:</p> <ul> <li><code>content_type</code>: The ContentType object for the associated model</li> <li><code>filter_form</code>: The FilterForm object for the associated model</li> <li><code>form</code>: A Form object for the associated model if relevant (<code>None</code> for list and detail/retrieve views)</li> <li><code>object</code>: An instance of the associated mode if available (<code>None</code> for list and bulk operation views)</li> <li><code>permissions</code>: Summary of user permissions for the given model</li> <li><code>return_url</code>: The relevant return URL</li> <li><code>table</code>: A Table object for the associated model if relevant (<code>None</code> for detail/retrieve and update views)</li> <li><code>table_config_form</code>: A TableConfigForm object for the associated <code>table</code>, providing the ability to customize the table</li> <li><code>verbose_name</code>: The singular form of the model's name</li> <li><code>verbose_name_plural</code>: The plural form of the model's name</li> </ul> <p>An example from editing a Provider object:</p> <pre><code>{\n'content_type': &lt;ContentType: circuits | provider&gt;,\n'filter_form': &lt;ProviderFilterForm bound=True, valid=Unknown, fields=(location;q;asn;tag)&gt;,\n'form': &lt;ProviderForm bound=False, valid=Unknown, fields=(name;asn;account;portal_url;noc_contact;admin_contact;comments;tags;object_note)&gt;,\n'object': &lt;Provider: NautobotProvider&gt;,\n'permissions': {'add': True, 'change': True, 'delete': True, 'view': True},\n'return_url': '/circuits/providers/nautobotprovider',\n'table': None,\n'table_config_form': None,\n'verbose_name': 'provider',\n'verbose_name_plural': 'providers'\n}\n</code></pre> <p>Other context keys may be available for certain views:</p> <ul> <li><code>editing</code>: Provided for create and update views to help the template determine if this is a new or existing object</li> <li><code>action_buttons</code>: Provided for the list view for the top of table buttons (such as \"Add\" and \"Export\")</li> </ul> <p>You may see other context keys as well, but any not documented above should not be relied upon as they may be removed in a future release. Some examples of those are:</p> <ul> <li><code>obj</code>: Please use <code>object</code> instead</li> <li><code>obj_type</code>: Please use <code>verbose_name</code> instead</li> <li><code>obj_type_plural</code>: Please use <code>verbose_name_plural</code> instead</li> </ul> <p>Removed in version 2.0.0</p> <p>The <code>changelog_url</code> context key was removed. Use <code>object.get_changelog_url</code> instead.</p>"},{"location":"development/apps/api/views/nautobotuiviewset.html#excluding-viewmixins-from-nautobotuiviewset","title":"Excluding ViewMixins from NautobotUIViewSet","text":"<p>For app models that do not require certain views, simply inherit directly from the <code>ViewMixin</code> classes available in <code>nautobot.apps.views</code> instead of <code>NautobotUIViewSet</code>.</p> <p>Concrete examples for excluding <code>ViewMixins</code>, checkout <code>CircuitTerminationUIViewSet</code> and <code>CircuitTypeUIViewSet</code> in <code>nautobot.circuits.views</code>.</p> <pre><code>## An app model viewset that does not support bulk views and operations\nimport nautobot.apps.views\nclass YourAppModelUIViewSet(\nnautobot.apps.views.ObjectListViewMixin,\nnautobot.apps.views.ObjectDetailViewMixin,\nnautobot.apps.views.ObjectEditViewMixin,\nnautobot.apps.views.ObjectDestroyViewMixin,\n):\nfilterset_class = YourAppModelFilterSet\nfilterset_form_class = YourAppModelFilterForm\nform_class = YourAppModelForm\nqueryset = YourAppModel.objects.all()\nserializer_class = serializers.YourAppModelSerializer\ntable_class = YourAppModelTable\n# You do not need to specify attributes that are not needed.\n</code></pre> <p>Excluding unwanted urls from <code>NautobotUIViewSetRouter</code> is done for you at the ViewSet level. If you do not inherit the unwanted ViewMixins, the corresponding route from the router will not be published.</p> <pre><code># urls.py\n# All the urls correspond to BulkViewMixins will not be published when you register your ViewSet with the router.\nrouter.register(\"yourappmodel\", views.YourAppModelUIViewSet)\n</code></pre>"},{"location":"development/apps/api/views/nautobotuiviewset.html#template-naming-for-nautobotuiviewset","title":"Template Naming for NautobotUIViewSet","text":"<p>Template naming is very intuitive in NautobotUIViewSet. In <code>templates/yourapp</code> folder, name your templates following the convention <code>{model_name}_{action}.html</code>.</p> ViewMixins action ObjectListViewMixin list ObjectDetailViewMixin retrieve ObjectEditViewMixin create/update ObjectDestroyViewMixin destroy ObjectBulkDestroyViewMixin bulk_destroy ObjectBulkCreateViewMixin bulk_create ObjectBulkUpdateViewMixin bulk_update <p>For example, for a DetailView template for <code>YourAppModel</code>, the template name will be <code>yourapp/yourappmodel_retrieve.html</code>, for a BulkCreateView template for <code>yourappmodel</code>, the template name will be <code>yourapp/yourappmodel_bulk_create.html</code> and etc.</p> <p>If you do not provide your own templates in the <code>yourapp/templates/yourapp</code> folder, <code>NautobotUIViewSet</code> will fall back to <code>generic/object_{self.action}.html</code>.</p> <p>Since in many cases the <code>create</code> and <code>update</code> templates for a model will be identical, you are not required to create both. If you provide a <code>{app_label}/{model_opts.model_name}_create.html</code> file but not a <code>{app_label}/{model_opts.model_name}_update.html</code> file, then when you update an object, it will fall back to <code>{app_label}/{model_opts.model_name}_create.html</code> and vice versa.</p>"},{"location":"development/apps/api/views/nautobotuiviewsetrouter.html","title":"NautobotUIViewSetRouter","text":"<p>With <code>NautobotUIViewSet</code> as the base UI ViewSet for <code>YourAppModel</code>, it is required to register your urls with the help of <code>NautobotUIViewSetRouter</code>.</p> <p>For a concrete example on how to use <code>NautobotUIViewSetRouter</code>, see <code>nautobot.circuits.urls</code>.</p> <p>Below is a theoretical <code>urls.py</code> file for <code>YourAppModel</code>:</p> <pre><code>from django.urls import path\nfrom nautobot.apps.urls import NautobotUIViewSetRouter\nfrom your_app import views\nrouter = NautobotUIViewSetRouter()\nrouter.register(\"yourappmodel\", views.YourAppModelUIViewSet)\nurlpatterns = [\n# Extra urls that do not follow the patterns of `NautobotUIViewSetRouter` go here.\n# changelog, notes and etc.\n...\npath(\n\"yourappmodels/&lt;uuid:pk&gt;/changelog/\",\nObjectChangeLogView.as_view(),\nname=\"yourappmodel_changelog\",\nkwargs={\"model\": yourappmodel},\n),\npath(\n\"yourappmodels/&lt;uuid:pk&gt;/notes/\",\nObjectNotesView.as_view(),\nname=\"yourappmodel_notes\",\nkwargs={\"model\": yourappmodel},\n),\n...\n]\nurlpatterns += router.urls\n</code></pre> <p>Added in version 1.5.1</p> <p>Changelog and Notes views and URLs are now provided in the NautobotUIViewSet and NautobotUIViewSetRouter.</p>"},{"location":"development/apps/api/views/notes.html","title":"Note URL Endpoint","text":"<p>Added in version 1.4.0</p> <p>Models that inherit from <code>PrimaryModel</code> and <code>OrganizationalModel</code> can have notes associated. In order to utilize this new feature you will need to add the endpoint to <code>urls.py</code>. Here is an option to be able to support both 1.4+ and older versions of Nautobot:</p> <pre><code>urlpatterns = [\npath('random/', views.RandomAnimalView.as_view(), name='random_animal'),\n]\ntry:\nfrom nautobot.extras.views import ObjectNotesView\nurlpatterns.append(\npath(\n'random/&lt;uuid:pk&gt;/notes/),\nObjectNotesView.as_view(),\nname=\"random_notes\",\nkwargs={\"model\": Random},\n)\n)\nexcept ImportError:\npass\n</code></pre>"},{"location":"development/apps/api/views/rest-api.html","title":"Adding REST API Endpoints","text":"<p>Apps can declare custom endpoints on Nautobot's REST API to retrieve or manipulate models or other data. These behave very similarly to views, except that instead of rendering arbitrary content using a template, data is returned in JSON format using a serializer. Nautobot uses the Django REST Framework, which makes writing API serializers and views very simple.</p> <p>First, create a serializer for the <code>Animal</code> model, in <code>api/serializers.py</code>:</p> <pre><code># api/serializers.py\nfrom nautobot.apps.api import ValidatedModelSerializer\nfrom nautobot_animal_sounds.models import Animal\nclass AnimalSerializer(ValidatedModelSerializer):\n\"\"\"API serializer for interacting with Animal objects.\"\"\"\nclass Meta:\nmodel = Animal\nfields = ('id', 'name', 'sound')\n</code></pre> <p>Tip</p> <p>For more full-featured models, you should use one of the other base classes from <code>nautobot.apps.api</code> such as <code>NautobotModelSerializer</code>.</p> <p>Next, create a generic API view set that allows basic CRUD (create, read, update, and delete) operations for Animal instances. This is defined in <code>api/views.py</code>:</p> <pre><code># api/views.py\nfrom rest_framework.viewsets import ModelViewSet\nfrom nautobot_animal_sounds.models import Animal\nfrom .serializers import AnimalSerializer\nclass AnimalViewSet(ModelViewSet):\n\"\"\"API viewset for interacting with Animal objects.\"\"\"\nqueryset = Animal.objects.all()\nserializer_class = AnimalSerializer\n</code></pre> <p>Tip</p> <p>For more full-featured models, you should probably use <code>nautobot.apps.api.NautobotModelViewSet</code> as a base class.</p> <p>Finally, register a URL for our endpoint in <code>api/urls.py</code>. This file must define a variable named <code>urlpatterns</code>.</p> <pre><code># api/urls.py\nfrom rest_framework import routers\nfrom .views import AnimalViewSet\nrouter = routers.DefaultRouter()\nrouter.register('animals', AnimalViewSet)\nurlpatterns = router.urls\n</code></pre> <p>With these three components in place, we can request <code>/api/plugins/animal-sounds/animals/</code> to retrieve a list of all Animal objects defined.</p> <p></p> <p>Warning</p> <p>This example is provided as a minimal reference implementation only. It does not address authentication, performance, or the myriad of other concerns that app authors should have.</p>"},{"location":"development/apps/api/views/urls.html","title":"Registering URL Patterns","text":"<p>Finally, to make the view accessible to users, we need to register a URL for it. We do this in <code>urls.py</code> by defining a <code>urlpatterns</code> variable containing a list of paths.</p> <pre><code># urls.py\nfrom django.urls import path\nfrom . import views\nurlpatterns = [\npath('random/', views.RandomAnimalView.as_view(), name='random_animal'),\n]\n</code></pre> <p>A URL pattern has three components:</p> <ul> <li><code>route</code> - The unique portion of the URL dedicated to this view</li> <li><code>view</code> - The view itself</li> <li><code>name</code> - A short name used to identify the URL path internally</li> </ul> <p>This makes our view accessible at the URL <code>/plugins/animal-sounds/random/</code>. (Remember, our <code>AnimalSoundsConfig</code> class sets our app's base URL to <code>animal-sounds</code>.) Viewing this URL should show the base Nautobot template with our custom content inside it.</p> <p>Tip</p> <p>As a next step, you would typically want to add links from the Nautobot UI to this view, either from the navigation menu, the Nautobot home page, and/or the Installed Plugins view.</p>"},{"location":"development/apps/api/views/view-overrides.html","title":"Overriding Default Model Views in Nautobot Apps","text":"<p>Added in version 2.0.0</p> <p>In UI 2.0, Nautobot provides default model views (<code>ObjectListView</code>, <code>ObjectRetrieveView</code> and etc) for every model including App provided models unless they are explicitly overridden. For example, an app called <code>your_example_app</code> wants to override the default <code>ObjectRetrieveView</code> for its model called <code>YourExampleModel</code> with a customized view called <code>YourExampleView</code>. We need to go to the <code>index.js</code> file located in the <code>your_example_app/ui</code> folder and add a key <code>view_overrides</code> to the <code>app_config</code> dictionary variable.</p> <pre><code>const app_config = {\n    ...\n    view_overrides: {}\n    ...\n}\n</code></pre> <p>In <code>view_overrides</code>'s dictionary, you need to specify the app and the model you want to override the default view for in this format <code>{app_label}: {model_name}</code>. So in our case, it would be <code>\"your-example-app\": \"your-example-model\"</code>.</p> <pre><code>...\n    view_overrides: {\n        \"your-example-app\": \"your-example-model\": {}\n    }\n...\n</code></pre> <p>Finally, you need to specify the default view action you want to override and the new view in this format <code>{view_action}: {new_view}</code>. So in our case, it would be <code>\"retrieve\": \"YourExampleView\"</code>:</p> <pre><code>...\n    view_overrides: {\n        \"your-example-app\": \"your-example-model\": {\n            \"retrieve\": \"YourExampleView\"\n        }\n    }\n...\n</code></pre> <p>Now if you go to <code>YourExampleModel</code>'s retrieve view, instead of the default <code>ObjectRetrieveView</code>, you will see the customized layout of <code>YourExampleView</code>.</p> <p>If you want to override the default <code>ObjectListView</code> as well for <code>YourExampleModel</code> with <code>YourExampleListView</code>, just append <code>\"list\": \"YourExampleListView\"</code> to the <code>\"your-example-app\": \"your-example-model\"</code> dictionary.</p> <pre><code>...\n    view_overrides: {\n        \"your-example-app\": \"your-example-model\": {\n            \"retrieve\": \"YourExampleView\",\n            \"list\": \"YourExampleListView\",\n        }\n    }\n...\n</code></pre>"},{"location":"development/apps/migration/code-updates.html","title":"App Code Updates for Nautobot v2","text":""},{"location":"development/apps/migration/code-updates.html#update-code-import-locations","title":"Update Code Import Locations","text":"<p>Most changes in code location arise from the merging of the <code>nautobot.utilities</code> module into the <code>nautobot.core</code> module.</p> Full table of code location changes Old Module Class/Function(s) New Module nautobot.core.api.utils TreeModelSerializerMixin nautobot.core.api.serializers nautobot.core.fields (all) nautobot.core.models.fields nautobot.core.forms SearchForm nautobot.core.forms.search nautobot.core.utilities (all) nautobot.core.views.utils nautobot.dcim.fields MACAddressCharField nautobot.core.models.fields nautobot.dcim.forms MACAddressField nautobot.core.forms nautobot.extras.api.customfields CustomFieldModelSerializerMixin nautobot.core.api.serializers nautobot.extras.api.relationships RelationshipModelSerializerMixin nautobot.core.api.serializers nautobot.extras.api.serializers NautobotModelSerializer nautobot.core.api.serializers nautobot.extras.api.serializers NotesSerializerMixin nautobot.core.api.serializers nautobot.extras.api.serializers TaggedModelSerializerMixin nautobot.extras.api.mixins nautobot.extras.utils is_taggable nautobot.core.models.utils nautobot.utilities.api (all) nautobot.core.api.utils nautobot.utilities.apps (all) nautobot.core.apps nautobot.utilities.checks (all) nautobot.core.checks nautobot.utilities.choices (all) nautobot.core.choices nautobot.utilities.config (all) nautobot.core.utils.config nautobot.utilities.constants (all) nautobot.core.constants nautobot.utilities.deprecation (all) nautobot.core.utils.deprecation nautobot.utilities.error_handlers (all) nautobot.core.views.utils nautobot.utilities.exceptions (all) nautobot.core.exceptions nautobot.utilities.factory (all) nautobot.core.factory nautobot.utilities.fields (all) nautobot.core.models.fields nautobot.utilities.filters (all) nautobot.core.filters nautobot.utilities.forms (all) nautobot.core.forms nautobot.utilities.git (all) nautobot.core.utils.git nautobot.utilities.logging (all) nautobot.core.utils.logging nautobot.utilities.management (all) nautobot.core.management nautobot.utilities.ordering (all) nautobot.core.utils.ordering nautobot.utilities.paginator (all) nautobot.core.views.paginator nautobot.utilities.permissions (all) nautobot.core.utils.permissions nautobot.utilities.query_functions (all) nautobot.core.models.query_functions nautobot.utilities.querysets (all) nautobot.core.models.querysets nautobot.utilities.tables (all) nautobot.core.tables nautobot.utilities.tasks (all) nautobot.core.tasks nautobot.utilities.templatetags (all) nautobot.core.templatetags nautobot.utilities.testing (all) nautobot.core.testing nautobot.utilities.tree_queries (all) nautobot.core.models.tree_queries nautobot.utilities.utils array_to_string nautobot.core.models.utils nautobot.utilities.utils convert_querydict_to_factory_formset_acceptable_querydict nautobot.core.utils.requests nautobot.utilities.utils count_related nautobot.core.models.querysets nautobot.utilities.utils csv_format nautobot.core.views.utils nautobot.utilities.utils deepmerge nautobot.core.utils.data nautobot.utilities.utils dict_to_filter_params nautobot.core.api.utils nautobot.utilities.utils dynamic_import nautobot.core.api.utils nautobot.utilities.utils ensure_content_type_and_field_name_inquery_params nautobot.core.utils.requests nautobot.utilities.utils flatten_dict nautobot.core.utils.data nautobot.utilities.utils flatten_iterable nautobot.core.utils.data nautobot.utilities.utils foreground_color nautobot.core.utils.color nautobot.utilities.utils get_all_lookup_expr_for_field nautobot.core.utils.filtering nautobot.utilities.utils get_api_version_serializer nautobot.core.api.utils nautobot.utilities.utils get_changes_for_model nautobot.core.utils.lookup nautobot.utilities.utils get_filterset_field nautobot.core.utils.filtering nautobot.utilities.utils get_filterset_for_model nautobot.core.utils.lookup nautobot.utilities.utils get_filterable_params_from_filter_params nautobot.core.utils.requests nautobot.utilities.utils get_form_for_model nautobot.core.utils.lookup nautobot.utilities.utils get_model_from_name nautobot.core.utils.lookup nautobot.utilities.utils get_related_class_for_model nautobot.core.utils.lookup nautobot.utilities.utils get_route_for_model nautobot.core.utils.lookup nautobot.utilities.utils get_table_for_model nautobot.core.utils.lookup nautobot.utilities.utils hex_to_rgb nautobot.core.utils.color nautobot.utilities.utils is_taggable nautobot.core.models.utils nautobot.utilities.utils is_uuid nautobot.core.utils.data nautobot.utilities.utils lighten_color nautobot.core.utils.color nautobot.utilities.utils normalize_querydict nautobot.core.utils.requests nautobot.utilities.utils prepare_cloned_fields nautobot.core.views.utils nautobot.utilities.utils pretty_print_query nautobot.core.models.utils nautobot.utilities.utils render_jinja2 nautobot.core.utils.data nautobot.utilities.utils rgb_to_hex nautobot.core.utils.color nautobot.utilities.utils SerializerForAPIVersions nautobot.core.api.utils nautobot.utilities.utils serialize_object nautobot.core.models.utils nautobot.utilities.utils serialize_object_v2 nautobot.core.models.utils nautobot.utilities.utils shallow_compare_dict nautobot.core.utils.data nautobot.utilities.utils slugify_dots_to_dashes nautobot.core.models.fields nautobot.utilities.utils slugify_dashes_to_underscores nautobot.core.models.fields nautobot.utilities.utils to_meters nautobot.core.utils.data nautobot.utilities.utils UtilizationData nautobot.core.utils.data nautobot.utilities.utils versioned_serializer_selector nautobot.core.api.utils nautobot.utilities.validators (all) nautobot.core.models.validators nautobot.utilities.views (all) nautobot.core.views.mixins"},{"location":"development/apps/migration/code-updates.html#replace-pluginmenuitem-with-navmenuitem","title":"Replace PluginMenuItem with NavMenuItem","text":"<p>In your app's <code>navigation.py</code> file. If you are still using <code>PluginMenuItem</code> from <code>nautobot.extras.plugin</code>, you should replace those code with <code>NavMenuGroup</code>, <code>NavMenuItem</code>, and <code>NavMenuTab</code> from <code>nautobot.apps.ui</code>.</p> <p>For example:</p> <p>Before:</p> <pre><code>    from nautobot.extras.plugins import PluginMenuItem\nmenu_items = (\nPluginMenuItem(\nlink=\"plugins:your_app:dashboard\",\nlink_text=\"Dashboard\",\npermissions=[\"your_app.view_sync\"],\n),\nPluginMenuItem(\nlink=\"plugins:your_app:sync_list\",\nlink_text=\"History\",\npermissions=[\"your_app.view_sync\"],\n),\nPluginMenuItem(\nlink=\"plugins:your_app:synclogentry_list\",\nlink_text=\"Logs\",\npermissions=[\"your_app.view_synclogentry\"],\n),\n)\n</code></pre> <p>After:</p> <pre><code>from nautobot.apps.ui import NavMenuGroup, NavMenuItem, NavMenuTab\nitems = [\nNavMenuItem(\nlink=\"plugins:your_app:dashboard\",\nname=\"Dashboard\",\npermissions=[\"your_app.view_sync\"],\n),\nNavMenuItem(\nlink=\"plugins:your_app:sync_list\",\nname=\"History\",\npermissions=[\"your_app.view_sync\"],\n),\nNavMenuItem(\nlink=\"plugins:your_app:synclogentry_list\",\nname=\"Logs\",\npermissions=[\"your_app.view_synclogentry\"],\n),\n]\nmenu_items = (\nNavMenuTab(\nname=\"Plugins\",\ngroups=(NavMenuGroup(name=\"Your App\", weight=1000, items=tuple(items)),),\n),\n)\n</code></pre>"},{"location":"development/apps/migration/code-updates.html#remove-tagtags-filter-from-filterset-definitions","title":"Remove Tag/Tags Filter from FilterSet Definitions","text":"<p>In Nautobot 2.0, you can safely remove <code>tag = TagFilter(...)</code> from your filter set definitions as long as your filter sets inherit from <code>NautobotFilterSet</code> class and <code>tags</code> is added to the filter set class <code>Meta.fields</code>.</p> <p>For example, before the filter set could look like this:</p> <pre><code>class AppModelFilterSet(BaseFilterSet):\nname = MultiValueCharFilter(...)\nnumber = MultiValueNumberFilter(...)\ntag = TagFilter(...)\nclass Meta:\nfields = [\"name\", \"number\"]\n</code></pre> <p>After changing the base class to <code>NautobotFilterSet</code> the <code>tag</code> filter should be removed:</p> <pre><code>class AppModelFilterSet(NautobotFilterSet):\nname = MultiValueCharFilter(...)\nnumber = MultiValueNumberFilter(...)\nclass Meta:\nfields = [\"name\", \"number\", \"tags\"]\n</code></pre>"},{"location":"development/apps/migration/code-updates.html#replace-djangofilterbackend-with-nautobotfilterbackend","title":"Replace DjangoFilterBackend with NautobotFilterBackend","text":"<p>If your REST API has any <code>FilterBackend</code> classes derived from <code>DjangoFilterBackend</code>, you should replace <code>DjangoFilterBackend</code> with <code>NautobotFilterBackend</code>.</p>"},{"location":"development/apps/migration/code-updates.html#app-model-serializer-inheritance","title":"App Model Serializer Inheritance","text":"<p>App Model Serializers for any models that could have a Generic Foreign Key or a Many to Many relationship from a Nautobot Core model must inherit from BaseModelSerializer at a minimum so that they have a properly generated <code>object_type</code> field. This also applies to the case where your model is a subclass of <code>ChangeLoggedModel</code> and you will have a Generic Foreign Key from <code>ObjectChange</code>'s <code>changed_object</code> field. Otherwise drf-spectacular schema generation will throw an error:</p> <pre><code>(drf_spectacular.E001) Schema generation threw exception \"Field name `object_type` is not valid for model `YourAppModel`.\n</code></pre>"},{"location":"development/apps/migration/code-updates.html#revamp-rest-api-serializers","title":"Revamp Rest API Serializers","text":"<p><code>NestedSerializer</code> classes are no longer needed in Nautobot 2.0. If any <code>NestedSerializers</code> exist for your models, you should just remove their class definitions and references.</p> <p>After removing existing <code>NestedSerializers</code>, you can change the <code>fields</code> attribute in your serializers' <code>class Meta</code> to <code>__all__</code> and that will automatically include all the model's fields in the serializer, including related-model fields that would previously have required a reference to a <code>NestedSerializer</code>. If you want to exclude certain fields of the model, you can specify a list of fields you want to display in the <code>fields</code> attribute instead.</p> <p>Warning</p> <p>Use caution around <code>fields = \"__all__\"</code> -- if your model has any fields that should not be exposed in the REST API, you should avoid using <code>\"__all__\"</code> and instead use an explicit <code>fields</code> list to ensure that such fields are not exposed. In some cases, it may be appropriate to use <code>\"__all__\"</code> in combination with flags such as <code>write_only=True</code> on specific fields, but proceed with caution and examine the REST API data carefully to ensure that its contents are as expected.</p> <p>Include all model attributes:</p> <pre><code>class ExampleModelSerializer(NautobotModelSerializer):\n\"\"\"Used for normal CRUD operations.\"\"\"\nurl = serializers.HyperlinkedIdentityField(view_name=\"plugins-api:example_plugin-api:anotherexamplemodel-detail\")\nclass Meta:\nmodel = AnotherExampleModel\nfields = \"__all__\"\n</code></pre> <p>Include only specified model attributes:</p> <pre><code>class ExampleModelSerializer(NautobotModelSerializer):\n\"\"\"Used for normal CRUD operations.\"\"\"\nurl = serializers.HyperlinkedIdentityField(view_name=\"plugins-api:example_plugin-api:anotherexamplemodel-detail\")\nclass Meta:\nmodel = AnotherExampleModel\n# example_attribute_4 is not included in the serializer\nfields = [\"url\", \"example_attribute_1\", \"example_attribute_2\", \"example_attribute_3\"]\n</code></pre> <p>In addition, the <code>?brief=</code> API query parameter is replaced by <code>?depth=&lt;0-10&gt;</code>. As a result, the ability to specify <code>brief_mode</code> in <code>DynamicModelChoiceField</code>, <code>DynamicModelMultipleChoiceField</code>, and <code>MultiMatchModelMultipleChoiceField</code> has also been removed. For every occurrence of the aforementioned fields where you have <code>brief_mode</code> set to <code>True/False</code> (e.g. <code>brief_mode=True</code>), please remove the statement, leaving other occurrences of the fields where you do not have <code>brief_mode</code> specified as they are. Check out our API documentation for this change.</p>"},{"location":"development/apps/migration/code-updates.html#revamp-csv-import-and-export","title":"Revamp CSV Import and Export","text":"<p>CSV Import for models are now done automatically via the Rest API. As a result of this change, <code>CSVForm</code> classes are no longer needed and should be deleted. In addition, the Model <code>csv_headers</code> attribute and <code>to_csv</code> method are no longer needed or used in CSV generation, and should be removed from your model definitions. Check out our release notes for this specific change.</p>"},{"location":"development/apps/migration/dependency-updates.html","title":"Dependency Updates","text":""},{"location":"development/apps/migration/dependency-updates.html#nautobot-version","title":"Nautobot Version","text":"<p>Change your Nautobot to the latest/v2.0 release.</p>"},{"location":"development/apps/migration/dependency-updates.html#python-version","title":"Python Version","text":"<p>Python 3.7 support is dropped for Nautobot v2.0 and Python 3.8 is the minimum version for Nautobot and its apps.</p>"},{"location":"development/apps/migration/dependency-updates.html#pylint-nautobot","title":"pylint-nautobot","text":"<p>pylint-nautobot is now a required dev-dependency. Make sure you add <code>pylint-nautobot = \"*\"</code> under <code>tool.poetry.dev-dependencies</code> section in your <code>pyproject.toml</code>.</p>"},{"location":"development/apps/migration/from-v1.html","title":"Migrating from 1.x to 2.0","text":"<p>This document provides guidance on migrating code from version 1.x to version 2.0.0. It covers the major changes introduced in the new version and outlines the necessary modifications you need to make in your code to ensure compatibility.</p>"},{"location":"development/apps/migration/from-v1.html#table-of-contents","title":"Table of Contents","text":"<ul> <li>New to Nautobot v2.0.0<ul> <li>New UI</li> <li>Enhanced Filter Fields</li> </ul> </li> <li>Changes to Nautobot in v2.0.0<ul> <li>Database (ORM) Changes<ul> <li>Database Field Behavior Changes</li> <li>Renamed Database Fields</li> <li>Removed Database Fields</li> </ul> </li> <li>Generic Role Model</li> <li>Collapse Site and Region into Location</li> <li>Aggregate model Migrated to Prefix</li> <li>Renamed Database Foreign Keys and Related Names</li> <li>Renamed Filter Fields</li> <li>Corrected Filter Fields</li> <li>Jobs</li> </ul> </li> <li>Steps to Migrate an App from V1<ul> <li>Preliminary Steps:<ul> <li>Add <code>pylint-nautobot</code> as a development dependency</li> <li>Run <code>pylint -v --disable=all --enable=nautobot-code-location-changes,nautobot-replaced-models *</code> in order to parse your development environment for changes that need to be fixed before pylint-django can successfully run.</li> <li>Specific steps to install and run <code>pylint-nautobot</code> in your development environment is available here</li> </ul> </li> <li>Dependency Updates<ul> <li>Nautobot Version</li> <li>Python Version</li> <li>pylint-nautobot</li> </ul> </li> <li>Code Updates<ul> <li>Update Code Import Locations</li> <li>Replace PluginMenuItem with NavMenuItem</li> <li>Remove Tag/Tags Filter Field from FilterSet Definitions</li> <li>Replace DjangoFilterBackend with NautobotFilterBackend</li> <li>App Model Serializer Inheritance</li> <li>Revamp Rest API Serializers</li> <li>Revamp CSV Import and Export</li> </ul> </li> <li>Model Updates<ul> <li>Global<ul> <li>Replace the Usage of Slugs</li> </ul> </li> <li>DCIM<ul> <li>Replace Site and Region with Location Model</li> </ul> </li> <li>Extras<ul> <li>Replace Role Related Models with Generic Role Model</li> <li>Update Job and Job related models<ul> <li>Job Model Changes</li> <li>Job Logging Changes</li> <li>JobResult Model Changes</li> </ul> </li> <li>Update CustomField, ComputedField, and Relationship</li> </ul> </li> <li>IPAM<ul> <li>Replace Aggregate with Prefix</li> <li>Introduction of Namespace</li> <li>Concrete Relationship between Prefix and IP Address</li> <li>Concrete Relationship between Prefix and Self</li> <li>Convert Relationship Type between Prefix and VRF to Many to Many</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"development/apps/migration/model-updates/dcim.html","title":"DCIM","text":""},{"location":"development/apps/migration/model-updates/dcim.html#replace-site-and-region-with-location-model","title":"Replace Site and Region with Location Model","text":"<p>In Nautobot 2.0.0, all the <code>Region</code> and <code>Site</code> related data models are being migrated to use <code>Location</code>. Below is a comprehensive guide for Nautobot App developers to migrate their <code>Region</code> and <code>Site</code> related data models to <code>Location</code>.</p> <p>We will be using <code>ExampleModel</code> as a relatively simple and hands-on example throughout this guide to better your understanding of the migration process.</p>"},{"location":"development/apps/migration/model-updates/dcim.html#before-you-begin","title":"Before you Begin","text":"<p>Warning</p> <p>You must perform these steps before proceeding. Failing to follow them properly could result in data loss. Always backup your database before performing any migration steps.  </p> <p>Before you follow the guide, please make sure that these operations are completed:  </p> <ol> <li>Make sure your working Nautobot is on Version 1.5.x with baseline migrations all run.  </li> <li>Stop Nautobot Server.  </li> <li>Create a backup of your Nautobot database.</li> <li>Update installed version of Nautobot to 2.0.0.  </li> <li>Run <code>nautobot-server migrate dcim 0034_migrate_region_and_site_data_to_locations</code>. (This operation will ensure that <code>(\"dcim\", \"0034_migrate_region_and_site_data_to_locations\")</code> is the latest migration applied to your Nautobot instance and that <code>(\"dcim\", \"0034_remove_region_and_site\")</code> is not applied. Failure to complete this step will result in data loss)  </li> </ol> <p>After you complete those operations, follow the guide below for each of your installed apps to:  </p> <ol> <li>Make all necessary migration files for each app.  </li> <li>Run <code>nautobot-server migrate [app_name]</code> to apply those migration files to each app.  </li> <li>Finally, Start Nautobot Server after all the migration files are applied and all your affected apps are updated.  </li> </ol>"},{"location":"development/apps/migration/model-updates/dcim.html#add-location-fields-to-site-and-region-related-data-models","title":"Add Location Fields to Site and Region Related Data Models","text":"<p>If the <code>ExampleModel</code> currently has a <code>site</code> ForeignKey field but it does not have a <code>location</code> ForeignKey field, you will need to add the <code>location</code> field before any other migrations in this guide.</p> <p>Note</p> <p>You can skip this step only if your data models already have both a <code>site</code> (or <code>region</code>) field and a <code>location</code> field.</p> <pre><code># models.py\nclass ExampleModel(OrganizationalModel):\nsite = models.ForeignKey(\nto=\"dcim.Site\",\non_delete=models.PROTECT,\nblank=True,\nnull=True,\n)\nname = models.CharField(max_length=20, help_text=\"The name of this Example.\")\n...\n</code></pre> <p>DO NOT delete the <code>site</code> ForeignKey field yet. As a first step, just add a <code>ForeignKey</code> to <code>dcim.Location</code> with all other arguments identical to the existing <code>dcim.Site</code> <code>ForeignKey</code>:</p> <pre><code># models.py\nclass ExampleModel(OrganizationalModel):\nsite = models.ForeignKey(\nto=\"dcim.Site\",\non_delete=models.PROTECT,\nblank=True,\nnull=True,\n)\nlocation = models.ForeignKey(\nto=\"dcim.Location\",\non_delete=models.PROTECT,\nblank=True,\nnull=True,\n)\nname = models.CharField(max_length=20, help_text=\"The name of this Example.\")\n...\n</code></pre> <p>Make the migration file by running <code>nautobot-server makemigrations [app_name] -n [migration_name]</code>, for example:</p> <pre><code>nautobot-server makemigrations example_app -n add_location_field_to_example_model\n</code></pre>"},{"location":"development/apps/migration/model-updates/dcim.html#create-an-empty-migration-file-and-write-the-data-migration","title":"Create an Empty Migration File and Write the Data Migration","text":"<p>After you make sure that all <code>Site</code>/<code>Region</code> related models have <code>location</code> fields on them, it is time to migrate <code>Site</code>/<code>Region</code> references in your data to <code>Location</code>.</p> <p>Django doesn't automatically know how to do this; we have to create an empty migration file and write the migration script ourselves. This is also known as a data migration.</p> <p>Create a migration file first by running <code>nautobot-server makemigrations [app_name] -n [migration_file_name] --empty</code>, for example:</p> <pre><code>nautobot-server makemigrations example_app -n migrate_app_data_from_site_to_location --empty\n</code></pre> <p>The empty migration file will look like this with the only dependency being our previous migration that added a <code>location</code> ForeignKey field to our <code>ExampleModel</code>:</p> <pre><code># Generated by Django 3.2.17 on 2023-02-22 15:38\n# 0008_migrate_example_model_data_from_site_to_location\nfrom django.db import migrations\nclass Migration(migrations.Migration):\ndependencies = [\n(\"example_app\", \"0007_add_location_field_to_example_model\"),\n]\noperations = []\n</code></pre> <p>Warning</p> <p>First we need to add a mandatory dependency to a Nautobot 2.0 migration file, namely <code>(\"dcim\", \"0034_migrate_region_and_site_data_to_locations\")</code>. This dependent migration is very important as it creates the <code>Location</code> and <code>LocationType</code> records corresponding to the existing <code>Site</code>/<code>Region</code> records, which you will need to reference to migrate your data. Without it, your data migration might not work!</p> <pre><code>    dependencies = [\n# The dcim migration creates the Site Type and Region Type Locations that\n# your data models are migrating to. It has to be run **before** this migration.\n(\"dcim\", \"0034_migrate_region_and_site_data_to_locations\"),\n(\"example_app\", \"0007_add_location_field_to_example_model\"),\n]\n</code></pre> <p>Before we write the function that will perform the data migration, please note that Nautobot's <code>dcim</code> <code>0029</code> migration helpfully added and populated a Foreign Key called <code>migrated_location</code> on all <code>Region</code> and <code>Site</code> records. <code>migrated_location</code> stores the new location records that have the same names and other attributes as their respective <code>Sites</code>. That means all you need to do is query <code>ExampleModel</code> instances that have non-null <code>site</code> fields and null <code>location</code> fields and point the <code>location</code> field on your object to the site's <code>migrated_location</code> attribute, for example:</p> <pre><code>example_model.location = example_model.site.migrated_location\n</code></pre> <p>Below is what the function might look like:</p> <pre><code>def migrate_example_model_data_to_locations(apps, schema_editor):\n# Always use the provided `apps` to look up models\n# rather than importing them directly!\nExampleModel = apps.get_model(\"example_app\", \"examplemodel\")\nLocationType = apps.get_model(\"dcim\", \"locationtype\")\nLocation = apps.get_model(\"dcim\", \"location\")\n# Query ExampleModel instances with non-null site field\nexample_models = ExampleModel.objects.filter(\nsite__isnull=False, location__isnull=True\n).select_related(\"site\", \"location\")\nfor example_model in example_models:\n# Point the location field to the corresponding\n# \"Site\" LocationType Location stored in migrate_location\nexample_model.location = example_model.site.migrated_location\nExampleModel.objects.bulk_update(example_models, [\"location\"], 1000)\n</code></pre> <p>Finally, we need to add <code>migrations.RunPython</code> to the <code>operations</code> attribute in the migration class to execute this function when the migration is applied:</p> <pre><code>    operations = [\nmigrations.RunPython(\n# Execute the function\ncode=migrate_example_model_data_to_locations,\nreverse_code=migrations.operations.special.RunPython.noop,\n)\n]\n</code></pre> <p>The final migration file might look like this:</p> <pre><code># Generated by Django 3.2.17 on 2023-02-22 15:38\n# 0008_migrate_example_model_data_from_site_to_location\nfrom django.db import migrations\ndef migrate_example_model_data_to_locations(apps, schema_editor):\nExampleModel = apps.get_model(\"example_app\", \"examplemodel\")\nLocationType = apps.get_model(\"dcim\", \"locationtype\")\nLocation = apps.get_model(\"dcim\", \"location\")\n# Get \"Site\" LocationType\nsite_location_type = LocationType.objects.get(name=\"Site\")\n# Query ExampleModel instances with non-null site field\nexample_models = ExampleModel.objects.filter(\nsite__isnull=False, location__isnull=True\n).select_related(\"site\", \"location\")\nfor example_model in example_models:\n# Point the location field to the corresponding \"Site\" LocationType Location\n# with the same name.\nexample_model.location = example_model.site.migrated_location\nExampleModel.objects.bulk_update(example_models, [\"location\"], 1000)\nclass Migration(migrations.Migration):\ndependencies = [\n# The dcim migration creates the Site Type and Region Type Locations that\n# your data models are migrating to.\n# Therefore, It has to be run **before** this migration.\n(\"dcim\", \"0034_migrate_region_and_site_data_to_locations\"),\n(\"example_app\", \"0007_add_location_field_to_example_model\"),\n]\noperations = [\nmigrations.RunPython(\n# Execute the function\ncode=migrate_example_model_data_to_locations,\nreverse_code=migrations.operations.special.RunPython.noop,\n)\n]\n</code></pre>"},{"location":"development/apps/migration/model-updates/dcim.html#remove-siteregion-related-fields-from-migrated-data-models","title":"Remove Site/Region Related Fields from Migrated Data Models","text":"<p>After the data migration is successful, we need to remove the <code>site</code>/<code>region</code> fields from your data model so that Nautobot will be able to remove the <code>Site</code> and <code>Region</code> models. Note that we need to remove those attributes in a separate migration file from the previous one, as it's never a good practice to combine data migrations and schema migrations in the same file. You can do this by simply removing the <code>site</code>/<code>region</code> attributes from your model class:</p> <pre><code># models.py\nclass ExampleModel(OrganizationalModel):\n# note that site field is gone\nlocation = models.ForeignKey(\nto=\"dcim.Location\",\non_delete=models.PROTECT,\nblank=True,\nnull=True,\n)\nname = models.CharField(max_length=20, help_text=\"The name of this Example.\")\n...\n</code></pre> <p>After removing the <code>site</code> attribute, make the migration file by running <code>nautobot-server makemigrations [app_name] -n [migration_name]</code>, for example:</p> <pre><code>nautobot-server makemigrations example_app -n remove_site_field_from_example_model\n</code></pre> <p>The migration file might look like this:</p> <pre><code># Generated by Django 3.2.17 on 2023-02-22 17:09\n# 0009_remove_site_field_from_example_model.py\nfrom django.db import migrations\nclass Migration(migrations.Migration):\ndependencies = [\n('example_app', '0008_migrate_example_model_data_from_site_to_location'),\n]\noperations = [\nmigrations.RemoveField(\nmodel_name='examplemodel',\nname='site',\n),\n]\n</code></pre> <p>Important</p> <p>Before you apply this migration, you have to add a <code>run_before</code> attribute in this migration file to make sure that you remove <code>site</code>/<code>region</code> fields before <code>Site</code> and <code>Region</code> models themselves are removed. Without it, your migration files might be out of order and your app will not start.</p> <pre><code>    # Ensure this migration is run before the migration that removes Region and Site Models\nrun_before = [\n(\"dcim\", \"0040_remove_region_and_site\"),\n]\n</code></pre> <p>The final migration file might look like this:</p> <pre><code># Generated by Django 3.2.17 on 2023-02-22 17:09\n# 0009_remove_site_field_from_example_model.py\nfrom django.db import migrations\nclass Migration(migrations.Migration):\n# Ensure this migration is run before the migration that removes Region and Site Models\nrun_before = [\n(\"dcim\", \"0040_remove_region_and_site\"),\n]\ndependencies = [\n(\"example_app\", \"0008_migrate_example_model_data_from_site_to_location\"),\n]\noperations = [\nmigrations.RemoveField(\nmodel_name=\"examplemodel\",\nname=\"site\",\n),\n]\n</code></pre> <p>Apply the migration files by running <code>nautobot-server migrate [app_name]</code>, for example:</p> <pre><code>nautobot-server migrate example_app\n</code></pre>"},{"location":"development/apps/migration/model-updates/extras.html","title":"Extras","text":""},{"location":"development/apps/migration/model-updates/extras.html#replace-role-related-models-with-generic-role-model","title":"Replace Role Related Models with Generic Role Model","text":"<ol> <li>Narrowly defined role models including <code>dcim.DeviceRole</code>, <code>dcim.RackRole</code> and <code>ipam.Role</code> are replaced by a generic <code>extras.Role</code> model.</li> <li>If any of your models are using the replaced role models, it is required for you to remove the <code>role</code> field from your model and add either <code>nautobot.extras.models.roles.RoleModelMixin</code> or <code>nautobot.extras.models.roles.RoleRequiredRoleModelMixin</code> to your model class definition. <code>RoleModelMixin</code> adds a nullable <code>role</code> field whereas <code>RoleRequiredRoleModelMixin</code> adds a required <code>role</code> field.</li> <li>Please go here to check out how the <code>extras.Role</code> model works in v2.0.</li> </ol>"},{"location":"development/apps/migration/model-updates/extras.html#updates-to-job-and-job-related-models","title":"Updates to Job and Job related models","text":""},{"location":"development/apps/migration/model-updates/extras.html#job-model-changes","title":"Job Model Changes","text":"<p>See details about the fundamental changes to <code>Job</code> Model here</p>"},{"location":"development/apps/migration/model-updates/extras.html#job-logging-changes","title":"Job Logging Changes","text":"<ol> <li>Job logging is now handled by a logger off the Job itself and has a function for each level to send the message (info, warning, debug, etc).</li> <li><code>JobResult.log</code> no longer accepts a <code>logger</code> arg and app/job authors should transition to using the Job's logger methods instead of directly calling <code>JobResult.log</code>.</li> <li>There is no longer a <code>log_success</code> or <code>log_failure</code> function. Checkout the changes in detail here</li> </ol>"},{"location":"development/apps/migration/model-updates/extras.html#jobresult-model-changes","title":"JobResult Model Changes","text":"<p><code>JobResult</code> no longer needs a <code>job_id</code>, <code>user</code>, or <code>obj_type</code> passed to it. It now needs a <code>name</code>, <code>task_name</code>, and a <code>worker</code>. See here for details.</p>"},{"location":"development/apps/migration/model-updates/extras.html#update-customfield-computedfield-and-relationship","title":"Update CustomField, ComputedField, and Relationship","text":"<ol> <li>In accordance with the removal of <code>slug</code> field in Nautobot v2.0, <code>CustomField</code>, <code>ComputeField</code> and <code>Relationship</code>'s <code>slug</code> field is replaced by the <code>key</code> field which contains a GraphQL-safe string that is used exclusively in the API and GraphQL.</li> <li>Removed <code>name</code> field from <code>CustomField</code> model and renamed <code>name</code> field to <code>label</code> on <code>Relationship</code> model.</li> <li>Their <code>label</code> fields are now used for display purposes only in the UI.</li> <li>Please go to their respective documentations for more information CustomField, ComputedField, and Relationship.</li> </ol>"},{"location":"development/apps/migration/model-updates/global.html","title":"Global","text":""},{"location":"development/apps/migration/model-updates/global.html#replace-the-usage-of-slugs","title":"Replace the Usage of Slugs","text":"<p>Slugs were used to identify unique objects in the database for various models in Nautobot v1.x and they are now replaced by Natural Keys. The <code>slug</code> field can be safely deleted as long as your models are derived from <code>BaseModel</code> that automatically supports the following natural key APIs. For a more comprehensive guideline on how Natural Keys in Nautobot v2.0 work, please go to the Natural Key documentation.</p>"},{"location":"development/apps/migration/model-updates/ipam.html","title":"IPAM","text":""},{"location":"development/apps/migration/model-updates/ipam.html#replace-aggregate-with-prefix","title":"Replace Aggregate with Prefix","text":"<p><code>Aggregate</code> models are removed in v2.0 and all existing <code>Aggregate</code> instances are migrated to <code>Prefix</code> with type set to \"Container\". So your models and data that are associated with <code>Aggregate</code> via ForeignKey or ManyToMany relationships are now required to be migrated to <code>Prefix</code>. Please go here for this change and its potential impact on other models.</p>"},{"location":"development/apps/migration/model-updates/ipam.html#introduction-of-namespace","title":"Introduction of Namespace","text":"<p>A Namespace groups together a set of related but distinct VRFs, Prefixes, and IP addresses. Within a given Namespace, only a single record may exist for each distinct VRF, Prefix, or IP address. Although such a record may be used in multiple locations within your network, such as a VRF being configured on multiple Devices, or a virtual IP address being assigned to multiple Interfaces or Devices, it is fundamentally a single network object in these cases, and Nautobot models this data accordingly. Check out the model documentation here</p>"},{"location":"development/apps/migration/model-updates/ipam.html#concrete-relationship-between-prefix-and-ip-address","title":"Concrete Relationship between Prefix and IP Address","text":"<p>IP addresses now have a concrete relationship with its parent Prefix. <code>IPAddress.parent</code> now refers to the parent prefix and <code>Prefix.ip_addresses</code> refers to the child ips.`</p>"},{"location":"development/apps/migration/model-updates/ipam.html#concrete-relationship-between-prefix-and-self","title":"Concrete Relationship between Prefix and Self","text":"<p>Each Prefix now has a concrete parent/child relationship with related Prefixes. <code>Prefix.parent</code> refers to its parent prefix and <code>Prefix.children</code> refers to all its child Prefixes.</p>"},{"location":"development/apps/migration/model-updates/ipam.html#convert-relationship-type-between-prefix-and-vrf-to-many-to-many","title":"Convert Relationship Type between Prefix and VRF to Many to Many","text":"<p>Prefixes now no longer have a ForeignKey to VRF. Instead, the Many to Many relationship is now defined on the VRF side as <code>VRF.prefixes</code>. VRF is also no longer a uniqueness constraint on the Prefix. Namespace is used instead. Additionally, VRF is no longer assigned directly to an IPAddress but is now derived from any association to the parent Prefix.</p>"},{"location":"development/core/index.html","title":"Nautobot Development","text":"<p>Nautobot is maintained as a GitHub project under the Apache 2 license. Users are encouraged to submit GitHub issues for feature requests and bug reports.</p>"},{"location":"development/core/index.html#governance","title":"Governance","text":"<p>Nautobot is a community-based Free Open Source Software (FOSS) project sponsored by Network to Code (NTC). As a network automation solution provider, Network to Code works with its clients around the world to craft and build network automation strategies and solutions, often tightly integrated with Nautobot serving as a Source of Truth and Network Automation Platform. The direction of this project will be shaped by the community as well as by input from NTC customers; independent of where requests come from, contributors will need to follow the Contributing Guidelines.</p> <p>The Nautobot Core Team is responsible for the direction and execution of the code that gets committed to the project.</p>"},{"location":"development/core/index.html#project-structure","title":"Project Structure","text":"<p>Nautobot components are arranged into functional subsections called apps (a carryover from Django vernacular). Each app holds the models, views, and templates relevant to a particular function:</p> <ul> <li><code>circuits</code>: Communications circuits and providers (not to be confused with power circuits)</li> <li><code>dcim</code>: Datacenter infrastructure management (locations, racks, and devices)</li> <li><code>extras</code>: Additional features not considered part of the core data model</li> <li><code>ipam</code>: IP address management (VRFs, prefixes, IP addresses, and VLANs)</li> <li><code>tenancy</code>: Tenants (such as customers) to which Nautobot objects may be assigned</li> <li><code>users</code>: Authentication and user preferences</li> <li><code>utilities</code>: Resources which are not user-facing (extendable classes, etc.)</li> <li><code>virtualization</code>: Virtual machines and clusters</li> </ul>"},{"location":"development/core/index.html#release-management","title":"Release Management","text":""},{"location":"development/core/index.html#roadmap","title":"Roadmap","text":"<p>In order to best understand how to contribute and where to open an issue or discussion, you should understand how work moves from idea to feature and how the roadmap is structured.</p> <p>There are three major \"buckets\" of work to be aware of within the lifecycle of getting contributions committed and released:</p> <ul> <li>Current - Work that is planned for the release currently being developed.</li> <li>Near Term - Work that is planned for one of the next two releases after the one currently being developed.</li> <li>Future - Work that needs more discussion and/or will be planned for a version three or more releases later.</li> </ul> <p>The following provides more detail on these.</p>"},{"location":"development/core/index.html#current","title":"Current","text":"<ul> <li>Current tickets (GitHub issues) that are being worked on for the current release or bugs that are found and will be fixed in the current release.</li> <li>Uses <code>current</code> label on GitHub.</li> <li>The GitHub Release Milestone will track items for the current release.</li> </ul>"},{"location":"development/core/index.html#near-term","title":"Near Term","text":"<ul> <li>Current tickets (GitHub issues) that are estimated to complete in one of the next two releases, e.g. 3-6 months to get into core, if accepted.</li> <li>GitHub discussions are used to create one or more GitHub issues when and if something moves from Future to Near Term.</li> <li>Uses <code>near-term</code> label on GitHub.</li> </ul>"},{"location":"development/core/index.html#future","title":"Future","text":"<ul> <li>Work that is for 3+ releases away or work that needs more free form discussions and brainstorming to better scope future bodies of work.</li> <li>Estimated 7+ months to get into core, if accepted.</li> <li>GitHub Discussions are used for collaborating on future work.</li> <li>If a GitHub issue is opened and is deemed that it is out of scope for Current or Near Term, it will be converted into a GitHub Discussion.</li> <li>GitHub Discussions will be closed when the topic/feature moves from Future to Near Term.</li> </ul> <p>Over time, the process of moving work from Future to Near Term to Current will continue to get further refined.</p> <p>Please read through the Nautobot Roadmap so you can understand the current backlog and roadmap and which items are already in Current, Near Term, and Future.</p>"},{"location":"development/core/index.html#versioning","title":"Versioning","text":"<p>Nautobot adheres to the Semantic Versioning (\"SemVer\") strategy, which gives us versions of the format <code>X.Y.Z</code>.</p> <ul> <li><code>X</code> is the major release number. Contains breaking changes or switching default behavior and shadowing legacy/deprecated behavior. May contain new functionality and bug fixes as well.</li> <li><code>Y</code> is the minor release number. Contains new functionality and bug fixes. May introduce deprecation warnings but will not remove or change default behavior.</li> <li><code>Z</code> is the patch release number. Will only contain bug fixes, security updates, and small feature enhancements aimed at addressing user-experience bugs.</li> </ul> <p>For more information, please visit SemVer.org.</p>"},{"location":"development/core/index.html#release-schedule","title":"Release Schedule","text":"<p>Nautobot aims to publish against following release schedule:</p> <ul> <li>One (1) major release per year</li> <li>Three (3) minor releases per year</li> <li>At minimum one (1) patch release every two weeks or more frequently as needed.</li> </ul> <p>Using <code>2.0</code> as a release cycle example, that would mean we would publish:</p> <ul> <li><code>2.0.z</code></li> <li><code>2.1.z</code></li> <li><code>2.2.z</code></li> <li><code>2.3.z</code></li> </ul> <p>After the third minor release (<code>2.3.0</code>), we would plan for another major release, in this case <code>3.0.0</code>.</p> <p>We estimate non-patch releases will be released quarterly but dates are not set in stone. Dates and notifications will occur by updating the GitHub Release Milestone and on Slack.</p> <p>An example of the release timeline for the <code>2.0</code> release cycle:</p> <p></p>"},{"location":"development/core/index.html#patch-releases","title":"Patch Releases","text":"<p>Specifics around patch releases:</p> <ul> <li>Will be released every two weeks on Mondays, starting March 7th, 2022.</li> <li>Will be focused on bugs, security vulnerabilities, backports, and other issues as they arise.</li> <li>Will not introduce significant new functionality except as needed to address a bug.</li> <li>Will not be released if there have been no new merges to <code>develop</code> since the previous release.</li> <li>Should not be considered a mandatory upgrade: If it does not fix a bug or issue you are experiencing, you should not feel the need to upgrade right away.</li> <li>May happen a day or two after the Monday schedule if Monday is an observed holiday. We would like to ensure full team availability post-release.</li> </ul> <p>Should a patch release contain a fix for security vulnerability(s) (i.e. CVE(s)), data-loss bug(s), or other critical issue(s), we will:</p> <ul> <li>Release a new patch release as soon as the fix has been identified, implemented, and thoroughly tested. No waiting for the next regularly scheduled release date.</li> <li>Bring special attention to these releases in our notification channels.</li> <li>Strongly urge you to upgrade to address these more serious issues as soon as possible.</li> <li>Not adjust any subsequent release dates (the next scheduled release will still occur as scheduled).</li> </ul>"},{"location":"development/core/index.html#maintenance-release-ltm","title":"Maintenance Release (LTM)","text":""},{"location":"development/core/index.html#overview","title":"Overview","text":"<p>For the sake of abundance in clarity, we are officially naming what is sometimes called an \"LTS\" release of software a \"Maintenance\" or \"Long Term Maintenance\" (LTM) release of Nautobot. The mindset is that we always aim to release stable software and in fact label the latest releases of the current major version of Nautobot as \"stable\" (as seen in our documentation and in our Docker container tags).</p> <p>New users who may choose to install an \"LTS\" release because it is assumed to be more stable, may almost immediately be presented with breaking changes upon their next upgrade to a \"stable\" Nautobot release. We want to avoid any confusion that may arise between the term \"stable\" representing our latest stable release compared to \"long term support\" which is commonly interpreted to represent a stable release.</p> <p>Our LTM release will be the last minor version of the previous major release train. At the time of this writing <code>1.6</code> will be our maintenance release train of Nautobot for the <code>1.y</code> release cycle. Version 1 of Nautobot had an extended release cycle as it was our first major release of the platform. Going forward it can be expected that the <code>x.3</code> version of the platform will be the maintenance train of any major version.</p> <p>With this schedule you can expect a few things per major/minor release:</p> <ul> <li><code>x.0.0</code><ul> <li>Introduce breaking changes.</li> <li>Changing default behavior for user interfaces, APIs, and functions.</li> <li>Removal of previous REST API versions and possibly some functions and classes.</li> </ul> </li> <li><code>x.1.z</code><ul> <li>Typical minor release, adding features, bug fixes, potential deprecations.</li> </ul> </li> <li><code>x.2.z</code><ul> <li>Removal of the remainder of deprecated functions, classes introduced in the previous major release (ex: only if deprecated in <code>1.y</code>, removed in <code>2.2</code>).</li> </ul> </li> <li><code>x.3.z</code><ul> <li>Maintenance release candidate.</li> <li>Features may be added in <code>x.3.0</code> but nothing further in this cycle.</li> </ul> </li> </ul> <p>A release will only be marked as \"In Maintenance\" when the next major release is published. Active bug fixes will be applied to a <code>x.3</code> until that time. Once a new major release has been published, the following will apply to the <code>x.3</code> codebase:</p> <ul> <li>Dependencies are frozen/pinned to a specific release; will only be upgraded if addressing a security vulnerability.</li> <li>Data loss and CVE-related fixes will be back ported from the new active release cycle. All other fixes will be back ported on a case-by-case basis.</li> <li>Patch releases for this phase will be on an as-needed basis.</li> <li>Core features from newer releases will never be back ported. In some cases, developer-centric features that ease the transition to the next major release train may be back ported if it is determined that they will alleviate transitions related to backwards incompatible changes.</li> </ul> <p>A maintenance release will be actively maintained until the next maintenance release is available, roughly a year from the launch of the previous one.</p>"},{"location":"development/core/index.html#launch-of-maintenance-release-schedule-as-an-example","title":"Launch of Maintenance Release Schedule (as an Example)","text":"<p>At the time of this writing we are in the active development of Nautobot 1.6. This will be our last minor release of the v1 series of releases and therefore become our first \"Long Term Maintenance\" (LTM) release of Nautobot. We will be actively applying the normal category of bug fixes (including UI tweaks, display bugs, etc.) to this release train until the release of Nautobot 2.0.</p> <p>Once we launch Nautobot 2.0, 1.6 will go into maintenance mode and be considered LTM, continuing to receive data loss and CVE-related fixes. At that time we will encourage users to migrate to v2 as they are ready. Nautobot 1.6 will continue to receive such fixes until the release of Nautobot 2.3, where we will end the maintenance of Nautobot 1.6 and it will formally become \"End of Life\" (EOL). Nautobot 2.3 will then become the LTM release until Nautobot 3.3 is published the following year.</p> <p>If for any reason the next maintenance release is delayed, we will continue to support the current maintenance release. There is no time limitation for this. We want to ensure our users always have a maintenance release available.</p>"},{"location":"development/core/index.html#deprecation-policy","title":"Deprecation Policy","text":"<p>Functionality, features, or Python primitives that have been deprecated will be planned to be removed in the following major train's <code>x.2</code> release (ex: if deprecated in <code>1.y</code>, removed in <code>2.2</code>).</p> <p>To provide assistance for knowing what features and functionality have been deprecated, additional transition features are as follows:</p> <ul> <li>Python primitives that have been deprecated will emit a <code>DeprecationWarning</code>, along with a message to which objects will be replacing them. The new objects may not be a direct replacement so please check the release notes and documentation for more migration information.</li> <li>Nautobot 1.2 introduced REST APIs versioning. Newer versions of the API become the default behavior on a major release (<code>x.0.0</code>) and older versions will be removed. For more information, see the Versioning section of our REST API documentation.</li> <li>We will drop support for Python versions on a case-by-case basis: A patch release may drop support for a Python version if a security update of a critical dependency would require split or conditional support. For example, if the dependency has not published a vulnerability fix for an older Python version, we will drop support at that time. All other cases will be documented and will tend to occur on minor release boundaries.</li> <li>Any deprecation notice (announcement or removal) will be available in our release notes.</li> </ul> <p>Backwards-Incompatible Changes and Deprecations</p> <p>Deprecated REST APIs will be removed in a <code>x.0.0</code> release. Deprecated REST APIs are kept intact during the same major release to simplify migrations to newer minor releases, however even subtle breaking changes in an <code>x.0.0</code> release can cause breaking changes to previous API versions. Therefore it is preferred to remove these API versions entirely to prevent accidental errors when their exact behavior cannot be kept intact.  Types of breaking REST API changes include, but are not limited to, renaming of fields or filters, removing or collapsing of data models, and changing object relationships. This will also mean we will not publish deprecated APIs for models that no longer exist.</p> <p>For example, in the upcoming <code>2.0.0</code> release we plan to collapse <code>Site</code> and <code>Region</code> to be <code>LocationType</code>s. This means there would no longer be a <code>site</code> property on objects such as <code>Device</code> as well as no <code>/api/dcim/sites</code> or <code>/api/dcim/regions</code> API endpoints.</p> <p>Previously deprecated Python APIs may still be kept around on a case-by-case basis if adapting those changes are minimal, but in the example above, <code>.site</code> will no longer be an available property on <code>Device</code>.</p> <p>We will document in major releases how breaking changes will affect existing APIs and Python primitives. Backwards-compatible changes would still be kept around following the normal deprecation policy.</p>"},{"location":"development/core/index.html#communication","title":"Communication","text":"<p>Communication among the contributors should always occur via public channels. The following outlines the best ways to communicate and engage on all things Nautobot.</p>"},{"location":"development/core/index.html#slack","title":"Slack","text":"<ul> <li>#nautobot on Network to Code Slack - Good for quick chats. Avoid any discussion that might need to be referenced later on, as the chat history is not retained long.</li> </ul>"},{"location":"development/core/index.html#github","title":"GitHub","text":"<ul> <li>GitHub issues - All feature requests, bug reports, and other substantial changes should be documented in an issue.</li> <li>GitHub discussions - The preferred forum for general discussion and support issues. Ideal for shaping a feature request prior to submitting an issue.</li> </ul> <p>GitHub's discussions are the best place to get help or propose rough ideas for new functionality. Their integration with GitHub allows for easily cross- referencing and converting posts to issues as needed. There are several categories for discussions:</p> <ul> <li>General - General community discussion.</li> <li>Ideas - Ideas for new functionality that isn't yet ready for a formal   feature request. These ideas are what will be in scope to review when moving work from Future to Near Term as stated in the previous section.</li> <li>Q&amp;A - Request help with installing or using Nautobot.</li> </ul>"},{"location":"development/core/index.html#contributing","title":"Contributing","text":"<p>We welcome many forms of contributions to Nautobot. While we understand most contributions will commonly come from developers, we encourage others to contribute in the form of docs, tutorials, and user guides. If you have other ideas for contributing, don't hesitate to open an issue or have a discussion in one of the forums above.</p> <p>Please also take a chance to look at our Wiki on GitHub to review any specifics as to how we define and scope work as a community.</p>"},{"location":"development/core/index.html#reporting-bugs","title":"Reporting Bugs","text":"<ul> <li> <p>First, ensure that you're running the latest stable version   of Nautobot. If you're running an older version, it's possible that the bug has   already been fixed.</p> </li> <li> <p>Next, check the GitHub issues list   to see if the bug you've found has already been reported. If you think you may   be experiencing a reported issue that hasn't already been resolved, please   click \"add a reaction\" in the top right corner of the issue and add a thumbs   up (+1). You might also want to add a comment describing how it's affecting your installation. This will allow us to prioritize bugs based on how many users are affected.</p> </li> <li> <p>When submitting an issue, please be as descriptive as possible. Be sure to   provide all information request in the issue template, including:</p> <ul> <li>The environment in which Nautobot is running</li> <li>The exact steps that can be taken to reproduce the issue</li> <li>Expected and observed behavior</li> <li>Any error messages generated</li> <li>Screenshots (if applicable)</li> </ul> </li> <li> <p>Please avoid prepending any sort of tag (e.g. \"[Bug]\") to the issue title.   The issue will be reviewed by a maintainer after submission and the appropriate   labels will be applied for categorization.</p> </li> <li> <p>Keep in mind that bugs are prioritized based on their severity and how much   work is required to resolve them. It may take some time for someone to address   your issue.</p> </li> </ul> <p>Bugs will follow our published workflow from inbound triage to ultimate terminal state, whether accepted or closed:</p> <p></p>"},{"location":"development/core/index.html#opening-feature-requests","title":"Opening Feature Requests","text":"<ul> <li> <p>First, check the GitHub issues   list and   Discussions to see if the   feature you're requesting is already listed. You can greater visibility on the   committed by looking at the Nautobot   Roadmap (Be sure to search   closed issues as well, since some feature requests have not have been accepted.)   If the feature you'd like to see has already been requested and is open, click   \"add a reaction\" in the top right corner of the issue and add a thumbs up (+1).   This ensures that the issue has a better chance of receiving attention. Also   feel free to add a comment with any additional justification for the feature.   (However, note that comments with no substance other than a \"+1\" will be deleted. Please use GitHub's reactions feature to indicate your support.)</p> </li> <li> <p>Before filing a new feature request, consider starting with a GitHub   Discussion. Feedback you receive there will help validate and shape the proposed feature before filing a formal issue. If the feature request does not get accepted into the current or near term backlog, it will get converted to a Discussion anyway.</p> </li> <li> <p>Good feature requests are very narrowly defined. Be sure to thoroughly   describe the functionality and data model(s) being proposed. The more effort you put into writing a feature request, the better its chance is of being   implemented. Overly broad feature requests will be closed.</p> </li> <li> <p>When submitting a feature request on GitHub, be sure to include all   information requested by the issue template, including:</p> <ul> <li>A detailed description of the proposed functionality</li> <li>A use case for the feature; who would use it and what value it would add to Nautobot</li> <li>A rough description of changes necessary to the database schema (if applicable)</li> <li>Any third-party libraries or other resources which would be involved</li> <li>Please avoid prepending any sort of tag (e.g. \"[Feature]\") to the issue title.</li> </ul> </li> </ul> <p>The issue will be reviewed by a moderator after submission and the appropriate labels will be applied for categorization.</p> <p>Feature requests will follow our published workflow from inbound triage to ultimate terminal state, whether accepted or closed:</p> <p></p>"},{"location":"development/core/index.html#submitting-pull-requests","title":"Submitting Pull Requests","text":"<ul> <li> <p>If you're interested in contributing to Nautobot, be sure to check out our   getting started   documentation for tips on setting up your development environment.</p> </li> <li> <p>It is recommended to open an issue before starting work on a pull request, and discuss your idea with the Nautobot maintainers before beginning work. This will help prevent wasting time on something that we might not be able to implement. When suggesting a new feature, also make sure it won't conflict with any work that's already in progress.</p> </li> <li> <p>Once you've opened or identified an issue you'd like to work on, ask that it   be assigned to you so that others are aware it's being worked on. A maintainer   will then mark the issue as \"accepted.\"</p> </li> <li> <p>If you followed the project guidelines, have ample tests, code quality, you will first be acknowledged for your work. So, thank you in advance! After that, the PR will be quickly reviewed to ensure that it makes sense as a contribution to the project, and to gauge the work effort or issues with merging into current. If the effort required by the core team isn\u2019t trivial, it\u2019ll likely still be a few weeks before it gets thoroughly reviewed and merged, thus it won't be uncommon to move it to near term with a <code>near-term</code> label. It will just depend on the current backlog.</p> </li> <li> <p>All code submissions should meet the following criteria (CI will enforce   these checks):</p> <ul> <li>Python syntax is valid</li> <li>All unit tests pass successfully</li> <li>PEP 8 compliance is enforced, with the exception that lines may be   greater than 80 characters in length</li> <li>At least one changelog fragment has   been included in the feature branch</li> </ul> </li> </ul>"},{"location":"development/core/index.html#creating-changelog-fragments","title":"Creating Changelog Fragments","text":"<p>All pull requests to <code>next</code> or <code>develop</code> must include a changelog fragment file in the <code>./changes</code> directory. To create a fragment, use your github issue number and fragment type as the filename. For example, <code>2362.added</code>. Valid fragment types are:</p> <ul> <li><code>added</code></li> <li><code>changed</code></li> <li><code>dependencies</code></li> <li><code>deprecated</code></li> <li><code>documentation</code></li> <li><code>fixed</code></li> <li><code>housekeeping</code></li> <li><code>removed</code></li> <li><code>security</code></li> </ul> <p>The change summary is added to the file in plain text. Change summaries should be complete sentences, starting with a capital letter and ending with a period, and be in past tense. Each line of the change fragment will generate a single change entry in the release notes. Use multiple lines in the same file if your change needs to generate multiple release notes in the same category. If the change needs to create multiple entries in separate categories, create multiple files.</p> <p>Example</p> <p>Wrong changes/1234.fixed<pre><code>fix critical bug in documentation\n</code></pre></p> <p>Right changes/1234.fixed<pre><code>Fixed critical bug in documentation.\n</code></pre></p> <p>Multiple Entry Example</p> <p>This will generate 2 entries in the <code>fixed</code> category and one entry in the <code>changed</code> category.</p> changes/1234.fixed<pre><code>Fixed critical bug in documentation.\nFixed release notes generation.\n</code></pre> changes/1234.changed<pre><code>Changed release notes generation.\n</code></pre>"},{"location":"development/core/application-registry.html","title":"Application Registry","text":"<p>The registry is an in-memory data structure which houses various application-wide parameters, such as the list of enabled plugins. It is not exposed to the user and is not intended to be modified by any code outside of Nautobot core.</p> <p>The registry behaves essentially like a Python dictionary, with the notable exception that once a store (key) has been declared, it cannot be deleted or overwritten. The value of a store can, however, be modified; e.g. by appending a value to a list. Store values generally do not change once the application has been initialized.</p> <p>The registry can be inspected by importing <code>registry</code> from <code>nautobot.extras.registry</code>. Page templates that need access to the registry can use the <code>registry</code> template tag to load it into the template context, for example:</p> <pre><code>&lt;!-- Load the \"registry\" template tag library --&gt;\n{% load registry %}\n&lt;!-- Load the registry into the template context as variable \"registry\"--&gt;\n{% registry %}\n&lt;!-- Use the registry variable in the template --&gt;\n{{ registry.datasource_contents }}\n</code></pre>"},{"location":"development/core/application-registry.html#stores","title":"Stores","text":""},{"location":"development/core/application-registry.html#datasource_contents","title":"<code>datasource_contents</code>","text":"<p>Definition of data types that can be provided by data source models (such as Git repositories). Implemented as a dictionary mapping the data source model name to a list of the types of data that it may contain and callback functions associated with those data types. The default mapping in Nautobot is currently:</p> <pre><code>{\n\"extras.gitrepository\": [\nDatasourceContent(\nname='config contexts',\ncontent_identifier='extras.configcontext',\nicon='mdi-code-json',\ncallback=extras.datasources.git.refresh_git_config_contexts,\n),\nDatasourceContent(\nname='jobs',\ncontent_identifier='extras.job',\nicon='mdi-script-text',\ncallback=extras.datasources.git.refresh_git_jobs,\n),\nDatasourceContent(\nname='export templates',\ncontent_identifier='extras.exporttemplate',\nicon='mdi-database-export',\ncallback=extras.datasources.git.refresh_git_export_templates,\n),\n]\n}\n</code></pre> <p>Plugins may extend this dictionary with additional data sources and/or data types by calling <code>extras.registry.register_datasource_contents()</code> as desired.</p>"},{"location":"development/core/application-registry.html#homepage_layout","title":"<code>homepage_layout</code>","text":"<p>Added in version 1.2.0</p> <p>A dictionary holding information about the layout of Nautobot's homepage. Each app may register homepage panels and items using objects from the generic app class. Each object has a weight attribute allowing the developer to define the position of the object.</p> <pre><code>{\n\"panels\": {\n\"Panel 1\" {\n\"weight\": 100,\n\"items\": {\n\"Item 1\": {\n\"description\": \"This is item 1\",\n\"link\": \"example.link_1\"\n\"model\": Example,\n\"permissions\": \"example.view_link_1\",\n\"weight\": 100,\n},\n\"Item 2\": {\n\"description\": \"This is item 2\",\n\"link\": \"example.link_2\"\n\"model\": Example,\n\"permissions\": \"example.view_link_2\",\n\"weight\": 200,\n}\n}\n}\n\"Panel 2\": {\n\"weight\": 200,\n\"custom_template\": \"panel_example.html\",\n\"custom_data\": {\n\"example\": example_callback_function,\n},\n}\n}\n}\n</code></pre>"},{"location":"development/core/application-registry.html#model_features","title":"<code>model_features</code>","text":"<p>A dictionary of particular features (e.g. custom fields) mapped to the Nautobot models which support them, arranged by app. For example:</p> <pre><code>{\n'custom_fields': {\n'circuits': ['provider', 'circuit'],\n'dcim': ['location', 'rack', 'devicetype', ...],\n...\n},\n'webhooks': {\n...\n},\n...\n}\n</code></pre> <p>For more information visit model-features.</p>"},{"location":"development/core/application-registry.html#nav_menu","title":"<code>nav_menu</code>","text":"<p>Added in version 1.1.0</p> <p>Navigation menu items provided by Nautobot applications. Each app may register its navbar configuration inside of the <code>nav_menu</code> dictionary using <code>navigation.py</code>. Tabs are stored in the top level moving down to groups, items and buttons. Tabs, groups and items can be modified by using the key values inside other application and plugins. The <code>nav_menu</code> dict should never be modified directly.</p> <p>Example:</p> <pre><code>{\n\"tabs\": {\n\"tab_1\": {\n\"weight\": 100,\n\"permissions\": [],\n\"groups\": {\n\"group_1\":{\n\"weight\": 100,\n\"permissions\": [],\n\"items\": {\n\"item_link_1\": {\n\"link_text\": \"Item 1\",\n\"weight\": 100,\n\"permissions\": [],\n\"buttons\": {\n\"button_1\": {\n\"button_class\": \"success\",\n\"icon_class\": \"mdi-plus-thick\",\n\"link\": \"button_link_1\",\n\"weight\": 100,\n\"permissions\": [],\n},\n\"button_2\": {\n\"button_class\": \"success\",\n\"icon_class\": \"mdi-plus-thick\",\n\"link\": \"button_link_2\",\n\"weight\": 200,\n\"permissions\": [],\n}\n}\n},\n\"item_link_2\": {\n\"link_text\": \"Item 2\",\n\"weight\": 200,\n\"permissions\": [],\n\"buttons\": {\n\"button_1\": {\n\"button_class\": \"success\",\n\"icon_class\": \"mdi-plus-thick\",\n\"link\": \"button_link_1\",\n\"weight\": 100,\n\"permissions\": [],\n},\n\"button_2\": {\n\"button_class\": \"success\",\n\"icon_class\": \"mdi-plus-thick\",\n\"link\": \"button_link_2\",\n\"weight\": 200,\n\"permissions\": [],\n}\n}\n},\n}\n}\n}\n}\n}\n}\n</code></pre>"},{"location":"development/core/application-registry.html#plugin_custom_validators","title":"<code>plugin_custom_validators</code>","text":"<p>Plugin custom validator classes that provide additional data model validation logic. Implemented as a dictionary mapping data model names to a list of <code>CustomValidator</code> subclasses, for example:</p> <pre><code>{\n'circuits.circuit': [CircuitMustHaveDescriptionValidator],\n'dcim.location': [LocationMustHaveTenantValidator, LocationNameMustIncludeCountryCodeValidator],\n}\n</code></pre>"},{"location":"development/core/application-registry.html#plugin_graphql_types","title":"<code>plugin_graphql_types</code>","text":"<p>List of GraphQL Type objects that will be added to the GraphQL schema. GraphQL objects that are defined in a plugin will be automatically registered into this registry. An example:</p> <pre><code>[\n&lt;DjangoObjectType&gt;, &lt;DjangoObjectType&gt;, &lt;OptimizedDjangoObjectType&gt;\n]\n</code></pre> <p>Removed in version 2.0.0</p> <p>The <code>plugin_jobs</code> registry has been replaced by <code>nautobot.core.celery.register_jobs</code> which should be called at import time by any plugin that provides jobs.</p>"},{"location":"development/core/application-registry.html#plugin_template_extensions","title":"<code>plugin_template_extensions</code>","text":"<p>Plugin content that gets embedded into core Nautobot templates. The store comprises Nautobot models registered as dictionary keys, each pointing to a list of applicable template extension classes that exist. An example:</p> <pre><code>{\n'dcim.location': [\n&lt;TemplateExtension&gt;, &lt;TemplateExtension&gt;, &lt;TemplateExtension&gt;,\n],\n'dcim.rack': [\n&lt;TemplateExtension&gt;, &lt;TemplateExtension&gt;,\n],\n}\n</code></pre>"},{"location":"development/core/best-practices.html","title":"Best Practices","text":"<p>While there are many different development interfaces in Nautobot that each expose unique functionality, there are a common set of a best practices that have broad applicability to users and developers alike. This includes elements of writing Jobs, Plugins, and scripts for execution through <code>nautobot-server nbshell</code>.</p> <p>The below best practices apply to test code as well as feature code, and there are additional test-specific best practices to be aware of as well.</p>"},{"location":"development/core/best-practices.html#base-classes","title":"Base Classes","text":"<p>For models that support change-logging, custom fields, and relationships (which includes all subclasses of <code>OrganizationalModel</code> and <code>PrimaryModel</code>), the \"Full-featured models\" base classes below should always be used. For less full-featured models, refer to the \"Minimal models\" column instead.</p> Feature Full-featured models Minimal models FilterSets <code>NautobotFilterSet</code> <code>BaseFilterSet</code> Object create/edit forms <code>NautobotModelForm</code> <code>BootstrapMixin</code> Object bulk-edit forms <code>NautobotBulkEditForm</code> <code>BootstrapMixin</code> Table filter forms <code>NautobotFilterForm</code> <code>BootstrapMixin</code> Read-only serializers <code>BaseModelSerializer</code> <code>BaseModelSerializer</code> Nested serializers <code>WritableNestedSerializer</code> <code>WritableNestedSerializer</code> All other serializers <code>NautobotModelSerializer</code> <code>ValidatedModelSerializer</code> API View Sets <code>NautobotModelViewSet</code> <code>ModelViewSet</code>"},{"location":"development/core/best-practices.html#data-model-best-practices","title":"Data Model Best Practices","text":""},{"location":"development/core/best-practices.html#model-existence-in-the-database","title":"Model Existence in the Database","text":"<p>A common Django pattern is to check whether a model instance's primary key (<code>pk</code>) field is set as a proxy for whether the instance has been written to the database or whether it exists only in memory. Because of the way Nautobot's UUID primary keys are implemented, this check will not work as expected because model instances are assigned a UUID in memory at instance creation time, not at the time they are written to the database (when the model's <code>save()</code> method is called). Instead, for any model which inherits from <code>nautobot.core.models.BaseModel</code>, you should check an instance's <code>present_in_database</code> property which will be either <code>True</code> or <code>False</code>.</p> <p>Instead of:</p> <pre><code>if instance.pk:\n# Are we working with an existing instance in the database?\n# Actually, the above check doesn't tell us one way or the other!\n...\nelse:\n# Will never be reached!\n...\n</code></pre> <p>Use:</p> <pre><code>if instance.present_in_database:\n# We're working with an existing instance in the database!\n...\nelse:\n# We're working with a newly created instance not yet written to the database!\n...\n</code></pre> <p>Note</p> <p>There is one case where a model instance will have a null primary key, and that is the case where it has been removed from the database and is in the process of being deleted. For most purposes, this is not the case you are intending to check!</p>"},{"location":"development/core/best-practices.html#model-validation","title":"Model Validation","text":"<p>Django offers several places and mechanism in which to exert data and model validation. All model specific validation should occur within the model's <code>clean()</code> method or field specific validators. This ensures the validation logic runs and is consistent through the various Nautobot interfaces (Web UI, REST API, ORM, etc).</p>"},{"location":"development/core/best-practices.html#consuming-model-validation","title":"Consuming Model Validation","text":"<p>Django places specific separation between validation and the saving of an instance and this means it is a common Django pattern to make explicit calls first to a model instance's <code>clean()</code>/<code>full_clean()</code> methods and then the <code>save()</code> method. Calling only the <code>save()</code> method does not automatically enforce validation and may lead to data integrity issues.</p> <p>Nautobot provides a convenience method that both enforces model validation and saves the instance in a single call to <code>validated_save()</code>. Any model which inherits from <code>nautobot.core.models.BaseModel</code> has this method available. This includes all core models and it is recommended that all new Nautobot models and plugin-provided models also inherit from <code>BaseModel</code> or one of its descendants such as <code>nautobot.core.models.generics.OrganizationalModel</code> or <code>nautobot.core.models.generics.PrimaryModel</code>.</p> <p>The intended audience for the <code>validated_save()</code> convenience method is Job authors and anyone writing scripts for, or interacting with the ORM directly through the <code>nautobot-server nbshell</code> command. It is generally not recommended however, to use <code>validated_save()</code> as a blanket replacement for the <code>save()</code> method in the core of Nautobot.</p> <p>During execution, should model validation fail, <code>validated_save()</code> will raise <code>django.core.exceptions.ValidationError</code> in the normal Django fashion.</p>"},{"location":"development/core/best-practices.html#field-naming-in-data-models","title":"Field Naming in Data Models","text":"<p>Model field names must always follow the following conventions:</p> <ul> <li>Use lowercase letters, numbers, and underscores only</li> <li>Separate words with underscores for readability/clarity</li> <li>For foreign keys and their corresponding reverse-relations, match the <code>verbose_name</code> or <code>verbose_name_plural</code> of the related model</li> </ul> <p>Instead of:</p> <pre><code>Rack.group\nDeviceType.consoleserverporttemplates\nDevice.ipaddress_set\n</code></pre> <p>Use:</p> <pre><code>Rack.rack_group\nDeviceType.console_server_port_templates\nDevice.ip_addresses\n</code></pre>"},{"location":"development/core/best-practices.html#foreign-key-related_name-for-abstract-model-classes","title":"Foreign Key <code>related_name</code> for Abstract Model Classes","text":"<p>Changed in version 2.0.0</p> <p>If an abstract model class defines a foreign key to a concrete model class, Django's default <code>related_name</code> functionality doesn't provide great options - the best you could normally do for a <code>related_name</code> on a <code>ForeignKey</code> from an abstract base class, for example, would be <code>\"%(class)ss\"</code> (potentially resulting in related names like <code>\"devices\"</code> or, less optimally, <code>\"ipaddresss\"</code>) or <code>\"%(app_label)s_%(class)s_related\"</code> (resulting in related names like <code>\"dcim_device_related\"</code> or <code>\"ipam_ipaddress_related\"</code>, which while at least consistent, are rather clunky).</p> <p>Fortunately, Nautobot provides a <code>ForeignKeyWithAutoRelatedName</code> model field class that solves this problem. On any concrete subclass of an abstract base class that uses <code>ForeignKeyWithAutoRelatedName</code> instead of <code>ForeignKey</code>, the <code>related_name</code> will be automatically set based on the concrete subclass's <code>verbose_name_plural</code> value (which in many cases Django is clever enough to automatically derive from the class name, but can also be specified directly on your <code>Meta</code> class if needed). Thus, if your model's <code>verbose_name_plural</code> is \"IP addresses\", the <code>related_name</code> for the <code>ForeignKeyWithAutoRelatedName</code> will automatically be <code>ip_addresses</code>.</p> <p>Note</p> <p>At this time we only recommend using <code>ForeignKeyWithAutoRelatedName</code> for this abstract model case; for foreign keys between concrete models, it's still best to use a regular <code>ForeignKey</code> with an explicitly specified <code>related_name</code> string.</p> <p>Nautobot doesn't currently have a similar class provided for <code>ManyToManyField</code>; in this case you'll probably be best, for now, to just use <code>related_name=\"%(app_label)s_%(class)s_related\"</code> for any abstract base class's ManyToManyField if a reverse relation is desired.</p>"},{"location":"development/core/best-practices.html#slug-field","title":"Slug Field","text":"<p>Changed in version 2.0.0</p> <p>Models should generally not have a <code>slug</code> field, and should use the model's primary key (UUID) in URL patterns for both the UI and the REST API. All models should have a human-friendly natural key, either a single unique field (typically <code>name</code>) or a minimally complex unique-together set of fields (such as <code>DeviceType</code>'s <code>(manufacturer, model)</code>).</p> <p>For models that have a strong use case for a <code>slug</code> or similar field (such as <code>GitRepository.slug</code>, which defines a module name for Python imports from the repository, or <code>CustomField.key</code>, which defines the key used to access this field in the REST API and GraphQL), Nautobot provides the <code>AutoSlugField</code> to handle automatically populating the <code>slug</code> field from another field(s). Generally speaking model slugs should be populated from the <code>name</code> field. Below is an example on defining the <code>slug</code> field.</p> <pre><code>from django.db import models\nfrom nautobot.core.models.fields import AutoSlugField\nfrom nautobot.core.models.generics import PrimaryModel\nclass ExampleModel(PrimaryModel):\nname = models.CharField(max_length=100, unique=True)\nslug = AutoSlugField(populate_from='name')\n</code></pre>"},{"location":"development/core/best-practices.html#getting-url-routes","title":"Getting URL Routes","text":"<p>When developing new models a need often arises to retrieve a reversible route for a model to access it in either the web UI or the REST API. When this time comes, you must use <code>nautobot.core.utils.lookup.get_route_for_model</code>. You must not write your own logic to construct route names.</p> <p>Changed in version 2.0.0</p> <p><code>get_route_for_model</code> was moved from the <code>nautobot.utilities.utils</code> module to <code>nautobot.core.utils.lookup</code>.</p> <pre><code>from nautobot.core.utils.lookup import get_route_for_model\n</code></pre> <p>This utility function supports both UI and API views for both Nautobot core apps and Nautobot plugins.</p> <p>Added in version 1.4.3</p> <p>Support for generating API routes was added to <code>get_route_for_model()</code> by passing the argument <code>api=True</code>.</p>"},{"location":"development/core/best-practices.html#ui-routes","title":"UI Routes","text":"<p>Instead of:</p> <pre><code>route = f\"{model._meta.app_label}:{model._meta.model_name}_list\"\nif model._meta.app_label in settings.PLUGINS:\nroute = f\"plugins:{route}\"\n</code></pre> <p>Use:</p> <pre><code>route = get_route_for_model(model, \"list\")\n</code></pre>"},{"location":"development/core/best-practices.html#rest-api-routes","title":"REST API Routes","text":"<p>Instead of:</p> <pre><code>api_route = f\"{model._meta.app_label}-api:{model._meta.model_name}-list\"\nif model._meta.app_label in settings.PLUGINS:\napi_route = f\"plugins-api:{api_route}\"\n</code></pre> <p>Use:</p> <pre><code>api_route = get_route_for_model(model, \"list\", api=True)\n</code></pre>"},{"location":"development/core/best-practices.html#examples","title":"Examples","text":"<p>Core models:</p> <pre><code>&gt;&gt;&gt; get_route_for_model(Device, \"list\")\n\"dcim:device_list\"\n&gt;&gt;&gt; get_route_for_model(Device, \"list\", api=True)\n\"dcim-api:device-list\"\n</code></pre> <p>Plugin models:</p> <pre><code>&gt;&gt;&gt; get_route_for_model(ExampleModel, \"list\")\n\"plugins:example_plugin:examplemodel_list\"\n&gt;&gt;&gt; get_route_for_model(ExampleModel, \"list\", api=True)\n\"plugins-api:example_plugin-api:examplemodel-list\"\n</code></pre> <p>Tip</p> <p>The first argument may also optionally be an instance of a model, or a string using the dotted notation of <code>{app_label}.{model}</code> (e.g. <code>dcim.device</code>).</p> <p>Using an instance:</p> <pre><code>&gt;&gt;&gt; instance = Device.objects.first()\n&gt;&gt;&gt; get_route_for_model(instance, \"list\")\n\"dcim:device_list\"\n</code></pre> <p>Using dotted notation:</p> <pre><code>&gt;&gt;&gt; get_route_for_model(\"dcim.device\", \"list\")\n\"dcim:device_list\"\n</code></pre>"},{"location":"development/core/best-practices.html#rest-api-best-practices","title":"REST API Best Practices","text":"<ul> <li>Generally the field names on a REST API serializer should correspond directly to the field names on the model, subject to the best practices described above.</li> <li>For related count fields, use the related model name suffixed with <code>_count</code>.</li> </ul> <p>Instead of:</p> <pre><code>Interface.count_ipaddresses\n</code></pre> <p>Use:</p> <pre><code>Interface.ip_address_count\n</code></pre>"},{"location":"development/core/best-practices.html#filtering-models-with-filtersets","title":"Filtering Models with FilterSets","text":"<p>The following best practices must be considered when establishing new <code>FilterSet</code> classes for model classes.</p>"},{"location":"development/core/best-practices.html#mapping-model-fields-to-filters","title":"Mapping Model Fields to Filters","text":"<ul> <li> <p>FilterSets must inherit from <code>nautobot.extras.filters.NautobotFilterSet</code> (which inherits from <code>nautobot.core.filters.BaseFilterSet</code>)</p> <ul> <li>This affords that automatically generated lookup expressions (<code>ic</code>, <code>nic</code>, <code>iew</code>, <code>niew</code>, etc.) are always included</li> <li>This also asserts that the correct underlying <code>Form</code> class that maps the generated form field types and widgets will be included</li> </ul> </li> <li> <p>FilterSets must publish all model fields from a model, including related fields.</p> <ul> <li>All fields should be provided using <code>Meta.fields = \"__all__\"</code> and this would be preferable for the first and common case as it requires the least maintenance and overhead and asserts parity between the model fields and the filterset filters.</li> <li>In some cases simply excluding certain fields would be the next most preferable e.g. <code>Meta.exclude = [\"unwanted_field\", \"other_unwanted_field\"]</code></li> <li>Finally, the last resort should be explicitly declaring the desired fields using <code>Meta.fields =</code>. This should be avoided because it incurs the highest technical debt in maintaining alignment between model fields and filters.</li> </ul> </li> <li>In the event that fields do need to be customized to extend lookup expressions, a dictionary of field names mapped to a list of lookups may be used, however, this pattern is only compatible with explicitly declaring all fields, which should also be avoided for the common case. For example:</li> </ul> <pre><code>class UserFilter(NautobotFilterSet):\nclass Meta:\nmodel = User\nfields = {\n'username': ['exact', 'contains'],\n'last_login': ['exact', 'year__gt'],\n}\n</code></pre> <ul> <li>It is acceptable that default filter mappings may need to be overridden with custom filter declarations, but <code>filter_overrides</code> (see below) should be used as a first resort.</li> </ul>"},{"location":"development/core/best-practices.html#filter-naming-and-definition","title":"Filter Naming and Definition","text":"<ul> <li> <p>Custom filter definitions must not shadow the name of an existing model field if it is also changing the type.</p> <ul> <li>For example (before Nautobot 2.0.0), <code>DeviceFilterSet.interfaces</code> was a <code>BooleanFilter</code> that was shadowing the <code>Device.interfaces</code> related manager. This caused problems with automatic introspection of the filterset and was fixed in 2.0 by introducing a separate <code>has_interfaces</code> filter and changing the <code>interfaces</code> filter to show the correct behavior. Shadowing database fields with a filter field of a different type must be avoided in all new filters.</li> </ul> </li> <li> <p>In Nautobot 2.0 and later, for all foreign-key related fields and their corresponding reverse-relations:</p> <ul> <li>If there is no appropriate single field that could be used as a natural key (e.g. a globally-unique <code>name</code> or <code>slug</code>), then the default filtering behavior for this field (using <code>django_filters.ModelMultipleChoiceFilter</code>) can be used for now, until issue 2875 is implemented to allow for the use of multiple fields with <code>NaturalKeyOrPKMultipleChoiceFilter</code>.</li> <li>Otherwise, the field must be shadowed with a Nautobot <code>NaturalKeyOrPKMultipleChoiceFilter</code> which will automatically try to lookup by UUID or <code>name</code> depending on the value of the incoming argument (e.g. UUID string vs. name string).<ul> <li>This provides an advantage over the default <code>django_filters.ModelMultipleChoiceFilter</code> which only supports a UUID (<code>pk</code>) value as an input.</li> </ul> </li> <li>Fields that use <code>slug</code> or some other natural key field instead of <code>name</code> can set the <code>to_field_name</code> argument on <code>NaturalKeyOrPKMultipleChoiceFilter</code> accordingly.</li> </ul> </li> </ul> <pre><code># Typical usage\nfrom nautobot.core.filters import NaturalKeyOrPKMultipleChoiceFilter\nprovider = NaturalKeyOrPKMultipleChoiceFilter(\nqueryset=Provider.objects.all(),\nto_field_name=\"name\",\nlabel=\"Provider (name or ID)\",\n)\n</code></pre> <pre><code># Optionally, using the to_field_name argument to look up by \"slug\" instead of by \"name\"\nfrom nautobot.core.filters import NaturalKeyOrPKMultipleChoiceFilter\ngit_repository = NaturalKeyOrPKMultipleChoiceFilter(\nto_field_name=\"slug\",\nqueryset=GitRepository.objects.all(),\nlabel=\"Git repository (slug or ID)\",\n)\n</code></pre> <ul> <li>Boolean filters for membership must be named with <code>has_{related_name}</code> (e.g. <code>has_interfaces</code>) and should use the <code>RelatedMembershipBooleanFilter</code> filter class.<ul> <li>One exception to this naming convention may be made for Boolean filters for identity, which may be named <code>is_{name}</code> instead (e.g. <code>is_virtual_chassis_member</code> versus <code>has_virtual_chassis</code>). Although this is semantically identical to <code>has_</code> filters, there may be occasions where naming the filter <code>is_</code> would be more intuitive.</li> </ul> </li> </ul> <pre><code>from nautobot.core.filters import RelatedMembershipBooleanFilter\nhas_interfaces = RelatedMembershipBooleanFilter(\nfield_name=\"interfaces\",\nlabel=\"Has interfaces\",\n)\nis_virtual_chassis_member = RelatedMembershipBooleanFilter(\nfield_name=\"virtual_chassis\",\nlabel=\"Is a virtual chassis member\",\n)\n</code></pre> <ul> <li> <p>Whenever possible otherwise, filter names must correspond exactly to the underlying model field they are referencing.</p> </li> <li> <p>If there's necessarily a mismatch between the filter name and the model field name (such as in the <code>has_*</code> and <code>is_*</code> cases described above):</p> <ol> <li>The suffix component of the filter name must correspond exactly to the underlying model field name (for example, for a field of <code>console_port_templates</code>, the filter must be <code>has_console_port_templates</code>, not <code>has_consoleporttemplates</code> or <code>has_console_ports</code>).</li> <li>The filter itself must declare <code>field_name</code> to identify unambiguously the underlying model field.</li> </ol> </li> <li> <p>Filters must be declared using the appropriate lookup expression (<code>lookup_expr</code>) if any other expression than <code>exact</code> (the default) is required.</p> </li> <li> <p>Filters must be declared using <code>exclude=True</code> if a queryset <code>.exclude()</code> is required to be called vs. queryset <code>.filter()</code> which is the default when the filter default <code>exclude=False</code> is passed through. If you require <code>Foo.objects.exclude()</code>, you must pass <code>exclude=True</code> instead of defining a filterset method to explicitly hard-code such a query.</p> </li> </ul> <p>For example, for a boolean filter that checks to see whether the <code>console_ports</code> field is null if False and not null if True, you would need to combine all of the above rules, resulting in:</p> <pre><code>   has_console_ports = BooleanFilter(field_name=\"console_ports\", lookup_expr=\"isnull\", exclude=True)\n</code></pre> <p>Tip</p> <p>For boolean filters on related memberships (<code>has_*</code>/<code>is_*</code>), you should always use <code>RelatedMembershipBooleanFilter</code>, which is a <code>BooleanFilter</code> subclass that defaults to the correct <code>lookup_expr</code> and <code>exclude</code> values for this common case.</p> <ul> <li> <p>Filters must be declared using <code>distinct=True</code> if a queryset <code>.distinct()</code>is required to be called on the queryset.</p> </li> <li> <p>Filters must not be set to be required using <code>required=True</code></p> </li> <li> <p>Filter methods defined using the <code>method=</code> keyword argument may only be used as a last resort (see below) when correct usage of <code>field_name</code>, <code>lookup_expr</code>, <code>exclude</code>, or other filter keyword arguments do not suffice. In other words: filter methods should used as the exception and not the rule.</p> </li> <li> <p>Use of <code>filter_overrides</code> must be considered in cases where more-specific class-local overrides. The need may occasionally arise to change certain filter-level arguments used for filter generation, such such as changing a filter class, or customizing a UI widget. Any <code>extra</code> arguments are sent to the filter as keyword arguments at instance creation time. (Hint: <code>extra</code> must be a callable)</p> <p>For example:</p> </li> </ul> <pre><code>class ProductFilter(NautobotFilterSet):\nclass Meta:\nmodel = Interface\nfields = \"__all__\"\nfilter_overrides = {\n# This would change the default to all CharFields to use lookup_expr=\"icontains\". It\n# would also pass in the custom `choices` generated by the `generate_choices()`\n# function.\nmodels.CharField: {\n\"filter_class\": filters.MultiValueCharFilter,\n\"extra\": lambda f: {\n\"lookup_expr\": \"icontains\",\n\"choices\": generate_choices(),\n},\n},\n# This would make BooleanFields use a radio select widget vs. the default of checkbox\nmodels.BooleanField: {\n\"extra\": lambda f: {\n\"widget\": forms.RadioSelect,\n},\n},\n}\n</code></pre> <p>Warning</p> <p>Existing features of filtersets and filters must be exhausted first using keyword arguments before resorting to customizing, re-declaring/overloading, or defining filter methods.</p>"},{"location":"development/core/best-practices.html#filter-methods","title":"Filter Methods","text":"<p>Filters on a filterset can reference a <code>method</code> (either a callable, or the name of a method on the filterset) to perform custom business logic for that filter field. However, many uses of filter methods in Nautobot are problematic because they break the ability for such filter fields to be properly reversible.</p> <p>Consider this example from <code>nautobot.dcim.filters.DeviceFilterSet.pass_through_ports</code>:</p> <pre><code>    # Filter field definition is a BooleanFilter, for which an \"isnull\" lookup_expr\n# is the only valid filter expression\npass_through_ports = django_filters.BooleanFilter(\nmethod=\"_pass_through_ports\",\nlabel=\"Has pass-through ports\",\n)\n# Method definition loses context and further the field's lookup_expr\n# falls back to the default of \"exact\" and the `name` value is irrelevant here.\ndef _pass_through_ports(self, queryset, name, value):\nbreakpoint()  # This was added to illustrate debugging with pdb below\nreturn queryset.exclude(frontports__isnull=value, rearports__isnull=value)\n</code></pre> <p>The default <code>lookup_expr</code> unless otherwise specified is \u201cexact\u201d, as seen in django_filters.conf:</p> <pre><code>  'DEFAULT_LOOKUP_EXPR': 'exact',\n</code></pre> <p>When this method is called, the internal state is default, making reverse introspection impossible, because the <code>lookup_expr</code> is defaulting to \u201cexact\u201d:</p> <pre><code>(Pdb) field = self.filters[name]\n(Pdb) field.exclude\nFalse\n(Pdb) field.lookup_expr\n'exact'\n</code></pre> <p>This means that the arguments for the field are being completely ignored and the hard-coded queryset <code>queryset.exclude(frontports__isnull=value, rearports__isnull=value)</code> is all that is being run when this method is called.</p> <p>Additionally, <code>name</code> variable that gets passed to the method cannot be used here because there are two field names at play (<code>frontports</code> and <code>rearports</code>). This hard-coding is impossible to introspect and therefore impossible to reverse.</p> <p>So while this filter definition could be improved like so, there is still no way to know what is going on in the method body:</p> <pre><code>    pass_through_ports = django_filters.BooleanFilter(\nmethod=\"_pass_through_ports\",  # The method that is called\nexclude=True,                  # Perform an `.exclude()` vs. `.filter()``\nlookup_expr=\"isnull\",          # Perform `isnull` vs. `exact``\nlabel=\"Has pass-through ports\",\n)\n</code></pre> <p>For illustration, if we use another breakpoint, you can see that the filter field now has the correct attributes that can be used to help reverse this query:</p> <pre><code>(Pdb) field = self.filters[name]\n(Pdb) field.exclude\nTrue\n(Pdb) field.lookup_expr\n'isnull'\n</code></pre> <p>Except that it stops there because of the method body. Here are the problems:</p> <ul> <li>There's no way to identify either of the field names required here</li> <li>The <code>name</code> that is incoming to the method is the filter name as defined (<code>pass_through_ports</code> in this case) does not map to an actual model field</li> <li>So the filter can be introspected for <code>lookup_expr</code> value using <code>self.filters[name].lookup_expr</code>, but it would have to be assumed that applies to both fields.</li> <li>Same with <code>exclude</code> (<code>self.filters[name].exclude</code>)</li> </ul> <p>It would be better to just eliminate <code>pass_through_ports=True</code> entirely in exchange for <code>front_ports=True&amp;rear_ports=True</code> (current) or <code>has_frontports=True&amp;has_rearports=True</code> (future).</p>"},{"location":"development/core/best-practices.html#generating-reversible-q-objects","title":"Generating Reversible Q Objects","text":"<p>With consistent and proper use of filter field arguments when defining them on a filterset, a query could be constructed using the <code>field_name</code> and <code>lookup_expr</code> values. For example:</p> <pre><code>    def generate_query(self, field, value):\nquery = Q()\npredicate = {f\"{field.field_name}__{field.lookup_expr}\": value}\nif field.exclude:\nquery |= ~Q(**predicate)\nelse:\nquery |= Q(**predicate)\nreturn query\n## Somewhere else in business logic:\nfield = filterset.filters[name]\nvalue = filterset.data[name]\nquery = generate_query(field, value)\nfilterset.qs.filter(query).count()  # 339\n</code></pre>"},{"location":"development/core/best-practices.html#summary","title":"Summary","text":"<ul> <li>For the vast majority of cases where we have method filters, it\u2019s for Boolean filters</li> <li>For the common case method filters are unnecessary technical debt and should be eliminated where better suited by proper use of filter field arguments</li> <li>Reversibility may not always necessarily be required, but by properly defining <code>field_name</code>, <code>lookup_expr</code>, and <code>exclude</code> on filter fields, introspection becomes deterministic and reversible queries can be reliably generated as needed.</li> <li>For exceptions such as <code>DeviceFilterSet.has_primary_ip</code> where it checks for both <code>Device.primary_ip4</code> OR <code>Device.primary_ip6</code>, method filters may still be necessary, however, they would be the exception and not the norm.</li> <li>The good news is that in the core there are not that many of these filter methods defined, but we also don\u2019t want to see them continue to proliferate.</li> </ul>"},{"location":"development/core/best-practices.html#using-nautobotuiviewset-for-plugin-development","title":"Using NautobotUIViewSet for Plugin Development","text":"<p>Added in version 1.4.0</p> <p>Using <code>NautobotUIViewSet</code> for plugin development is strongly recommended.</p>"},{"location":"development/core/docker-compose-advanced-use-cases.html","title":"Docker Compose Advanced Use Cases","text":"<p>This section describes some of the more advanced use cases for the Docker Compose development workflow.</p>"},{"location":"development/core/docker-compose-advanced-use-cases.html#invoke-configuration","title":"Invoke Configuration","text":"<p>The Invoke tasks have some default configuration which you may want to override. Configuration properties include:</p> <ul> <li><code>project_name</code>: The name that all Docker containers will be grouped together under (default: <code>nautobot</code>, resulting in containers named <code>nautobot_nautobot_1</code>, <code>nautobot_redis_1</code>, etc.)</li> <li><code>python_ver</code>: the Python version which is used to build the Docker container (default: <code>3.8</code>)</li> <li><code>local</code>: run the commands in the local environment vs the Docker container (default: <code>False</code>)</li> <li><code>compose_dir</code>: the full path to the directory containing the Docker Compose YAML files (default: <code>\"&lt;nautobot source directory&gt;/development\"</code>)</li> <li><code>compose_files</code>: the Docker Compose YAML file(s) to use (default: <code>[\"docker-compose.yml\", \"docker-compose.postgres.yml\", \"docker-compose.dev.yml\"]</code>)</li> <li><code>docker_image_names_main</code> and <code>docker_image_names_develop</code>: Used when building Docker images for publication; you shouldn't generally need to change these.</li> </ul> <p>These setting may be overridden several different ways (from highest to lowest precedence):</p> <ul> <li>Command line argument on the individual commands (see <code>invoke $command --help</code>) if available</li> <li>Using environment variables such as <code>INVOKE_NAUTOBOT_PYTHON_VER</code>; the variables are prefixed with <code>INVOKE_NAUTOBOT_</code> and must be uppercase; note that Invoke does not presently support environment variable overriding of list properties such as <code>compose_files</code>.</li> <li>Using an <code>invoke.yml</code> file (see <code>invoke.yml.example</code>)</li> </ul>"},{"location":"development/core/docker-compose-advanced-use-cases.html#working-with-docker-compose","title":"Working with Docker Compose","text":"<p>The files related to the Docker development environment can be found inside of the <code>development</code> directory at the root of the project.</p> <p>In this directory you'll find the following core files:</p> <ul> <li><code>docker-compose.yml</code> - Docker service containers and their relationships to the Nautobot container</li> <li><code>docker-compose.debug.yml</code> - Docker compose override file used to start the Nautobot container for use with Visual Studio Code's dev container integration.</li> <li><code>docker-compose.dev.yml</code> - Docker compose override file used to mount the Nautobot source code inside the container at <code>/source</code> and the <code>nautobot_config.py</code> from the same directory as <code>/opt/nautobot/nautobot_config.py</code> for the active configuration.</li> <li><code>docker-compose.final.yml</code> - Docker compose override file used to start/build the <code>final</code> (production) Docker images for local testing.</li> <li><code>docker-compose.final-dev.yml</code> - Docker compose override file used to start/build the <code>final-dev</code> (app development environment) Docker images for local testing.</li> <li><code>docker-compose.keycloak.yml</code> - Docker compose override file used to setup an SSO auth backend for Nautobot.</li> <li><code>docker-compose.mysql.yml</code> - Docker compose override file used to add a MySQL container as the database backend for Nautobot.</li> <li><code>docker-compose.postgres.yml</code> - Docker compose override file used to add a Postgres container as the database backend for Nautobot.</li> <li><code>dev.env</code> - Environment variables used to setup the container services</li> <li><code>nautobot_config.py</code> - Nautobot configuration file</li> </ul> <p>In addition to the <code>development</code> directory, additional non-development-specific Docker-related files are located in the <code>docker</code> directory at the root of the project.</p> <p>In the <code>docker</code> directory you will find the following files:</p> <ul> <li><code>Dockerfile</code> - Docker container definition for Nautobot containers</li> <li><code>docker-entrypoint.sh</code> - Commands and operations ran once Nautobot container is started including database migrations and optionally creating a superuser</li> <li><code>uwsgi.ini</code> - The uWSGI ini file used in the production docker container</li> </ul>"},{"location":"development/core/docker-compose-advanced-use-cases.html#docker-compose-overrides","title":"Docker Compose Overrides","text":"<p>If you require changing any of the defaults found in <code>docker-compose.yml</code>, create a file inside the <code>development</code> directory called <code>docker-compose.override.yml</code> and add this file to the <code>compose_files</code> setting in your <code>invoke.yml</code> file, for example:</p> <pre><code>---\nnautobot:\ncompose_files:\n- \"docker-compose.yml\"\n- \"docker-compose.postgres.yml\"\n- \"docker-compose.dev.yml\"\n- \"docker-compose.override.yml\"\n</code></pre> <p>This file will override any configuration in the main <code>docker-compose.yml</code> file, without making changes to the repository.</p> <p>Please see the official documentation on extending Docker Compose for more information.</p>"},{"location":"development/core/docker-compose-advanced-use-cases.html#automatically-creating-a-superuser","title":"Automatically Creating a Superuser","text":"<p>There may be times where you want to bootstrap Nautobot with a superuser account and API token already created for quick access or for running within a CI/CD pipeline. By using a custom <code>invoke.yml</code> as described above, in combination with custom <code>docker-compose.override.yml</code> and <code>override.env</code> files, you can automatically bootstrap Nautobot with a user and token.</p> <p>Create <code>invoke.yml</code> as described above, then create <code>development/docker-compose.override.yml</code> with the following contents:</p> <pre><code>---\nservices:\nnautobot:\nenv_file:\n- \"override.env\"\n</code></pre> <p>The <code>docker-entrypoint.sh</code> script will run any migrations and then look for specific variables set to create the superuser. The <code>docker-entrypoint.sh</code> script is copied in during the Docker image build and will read from the default <code>dev.env</code> as the <code>env_file</code> until you override it as seen above.</p> <p>Any variables defined in this file will override the defaults. The <code>override.env</code> should be located in the <code>development/</code> directory, and should look like the following:</p> <pre><code># Superuser information. NAUTOBOT_CREATE_SUPERUSER defaults to false.\nNAUTOBOT_CREATE_SUPERUSER=true\nNAUTOBOT_SUPERUSER_NAME=admin\nNAUTOBOT_SUPERUSER_EMAIL=admin@example.com\nNAUTOBOT_SUPERUSER_PASSWORD=admin\nNAUTOBOT_SUPERUSER_API_TOKEN=0123456789abcdef0123456789abcdef01234567\n</code></pre> <p>The variables defined above within <code>override.env</code> will signal the <code>docker-entrypoint.sh</code> script to create the superuser with the specified username, email, password, and API token.</p> <p>After these two files are created, you can use the <code>invoke</code> tasks to manage the development containers.</p>"},{"location":"development/core/docker-compose-advanced-use-cases.html#using-mysql-instead-of-postgresql","title":"Using MySQL instead of PostgreSQL","text":"<p>By default the Docker development environment is configured to use a PostgreSQL container as the database backend. For development or testing purposes, you might optionally choose to use MySQL instead. In order to do so, you need to make the following changes to your environment:</p> <ul> <li>Set up <code>invoke.yml</code> as described above and use it to override the postgres docker compose file:</li> </ul> <pre><code>---\nnautobot:\ncompose_files:\n- \"docker-compose.yml\"\n- \"docker-compose.mysql.yml\"\n- \"docker-compose.dev.yml\"\n</code></pre> <p>Then <code>invoke stop</code> (if you previously had the docker environment running with Postgres) and <code>invoke start</code> and you should now be running with MySQL.</p>"},{"location":"development/core/docker-compose-advanced-use-cases.html#sso-auth-backend-with-keycloak","title":"SSO Auth Backend with Keycloak","text":"<p>Keycloak and its database are run in the same docker compose project as Nautobot. A separate database is used to ensure you are able to have two separate instances of Postgres, one for Nautobot and one for Keycloak, and allows you to use a MySQL database for Nautobot but maintain Keycloaks required Postgres DB. This setup is meant for local development and testing, and should not be used as a reference for deploying Keycloak in production.</p> <p>The <code>invoke.yml</code> file must be updated to add <code>development/docker-compose.keycloak.yml</code> to the docker compose project and to enable OIDC. These setting are solely for local development inside the Nautobot repository and is not applicable to any other deployment. An example <code>invoke.yml</code> file:</p> <pre><code>---\nnautobot:\ncompose_files:\n- \"docker-compose.yml\"\n- \"docker-compose.postgres.yml\"\n- \"docker-compose.dev.yml\"\n- \"docker-compose.keycloak.yml\"\n</code></pre>"},{"location":"development/core/docker-compose-advanced-use-cases.html#validating-setup","title":"Validating Setup","text":"<p>Once all steps are completed Nautobot should now have the <code>Continue to SSO</code> button on the login screen and should immediately redirect the user to sign in with Keycloak.</p>"},{"location":"development/core/docker-compose-advanced-use-cases.html#keycloak-login-credentials","title":"Keycloak Login Credentials","text":"<p>Keycloak admin console is reachable via <code>http://localhost:8087/admin/</code> with user <code>admin</code> and password <code>admin</code>. The below users are pre-configured within Keycloak, at this time their permissions are not directly mapped to any permissions provided by default by Nautobot. This will be a later enhancement to the local development environment.</p> <p>| Username         | Password  | +------------------+-----------+ | nautobot_unpriv  | unpriv123 | | nautobot_admin   | admin123  | | nautobot_auditor | audit123  |</p>"},{"location":"development/core/docker-compose-advanced-use-cases.html#microsoft-visual-studio-code-integration","title":"Microsoft Visual Studio Code Integration","text":"<p>For users of Microsoft Visual Studio Code, several files are included to ease development and integrate with the VS Code Remote - Containers extension. The following related files are found relative to the root of the project:</p> <ul> <li><code>.devcontainers/devcontainer.json</code> - Dev. container definition</li> <li><code>nautobot.code-workspace</code> - VS Code workspace configuration for Nautobot</li> <li><code>development/docker-compose.debug.yml</code> - Docker Compose file with debug configuration for VS Code</li> </ul> <p>After opening the project directory in VS Code in a supported environment, you will be prompted by VS Code to Reopen in Container and Open Workspace. Select Reopen in Container to build and start the development containers. Once your window is connected to the container, you can open the workspace which enables support for Run/Debug.</p> <p>To start Nautobot, select Run Without Debugging or Start Debugging from the Run menu. Once Nautobot has started, you will be prompted to open a browser to connect to Nautobot.</p> <p>Note</p> <p>You can run tests with <code>nautobot-server --config=nautobot/core/tests/nautobot_config.py test nautobot</code> while inside the Container.</p>"},{"location":"development/core/docker-compose-advanced-use-cases.html#special-workflow-for-containers-on-remote-servers","title":"Special Workflow for Containers on Remote Servers","text":"<p>A slightly different workflow is needed when your development container is running on a remotely-connected server (such as with SSH). VS Code will not offer the Reopen in Container option on a remote server.</p> <p>To work with remote containers, after <code>invoke build</code> use <code>docker-compose</code> as follows to start the containers. This prevents the HTTP service from automatically starting inside the container:</p> <pre><code>cd development\ndocker compose -f docker-compose.yml -f docker-compose.debug.yml up\n</code></pre> <ul> <li>Now open the VS Code Docker extension. In the <code>CONTAINERS/development</code> section, right click on a running container and select the Attach Visual Studio Code menu item.</li> <li>The Select the container to attach VS Code input field provides a list of running containers.</li> <li>Click on <code>development_nautobot_1</code> to use VS Code inside the container. The <code>devcontainer</code> will startup now.</li> <li>As a last step open the folder <code>/opt/nautobot</code> in VS Code.</li> </ul>"},{"location":"development/core/docker-compose-advanced-use-cases.html#remote-debugging-configuration","title":"Remote Debugging Configuration","text":"<p>Using the Remote-Attach functionality of VS Code debugger is an alternative to debugging in a development container. This allows a local VS Code instance to connect to a remote container and debug the code running in the container the same way as when debugging locally.</p> <p>Follow the steps below to configure VS Code to debug Nautobot and Celery Worker running in a remote container:</p> <ol> <li> <p>Configure <code>invoke.yml</code> to use the <code>docker-compose.vscode-rdb.yml</code> file</p> <p>This overrides the container settings without touching the original <code>docker-compose.yml</code> file.</p> <p>Your <code>invoke.yml</code> file should look something like this:</p> <pre><code>---\nnautobot:\ncompose_files:\n- \"docker-compose.yml\"\n- \"docker-compose.postgres.yml\"\n- \"docker-compose.dev.yml\"\n- \"docker-compose.vscode-rdb.yml\"\n</code></pre> <p>If you already have a custom <code>invoke.yml</code> file, append <code>docker-compose.vscode-rdb.yml</code> to the end of the <code>compose_files</code> list.</p> <p>See the docker compose override documentation for more details.</p> </li> <li> <p>VS Code debug configuration</p> <p>If you have opened the workspace file <code>nautobot.code-workspace</code> then there are two debug configurations for remote debugging already available.</p> <p>If you add nautobot to an existing VS Code workspace (Menu: File &gt; Add Folder to Workspace...) then copy the <code>launch:</code> values to the <code>.vscode/launch.json</code> file.</p> <ul> <li>Debug Configurations for Remote Debugging:</li> </ul> <pre><code>{\n\"version\": \"0.2.0\",\n\"configurations\": [\n{\n\"name\": \"Python: Remote Attach\",\n...\n},\n{\n\"name\": \"Python: Remote Attach Celery Worker\",\n...\n}\n]\n}\n</code></pre> </li> </ol> <p>It is now possible to debug the containerized Nautobot and Celery Worker using the VS Code debugger.</p> <p>After restarting the Celery-Worker container you need to restart the debug session.</p>"},{"location":"development/core/extending-models.html","title":"Extending Models","text":"<p>Below is a list of tasks to consider when adding a new field to a core model.</p>"},{"location":"development/core/extending-models.html#generate-and-run-database-migrations","title":"Generate and run database migrations","text":"<p>Django migrations are used to express changes to the database schema. In most cases, Django can generate these automatically, however very complex changes may require manual intervention. Always remember to specify a short but descriptive name when generating a new migration.</p> <p>Warning</p> <p>Assert that you have installed Nautobot in your development environment using <code>poetry install</code> so that changes you make to migrations will apply to the source tree!</p> <pre><code>nautobot-server makemigrations &lt;app&gt; -n &lt;name&gt;\nnautobot-server migrate\n</code></pre> <p>Where possible, try to merge related changes into a single migration. For example, if three new fields are being added to different models within an app, these can be expressed in the same migration. You can merge a new migration with an existing one by combining their <code>operations</code> lists.</p> <p>Note</p> <p>Migrations can only be merged within a release. Once a new release has been published, its migrations cannot be altered (other than for the purpose of correcting a bug).</p>"},{"location":"development/core/extending-models.html#add-validation-logic-to-clean","title":"Add validation logic to <code>clean()</code>","text":"<p>If the new field introduces additional validation requirements (beyond what's included with the field itself), implement them in the model's <code>clean()</code> method. Remember to call the model's original method using <code>super()</code> before or after your custom validation as appropriate:</p> <pre><code>class Foo(models.Model):\ndef clean(self):\nsuper().clean()\n# Custom validation goes here\nif self.bar is None:\nraise ValidationError()\n</code></pre>"},{"location":"development/core/extending-models.html#update-relevant-querysets","title":"Update relevant querysets","text":"<p>If you're adding a relational field (e.g. <code>ForeignKey</code>) and intend to include the data when retrieving a list of objects, be sure to include the field using <code>select_related()</code> (for <code>ForeignKey</code> forward lookups) and/or <code>prefetch_related()</code> (for <code>ForeignKey</code> reverse lookups and <code>ManyToManyField</code> lookups) as appropriate. This will optimize the view and avoid extraneous database queries.</p>"},{"location":"development/core/extending-models.html#update-api-serializer","title":"Update API serializer","text":"<p>Extend the model's API serializer in <code>nautobot.&lt;app&gt;.api.serializers</code> to include the new field, if necessary.</p> <p>Added in version 2.0.0</p> <p>Most model serializers now use <code>fields = [__all__]</code>, in which case you do not have to explicitly include the new field in the model's API serializer. The serializer will automatically pick up the field and render it according to Nautobot standards. If the default rendering does not meet your API needs, you can explicitly declare the field on the serializer.</p>"},{"location":"development/core/extending-models.html#add-field-to-forms","title":"Add field to forms","text":"<p>Extend any forms to include the new field as appropriate. Common forms include:</p> <ul> <li>Create/edit - Manipulating a single object</li> <li>Bulk edit - Performing a change on many objects at once</li> <li>Filter - Displays the options available for filtering a list of objects (both UI and API)</li> </ul>"},{"location":"development/core/extending-models.html#extend-object-filter-set","title":"Extend object filter set","text":"<p>If the new field should be filterable, add it to the <code>FilterSet</code> for the model. If the field should be searchable, remember to reference it in the FilterSet's <code>SearchFilter</code> definition.</p> <p>All filtersets should inherit from <code>BaseFilterSet</code> or <code>NautobotFilterSet</code> as appropriate to the scope of the model's functionality.</p>"},{"location":"development/core/extending-models.html#add-column-to-object-table","title":"Add column to object table","text":"<p>If the new field will be included in the object list view, add a column to the model's table. For simple fields, adding the field name to <code>Meta.fields</code> will be sufficient. More complex fields may require declaring a custom column.</p>"},{"location":"development/core/extending-models.html#update-the-ui-templates","title":"Update the UI templates","text":"<p>Edit the object's view template to display the new field. There may also be a custom add/edit form template that needs to be updated.</p>"},{"location":"development/core/extending-models.html#validate-the-new-field-in-graphql","title":"Validate the new field in GraphQL","text":"<p>If the model is already part of the GraphQL schema, the new field will be included automatically. Validate that the new field is rendering properly in GraphQL. If the field is not compatible with GraphQL or shouldn't be included in GraphQL it's possible to exclude a specific field in the GraphQL Type Object associated with this specific model. You can refer to the graphene-django documentation for additional information.</p> <p>Note that if you're using the <code>convert_django_field</code> registry to override the default GraphQL representation for any field type, this override must be registered within the relevant app's <code>ready()</code> function, rather than at module import time.</p>"},{"location":"development/core/extending-models.html#createextend-test-cases","title":"Create/extend test cases","text":"<p>Create or extend the relevant test cases to verify that the new field and any accompanying validation logic perform as expected. This is especially important for relational fields. Nautobot incorporates various test suites, including:</p> <ul> <li>API serializer/view tests (should be based on <code>nautobot.core.testing.api.APIViewTestCases</code>)</li> <li>Filter tests (should be based on <code>nautobot.core.testing.filters.FilterTestCases</code>)</li> <li>Form tests</li> <li>Model tests (should be based on <code>nautobot.core.testing.models.ModelTestCases</code>)</li> <li>View tests (should be based on <code>nautobot.core.testing.views.ViewTestCases</code>)</li> </ul> <p>Be diligent to ensure all of the relevant test suites are adapted or extended as necessary to test any new functionality.</p>"},{"location":"development/core/extending-models.html#update-the-models-documentation","title":"Update the model's documentation","text":"<p>Each model has a dedicated page in the documentation, typically either at <code>docs/user-guide/core-data-model/&lt;app&gt;/&lt;model&gt;.md</code>, or in the case of the <code>extras</code> app, at <code>docs/user-guide/platform-functionality/&lt;model&gt;.md</code>. Some models are exceptions to this pattern; if so, they should declare the path as a <code>documentation_static_path</code> attribute on the model class definition.</p> <p>Update this file to include any relevant information about the new field. Note that this documentation page should automatically be accessible through the web UI via a \"question mark\" icon on the corresponding model create/edit page.</p>"},{"location":"development/core/generic-views.html","title":"Generic Views","text":"<ul> <li><code>ObjectView</code> - Retrieve a single object for display.</li> <li><code>ObjectListView</code> - List a series of objects.</li> <li><code>ObjectEditView</code> - Create or edit a single object.</li> <li><code>ObjectDeleteView</code> - Delete a single object.</li> <li><code>BulkCreateView</code> - Create new objects in bulk.</li> <li><code>BulkDeleteView</code> - Delete objects in bulk.</li> <li><code>BulkEditView</code> - Edit objects in bulk.</li> <li><code>BulkImportView</code> - Import objects in bulk from CSV.</li> </ul> <p>Once you define a view by subclassing any of the above generic classes, you must register it in your <code>urls.py</code> as usual. There are a few things to be aware of here:</p> <ul> <li>Reverse URL naming needs to follow a template of <code>{modelname}_{method}</code> where the model name is lowercased model class name from <code>models.py</code> and method is the purpose of the view. E.g. <code>_list</code>, <code>_add</code>, <code>_edit</code>.</li> <li>The default rendering context for the <code>ObjectListView</code> includes some standard <code>action_buttons</code> for interacting with the listed model. By default this view defines <code>action_buttons = (\"add\", \"import\", \"export\")</code>. The <code>export</code> action is handled automatically by <code>ObjectListView</code>, but the <code>add</code> and <code>import</code> actions need corresponding views in order to work. In other words, if you implement an <code>ObjectListView</code> and do not override its <code>action_buttons</code>, you must also implement and register the corresponding <code>ObjectEditView</code> and <code>BulkImportView</code> subclasses as well.</li> </ul> <p>Warning</p> <p>If you're missing any of the aforementioned URLs/Views, when accessing your list view it will result in a error <code>Reverse for 'None' not found. 'None' is not a valid view function or pattern name.</code></p> <p>If you do not need <code>ObjectEditView</code> and/or <code>BulkImportView</code> for your particular model, as an alternative you can simply update your <code>ObjectListView</code> subclass to overload the action buttons.  For example, <code>action_buttons = (\"add\",)</code> or if none are required <code>action_buttons = ()</code>.</p> <p>To demonstrate these concepts we can look at the <code>example_plugin</code> included in the Nautobot repository.</p> <p>The example plugin has a simple model called <code>ExampleModel</code>:</p> <pre><code>class ExampleModel(OrganizationalModel):\nname = models.CharField(max_length=20, help_text=\"The name of this Example.\")\nnumber = models.IntegerField(default=100, help_text=\"The number of this Example.\")\nclass Meta:\nordering = [\"name\"]\n</code></pre> <p>The list view for this model subclasses <code>generic.ObjectListView</code> and does not overload the <code>action_buttons</code>:</p> <pre><code>class ExampleModelListView(generic.ObjectListView):\n\"\"\"List `ExampleModel` objects.\"\"\"\nqueryset = ExampleModel.objects.all()\nfilterset = filters.ExampleModelFilterSet\nfilterset_form = forms.ExampleModelFilterForm\ntable = tables.ExampleModelTable\n</code></pre> <p>Info</p> <p>Since <code>action_buttons</code> was not overloaded, <code>action_buttons = (\"add\", \"import\", \"export\")</code> is inherited.</p> <p>In order for this to work properly we expect to see <code>urls.py</code> have each of the required URLs/Views implemented with the template mentioned above.</p> <pre><code>urlpatterns = [\n...\npath(\"models/\", views.ExampleModelListView.as_view(),name=\"examplemodel_list\"),\npath(\"models/add/\", views.ExampleModelEditView.as_view(), name=\"examplemodel_add\"),\n...\npath(\n\"models/import/\",\nviews.ExampleModelBulkImportView.as_view(),\nname=\"examplemodel_import\",\n),\n...\n]\n</code></pre>"},{"location":"development/core/getting-started.html","title":"Getting Started","text":""},{"location":"development/core/getting-started.html#git-branches","title":"Git Branches","text":"<p>The Nautobot project follows a branching model based on Git-flow. As such, there are three persistent git branches:</p> <ul> <li><code>main</code> - Serves as a snapshot of the current stable release</li> <li><code>develop</code> - All bug fixes and minor feature development on the upcoming stable release occurs here</li> <li><code>next</code> - All major new feature development for the next feature release occurs here.</li> </ul> <p>You will always base pull requests off of either the <code>develop</code> branch, for fixes and minor features, or <code>next</code>, if you're working on a feature targeted for a later release. Never target fix or feature pull requests into the <code>main</code> branch, which receives merges only from the <code>develop</code> branch and only for new stable releases of Nautobot.</p>"},{"location":"development/core/getting-started.html#forking-the-repo","title":"Forking the Repo","text":"<p>When developing Nautobot, you'll be working on your own fork, so your first step will be to fork the official GitHub repository. You will then clone your GitHub fork locally for development.</p> <p>Note</p> <p>It is highly recommended that you use SSH with GitHub. If you haven't already, make sure that you setup Git and add an SSH key to your GitHub account before proceeding.</p> <p>In this guide, SSH will be used to interact with Git.</p> <pre><code>git clone git@github.com:yourusername/nautobot.git\n</code></pre> <p>Example output:</p> <pre><code>Cloning into 'nautobot'...\nremote: Enumerating objects: 231, done.\nremote: Counting objects: 100% (231/231), done.\nremote: Compressing objects: 100% (147/147), done.\nremote: Total 56705 (delta 134), reused 145 (delta 84), pack-reused 56474\nReceiving objects: 100% (56705/56705), 27.96 MiB | 34.92 MiB/s, done.\nResolving deltas: 100% (44177/44177), done.\n</code></pre> <pre><code>ls nautobot/\n</code></pre> <p>Example output:</p> <pre><code>CHANGELOG.md            development             nautobot.code-workspace\nCODE_OF_CONDUCT.md      docker                  poetry.lock\nCONTRIBUTING.md         docs                    pyproject.toml\nLICENSE.txt             examples                renovate.json\nNOTICE                  install.sh              scripts\nREADME.md               invoke.yml.example      tasks.py\nSECURITY.md             mkdocs.yml\nchanges                 nautobot\n</code></pre>"},{"location":"development/core/getting-started.html#about-remote-repos","title":"About Remote Repos","text":"<p>Git refers to remote repositories as remotes. When you make your initial clone of your fork, Git defaults to naming this remote <code>origin</code>. Throughout this documentation, the following remote names will be used:</p> <ul> <li><code>origin</code> - The default remote name used to refer to your fork of Nautobot</li> <li><code>upstream</code> - The main remote used to refer to the official Nautobot repository</li> </ul>"},{"location":"development/core/getting-started.html#setting-up-your-remotes","title":"Setting up your Remotes","text":"<p>Remote repos are managed using the <code>git remote</code> command.</p> <p>Upon cloning Nautobot for the first time, you will have only a single remote:</p> <pre><code>git remote -v\n</code></pre> <p>Example output:</p> <pre><code>origin  git@github.com:yourusername/nautobot.git (fetch)\norigin  git@github.com:yourusername/nautobot.git (push)\n</code></pre> <p>Add the official Nautobot repo as a the <code>upstream</code> remote:</p> <pre><code>git remote add upstream git@github.com:nautobot/nautobot.git\n</code></pre> <p>View your remotes again to confirm you've got both <code>origin</code> pointing to your fork and <code>upstream</code> pointing to the official repo:</p> <pre><code>git remote -v\n</code></pre> <p>Example output:</p> <pre><code>origin  git@github.com:yourusername/nautobot.git (fetch)\norigin  git@github.com:yourusername/nautobot.git (push)\nupstream    git@github.com:nautobot/nautobot.git (fetch)\nupstream    git@github.com:nautobot/nautobot.git (push)\n</code></pre> <p>You're now ready to proceed to the next steps.</p> <p>Hint</p> <p>You will always push changes to <code>origin</code> (your fork) and pull changes from <code>upstream</code> (official repo).</p>"},{"location":"development/core/getting-started.html#creating-a-branch","title":"Creating a Branch","text":"<p>Before you make any changes, always create a new branch. Again, for bug fixes and minor features, you'll want to create your branches from the <code>develop</code> branch, while for major new features, you'll branch from <code>next</code> instead.</p> <p>Before you ever create a new branch, always checkout the appropriate branch and make sure you you've got the latest changes from <code>upstream</code>:</p> <pre><code>git checkout develop\ngit pull upstream develop\n</code></pre> <p>Warning</p> <p>If you do not do this, you run the risk of having merge conflicts in your branch, and that's never fun to deal with. Trust us on this one.</p> <p>Now that you've got the latest upstream changes, create your branch. Whether you're creating a branch off a fork or working against the Nautobot origin repo, you should follow this convention for naming your branch: <code>u/yourusername-0000-branch-summary</code>, where <code>0000</code> is the related GitHub issue number and <code>yourusername</code> is your GitHub username. For example:</p> <pre><code>git checkout -b u/yourusername-1234-next-amazing-feature\n</code></pre> <p>If you do not have a relevant GitHub issue, please consider opening one to document the context behind your changes.</p>"},{"location":"development/core/getting-started.html#prototypes","title":"Prototypes","text":"<p>Sometimes code is written as a proof of concept or early implementation candidate but is not quite ready to be merged, or may be picked up by another author sometime in the future. In that case, the convention is to use the <code>prototype/</code> prefix to the branch name and not requiring the original authors username. In that scenario, using the example above, you would instead:</p> <pre><code>git checkout -b prototype/1234-next-amazing-feature\n</code></pre>"},{"location":"development/core/getting-started.html#enabling-pre-commit-hooks","title":"Enabling Pre-Commit Hooks","text":"<p>Nautobot ships with a Git pre-commit hook script that automatically checks for style compliance and missing database migrations prior to committing changes. This helps avoid erroneous commits that result in CI test failures.</p> <p>Note</p> <p>This pre-commit hook currently only supports the Python Virtual Environment Workflow.</p> <p>You are encouraged to enable it by creating a link to <code>scripts/git-hooks/pre-commit</code>:</p> <pre><code>cd .git/hooks/\nln -s ../../scripts/git-hooks/pre-commit\n</code></pre>"},{"location":"development/core/getting-started.html#setting-up-your-development-environment","title":"Setting up your Development Environment","text":"<p>Getting started with Nautobot development is pretty straightforward, and should feel very familiar to anyone with Django development experience. We can recommend either a Docker Compose workflow (if you don't want to install dependencies such as PostgreSQL and Redis directly onto your system) or a Python virtual environment workflow.</p>"},{"location":"development/core/getting-started.html#windows-development","title":"Windows Development","text":"<p>The Docker Compose development workflow on Windows Subsystem for Linux (WSL) has been tested successfully with Docker Desktop using the WSL2 backend and the Ubuntu 20.04 WSL2 distribution. The Poetry workflow has also been tested successfully on the Ubuntu 20.04 WSL2 distribution.</p> <p>To install WSL2 and Ubuntu follow the instructions from the WSL installation guide or if running Windows 10 version 2004 and higher you can open an administrator Powershell terminal and enter the following command:</p> <pre><code>wsl --install\n</code></pre> <p>This will install the WSL2 Ubuntu distribution. Reboot if prompted. After the image installs successfully you may install Docker Desktop with the WSL2 backend.</p>"},{"location":"development/core/getting-started.html#docker-compose-workflow","title":"Docker Compose Workflow","text":"<p>This workflow uses Docker and Docker Compose and assumes that you have them installed.</p> <p>For the Docker Compose workflow, Nautobot uses Invoke as a replacement for Make. Invoke was chosen because it is less arcane than make. Instead of a <code>Makefile</code>, Invoke reads the <code>tasks.py</code> in the project root.</p> <p>Note</p> <p>Although the Docker Compose workflow uses containers, it is important to note that the containers are running the local repository code on your machine. Changes you make to your local code will be picked up and executed by the containers.</p>"},{"location":"development/core/getting-started.html#install-invoke","title":"Install Invoke","text":"<p>Because it is used to execute all common Docker workflow tasks, Invoke must be installed for your user environment. On most systems, if you're installing without root/superuser permissions, the default will install into your local user environment.</p> <pre><code>pip3 install invoke\n</code></pre> <p>If you run into issues, you may also deliberately tell <code>pip3</code> to install into your user environment by adding the <code>--user</code> flag:</p> <pre><code>pip3 install --user invoke\n</code></pre> <p>Please see the official documentation on Pip user installs for more information.</p>"},{"location":"development/core/getting-started.html#list-invoke-tasks","title":"List Invoke Tasks","text":"<p>Now that you have an <code>invoke</code> command, list the tasks defined in <code>tasks.py</code>:</p> <pre><code>invoke --list\n</code></pre> <p>Example output:</p> <pre><code>Available tasks:\n\n  black                  Check Python code style with Black.\n  build                  Build Nautobot docker image.\n  build-and-check-docs   Build docs for use within Nautobot.\n  build-dependencies\n  buildx                 Build Nautobot docker image using the experimental buildx docker functionality (multi-arch\n                         capability).\n  check-migrations       Check for missing migrations.\n  check-schema           Render the REST API schema and check for problems.\n  cli                    Launch a bash shell inside the running Nautobot (or other) Docker container.\n  createsuperuser        Create a new Nautobot superuser account (default: \"admin\"), will prompt for password.\n  debug                  Start Nautobot and its dependencies in debug mode.\n  destroy                Destroy all containers and volumes.\n  docker-push            Tags and pushes docker images to the appropriate repos, intended for release use only.\n  dumpdata               Dump data from database to db_output file.\n  eslint                 Check for ESLint rule compliance and other style issues.\n  flake8                 Check for PEP8 compliance and other style issues.\n  hadolint               Check Dockerfile for hadolint compliance and other style issues.\n  integration-test       Run Nautobot integration tests.\n  loaddata               Load data from file.\n  makemigrations         Perform makemigrations operation in Django.\n  migration-test         Test database migration from a given dataset to latest Nautobot schema.\n  markdownlint           Lint Markdown files.\n  migrate                Perform migrate operation in Django.\n  nbshell                Launch an interactive Nautobot shell.\n  performance-test       Run Nautobot performance tests.\n  post-upgrade           Performs Nautobot common post-upgrade operations using a single entrypoint.\n  prettier               Check Node.JS code style with Prettier.\n  pylint                 Perform static analysis of Nautobot code.\n  restart                Gracefully restart containers.\n  serve-docs             Runs local instance of mkdocs serve (ctrl-c to stop).\n  start                  Start Nautobot and its dependencies in detached mode.\n  stop                   Stop Nautobot and its dependencies.\n  tests                  Run all linters and unit tests.\n  unittest               Run Nautobot unit tests.\n  unittest-coverage      Report on code test coverage as measured by 'invoke unittest'.\n  unittest-ui            Run Nautobot UI unit tests.\n  vscode                 Launch Visual Studio Code with the appropriate Environment variables to run in a container.\n</code></pre>"},{"location":"development/core/getting-started.html#using-docker-with-invoke","title":"Using Docker with Invoke","text":"<p>A development environment can be easily started up from the root of the project using the following commands:</p> <ul> <li><code>invoke build</code> - Builds Nautobot docker images</li> <li><code>invoke migrate</code> - Performs database migration operation in Django</li> <li><code>invoke createsuperuser</code> - Creates a superuser account for the Nautobot application</li> <li><code>invoke debug</code> - Starts Docker containers for Nautobot, PostgreSQL, Redis, Celery, and Celery Beat in debug mode and attaches their output to the terminal in the foreground. You may enter Control-C to stop the containers</li> </ul> <p>Additional useful commands for the development environment:</p> <ul> <li><code>invoke start [-s servicename]</code> - Starts Docker containers for Nautobot, PostgreSQL, Redis, NGINX, Node.js, Celery, and Celery Beat (or a specific container/service, such as <code>invoke start -s redis</code>) to run in the background with debug disabled</li> <li><code>invoke cli [-s servicename]</code> - Launch a <code>bash</code> shell inside the specified service container (if none is specified, defaults to the Nautobot container)</li> <li><code>invoke stop [-s servicename]</code> - Stops all containers (or a specific container/service) created by <code>invoke start</code></li> </ul> <p>Note</p> <p>The <code>mkdocs</code> and <code>storybook</code> containers (see later) are not started automatically by <code>invoke start</code> or <code>invoke debug</code>. If desired, these may be started manually with <code>invoke start -s mkdocs</code> or <code>invoke start -s storybook</code> as appropriate.</p> <p>Tip</p> <p>The Nautobot server uses a Django webservice and worker uses watchdog to provide automatic reload of your web and worker servers in most cases when using <code>invoke start</code> or <code>invoke debug</code>.</p> <p>Tip</p> <p>To learn about advanced use cases within the Docker Compose workflow, see the Docker Compose Advanced Use Cases page.</p> <p>Proceed to the Working in your Development Environment section</p>"},{"location":"development/core/getting-started.html#python-virtual-environment-workflow","title":"Python Virtual Environment Workflow","text":"<p>This workflow uses Python and Poetry to work with your development environment locally. It requires that you install the required system dependencies on your system yourself.</p> <p>There are a few things you'll need:</p> <ul> <li>A Linux system or environment</li> <li>A MySQL or PostgreSQL server, which can be installed locally per the documentation</li> <li>A Redis server, which can also be installed locally</li> <li>A supported version of Python</li> <li>A recent version of Poetry</li> </ul>"},{"location":"development/core/getting-started.html#install-poetry","title":"Install Poetry","text":"<p>Poetry is a tool for dependency management and packaging in Python. It allows you to declare the libraries your project depends on and it will manage (install/update/remove) them for you. It will also manage virtual environments automatically, and allow for publishing packages to the Python Package Index.</p> <p>You may install Poetry in your user environment by running:</p> <pre><code>curl -sSL https://install.python-poetry.org | python3 -\n</code></pre> <p>Changed in version 1.5.6</p> <p>Poetry 1.3+ is required to be able to install packages against the latest lockfile.</p> <p>Danger</p> <p>Always utilize this documented method to install Poetry for use when developing Nautobot.</p> <p>Never use <code>pip</code> to install Poetry into your Nautobot virtual environment, as it will result in dependency version conflicts that will very likely break Nautobot. Poetry is used as a package manager for Python packages, so you should not install it into the Nautobot environment, because it relies upon a number of the same dependencies as Nautobot, but with conflicting versions.</p> <p>While there are certain cases where running <code>pip install poetry</code> is valid, such as in Nautobot's automated release deployments where Nautobot is not actually installed, installing Poetry into Nautobot's runtime development environment is not one of them!</p> <p>For detailed installation instructions, please see the official Poetry installation guide.</p>"},{"location":"development/core/getting-started.html#install-hadolint","title":"Install Hadolint","text":"<p>Hadolint is a tool used to validate and lint Dockerfiles to ensure we are following best practices. On macOS with Homebrew you can install Hadolint by running:</p> <pre><code>brew install hadolint\n</code></pre>"},{"location":"development/core/getting-started.html#install-markdownlint-cli","title":"Install markdownlint-cli","text":"<p>markdownlint-cli is a tool used to validate and lint Markdown files, such as Nautobot's documentation, to ensure that they are correctly constructed. On macOS with Homebrew you can install markdownlint-cli by running:</p> <pre><code>brew install markdownlint-cli\n</code></pre>"},{"location":"development/core/getting-started.html#install-nodejs-and-npm","title":"Install Node.JS and npm","text":"<p>npm is the tool used to install and compile the Nautobot front-end UI. On macOS with Homebrew you can install npm by running:</p> <pre><code>brew install node@18\n</code></pre> <p>You should then move to the <code>nautobot/ui/</code> subdirectory and run <code>npm ci</code> to install all of the JS dependencies for local development of the Nautobot UI:</p> <pre><code>npm ci\n</code></pre> <p>Be sure to switch back to the base directory of the repository after you do this.</p>"},{"location":"development/core/getting-started.html#creating-a-python-virtual-environment","title":"Creating a Python Virtual Environment","text":"<p>A Python virtual environment (or virtualenv) is like a container for a set of Python packages. A virtualenv allow you to build environments suited to specific projects without interfering with system packages or other projects. When installed per the documentation, Nautobot uses a virtual environment in production.</p> <p>For Nautobot development, we have selected Poetry, which will transparently create a virtualenv for you, automatically install all dependencies required for Nautobot to operate, and will also install the <code>nautobot-server</code> CLI command that you will utilize to interact with Nautobot from here on out.</p> <p>Bootstrap your virtual environment using <code>poetry install</code>:</p> <pre><code>poetry install\n</code></pre> <p>Hint</p> <p>If you are doing development or testing using MySQL, you may quickly install the <code>mysqlclient</code> library along with Nautobot by running <code>poetry install --extras mysql</code>.</p> <p>This will create automatically create a virtualenv in your home directory, which houses a virtual copy of the Python executable and its related libraries and tooling. When running Nautobot for development, it will be run using the Python binary at found within the virtualenv.</p> <p>Once created, you may activate the virtual environment using <code>poetry shell</code>:</p> <pre><code>poetry shell\n</code></pre> <p>Example output:</p> <pre><code>Spawning shell within /home/example/.cache/pypoetry/virtualenvs/nautobot-Ams_xyDt-py3.8\n\n. /home/example/.cache/pypoetry/virtualenvs/nautobot-Ams_xyDt-py3.8/bin/activate\n(nautobot-Ams_xyDt-py3.8) $\n</code></pre> <p>Notice that the console prompt changes to indicate the active environment. This updates the necessary system environment variables to ensure that any Python scripts are run within the virtual environment.</p> <p>Observe also that the <code>python</code> interpreter is bound within the virtualenv:</p> <pre><code>which python\n</code></pre> <p>Example output:</p> <pre><code>(nautobot-Ams_xyDt-py3.8) $ /home/example/.cache/pypoetry/virtualenvs/nautobot-Ams_xyDt-py3.8/bin/python\n</code></pre> <p>To exit the virtual shell, use <code>exit</code>:</p> <pre><code>exit\n</code></pre> <p>Example output:</p> <pre><code>$\n</code></pre>"},{"location":"development/core/getting-started.html#working-with-poetry","title":"Working with Poetry","text":"<p>Poetry automatically installs your dependencies. However, if you need to install any additional dependencies this can be done with <code>pip</code>. For example, if you really like using <code>ipython</code> for development:</p> <pre><code>pip3 install ipython\n</code></pre> <p>Example output:</p> <pre><code>Collecting ipython\n  Using cached ipython-7.20.0-py3-none-any.whl (784 kB)\n  ...\n</code></pre> <ul> <li>Install verify that you have the proper dependencies installed and are in the virtual environment via Poetry. This also ensures that you have the proper mkdocs themes installed.</li> </ul> <pre><code>poetry shell\npoetry install\n</code></pre> <p>It may not always be convenient to enter into the virtual shell just to run programs. You may also execute a given command ad hoc within the project's virtual shell by using <code>poetry run</code>:</p> <pre><code>poetry run mkdocs serve\n</code></pre> <p>Check out the Poetry usage guide for more tips.</p>"},{"location":"development/core/getting-started.html#configuring-nautobot","title":"Configuring Nautobot","text":"<p>Note</p> <p>Unless otherwise noted, all following commands should be executed inside the virtualenv.</p> <p>Hint</p> <p>Use <code>poetry shell</code> to enter the virtualenv.</p> <p>Nautobot's configuration file is <code>nautobot_config.py</code>.</p>"},{"location":"development/core/getting-started.html#initializing-a-config","title":"Initializing a Config","text":"<p>You may also initialize a new configuration using <code>nautobot-server init</code>:</p> <pre><code>nautobot-server init\n</code></pre> <p>Example output:</p> <pre><code>Nautobot would like to send anonymized installation metrics to the project's maintainers.\nThese metrics include the installed Nautobot version, the Python version in use, an anonymous \"deployment ID\", and a list of one-way-hashed names of enabled Nautobot Apps and their versions.\nAllow Nautobot to send these metrics? [y/n]: n\nInstallation metrics will not be sent by default.\nConfiguration file created at /home/example/.nautobot/nautobot_config.py\n</code></pre> <p>You may also specify alternate file locations. Please refer to Configuring Nautobot for how to do that.</p>"},{"location":"development/core/getting-started.html#using-the-development-config","title":"Using the Development Config","text":"<p>A <code>nautobot_config.py</code> suitable for development purposes can be found at <code>development/nautobot_config.py</code>. You may customize the values there or utilize environment variables to override the default values.</p> <p>If you want to use this file, initialize a config first, then copy this file to the default location Nautobot expects to find its config:</p> <pre><code>cp development/nautobot_config.py ~/.nautobot/nautobot_config.py\n</code></pre>"},{"location":"development/core/getting-started.html#required-settings","title":"Required Settings","text":"<p>A newly created configuration includes sane defaults. If you need to customize them, edit your <code>nautobot_config.py</code> and update the following settings as required:</p> <ul> <li><code>ALLOWED_HOSTS</code>: This can be set to <code>[\"*\"]</code> for development purposes and must be set if <code>DEBUG=False</code></li> <li><code>DATABASES</code>: Database connection parameters, if different from the defaults</li> <li>Redis settings: Redis configuration requires multiple settings. The defaults should be fine for development.</li> <li><code>DEBUG</code>: Set to <code>True</code> to enable verbose exception logging and, if installed, the Django debug toolbar</li> <li><code>EXTRA_INSTALLED_APPS</code>: Optionally provide a list of extra Django apps/plugins you may desire to use for development</li> </ul>"},{"location":"development/core/getting-started.html#working-in-your-development-environment","title":"Working in your Development Environment","text":"<p>Below are common commands for working your development environment.</p>"},{"location":"development/core/getting-started.html#creating-a-superuser","title":"Creating a Superuser","text":"<p>You'll need to create a administrative superuser account to be able to log into the Nautobot Web UI for the first time. Specifying an email address for the user is not required, but be sure to use a very strong password.</p> Docker Compose Workflow Virtual Environment Workflow <code>invoke createsuperuser</code> <code>nautobot-server createsuperuser</code>"},{"location":"development/core/getting-started.html#starting-the-development-server","title":"Starting the Development Server","text":"<p>Django provides a lightweight HTTP/WSGI server for development use. The development server automatically reloads Python code for each request, as needed. You don\u2019t need to restart the server for code changes to take effect. However, some actions like adding files don\u2019t trigger a restart, so you\u2019ll have to restart the server in these cases.</p> <p>Danger</p> <p>DO NOT USE THIS SERVER IN A PRODUCTION SETTING. The development server and watchdog is for development and testing purposes only. It is neither performant nor secure enough for production use.</p> <p>You can start the Nautobot development server with the <code>invoke start</code> command (if using Docker), or the <code>nautobot-server runserver</code> management command:</p> Docker Compose Workflow Virtual Environment Workflow <code>invoke start</code> <code>nautobot-server runserver</code> <p>For example:</p> <pre><code>nautobot-server runserver\n</code></pre> <p>Example output:</p> <pre><code>Performing system checks...\n\nSystem check identified no issues (0 silenced).\nNovember 18, 2020 - 15:52:31\nDjango version 3.1, using settings 'nautobot.core.settings'\nStarting development server at http://127.0.0.1:8080/\nQuit the server with CONTROL-C.\n</code></pre> <p>Warning</p> <p>Do not use <code>poetry run nautobot-server runserver</code> as it will crash unless you also pass the <code>--noreload</code> flag, which somewhat defeats the purpose of using the development server. It is recommended to use <code>nautobot-server runserver</code> from within an active virtualenv (e.g. <code>poetry shell</code>). This is a known issue with Django and Poetry.</p> <p>Please see the official Django documentation on <code>runserver</code> for more information.</p> <p>Note</p> <p>When first started in Docker Compose, the Nautobot development server container will automatically install dependencies for building the React UI for Nautobot, then build this UI. This may take several minutes before the server becomes ready to accept web connections.</p> <p>You can connect to the development server at <code>localhost:8080</code>, but normally you'll want to connect to the Node.js server instead (see below).</p>"},{"location":"development/core/getting-started.html#starting-the-nodejs-server","title":"Starting the Node.js Server","text":"<p>In development, you should run a Node.js server instance as well. This will handle automatically rebuilding the UI when you make changes in the <code>nautobot/ui</code> directory.</p> Docker Compose Workflow Virtual Environment Workflow <code>invoke start</code> <code>cd nautobot/ui; npm run start</code> <p>Note</p> <p>In the Docker Compose workflow, the Node.js server will delay starting until the Nautobot development server has finished the initial UI build, which may take several minutes. This is normal.</p> <p>You can connect to the Node.js server at <code>localhost:3000</code>.</p>"},{"location":"development/core/getting-started.html#starting-the-storybook-server","title":"Starting the Storybook Server","text":"<p>When working on the UI, you may find it useful to run a Storybook instance that provides interactive documentation of the <code>nautobot-ui</code> library used by Nautobot's user interface.</p> Docker Compose Workflow Virtual Environment Workflow <code>invoke start -s storybook</code> <code>TODO</code> <p>Note</p> <p>This container is not started by default when using <code>invoke start</code>. You must individually start it using <code>invoke start -s storybook</code>.</p> <p>You can connect to Storybook at <code>localhost:6006</code>.</p>"},{"location":"development/core/getting-started.html#starting-the-worker-server","title":"Starting the Worker Server","text":"<p>In order to run Nautobot Jobs or anything that requires a worker you must start a Celery worker.</p> <p>The worker is started in Docker Workflow with watchdog and can be setup to be started with watchdog in the Virtual Environment Workflow. Watchdog provides a similar experience to the Django lightweight HTTP/WSGI for restarting your application automatically. Watchdog can watch for changes on your filesystem, this is helpful when adjusting existing Python files to not have to restart the celery worker when testing jobs.</p> Docker Compose Workflow Virtual Environment Workflow <code>invoke start</code> <code>nautobot-server celery worker</code> <p>Tip</p> <p>You can leverage watchdog for your celery worker as described above, with the following watchmedo command in your development environment <code>watchmedo auto-restart --directory './' --pattern '*.py' --recursive -- nautobot-server celery worker -l INFO --events</code>.</p>"},{"location":"development/core/getting-started.html#starting-the-interactive-shell","title":"Starting the Interactive Shell","text":"<p>Nautobot provides an interactive Python shell that sets up the server environment and gives you direct access to the database models for debugging. Nautobot extends this slightly to automatically import models and other utilities.</p> <p>Run the Nautobot interactive shell with <code>invoke nbshell</code> (Docker) or the <code>nautobot-server nbshell</code> management command:</p> Docker Compose Workflow Virtual Environment Workflow <code>invoke nbshell</code> <code>nautobot-server nbshell</code> <p>For example:</p> <pre><code>nautobot-server nbshell\n</code></pre> <p>Example output:</p> <pre><code># Shell Plus Model Imports\n...\n# Shell Plus Django Imports\n...\n# Django version 3.2.16\n# Nautobot version 2.0.0a0\n# Example Nautobot App version 1.0.0\nPython 3.8.16 (default, Mar 23 2023, 04:48:11)\n[GCC 10.2.1 20210110] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n&gt;&gt;&gt;\n</code></pre>"},{"location":"development/core/getting-started.html#post-upgrade-operations","title":"Post-upgrade Operations","text":"<p>There will be times where you're working with the bleeding edge of Nautobot from the <code>develop</code> branch or feature branches and will need to pull in database changes or run server operations.</p> <p>Get into the habit of running <code>nautobot-server post_upgrade</code> (or <code>invoke post-upgrade</code> when using Docker) after you pull in a major set of changes from Nautobot, which performs a handful of common operations (such as <code>migrate</code>) from a single command:</p> Docker Compose Workflow Virtual Environment Workflow <code>invoke post-upgrade</code> <code>nautobot-server post_upgrade</code> <p>Please see the documentation on the <code>nautobot-server post_upgrade</code> command for more information.</p>"},{"location":"development/core/getting-started.html#reinstalling-nautobot","title":"Reinstalling Nautobot","text":"<p>Note</p> <p>This mostly applies to working with Nautobot in a virtualenv, since Docker containers are typically rebuilt when the code changes.</p> <p>Sometimes when files are renamed, moved, or deleted and you've been working in the same environment for a while, you can encounter weird behavior. If this happens, don't panic and nuke your environment.</p> <p>First, use <code>pip3</code> to explicitly uninstall the Nautobot package from the environment:</p> <pre><code>pip3 uninstall -y nautobot\n</code></pre> <p>Example output:</p> <pre><code>Found existing installation: nautobot 1.0.0b2\nUninstalling nautobot-1.0.0b2:\n  Successfully uninstalled nautobot-1.0.0b2\n</code></pre> <p>Then try to just have Poetry do the right thing by telling it to install again:</p> <pre><code>poetry install\n</code></pre> <p>Example output:</p> <pre><code>Installing dependencies from lock file\n\nNo dependencies to install or update\n\nInstalling the current project: nautobot (1.0.0-beta.2)\n</code></pre>"},{"location":"development/core/getting-started.html#running-tests","title":"Running Tests","text":"<p>Throughout the course of development, it's a good idea to occasionally run Nautobot's test suite to catch any potential errors. Tests come in two primary flavors: Unit tests and integration tests.</p> <p>For information about writing tests, refer to the testing documentation.</p>"},{"location":"development/core/getting-started.html#unit-tests","title":"Unit Tests","text":"<p>Unit tests are automated tests written and run to ensure that a section of the Nautobot application (known as the \"unit\") meets its design and behaves as intended and expected. Most commonly as a developer of or contributor to Nautobot you will be writing unit tests to exercise the code you have written. Unit tests are not meant to test how the application behaves, only the individual blocks of code, therefore use of mock data and phony connections is common in unit test code. As a guiding principle, unit tests should be fast, because they will be executed quite often.</p> <p>Unit tests are run using the <code>invoke unittest</code> command (if using the Docker development environment) or the <code>nautobot-server test</code> command:</p> Docker Compose Workflow Virtual Environment Workflow <code>invoke unittest</code> <code>nautobot-server --config=nautobot/core/tests/nautobot_config.py test nautobot</code> <p>Info</p> <p>By default <code>invoke unittest</code> will start and run the unit tests inside the Docker development container; this ensures that PostgreSQL and Redis servers are available during the test. However, if you have your environment configured such that <code>nautobot-server</code> can run locally, outside of the Docker environment, you may wish to set the environment variable <code>INVOKE_NAUTOBOT_LOCAL=True</code> to execute these tests in your local environment instead.</p> <p>In cases where you haven't made any changes to the database (which is most of the time), you can append the <code>--keepdb</code> argument to this command to reuse the test database between runs. This cuts down on the time it takes to run the test suite since the database doesn't have to be rebuilt each time.</p> Docker Compose Workflow Virtual Environment Workflow <code>invoke unittest --keepdb</code> <code>nautobot-server --config=nautobot/core/tests/nautobot_config.py test --keepdb nautobot</code> <p>Note</p> <p>Using the <code>--keepdb</code> argument will raise errors if you've modified any model fields since the previous test run.</p> <p>Warning</p> <p>In some cases when tests fail and exit uncleanly it may leave the test database in an inconsistent state. If you encounter errors about missing objects, remove <code>--keepdb</code> and run the tests again.</p> <p>Changed in version 1.5.11</p> <p>The <code>--cache-test-fixtures</code> argument was added to the <code>invoke unittest</code> and <code>nautobot-server test</code> commands to allow for caching of test factory data between test runs. See the factories documentation for more information.</p>"},{"location":"development/core/getting-started.html#integration-tests","title":"Integration Tests","text":"<p>Integration tests are automated tests written and run to ensure that the Nautobot application behaves as expected when being used as it would be in practice. By contrast to unit tests, where individual units of code are being tested, integration tests rely upon the server code actually running, and web UI clients or API clients to make real connections to the service to exercise actual workflows, such as navigating to the login page, filling out the username/passwords fields, and clicking the \"Log In\" button.</p> <p>Running integrations tests requires the use of Docker at this time. They can be directly invoked using <code>nautobot-server test</code> just as unit tests can, however, a headless Firefox browser provided by Selenium is required. Because Selenium installation and setup is complicated, we have included a configuration for this to work out of the box using Docker.</p> <p>The Selenium container is running a standalone, headless Firefox \"web driver\" browser that can be remotely controlled by Nautobot for use in integration testing.</p> <p>Before running integration tests, the <code>selenium</code> container must be running. If you are using the Docker Compose workflow, it is automatically started for you. For the Virtual Environment workflow, you must start it manually.</p> Docker Compose Workflow Virtual Environment Workflow (automatic) <code>invoke start --service selenium</code> <p>Integration tests are run using the <code>invoke integration-test</code> command. All integration tests must inherit from <code>nautobot.core.testing.integration.SeleniumTestCase</code>, which itself is tagged with <code>integration</code>. A custom test runner has been implemented to automatically skip any test case tagged with <code>integration</code> by default, so normal unit tests run without any concern. To run the integration tests the <code>--tag integration</code> argument must be passed to <code>nautobot-server test</code>.</p> <p>Changed in version 2.0.0</p> <p><code>SeleniumTestCase</code> was moved from the <code>nautobot.utilities.testing.integration</code> module to <code>nautobot.core.testing.integration</code>.</p> Docker Compose Workflow Virtual Environment Workflow <code>invoke integration-test</code> <code>nautobot-server --config=nautobot/core/tests/nautobot_config.py test --tag integration nautobot</code> <p>Info</p> <p>The same arguments supported by <code>invoke unittest</code> are supported by <code>invoke integration-test</code>. The key difference being the dependency upon the Selenium container, and inclusion of the <code>integration</code> tag.</p> <p>Tip</p> <p>You may also use <code>invoke integration-test</code> in the Virtual Environment workflow given that the <code>selenium</code> container is running, and that the <code>INVOKE_NAUTOBOT_LOCAL=True</code> environment variable has been set.</p> <p>Changed in version 1.5.11</p> <p>The <code>--cache-test-fixtures</code> argument was added to the <code>invoke integration-test</code> and <code>nautobot-server test</code> commands to allow for caching of test factory data between test runs. See the factories documentation for more information.</p>"},{"location":"development/core/getting-started.html#customizing-integration-test-executions","title":"Customizing Integration Test Executions","text":"<p>The following environment variables can be provided when running tests to customize where Nautobot looks for Selenium and where Selenium looks for Nautobot. If using the default setup documented above, there is no need to customize these.</p> <ul> <li><code>NAUTOBOT_SELENIUM_URL</code> - The URL used by the Nautobot test runner to remotely control the headless Selenium Firefox node. You can provide your own, but it must be a <code>Remote</code> WebDriver. (Default: <code>http://localhost:4444/wd/hub</code>; for Docker: <code>http://selenium:4444/wd/hub</code>)</li> <li><code>NAUTOBOT_SELENIUM_HOST</code> - The hostname used by the Selenium WebDriver to access Nautobot using Firefox. (Default: <code>host.docker.internal</code>; for Docker: <code>nautobot</code>)</li> </ul>"},{"location":"development/core/getting-started.html#verifying-the-rest-api-schema","title":"Verifying the REST API Schema","text":"<p>If you make changes to the REST API, you should verify that the REST API OpenAPI schema renders correctly without errors. To verify that there are no errors, you can run the <code>invoke check-schema</code> command (if using the Docker development environment) or the <code>nautobot-server spectacular</code> command. In the latter case you should run the command for each supported REST API version that Nautobot provides (e.g. \"1.2\", \"1.3\")</p> Docker Compose Workflow Virtual Environment Workflow <code>invoke check-schema</code> <code>nautobot-server spectacular --api-version 1.2 --validate --fail-on-warn --file /dev/null</code>"},{"location":"development/core/getting-started.html#verifying-code-style-and-static-analysis","title":"Verifying Code Style and Static Analysis","text":"<p>To enforce best practices around consistent coding style, Nautobot uses Flake8,  Black, ESLint, and Prettier. Additionally, static analysis of Nautobot code is performed by Pylint. You should run all of these commands and ensure that they pass fully with regard to your code changes before opening a pull request upstream.</p> Docker Compose Workflow Virtual Environment Workflow <code>invoke flake8</code> <code>flake8</code> <code>invoke black</code> <code>black</code> <code>invoke eslint</code> <code>npx eslint .</code> <code>invoke prettier</code> <code>npx prettier -c .</code> <code>invoke pylint</code> <code>nautobot-server pylint nautobot tasks.py &amp;&amp; nautobot-server pylint --recursive development/ examples/</code>"},{"location":"development/core/getting-started.html#handling-migrations","title":"Handling Migrations","text":""},{"location":"development/core/getting-started.html#checking-whether-a-new-migration-is-needed","title":"Checking Whether a New Migration is Needed","text":"<p>If you're unsure whether a database schema migration is needed based on your changes, you can run the following command:</p> Docker Compose Workflow Virtual Environment Workflow <code>invoke check-migrations</code> <code>nautobot-server --config=nautobot/core/tests/nautobot_config.py makemigrations --dry-run --check</code>"},{"location":"development/core/getting-started.html#autogenerating-migrations","title":"Autogenerating Migrations","text":"<p>To generate new migrations if the above command indicates that a change is needed, you can run the following command:</p> Docker Compose Workflow Virtual Environment Workflow <code>invoke makemigrations</code> <code>nautobot-server --config=nautobot/core/tests/nautobot_config.py makemigrations</code> <p>If your branch modifies a Django model (and as a result requires a database schema modification), please be sure to provide a meaningful name to the migration before pushing.</p> <ul> <li>If you have yet to run <code>invoke makemigrations</code>, you can pass in a name for the migration with the <code>-n</code> option, example <code>invoke makemigrations -n provider_increase_account_length</code>.</li> <li>If you have already run <code>invoke makemigrations</code>, rename the generated migration files, for example <code>0004_provider_increase_account_length</code> instead of <code>0004_auto_20211220_2104</code>.</li> </ul> <p>You\u2019ll also want to run <code>black</code> against the generated migration file as the autogenerated code doesn\u2019t follow our style guide by default.</p> <p>When modifying model field attributes, modify the test data in the tests too to reflect these changes and also any forms which refer to the model.</p>"},{"location":"development/core/getting-started.html#testing-migrations","title":"Testing Migrations","text":"<p>Nautobot includes a number of data sets under the <code>development/datasets/</code> directory that represent various snapshots of historical database contents. You should validate whether your migrations correctly and successfully handle these datasets by running the <code>invoke migration-test --db-engine [postgres|mysql] --dataset development/datasets/&lt;filename&gt;</code> command (which handles both the Docker Compose workflow as well as the Virtual Environment workflow).</p>"},{"location":"development/core/getting-started.html#working-on-documentation","title":"Working on Documentation","text":"<p>Some features require documentation updates or new documentation to be written. The documentation files can be found in the <code>docs</code> directory. To preview these changes locally, you can use <code>mkdocs</code>.</p> <p>For substantial changes to the code (including new features, removal of existing features, or significant changes in behavior) you should always make corresponding documentation updates. Nautobot's documentation pipeline includes a custom plugin for <code>mkdocs</code> that adds a few useful macros for annotating such changes:</p> <ul> <li><code>+++ 1.4.3</code>, on a line by itself, is a shorthand for <code>!!! version-added \"Added in version 1.4.3\"</code></li> <li><code>+/- 1.4.3</code>, on a line by itself, is a shorthand for <code>!!! version-changed \"Changed in version 1.4.3\"</code></li> <li><code>--- 1.4.3</code>, on a line by itself, is a shorthand for <code>!!! version-removed \"Removed in version 1.4.3\"</code></li> </ul> <p>These admonitions in turn appear in the rendered documentation as follows:</p> <p>Added in version 1.4.3</p> <p>Changed in version 1.4.3</p> <p>Removed in version 1.4.3</p> <p>You can also add text to any of these admonitions for further clarity, for example:</p> <pre><code>+++ 1.4.3\n    The custom `mkdocs` plugin was added.\n</code></pre> <p>will render as:</p> <p>Added in version 1.4.3</p> <p>The custom <code>mkdocs</code> plugin was added.</p> <p>Caution</p> <p>While you can use the <code>version-added</code> / <code>version-changed</code> / <code>version-removed</code> admonitions directly to add a custom title to a specific admonition, in general, you should use the macros for consistency across the documentation.</p>"},{"location":"development/core/getting-started.html#writing-documentation","title":"Writing Documentation","text":"<p>You can preview the documentation using the server built into mkdocs, which should start a web server at <code>http://localhost:8001</code>.</p> Docker Compose Workflow Virtual Environment Workflow <code>invoke start -s mkdocs</code> <code>mkdocs serve</code> <p>Documentation is written in Markdown. If you need to add additional pages or sections to the documentation, you can add them to <code>mkdocs.yml</code> at the root of the repository.</p>"},{"location":"development/core/getting-started.html#verifying-documentation","title":"Verifying Documentation","text":"<p>Nautobot uses <code>markdownlint-cli</code> to verify correctness of the documentation. You should run this command and ensure that it passes fully with regard to your documentation changes before opening a pull request upstream.</p> Docker Compose Workflow Virtual Environment Workflow <code>invoke markdownlint</code> <code>markdownlint --ignore nautobot/project-static --config .markdownlint.yml nautobot examples *.md</code>"},{"location":"development/core/getting-started.html#submitting-pull-requests","title":"Submitting Pull Requests","text":"<p>Once you're happy with your work and have verified that all tests pass, commit your changes and push it upstream to your fork. Always provide descriptive (but not excessively verbose) commit messages. When working on a specific issue, be sure to reference it.</p> <pre><code>git commit -m \"Closes #1234: Add IPv5 support\"\ngit push origin\n</code></pre> <p>Once your fork has the new commit, submit a pull request to the Nautobot repo to propose the changes. Be sure to provide a detailed accounting of the changes being made and the reasons for doing so.</p> <p>Once submitted, a maintainer will review your pull request and either merge it or request changes. If changes are needed, you can make them via new commits to your fork: The pull request will update automatically.</p> <p>Note</p> <p>Remember, pull requests are entertained only for accepted issues. If an issue you want to work on hasn't been approved by a maintainer yet, it's best to avoid risking your time and effort on a change that might not be accepted.</p>"},{"location":"development/core/getting-started.html#troubleshooting","title":"Troubleshooting","text":"<p>Below are common issues you might encounter in your development environment and how to address them.</p>"},{"location":"development/core/getting-started.html#fatal-sorry-too-many-clients-already","title":"FATAL: sorry, too many clients already","text":"<p>When using <code>nautobot-server runserver</code> to do development you might run into a traceback that looks something like this:</p> <pre><code>Exception Type: OperationalError at /extras/tags/\nException Value: FATAL:  sorry, too many clients already\n</code></pre> <p>The <code>runserver</code> development server is multi-threaded by default, which means that every request is creating its own connection. If you are doing some local testing or development that is resulting in a lot of connections to the database, pass <code>--nothreading</code> to the runserver command to disable threading:</p> <pre><code>nautobot-server runserver --nothreading\n</code></pre>"},{"location":"development/core/homepage.html","title":"Populating the Home Page","text":"<p>Added in version 1.2.0</p> <p>Both core applications and plugins can contribute items to the Nautobot home page by defining <code>layout</code> inside of their app's <code>homepage.py</code>. Using a key and weight system, a developer can integrate amongst existing home page panels or can create entirely new panels as desired.</p>"},{"location":"development/core/homepage.html#adding-a-new-home-page-panel","title":"Adding a new Home Page Panel","text":"<p>Each panel on the home page is defined by a <code>HomePagePanel</code> object. A <code>HomePagePanel</code> may contain either or both of <code>HomePageItem</code> and/or <code>HomePageGroup</code> objects, or may define custom content via a referenced Django template. A <code>HomePageGroup</code> may itself contain <code>HomePageItem</code> objects as well, and individual <code>HomePageItem</code> objects may also reference custom Django templates.</p> <p>Some examples:</p> <p></p> <p>This is a single <code>HomePagePanel</code> (defined in <code>nautobot/dcim/homepage.py</code>) containing four <code>HomePageItem</code> and one <code>HomePageGroup</code> (the <code>Connections</code> group, which in turn contains four more <code>HomePageItem</code>). Using these objects together allows you to create panels that match the visual style of most other panels on the Nautobot home page.</p> <p></p> <p>This is a <code>HomePagePanel</code> (defined in <code>nautobot/extras/homepage.py</code>) that uses a custom template to render content that doesn't fit into the <code>HomePageGroup</code>/<code>HomePageItem</code> pattern.</p> <p>The position of a panel in the home page is defined by its <code>weight</code>. The lower the weight the closer to the start (top/left) of the home page the object will be. All core objects have weights in multiples of 100, meaning there is plenty of space around the objects for plugins to customize.</p> <p>In the below code example, you can see that the <code>Example Plugin</code> panel has a <code>weight</code> value of <code>150</code>. This means it will appear between <code>Organization</code> (weight <code>100</code>) and <code>DCIM</code> (weight <code>200</code>).</p> <p>Tip</p> <p>Weights for already existing items can be found in the Nautobot source code (in <code>nautobot/&lt;app&gt;/homepage.py</code>) or with a web session open to your Nautobot instance, you can inspect an element of the home page using the developer tools.</p> <p>Example of custom code being used in a panel can be seen in the <code>Custom Example Plugin</code> panel below. The attribute <code>custom_template</code> is used to refer to the filename of a template. Templates need to be stored in the templates <code>inc</code> folder for the plugin (<code>/example_plugin/templates/example_plugin/inc/</code>).</p> <p>If additional data is needed to render the custom template, callback functions can be used to collect this data. In the below example, the <code>Custom Example Plugin</code> panel is using the callback <code>get_example_data()</code> to dynamically populate the key <code>example_data</code> into the rendering context of this panel.</p> <pre><code>from nautobot.core.apps import HomePageItem, HomePagePanel\nfrom .models import ExampleModel\ndef get_example_data(request):\nreturn ExampleModel.objects.all()\nlayout = (\nHomePagePanel(\nname=\"Example Plugin\",\nweight=150,\nitems=(\nHomePageItem(\nname=\"Example Models\",\nlink=\"plugins:example_plugin:examplemodel_list\",\ndescription=\"List example plugin models.\",\npermissions=[\"example_plugin.view_examplemodel\"],\nweight=100,\n),\n),\n),\nHomePagePanel(\nname=\"Custom Example Plugin\",\ncustom_template=\"panel_example_example.html\",\ncustom_data={\"example_data\": get_example_data},\npermissions=[\"example_plugin.view_examplemodel\"],\nweight=350,\n),\n)\n</code></pre>"},{"location":"development/core/model-features.html","title":"Registry Model Features","text":"<p>A dictionary of particular features (e.g. custom fields) mapped to the Nautobot models which support them, arranged by app.</p>"},{"location":"development/core/model-features.html#add-a-new-feature-to-the-model_features-registry","title":"Add a new feature to the <code>model_features</code> registry","text":"<p>The <code>populate_model_features_registry()</code> function updates the registry model features with new apps. This is done by defining a list of dictionaries called <code>lookup_confs</code>. Each dictionary in <code>lookup_confs</code> contains the following three keys:</p> <ul> <li><code>feature_name</code>: The name of the feature to be updated in the registry.</li> <li><code>field_names</code>: A list of names of fields that must be present in order for the model to be considered a valid <code>model_feature</code>.</li> <li><code>field_attributes</code>: An optional dictionary of attributes used to filter the fields. Only models with fields matching all the attributes specified in the dictionary will be considered. This parameter can be useful to narrow down the search for fields that match certain criteria. For example, if <code>field_attributes</code> is set to <code>{\"related_model\": RelationshipAssociation}</code>, only fields with a <code>related_model</code> of <code>RelationshipAssociation</code> will be considered.</li> </ul> <p>To add a new feature to the <code>lookup_confs</code> list, follow these steps:</p> <ol> <li>Determine the name of the feature to be added, This name should be in <code>snake_case</code> as per convention</li> <li>Determine the names of the fields that must be present in order for the model to be considered a valid <code>model_feature</code>.</li> <li>(Optional) Determine any field attributes that can be used to filter the fields if <code>field_names</code> would not be enough.</li> <li>Add a new dictionary with the following keys to <code>lookup_confs</code> which is in  <code>nautobot.extras.utils.populate_model_features_registry()</code>:<ul> <li><code>feature_name</code>: The name of the feature.</li> <li><code>field_names</code>: The list of names of fields.</li> <li><code>field_attributes</code>: (Optional) The dictionary of attributes to filter the fields.</li> </ul> </li> </ol> <pre><code>from nautobot.extras.models.relationships import RelationshipAssociation\ndef populate_model_features_registry():\n\"\"\"...\"\"\"\nlookup_confs = [\n...,\n{\n\"feature_name\": \"relationships\",\n\"field_names\": [\"source_for_associations\", \"destination_for_associations\"],\n\"field_attributes\": {\"related_model\": RelationshipAssociation},\n},\n...\n]\n</code></pre> <p>With this only Models which have fields names of <code>source_for_associations</code> and <code>destination_for_associations</code>, which in turn has the attribute <code>related_model=RelationshipAssociation</code>, would be a valid model for the feature <code>relationships</code>.</p> <p>Note</p> <p><code>populate_model_features_registry()</code> and <code>lookup_confs</code> provide an alternative to the older method of feature flagging models via the <code>@extras_features</code> decorator. In general new feature flags should preferentially be implemented via additions to <code>lookup_confs</code>, not by any new additions to <code>extras_features</code>.</p>"},{"location":"development/core/natural-keys.html","title":"Natural Keys in Nautobot Models","text":"<p>Added in version 2.0.0</p> <p>Nautobot models derived from <code>BaseModel</code> automatically support the following natural key APIs:</p> <ul> <li>Django's <code>instance.natural_key()</code> and <code>Model.objects.get_by_natural_key()</code> method APIs</li> </ul>"},{"location":"development/core/natural-keys.html#using-the-natural-key-apis","title":"Using the Natural Key APIs","text":"<p>The <code>natural_key()</code> and <code>get_by_natural_key()</code> APIs are symmetric with one another:</p> <pre><code>&gt;&gt;&gt; DeviceType.objects.first().natural_key()\n['MegaCorp', 'Model 9000']\n&gt;&gt;&gt; DeviceType.objects.get_by_natural_key(\"MegaCorp\", \"Model 9000\")\n&lt;DeviceType: Model 9000&gt;\n</code></pre>"},{"location":"development/core/natural-keys.html#implementing-the-natural-key-apis","title":"Implementing the Natural Key APIs","text":"<p>In many model cases, Nautobot's default implementation of these APIs will suffice. As long as your model has any of the following, a default natural key will be automatically made available:</p> <ul> <li>One or more <code>UniqueConstraint</code> declarations</li> <li>Any <code>unique_together</code> declaration</li> <li>Any field (other than <code>id</code>) that is set as <code>unique=True</code>.</li> </ul> <p>There are a few special cases that will need special handling as described below.</p>"},{"location":"development/core/natural-keys.html#self-referential-natural-keys","title":"Self-Referential Natural Keys","text":"<p>An example of this can be seen with the <code>Location</code> model, where a given instance is only uniquely identified by its name in combination with its parent, which is another <code>Location</code>. Nautobot's default implementation would fall into an infinite recursion when trying to identify the Location's natural key fields, since they would be identified as  <code>(\"name\", \"parent__name\", \"parent__parent__name\", \"parent__parent__parent__name\", ...)</code>.</p> <p>In a case like this, Nautobot is able to support variadic natural keys, where the number and listing of natural keys may vary depending on the data of a given instance. To make this work, you will need to override two APIs related to natural keys on your model (<code>natural_key_field_lookups</code> and <code>natural_key_args_to_kwargs</code>) as follows:</p> <pre><code>class Location(TreeModel):\nclass Meta:\nunique_together = [[\"parent\", \"name\"]]\n@classproperty\ndef natural_key_field_lookups(cls):\n\"\"\"\n        Due to the recursive nature of Location's natural key, we need a custom implementation of this property.\n        This returns a set of natural key lookups based on the current maximum depth of the Location tree.\n        For example if the tree is 2 layers deep, it will return [\"name\", \"parent__name\", \"parent__parent__name\"].\n        Without this custom implementation, the generic `natural_key_field_lookups` would recurse infinitely.\n        \"\"\"\nlookups = []\nname = \"name\"\nfor _ in range(cls.objects.max_tree_depth() + 1):\nlookups.append(name)\nname = f\"parent__{name}\"\nreturn lookups\n@classmethod\ndef natural_key_args_to_kwargs(cls, args):\n\"\"\"Handle the possibility that more recursive \"parent\" lookups were specified than we initially expected.\"\"\"\nargs = list(args)\nnatural_key_field_lookups = list(cls.natural_key_field_lookups)\nwhile len(args) &lt; len(natural_key_field_lookups):\nargs.append(None)\nwhile len(args) &gt; len(natural_key_field_lookups):\nnatural_key_field_lookups.append(f\"parent__{natural_key_field_lookups[-1]}\")\nreturn dict(zip(natural_key_field_lookups, args))\n</code></pre>"},{"location":"development/core/natural-keys.html#natural-keys-referencing-a-different-self-referential-model","title":"Natural Keys Referencing a Different Self-Referential Model","text":"<p>Similarly, if you have a model whose natural keys include a <code>ForeignKey</code> to a model like <code>Location</code> with self-referential and variadic natural keys, for the related model to be handled properly, you must always ensure that the related field is the last such field in your model's uniqueness constraint or <code>natural_key_field_names</code> declaration.</p> <p>Instead of this:</p> <pre><code>class VLANGroup(BaseModel):\nclass Meta:\nunique_together = [[\"location\", \"name\"]]   # wrong, nested location natural key cannot be variadic\n</code></pre> <p>Do this:</p> <pre><code>class VLANGroup(BaseModel):\nclass Meta:\nunique_together = [[\"name\", \"location\"]]   # correct, nested location natural key can be variadic\n</code></pre>"},{"location":"development/core/natural-keys.html#no-uniqueness-constraints","title":"No Uniqueness Constraints","text":"<p>You really shouldn't implement any models that lack one of the aforementioned uniqueness constraints, but if for some reason you find yourself in this situation, there are two possible approaches you can take:</p>"},{"location":"development/core/natural-keys.html#approximate-the-natural-key","title":"Approximate the Natural Key","text":"<p>Perhaps your model doesn't have any actual database-level uniqueness constraints, but there are one or more fields that practically serve to uniquely identify a model instance. An example case here might be a model that has a <code>DateTimeField</code> with <code>auto_now_add=True</code> - while it may not be guaranteed unique by the database, in most cases a given timestamp is going to match at most one model instance. In cases like this you can declare <code>natural_key_field_names</code> on your model class to explicitly specify the list of \"nearly unique\" fields that should serve as the natural key for your model:</p> <pre><code>class FileProxy(BaseModel):\nname = models.CharField(max_length=255)\nuploaded_at = models.DateTimeField(auto_now_add=True)\n# no UniqueConstraint or unique_together - whoops!\nnatural_key_field_names = [\"name\", \"uploaded_at\"]\n</code></pre>"},{"location":"development/core/natural-keys.html#remove-the-natural-key","title":"Remove the Natural Key","text":"<p>If the model simply lacks any conceivable combination of fields that could uniquely identify a specific model instance, you'll need to explicitly remove the <code>natural_key</code> method from your model so that Django doesn't attempt to automatically call it at various points (notably, when running <code>nautobot-server dumpdata --natural-primary</code>) and error out. This can be accomplished as follows:</p> <pre><code>class MyUnnaturalModel(BaseModel):\nclass AttributeRemover:\ndef __get__(self, instance, owner):\nraise AttributeError(\"MyUnnaturalModel doesn't yet have a natural key!\")\nnatural_key = AttributeRemover()\n</code></pre>"},{"location":"development/core/navigation-menu.html","title":"Populating the Navigation Menu","text":"<p>Both core applications and plugins can contribute items to the navigation menu by defining <code>menu_items</code> inside of their app's <code>navigation.py</code>. Using the key and weight system, a developer can integrate amongst existing menu tabs, groups, items and buttons and/or create entirely new menus as desired.</p>"},{"location":"development/core/navigation-menu.html#modifying-existing-menu","title":"Modifying Existing Menu","text":"<p>By defining an object with the same identifier, a developer can modify existing objects. The example below shows modifying an existing tab to have a new group.</p> <p>A tab object is being created with the same identifier as an existing object using the <code>name</code> attribute. Then a group is being created with a weight of <code>150</code>, which means it will appear between the already defined <code>Circuits</code> and <code>Provider</code> groups.</p> <p>Tip</p> <p>Weights for already existing items can be found in the nautobot source code (in <code>navigation.py</code>) or with a web session open to your nautobot instance, you can inspect an element of the navbar using the developer tools. Each type of element will have an attribute <code>data-{type}-weight</code>. The type can be <code>tab</code>, <code>group</code>, <code>item</code> or <code>button</code>.</p> <p>This pattern works for modifying all objects in the tree. New items can be added to existing groups and new buttons can be added to existing items.</p> <pre><code>menu_tabs = (\nNavMenuTab(\nname=\"Circuits\",\ngroups=(\nNavMenuGroup(\nname=\"Example Circuit Group\",\nweight=150,\nitems=(\nNavMenuItem(\nlink=\"plugins:example_plugin:examplemodel_list\",\nname=\"Example Model\",\npermissions=[\n\"example_plugin.view_examplemodel\"\n],\nbuttons=(\nNavMenuAddButton(\nlink=\"plugins:example_plugin:examplemodel_add\",\npermissions=[\n\"example_plugin.add_examplemodel\",\n],\n),\nNavMenuImportButton(\nlink=\"plugins:example_plugin:examplemodel_import\",\npermissions=[\n\"example_plugin.add_examplemodel\"\n],\n),\n),\n),\n),\n),\n),\n),\n)\n</code></pre>"},{"location":"development/core/navigation-menu.html#adding-a-new-menu","title":"Adding a New Menu","text":"<p>The code below shows how to add a new tab to the navbar. A tab is defined by a <code>NavMenuTab</code> object. Similarly a group is defined using <code>NavMenuGroup</code>. Both of these objects are used as containers for actual items.</p> <p>The position in the navigation menu is defined by the weight. The lower the weight the closer to the start of the menus the object will be. All core objects have weights in multiples of 100, meaning there is plenty of space around the objects for plugins to customize.</p> <p>Below you can see <code>Example Tab</code> has a weight value of <code>150</code>. This means the tab will appear between <code>Organization</code> and <code>Devices</code>.</p> <pre><code>from nautobot.core.apps import NavMenuAddButton, NavMenuGroup, NavMenuItem, NavMenuImportButton, NavMenuTab\nmenu_items = (\nNavMenuTab(\nname=\"Example Tab\",\nweight=150,\ngroups=(\nNavMenuGroup(\nname=\"Example Group 1\",\nweight=100,\nitems=(\nNavMenuItem(\nlink=\"plugins:example_plugin:examplemodel_list\",\nlink_text=\"Example Model\",\npermissions=[\n\"example_plugin.view_examplemodel\"\n],\nbuttons=(\nNavMenuAddButton(\nlink=\"plugins:example_plugin:examplemodel_add\",\npermissions=[\n\"example_plugin.add_examplemodel\",\n],\n),\nNavMenuImportButton(\nlink=\"plugins:example_plugin:examplemodel_import\",\npermissions=[\n\"example_plugin.add_examplemodel\"\n],\n),\n),\n),\n),\n),\n),\n),\n)\n</code></pre>"},{"location":"development/core/navigation-menu.html#classes-and-attributes","title":"Classes and Attributes","text":"<p>Note</p> <p>For the <code>NavMenuTab</code>, <code>NavMenuGroup</code>, and <code>NavMenuItem</code> objects to be hidden when the user does not have permissions, set <code>HIDE_RESTRICTED_UI = True</code> in the <code>nautobot_config.py</code>. Please refer to HIDE_RESTRICTED_UI</p> <p>A <code>NavMenuTab</code> has the following attributes:</p> <ul> <li><code>name</code> - Display name to be shown in navigation menu</li> <li><code>weight</code> - Defines the position the object should be displayed at (optional)</li> <li><code>permissions</code> - A list of permissions required to display this link (optional)</li> <li><code>groups</code> - List or tuple of <code>NavMenuGroup</code></li> </ul> <p>A <code>NavMenuGroup</code> has the following attributes:</p> <ul> <li><code>name</code> - Display name to be shown in navigation menu</li> <li><code>weight</code> - Defines the position the object should be displayed at (optional)</li> <li><code>permissions</code> - A list of permissions required to display this link (optional)</li> <li><code>items</code> - List or tuple of <code>NavMenuItem</code></li> </ul> <p>A <code>NavMenuItem</code> has the following attributes:</p> <ul> <li><code>link</code> - The name of the URL path to which this menu item links</li> <li><code>name</code> - The text presented to the user</li> <li><code>weight</code> - Defines the position the object should be displayed at (optional)</li> <li><code>permissions</code> - A list of permissions required to display this link (optional)</li> <li><code>buttons</code> - An iterable of NavMenuButton (or subclasses of NavMenuButton) instances to display (optional)</li> </ul> <p>Note</p> <p>Any buttons associated within a menu item will be hidden if the user does not have permission to access the menu item, regardless of what permissions are set on the buttons.</p> <p>A <code>NavMenuButton</code> has the following attributes:</p> <ul> <li><code>title</code> - The tooltip text (displayed when the mouse hovers over the button)</li> <li><code>link</code> - The name of the URL path to which this button links</li> <li><code>weight</code> - Defines the position the object should be displayed at (optional)</li> <li><code>icon_class</code> - Button icon CSS classes (Nautobot currently supports Material Design Icons or one of the choices provided by <code>ButtonActionIconChoices</code>)</li> <li><code>button_class</code> - One of the choices provided by <code>ButtonActionColorChoices</code> (optional)</li> <li><code>permissions</code> - A list of permissions required to display this button (optional)</li> </ul> <p>Note</p> <p><code>NavMenuAddButton</code> and <code>NavMenuImportButton</code> are subclasses of <code>NavMenuButton</code> that can be used to provide the commonly used \"Add\" and \"Import\" buttons.</p>"},{"location":"development/core/react-ui.html","title":"Building the React UI","text":""},{"location":"development/core/react-ui.html#introduction","title":"Introduction","text":"<p>Nautobot 2.0 introduces a new user interface built on React. This new UI will eventually be a complete replacement for the previous Django-based UI. It currently prioritizes read-only operations for core views. In subsequent releases, more operations and features will become available in this new UI.</p>"},{"location":"development/core/react-ui.html#design-patterns","title":"Design Patterns","text":"<p>A key change with moving to a client-side application for the user interface is that the application is now stateful. This means that the application is aware of the current state of the user interface, and can update the UI without requiring a page refresh. This is a significant change from the previous Django-based UI, which was stateless. In order to achieve this, a perspective on how the UI is rendered is required. Since much of the data is retrieved from the API, the UI is rendered in two phases:</p> <ul> <li>Phase 1: The UI is rendered with placeholder data, and the API is queried for the actual data</li> <li>Phase 2: The UI is re-rendered with the actual data</li> </ul> <p>This encourages the UI to be built in a way that is resilient to changes in the data, and allows the UI to be updated without requiring a page refresh. Placeholder data can either be empty, for example on a list view this is easy: an empty list <code>[]</code>. But in more complex cases, a view may choose to show a loading indicator until the data is available.</p> <p>In most cases, we build the UI with the preference we only display the final component once the data is available and display a loading indicator until then.</p>"},{"location":"development/core/react-ui.html#state-management","title":"State Management","text":"<p>The React UI is built with a concept of state management, which is handled by Redux. There is a single state store that is used to manage the state of the entire application, split into two core sections:</p> <ul> <li>Application State: Managed by Redux<ul> <li>Is the user logged in?</li> <li>What is the current user?</li> <li>What is the current page?</li> <li>What are the models and navigation menu the user can access?</li> </ul> </li> <li>API State: Managed by RTK Query (a subset library provided by Redux)<ul> <li>Previous responses to detail and list requests</li> </ul> </li> </ul> <p>These sections are known as \"slices\" of state, and have their own methods for updating and retrieving state. For more information on Redux, see the Redux documentation.</p>"},{"location":"development/core/react-ui.html#hooks","title":"Hooks","text":"<p>The React UI uses hooks to manage state and side effects. Hooks are functions that let you \"hook into\" React state and lifecycle features. To learn more about hooks, see the React Hooks documentation.</p>"},{"location":"development/core/react-ui.html#getting-started-with-development","title":"Getting Started With Development","text":"<p>The libraries and tools used to build the React UI are:</p> <ul> <li>React</li> <li>React Router</li> <li>Chakra UI</li> <li>Redux</li> <li>React Redux</li> <li>RTK Query</li> </ul>"},{"location":"development/core/react-ui.html#customizing-a-models-detail-view","title":"Customizing a Model's detail view","text":"<p>Currently, it is possible to customize the layout, groups, and fields of a detail view for a model. You can achieve this by creating groups that contain fields, which can be positioned either in the left column or the right column. To customize the detail view of your model, follow the instructions below:</p> <pre><code>class ExampleModelSerializer(ModelSerializer):\n...\nclass Meta:\n...\ndetail_view_config = {\n\"layout\": [\n{\n\"Group Name 1\": {\"fields\": [\"name\", ...]},\n\"Group Name 2\": {\"fields\": [...]},\n},\n{\n\"Group Name 3\": {\"fields\": [...]},\n\"Group Name 4\": {\"fields\": [...]},\n},\n],\n\"include_others\": False\n}\n</code></pre> <p>In the above example, we add the <code>detail_view_config</code> attribute to the Serializer's inner <code>Meta</code> class. The value of this attribute is a dict containing <code>layout</code> and <code>include_others</code>(optional). the <code>layout</code> is a list containing two dictionaries, each representing the two columns of the detail view. The first dictionary represents the fields in the first column, while the second dictionary represents the fields in the second column. Each dictionary consists of a key-value pair, where the key is the name of the grouping, and the value is a list of the model fields that should be included in that grouping. The optional key <code>include_others</code>, when set to <code>True</code>, adds missing serializer fields from the <code>detail_view_config[\"layout\"]</code> to the view_config layout.</p> <p>If a <code>detail_view_config</code> is not provided to the Model Serializer, the default view configuration will be used. The default view configuration displays all non-many-to-many (non-m2m) fields in the left column, and many-to-many (m2m) fields in the right column, with each field having its own grouping.</p> <p>Note</p> <p><code>Other Fields</code> cannot be used as a group name as this is a reserved keyword.</p>"},{"location":"development/core/react-ui.html#documenting-your-code","title":"Documenting Your Code","text":"<p>The UI uses JS Doc to document the code. For more information on JS Doc, see the JS Doc website.</p> <p>We prefer to use the <code>@param</code> and <code>@returns</code> tags to document the parameters and return values of functions. For example:</p> <pre><code>/**\n * Given an API payload with session information, updates the state with the session information\n * @param {Object} state - The current state\n * @param {Object} action - The called-with payload and action type\n * @returns The updated state\n */\nupdateAuthStateWithSession(state, action) {\n//... \n}\n</code></pre>"},{"location":"development/core/react-ui.html#linting-formatting","title":"Linting &amp; Formatting","text":""},{"location":"development/core/react-ui.html#linting","title":"Linting","text":"<p>The UI uses ESLint to lint the code. For more information on ESLint, see the ESLint website.</p> <p>To check for linting errors, run the following command:</p> <pre><code>invoke eslint\n</code></pre> <p>To automatically fix some linting errors, run the following command:</p> <pre><code>invoke eslint -a\n</code></pre>"},{"location":"development/core/react-ui.html#formatting","title":"Formatting","text":"<p>The UI uses Prettier to format the code. For more information on Prettier, see the Prettier website.</p> <p>To check for linting errors, run the following command:</p> <pre><code>invoke prettier\n</code></pre> <p>To automatically format the code, run the following command:</p> <pre><code>invoke prettier -a\n</code></pre>"},{"location":"development/core/react-ui.html#additional-links","title":"Additional Links","text":"<p>Here are some links to resources that may be helpful when working with the React UI:</p> <ul> <li>React and Effects</li> <li>RTK Query and Asynchronous Hooks</li> <li>Using useDispatch</li> </ul>"},{"location":"development/core/release-checklist.html","title":"Release Checklist","text":"<p>This document is intended for Nautobot maintainers and covers the steps to perform when releasing new versions.</p>"},{"location":"development/core/release-checklist.html#minor-version-bumps","title":"Minor Version Bumps","text":""},{"location":"development/core/release-checklist.html#update-requirements","title":"Update Requirements","text":"<p>Required Python packages are maintained in two files: <code>pyproject.toml</code> and <code>poetry.lock</code>.</p>"},{"location":"development/core/release-checklist.html#the-pyprojecttoml-file","title":"The <code>pyproject.toml</code> file","text":"<p>Python packages are defined inside of <code>pyproject.toml</code>. The <code>[tool.poetry.dependencies]</code> section of this file contains a list of all the packages required by Nautobot.</p> <p>Where possible, we use tilde requirements to specify a minimal version with some ability to update, for example:</p> <pre><code># REST API framework\ndjangorestframework = \"~3.12.2\"\n</code></pre> <p>This would allow Poetry to install <code>djangorestframework</code> versions <code>&gt;=3.12.2</code> but <code>&lt;3.13.0</code>.</p>"},{"location":"development/core/release-checklist.html#the-poetrylock-file","title":"The <code>poetry.lock</code> file","text":"<p>The other file is <code>poetry.lock</code>, which is managed by Poetry and contains package names, versions, and other metadata.</p> <p>Each of the required packages pinned to its current stable version. When Nautobot is installed, this file is used to resolve and install all dependencies listed in <code>pyproject.toml</code>, but Poetry will use the exact versions found in <code>poetry.lock</code> to ensure that a new release of a dependency doesn't break Nautobot.</p> <p>Warning</p> <p>You must never directly edit this file. You will use <code>poetry update</code> commands to manage it.</p>"},{"location":"development/core/release-checklist.html#run-poetry-update","title":"Run <code>poetry update</code>","text":"<p>Every minor version release should refresh <code>poetry.lock</code>, so that it lists the most recent stable release of each package. To do this:</p> <ol> <li>Review each requirement's release notes for any breaking or otherwise noteworthy changes.</li> <li>Run <code>poetry update &lt;package&gt;</code> to update the package versions in <code>poetry.lock</code> as appropriate.</li> <li>If a required package requires updating to a new release not covered in the version constraints for a package as defined in <code>pyproject.toml</code>, (e.g. <code>Django ~3.1.7</code> would never install <code>Django &gt;=4.0.0</code>), update it manually in <code>pyproject.toml</code>.</li> <li>Run <code>poetry install</code> to install the refreshed versions of all required packages.</li> <li>Run all tests and check that the UI and API function as expected.</li> </ol> <p>Hint</p> <p>You may use <code>poetry update --dry-run</code> to have Poetry automatically tell you what package updates are available and the versions it would upgrade.</p>"},{"location":"development/core/release-checklist.html#update-static-libraries","title":"Update Static Libraries","text":"<p>Update the following static libraries to their most recent stable release:</p> <ul> <li>Bootstrap 3</li> <li>Material Design Icons</li> <li>Select2</li> <li>jQuery</li> <li>jQuery UI</li> </ul>"},{"location":"development/core/release-checklist.html#link-to-the-release-notes-page","title":"Link to the Release Notes Page","text":"<p>Add the release notes (<code>docs/release-notes/X.Y.md</code>) to the table of contents within <code>mkdocs.yml</code>, and point <code>index.md</code> to the new file.</p>"},{"location":"development/core/release-checklist.html#verify-and-revise-the-install-documentation","title":"Verify and Revise the Install Documentation","text":"<p>Follow the install instructions to perform a new production installation of Nautobot.</p> <p>The goal of this step is to walk through the entire install process as documented to make sure nothing there needs to be changed or updated, to catch any errors or omissions in the documentation, and to ensure that it is current with each release.</p> <p>Tip</p> <p>Fire up <code>mkdocs serve</code> in your development environment to start the documentation server! This allows you to view the documentation locally and automatically rebuilds the documents as you make changes.</p> <p>Commit any necessary changes to the documentation before proceeding with the release.</p>"},{"location":"development/core/release-checklist.html#close-the-release-milestone","title":"Close the Release Milestone","text":"<p>Close the release milestone on GitHub after ensuring there are no remaining open issues associated with it.</p>"},{"location":"development/core/release-checklist.html#all-releases","title":"All Releases","text":""},{"location":"development/core/release-checklist.html#verify-ci-build-status","title":"Verify CI Build Status","text":"<p>Ensure that continuous integration testing on the <code>develop</code> branch is completing successfully.</p>"},{"location":"development/core/release-checklist.html#bump-the-version","title":"Bump the Version","text":"<p>Update the package version using <code>invoke version</code>. This command shows the current version of the project or bumps the version of the project and writes the new version back to <code>pyproject.toml</code> (for the Nautobot Python package) and <code>package.json</code> (for the Nautobot UI) if a valid bump rule is provided.</p> <p>The new version should ideally be a valid semver string or a valid bump rule: <code>patch</code>, <code>minor</code>, <code>major</code>, <code>prepatch</code>, <code>preminor</code>, <code>premajor</code>, <code>prerelease</code>. Always try to use a bump rule when you can.</p> <p>Display the current version with no arguments:</p> <pre><code>invoke version\n</code></pre> <p>Example output:</p> <pre><code>{\n  nautobot: '2.0.0-beta.2',\n  npm: '9.5.1',\n  node: '18.16.1',\n  ...\n}\n</code></pre> <p>Bump pre-release versions using <code>prerelease</code>:</p> <pre><code>invoke version -v prerelease\n</code></pre> <p>Example output:</p> <pre><code>v2.0.0-beta.3\n</code></pre> <p>For major versions, use <code>major</code>:</p> <pre><code>invoke version -v major\n</code></pre> <p>Example output:</p> <pre><code>v3.0.0\n</code></pre> <p>For patch versions, use <code>minor</code>:</p> <pre><code>invoke version minor\n</code></pre> <p>Example output:</p> <pre><code>v2.1.0\n</code></pre> <p>And lastly, for patch versions, you guessed it, use <code>patch</code>:</p> <pre><code>invoke version patch\n</code></pre> <p>Example output:</p> <pre><code>v2.0.1\n</code></pre> <p>The <code>invoke version [&lt;version&gt;]</code> command internally runs <code>poetry version</code> and <code>npm version</code> commands to handle the versioning process. However, there might be cases where you need to manually configure the version. Here's how you can do that:</p> <ul> <li>Poetry Version: If you want to manually set the version for the Python dependencies managed by Poetry, you can refer to the Poetry documentation on version for detailed instructions. It provides information on how to set the version directly in the <code>pyproject.toml</code> file or update it using the <code>poetry version</code> command.</li> <li>npm Version: To manually configure the version for the Node.js packages managed by npm, you can refer to the official npm documentation on <code>npm version</code> for more information. It explains how to set the version directly in the <code>package.json</code> file or update it using the <code>npm version</code> command.</li> </ul>"},{"location":"development/core/release-checklist.html#update-the-changelog","title":"Update the Changelog","text":"<p>Create a release branch off of <code>develop</code> (<code>git checkout -b release/1.4.3 develop</code>)</p> <p>Generate release notes with <code>towncrier build --version 1.4.3</code> and answer <code>yes</code> to the prompt <code>Is it okay if I remove those files? [Y/n]:</code>. This will update the release notes in <code>nautobot/docs/release-notes/version-1.4.md</code>, stage that file in git, and <code>git rm</code> all of the fragments that have now been incorporated into the release notes.</p> <p>Run <code>invoke markdownlint</code> to make sure the generated release notes pass the linter checks.</p> <p>Check the git diff to verify the changes are correct (<code>git diff --cached</code>).</p> <p>Commit and push the staged changes.</p> <p>Important</p> <p>The changelog must adhere to the Keep a Changelog style guide.</p>"},{"location":"development/core/release-checklist.html#submit-pull-request","title":"Submit Pull Request","text":"<p>Submit a pull request titled \"Release vX.Y.Z\" to merge your release branch into <code>main</code>. Copy the documented release notes into the pull request's body.</p> <p>Once CI has completed on the PR, merge it.</p> <p>Important</p> <p>Do not squash merge this branch into <code>main</code>. Make sure to select <code>Create a merge commit</code> when merging in GitHub.</p>"},{"location":"development/core/release-checklist.html#create-a-new-release-tag","title":"Create a New Release Tag","text":"<p>You need to create a release tag locally so that you can use it later when you draft the new release for nautobot, for example, <code>v1.4.3</code>. To create the tag locally:</p> <pre><code>$ git tag v1.4.3\n</code></pre> <p>To list all the tags to see if it is created successfully:</p> <pre><code>$ git tag\n</code></pre> <p>To push the tag upstream:</p> <pre><code>$ git push origin v1.4.3\n</code></pre>"},{"location":"development/core/release-checklist.html#create-a-new-release","title":"Create a New Release","text":"<p>Draft a new release with the following parameters.</p> <ul> <li>Tag: Current version (e.g. <code>v1.0.0</code>)</li> </ul> <p>Warning</p> <p>You will need to create a new release tag locally before you draft the new release. To create a new release tag, follow the steps outlined here.</p> <ul> <li>Target: <code>main</code></li> <li>Title: Version and date (e.g. <code>v1.0.0 - 2021-06-01</code>)</li> <li> <p>Release Notes: Follow the steps below</p> </li> <li> <p>Click on Generate release notes button and you should see some release notes auto-generated by GitHub.</p> </li> <li>Copy and paste the changelog entries newly generated by towncrier in <code>nautobot/docs/release-notes/version-1.4.md</code> from your previous pull request to the auto-generated release notes on top of the What's Changed section.</li> <li>Change the heading What's Changed to Contributors.</li> <li>Change the entries under the heading to only the usernames of the contributors. e.g. <code>* Updated dockerfile by @nautobot_user in https://github.com/nautobot/nautobot/pull/123</code> -&gt; <code>* @nautobot_user</code></li> <li>Make sure there is no redundant username in the Contributors list.</li> <li>Leave the New Contributors list as it is.</li> </ul>"},{"location":"development/core/release-checklist.html#publish-to-pypi","title":"Publish to PyPI","text":"<p>Now that there is a tagged release, the final step is to upload the package to the Python Package Index.</p> <p>First, you'll need to render the documentation.</p> <pre><code>poetry run mkdocs build --no-directory-urls --strict\n</code></pre> <p>Second, you'll need to build the Python package distributions (which will include the rendered documentation):</p> <pre><code>poetry build\n</code></pre> <p>Finally, publish to PyPI using the username <code>__token__</code> and the Nautobot PyPI API token as the password. The API token can be found in the Nautobot maintainers vault (if you're a maintainer, you'll have access to this vault):</p> <pre><code>poetry publish --username __token__ --password &lt;api_token&gt;\n</code></pre>"},{"location":"development/core/release-checklist.html#publish-docker-images","title":"Publish Docker Images","text":"<p>Build the images locally:</p> <pre><code>for ver in 3.8 3.9 3.10 3.11; do\n  export INVOKE_NAUTOBOT_PYTHON_VER=$ver\n  invoke buildx --target final --tag networktocode/nautobot-py${INVOKE_NAUTOBOT_PYTHON_VER}:local\n  invoke buildx --target final-dev --tag networktocode/nautobot-dev-py${INVOKE_NAUTOBOT_PYTHON_VER}:local\ndone\n</code></pre> <p>Test the images locally - to do this you need to set the following in your <code>invoke.yml</code>:</p> <pre><code>---\nnautobot:\ncompose_files:\n- \"docker-compose.yml\"\n- \"docker-compose.postgres.yml\"\n- \"docker-compose.final.yml\"\n</code></pre> <p>Warning</p> <p>You should not include <code>docker-compose.dev.yml</code> in this test scenario!</p> <pre><code>for ver in 3.8 3.9 3.10 3.11; do\n  export INVOKE_NAUTOBOT_PYTHON_VER=$ver\n  invoke stop\n  invoke integration-tests\ndone\n</code></pre> <p>Push the images to GitHub Container Registry and Docker Hub</p> <pre><code>docker login\ndocker login ghcr.io\nfor ver in 3.8 3.9 3.10 3.11; do\n  export INVOKE_NAUTOBOT_PYTHON_VER=$ver\n  invoke docker-push main\ndone\n</code></pre>"},{"location":"development/core/release-checklist.html#bump-the-development-version","title":"Bump the Development Version","text":"<p>Create a new branch off of <code>main</code> and use <code>poetry version prepatch</code> to bump the version to the next release. Then open a pull request to the <code>develop</code> branch to update the version and sync the release notes and changelog fragment updates from <code>main</code>.</p> <p>For example, if you just released <code>v1.1.0</code>:</p> <pre><code>poetry version prepatch\n</code></pre> <p>Example output:</p> <pre><code>Bumping version from 1.1.0 to 1.1.1-alpha.0\n</code></pre> <p>Important</p> <p>Do not squash merge this branch into <code>develop</code>. Make sure to select <code>Create a merge commit</code> when merging in GitHub.</p>"},{"location":"development/core/release-checklist.html#redeploy-demonautobotcom-sandbox-environment","title":"Redeploy demo.nautobot.com Sandbox Environment","text":"<p>Afer you publish the release, you need to blow away the current demo environment and redeploy it for <code>demo.nautobot.com</code>. The documentation on how to build a demo environment is available in the nautobot/sandboxes repository.</p>"},{"location":"development/core/role-internals.html","title":"Role Internals","text":"<p>Warning</p> <p>The section below is largely intended for developers who may need to create data models of their own that implement a <code>role</code> field. Proceed at your own risk!</p> <p>Any model that is intended to have a <code>role</code> field must use a <code>nautobot.extras.models.roles.RoleField</code> field for its foreign-key to the Role model. This field type will automatically assign a <code>related_name</code> for the reverse relationship back to the inheriting model's verbose plural name (e.g. <code>devices</code>).</p>"},{"location":"development/core/role-internals.html#rolefield-model-field","title":"<code>RoleField</code> model field","text":"<p>The <code>RoleField</code> field type is a subclass of <code>django.db.models.ForeignKey</code>.</p> <p>This model field also emits its own form field to eliminate the requirement for a form field to be explicitly added to model forms.</p>"},{"location":"development/core/role-internals.html#rolefilter-filter-field","title":"<code>RoleFilter</code> filter field","text":"<p>Any filter that is intended to have a <code>role</code> field must inherit from <code>nautobot.extras.filters.RoleModelFilterSetMixin</code>. This will add a <code>nautobot.extras.filters.RoleFilter</code> to the filter, which allows filtering by the <code>name</code> or <code>id</code> of the role.</p>"},{"location":"development/core/role-internals.html#form-fields","title":"Form fields","text":"<p>Any filter form that is intended to have a <code>role</code> field must inherit from <code>nautobot.extras.forms.RoleModelFilterFormMixin</code>. This mixin adds a non-required, multiple-choice <code>role</code> filter field to the filter form.</p> <p>Any bulk edit form that is intended to have a <code>role</code> field must inherit from <code>nautobot.extras.forms.RoleModelBulkEditFormMixin</code>. This mixin adds a non-required <code>role</code> field to the form, and constrains the eligible role choices to the object type being edited.</p>"},{"location":"development/core/role-internals.html#table-field","title":"Table field","text":"<p>If you wish for a table to include a <code>role</code> column, your table must inherit from <code>nautobot.extras.tables.RoleTableMixin</code>. This includes a <code>ColorColumn</code> with the header <code>role</code> on the table.</p>"},{"location":"development/core/style-guide.html","title":"Style Guide","text":"<p>Nautobot generally follows the Django style guide, which is itself based on PEP 8. The following tools are used to enforce coding style and best practices:</p> <ul> <li>Flake8 is used to validate code style.</li> <li>Black is used to enforce code formatting conventions.</li> <li>ESLint is used to validate code style for the UI.</li> <li>Prettier is used to enforce code formatting conventions for the UI.</li> <li>Pylint is used for Python static code analysis.</li> <li>Hadolint is used to lint and validate Docker best practices in the Dockerfile.</li> <li>MarkdownLint-cli is used to lint and validate Markdown (documentation) files.</li> </ul> <p>Nautobot-specific configuration of these tools is maintained in the files <code>.flake8</code>, <code>.markdownlint.yml</code>, <code>.prettierrc</code>, <code>package.json</code>, or <code>pyproject.toml</code> as appropriate to the individual tool.</p> <p>It is strongly recommended to include all of the above tools as part of your commit process before opening any pull request. A Git commit hook is provided in the source at <code>scripts/git-hooks/pre-commit</code>. Linking to this script from <code>.git/hooks/</code> will invoke these tools prior to every commit attempt and abort if the validation fails.</p> <pre><code>cd .git/hooks/\nln -s ../../scripts/git-hooks/pre-commit\n</code></pre> <p>You can also invoke these utilities manually against the development Docker containers by running:</p> <pre><code>invoke flake8\ninvoke black\ninvoke eslint\ninvoke prettier\ninvoke check-migrations\ninvoke hadolint\ninvoke markdownlint\ninvoke pylint\n</code></pre>"},{"location":"development/core/style-guide.html#introducing-new-dependencies","title":"Introducing New Dependencies","text":"<p>The introduction of a new dependency is best avoided unless it is absolutely necessary. For small features, it's generally preferable to replicate functionality within the Nautobot code base rather than to introduce reliance on an external project. This reduces both the burden of tracking new releases and our exposure to outside bugs and attacks.</p> <p>If there's a strong case for introducing a new dependency, it must meet the following criteria:</p> <ul> <li>Its complete source code must be published and freely accessible without registration.</li> <li>Its license must be conducive to inclusion in an open source project.</li> <li>It must be actively maintained, with no longer than one year between releases.</li> <li>It must be available via the Python Package Index (PyPI).</li> </ul> <p>New dependencies can be added to the project via the <code>poetry add</code> command. This will correctly add the dependency to <code>pyproject.toml</code> as well as the <code>poetry.lock</code> file. You should then update the <code>pyproject.toml</code> with a comment providing a short description of the package and/or how Nautobot is making use of it.</p>"},{"location":"development/core/style-guide.html#general-guidance","title":"General Guidance","text":"<ul> <li> <p>When in doubt, remain consistent: It is better to be consistently incorrect than inconsistently correct. If you notice in the course of unrelated work a pattern that should be corrected, continue to follow the pattern for now and open a bug so that the entire code base can be evaluated at a later point.</p> </li> <li> <p>Prioritize readability over concision. Python is a very flexible language that typically offers several options for expressing a given piece of logic, but some may be more friendly to the reader than others. (List comprehensions are particularly vulnerable to over-optimization.) Always remain considerate of the future reader who may need to interpret your code without the benefit of the context within which you are writing it.</p> </li> <li> <p>No easter eggs. While they can be fun, Nautobot must be considered as a business-critical tool. The potential, however minor, for introducing a bug caused by unnecessary logic is best avoided entirely.</p> </li> <li> <p>Constants (variables which generally do not change) should be declared in <code>constants.py</code> within each app.</p> </li> <li> <p>Every model should have a docstring. Every custom method should include an explanation of its function.</p> </li> <li> <p>The combination of <code>nautobot.core.filters.BaseFilterSet</code>, <code>nautobot.extras.filters.CreatedUpdatedModelFilterSetMixin</code>, <code>nautobot.extras.filters.CustomFieldModelFilterSetMixin</code>, and <code>nautobot.extras.filters.RelationshipModelFilterSetMixin</code> is such a common use case throughout the code base that they have a helper class which combines all of these at <code>nautobot.extras.NautobotFilterSet</code>. Use this helper class if you need the functionality from these classes.</p> </li> <li> <p>The combination of <code>nautobot.core.forms.BootstrapMixin</code>, <code>nautobot.extras.forms.CustomFieldModelFormMixin</code>, <code>nautobot.extras.forms.RelationshipModelFormMixin</code> and <code>nautobot.extras.forms.NoteModelFormMixin</code> is such a common use case throughout the code base that they have a helper class which combines all of these at <code>nautobot.extras.forms.NautobotModelForm</code>. Use this helper class if you need the functionality from these classes.</p> </li> </ul> <p>Added in version 1.4.0</p> <ul> <li> <p>Similarly, for filter forms, <code>nautobot.extras.forms.NautobotFilterForm</code> combines <code>nautobot.core.forms.BootstrapMixin</code>, <code>nautobot.extras.forms.CustomFieldModelFilterFormMixin</code>, and <code>nautobot.extras.forms.RelationshipModelFilterFormMixin</code>, and should be used where appropriate.</p> </li> <li> <p>Similarly, for bulk-edit forms, <code>nautobot.extras.forms.NautobotBulkEditForm</code> combines <code>nautobot.core.forms.BulkEditForm</code> and <code>nautobot.core.forms.BootstrapMixin</code> with <code>nautobot.extras.forms.CustomFieldModelBulkEditFormMixin</code>, <code>nautobot.extras.forms.RelationshipModelBulkEditFormMixin</code> and <code>nautobot.extras.forms.NoteModelBulkEditFormMixin</code>, and should be used where appropriate.</p> </li> <li> <p>API serializers for most models should inherit from <code>nautobot.extras.api.serializers.NautobotModelSerializer</code> and any appropriate mixins. Only use more abstract base classes such as ValidatedModelSerializer where absolutely required.</p> </li> <li> <p><code>NautobotModelSerializer</code> will automatically add serializer fields for <code>id</code>, <code>created</code>/<code>last_updated</code> (if applicable), <code>custom_fields</code>, <code>computed_fields</code>, and <code>relationships</code>, so there's generally no need to explicitly declare these fields in <code>.Meta.fields</code> of each serializer class. Similarly, <code>TaggedModelSerializerMixin</code> and <code>` will automatically add the</code>tags<code>and</code>status` fields when included in a serializer class.</p> </li> <li> <p>API Views for most models should inherit from <code>nautobot.extras.api.views.NautobotModelViewSet</code>. Only use more abstract base classes such as <code>ModelViewSet</code> where absolutely required.</p> </li> </ul>"},{"location":"development/core/style-guide.html#branding","title":"Branding","text":"<ul> <li>When referring to Nautobot in writing, use the proper form \"Nautobot,\" with the letter N. The lowercase form \"nautobot\" should be used in code, filenames, etc.</li> </ul> <ul> <li>There is an SVG form of the Nautobot logo at nautobot/docs/nautobot_logo.svg. It is preferred to use this logo for all purposes as it scales to arbitrary sizes without loss of resolution. If a raster image is required, the SVG logo should be converted to a PNG image of the prescribed size.</li> </ul>"},{"location":"development/core/style-guide.html#importing-python-packages","title":"Importing Python Packages","text":"<p>To prevent circular dependency errors and improve code readability, the following standards should be followed when importing from other python modules.</p>"},{"location":"development/core/style-guide.html#pep8-style-guide","title":"PEP8 Style Guide","text":"<p>Nautobot follows the PEP8 style guide's standard for importing modules. Libraries should be imported in these groups: standard library, third party libraries, then <code>nautobot</code> packages and finally try/except imports. The groups should be separated by a single blank line. Within these groups,import lines should be sorted alphanumerically by the package name. Lists of of names imported from packages should also be sorted alphanumerically.</p> <p>Example</p> <pre><code>from abc import ABC\nimport logging\nfrom uuid import UUID\nfrom django.db.models import CharField, DecimalField, TextField\nimport django_filters\nfrom nautobot.dcim import models as dcim_models\nfrom nautobot.extras import models\n</code></pre>"},{"location":"development/core/style-guide.html#wildcard-imports","title":"Wildcard Imports","text":"<p>Wildcard imports (<code>from foo import *</code>) should only be used in <code>__init__.py</code> files to import names from submodules that have a <code>__all__</code> variable defined.</p> <p>Example</p> nautobot/dcim/models/__init__.py<pre><code>from nautobot.dcim.models.cables import *\nfrom nautobot.dcim.models.device_component_templates import *\nfrom nautobot.dcim.models.device_components import *\n# etc ...\n</code></pre>"},{"location":"development/core/style-guide.html#importing-from-external-packages","title":"Importing from External Packages","text":"<p>Individual names may be imported from external packages (<code>from foo import some_function, SomeClass</code>). This differs from the standard for importing from the <code>nautobot</code> package.</p>"},{"location":"development/core/style-guide.html#importing-nautobot-packages","title":"Importing Nautobot Packages","text":""},{"location":"development/core/style-guide.html#module-name-imports","title":"Module Name Imports","text":"<p>Whenever possible, imports from the <code>nautobot</code> package should use module level imports, not individual names from a module.</p> <p>Example</p> <pre><code># module import\nfrom nautobot.core import xyz\n# name import (do not use)\nfrom nautobot.core.xyz import SomeClass, some_function\n</code></pre>"},{"location":"development/core/style-guide.html#absolute-imports","title":"Absolute Imports","text":"<p>Always use absolute imports instead of relative imports.</p> <p>Example</p> <pre><code># absolute import\nfrom nautobot.dcim import constants\nfrom nautobot.dcim.models import Device\n# relative import (do not use)\nimport constants\nfrom .models import Device\n</code></pre>"},{"location":"development/core/style-guide.html#import-style-conventions","title":"Import Style Conventions","text":"<p>To import modules from other apps under the <code>nautobot</code> namespace, use the convention <code>from nautobot.&lt;app_name&gt; import &lt;module&gt; as &lt;app_name&gt;_&lt;module&gt;</code>. If importing from within the same app do not alias the imported namespace.</p> <p>Example</p> nautobot/extras/models.py<pre><code># inter-app import\nfrom nautobot.dcim import models as dcim_models\n# intra-app import\nfrom nautobot.extras import constants\n</code></pre>"},{"location":"development/core/style-guide.html#resolving-name-conflicts","title":"Resolving Name Conflicts","text":"<p>When using external libraries you may need to import multiple different modules with the same name. In this case, the namespace from the external package should be aliased. For aliasing external libraries, use <code>&lt;package&gt;_&lt;module&gt;</code>.</p> <p>Example</p> <pre><code># from within the current app\nfrom nautobot.extras import models\n# from a different Nautobot app\nfrom nautobot.dcim import models as dcim_models\n# other libraries\nfrom django.db import models as django_models\nfrom tree_queries import models as tree_queries_models\n</code></pre>"},{"location":"development/core/style-guide.html#convenience-imports","title":"Convenience Imports","text":"<p>Nautobot uses convenience imports in the same way that django implements them. These should be leveraged whenever possible.</p> <p>Example</p> <pre><code>from nautobot.extras import forms\n# use top level import if available:\nforms.NoteModelFormMixin()\n# instead of the full path:\nforms.mixins.NoteModelFormMixin()\n</code></pre>"},{"location":"development/core/templates.html","title":"Page Templates","text":"<p>Nautobot comes with a variety of page templates that allow for a lot of flexibility while keeping the page style consistent with the rest of the application. This document presents these templates and their features.</p> <p>You can use these templates as the basis for your templates by calling <code>{% extends '&lt;template_name&gt;' %}</code> at the top of your template file.</p>"},{"location":"development/core/templates.html#object-detail","title":"Object Detail","text":"<p>Added in version 1.2.0</p> <p>The most customizable template is <code>generic/object_detail.html</code>, as object detail views have a wide range of specific requirements to be accommodated. It provides the following blocks:</p> <ul> <li><code>header</code>: overloading this block allows for changing the entire top row of   the page, including the title, breadcrumbs, search field, and tabs.<ul> <li><code>breadcrumbs</code>: overloading this block allows for changing the entire   breadcrumbs block.<ul> <li><code>extra_breadcrumbs</code>: this enables extending the breadcrumbs block   just before the model without having to redefine the entire block.</li> </ul> </li> <li><code>buttons</code>: overloading this block allows redefining the entire button   section on the right of the page.<ul> <li><code>extra_buttons</code>: this block enables extending the buttons block   without losing the predefined buttons. Custom buttons will appear   between the plugin buttons and clone/edit/delete actions.</li> </ul> </li> <li><code>masthead</code>: is the block that contains the title. Overloading it enables   to change anything about the title block.</li> <li><code>title</code>: is the block contained by <code>masthead</code> and wrapped in a heading   block. Overloading it makes it possible to change the heading text as   well as the page title shown in the browser.</li> <li><code>nav_tabs</code>: are the navigation tabs. If overloaded, custom tabs can be   rendered instead of the default.<ul> <li><code>extra_nav_tabs</code>: this block allows to add new tabs without having to   override the default ones.</li> </ul> </li> </ul> </li> <li><code>content</code>: is the entire content of the page below the <code>header</code>.<ul> <li><code>content_left_page</code>: is a half-width column on the left. Multiple panels   can be rendered in a single block.</li> <li><code>content_right_page</code>: is a half-width column on the right.</li> <li><code>content_full_width_page</code>: is a full-width column.</li> </ul> </li> </ul>"},{"location":"development/core/templates.html#object-list","title":"Object List","text":"<p>The base template for listing objects is <code>generic/object_list.html</code>, with the following blocks:</p> <ul> <li><code>buttons</code>: may provide a set of buttons at the top right of the page, to the   left of the table configuration button.</li> <li><code>bulk_buttons</code>: may be a set of buttons at the bottom of the table, to the   left of potential bulk edit or delete buttons.</li> <li><code>header_extra</code>: may provide extra information to display just above the table,   to the left.</li> </ul>"},{"location":"development/core/templates.html#object-edit","title":"Object Edit","text":"<p>The base template for object addition or change is <code>generic/object_edit.html</code>, with the following blocks:</p> <ul> <li><code>form</code>: is the block in which the form gets rendered. This can be overridden   to provide a custom UI or UX for form views beyond what <code>render_form</code>   provides.</li> </ul>"},{"location":"development/core/templates.html#object-import","title":"Object Import","text":"<p>The base template for object import is <code>generic/object_import.html</code>, with the following blocks:</p> <ul> <li><code>tabs</code>: may provide tabs at the top of the page. The default import view is   not tabbed.</li> </ul>"},{"location":"development/core/templates.html#object-deletion","title":"Object Deletion","text":"<p>The base template for object deletion is <code>generic/object_delete.html</code>, with the following blocks:</p> <ul> <li><code>message</code>: is the confirmation message for deletion, which can be overridden.<ul> <li><code>message_extra</code>: provides a way to add to the default message without   overriding it.</li> </ul> </li> </ul>"},{"location":"development/core/templates.html#bulk-edit","title":"Bulk Edit","text":"<p>The base template for bulk object change is <code>generic/object_bulk_edit.html</code>. It does not provide any blocks for customizing the user experience.</p>"},{"location":"development/core/templates.html#bulk-import","title":"Bulk Import","text":"<p>The base template for bulk object import is <code>generic/object_bulk_import.html</code>, with the following blocks:</p> <ul> <li><code>tabs</code>: may provide tabs at the top of the page. The default import view is   not tabbed.</li> </ul>"},{"location":"development/core/templates.html#bulk-deletion","title":"Bulk Deletion","text":"<p>The base template for bulk object deletion is <code>generic/object_bulk_delete.html</code>, with the following blocks:</p> <ul> <li><code>message_extra</code>: provides a way to add to the default message.</li> </ul> <p>Note: contrary to the deletion of a single object, this template does not provide a way to completely override the deletion message.</p>"},{"location":"development/core/templates.html#bulk-renaming","title":"Bulk Renaming","text":"<p>The base template for renaming objects in bulk is <code>generic/object_bulk_rename.html</code>. It does not provide any blocks for customizing the user experience.</p>"},{"location":"development/core/testing.html","title":"Testing Nautobot","text":"<p>Best practices for developing and maintaining Nautobot's automated unit/integration test suites.</p> <p>Unit tests are automated tests written and run to ensure that a section of the Nautobot application (known as the \"unit\") meets its design and behaves as intended and expected. Most commonly as a developer of or contributor to Nautobot you will be writing unit tests to exercise the code you have written. Unit tests are not meant to test how the application behaves, only the individual blocks of code, therefore use of mock data and phony connections is common in unit test code. As a guiding principle, unit tests should be fast, because they will be executed quite often.</p> <p>Integration tests are automated tests written and run to ensure that the Nautobot application behaves as expected when being used as it would be in practice. By contrast to unit tests, where individual units of code are being tested, integration tests rely upon the server code actually running, and web UI clients or API clients to make real connections to the service to exercise actual workflows, such as navigating to the login page, filling out the username/passwords fields, and clicking the \"Log In\" button.</p> <p>Integration testing is much more involved, and builds on top of the foundation laid by unit testing. As a guiding principle, integration tests should be comprehensive, because they are the last mile to asserting that Nautobot does what it is advertised to do. Without integration testing, we have to do it all manually, and that's no fun for anyone!</p>"},{"location":"development/core/testing.html#tagging-tests","title":"Tagging Tests","text":"<p>By Nautobot convention, unit tests must be tagged with <code>unit</code>. The base test case class <code>nautobot.core.testing.TestCase</code> has this tag, therefore any test cases inheriting from that class do not need to be explicitly tagged. All existing view and API test cases in the Nautobot test suite inherit from this class.</p> <p>By Nautobot convention, integration tests must be tagged with <code>integration</code>. The base test case class <code>nautobot.core.testing.integration.SeleniumTestCase</code> has this tag, therefore any test cases inheriting from that class do not need to be explicitly tagged. All existing integration test cases in the Nautobot test suite inherit from this class.</p> <p>Changed in version 2.0.0</p> <p>The base test classes moved from <code>nautobot.utilities.testing</code> to <code>nautobot.core.testing</code>.</p> <p>The <code>invoke unittest</code> and <code>invoke integration-test</code> commands are intentionally distinct, and the correct tagging of test cases is essential to enforcing the division between these two test categories. We never want to risk running the unit tests and integration tests at the same time. The isolation from each other is critical to a clean and manageable continuous development cycle.</p>"},{"location":"development/core/testing.html#base-classes-and-code-location","title":"Base Classes and Code Location","text":"Test Type Base Class Code Location Unit <code>nautobot.core.testing.TestCase</code> or subclass (see below) <code>nautobot/APP/tests/test_*.py</code> Integration <code>nautobot.core.testing.integration.SeleniumTestCase</code> <code>nautobot/APP/tests/integration/test_*.py</code> <ul> <li>New unit tests must always inherit from <code>nautobot.core.testing.TestCase</code> or one of its subclasses. Do not use <code>django.test.TestCase</code>.<ul> <li>API view test cases should generally inherit from one or more of the classes in <code>nautobot.core.testing.api.APIViewTestCases</code>.</li> <li>Filterset test cases should generally inherit from <code>nautobot.core.testing.filters.FilterTestCases.FilterTestCase</code>.</li> <li>Model test cases should generally inherit from <code>nautobot.core.testing.models.ModelTestCases.BaseModelTestCase</code>.</li> <li>View test cases should generally inherit from one or more of the classes in <code>nautobot.core.testing.views.ViewTestCases</code>.</li> </ul> </li> <li>New integration tests must always inherit from <code>nautobot.core.testing.integration.SeleniumTestCase</code>. Do not use any other base class for integration tests.</li> </ul> <p>Changed in version 2.0.0</p> <p>The base test classes moved from <code>nautobot.utilities.testing</code> to <code>nautobot.core.testing</code>.</p>"},{"location":"development/core/testing.html#generic-filter-tests","title":"Generic Filter Tests","text":"<p>Added in version 2.0.0</p> <p>Nautobot provides a set of generic tests for testing the behavior of FilterSets. These tests are located in <code>nautobot.core.testing.filters.FilterTestCase</code> and can be used to test some common filters in Nautobot.</p>"},{"location":"development/core/testing.html#generic-boolean-filter-tests","title":"Generic Boolean Filter Tests","text":"<p>When using <code>FilterTestCase</code>, all filters that are instances of <code>nautobot.core.filters.RelatedMembershipBooleanFilter</code> that are not using a custom filter method will be tested to verify that the filter returns the same results as the model's queryset. <code>RelatedMembershipBooleanFilter</code> filters will be tested for both <code>True</code> and <code>False</code> values.</p>"},{"location":"development/core/testing.html#generic-multiple-choice-filter-tests","title":"Generic Multiple Choice Filter Tests","text":"<p>A <code>generic_filter_tests</code> attribute with a list of filters can be defined on the test class to run generic tests against multiple choice filters. The <code>generic_filter_tests</code> attribute should be in the following format:</p> <pre><code>generic_filter_tests = (\n# use a single item when the filter name matches the model field name\n[\"model_field\"],\n# use [filter_name, field_name] when the filter name does not match the model field name\n[\"related_object_filter\", \"related_object__name\"],\n# the field name is passed as a kwarg to the `queryset.filter` method, so the dunder syntax can be used to make nested queries\n[\"related_object_filter\", \"related_object__id\"],\n)\n</code></pre>"},{"location":"development/core/testing.html#tags-filter-test","title":"Tags Filter Test","text":"<p>If the model being tested is a <code>PrimaryModel</code>, the <code>tags</code> filter will be automatically tested by passing at least two values to the filter and verifying that the result matches the equivalent queryset filter.</p>"},{"location":"development/core/testing.html#integration-tests","title":"Integration Tests","text":""},{"location":"development/core/testing.html#troubleshooting-integration-tests","title":"Troubleshooting Integration Tests","text":"<p>Because integration tests normally involve interacting with Nautobot through a browser via Selenium and the Splinter wrapper library, they can be difficult to troubleshoot directly from the Python code when a failure occurs. A common troubleshooting technique is to add a <code>breakpoint()</code> at the appropriate place in the Python test code (i.e., immediately prior to the observed failure). When the breakpoint is hit and the test pauses, you can then use a VNC viewer application (such as macOS's \"Screen Sharing\" app) to connect to the running Selenium instance (<code>localhost:15900</code> if using the Docker development environment; the default password if prompted is simply \"<code>secret</code>\"). This will allow you to interact live with the testing web browser in its current state and can often provide invaluable insight into the nature of any test failure.</p>"},{"location":"development/core/testing.html#factories","title":"Factories","text":"<p>Added in version 1.5.0</p> <p>Nautobot uses the <code>factory_boy</code> library as a way to generate randomized but plausible database data for use in unit and integration tests, or for convenience in populating a local development instance.</p> <p>Factories for each Nautobot app's models are defined in the corresponding <code>nautobot/APPNAME/factory.py</code> files. Helper classes and functions for certain common patterns are defined in <code>nautobot/core/factory.py</code>. Factories can be used directly from <code>nautobot-server nbshell</code> so long as you have <code>factory_boy</code> installed. Examples:</p> <pre><code>&gt;&gt;&gt; from nautobot.tenancy.factory import TenantFactory, TenantGroupFactory\n&gt;&gt;&gt; # Create a single TenantGroup instance\n&gt;&gt;&gt; TenantGroupFactory.create()\n&lt;TenantGroup: Peterson, Nunez and Miller&gt;\n&gt;&gt;&gt; # Create 5 Tenant instances\n&gt;&gt;&gt; TenantFactory.create_batch(5)\n[&lt;Tenant: Smith-Vance&gt;, &lt;Tenant: Sanchez, Brown and Davis&gt;, &lt;Tenant: Benson and Sons&gt;, &lt;Tenant: Pennington PLC&gt;, &lt;Tenant: Perez and Sons&gt;]\n&gt;&gt;&gt; # Create 5 more Tenant instances all with a specified \"group\" value\n&gt;&gt;&gt; TenantFactory.create_batch(5, group=TenantGroup.objects.first())\n[&lt;Tenant: Mercado, Wilson and Fuller&gt;, &lt;Tenant: Blackburn-Andrade&gt;, &lt;Tenant: Oliver-Ramirez&gt;, &lt;Tenant: Pugh-Clay&gt;, &lt;Tenant: Norman and Sons&gt;]\n</code></pre> <p>Warning</p> <p><code>factory_boy</code> is only a development dependency of Nautobot. You cannot use the model factories in a production deployment of Nautobot unless you directly <code>pip install factory_boy</code> into such a deployment.</p> <p>Nautobot's custom test runner class (<code>nautobot.core.tests.runner.NautobotTestRunner</code>) makes use of the various factories to pre-populate the test database with data before running any tests. This reduces the need for individual tests to define their own baseline data sets.</p> <p>Info</p> <p>Because plugins also commonly use Nautobot's test runner, the base Nautobot <code>settings.py</code> currently defaults <code>TEST_USE_FACTORIES</code> to <code>False</code> so as to not negatively impact plugin tests that may not be designed to account for the presence of pre-populated test data in the database. This configuration is overridden to <code>True</code> in <code>nautobot/core/tests/nautobot_config.py</code> for Nautobot's own tests.</p>"},{"location":"development/core/testing.html#factory-caching","title":"Factory Caching","text":"<p>Added in version 1.5.11</p> <p>To reduce the time taken between multiple test runs, a new argument has been added to the <code>nautobot-server test</code>, <code>invoke unittest</code> and <code>invoke integration-test</code> commands: <code>--cache-test-fixtures</code>. When running one of these commands with <code>--cache-test-fixtures</code> for the first time, after the factory data has been generated it will be saved to a <code>factory_dump.json</code> file in the <code>development</code> directory. On subsequent runs of unit or integration tests, the factory data will be loaded from the file instead of being generated again. This can significantly reduce the time taken to run tests. It's a good idea to let this file be regenerated after pulling new code from the repository, as the factory data may have changed.</p> <p>Factory caching is disabled by default. When using the <code>invoke</code> commands to run tests, caching can be enabled by default for your development environment by setting the <code>cache_test_fixtures</code> key to <code>True</code> in the <code>invoke.yml</code> file.</p>"},{"location":"development/core/testing.html#performance-tests","title":"Performance Tests","text":"<p>Added in version 1.5.0</p>"},{"location":"development/core/testing.html#running-performance-tests","title":"Running Performance Tests","text":"<p>Nautobot uses <code>django-slowtests</code> to run performance tests. To run performance tests, you need to install the <code>django-slowtests</code> package. Once you install the package, you can do <code>invoke performance-test</code> or <code>invoke unittest --performance-test</code> to run unit tests with <code>NautobotPerformanceTestRunner</code>. The invoke commands will automatically add <code>--testrunner nautobot.core.tests.runner.NautobotPerformanceTestRunner</code> to the <code>coverage run</code> command and this flag will replace the default <code>NautobotTestRunner</code> while retaining all its functionalities with the addition of performance evaluation after test runs.</p> <p><code>NautobotPerformanceTestRunner</code> which inherits from <code>DiscoverSlowestTestsRunner</code> will only be available when <code>django-slowtests</code> is installed. The runner measures the time to run unit tests against baselines stored in a designated .yml file (defaults to <code>nautobot/core/tests/performance_baselines.yml</code>) in addition to running the unit tests themselves.</p> <p>Warning</p> <p>This functionality requires the installation of the <code>django-slowtests</code> Python package, which is present in Nautobot's own development environment, but is not an inherent dependency of the Nautobot package when installed otherwise, such as into a plugin's development environment.</p> <p>Info</p> <p><code>invoke performance-test</code> is enabled when <code>django-slowtests</code> is installed and when called, it will run and evaluate the performance of specific unit tests that are tagged with <code>performance</code> i.e. <code>@tag(\"performance\")</code>. <code>invoke unittest --performance-report</code> and <code>invoke integration-test --performance-report</code> will also be enabled and when called, they will generate a performance report for all the tests ran in the terminal. If performance baselines for tests are not available:</p> <pre><code>175 abnormally slower tests:\nPerformance baseline for test_account (nautobot.circuits.tests.test_filters.ProviderTestCase) is not available. Test took 0.0758s to run\nPerformance baseline for test_asn (nautobot.circuits.tests.test_filters.ProviderTestCase) is not available. Test took 0.0427s to run\nPerformance baseline for test_bulk_create_objects (nautobot.circuits.tests.test_api.CircuitTerminationTest) is not available. Test took 0.2900s to run\nPerformance baseline for test_bulk_create_objects (nautobot.circuits.tests.test_api.CircuitTest) is not available. Test took 0.2292s to run\nPerformance baseline for test_bulk_create_objects (nautobot.circuits.tests.test_api.CircuitTypeTest) is not available. Test took 0.1596s to run\nPerformance baseline for test_bulk_create_objects (nautobot.circuits.tests.test_api.ProviderNetworkTest) is not available. Test took 0.1897s to run\nPerformance baseline for test_bulk_create_objects (nautobot.circuits.tests.test_api.ProviderTest) is not available. Test took 0.2092s to run\nPerformance baseline for test_bulk_delete_objects (nautobot.circuits.tests.test_api.CircuitTerminationTest) is not available. Test took 0.1168s to run\nPerformance baseline for test_bulk_delete_objects (nautobot.circuits.tests.test_api.CircuitTest) is not available. Test took 0.2762s to run\nPerformance baseline for test_bulk_delete_objects (nautobot.circuits.tests.test_api.CircuitTypeTest) is not available. Test took 0.0663s to run\nPerformance baseline for test_bulk_delete_objects (nautobot.circuits.tests.test_api.ProviderNetworkTest) is not available. Test took 0.0875s to run\n...\n</code></pre> <p>Info</p> <p>If performance baselines for tests are available and the time it take to run tests are siginificantly slower than baselines:</p> <pre><code>12 abnormally slower tests:\n0.9838s test_bulk_import_objects_with_constrained_permission (nautobot.ipam.tests.test_views.VLANTestCase) is significantly slower than the baseline 0.3692s\n1.2548s test_create_multiple_objects_with_constrained_permission (nautobot.dcim.tests.test_views.ConsolePortTestCase) is significantly slower than the baseline 0.5385s\n1.4289s test_create_multiple_objects_with_constrained_permission (nautobot.dcim.tests.test_views.DeviceBayTestCase) is significantly slower than the baseline 0.5616s\n1.1551s test_create_multiple_objects_with_constrained_permission (nautobot.dcim.tests.test_views.InventoryItemTestCase) is significantly slower than the baseline 0.5822s\n1.4712s test_create_multiple_objects_with_constrained_permission (nautobot.dcim.tests.test_views.RearPortTestCase) is significantly slower than the baseline 0.5695s\n1.5958s test_create_multiple_objects_with_constrained_permission (nautobot.virtualization.tests.test_views.VMInterfaceTestCase) is significantly slower than the baseline 1.0020s\n1.0566s test_create_object_with_constrained_permission (nautobot.virtualization.tests.test_views.VirtualMachineTestCase) is significantly slower than the baseline 0.3627s\n...\n</code></pre> <p>Info</p> <p>To output the performance evaluation to a file for later use, i.e. as performance baselines for future test runs, do <code>invoke performance-test --performance-snapshot</code>. This command will collect the <code>names</code> of the test and their <code>execution_time</code> and store them in a .yml file default to <code>report.yml</code>. Subsequently, the data in that file will have to be manually added to the baseline file set at <code>TEST_PERFORMANCE_BASELINE_FILE</code> to be used as baselines in performance tests.</p> <p>Example output of <code>invoke performance-test --performance-snapshot</code>:</p> <pre><code>- tests:\n- name: test_account (nautobot.circuits.tests.test_filters.ProviderTestCase)\nexecution_time: 0.07075\n- name: test_asn (nautobot.circuits.tests.test_filters.ProviderTestCase)\nexecution_time: 0.041262\n- name: test_cabled (nautobot.circuits.tests.test_filters.CircuitTerminationTestCase)\nexecution_time: 0.268673\n- name: test_cid (nautobot.circuits.tests.test_filters.CircuitTestCase)\nexecution_time: 0.116057\n- name: test_circuit_id (nautobot.circuits.tests.test_filters.CircuitTerminationTestCase)\nexecution_time: 0.042665\n- name: test_commit_rate (nautobot.circuits.tests.test_filters.CircuitTestCase)\nexecution_time: 0.047894\n- name: test_connected (nautobot.circuits.tests.test_filters.CircuitTerminationTestCase)\nexecution_time: 0.056196\n- name: test_id (nautobot.circuits.tests.test_filters.CircuitTerminationTestCase)\nexecution_time: 0.03598\n...\n</code></pre>"},{"location":"development/core/testing.html#gathering-performance-test-baseline-data","title":"Gathering Performance Test Baseline Data","text":"<p><code>TEST_PERFORMANCE_BASELINE_FILE</code> specifies the file in which performance baselines are stored, defaults to <code>nautobot/core/tests/performance_baselines.yml</code>. Currently, only baselines for those unit tests tagged with <code>performance</code> are stored.</p> <p>You can add baselines for your own test to <code>nautobot/core/tests/performance_baselines.yml</code> or have your own baseline yaml file for performance testing by specifying a different file path for  <code>TEST_PERFORMANCE_BASELINE_FILE</code> in plugin's development/test <code>nautobot_config.py</code>, and store the output of <code>invoke performance-test --performance-snapshot</code> in that file. <code>--performance-snapshot</code> flag will store the results of your performance test to a new <code>report.yml</code> and all you need to do is copy/paste the results to the file set by <code>TEST_PERFORMANCE_BASELINE_FILE</code>. Now you have baselines for your own tests!</p> <p>Example output of <code>invoke performance-test --performance-snapshot</code>:</p> <pre><code>- tests:\n- name: test_account (nautobot.circuits.tests.test_filters.ProviderTestCase)\nexecution_time: 0.07075\n- name: test_asn (nautobot.circuits.tests.test_filters.ProviderTestCase)\nexecution_time: 0.041262\n- name: test_cabled (nautobot.circuits.tests.test_filters.CircuitTerminationTestCase)\nexecution_time: 0.268673\n- name: test_cid (nautobot.circuits.tests.test_filters.CircuitTestCase)\nexecution_time: 0.116057\n- name: test_circuit_id (nautobot.circuits.tests.test_filters.CircuitTerminationTestCase)\n...\n</code></pre> <p>if you decide to run <code>invoke unittest --performance-test</code> which will run tests that currently do not have their baselines present in the file, your output could look something like this:</p> <pre><code>175 abnormally slower tests:\nPerformance baseline for test_account (nautobot.circuits.tests.test_filters.ProviderTestCase) is not available. Test took 0.0758s to run\nPerformance baseline for test_asn (nautobot.circuits.tests.test_filters.ProviderTestCase) is not available. Test took 0.0427s to run\nPerformance baseline for test_bulk_create_objects (nautobot.circuits.tests.test_api.CircuitTerminationTest) is not available. Test took 0.2900s to run\nPerformance baseline for test_bulk_create_objects (nautobot.circuits.tests.test_api.CircuitTest) is not available. Test took 0.2292s to run\nPerformance baseline for test_bulk_create_objects (nautobot.circuits.tests.test_api.CircuitTypeTest) is not available. Test took 0.1596s to run\nPerformance baseline for test_bulk_create_objects (nautobot.circuits.tests.test_api.ProviderNetworkTest) is not available. Test took 0.1897s to run\nPerformance baseline for test_bulk_create_objects (nautobot.circuits.tests.test_api.ProviderTest) is not available. Test took 0.2092s to run\nPerformance baseline for test_bulk_delete_objects (nautobot.circuits.tests.test_api.CircuitTerminationTest) is not available. Test took 0.1168s to run\nPerformance baseline for test_bulk_delete_objects (nautobot.circuits.tests.test_api.CircuitTest) is not available. Test took 0.2762s to run\nPerformance baseline for test_bulk_delete_objects (nautobot.circuits.tests.test_api.CircuitTypeTest) is not available. Test took 0.0663s to run\nPerformance baseline for test_bulk_delete_objects (nautobot.circuits.tests.test_api.ProviderNetworkTest) is not available. Test took 0.0875s to run\n...\n</code></pre>"},{"location":"development/core/testing.html#caveats","title":"Caveats","text":"<p>Warning</p> <p><code>django-slowtests</code> is only a development dependency of Nautobot. You cannot run performance tests in a production deployment of Nautobot unless you directly <code>pip install django-slowtests</code> into such a deployment.</p> <p>Info</p> <p>Because plugins also commonly use Nautobot's default test runner <code>NautobotTestRunner</code>, in order to use <code>NautobotPerformanceTestRunner</code> you need to add <code>django-slowtests</code> as a part of your plugin dev dependencies.</p>"},{"location":"development/core/testing.html#test-code-style","title":"Test Code Style","text":"<ul> <li>Use more specific/feature-rich test assertion methods where available (e.g. <code>self.assertInHTML(fragment, html)</code> rather than <code>self.assertTrue(re.search(fragment, html))</code> or <code>assert re.search(fragment, html) is not None</code>).</li> <li>Keep test case scope (especially in unit tests) small. Split test functions into smaller tests where possible; otherwise, use <code>self.subTest()</code> to delineate test blocks as appropriate.</li> </ul>"},{"location":"development/core/user-preferences.html","title":"User Preferences","text":"<p>The <code>users.User</code> model holds individual preferences for each user in the form of JSON data in the <code>config_data</code> field. This page serves as a manifest of all recognized user preferences in Nautobot.</p>"},{"location":"development/core/user-preferences.html#available-preferences","title":"Available Preferences","text":"Name Description <code>extras.configcontext.format</code> Preferred format when rendering config context data (JSON or YAML) <code>pagination.per_page</code> The number of items to display per page of a paginated table <code>tables.TABLE_NAME.columns</code> The ordered list of columns to display when viewing the table"},{"location":"development/jobs/index.html","title":"Jobs","text":"<p>TODO: Jobs authorship introduction</p>"},{"location":"development/jobs/index.html#migrating-jobs-from-v1-to-v2","title":"Migrating Jobs from v1 to v2","text":"<p>Changed in version 2.0.0</p> <p>See Migrating Jobs From Nautobot v1 for more information on how to migrate your existing jobs to Nautobot v2.</p>"},{"location":"development/jobs/index.html#writing-jobs","title":"Writing Jobs","text":"<p>Jobs may be installed in one of three ways:</p> <ul> <li>Manually installed as files in the <code>JOBS_ROOT</code> path (which defaults to <code>$NAUTOBOT_ROOT/jobs/</code>).<ul> <li>The <code>JOBS_ROOT</code> directory must contain a file named <code>__init__.py</code>. Do not delete this file.</li> <li>Each file created within this path is considered a separate module; there is no support for cross-file dependencies (such as a file acting as a common \"library\" module of functions shared between jobs) for files installed in this way.</li> </ul> </li> <li>Imported from an external Git repository.<ul> <li>The repository's <code>jobs/</code> directory must contain a file named <code>__init__.py</code>.</li> <li>Each Job file in the repository is considered a separate module; there is no support for cross-file dependencies (such as a file acting as a common \"library\" module of functions shared between jobs) for files installed in this way.</li> </ul> </li> <li>Packaged as part of a plugin.<ul> <li>Jobs installed this way are part of the plugin module and can import code from elsewhere in the plugin or even have dependencies on other packages, if needed, via the standard Python packaging mechanisms.</li> </ul> </li> </ul> <p>In any case, each module holds one or more Jobs (Python classes), each of which serves a specific purpose. The logic of each job can be split into a number of distinct methods, each of which performs a discrete portion of the overall job logic.</p> <p>For example, we can create a module named <code>devices.py</code> to hold all of our jobs which pertain to devices in Nautobot. Within that module, we might define several jobs. Each job is defined as a Python class inheriting from <code>nautobot.apps.jobs.Job</code>, which provides the base functionality needed to accept user input and log activity.</p> <p>Changed in version 2.0.0</p> <p>All job classes must now be registered with <code>nautobot.apps.jobs.register_jobs</code> on module import. For plugins providing jobs, the <code>register_jobs</code> method must called from the plugin's <code>jobs.py</code> file/submodule at import time. The <code>register_jobs</code> method accepts one or more job classes as arguments.</p> <p>Warning</p> <p>Make sure you are not inheriting <code>extras.jobs.models.Job</code> instead, otherwise Django will think you want to define a new database model.</p> <pre><code>from nautobot.apps.jobs import Job, register_jobs\nclass CreateDevices(Job):\n...\nclass DeviceConnectionsReport(Job):\n...\nclass DeviceIPsReport(Job):\n...\nregister_jobs(CreateDevices, DeviceConnectionsReport, DeviceIPsReport)\n</code></pre> <p>Each job class will implement some or all of the following components:</p> <ul> <li>Module and class attributes, providing for default behavior, documentation and discoverability</li> <li>a set of variables for user input via the Nautobot UI (if your job requires any user inputs)</li> <li>a <code>run()</code> method, which is the only required attribute on a Job class and receives the user input values, if any</li> </ul> <p>It's important to understand that jobs execute on the server asynchronously as background tasks; they log messages and report their status to the database by updating <code>JobResult</code> records and creating <code>JobLogEntry</code> records.</p> <p>Note</p> <p>When actively developing a Job utilizing a development environment it's important to understand that the \"automatically reload when code changes are detected\" debugging functionality provided by <code>nautobot-server runserver</code> does not automatically restart the Celery <code>worker</code> process when code changes are made; therefore, it is required to restart the <code>worker</code> after each update to your Job source code or else it will continue to run the version of the Job code that was present when it first started.</p> <p>Additionally, as of Nautobot 1.3, the Job database records corresponding to installed Jobs are not automatically refreshed when the development server auto-restarts. If you make changes to any of the class and module metadata attributes described in the following sections, the database will be refreshed to reflect these changes only after running <code>nautobot-server migrate</code> or <code>nautobot-server post_upgrade</code> (recommended) or if you manually edit a Job database record to force it to be refreshed.</p>"},{"location":"development/jobs/index.html#module-metadata-attributes","title":"Module Metadata Attributes","text":""},{"location":"development/jobs/index.html#name-grouping","title":"<code>name</code> (Grouping)","text":"<p>You can define a global constant called <code>name</code> within a job module (the Python file which contains one or more job classes) to set the default grouping under which jobs in this module will be displayed in the Nautobot UI. If this value is not defined, the module's file name will be used. This \"grouping\" value may also be defined or overridden when editing Job records in the database.</p> <p>Note</p> <p>In some UI elements and API endpoints, the module file name is displayed in addition to or in place of this attribute, so even if defining this attribute, you should still choose an appropriately explanatory file name as well.</p>"},{"location":"development/jobs/index.html#class-metadata-attributes","title":"Class Metadata Attributes","text":"<p>Job-specific attributes may be defined under a class named <code>Meta</code> within each job class you implement. All of these are optional, but encouraged.</p>"},{"location":"development/jobs/index.html#name","title":"<code>name</code>","text":"<p>This is the human-friendly name of your job, as will be displayed in the Nautobot UI. If not set, the class name will be used.</p> <p>Note</p> <p>In some UI elements and API endpoints, the class name is displayed in addition to or in place of this attribute, so even if defining this attribute, you should still choose an appropriately explanatory class name as well.</p>"},{"location":"development/jobs/index.html#description","title":"<code>description</code>","text":"<p>An optional human-friendly description of what this job does. This can accept either plain text or Markdown-formatted text. It can also be multiple lines:</p> <pre><code>class ExampleJob(Job):\nclass Meta:\ndescription = \"\"\"\n            This job does a number of interesting things.\n             1. It hacks the Gibson\n             2. It immanentizes the eschaton\n             3. It's a floor wax *and* a dessert topping\n        \"\"\"\n</code></pre> <p>If you code a multi-line description, the first line only will be used in the description column of the jobs list, while the full description will be rendered in the job detail view, submission, approval, and results pages.</p>"},{"location":"development/jobs/index.html#approval_required","title":"<code>approval_required</code>","text":"<p>Default: <code>False</code></p> <p>A boolean that will mark this job as requiring approval from another user to be run. For more details on approvals, please refer to the section on scheduling and approvals.</p>"},{"location":"development/jobs/index.html#dryrun_default","title":"<code>dryrun_default</code>","text":"<p>Changed in version 2.0.0</p> <p>The <code>commit_default</code> field was renamed to <code>dryrun_default</code> and the default value was changed from <code>True</code> to <code>False</code>. The <code>commit</code> functionality that provided an automatic rollback of database changes if the job failed was removed. The <code>dryrun</code> functionality was added to provide a way to bypass job approval if a job implements a <code>DryRunVar</code>.</p> <p>Default: <code>False</code></p> <p>The checkbox to enable dryrun when executing a job is unchecked by default in the Nautobot UI. You can set <code>dryrun_default</code> to <code>True</code> under the <code>Meta</code> class if you want this option to instead be checked by default.</p> <pre><code>class MyJob(Job):\nclass Meta:\ndryrun_default = True\n</code></pre>"},{"location":"development/jobs/index.html#field_order","title":"<code>field_order</code>","text":"<p>Default: <code>[]</code></p> <p>A list of strings (field names) representing the order your job variables should be rendered as form fields in the job submission UI. If not defined, the variables will be listed in order of their definition in the code. If variables are defined on a parent class and no field order is defined, the parent class variables will appear before the subclass variables.</p>"},{"location":"development/jobs/index.html#has_sensitive_variables","title":"<code>has_sensitive_variables</code>","text":"<p>Added in version 1.3.10</p> <p>Default: <code>True</code></p> <p>Unless set to False, it prevents the job's input parameters from being saved to the database. This defaults to True so as to protect against inadvertent database exposure of input parameters that may include sensitive data such as passwords or other user credentials. Review whether each job's inputs contain any such variables before setting this to False; if a job does contain sensitive inputs, if possible you should consider whether the job could be re-implemented using Nautobot's <code>Secrets</code> feature as a way to ensure that the sensitive data is not directly provided as a job variable at all.</p> <p>Important notes about jobs with sensitive variables:</p> <ul> <li>Such jobs cannot be scheduled to run in the future or on a recurring schedule (as scheduled jobs must by necessity store their variables in the database for future reference).</li> <li>Jobs with sensitive variables cannot be marked as requiring approval (as jobs pending approval must store their variables in the database until approved).</li> </ul>"},{"location":"development/jobs/index.html#hidden","title":"<code>hidden</code>","text":"<p>Default: <code>False</code></p> <p>A Boolean that if set to <code>True</code> prevents the job from being displayed by default in the list of Jobs in the Nautobot UI.</p> <p>Since the jobs execution framework is designed to be generic, there may be several technical jobs defined by users which interact with or are invoked by external systems. In such cases, these jobs are not meant to be executed by a human and likely do not make sense to expose to end users for execution, and thus having them exposed in the UI at all is extraneous.</p> <p>Important notes about hidden jobs:</p> <ul> <li>This is merely hiding them by default from the web interface. It is NOT a security feature.</li> <li>In the Jobs list view it is possible to filter to \"Hidden: (no selection)\" or even \"Hidden: Yes\" to list the hidden jobs.</li> <li>All Job UI and REST API endpoints still exist for hidden jobs and can be accessed by any user who is aware of their existence.</li> <li>Hidden jobs can still be executed through the UI or the REST API given the appropriate URL.</li> <li>Results for hidden jobs will still appear in the Job Results list after they are run.</li> </ul>"},{"location":"development/jobs/index.html#read_only","title":"<code>read_only</code>","text":"<p>Added in version 1.1.0</p> <p>Changed in version 2.0.0</p> <p>The <code>read_only</code> flag no longer changes the behavior of Nautobot core and is up to the job author to decide whether their job should be considered read only.</p> <p>Default: <code>False</code></p> <p>A boolean that can be set by the job author to indicate that the job does not make any changes to the environment. What behavior makes each job \"read only\" is up to the individual job author to decide. Note that user input may still be optionally collected with read-only jobs via job variables, as described below.</p>"},{"location":"development/jobs/index.html#soft_time_limit","title":"<code>soft_time_limit</code>","text":"<p>Added in version 1.3.0</p> <p>An int or float value, in seconds, which can be used to override the default soft time limit for a job task to complete.</p> <p>The <code>celery.exceptions.SoftTimeLimitExceeded</code> exception will be raised when this soft time limit is exceeded. The job task can catch this to clean up before the hard time limit (10 minutes by default) is reached:</p> <pre><code>from celery.exceptions import SoftTimeLimitExceeded\nfrom nautobot.apps.jobs import Job\nclass ExampleJobWithSoftTimeLimit(Job):\nclass Meta:\nname = \"Soft Time Limit\"\ndescription = \"Set a soft time limit of 10 seconds`\"\nsoft_time_limit = 10\ndef run(self):\ntry:\n# code which might take longer than 10 seconds to run\njob_code()\nexcept SoftTimeLimitExceeded:\n# any clean up code\ncleanup_in_a_hurry()\n</code></pre>"},{"location":"development/jobs/index.html#task_queues","title":"<code>task_queues</code>","text":"<p>Added in version 1.5.0</p> <p>Default: <code>[]</code></p> <p>A list of task queue names that the job can be routed to. An empty list will default to only allowing the user to select the default queue (<code>default</code> unless changed by an administrator). The first queue in the list will be used if a queue is not specified in a job run API call.</p> <p>Note</p> <p>A worker must be listening on the requested queue or the job will not run. See the documentation on task queues for more information.</p>"},{"location":"development/jobs/index.html#template_name","title":"<code>template_name</code>","text":"<p>Added in version 1.4.0</p> <p>A path relative to the job source code containing a Django template which provides additional code to customize the Job's submission form. This template should extend the existing job template, <code>extras/job.html</code>, otherwise the base form and functionality may not be available.</p> <p>A template can provide additional JavaScript, CSS, or even display HTML. A good starting template would be:</p> <pre><code>{% extends 'extras/job.html' %}\n\n{% block extra_styles %}\n    {{ block.super }}\n    &lt;!-- Add additional CSS here. --&gt;\n{% endblock %}\n{% block content %}\n    {{ block.super }}\n    &lt;!-- Add additional HTML here. --&gt;\n{% endblock content %}\n{% block javascript %}\n    {{ block.super }}\n    &lt;!-- Add additional JavaScript here. --&gt;\n{% endblock javascript %}\n</code></pre> <p>For another example checkout the template used in example plugin in the GitHub repo.</p>"},{"location":"development/jobs/index.html#time_limit","title":"<code>time_limit</code>","text":"<p>Added in version 1.3.0</p> <p>An int or float value, in seconds, which can be used to override the default hard time limit (10 minutes by default) for a job task to complete.</p> <p>Unlike the <code>soft_time_limit</code> above, no exceptions are raised when a <code>time_limit</code> is exceeded. The task will just terminate silently:</p> <pre><code>from nautobot.apps.jobs import Job\nclass ExampleJobWithHardTimeLimit(Job):\nclass Meta:\nname = \"Hard Time Limit\"\ndescription = \"Set a hard time limit of 10 seconds`\"\ntime_limit = 10\ndef run(self):\n# code which might take longer than 10 seconds to run\n# this code will fail silently if the time_limit is exceeded\njob_code()\n</code></pre> <p>Note</p> <p>If the <code>time_limit</code> is set to a value less than or equal to the <code>soft_time_limit</code>, a warning log is generated to inform the user that this job will fail silently after the <code>time_limit</code> as the <code>soft_time_limit</code> will never be reached.</p>"},{"location":"development/jobs/index.html#variables","title":"Variables","text":"<p>Variables allow your job to accept user input via the Nautobot UI, but they are optional; if your job does not require any user input, there is no need to define any variables. Conversely, if you are making use of user input in your job, you must also implement the <code>run()</code> method, as it is the only entry point to your job that has visibility into the variable values provided by the user.</p> <pre><code>from nautobot.apps.jobs import Job, StringVar, IntegerVar, ObjectVar\nclass CreateDevices(Job):\nvar1 = StringVar(...)\nvar2 = IntegerVar(...)\nvar3 = ObjectVar(...)\ndef run(self, var1, var2, var3):\n...\n</code></pre> <p>The remainder of this section documents the various supported variable types and how to make use of them.</p>"},{"location":"development/jobs/index.html#default-variable-options","title":"Default Variable Options","text":"<p>All job variables support the following default options:</p> <ul> <li><code>default</code> - The field's default value</li> <li><code>description</code> - A brief user-friendly description of the field</li> <li><code>label</code> - The field name to be displayed in the rendered form</li> <li><code>required</code> - Indicates whether the field is mandatory (all fields are required by default)</li> <li><code>widget</code> - The class of form widget to use (see the Django documentation)</li> </ul>"},{"location":"development/jobs/index.html#stringvar","title":"<code>StringVar</code>","text":"<p>Stores a string of characters (i.e. text). Options include:</p> <ul> <li><code>min_length</code> - Minimum number of characters</li> <li><code>max_length</code> - Maximum number of characters</li> <li><code>regex</code> - A regular expression against which the provided value must match</li> </ul> <p>Note that <code>min_length</code> and <code>max_length</code> can be set to the same number to effect a fixed-length field.</p>"},{"location":"development/jobs/index.html#textvar","title":"<code>TextVar</code>","text":"<p>Arbitrary text of any length. Renders as a multi-line text input field.</p>"},{"location":"development/jobs/index.html#integervar","title":"<code>IntegerVar</code>","text":"<p>Stores a numeric integer. Options include:</p> <ul> <li><code>min_value</code> - Minimum value</li> <li><code>max_value</code> - Maximum value</li> </ul>"},{"location":"development/jobs/index.html#booleanvar","title":"<code>BooleanVar</code>","text":"<p>A true/false flag. This field has no options beyond the defaults listed above.</p>"},{"location":"development/jobs/index.html#dryrunvar","title":"<code>DryRunVar</code>","text":"<p>A true/false flag with special handling for jobs that require approval. If <code>dryrun = DryRunVar()</code> is declared on a job class, approval may be bypassed if <code>dryrun</code> is set to <code>True</code> on job execution.</p>"},{"location":"development/jobs/index.html#choicevar","title":"<code>ChoiceVar</code>","text":"<p>A set of choices from which the user can select one.</p> <ul> <li><code>choices</code> - A list of <code>(value, label)</code> tuples representing the available choices. For example:</li> </ul> <pre><code>CHOICES = (\n('n', 'North'),\n('s', 'South'),\n('e', 'East'),\n('w', 'West')\n)\ndirection = ChoiceVar(choices=CHOICES)\n</code></pre> <p>In the example above, selecting the choice labeled \"North\" will submit the value <code>n</code>.</p>"},{"location":"development/jobs/index.html#multichoicevar","title":"<code>MultiChoiceVar</code>","text":"<p>Similar to <code>ChoiceVar</code>, but allows for the selection of multiple choices.</p>"},{"location":"development/jobs/index.html#objectvar","title":"<code>ObjectVar</code>","text":"<p>A particular object within Nautobot. Each ObjectVar must specify a particular model, and allows the user to select one of the available instances. ObjectVar accepts several arguments, listed below.</p> <ul> <li><code>model</code> - The model class</li> <li><code>display_field</code> - The name of the REST API object field to display in the selection list (default: <code>'display'</code>)</li> <li><code>query_params</code> - A dictionary of REST API query parameters to use when retrieving available options (optional)</li> <li><code>null_option</code> - A label representing a \"null\" or empty choice (optional)</li> </ul> <p>The <code>display_field</code> argument is useful in cases where using the <code>display</code> API field is not desired for referencing the object. For example, when displaying a list of IP Addresses, you might want to use the <code>dns_name</code> field:</p> <pre><code>device_type = ObjectVar(\nmodel=IPAddress,\ndisplay_field=\"dns_name\",\n)\n</code></pre> <p>To limit the selections available within the list, additional query parameters can be passed as the <code>query_params</code> dictionary. For example, to show only devices with an \"active\" status:</p> <pre><code>device = ObjectVar(\nmodel=Device,\nquery_params={\n'status': 'active'\n}\n)\n</code></pre> <p>Multiple values can be specified by assigning a list to the dictionary key. It is also possible to reference the value of other fields in the form by prepending a dollar sign (<code>$</code>) to the variable's name. The keys you can use in this dictionary are the same ones that are available in the REST API - as an example it is also possible to filter the <code>Location</code> <code>ObjectVar</code> for its <code>location_type</code> and <code>tenant_group</code>.</p> <pre><code>location_type = ObjectVar(\nmodel=LocationType\n)\ntenant_group = ObjectVar(\nmodel=TenantGroup\n)\nlocation = ObjectVar(\nmodel=Location,\nquery_params={\n\"location_type\": \"$location_type\",\n\"tenant_group\": \"$tenant_group\"\n}\n)\n</code></pre>"},{"location":"development/jobs/index.html#multiobjectvar","title":"<code>MultiObjectVar</code>","text":"<p>Similar to <code>ObjectVar</code>, but allows for the selection of multiple objects.</p>"},{"location":"development/jobs/index.html#filevar","title":"<code>FileVar</code>","text":"<p>An uploaded file. Note that uploaded files are present in memory only for the duration of the job's execution: They will not be automatically saved for future use. The job is responsible for writing file contents to disk where necessary.</p>"},{"location":"development/jobs/index.html#ipaddressvar","title":"<code>IPAddressVar</code>","text":"<p>An IPv4 or IPv6 address, without a mask. Returns a <code>netaddr.IPAddress</code> object.</p>"},{"location":"development/jobs/index.html#ipaddresswithmaskvar","title":"<code>IPAddressWithMaskVar</code>","text":"<p>An IPv4 or IPv6 address with a mask. Returns a <code>netaddr.IPNetwork</code> object which includes the mask.</p>"},{"location":"development/jobs/index.html#ipnetworkvar","title":"<code>IPNetworkVar</code>","text":"<p>An IPv4 or IPv6 network with a mask. Returns a <code>netaddr.IPNetwork</code> object. Two attributes are available to validate the provided mask:</p> <ul> <li><code>min_prefix_length</code> - Minimum length of the mask</li> <li><code>max_prefix_length</code> - Maximum length of the mask</li> </ul>"},{"location":"development/jobs/index.html#the-run-method","title":"The <code>run()</code> Method","text":"<p>The <code>run()</code> method must be implemented. After the <code>self</code> argument, it should accept keyword arguments for any variables defined on the job:</p> <pre><code>from nautobot.apps.jobs import Job, StringVar, IntegerVar, ObjectVar\nclass CreateDevices(Job):\nvar1 = StringVar(...)\nvar2 = IntegerVar(...)\nvar3 = ObjectVar(...)\ndef run(self, var1, var2, var3):\n...\n</code></pre> <p>Again, defining user variables is totally optional; you may create a job with a <code>run()</code> method with only the <code>self</code> argument if no user input is needed.</p> <p>Warning</p> <p>When writing Jobs that create and manipulate data it is recommended to make use of the <code>validated_save()</code> convenience method which exists on all core models. This method saves the instance data but first enforces model validation logic. Simply calling <code>save()</code> on the model instance does not enforce validation automatically and may lead to bad data. See the development best practices.</p> <p>Warning</p> <p>The Django ORM provides methods to create/edit many objects at once, namely <code>bulk_create()</code> and <code>update()</code>. These are best avoided in most cases as they bypass a model's built-in validation and can easily lead to database corruption if not used carefully.</p> <p>Removed in version 2.0.0</p> <p>The NetBox backwards compatible <code>test_*()</code> and <code>post_run()</code> methods have been removed.</p>"},{"location":"development/jobs/index.html#logging","title":"Logging","text":"<p>Changed in version 2.0.0</p> <p>Messages logged from a job's logger will be stored in <code>JobLogEntry</code> records associated with the current <code>JobResult</code>.</p> <p>The logger can be accessed either by using the <code>logger</code> property on the job class or <code>nautobot.extras.jobs.get_task_logger(__name__)</code>. Both will return the same logger instance. For more information on the standard Python logging module, see the Python documentation.</p> <p>An optional <code>grouping</code> and/or <code>object</code> may be provided in log messages by passing them in the log function call's <code>extra</code> kwarg. If a <code>grouping</code> is not provided it will default to the function name that logged the message. The <code>object</code> will default to <code>None</code>.</p> <p>Example</p> <pre><code>from nautobot.apps.jobs import Job\nclass MyJob(Job):\ndef run(self):\nlogger.info(\"This job is running!\", extra={\"grouping\": \"myjobisrunning\", \"object\": self.job_result})\n</code></pre> <p>To skip writing a log entry to the database, set the <code>skip_db_logging</code> key in the \"extra\" kwarg to <code>True</code> when calling the log function. The output will still be written to the console.</p> <p>Example</p> <pre><code>from nautobot.apps.jobs import Job\nclass MyJob(Job):\ndef run(self):\nlogger.info(\"This job is running!\", extra={\"skip_db_logging\": True})\n</code></pre> <p>Markdown rendering is supported for log messages.</p> <p>Changed in version 1.3.4</p> <p>As a security measure, the <code>message</code> passed to any of these methods will be passed through the <code>nautobot.core.utils.logging.sanitize()</code> function in an attempt to strip out information such as usernames/passwords that should not be saved to the logs. This is of course best-effort only, and Job authors should take pains to ensure that such information is not passed to the logging APIs in the first place. The set of redaction rules used by the <code>sanitize()</code> function can be configured as settings.SANITIZER_PATTERNS.</p> <p>Changed in version 2.0.0</p> <p>The Job class logging functions (example: <code>self.log(message)</code>, <code>self.log_success(obj=None, message=message)</code>, etc) have been removed. Also, the convenience method to mark a job as failed, <code>log_failure()</code>, has been removed. To replace the functionality of this method, you can log an error message with <code>self.logger.error()</code> and then raise an exception to fail the job. Note that it is no longer possible to manually set the job result status as failed without raising an exception in the job.</p> <p>Changed in version 2.0.0</p> <p>The <code>AbortTransaction</code> class was moved from the <code>nautobot.utilities.exceptions</code> module to <code>nautobot.core.exceptions</code>.</p>"},{"location":"development/jobs/index.html#marking-a-job-as-failed","title":"Marking a Job as Failed","text":"<p>To mark a job as failed, raise an exception from within the <code>run()</code> method. The exception message will be logged to the traceback of the job result. The job result status will be set to <code>failed</code>. To output a job log message you can use the <code>self.logger.error()</code> method.</p> <pre><code>As an example, the following job will fail if the user does not put the word \"Taco\" in `var1`:\n```python\nfrom nautobot.apps.jobs import Job, StringVar\nclass MyJob(Job):\nvar1 = StringVar(...)\ndef run(self, var1):\nif var1 != \"Taco\":\nself.logger.error(\"var1 must be 'Taco'\")\nraise Exception(\"Argument input validation failed.\")\n</code></pre>"},{"location":"development/jobs/index.html#accessing-user-and-job-result","title":"Accessing User and Job Result","text":"<p>Changed in version 2.0.0</p> <p>The <code>request</code> property has been changed to a Celery request instead of a Django web request and no longer includes the information from the web request that initiated the Job. The <code>user</code> object is now available as <code>self.user</code> instead of <code>self.request.user</code>.</p> <p>The user that initiated the job and the job result associated to the job can be accessed through properties on the job class:</p> <pre><code>username = self.user.username\njob_result_id = self.job_result.id\nself.logger.info(\"Job %s initiated by user %s is running.\", job_result_id, username)\n</code></pre>"},{"location":"development/jobs/index.html#reading-data-from-files","title":"Reading Data from Files","text":"<p>The <code>Job</code> class provides two convenience methods for reading data from files:</p> <ul> <li><code>load_yaml</code></li> <li><code>load_json</code></li> </ul> <p>These two methods will load data in YAML or JSON format, respectively, from files within the local path (i.e. <code>JOBS_ROOT/</code>).</p>"},{"location":"development/jobs/index.html#testing-jobs","title":"Testing Jobs","text":"<p>Jobs are Python code and can be tested as such, usually via Django unit-test features. That said, there are a few useful tricks specific to testing Jobs.</p> <p>While individual methods within your Job can and should be tested in isolation, you'll likely also want to test the entire execution of the Job.</p> <p>Added in version 1.3.3</p> <p>Entire Job execution testing was only introduced in 1.3.3 and newer. However the import paths used in the examples requires 1.5.2 and newer.</p> <p>The simplest way to test the entire execution of Jobs is via calling the <code>nautobot.apps.testing.run_job_for_testing()</code> method, which is a helper wrapper around the <code>JobResult.enqueue_job</code> function used to execute a Job via Nautobot's Celery worker process.</p> <p>Because of the way <code>run_job_for_testing</code> and more specifically Celery tasks work, which is somewhat complex behind the scenes, you need to inherit from <code>nautobot.apps.testing.TransactionTestCase</code> instead of <code>django.test.TestCase</code> (Refer to the Django documentation if you're interested in the differences between these classes - <code>TransactionTestCase</code> from Nautobot is a small wrapper around Django's <code>TransactionTestCase</code>).</p> <p>When using <code>TransactionTestCase</code> (whether from Django or from Nautobot) each tests runs on a completely empty database. Furthermore, Nautobot requires new jobs to be enabled before they can run. Therefore, we need to make sure the job is enabled before each run which <code>run_job_for_testing</code> handles for us.</p> <p>A simple example of a Job test case might look like the following:</p> <pre><code>from nautobot.apps.testing import run_job_for_testing, TransactionTestCase\nfrom nautobot.extras.models import Job, JobLogEntry\nclass MyJobTestCase(TransactionTestCase):\ndef test_my_job(self):\n# Testing of Job \"MyJob\" in file \"my_job_file.py\" in $JOBS_ROOT\njob = Job.objects.get(job_class_name=\"MyJob\", module_name=\"my_job_file\", source=\"local\")\n# or, job = Job.objects.get_for_class_path(\"local/my_job_file/MyJob\")\njob_result = run_job_for_testing(job, var1=\"abc\", var2=123)\n# Inspect the logs created by running the job\nlog_entries = JobLogEntry.objects.filter(job_result=job_result)\nfor log_entry in log_entries:\nself.assertEqual(log_entry.message, \"...\")\n</code></pre> <p>Tip</p> <p>For more advanced examples refer to the Nautobot source code, specifically <code>nautobot/extras/tests/test_jobs.py</code>.</p>"},{"location":"development/jobs/index.html#debugging-job-performance","title":"Debugging job performance","text":"<p>Added in version 1.5.17</p> <p>Debugging the performance of Nautobot jobs can be tricky, because they are executed in the worker context. In order to gain extra visibility, cProfile can be used to profile the job execution.</p> <p>The 'profile' form field on jobs is automatically available when the <code>DEBUG</code> settings is <code>True</code>. When you select that checkbox, a profiling report in the pstats format will be written to the file system of the environment where the job runs. Normally, this is on the file system of the worker process, but if you are using the <code>nautobot-server runjob</code> command with <code>--local</code>, it will end up in the file system of the web application itself. The path of the written file will be logged in the job.</p> <p>Note</p> <p>If you need to run this in an environment where <code>DEBUG</code> is <code>False</code>, you have the option of using <code>nautobot-server runjob</code> with the <code>--profile</code> flag. According to the docs, <code>cProfile</code> should have minimal impact on the performance of the job; still, proceed with caution when using this in a production environment.</p>"},{"location":"development/jobs/index.html#reading-profiling-reports","title":"Reading profiling reports","text":"<p>A full description on how to deal with the output of <code>cProfile</code> can be found in the Instant User's Manual, but here is something to get you started:</p> <pre><code>import pstats\njob_result_uuid = \"66b70231-002f-412b-8cc4-1cc9609c2c9b\"\nstats = pstats.Stats(f\"/tmp/job-result-{job_result_uuid}.pstats\")\nstats.sort_stats(pstats.SortKey.CUMULATIVE).print_stats(10)\n</code></pre> <p>This will print the 10 functions that the job execution spent the most time in - adapt this to your needs!</p>"},{"location":"development/jobs/index.html#example-jobs","title":"Example Jobs","text":""},{"location":"development/jobs/index.html#creating-objects-for-a-planned-location","title":"Creating objects for a planned location","text":"<p>This job prompts the user for three variables:</p> <ul> <li>The name of the new location</li> <li>The device model (a filtered list of defined device types)</li> <li>The number of access switches to create</li> </ul> <p>These variables are presented as a web form to be completed by the user. Once submitted, the job's <code>run()</code> method is called to create the appropriate objects, and it returns simple CSV output to the user summarizing the created objects.</p> <pre><code>from django.contrib.contenttypes.models import ContentType\nfrom nautobot.apps.jobs import Job, StringVar, IntegerVar, ObjectVar\nfrom nautobot.dcim.models import Location, LocationType, Device, Manufacturer, DeviceType\nfrom nautobot.extras.models import Status, Role\nclass NewBranch(Job):\nclass Meta:\nname = \"New Branch\"\ndescription = \"Provision a new branch location\"\nfield_order = [\"location_name\", \"switch_count\", \"switch_model\"]\nlocation_name = StringVar(description=\"Name of the new location\")\nswitch_count = IntegerVar(description=\"Number of access switches to create\")\nmanufacturer = ObjectVar(model=Manufacturer, required=False)\nswitch_model = ObjectVar(\ndescription=\"Access switch model\", model=DeviceType, query_params={\"manufacturer_id\": \"$manufacturer\"}\n)\ndef run(self, location_name, switch_count, switch_model):\nSTATUS_PLANNED = Status.objects.get(name=\"Planned\")\n# Create the new location\nroot_type = LocationType.objects.get_or_create(name=\"Campus\")\nlocation = Location(\nname=location_name,\nlocation_type=root_type,\nstatus=STATUS_PLANNED,\n)\nlocation.validated_save()\nself.logger.info(\"Created new location\", extra={\"object\": location})\n# Create access switches\ndevice_ct = ContentType.objects.get_for_model(Device)\nswitch_role = Role.objects.get(name=\"Access Switch\")\nswitch_role.content_types.add(device_ct)\nfor i in range(1, switch_count + 1):\nswitch = Device(\ndevice_type=switch_model,\nname=f\"{location.name}-switch{i}\",\nlocation=location,\nstatus=STATUS_PLANNED,\nrole=switch_role,\n)\nswitch.validated_save()\nself.logger.info(\"Created new switch\", extra={\"object\": switch})\n# Generate a CSV table of new devices\noutput = [\"name,make,model\"]\nfor switch in Device.objects.filter(location=location):\nattrs = [switch.name, switch.device_type.manufacturer.name, switch.device_type.model]\noutput.append(\",\".join(attrs))\nreturn \"\\n\".join(output)\n</code></pre>"},{"location":"development/jobs/index.html#device-validation","title":"Device validation","text":"<p>A job to perform various validation of Device data in Nautobot. As this job does not require any user input, it does not define any variables, nor does it implement a <code>run()</code> method.</p> <pre><code>from nautobot.apps.jobs import Job\nfrom nautobot.dcim.models import ConsolePort, Device, PowerPort\nfrom nautobot.extras.models import Status\nclass DeviceConnectionsReport(Job):\ndescription = \"Validate the minimum physical connections for each device\"\ndef test_console_connection(self):\nSTATUS_ACTIVE = Status.objects.get(name='Active')\n# Check that every console port for every active device has a connection defined.\nfor console_port in ConsolePort.objects.select_related('device').filter(device__status=STATUS_ACTIVE):\nif console_port.connected_endpoint is None:\nself.logger.error(\n\"No console connection defined for %s\",\nconsole_port.name,\nextra={\"object\": console_port.device},\n)\nelif not console_port.connection_status:\nself.logger.warning(\n\"Console connection for %s marked as planned\",\nconsole_port.name,\nextra={\"object\": console_port.device},\n)\nelse:\nself.logger.info(\n\"Console port %s has a connection defined\",\nconsole_port.name,\nextra={\"object\": console_port.device},\n)\ndef test_power_connections(self):\nSTATUS_ACTIVE = Status.objects.get(name='Active')\n# Check that every active device has at least two connected power supplies.\nfor device in Device.objects.filter(status=STATUS_ACTIVE):\nconnected_ports = 0\nfor power_port in PowerPort.objects.filter(device=device):\nif power_port.connected_endpoint is not None:\nconnected_ports += 1\nif not power_port.connection_status:\nself.logger.warning(\n\"Power connection for %s marked as planned\",\npower_port.name,\nextra={\"object\": device},\n)\nif connected_ports &lt; 2:\nself.logger.error(\n\"%s connected power supplies found (2 needed)\",\nconnected_ports,\nextra={\"object\": device},\n)\nelse:\nself.logger.info(\"At least two connected power supplies found\", extra={\"object\": device})\n</code></pre>"},{"location":"development/jobs/index.html#job-button-receivers","title":"Job Button Receivers","text":"<p>Job Buttons are only able to initiate a specific type of job called a Job Button Receiver. These are jobs that subclass the <code>nautobot.apps.jobs.JobButtonReceiver</code> class. Job Button Receivers are similar to normal jobs except they are hard coded to accept only <code>object_pk</code> and <code>object_model_name</code> variables. Job Button Receivers are hidden from the jobs listing UI by default but otherwise function similarly to other jobs. The <code>JobButtonReceiver</code> class only implements one method called <code>receive_job_button</code>.</p> <p>Note</p> <p>Job Button Receivers still need to be enabled through the web UI before they can be used just like other Jobs.</p>"},{"location":"development/jobs/index.html#the-receive_job_button-method","title":"The <code>receive_job_button()</code> Method","text":"<p>All <code>JobButtonReceiver</code> subclasses must implement a <code>receive_job_button()</code> method. This method accepts only one argument:</p> <ol> <li><code>obj</code> - An instance of the object where the button was pressed</li> </ol>"},{"location":"development/jobs/index.html#example-job-button-receiver","title":"Example Job Button Receiver","text":"<pre><code>from nautobot.apps.jobs import JobButtonReceiver\nclass ExampleSimpleJobButtonReceiver(JobButtonReceiver):\nclass Meta:\nname = \"Example Simple Job Button Receiver\"\ndef receive_job_button(self, obj):\nself.logger.info(\"Running Job Button Receiver.\", extra={\"object\": obj})\n# Add job logic here\n</code></pre>"},{"location":"development/jobs/index.html#job-buttons-for-multiple-types","title":"Job Buttons for Multiple Types","text":"<p>Since Job Buttons can be associated to multiple object types, it would be trivial to create a Job that can change what it runs based on the object type.</p> <pre><code>from nautobot.apps.jobs import JobButtonReceiver\nfrom nautobot.dcim.models import Device, Location\nclass ExampleComplexJobButtonReceiver(JobButtonReceiver):\nclass Meta:\nname = \"Example Complex Job Button Receiver\"\ndef _run_location_job(self, obj):\nself.logger.info(\"Running Location Job Button Receiver.\", extra={\"object\": obj})\n# Run Location Job function\ndef _run_device_job(self, obj):\nself.logger.info(\"Running Device Job Button Receiver.\", extra={\"object\": obj})\n# Run Device Job function\ndef receive_job_button(self, obj):\nuser = self.user\nif isinstance(obj, Location):\nif not user.has_perm(\"dcim.add_location\"):\nself.logger.error(\"User '%s' does not have permission to add a Location.\", user, extra={\"object\": obj})\nraise Exception(\"User does not have permission to add a Location.\")\nelse:\nself._run_location_job(obj)\nelif isinstance(obj, Device):\nif not user.has_perm(\"dcim.add_device\"):\nself.logger.error(\"User '%s' does not have permission to add a Device.\", user, extra={\"object\": obj})\nraise Exception(\"User does not have permission to add a Device.\")\nelse:\nself._run_device_job(obj)\nelse:\nself.logger.error(\"Unable to run Job Button for type %s.\", type(obj).__name__, extra={\"object\": obj})\nraise Exception(\"Job button called on unsupported object type.\")\n</code></pre>"},{"location":"development/jobs/index.html#job-hook-receivers","title":"Job Hook Receivers","text":"<p>Job Hooks are only able to initiate a specific type of job called a Job Hook Receiver. These are jobs that subclass the <code>nautobot.apps.jobs.JobHookReceiver</code> class. Job hook receivers are similar to normal jobs except they are hard coded to accept only an <code>object_change</code> variable. Job Hook Receivers are hidden from the jobs listing UI by default but otherwise function similarly to other jobs. The <code>JobHookReceiver</code> class only implements one method called <code>receive_job_hook</code>.</p> <p>Warning</p> <p>Requiring approval for execution of Job Hooks by setting the <code>Meta.approval_required</code> attribute to <code>True</code> on your <code>JobHookReceiver</code> subclass is not supported. The value of this attribute will be ignored. Support for requiring approval of Job Hooks will be added in a future release.</p> <p>Important</p> <p>To prevent negatively impacting system performance through an infinite loop, a change that was made by a <code>JobHookReceiver</code> job will not trigger another <code>JobHookReceiver</code> job to run.</p>"},{"location":"development/jobs/index.html#example-job-hook-receiver","title":"Example Job Hook Receiver","text":"<pre><code>from nautobot.apps.jobs import JobHookReceiver\nfrom nautobot.extras.choices import ObjectChangeActionChoices\nclass ExampleJobHookReceiver(JobHookReceiver):\ndef receive_job_hook(self, change, action, changed_object):\n# return on delete action\nif action == ObjectChangeActionChoices.ACTION_DELETE:\nreturn\n# log diff output\nsnapshots = change.get_snapshots()\nself.logger.info(\"DIFF: %s\", snapshots['differences'])\n# validate changes to serial field\nif \"serial\" in snapshots[\"differences\"][\"added\"]:\nold_serial = snapshots[\"differences\"][\"removed\"][\"serial\"]\nnew_serial = snapshots[\"differences\"][\"added\"][\"serial\"]\nself.logger.info(\"%s serial has been changed from %s to %s\", changed_object, old_serial, new_serial)\n# Check the new serial is valid and revert if necessary\nif not self.validate_serial(new_serial):\nchanged_object.serial = old_serial\nchanged_object.save()\nself.logger.info(\"%s serial %s was not valid. Reverted to %s\", changed_object, new_serial, old_serial)\nself.logger.info(\"Serial validation completed for %s\", changed_object)\ndef validate_serial(self, serial):\n# add business logic to validate serial\nreturn False\n</code></pre>"},{"location":"development/jobs/index.html#the-receive_job_hook-method","title":"The <code>receive_job_hook()</code> Method","text":"<p>All <code>JobHookReceiver</code> subclasses must implement a <code>receive_job_hook()</code> method. This method accepts three arguments:</p> <ol> <li><code>change</code> - An instance of <code>nautobot.extras.models.ObjectChange</code></li> <li><code>action</code> - A string with the action performed on the changed object (\"create\", \"update\" or \"delete\")</li> <li><code>changed_object</code> - An instance of the object that was changed, or <code>None</code> if the object has been deleted</li> </ol>"},{"location":"development/jobs/migration/from-v1.html","title":"Migrating Jobs from Nautobot v1.X to Nautobot v2.0","text":""},{"location":"development/jobs/migration/from-v1.html#quick-summary-of-job-class-changes","title":"Quick Summary of Job Class Changes","text":"<ul> <li><code>self.run(self, data, commit)</code> must be changed to include all Job variables</li> <li><code>self.test_*</code> and <code>self.post_run()</code> methods were removed</li> <li><code>read_only</code> no longer changes the behavior of Nautobot core</li> <li><code>self.job_result</code> should no longer be modified or saved from within a Job</li> <li>Jobs must be registered in the celery task registry</li> <li><code>self.failed</code> removed</li> <li>The job logging methods have been renamed and their signature changed</li> <li>The <code>request</code> property has been changed to a celery request instead of a Django request</li> </ul>"},{"location":"development/jobs/migration/from-v1.html#overview","title":"Overview","text":"<p>Some fundamental changes were made to Jobs in Nautobot v2.0. This document outlines the changes that were made and how to migrate your existing Jobs to work in Nautobot v2.0. For more information about the changes made to the Job class and Job model in Nautobot v2.0 see the Upgrading From Nautobot v1 documentation.</p>"},{"location":"development/jobs/migration/from-v1.html#job-package-names","title":"Job Package Names","text":"<p>All Jobs are now imported as normal Python packages, instead of virtually imported, which means that Job file code can be shared with other Jobs or Python modules.</p>"},{"location":"development/jobs/migration/from-v1.html#app-provided-jobs","title":"App Provided Jobs","text":"<p>The package name for Jobs provided by Nautobot Apps has not changed.</p>"},{"location":"development/jobs/migration/from-v1.html#jobs-in-jobs_root","title":"Jobs in <code>JOBS_ROOT</code>","text":"<p><code>JOBS_ROOT</code> is added to <code>sys.path</code> and all modules in that directory will be imported. The package name for Jobs in <code>JOBS_ROOT</code> will be <code>&lt;job_file&gt;</code>, where <code>&lt;job_file&gt;</code> is the name of the Job file without the <code>.py</code> extension. If desired, submodules may be used in <code>JOBS_ROOT</code> like any normal Python package. For example, a Job class called <code>AddJob</code> in <code>$JOBS_ROOT/my_jobs/math.py</code> would be imported as <code>my_jobs.math.AddJob</code>.</p> <p>Caution</p> <p>Take care to avoid naming collisions with existing Python packages when naming Job files in <code>JOBS_ROOT</code>.</p>"},{"location":"development/jobs/migration/from-v1.html#git-repository-jobs","title":"Git Repository Jobs","text":"<p>The package name for Jobs provided by Git Repositories has changed to <code>&lt;git_repository_slug&gt;.jobs</code>, where <code>&lt;git_repository_slug&gt;</code> is the slug of the Git Repository as provided by the user when creating the Git Repository object in Nautobot. All jobs provided by Git Repositories must use the <code>.jobs</code> submodule of the Git Repository.</p> <p>Important</p> <p>As a result of the changes to the way jobs are imported the top-level directory of any Git Repository that provides Jobs must now contain an <code>__init__.py</code> file.</p>"},{"location":"development/jobs/migration/from-v1.html#run-method-signature","title":"Run Method Signature","text":"<p>The signature of the <code>run()</code> method for Jobs must now accept keyword arguments for every Job variable defined on the Job class. The <code>run()</code> method no longer uses the <code>data</code> and <code>commit</code> arguments used in v1.X.</p> <p>Example</p> v1.X Job<pre><code>class AddJob(Job):\na = IntegerVar()\nb = IntegerVar()\ndef run(self, data, commit):\nreturn data[\"a\"] + data[\"b\"]\n</code></pre> v2.0 Job<pre><code>class AddJob(Job):\na = IntegerVar()\nb = IntegerVar()\ndef run(self, a, b):\nreturn a + b\n</code></pre> v2.0 Job - Easy Migration<pre><code>class AddJob(Job):\na = IntegerVar()\nb = IntegerVar()\ndef run(self, **data):\nreturn data[\"a\"] + data[\"b\"]\n</code></pre>"},{"location":"development/jobs/migration/from-v1.html#test_-and-post_run-methods","title":"<code>test_*</code> and <code>post_run()</code> Methods","text":"<p>The <code>test_*</code> and <code>post_run</code> methods, previously provided for backwards compatibility to NetBox scripts and reports, have been removed. Celery implements <code>before_start</code>, <code>on_success</code>, <code>on_retry</code>, <code>on_failure</code>, and <code>after_return</code> methods that can be used by Job authors to perform similar functions.</p> <p>Important</p> <p>Be sure to call the <code>super()</code> method when overloading any of the job's <code>before_start</code>, <code>on_success</code>, <code>on_retry</code>, <code>on_failure</code>, or <code>after_return</code> methods</p>"},{"location":"development/jobs/migration/from-v1.html#database-transaction-handling","title":"Database Transaction Handling","text":"<p>Jobs no longer run in a single atomic database transaction by default. If a Job needs to run in a database transaction, you can use the <code>@transaction.atomic</code> decorator on the <code>run()</code> method or wrap parts of your Job code in the <code>with transaction.atomic()</code> context manager.</p> <p>Example</p> <pre><code>from django.db import transaction\nfrom nautobot.apps.jobs import Job, ObjectVar\nfrom nautobot.dcim import models\nclass UpdateDeviceTypeHeightJob(Job):\ndevice_type = ObjectVar(model=models.DeviceType)\nu_height = IntegerVar(label=\"New Height (U)\")\n@transaction.atomic\ndef run(self, device_type, u_height):\ndevice_type.u_height = u_height\ndevice_type.save()\n</code></pre>"},{"location":"development/jobs/migration/from-v1.html#commit-argument","title":"Commit Argument","text":"<p>As a result of the default database transaction being removed from Nautobot core, the <code>commit</code> argument has been removed. If a Job author wants to provide users the ability to bypass approval when <code>approval_required</code> is set, the Job must implement a <code>dryrun</code> variable using the newly-introduced <code>DryRunVar</code>. The desired value of the variable will be passed to the <code>run</code> method just like any other variable, but the Job author must implement the logic to handle the dry run.</p> <p>The presence of a <code>dryrun = DryRunVar()</code> property on the Job class sets the <code>supports_dryrun</code> flag on the Job model, which allows users to bypass approval when <code>approval_required</code> is set. To implement a dry run variable without allowing users to bypass approval, the <code>dryrun</code> variable should use the <code>BooleanVar</code> class instead of <code>DryRunVar</code>.</p> <p>The Job <code>commit_default</code> property has been renamed to <code>dryrun_default</code> and the default value as well as any existing database values have been flipped.</p>"},{"location":"development/jobs/migration/from-v1.html#read-only-meta-attribute","title":"Read-Only Meta Attribute","text":"<p>The <code>read_only</code> Job field no longer forces an automatic database rollback at the end of the Job; it is informational only in v2.0.</p>"},{"location":"development/jobs/migration/from-v1.html#job-registration","title":"Job Registration","text":"<p>All Jobs must be registered in the Celery task registry to be available in Nautobot. This must be accomplished by calling <code>nautobot.apps.jobs.register_jobs(*job_classes)</code> at the top level of a Job module so that it is registered when the module is imported. The <code>register_jobs</code> method accepts one or more job classes as arguments.</p> <p>Example</p> <pre><code>from nautobot.apps.jobs import Job, register_jobs\nclass MyJob(Job):\ndef run(self):\npass\nregister_jobs(MyJob)\n</code></pre>"},{"location":"development/jobs/migration/from-v1.html#job-logging","title":"Job Logging","text":"<p>All of the custom <code>log</code> methods have been removed from the Job class. Instead, use either the Python logger from <code>nautobot.extras.jobs.get_task_logger</code> or use <code>self.logger</code> in the Job class.</p> <p>The following table describes the mapping of the old log methods to the new methods:</p> Old Method New Method <code>self.log_debug</code> <code>self.logger.debug</code> <code>self.log_info</code> <code>self.logger.info</code> <code>self.log_success</code> <code>self.logger.info</code> <code>self.log_warning</code> <code>self.logger.warning</code> <code>self.log_failure</code> <code>self.logger.error</code> <code>self.log</code> <code>self.logger.info</code> No equivalent <code>self.logger.critical</code> <p>Some logging features from v1.X are accessible when passing a <code>dict</code> to the <code>extra</code> kwarg in any logger method:</p> <ul> <li><code>logger.debug(\"message\", extra={\"skip_db_logging\": True})</code> - Log the message to the console but not to the database</li> <li><code>logger.debug(\"message\", extra={\"object\": obj})</code> - Replaces the <code>obj</code> kwarg in Nautobot v1.X Job logging methods</li> <li><code>logger.debug(\"message\", extra={\"grouping\": \"string\"})</code> - Replaces the <code>active_test</code> Job property in Nautobot v1.X</li> </ul> <p>For more detailed documentation on Job logging see the Job Logging section of the Jobs feature documentation.</p>"},{"location":"development/jobs/migration/from-v1.html#tracking-job-state","title":"Tracking Job State","text":"<p><code>JobResult.status</code> is now automatically tracked by Celery. Job authors should no longer manually change <code>self.job_result.status</code> or <code>self.job_result.completed</code> and should instead raise an exception if the Job status should be set to failed (the failed status is now <code>\"FAILURE\"</code>).</p> <p>The Job's built-in<code>self.failed</code> flag, that was used to determine if a Job failed, has been removed. This flag was previously set to <code>True</code> automatically when the <code>log_failure</code> method was called. Job authors should track their Job's internal state and raise an exception to fail the Job when desired.</p>"},{"location":"development/jobs/migration/from-v1.html#request-property","title":"Request Property","text":"<p>The <code>request</code> property has been changed to a Celery request instead of a Django request and no longer includes the information from the web request that initiated the Job. The <code>user</code> object is now available as <code>self.user</code> instead of <code>self.request.user</code>.</p> <p>Note: Migrating from v1.x to v2.0 provides a general migration guide.</p>"},{"location":"release-notes/index.html","title":"Release Notes","text":"<p>All the published release notes can be found via the navigation menu. All patch releases are included in the same minor release (e.g. <code>Version 2.0</code>) document.</p>"},{"location":"release-notes/version-1.0.html","title":"Version 1.0","text":""},{"location":"release-notes/version-1.0.html#nautobot-v10","title":"Nautobot v1.0","text":"<p>This document describes all new features and changes in Nautobot 1.0, a divergent fork of NetBox 2.10.  For the launch of Nautobot 1.0 and for the purpose of this document,  all \u201cnew\u201d features or \u201cchanges\u201d are referring to the features and changes comparing Nautobot 1.0 coming from NetBox 2.10.  All future release notes will only refer to features and changes relative to prior releases of Nautobot.</p> <p>Users migrating from NetBox to Nautobot should also refer to the \"Migrating from NetBox\" documentation as well.</p>"},{"location":"release-notes/version-1.0.html#release-overview","title":"Release Overview","text":""},{"location":"release-notes/version-1.0.html#added","title":"Added","text":""},{"location":"release-notes/version-1.0.html#configuration-context-association-to-device-types","title":"Configuration Context Association to Device Types","text":"<p>Config contexts can now be associated to (filtered by) Device Types, in addition to all other previously supported associations.</p>"},{"location":"release-notes/version-1.0.html#custom-fields-on-all-models","title":"Custom Fields on All Models","text":"<p>Custom fields allow user-defined fields, or attributes, on specific data models such as sites or devices. Historically, custom fields have been supported only on \u201cprimary\u201d models (Site, Device, Rack, Virtual Machine, etc.) but not on \u201corganizational\u201d models (Region, Device Platform, Rack Group, etc.) or on \u201cdevice component\u201d models like interfaces. As of Nautobot 1.0, custom fields are now supported on every model, including interfaces.</p> <p>Once created the name or data type of the custom field cannot be modified. Choices for custom fields are now stored as discrete database objects. Choices that are in active use cannot be deleted.</p>"},{"location":"release-notes/version-1.0.html#customizable-statuses","title":"Customizable Statuses","text":"<p>A new \"Status\" model has been added, allowing users to define additional permitted values for the \"status\" field on any or all of the models that have such a field (Cable, Circuit, Device, IPAddress, PowerFeed, Prefix, Rack, Site, VirtualMachine, VLAN). The default sets of statuses permitted for each model remain the same as in NetBox 2.10, but you are now free to define additional status values as suit your needs and workflows.</p> <p>One example application for custom statuses would be in defining additional values to apply to a Device as part of an automation workflow, with statuses such as <code>upgrading</code> or <code>rebooting</code> to reflect the progress of each device through the workflow, allowing automation to identify the appropriate next action to take for each status.</p>"},{"location":"release-notes/version-1.0.html#data-validation-plugin-api","title":"Data Validation Plugin API","text":"<p>Data quality assurance in Nautobot becomes easier with the new data validation plugin API. This makes it possible to codify organizational standards.  Using a data validation plugin, an organization can ensure all data stored in Nautobot meets its specific standards, such as enforcing device naming standards, ensuring certain prefixes are never used, asserting that VLANs always have a name, requiring interfaces to always have a description, etc. The ability to ensure a high quality of data becomes much more streamlined; error-prone, manual process becomes automated; and there is no more need to actively run reports to check data quality.</p>"},{"location":"release-notes/version-1.0.html#detail-views-for-more-models","title":"Detail Views for more Models","text":"<p>Detailed view pages are now provided for models including ClusterGroup, ClusterType, DeviceRole, Manufacturer, Platform, and RackRole.</p>"},{"location":"release-notes/version-1.0.html#docker-based-development-environment","title":"Docker-Based Development Environment","text":"<p>In addition to the previously available virtual-environment-based developer workflow, Nautobot now additionally supports a development environment based around Docker as an alternative.</p>"},{"location":"release-notes/version-1.0.html#git-integration-as-a-data-source","title":"Git Integration as a Data Source","text":"<p>Git integration offers users an option to integrate into a more traditional NetDevOps pipeline for managing Python modules, Jinja templates, and YAML/JSON data.  There are several use cases that have historically required users to either manage Python modules on the filesystem or use Jinja2 templates within the GUI. With this new feature, users can add a Git repository from the UI or REST API, the contents of which will be synchronized into Nautobot immediately and can be later refreshed on-demand. This allows users to more easily update and manage:</p> <ul> <li>Jobs - store your Python modules that define Jobs (formerly known as Custom Scripts and/or Reports) in a Git repository</li> <li>Export Templates - store your Jinja templates used to create an export template in a Git repository</li> <li>Config Contexts - store your YAML/JSON data used within a config context in a Git repository</li> <li>Arbitrary Files - usable by custom plugins and apps</li> </ul> <p>Not only does this integration and feature simplify management of these features in Nautobot, it offers users the ability to use Git workflows for the management of the jobs, templates, and data ensuring there has been proper review and approval before updating them on the system.</p>"},{"location":"release-notes/version-1.0.html#graphql-support","title":"GraphQL Support","text":"<p>Nautobot now provides an HTTP API endpoint supporting GraphQL. This feature adds a tremendous amount of flexibility in querying data from Nautobot. It offers the ability to query for specific datasets across multiple models in a single query.  Historically, if you wanted to retrieve the list of devices, all of their interfaces, and all of their neighbors, this would require numerous REST API calls.  GraphQL gives the flexibility to get all the data desired and nothing unnecessary, all in a single API call.</p> <p>For more details, please refer to the GraphQL website, as well as to the Nautobot GraphQL documentation.</p>"},{"location":"release-notes/version-1.0.html#installable-python-package","title":"Installable Python Package","text":"<p>Nautobot is now installable as a self-contained Python package via <code>pip install nautobot</code>. Packages are released to PyPI with every Nautobot update.</p>"},{"location":"release-notes/version-1.0.html#nautobot-server-command","title":"<code>nautobot-server</code> command","text":"<p>Nautobot now includes a dedicated administrative CLI command, <code>nautobot-server</code>.</p>"},{"location":"release-notes/version-1.0.html#plugin-api-enhancements","title":"Plugin API Enhancements","text":"<p>Plugins can now provide custom data validation logic.</p> <p>Plugins can now include executable Jobs (formerly known as Custom Scripts and Reports) that will automatically be added to the list of available Jobs for a user to execute.</p> <p>Additional data models defined by a plugin are automatically made available in GraphQL.</p> <p>Plugins can now define additional Django apps that they require and these dependencies will be automatically enabled when the plugin is activated.</p> <p>Nautobot now allows and encourages plugins to make use of the generic view classes and page templates provided in <code>nautobot.core.views.generic</code> and <code>nautobot/core/templates/generic/</code> respectively.</p>"},{"location":"release-notes/version-1.0.html#single-sign-on-social-authentication-support","title":"Single Sign-On / Social Authentication Support","text":"<p>Nautobot now supports single sign on as an authentication option using OAuth2, OpenID, SAML, and others, using the social-auth-app-django module. For more details please refer to the guide on SSO authentication.</p>"},{"location":"release-notes/version-1.0.html#user-defined-relationships","title":"User-Defined Relationships","text":"<p>User-Defined, or \"custom\", relationships allow users to create their own relationships between models in Nautobot to best suit the needs of their specific network design.</p> <p>For example, a VLAN is mapped to a Site by default. After a VLAN is created today, you then assign that VLAN to an Interface on a Device. This Device should be within the initial mapped Site. However, many networks today have different requirements and relationships for VLANs (and many other models): VLANs may be limited to racks in Layer 3 DC fabrics; VLANs may be mapped to multiple buildings in a campus; they may span sites. Relationships allow you to express these additional requirements and relationships without requiring code changes to Nautobot itself. Other use cases include circuits, ASNs, or IP addressing -- just to name a few -- allowing users to define the exact relationships required for their network.</p>"},{"location":"release-notes/version-1.0.html#changed","title":"Changed","text":""},{"location":"release-notes/version-1.0.html#code-reorganization","title":"Code Reorganization","text":"<p>All of the individual Django apps in NetBox (<code>dcim</code>, <code>extras</code>, <code>ipam</code>, etc.) have been moved into a common <code>nautobot</code> Python package namespace. The <code>netbox</code> application namespace has been moved to <code>nautobot.core</code>. This will require updates when porting NetBox custom scripts and reports to Nautobot jobs, as well as when porting NetBox plugins to Nautobot.</p>"},{"location":"release-notes/version-1.0.html#packaging-changes","title":"Packaging Changes","text":"<p>Nautobot is now packaged using Poetry and builds as an installable Python package. <code>setup.py</code> and <code>requirements.txt</code> have been replaced with <code>pyproject.toml</code>. Releases of Nautobot are now published to PyPI, the Python Package Index, and therefore can now be installed using <code>pip install nautobot</code>.</p>"},{"location":"release-notes/version-1.0.html#installation-and-startup","title":"Installation and Startup","text":"<p>Because Nautobot may be installed using <code>pip</code>, we have replaced <code>manage.py</code> with a dedicated <code>nautobot-server</code> CLI command used to adminster the server. It works exactly as <code>manage.py</code> does, but does not require you to be within the project root directory.</p>"},{"location":"release-notes/version-1.0.html#configuration-and-settings","title":"Configuration and Settings","text":"<p>Nautobot has done away with the requirement to duplicate or modify files anywhere in the source code. The <code>configuration.py</code> file has been replaced with a <code>nautobot_config.py</code> file that may be read from anywhere on your system. It is also much easier to add custom settings or overload nearly any default setting.</p> <p>To facilitate this, many automatically generated settings have been removed, and replaced with their underlying static configurations. We feel this affords a greater amount of flexibility in deployment patterns, with a tradeoff of slightly more initial configuration.</p> <p>To make things a little easier, you may generate a new configuration with sane defaults using the <code>nautobot-server init</code> command! The configuration file defaults to <code>~/.nautobot/nautobot_config.py</code> but using the <code>nautobot-server --config</code> argument, you may name or place the file anywhere you choose.</p> <p>You may also defined a <code>NAUTOBOT_CONFIG</code> variable to tell Nautobot where to find the file so that you don't need to always pass the <code>--config</code> argument.</p> <p>For details see Configuring Nautobot.</p>"},{"location":"release-notes/version-1.0.html#consolidating-custom-scripts-and-reports-into-jobs","title":"Consolidating Custom Scripts and Reports into Jobs","text":"<p>Nautobot has consolidated NetBox's \"custom scripts\" and \"reports\" into what is now called Jobs.</p> <p>The job history (results) table on the home page now shows metadata on each job such as the timestamp and the user that executed the job. Additionally, jobs can be defined and executed by the system and by plugins, and when they are, users can see their results in the history too. UI views have been added for viewing the details of a given job result, and the JobResult model now provides standard APIs for Jobs to log their status and results in a consistent way.</p> <p>Job result history is now retained indefinitely unless intentionally deleted. Historically only the most recent result for each custom script or report was retained and all older records were deleted.</p> <p>Python modules that define jobs can now be stored in Git and easily added to Nautobot via the UI as documented above in Git Integration as a Data Source.</p>"},{"location":"release-notes/version-1.0.html#custom-user-model","title":"Custom User Model","text":"<p>A new custom model has been created for <code>User</code> data. This has allowed Nautobot to use a UUID as a primary key for the <code>User</code> model, and to prepare for future use-cases not support by the default Django model.</p> <p>This has also meant <code>UserConfig</code> no longer exists as a separate model. <code>UserConfig</code> is now a property on the custom <code>User</code> class.</p>"},{"location":"release-notes/version-1.0.html#hiding-ui-elements-based-on-permissions","title":"Hiding UI Elements based on Permissions","text":"<p>Historically, a user viewing the home page and navigation menu would see a list of all model types and menu items in the system, with a \u201clock\u201d icon on items that they were not granted access to view in detail.</p> <p>As an option, administrators can now choose to instead hide un-permitted items altogether from the home page and the navigation menu, providing a simpler interface for limited-access users. The prior behavior remains as the default.</p>"},{"location":"release-notes/version-1.0.html#ipam-network-fields-to-varbinary","title":"IPAM Network Fields to VARBINARY","text":"<p>To enable future support of databases other than PostgreSQL, the network fields inside of IPAM needed to be changed. <code>cidr</code> and <code>inet</code> field types have been replaced with a database agnostic field type. For this purpose <code>varbinary</code> was chosen because it can safely and efficiently store packed binary integers.</p> <p>More details about the impact of this and other changes can be found in the Migration documentation.</p>"},{"location":"release-notes/version-1.0.html#navigation-menu-changes","title":"Navigation Menu Changes","text":"<p>The \"Other\" menu has been renamed to \"Extensibility\" and many new items have been added to this menu.</p> <p>Status records have been added to the \"Organization\" menu.</p>"},{"location":"release-notes/version-1.0.html#new-name-and-logo","title":"New Name and Logo","text":"<p>\"NetBox\" has been changed to \"Nautobot\" throughout the code, UI, and documentation, and Nautobot has a new logo and icon.</p>"},{"location":"release-notes/version-1.0.html#user-defined-custom-links","title":"User-Defined Custom Links","text":"<p>Historically the custom links feature was restricted so that only administrators could define and manage custom links to add to various built-in data views. In Nautobot the management of custom links has been moved into the main user interface, accessible to any user who has been granted appropriate access permissions.</p>"},{"location":"release-notes/version-1.0.html#user-defined-export-templates","title":"User-Defined Export Templates","text":"<p>Historically the custom data export templates feature was restricted such that only administrators could define and edit these templates. In Nautobot this has been moved into the main user interface, accessible to any user who has been granted appropriate access permissions.</p>"},{"location":"release-notes/version-1.0.html#user-defined-webhooks","title":"User-Defined Webhooks","text":"<p>Historically the webhooks feature was restricted such that only administrators could define and manage webhooks, HTTP callbacks that are triggered automatically when a specified data model(s) are created, updated, and/or deleted. In Nautobot this has been moved into the main user interface, accessible to any user who has been granted appropriate access permissions.</p>"},{"location":"release-notes/version-1.0.html#uuid-primary-database-keys","title":"UUID Primary Database Keys","text":"<p>Database keys are now defined as Universally Unique Identifiers (UUIDs) instead of integers, protecting against certain classes of data-traversal attacks.</p>"},{"location":"release-notes/version-1.0.html#uwsgi","title":"uWSGI","text":"<p>Nautobot has replaced Gunicorn with uWSGI. In most cases uWSGI is faster, more stable and easier to setup making it ideal to use over Gunicorn. Our recommendation is to use uWSGI in production.</p>"},{"location":"release-notes/version-1.0.html#removed","title":"Removed","text":""},{"location":"release-notes/version-1.0.html#secrets","title":"Secrets","text":"<p>Secrets storage and management has been removed from Nautobot.</p>"},{"location":"release-notes/version-1.0.html#related-devices","title":"Related Devices","text":"<p>The \"Related Devices\" table has been removed from the detailed Device view.</p>"},{"location":"release-notes/version-1.0.html#v103-2021-06-21","title":"v1.0.3 (2021-06-21)","text":""},{"location":"release-notes/version-1.0.html#security","title":"Security","text":"<ul> <li>#418 - Removed unused JQuery-UI component flagged by vulnerability scanner (CVE-2020-7729)</li> </ul>"},{"location":"release-notes/version-1.0.html#added_1","title":"Added","text":"<ul> <li>#143 - Added \"copy\" button on hover to <code>Device</code> detail view for name, primary IP addresses, and serial number.</li> <li>#576 - <code>JobResult</code> detail views now support custom links and plugin template extensions</li> </ul>"},{"location":"release-notes/version-1.0.html#changed_1","title":"Changed","text":"<ul> <li>#537 - To mitigate CVE-2021-31542, the minimum supported Django version is now 3.1.12.</li> </ul>"},{"location":"release-notes/version-1.0.html#fixed","title":"Fixed","text":"<ul> <li>#342 - Fixed inconsistent behavior in <code>Site.time_zone</code> to emit and accept input as a null field if not set when using API</li> <li>#389 - Fixed incorrect TaggedItem base class that caused tag issues on MySQL.</li> <li>#421 - Fixed <code>git: Reference at 'refs/heads/master' does not exist</code> by improving error-handling displaying a warning when a user tries to use an empty repo or a branch that does not exist upstream.</li> <li>#452 - Fixed <code>api/dcim/cables</code> <code>OPTIONS</code> response not including the <code>status</code> field.</li> <li>#476 - Fixed incorrect handling of /31 and /127 networks in <code>Aggregate</code>, <code>Prefix</code>, and <code>IPAddress</code> models.</li> <li>#490 - Fixed incorrect VLAN count displayed in VLANGroup detail views.</li> <li>#499 - Fixed object's changelog showing incorrect information about its tags on partial (PATCH) updates using API</li> <li>#501 - Fixed missing prepopulation of address/prefix value into the form when adding an address or prefix under a parent prefix.</li> <li>#508 - Fixed typo in <code>500.html</code> page template.</li> <li>#512 - Fixed ServerError when cloning a record with exactly one <code>Tag</code> applied to it.</li> <li>#528 - Fixed an ordering issue in the <code>test_EXTERNAL_AUTH_DEFAULT_groups</code> test case.</li> <li>#530 - Fixed incorrect/confusing docstring in <code>nautobot.core.api.serializers.WritableNestedSerializer</code></li> <li>#562 - Fixed inability to use a Git repository to define a <code>ConfigContext</code> mapped to a specific <code>DeviceType</code>.</li> <li>#564 - Fixed incorrect docstring on <code>nautobot.utilities.tables.ButtonsColumn</code>.</li> <li>#570 - Fixed inability to import <code>ExportTemplates</code> for the <code>VLAN</code> model via Git.</li> <li>#583 - Fixed incorrect rejection of various forms when explicitly selecting a <code>null</code> option. (Port of NetBox #5704)</li> </ul>"},{"location":"release-notes/version-1.0.html#documentation","title":"Documentation","text":"<ul> <li>#220 - Added a troubleshooting section to the development guide for issues encountered when using the multi-threaded development server</li> <li>#505 - Added example of Okta OAuth2 integration to the docs.</li> <li>#513 - Fixed inadvertent omission of \"Search\" box from ReadTheDocs.</li> <li>#523 - Added instructions for using LDAP TLS Options to SSO documentation</li> <li>#542 - Fixed incorrect documentation for running <code>nautobot-server test</code> commands.</li> </ul>"},{"location":"release-notes/version-1.0.html#housekeeping","title":"Housekeeping","text":"<ul> <li>#183 - Implemented a baseline integration test suite using Selenium</li> <li>#540 - Fixed intermittent CI failures due to DockerHub rate limits.</li> </ul>"},{"location":"release-notes/version-1.0.html#v102-2021-05-27","title":"v1.0.2 (2021-05-27)","text":""},{"location":"release-notes/version-1.0.html#added_2","title":"Added","text":"<ul> <li>#14 - Plugins are now officially permitted to use the generic view classes defined in <code>nautobot.core.views.generic</code> and corresponding base templates defined in <code>nautobot/core/templates/generic/</code>.</li> <li>#430 - GraphQL <code>ip_addresses</code> now includes an <code>assigned_object</code> field</li> <li>#438 - Config contexts can now be assigned to individual DeviceTypes.</li> <li>#442 - Added warning when mixing <code>@extras_features(\"graphql\")</code> with explicitly declared GraphQL types</li> <li>#450 - GraphQL <code>ip_addresses</code> now includes <code>interface</code> and <code>vminterface</code> fields; GraphQL <code>interfaces</code> and similar models now include <code>connected_endpoint</code> and <code>path</code> fields</li> <li>#451 - Added static GraphQL type for VirtualMachine model</li> <li>#465 - Added Virtual Chassis to the Home Page</li> </ul>"},{"location":"release-notes/version-1.0.html#changed_2","title":"Changed","text":"<ul> <li>#448 - <code>nautobot-server init</code>  no longer provides an option to overwrite the existing configuration files.</li> </ul>"},{"location":"release-notes/version-1.0.html#removed_1","title":"Removed","text":"<ul> <li>#456 - Removed markdown-include</li> </ul>"},{"location":"release-notes/version-1.0.html#fixed_1","title":"Fixed","text":"<ul> <li>#309 - Fixed erroneous termination display when cables are connected to power feeds.</li> <li>#396 - Fixed <code>ValidationError</code> not being raised when Relationship filters are invalid</li> <li>#397 - Fixed Git repository sync failure when token contains special characters</li> <li>#415 - Fixed incorrect handling of Unicode in view test cases</li> <li>#428 - Fixed GraphQL error when handling ASNs greater than 2147483647</li> <li>#430 - Fixed missing <code>ContentType</code> foreign keys in GraphQL</li> <li>#436 - Fixed Redis Cacheops error when using newly generated <code>nautobot_config.py</code> file</li> <li>#454 - Fixed inability to create IPv6 addresses via REST API.</li> <li>#459 - Fixed issue with Job forms not respecting <code>field_order</code></li> <li>#461 - Fixed <code>NAUTOBOT_DB_TIMEOUT</code> read as string in default config</li> <li>#482 - Fixed <code>FieldError</code> from being raised when a <code>JobResult</code> references a model with no <code>name</code> field</li> <li>#488 - Fix migrations in MySQL by hard-coding the <code>VarbinaryIPField</code> to use <code>varbinary(16)</code></li> </ul>"},{"location":"release-notes/version-1.0.html#documentation_1","title":"Documentation","text":"<ul> <li>#417 - Fixed incorrect link to Docker docs from installation docs</li> <li>#423 - Clarified reference to <code>/config_contexts/</code> folder in Git user guide</li> </ul>"},{"location":"release-notes/version-1.0.html#housekeeping_1","title":"Housekeeping","text":"<ul> <li>#162 - Added Invoke tasks <code>dumpdata</code> and <code>loaddata</code> for database backup/restoration in the development environment.</li> <li>#456 - Added mkdocs-include-markdown-plugin as a development dependency.</li> <li>#474 - The <code>dummy_plugin</code> has been moved to a new <code>examples</code> directory in the Git repository and now serves as an example of implementing various plugin features.</li> <li>#486 - Fixed failing Docker builds due to do missing <code>examples</code> development dependency</li> </ul>"},{"location":"release-notes/version-1.0.html#v101-2021-05-06","title":"v1.0.1 (2021-05-06)","text":""},{"location":"release-notes/version-1.0.html#added_3","title":"Added","text":"<ul> <li>#242 - Added a production-ready <code>Dockerfile</code> for clustered deployment</li> <li>#356 - Added a new <code>nautobot-server startplugin</code> management command to ease plugin development</li> </ul>"},{"location":"release-notes/version-1.0.html#fixed_2","title":"Fixed","text":"<ul> <li>#336 - Fixed <code>nautobot.utilities.api.get_serializer_for_model</code> to now support the plugins namespace</li> <li>#337 - Fixed <code>nautobot.extras.plugins.api.views.PluginsAPIRootView</code> no longer creates null entries when <code>PluginConfig</code> does not define a <code>base_url</code></li> <li>#365 - Fixed incorrect field types on GraphQL ID fields</li> <li>#382 - Fixed choices returned from <code>OPTIONS</code> requests returning mixed use of <code>display</code> and <code>display_name</code> fields.</li> <li>#393 - Fixed creating a <code>VirtualChassis</code> with a master device changes the master device's <code>vc_position</code></li> <li>#398 - Fixed <code>VirtualChassis</code> edit view to now show \"Update\" button vs. \"Create\"</li> <li>#399 - Fixed <code>nautobot.utilities.utils.get_filterset_for_model</code> to now support the plugins namespace</li> </ul>"},{"location":"release-notes/version-1.0.html#documentation_2","title":"Documentation","text":"<ul> <li>#15 - Added documentation for plugins using generic models to get change logging using <code>ChangeLoggedModel</code></li> <li>#362 - Updated sample code in plugin development guide to inherit from <code>BaseModel</code></li> <li>#400 - Fixed the <code>class_path</code> format for Jobs API usage documentation not being clear enough</li> </ul>"},{"location":"release-notes/version-1.0.html#housekeeping_2","title":"Housekeeping","text":"<ul> <li>#366 - Added GraphQL filter tests for <code>interfaces</code> queries and added missing unit tests for <code>Interface</code> filtersets</li> <li>#402 - Docs build requirements will now install <code>markdown-include</code> version from PyPI instead of GitHub</li> <li>#409 - Fixed misspelling: \"Datbase\" --&gt; \"Database\" in <code>nautobot_config.py.j2</code></li> </ul>"},{"location":"release-notes/version-1.0.html#v100-2021-04-26","title":"v1.0.0 (2021-04-26)","text":""},{"location":"release-notes/version-1.0.html#added_4","title":"Added","text":"<ul> <li>#290 - Added REST API endpoint for triggering a Git repository sync</li> </ul>"},{"location":"release-notes/version-1.0.html#changed_3","title":"Changed","text":"<ul> <li>#333 - Relationships now display the name of the related object type as well as the count</li> </ul>"},{"location":"release-notes/version-1.0.html#fixed_3","title":"Fixed","text":"<ul> <li>#276 - Fixed 500 error when creating Rack Reservation with invalid units</li> <li>#277 - Fixed 500 error when editing/updating IPAM Services with invalid ports</li> <li>#332 - Fixed UI allowing creation of multiple <code>RelationshipAssociations</code> for \"<code>one_to_*</code>\" relationships</li> <li>#334 - Fixed missing \"Bulk Create\" option when creating an IP Address</li> <li>#357 - Fixed error when plugins attempted to use <code>ButtonsColumn</code></li> <li>#359 - Fixed incorrect GraphQL filtering of cables by <code>site</code></li> <li>#361 - Fixed duplicate \"tags\" field when creating a cable connection</li> </ul>"},{"location":"release-notes/version-1.0.html#dependencies","title":"Dependencies","text":"<ul> <li>#358 - Updated Python dependencies to their latest patch versions</li> </ul>"},{"location":"release-notes/version-1.0.html#v100b4-2021-04-19","title":"v1.0.0b4 (2021-04-19)","text":""},{"location":"release-notes/version-1.0.html#changed_4","title":"Changed","text":"<ul> <li>#217 - Replaced JSONB aggregation with custom cross-database implementation that supports PG and MySQL</li> <li>#245 - Replaced PG-specific \"advisory locks\" with cross-database distributed Redis lock</li> <li>#289 - Updated natural unicode-aware sorting for interface/device names to support MySQL</li> </ul>"},{"location":"release-notes/version-1.0.html#fixed_4","title":"Fixed","text":"<ul> <li>#167 - Fix to enable to query <code>ip_addresses</code> by parent in GraphQL</li> <li>#212 - Allow plugins to use built-in buttons</li> <li>#232 - Fix to enable inclusion of custom fields in queries in GraphQL</li> <li>#233 - Fix to enable filtering by booleans in GraphQL</li> <li>#247 - Fix to enable filtering by custom field values in GraphQL</li> <li>#260 - Fix cable path tracing by not coercing UUID values to version 4</li> <li>#265 - Fix 500 crash in API when posting ports as strings to IPAM services</li> <li>#269 - Fix <code>NoneType</code> error when searching for /31 prefixes</li> <li>#272 - Fix invalid f-string in <code>invoke createsuperuser</code></li> <li>#278 - Fix crash when sorting IPAM objects in list view by network address in web UI</li> <li>#285 - Refactor GraphQL filter argument generation to emit the correct types for each field</li> <li>#286 - Fix <code>NoneType</code> error when seraching for IPs without a prefix</li> <li>#287 - Fix IP addresses not showing in search results</li> <li>#288 - Fix display of parent prefixes from IPAddress detail view</li> <li>#293 - Allow <code>DynamicModel[Multiple]ChoiceField</code> to work with plugin model</li> <li>#300 - Fix <code>AttributeError</code> when assigning an IP to a device interface</li> <li>#304 - Fix for IPAM network objects <code>clean()</code> checks not working as intended</li> <li>#305 - Fix <code>Status</code> rendering to always preserve capitalization of <code>Status.name</code></li> <li>#306 - Fix custom relationship display fields for all models</li> <li>#307 - Fix the ability to CSV export power connections if connected to a PowerFeed</li> <li>#308 - Fix missing template error when viewing a PowerFeed connected to a PowerPort on a Device.</li> <li>#318 - Fix <code>TypeError</code> when creating any IPAM network object  with prefix of /0</li> <li>#320 - Fix issue causing model validation to fail on all IPAM network objects</li> <li>#325 - Fix to allow relationship associations to be unset in the web UI</li> <li>#326 - Fix 404 error when attempting to delete a RelationshipAssociation from the list view</li> <li>#373 - Fix missing \"Bulk Add IP Addresses\" tab</li> </ul>"},{"location":"release-notes/version-1.0.html#dependencies_1","title":"Dependencies","text":"<ul> <li>#273 - Update to jQuery 3.6.0</li> </ul>"},{"location":"release-notes/version-1.0.html#documentation_3","title":"Documentation","text":"<ul> <li>#96 - Implemented user guide documentation for GraphQL</li> <li>#97 - Implemented user guide documentation for Git as a Data Source</li> <li>#150 - Revised all documentation referencing objects with status fields</li> <li>#175 - Revised plugin development guide to use Poetry</li> <li>#252 - Revised and clarified install instructions for CentOS</li> <li>#262 - Revised Nautobot upgrade and NetBox migration guides</li> <li>#264 - Fix missing parenthesis in datasources example</li> </ul>"},{"location":"release-notes/version-1.0.html#housekeeping_3","title":"Housekeeping","text":"<ul> <li>#211 - Travis CI build improvements to simplify entry points and make tests fail faster</li> <li>#324 - Fix unit test execution on MySQL by changing subquery limiting to list slicing</li> </ul>"},{"location":"release-notes/version-1.0.html#v100b3-2021-04-05","title":"v1.0.0b3 (2021-04-05)","text":"<p>Warning</p> <p>v1.0.0b3 introduces several database changes that are not backwards-compatible with v1.0.0b2 and earlier. There is no direct upgrade path from v1.0.0b2 to v1.0.0b3 - you must create a new database when installing v1.0.0b3!</p>"},{"location":"release-notes/version-1.0.html#added_5","title":"Added","text":"<ul> <li>#105 - Added tooltip with detailed information to utilization graph bars.</li> <li>#141 - Custom Link UI now includes example usage hints</li> <li>#227 - Add QFSP+ (64GFC) FiberChannel interface type</li> <li>#236 - Add <code>post_upgrade</code> to developer docs and add <code>invoke post-upgrade</code></li> </ul>"},{"location":"release-notes/version-1.0.html#changed_5","title":"Changed","text":"<p>Major backwards-incompatible database changes were included in this beta release that are intended are to pave the way for us to support MySQL as a database backend in a future update. Of those changes, these are the most notable:</p> <ul> <li>All IPAM objects with network field types (<code>ipam.Aggregate</code>, <code>ipam.IPAddress</code>, and <code>ipam.Prefix</code>) are no longer hard-coded to use PostgreSQL-only <code>inet</code> or <code>cidr</code> field types and are now using a custom implementation leveraging SQL-standard <code>varbinary</code> field types</li> <li>The <code>users.User</code> model has been completely replaced with a custom implementation that no longer requires the use of a secondary database table for storing user configuration.</li> <li>Custom Fields have been overhauled for asserting data integrity and improving user experience<ul> <li>Custom Fields can no longer be renamed or have their type changed after they have been created.</li> <li>Choices for Custom Fields are now stored as discrete database objects. Choices that are in active use cannot be deleted.</li> </ul> </li> </ul> <p>Other changes:</p> <ul> <li>#78 - Replaced PostgreSQL-specific IP network/address fields with more generic field types</li> <li>#83 - Custom user model added; UserConfig model merged into User model</li> <li>#98 - Simplify MultipleContentTypeField boilerplate</li> <li>#128 - Overview of usage for the <code>nautobot-netbox-importer</code> plugin could be mistaken for full instructions</li> <li>#122 - Improved installation flow for creating nautobot user and virtualenv</li> <li>#131 - Replaced PostgreSQL-specific ArrayField with a more generic JSONArrayField</li> <li>#137 - Explicitly disallow Custom Field Name Changes</li> <li>#142 - Converted various config validation checks into proper Django checks</li> <li>#208 - Custom fields model refactor</li> <li>#241 - Swap <code>contrib.postgres.fields.JSONField</code> for <code>db.models.JSONField</code></li> </ul>"},{"location":"release-notes/version-1.0.html#removed_2","title":"Removed","text":"<ul> <li>#188 - Remove <code>CSRF_TRUSTED_ORIGINS</code> from core settings</li> <li>#189 - Remove all references to <code>settings.BASE_PATH</code></li> </ul>"},{"location":"release-notes/version-1.0.html#fixed_5","title":"Fixed","text":"<ul> <li>#26 - <code>nautobot-server runserver</code> does not work using <code>poetry run</code></li> <li>#58 - GraphQL Device Query - Role filter issue</li> <li>#76 - Cable paths could not be traced through circuits</li> <li>#95 - Plugin load errors under Gunicorn</li> <li>#127 - SSL error: decryption failed or bad record mac &amp; SSL SYSCALL error: EOF detected</li> <li>#132 - Generated <code>nautobot_config.py</code> did not include a trailing newline</li> <li>#135 - Custom field Selection value name change causes data inconsistency</li> <li>#147 - Login failed when <code>BASE_PATH</code> is set</li> <li>#153 - Editing an existing user token shows \"create\" buttons instead of \"update\"</li> <li>#155 - NAPALM driver string not displayed in Platform detail view</li> <li>#166 - Contrib directory is missing (including the apache.conf)</li> <li>#170 - GraphQL filtering failure returned all objects instead of none</li> <li>#172 - Incorrect whitespace in some HTML template tags</li> <li>#185 - Possible infinite loop in cable tracing algorithm</li> <li>#186 - Example Jobs are not updated for Nautobot</li> <li>#201 - Custom Fields cannot filter by name for <code>content_types</code></li> <li>#213 - Programming Error Exception Value: relation <code>\"social_auth_usersocialauth\"</code> does not exist</li> <li>#224 - Edit view for IPAM network objects does not emit the current network address value</li> </ul>"},{"location":"release-notes/version-1.0.html#documentation_4","title":"Documentation","text":"<ul> <li>#84 - Revised developer documentation for clarity and current workflows</li> <li>#100 - Added detailed documentation of the <code>nautobot-server</code> command</li> <li>#119 - Various documentation improvements</li> <li>#120 - Revise development release checklist document for new processes</li> <li>#121 - Added \"Data Model Changes\" section to the \"Migrating from NetBox\" documentation</li> <li>#134 - Missing venv activation step in install guide</li> <li>#149 - Unify optional settings documentation for <code>REMOTE_AUTH*/SOCIAL_AUTH*</code></li> <li>#159 - Update documentation for external authentication SSO Backend to get a proper install</li> <li>#161 - Removed leftover references in documentation to <code>RQ_DEFAULT_TIMEOUT</code></li> <li>#168 - Incorrect <code>AUTHENTICATION_BACKENDS</code> example in remote authentication documentation</li> <li>#181 - Incorrect UI reference in Webhook documentation</li> <li>#216 - Update install docs to address inconsistent experience w/ <code>$PATH</code></li> <li>#205 - API Documentation shows numeric id instead of UUID</li> <li>#235 - Update restart docs to include worker</li> </ul>"},{"location":"release-notes/version-1.0.html#housekeeping_4","title":"Housekeeping","text":"<ul> <li>#109 - Docker development environment build now automatically installs from any present <code>local_requirements.txt</code> file</li> <li>#124 - Removed incorrect statement from feature request template</li> <li>#154 - Some tests were failing when run in the development Docker container</li> <li>#180 - Revised available Invoke tasks for simplicity and maintainability</li> <li>#255 - Update docs <code>edit_uri</code> to point to correct path</li> </ul>"},{"location":"release-notes/version-1.0.html#v100b2-2021-03-08","title":"v1.0.0b2 (2021-03-08)","text":""},{"location":"release-notes/version-1.0.html#added_6","title":"Added","text":"<ul> <li>#48 - Additional unit testing and bug fixes for Relationships feature.</li> <li>#99 - Add <code>BASE_PATH</code> to <code>development/nautobot_config.py</code>.</li> <li>#107 - Add <code>nautobot-server post_upgrade</code> command</li> </ul>"},{"location":"release-notes/version-1.0.html#changed_6","title":"Changed","text":"<ul> <li>#88 - Replace Gunicorn w/ uWSGI</li> </ul>"},{"location":"release-notes/version-1.0.html#removed_3","title":"Removed","text":"<ul> <li>#72 - Removed issue template for \"Documentation Change\"; use \"Bug\" or \"Feature Request\" issue templates instead.</li> </ul>"},{"location":"release-notes/version-1.0.html#fixed_6","title":"Fixed","text":"<ul> <li>#41 - Incorrect field name in CustomLink Admin page.</li> <li>#45 - Incorrect button labels when creating/editing an Interface record.</li> <li>#63 - Incorrect help text for \"Destination Label\" field when creating/editing Relationship records.</li> <li>#81 - Unable to change Device rack position after creation.</li> <li>#93 - Bug when setting <code>CACHEOPS_DEFAULTS</code> timeout value to <code>0</code>.</li> </ul>"},{"location":"release-notes/version-1.0.html#documentation_5","title":"Documentation","text":"<ul> <li>#35 - Documentation for troubleshooting Nautobot's interaction with SELinux.</li> <li>#36 - Broken links to ReadTheDocs pages.</li> <li>#42 - Incorrect link to <code>nautobot-plugin-golden-config</code> GitHub repository</li> <li>#43 - Incorrect commands in documentation for adding optional dependencies to <code>local_requirements.txt</code></li> <li>#47 - Basic user documentation for Relationships feature.</li> <li>#57 - Incorrect <code>AUTHENTICATION_BACKENDS</code> example in <code>authentication/ldap.md</code></li> <li>#64 - Incorrect absolute link to ReadTheDocs page.</li> <li>#69 - More incorrect links to ReadTheDocs pages.</li> <li>#74 - Refactor install instructions to be more streamlined and more intuitive.<ul> <li>Renamed <code>nautobot-rq</code> service to <code>nautobot-worker</code></li> <li>Replaced <code>BASE_STORAGE_DIR</code> configuration setting with <code>NAUTOBOT_ROOT</code>; this new setting also influences the default value of <code>DEFAULT_CONFIG_PATH</code>.</li> </ul> </li> <li>#79 - Incorrect internal documentation link to <code>STORAGE_BACKEND</code> optional setting.</li> <li>#101 - Complete documentation of <code>NAUTOBOT_ROOT</code></li> <li>#106 - Revise deployment docs to use <code>$PATH</code> instead of venv activate</li> </ul>"},{"location":"release-notes/version-1.0.html#housekeeeping","title":"Housekeeeping","text":"<ul> <li>#51 - Incorrect functioning of \"development container\" in VSCode integration.</li> <li>#52 - Disabled Poetry's \"parallel installation\" feature for CI and development builds.</li> <li>#61 - Updated pull request template contents for clarity.</li> <li>#89 - Development workflow improvements<ul> <li>Replace <code>pycodestyle</code> with <code>flake8</code> for linting.</li> <li>Add <code>invoke black</code> and <code>invoke tests</code> commands</li> <li>Improve speed of development Docker container rebuilds</li> <li><code>django-debug-toolbar</code> is now a development dependency rather than a production dependency for Nautobot.</li> </ul> </li> <li>#108 - Document special workflow for development using containers on remote servers</li> </ul>"},{"location":"release-notes/version-1.0.html#v100b1-2021-02-24","title":"v1.0.0b1 (2021-02-24)","text":"<p>Initial public beta release.</p>"},{"location":"release-notes/version-1.0.html#fixed_7","title":"Fixed","text":"<ul> <li>Fixed a bug, inherited from NetBox 2.10, in which object permissions were not filtered correctly in the admin interface.</li> <li>Fixed a bug, inherited from NetBox 2.10, in which the UI would report an exception if the database contains ChangeLog entries that reference a nonexistent ContentType.</li> </ul>"},{"location":"release-notes/version-1.1.html","title":"Version 1.1","text":""},{"location":"release-notes/version-1.1.html#nautobot-v11","title":"Nautobot v1.1","text":"<p>This document describes all new features and changes in Nautobot 1.1.</p> <p>If you are a user migrating from NetBox to Nautobot, please refer to the \"Migrating from NetBox\" documentation.</p>"},{"location":"release-notes/version-1.1.html#release-overview","title":"Release Overview","text":""},{"location":"release-notes/version-1.1.html#added","title":"Added","text":""},{"location":"release-notes/version-1.1.html#computed-fields-4","title":"Computed Fields (#4)","text":"<p>Computed fields offers users the ability to create read-only custom fields using existing data already stored in the database. Users define Jinja2 templates that populate the value of these fields. Computed fields are available on all data models that currently support custom fields.</p>"},{"location":"release-notes/version-1.1.html#config-context-json-schemas-274","title":"Config Context JSON Schemas (#274)","text":"<p>While config contexts allow for arbitrary data structures to be stored within Nautobot, at scale it is desirable to apply validation constraints to that data to ensure its consistency and to avoid data entry errors. To service this need, Nautobot supports optionally backing config contexts with JSON Schemas for validation. These schema are managed via the config context schema model and are optionally linked to config context instances, in addition to devices and virtual machines for the purpose of validating their local context data. Please see the docs for more details.</p> <p>Just like config contexts, config context JSON schemas can optionally be managed via a Git repository.</p>"},{"location":"release-notes/version-1.1.html#dynamic-navigation-menus-12","title":"Dynamic Navigation Menus (#12)","text":"<p>Applications and plugins can now define tabs, groups, items and buttons in the navigation menu. Using navigation objects a developer can add items to any section of the navigation using key names and weight values. Please see Application Registry for more details.</p>"},{"location":"release-notes/version-1.1.html#mysql-database-support-17","title":"MySQL Database Support (#17)","text":"<p>MySQL 8.x is now fully supported as a database backend!</p> <p>The installation and configuration guides have been revised to include MySQL. If you prefer MySQL or it is more easily supported in your environment, configuring Nautobot to use MySQL is as easy as changing value of <code>ENGINE</code> in your <code>DATABASES</code> setting to point to <code>django.db.backends.mysql</code> and installing the MySQL Python driver using <code>pip3 install nautobot[mysql]</code>.</p> <p>A new <code>NAUTOBOT_DB_ENGINE</code> environment variable has been added to allow for specifying the desired database engine at runtime without needing to modify your <code>nautobot_config.py</code>. Please see the configuration guide on <code>DATABASES</code> for more details on how to configure Nautobot to use MySQL.</p> <p>Please see the MySQL setup guides to get started.</p>"},{"location":"release-notes/version-1.1.html#plugin-defined-jinja2-filters","title":"Plugin Defined Jinja2 Filters","text":"<p>Plugins can now define custom Jinja2 filters to be used when rendering templates defined within computed fields or custom links. To register your own filters, you may add a <code>jinja_filters.py</code> to your plugin and any filters defined there will be automatically registered and globally usable.</p> <p>Please see the plugin development documentation on including Jinja2 filters to get started.</p>"},{"location":"release-notes/version-1.1.html#read-only-jobs-200","title":"Read Only Jobs (#200)","text":"<p>Jobs may be optionally marked as read only by setting the <code>read_only = True</code> meta attribute. This prevents the job from making any changes to nautobot data and suppresses certain log messages. Read only jobs can be a great way to safely develop new jobs, and for working with reporting use cases. Please see the Jobs documentation for more details.</p>"},{"location":"release-notes/version-1.1.html#saved-graphql-queries-3","title":"Saved GraphQL Queries (#3)","text":"<p>Saved GraphQL queries offers a new model where reusable queries can be stored in Nautobot. New views for managing saved queries are available; additionally, the GraphiQL interface has been augmented to allow populating the interface from a saved query, editing and saving new queries.</p> <p>Saved queries can easily be imported into the GraphiQL interface by using the new navigation tab located on the right side of the navbar. Inside the new tab are also buttons for editing and saving queries directly into Nautobot's databases.</p> <p>Additionally, two new GraphQL utility functions have been added to allow easy access to the GraphQL system from source code. Both functions can be imported from <code>nautobot.core.graphql</code>:</p> <ol> <li><code>execute_query()</code>: Runs string as a query against GraphQL.</li> <li><code>execute_saved_query()</code>: Execute a saved query from Nautobot database.</li> </ol>"},{"location":"release-notes/version-1.1.html#changed","title":"Changed","text":""},{"location":"release-notes/version-1.1.html#background-tasks-now-use-celery-223","title":"Background Tasks now use Celery (#223)","text":"<p>Celery has been introduced to eventually replace RQ for executing background tasks within Nautobot. All Nautobot core usage of RQ has been migrated to use Celery.</p> <p>Note</p> <p>Custom background tasks implemented by plugins are not part of Nautobot core functions</p> <p>Prior to version 1.1.0, Nautobot utilized RQ as the primary background task worker. As of Nautobot 1.1.0, RQ is now deprecated. RQ and the <code>@job</code> decorator for custom tasks are still supported for now, but will no longer be documented, and support for RQ will be removed in a future release.</p> <p>RQ support for custom tasks was not removed in order to give plugin authors time to migrate, however, to continue to utilize advanced Nautobot features such as Git repository synchronization, webhooks, jobs, etc. you must migrate your <code>nautobot-worker</code> deployment from RQ to Celery.</p> <p>Please see the section on migrating to Celery from RQ for more information on how to easily migrate your deployment.</p> <p>Warning</p> <p>If you are running plugins that use background tasks requiring the RQ worker, you will need to run both the RQ and Celery workers concurrently until the plugins are converted to use the Celery worker. See the Migrating to Celery from RQ for details.</p>"},{"location":"release-notes/version-1.1.html#fixed","title":"Fixed","text":""},{"location":"release-notes/version-1.1.html#http-remote-end-closed-connection-errors-725","title":"HTTP \"Remote end closed connection\" errors (#725)","text":"<p>The example <code>uwsgi.ini</code> provided in earlier versions of the Nautobot documentation was missing a recommendation to include the configuration <code>http-keepalive = 1</code> which enables support for HTTP/1.1 keep-alive headers.</p> <p>Warning</p> <p>If you are upgrading from an earlier version of Nautobot (including 1.1.0) you should check your <code>uwsgi.ini</code> and ensure that it contains this important configuration line.</p>"},{"location":"release-notes/version-1.1.html#v116-2021-12-03","title":"v1.1.6 (2021-12-03)","text":""},{"location":"release-notes/version-1.1.html#fixed_1","title":"Fixed","text":"<ul> <li>#1093 - Improved REST API performance by adding caching of serializer \"opt-in fields\".</li> </ul>"},{"location":"release-notes/version-1.1.html#v115-2021-11-11","title":"v1.1.5 (2021-11-11)","text":""},{"location":"release-notes/version-1.1.html#security","title":"Security","text":"<ul> <li>#998 - Update <code>mkdocs</code> dependency to avoid a potential path-traversal vulnerability; note that mkdocs is only used in development and is not a production deployment dependency of Nautobot.</li> </ul>"},{"location":"release-notes/version-1.1.html#added_1","title":"Added","text":"<ul> <li>#931 - Added support for direct upload of CSV files as an alternative to copy-pasting CSV text into a form field. (Partially based on NetBox #6561)</li> <li>#989 - Added <code>id</code> and <code>name</code> fields to <code>NestedJobResultSerializer</code> for the REST API.</li> </ul>"},{"location":"release-notes/version-1.1.html#fixed_2","title":"Fixed","text":"<ul> <li>#555 - Fixed <code>Status.DoesNotExist</code> during <code>nautobot-server loaddata</code>.</li> <li>#567 - Fixed incorrect GraphQL schema generation for <code>_custom_field_data</code> when certain plugins are installed.</li> <li>#733 - A Job erroring out early in initialization could result in its associated JobResult staying in Pending state indefinitely.</li> <li>#816 - Fixed <code>AttributeError</code> reported when viewing a Rack with certain associated power configurations.</li> <li>#981 - Fixed incorrect handling of missing custom fields in the <code>fix_custom_fields</code> management command.</li> <li>#986 - Fixed <code>TemplateDoesNotExist</code> exception when running a Job containing a <code>FileVar</code> variable.</li> <li>#991 - Fixed incorrect logging when importing ConfigContextSchemas from Git.</li> <li>#993 - Fixed incorrect <code>git</code> command when refreshing a previously checked out repository.</li> </ul>"},{"location":"release-notes/version-1.1.html#documentation","title":"Documentation","text":"<ul> <li>#263 - Added a link in the Docker deployment guide to the Nautobot Docker Compose repository.</li> <li>#948 - Fixed advanced logging example to use <code>EXTRA_MIDDLEWARE</code> instead of <code>MIDDLEWARE.append()</code>.</li> <li>#970 - Clarified documentation around config context definition in Git repositories.</li> <li>#954 - Added documentation for migrating from PostgreSQL to MySQL, improved documentation as to recommended MySQL database configuration.</li> <li>#1023 - Removed invalid link in \"Deploying Nautobot\" documentation.</li> <li>#1025 - Added reference documentation for how to hide navigation menu items with no permissions.</li> <li>#1031 - Added a troubleshooting note around the combination of RedHat/CentOS, uWSGI, and static files.</li> </ul>"},{"location":"release-notes/version-1.1.html#housekeeping","title":"Housekeeping","text":"<ul> <li>#953 - Added option to use MySQL in the docker-compose development environment</li> <li>#1019 - Added GitHub action to redeploy the Nautobot sandbox on pushes to <code>main</code>, <code>develop</code>, and <code>next</code>.</li> <li>#1057 - Added GitHub action to automatically push Docker images to <code>ghcr.io</code>.</li> </ul>"},{"location":"release-notes/version-1.1.html#v114-2021-10-04","title":"v1.1.4 (2021-10-04)","text":""},{"location":"release-notes/version-1.1.html#security_1","title":"Security","text":"<ul> <li>#939 - Nautobot views now default to <code>X-Frame-Options: DENY</code> rather than <code>X-Frame-Options: SAMEORIGIN</code>, with the exception of the rack-elevation API view (<code>/api/dcim/rack-elevation/</code>) which specifically requires <code>X-Frame-Options: SAMEORIGIN</code> for functional reasons.</li> </ul>"},{"location":"release-notes/version-1.1.html#added_2","title":"Added","text":"<ul> <li>#623 - Git repository sync logs now include the commit hash that was synchronized to.</li> <li>#728 - Added <code>SOCIAL_AUTH_BACKEND_PREFIX</code> configuration setting to support custom authentication backends.</li> <li>#861 - Bulk editing of devices can now update their site, rack, and rack-group assignments.</li> </ul>"},{"location":"release-notes/version-1.1.html#fixed_3","title":"Fixed","text":"<ul> <li>#944 - Jobs that commit changes to the database could not be invoked successfully from the <code>nautobot-server runjob</code> command.</li> <li>#955 - REST API endpoint for syncing Git repositories was still checking for RQ workers instead of Celery workers.</li> <li>#969 - IPv6 prefixes such as <code>::1/128</code> were not being treated correctly.</li> </ul>"},{"location":"release-notes/version-1.1.html#documentation_1","title":"Documentation","text":"<ul> <li>#949 - Added documentation note about using <code>MAINTENANCE_MODE</code> in combination with LDAP.</li> </ul>"},{"location":"release-notes/version-1.1.html#housekeeping_1","title":"Housekeeping","text":"<ul> <li>#956 - Switched CI from Travis to GitHub Actions.</li> <li>#964 - Updated README.md build status badge to show GitHub status.</li> </ul>"},{"location":"release-notes/version-1.1.html#v113-2021-09-13","title":"v1.1.3 (2021-09-13)","text":""},{"location":"release-notes/version-1.1.html#security_2","title":"Security","text":"<ul> <li>#893 - Bump Pillow dependency version from 8.2.0 to 8.2.3 to address numerous critical CVE advisories</li> </ul>"},{"location":"release-notes/version-1.1.html#added_3","title":"Added","text":"<ul> <li>#652 - Jobs REST API <code>run</code> endpoint now can look up ObjectVar references via a dictionary of parameters.</li> <li>#791 - Added support for <code>NAUTOBOT_DOCKER_SKIP_INIT</code> variable to allow running the Docker container with a read-only database.</li> </ul>"},{"location":"release-notes/version-1.1.html#changed_1","title":"Changed","text":"<ul> <li>#709 - Computed fields can now have a blank <code>fallback_value</code>.</li> <li>#812 - In the GraphiQL interface, the \"Queries\" dropdown now appears alongside the other GraphiQL interface buttons instead of appearing in the main Nautobot navigation bar.</li> </ul>"},{"location":"release-notes/version-1.1.html#fixed_4","title":"Fixed","text":"<ul> <li>#464 - Fixed GraphQL schema generation error when certain custom field names are used.</li> <li>#651 - Fixed Jobs validation enforce schema consistently across UI and API.</li> <li>#715 - Fixed display of GraphiQL interface in narrow browser windows.</li> <li>#718 - Fixed rendering of long template values in Computed Field detail view.</li> <li>#731 - Config context schemas including <code>format</code> properties (such as <code>\"format\": \"ipv4\"</code>) are now correctly enforced.</li> <li>#779 - Fixed incorrect Tenant display in Prefix \"Duplicate Prefixes\" table. (Port of two fixes originally from NetBox)</li> <li>#818 - Database health-check now reports as healthy even when in <code>MAINTENANCE_MODE</code>.</li> <li>#830 - Fixed incorrect database migration introduced by #818.</li> </ul>"},{"location":"release-notes/version-1.1.html#documentation_2","title":"Documentation","text":"<ul> <li>#601 - Developer documentation for advanced docker-compose use cases is now a separate file.</li> <li>#670 - Clarified Jobs documentation regarding how to fail or abort a Job.</li> <li>#755 - Added example showing how to use <code>django-request-logging</code> middleware to log the user associated with inbound requests.</li> <li>#825 - Removed unnecessary <code>-B</code> flag from development Celery worker invocation.</li> <li>#832 - Plugin installation documentation now recommends <code>nautobot-server post_upgrade</code> instead of separately running <code>nautobot-server migrate</code> and <code>nautobot-server collectstatic</code>.</li> <li>#841 - Added more detailed documentation around defining Relationship filters.</li> <li>#845 - Clarified documentation around <code>nautobot-server init</code> and <code>NAUTOBOT_ROOT</code>.</li> <li>#848 - Fixed stale links to NAPALM documentation</li> <li>#850 - Added developer documentation around the installation and use of <code>mkdocs</code> to locally preview documentation changes.</li> <li>#856 - Added more detailed user documentation on how to create an API token.</li> </ul>"},{"location":"release-notes/version-1.1.html#housekeeping_2","title":"Housekeeping","text":"<ul> <li>#11 - Added tests to verify that plugin models can support webhooks if appropriately decorated with <code>@extras_features(\"webhooks\")</code></li> <li>#809 - Fixed docker-compose file <code>version</code> values to work correctly with older versions of docker-compose.</li> </ul>"},{"location":"release-notes/version-1.1.html#v112-2021-08-10","title":"v1.1.2 (2021-08-10)","text":""},{"location":"release-notes/version-1.1.html#fixed_5","title":"Fixed","text":"<ul> <li>#723 - Fixed power draw not providing a <code>UtilizationData</code> type for use in graphing power draw utilization</li> <li>#785 - Fixed plugin loading error when using <code>final</code> Docker image.</li> <li>#786 - Fixed <code>Unknown command: 'post_upgrade'</code> when using <code>final</code> Docker image.</li> <li>#789 - Avoid a <code>NoReverseMatch</code> exception at startup time if an app or plugin defines a nav menu item with an invalid link reference.</li> </ul>"},{"location":"release-notes/version-1.1.html#documentation_3","title":"Documentation","text":"<ul> <li>#758 - Added documentation about the Job <code>class_path</code> concept.</li> <li>#771 - Added examples of various possible logging configurations.</li> <li>#773 - Added documentation around enabling Prometheus metrics for database and caching backends.</li> <li>#782 - Corrected documentation regarding the use of <code>docker-compose.override.yml</code></li> </ul>"},{"location":"release-notes/version-1.1.html#housekeeping_3","title":"Housekeeping","text":"<ul> <li>#742 - The development environment now respects the setting of the <code>NAUTOBOT_DEBUG</code> environment variable if present.</li> </ul>"},{"location":"release-notes/version-1.1.html#v111-2021-08-05","title":"v1.1.1 (2021-08-05)","text":""},{"location":"release-notes/version-1.1.html#added_4","title":"Added","text":"<ul> <li>#506 - <code>nautobot-server</code> now detects and rejects the misconfiguration of setting <code>MAINTENANCE_MODE</code> while using database-backed session storage (<code>django.contrib.sessions.backends.db</code>)</li> </ul>"},{"location":"release-notes/version-1.1.html#fixed_6","title":"Fixed","text":"<ul> <li>#683 - Fixed slug auto-construction when defining a new ComputedField.</li> <li>#727 - Fixed broken REST API endpoint (<code>/api/extras/graphql-queries/&lt;uuid&gt;/run/</code>) for running saved GraphQL queries.</li> <li>#744 - Fixed missing Celery Django fixup that could cause assorted errors when multiple background tasks were run concurrently.</li> <li>#746 - Fixed data serialization error when running Jobs that used <code>IPAddressVar</code>, <code>IPAddressWithMaskVar</code>, and/or <code>IPNetworkVar</code> variables.</li> <li>#759 - Corrected backwards add/import links for Power Feed and Power Panel in navigation bar</li> </ul>"},{"location":"release-notes/version-1.1.html#documentation_4","title":"Documentation","text":"<ul> <li>#681 - Added an example guide on how to use AWS S3 for hosting static files in production.</li> <li>#725 - Added missing <code>http-keepalive = 1</code> to recommended <code>uswgi.ini</code> configuration.</li> </ul>"},{"location":"release-notes/version-1.1.html#housekeeping_4","title":"Housekeeping","text":"<ul> <li>#738 - Added <code>*.env</code> (except <code>dev.env</code>) to <code>.gitignore</code> to prevent local environment variable files from accidentally being committed to Git</li> </ul>"},{"location":"release-notes/version-1.1.html#v110-2021-07-20","title":"v1.1.0 (2021-07-20)","text":""},{"location":"release-notes/version-1.1.html#security_3","title":"Security","text":"<ul> <li>#717 - Bump Pillow dependency version from 8.1.2 to 8.2.0 to address numerous critical CVE advisories</li> </ul>"},{"location":"release-notes/version-1.1.html#added_5","title":"Added","text":"<ul> <li>#372 - Added support for displaying custom fields in tables used in object list views</li> <li>#620 - Config context schemas can now be managed via Git repositories.</li> </ul>"},{"location":"release-notes/version-1.1.html#changed_2","title":"Changed","text":"<ul> <li>#684 - Renamed <code>?opt_in_fields=</code> query param to <code>?include=</code></li> <li>#697 - Added <code>CELERY_TASK_SOFT_TIME_LIMIT</code> to <code>settings.py</code> and lowered the default <code>CELERY_TASK_TIME_LIMIT</code> configuration.</li> </ul>"},{"location":"release-notes/version-1.1.html#fixed_7","title":"Fixed","text":"<ul> <li>#363 - Fixed using S3 django-storages backend requires <code>USE_TZ=False</code></li> <li>#466 - Fixed improper GraphQL schema generation on fields that can be blank but not null (such as <code>Interface.mode</code>)</li> <li>#663 - Fixed <code>kombu.exceptions.EncodeError</code> when trying to execute Jobs using <code>(Multi)ObjectVar</code> objects with nested relationships</li> <li>#672 - Fixed inheritance of Celery broker/results URL settings for dev/template configs (they can now be defined using Redis env. vars)</li> <li>#680 - Removed unnecessary warning message when both RQ and Celery workers are present</li> <li>#686 - Fixed incorrect permission name for Tags list view in nav menu</li> <li>#690 - Fixed Jinja2 dependency version to remain backwards-compatible with Nautobot 1.0.x</li> <li>#696 - Fixed inheritance of VRF and Tenant assignment when creating an IPAddress or Prefix under a parent Prefix. (Port of NetBox #5703 and NetBox #6012)</li> <li>#698 - Fixed cloning of a computed field object to now carry over required non-unique fields</li> <li>#699 - Exceptions such as TypeError are now caught and handled correctly when rendering a computed field.</li> <li>#702 - GraphiQL view no longer requires internet access to load libraries.</li> <li>#703 - Fixed direct execution of saved GraphQL queries containing double quotes</li> <li>#705 - Fixed missing description field from detail view for computed fields</li> </ul>"},{"location":"release-notes/version-1.1.html#documentation_5","title":"Documentation","text":"<ul> <li>#675 - Update MySQL unicode settings docs to be more visible</li> <li>#677 - Revise LDAPS outdated documentation for ignoring TLS cert errors</li> <li>#691 - Clarify documentation on RQ to Celery worker migration and running both workers in parallel to help ease migration</li> <li>#692 - Clarify plugin development docs on naming of file for custom Jinja2 filters</li> </ul>"},{"location":"release-notes/version-1.1.html#v110b2-2021-07-09","title":"v1.1.0b2 (2021-07-09)","text":""},{"location":"release-notes/version-1.1.html#added_6","title":"Added","text":"<ul> <li>#599 - Custom fields are now supported on <code>JobResult</code> objects</li> <li>#637 - Implemented a <code>nautobot-server fix_custom_fields</code> command to manually purge stale custom field data</li> </ul>"},{"location":"release-notes/version-1.1.html#fixed_8","title":"Fixed","text":"<ul> <li>#495 - Fixed search for partial IPv4 prefixes/aggregates not finding all matching objects</li> <li>#533 - Custom field tasks are now run atomically to avoid stale field data from being saved on objects.</li> <li>#554 - Fixed search for partial IPv6 prefixes/aggregates not finding all matching objects</li> <li>#569 - Change minimum/maximum allowed values for integer type in Custom Fields to 64-bit <code>BigIntegerField</code> types (64-bit)</li> <li>#626 - Added prefix <code>NAUTOBOT_</code> in <code>override.env</code> example inside of <code>docker-entrypoint.sh</code></li> <li>#661 - Fixed <code>computed_fields</code> key not being included in API response for devices when using <code>include</code> (for opt-in fields)</li> </ul>"},{"location":"release-notes/version-1.1.html#documentation_6","title":"Documentation","text":"<ul> <li>#600 - The <code>invoke migrate</code> step is now included in the development getting started guide for Docker workflows</li> <li>#617 - Added extra comments to <code>uwsgi.ini</code> config to help with load balancer deployments in Nautobot services documentation</li> <li>#634 - Documentation on plugin capabilities has been clarified.</li> <li>#645 - Updated services troubleshooting docs to include \"incorrect string value\" fix when using Unicode emojis with MySQL as a database backend</li> <li>#653 - Fixed systemd unit file for <code>nautobot-worker</code> to correctly start/stop/restart</li> <li>#667 - Fixed various outdated/incorrect places in the documentation for v1.1.0 release.</li> </ul>"},{"location":"release-notes/version-1.1.html#v110b1-2021-07-02","title":"v1.1.0b1 (2021-07-02)","text":""},{"location":"release-notes/version-1.1.html#added_7","title":"Added","text":"<ul> <li>#3 - GraphQL queries can now be saved for later execution</li> <li>#17 - MySQL 8.x is now fully supported as a database backend</li> <li>#200 - Jobs can be marked as read-only</li> <li>#274 - Added config context schemas to optionally validate config and local context data against JSON Schemas</li> <li>#297 -  Added an anonymous health-checking endpoint at <code>/health/</code>using, also introducing a <code>nautobot-server health_check</code> command.</li> <li>#485 - Applications can define navbar properties through <code>navigation.py</code></li> <li>#557 - <code>Prefix</code> records can now be created using /32 (IPv4) and /128 (IPv6) networks. (Port of NetBox #6545)</li> <li>#561 - Added autodetection of <code>mime_type</code> on <code>export_templates</code> provided by Git datasources</li> <li>#636 - Added custom fields to <code>JobResult</code> model, with minor changes to job result detail page</li> </ul>"},{"location":"release-notes/version-1.1.html#changed_3","title":"Changed","text":"<ul> <li>#431 - <code>ConfigContext</code> and <code>ExportTemplate</code> records now must have unique <code>name</code> values. This was always the case in NetBox, but was inadvertently un-enforced in earlier versions of Nautobot.</li> </ul>"},{"location":"release-notes/version-1.1.html#fixed_9","title":"Fixed","text":"<ul> <li>#460 - Deleting a record now deletes any associated <code>RelationshipAssociation</code> records</li> <li>#494 - Objects with <code>status</code> fields now emit limited choices correctly when performing <code>OPTIONS</code> metadata API requests</li> </ul>"},{"location":"release-notes/version-1.1.html#documentation_7","title":"Documentation","text":"<ul> <li>#10 - Added a new \"Getting Started in the Web UI\" section to the documentation to help new users begin learning how to use Nautobot.</li> <li>#618 - Fixed typo in release-notes</li> </ul>"},{"location":"release-notes/version-1.1.html#housekeeping_5","title":"Housekeeping","text":"<ul> <li>#602 - Fixed incorrect requirement to install <code>toml</code> Python library before running <code>invoke</code> tasks</li> </ul>"},{"location":"release-notes/version-1.2.html","title":"Version 1.2","text":""},{"location":"release-notes/version-1.2.html#nautobot-v12","title":"Nautobot v1.2","text":"<p>This document describes all new features and changes in Nautobot 1.2.</p> <p>If you are a user migrating from NetBox to Nautobot, please refer to the \"Migrating from NetBox\" documentation.</p>"},{"location":"release-notes/version-1.2.html#release-overview","title":"Release Overview","text":""},{"location":"release-notes/version-1.2.html#added","title":"Added","text":""},{"location":"release-notes/version-1.2.html#admin-configuration-ui-370","title":"Admin Configuration UI (#370)","text":"<p>The Nautobot Admin UI now includes a \"Configuration\" page that can be used to dynamically customize a number of optional settings as an alternative to editing <code>nautobot_config.py</code> and restarting the Nautobot processes.</p> <p>If upgrading from a previous Nautobot version where these settings were defined in your <code>nautobot_config.py</code>, you must remove those definitions in order to use this feature, as explicit configuration in <code>nautobot_config.py</code> takes precedence over values configured in the Admin UI.</p>"},{"location":"release-notes/version-1.2.html#common-base-template-for-object-detail-views-479-585","title":"Common Base Template for Object Detail Views (#479, #585)","text":"<p>All \"object detail\" views (pages displaying details of a single Nautobot record) now inherit from a common base template, providing improved UI consistency, reducing the amount of boilerplate code needed to create a new detail view, and fixing a number of bugs in various views. Plugin developers are encouraged to make use of this new template (<code>generic/object_detail.html</code>) to take advantage of these improvements.</p> <p>Views based on this template now include a new \"Advanced\" tab - currently this tab includes the UUID and slug (if any) of the object being viewed, but may be extended in the future to include additional information not relevant to the basic object detail view.</p>"},{"location":"release-notes/version-1.2.html#custom-fields-are-now-user-configurable-229","title":"Custom Fields are now User Configurable (#229)","text":"<p>Creation and management of Custom Field definitions can now be performed by any user with appropriate permissions. (Previously, only admin users were able to manage Custom Fields.)</p>"},{"location":"release-notes/version-1.2.html#custom-field-webhooks-519","title":"Custom Field Webhooks (#519)","text":"<p>Webhooks can now be triggered when creating/updating/deleting <code>CustomField</code> and <code>CustomFieldChoice</code> definition records.</p>"},{"location":"release-notes/version-1.2.html#database-ready-signal-13","title":"Database Ready Signal (#13)","text":"<p>After running <code>nautobot-server migrate</code> or <code>nautobot-server post_upgrade</code>, Nautobot now emits a custom signal, <code>nautobot_database_ready</code>. This signal is designed for plugins to connect to in order to perform automatic database population (such as defining custom fields, relationships, webhooks, etc.) at install/upgrade time. For more details, refer to the plugin development documentation.</p>"},{"location":"release-notes/version-1.2.html#graphql-filters-at-all-levels-248","title":"GraphQL Filters at All Levels (#248)","text":"<p>The GraphQL API now supports query filter parameters at any level of a query. For example:</p> <pre><code>query {\nsites(name: \"ams\") {\ndevices(role: \"edge\") {\nname\ninterfaces(type: \"virtual\") {\nname\n}\n}\n}\n}\n</code></pre>"},{"location":"release-notes/version-1.2.html#graphql-query-optimizations-171","title":"GraphQL Query Optimizations (#171)","text":"<p>Complex GraphQL queries have been greatly optimized thanks to integration of <code>graphene-django-optimizer</code> into Nautobot!</p> <p>In our internal testing and benchmarking the number of SQL queries generated per GraphQL query have been drastically reduced, resulting in much quicker response times and less strain on the database.</p> <p>For in depth details on our benchmarks, please see the comment thread on the issue.</p>"},{"location":"release-notes/version-1.2.html#installed-plugins-list-and-detail-views-plugin-config-and-home-views-935","title":"Installed Plugins List and Detail Views, Plugin Config and Home Views (#935)","text":"<p>The <code>Plugins</code> menu now includes an \"Installed Plugins\" menu item which provides a list view of information about all installed and enabled plugins, similar to a formerly administrator-only view.</p> <p>Additionally, when viewing this list, each plugin can now be clicked on for a detail view, which provides an in-depth look at the capabilities of the plugin, including whether it makes use of each or all of the various Nautobot features available to be used by plugins.</p> <p>Additionally, plugins now have the option of registering specific \"home\" and/or \"configuration\" views, which will be linked and accessible directly from the installed-plugins list and detail views.</p> <p>Please refer to the plugin development documentation for more details about this functionality.</p>"},{"location":"release-notes/version-1.2.html#ipam-custom-lookups-for-filtering-982","title":"IPAM custom lookups for filtering (#982)","text":"<p>Nautobot now again supports custom lookup filters on the <code>IPAddress</code>, <code>Prefix</code>, and <code>Aggregate</code> models, such as <code>address__net_contained</code>, <code>network__net_contains_or_equals</code>, etc. Refer to the REST API filtering documentation for more specifics and examples.</p>"},{"location":"release-notes/version-1.2.html#job-approval-125","title":"Job Approval (#125)","text":"<p>Jobs can now be optionally defined as <code>approval_required = True</code>, in which case the Job will not be executed immediately upon submission, but will instead be placed into an approval queue; any user other than the submitter can approve or deny a queued Job, at which point it will then be executed as normal.</p>"},{"location":"release-notes/version-1.2.html#job-scheduling-374","title":"Job Scheduling (#374)","text":"<p>Jobs can now be scheduled for execution at a future date and time (such as during a planned maintenance window), and can also be scheduled for repeated execution on an hourly, daily, or weekly recurring cadence.</p> <p>Note</p> <p>Execution of scheduled jobs is dependent on Celery Beat; enablement of this system service is a new requirement in Nautobot 1.2.</p> <p>Please see the documentation on enabling the Celery Beat scheduler service to get started!</p>"},{"location":"release-notes/version-1.2.html#networking-template-filters-1082","title":"Networking Template Filters (#1082)","text":"<p>Template rendering with Django and/or Jinja2 now supports by default all filters provided by the <code>netutils</code> library. These filters can be used in page templates, computed fields, custom links, export templates, etc. For details, please refer to the filters documentation.</p>"},{"location":"release-notes/version-1.2.html#organizational-branding-859","title":"Organizational Branding (#859)","text":"<p>Organizations may provide custom branding assets to change the logo, icons, and footer URLs to help Nautobot fit within their environments and user communities. Please see the configuration documenation for details on how to specify the location and usage of custom branding assets.</p>"},{"location":"release-notes/version-1.2.html#plugin-banners-534","title":"Plugin Banners (#534)","text":"<p>Each plugin is now able to optionally inject a custom banner into any of the Nautobot core views.</p> <p>Please refer to the plugin development documentation for more details about this functionality.</p>"},{"location":"release-notes/version-1.2.html#same-type-and-symmetric-relationships-157","title":"Same-Type and Symmetric Relationships (#157)","text":"<p>The Relationships feature has been extended in two ways:</p> <ol> <li>Relationships between the same object type (e.g. device-to-device) are now permitted and supported.</li> <li>For same-object-type relationships specifically, symmetric (peer-to-peer rather than source-to-destination) relationships are now an option.</li> </ol> <p>For more details, refer to the Relationships documentation.</p>"},{"location":"release-notes/version-1.2.html#secrets-integration-541","title":"Secrets Integration (#541)","text":"<p>Nautobot can now read secret values (such as device or Git repository access credentials) on demand from a variety of external sources, including environment variables and text files, and extensible via plugins to support additional secrets providers such as Hashicorp Vault and AWS Secrets Manager. Both the NAPALM device integration and the Git repository integration can now make use of these secrets, and plugins and jobs can do so as well.</p> <p>For more details, please refer to the Secrets documentation.</p>"},{"location":"release-notes/version-1.2.html#software-defined-home-page-674-716","title":"Software-Defined Home Page (#674, #716)","text":"<p>Nautobot core applications and plugins can now both define panels, groups, and items to populate the Nautobot home page. The home page now dynamically reflows to accommodate available content. Plugin developers can add to existing panels or groups or define entirely new panels as needed. For more details, see Populating the Home Page.</p>"},{"location":"release-notes/version-1.2.html#changed","title":"Changed","text":""},{"location":"release-notes/version-1.2.html#admin-site-changes-900","title":"Admin Site Changes (#900)","text":"<p>The Admin sub-site within Nautobot (<code>/admin/</code> and its child pages) has been revamped in appearance and functionality. It has been re-skinned to resemble the rest of the Nautobot UI, and has been slimmed down to only include those models and features that are still exclusive to admin users, such as user/group/permission management.</p>"},{"location":"release-notes/version-1.2.html#joblogentry-data-model-1030","title":"JobLogEntry Data Model (#1030)","text":"<p>Job log messages are now stored in a separate database table as a separate <code>JobLogEntry</code> data model, instead of being stored as JSON on the <code>JobResult</code> model/table. This provides faster and more robust rendering of <code>JobResult</code>-related views and lays groundwork for future enhancements of the Jobs feature.</p> <p>Note</p> <p>If you are executing Jobs inside your tests, there are some changes you will need to make for your tests to support this feature correctly. Refer to the Jobs documentation for details.</p> <p>Note</p> <p>Because <code>JobLogEntry</code> records reference their associated <code>JobResult</code>, the pattern <code>job.job_result = JobResult()</code> (creating only an in-memory <code>JobResult</code> object, rather than a database entry) will no longer work. Instead you will need to create a proper JobResult database object <code>job.job_result = JobResult.objects.create(...)</code>.</p>"},{"location":"release-notes/version-1.2.html#slug-fields-are-now-optional-in-csv-import-rest-api-and-orm-493","title":"Slug fields are now Optional in CSV import, REST API and ORM (#493)","text":"<p>All models that have <code>slug</code> fields now use <code>AutoSlugField</code> from the <code>django-extensions</code> package. This means that when creating a record via the REST API, CSV import, or direct ORM Python calls, the <code>slug</code> field is now fully optional; if unspecified, it will be automatically assigned a unique value, just as how a <code>slug</code> is auto-populated in the UI when creating a new record.</p> <p>Just as with the UI, the <code>slug</code> can still always be explicitly set if desired.</p>"},{"location":"release-notes/version-1.2.html#v1211-2022-04-04","title":"v1.2.11 (2022-04-04)","text":""},{"location":"release-notes/version-1.2.html#added_1","title":"Added","text":"<ul> <li>#1123 - Add validation for IPAddress <code>assigned_object_type</code> and <code>assigned_object_id</code>.</li> <li>#1146 - Added change date filtering lookup expressions to GraphQL.</li> <li>#1495 - Added full coverage of cable termination types to Graphene.</li> <li>#1501 - Add IP field to CSV export of device.</li> </ul>"},{"location":"release-notes/version-1.2.html#changed_1","title":"Changed","text":"<ul> <li>#1536 - Removed the ServiceUnavailable exception when no <code>primary_ip</code> is available for a device, but other connection options are available.</li> <li>#1581 - Changed MultipleChoiceJSONField to accept choices as a callable, fixing Datasource Contents provided by plugins are not accepted as valid choice by REST API.</li> </ul>"},{"location":"release-notes/version-1.2.html#fixed","title":"Fixed","text":"<ul> <li>#1313 - Fixed GraphQL query error on OneToOneFields such as <code>IPAddress.primary_ip4_for</code></li> <li>#1408 - Fixed incorrect HTML in the Devices detail views.</li> <li>#1467 - Fixed an issue where at certain browser widths the nav bar would cover the top of the page content.</li> <li>#1523 - Fixed primary IP being unset after creating/updating different interface</li> </ul>"},{"location":"release-notes/version-1.2.html#documentation","title":"Documentation","text":"<ul> <li>#1529 - Added list of standard hex colors to the Tags documentation.</li> <li>#1583 - Fixed Nautobot service definition in PostgreSQL-backed development environment.</li> <li>#1584 - Replaced links in docs to celeryproject.org with celeryq.dev</li> </ul>"},{"location":"release-notes/version-1.2.html#housekeeping","title":"Housekeeping","text":"<ul> <li>#1548 - Pin Jinja2 version for mkdocs requirements to fix RTD docs builds related to API deprecation in Jinja2 &gt;= 3.1.0</li> <li>#1599 - Bump mkdocs version for Snyk report.</li> </ul>"},{"location":"release-notes/version-1.2.html#v1210-2022-03-21","title":"v1.2.10 (2022-03-21)","text":""},{"location":"release-notes/version-1.2.html#documentation_1","title":"Documentation","text":"<ul> <li>#1492 - Added note in the Jobs documentation about the use of <code>AbortTransaction</code> to end the job and force rollback.</li> <li>#1511 - Fixed left column of Read The Docs being cut off.</li> <li>#1517 - Added password filtering example to advanced logging section in docs.</li> <li>#1522 - Fixed link name attribute name in developer docs.</li> </ul>"},{"location":"release-notes/version-1.2.html#housekeeping_1","title":"Housekeeping","text":"<ul> <li>#1514 - Simplified switching between PostgreSQL and MySQL database backends in the developer environment.</li> <li>#1518 - Updated GitHub Pull Request template to include detail section, todo list.</li> </ul>"},{"location":"release-notes/version-1.2.html#v129-2022-03-14","title":"v1.2.9 (2022-03-14)","text":""},{"location":"release-notes/version-1.2.html#security","title":"Security","text":"<p>Danger</p> <p>It is highly recommended that users of Python 3.6 prioritize upgrading to a newer version of Python. Nautobot will be removing support for Python 3.6 in a future update.</p> <p>Important</p> <p>For users remaining on Python 3.6, please know that upgrading to Nautobot v1.2.9 will not resolve these CVEs for your installation. The only remedy at this time is to upgrade your systems to utilize Python 3.7 or later.</p> <ul> <li>#1487 - Implemented fixes for CVE-2022-22817, CVE-2022-24303, and potential infinite loop by requiring Pillow &gt;=9.0.1 for Python version &gt;=3.7. For Python version &lt;3.7 (e.g. 3.6), it is recommended that you prioritize upgrading your environment to use Python 3.7 or higher. Support for Python 3.6 will be removed in a future update.</li> </ul>"},{"location":"release-notes/version-1.2.html#fixed_1","title":"Fixed","text":"<ul> <li>#1431 - Fixed potential failure of <code>extras.0017_joblog_data_migration</code> migration when the job logs contain messages mistakenly logged as object references.</li> <li>#1459 - Fixed incorrect display of related devices and VMs in the Cluster Type and Cluster Group detail views.</li> <li>#1469 - Fixed incorrect CSV export for devices</li> </ul>"},{"location":"release-notes/version-1.2.html#v128-2022-03-07","title":"v1.2.8 (2022-03-07)","text":""},{"location":"release-notes/version-1.2.html#added_2","title":"Added","text":"<ul> <li>#1242 - Add MAJOR.MINOR tags to Docker images upon release.</li> <li>#1446 - Apply title labels to Docker images.</li> </ul>"},{"location":"release-notes/version-1.2.html#changed_2","title":"Changed","text":"<ul> <li>#1452 - Changed GitHub release workflow to not run on prerelease releases.</li> </ul>"},{"location":"release-notes/version-1.2.html#fixed_2","title":"Fixed","text":"<ul> <li>#1301 - Fixed window history handling for views with tabs in Safari/Firefox.</li> <li>#1302 - Fixed missing Advanced tab on Virtual Machine detail view.</li> <li>#1398 - Fixed missing safeguard for removing master from Virtual Chassis via API.</li> <li>#1399 - Fixed not being able to set master to <code>null</code> on Virtual Chassis API.</li> <li>#1405 - Fixed incorrect import in 'startplugin' template code.</li> <li>#1412 - Fixed not being able to query for prefix family via GraphQL.</li> <li>#1442 - Fixed missing Advanced tab on Job Result, Git Repository, and Config Context Schema detail views.</li> </ul>"},{"location":"release-notes/version-1.2.html#dependencies","title":"Dependencies","text":"<ul> <li>#1432 - Update django-redis to <code>5.2.x</code> to address <code>5.1.x</code> blocking redis <code>4.x</code> versions.</li> </ul>"},{"location":"release-notes/version-1.2.html#documentation_2","title":"Documentation","text":"<ul> <li>#1419 - Add documentation for specifying a CA cert file for LDAP authentication backend.</li> </ul>"},{"location":"release-notes/version-1.2.html#housekeeping_2","title":"Housekeeping","text":"<ul> <li>#839 - Add CODE_OF_CONDUCT.md to repository.</li> <li>#1299 - Add SECURITY.md to repository.</li> <li>#1348 - Pin Selenium Grid container version to match Python Client version.</li> <li>#1388 - Added beta version of GitHub Issue Form style for feature request.</li> <li>#1447 - Minor <code>nit</code> on Github Issue Form styling.</li> <li>#1453 - Changed feature request to use GitHub Issue Form.</li> </ul>"},{"location":"release-notes/version-1.2.html#v127-2022-02-22","title":"v1.2.7 (2022-02-22)","text":""},{"location":"release-notes/version-1.2.html#housekeeping_3","title":"Housekeeping","text":"<ul> <li>#1403 - Changes the GitHub Action on Release version template variable name.</li> </ul>"},{"location":"release-notes/version-1.2.html#v126-2022-02-22","title":"v1.2.6 (2022-02-22)","text":""},{"location":"release-notes/version-1.2.html#added_3","title":"Added","text":"<ul> <li>#1279 - Circuit terminations now render custom relationships on the circuit detail page.</li> <li>#1353 - Added UI for deleting previously uploaded images when editing a DeviceType.</li> </ul>"},{"location":"release-notes/version-1.2.html#fixed_3","title":"Fixed","text":"<ul> <li>#1249 - Fixed a timing issue where after creating a custom field with a default value and immediately assigning values to this custom field on individual objects, the custom field values could be automatically reverted to the default value.</li> <li>#1280 - Added missing <code>get_absolute_url</code> method to the <code>CircuitTermination</code> model, fixing a UI error that could occur when relationships involve CircuitTerminations.</li> <li>#1312 - Fixed a bug where a Prefix filter matching zero records would instead show all records in the UI.</li> <li>#1332 - Fixed a regression in which the REST API did not default to pagination based on the configured <code>PAGINATE_COUNT</code> setting but instead defaulted to full unpaginated results.</li> <li>#1335 - Fixed an issue with the Secret create/edit form that caused problems when defining AWS secrets using the <code>nautobot-secrets-providers</code> plugin.</li> <li>#1346 - Fixed an error in the periodic execution of Celery's built-in <code>celery.backend_cleanup</code> task.</li> </ul>"},{"location":"release-notes/version-1.2.html#dependencies_1","title":"Dependencies","text":"<ul> <li>#1390 - Pinned transitive dependency <code>MarkupSafe</code> to version 2.0.1 as later versions are incompatible with Nautobot's current <code>Jinja2</code> dependency.</li> </ul>"},{"location":"release-notes/version-1.2.html#documentation_3","title":"Documentation","text":"<ul> <li>#1283 - Update Sentinel docs to have 3 hosts (minimum per Redis docs), and change <code>CELERY_BROKER_URL</code> to a multiline string instead of a Tuple (tuple is invalid, and raises an exception when job completes).</li> <li>#1328 - Fixed an error in the Job class-path documentation.</li> <li>#1386 - Updated release schedule in docs for patch releases, now every two weeks.</li> </ul>"},{"location":"release-notes/version-1.2.html#housekeeping_4","title":"Housekeeping","text":"<ul> <li>#1327 - Fixes the broken dependencies from the Release action.</li> <li>#1360 - Fixed an issue in the development environment that could cause Selenium integration tests to error out.</li> </ul>"},{"location":"release-notes/version-1.2.html#v125-2022-02-02","title":"v1.2.5 (2022-02-02)","text":""},{"location":"release-notes/version-1.2.html#fixed_4","title":"Fixed","text":"<ul> <li>#371 - Fixed a server error that could occur when importing cables via CSV.</li> <li>#1161 - The <code>description</code> field for device component templates is now correctly propagated to device components created from these templates.</li> <li>#1233 - Prevented a job aborting when an optional ObjectVar is provided with a value of None</li> <li>#1282 - Fixed a server error when editing User accounts.</li> <li>#1308 - Fixed another server error that could occur when importing cables via CSV.</li> </ul>"},{"location":"release-notes/version-1.2.html#documentation_4","title":"Documentation","text":"<ul> <li>#1293 - Reorganized the developer documents somewhat to reduce duplication of information, added diagrams for issue intake process.</li> </ul>"},{"location":"release-notes/version-1.2.html#housekeeping_5","title":"Housekeeping","text":"<ul> <li>#1272 - Fixed GitHub Actions syntax and Slack payload for <code>release</code> CI workflow</li> </ul>"},{"location":"release-notes/version-1.2.html#v124-2022-01-13","title":"v1.2.4 (2022-01-13)","text":""},{"location":"release-notes/version-1.2.html#security_1","title":"Security","text":"<p>Danger</p> <p>It is highly recommended that users of Python 3.6 prioritize upgrading to a newer version of Python. Nautobot will be removing support for Python 3.6 in a future update.</p> <p>Important</p> <p>For users remaining on Python 3.6, please know that upgrading to Nautobot v1.2.4 will not resolve these CVEs for your installation. The only remedy at this time is to upgrade your systems utilize Python 3.7 or later.</p> <ul> <li>#1267 - Implemented fixes for CVE-2022-22815, CVE-2022-22816, and CVE-2022-22817 to require Pillow &gt;=9.0.0 for Python version &gt;=3.7. For Python version &lt;3.7 (e.g. 3.6), it is recommended that you prioritize upgrading your environment to use Python 3.7 or higher. Support for Python 3.6 will be removed in a future update.</li> </ul>"},{"location":"release-notes/version-1.2.html#changed_3","title":"Changed","text":"<ul> <li>#616 - The REST API now no longer permits setting non-string values for text-type custom fields.</li> </ul>"},{"location":"release-notes/version-1.2.html#fixed_5","title":"Fixed","text":"<ul> <li>#1053 - Fixed error when removing an IP address from an interface when it was previously the parent device's primary IP.</li> <li>#1140 - Fixed incorrect UI widgets in the updated Admin UI.</li> <li>#1253 - Fixed missing code that prevented switching between tabs in the device-type detail view.</li> </ul>"},{"location":"release-notes/version-1.2.html#documentation_5","title":"Documentation","text":"<ul> <li>#1113 - Added documentation about using Redis Sentinel with Nautobot.</li> </ul>"},{"location":"release-notes/version-1.2.html#housekeeping_6","title":"Housekeeping","text":"<ul> <li>#1251 - Added <code>workflow_call</code> to the GitHub Actions CI workflow so that it may be called by other GHA workflows.</li> <li>#1243 - Github CI action no longer runs for pull requests that don't impact Nautobot code, such as documentation, examples, etc.</li> </ul>"},{"location":"release-notes/version-1.2.html#v123-2022-01-07","title":"v1.2.3 (2022-01-07)","text":""},{"location":"release-notes/version-1.2.html#security_2","title":"Security","text":"<p>Danger</p> <p>It is highly recommended that users of Python 3.6 prioritize upgrading to a newer version of Python. Nautobot will be removing support for Python 3.6 in a future update.</p> <p>Important</p> <p>For users remaining on Python 3.6, please know that upgrading to Nautobot v1.2.3 will not resolve this CVE for your installation. The only remedy at this time is to upgrade your systems utilize Python 3.7 or later.</p> <ul> <li>#1238 - Implemented fix for CVE-2021-23727 to require Celery &gt;=5.2.2 for Python version &gt;=3.7. For Python version &lt;3.7 (e.g. 3.6), it is recommended that you prioritize upgrading your environment to use Python 3.7 or higher. Support for Python 3.6 will be removed in a future update.</li> </ul>"},{"location":"release-notes/version-1.2.html#fixed_6","title":"Fixed","text":"<ul> <li>#313 - REST API documentation now correctly shows that <code>status</code> is a required field.</li> <li>#477 - Model <code>TextField</code>s are now correctly mapped to <code>MultiValueCharFilter</code> in filter classes.</li> <li>#734 - Requests to nonexistent <code>/api/</code> URLs now correctly return a JSON 404 response rather than an HTML 404 response.</li> <li>#1127 - Fixed incorrect rendering of the navbar at certain browser window sizes.</li> <li>#1203 - Fixed maximum recursion depth error when filtering GraphQL queries by <code>device_types</code>.</li> <li>#1220 - Fixed an inconsistency in the breadcrumbs seen in various Admin pages.</li> <li>#1228 - Fixed a case where a GraphQL query for objects associated by Relationships could potentially throw an exception.</li> <li>#1229 - Fixed a template rendering error in the login page.</li> <li>#1234 - Fixed missing changelog support for Custom Fields.</li> </ul>"},{"location":"release-notes/version-1.2.html#documentation_6","title":"Documentation","text":"<ul> <li>#1037 - Added documentation about how to successfully use the <code>nautobot-server dumpdata</code> and <code>nautobot-server loaddata</code> commands.</li> </ul>"},{"location":"release-notes/version-1.2.html#v122-2021-12-27","title":"v1.2.2 (2021-12-27)","text":""},{"location":"release-notes/version-1.2.html#added_4","title":"Added","text":"<ul> <li>#1152 - Added REST API and GraphQL for <code>JobLogEntry</code> objects.</li> </ul>"},{"location":"release-notes/version-1.2.html#changed_4","title":"Changed","text":"<ul> <li>#650 - Job Results UI now render job log messages immediately</li> </ul>"},{"location":"release-notes/version-1.2.html#fixed_7","title":"Fixed","text":"<ul> <li>#1181 - Avoid throwing a 500 error in the case where users have deleted a required Status value. (Preventing the user from doing this will need to be a later fix.)</li> <li>#1193 - Fixed <code>JobResult</code> page may fail to list <code>JobLogEntries</code> in chronological order</li> <li>#1195 - Job log entries now again correctly render inline Markdown formatting.</li> </ul>"},{"location":"release-notes/version-1.2.html#documentation_7","title":"Documentation","text":"<ul> <li>#1186 - Corrected an error in the docs regarding developing secrets providers in plugins.</li> <li>#1188 - Corrected some errors in the developer documentation about our branch management approach.</li> </ul>"},{"location":"release-notes/version-1.2.html#v121-2021-12-16","title":"v1.2.1 (2021-12-16)","text":""},{"location":"release-notes/version-1.2.html#security_3","title":"Security","text":"<ul> <li>#1077 - Updated <code>graphiql</code> to 1.5.16 as well as updating the associated Javascript libraries used in the GraphiQL UI to address a reported security flaw in older versions of GraphiQL. To the best of our understanding, the Nautobot implementation of GraphiQL was not vulnerable to said flaw.</li> </ul>"},{"location":"release-notes/version-1.2.html#added_5","title":"Added","text":"<ul> <li>#1110 - Added GraphQL support for the <code>ObjectChange</code> model.</li> </ul>"},{"location":"release-notes/version-1.2.html#changed_5","title":"Changed","text":"<ul> <li>#1106 - Updating Docker health checks to be more robust and greatly reduce performance impact.</li> </ul>"},{"location":"release-notes/version-1.2.html#fixed_8","title":"Fixed","text":"<ul> <li>#1170 - Fixed bug in renamed column of <code>JobResultTable</code> where rename was not made to the <code>Meta</code>.</li> <li>#1173 - Fixed official Docker image: v1.2.0 tagged images fail to load with <code>ImportError: libxml2.so.2</code>.</li> </ul>"},{"location":"release-notes/version-1.2.html#v120-2021-12-15","title":"v1.2.0 (2021-12-15)","text":""},{"location":"release-notes/version-1.2.html#added_6","title":"Added","text":"<ul> <li>#876 - Added option to apply a validation regex when defining CustomFieldChoices.</li> <li>#982 - Added IPAM custom lookup database functions.</li> <li>#1002 - Added <code>URM-P2</code>, <code>URM-P4</code>, and <code>URM-P8</code> port types.</li> <li>#1041 - Add passing of <code>**kwargs</code> to Celery tasks when using <code>JobResult.enqueue_job()</code> to execute a <code>Job</code>.</li> <li>#1082 - Added <code>netutils</code> template filters for both Django and Jinja2 template rendering.</li> <li>#1159 - Add <code>family</code> field to <code>IPAddressType</code> for GraphQL API enable filtering of <code>IPAddress</code> objects by <code>family</code>.</li> </ul>"},{"location":"release-notes/version-1.2.html#changed_6","title":"Changed","text":"<ul> <li>#1068 - Docker images now include optional Nautobot dependencies by default.</li> <li>#1095 - Refined Admin Configuration UI.</li> </ul>"},{"location":"release-notes/version-1.2.html#removed","title":"Removed","text":"<ul> <li>#1094 - Removed leftover custom field management views from Admin UI</li> </ul>"},{"location":"release-notes/version-1.2.html#fixed_9","title":"Fixed","text":"<ul> <li>#453 - Fixed potential <code>ValueError</code> when rendering <code>JobResult</code> detail view with non-standard <code>JobResult.data</code> contents.</li> <li>#864 - Fixed inconsistent <code>JobResult</code> detail view page templates.</li> <li>#926 - Fixed inability to pass multiple values for a MultiObjectVar as query parameters.</li> <li>#958 - Fixed Job REST API handling of ObjectVars specified by query parameters.</li> <li>#992 - Improved loading/rendering time of the <code>JobResult</code> table/list view.</li> <li>#1043 - Fixed <code>AttributeError</code> when bulk-adding interfaces to virtual machines.</li> <li>#1078 - Fixed missing support for filtering several models by their custom fields and/or created/updated stamps.</li> <li>#1093 - Improved REST API performance by adding caching of serializer \"opt-in fields\".</li> <li>#1098 - Fixed 404 error when creating a circuit termination for circuit and other edge cases resulting in 404 errors</li> <li>#1112 - Fixed broken single-object GraphQL query endpoints.</li> <li>#1116 - Fixed UnboundLocalError when using device NAPALM integration</li> <li>#1121 - Fixed issue with handling of relationships referencing no-longer-present model classes.</li> <li>#1141 - Improved reloading of changed Job files. (Port of NetBox #7820)</li> <li>#1154 - Fixed inability to save changes in Admin Configuration UI.</li> <li>#1162 - Fixed error when creating a <code>NavMenuItem</code> without specifying the <code>buttons</code> argument.</li> </ul>"},{"location":"release-notes/version-1.2.html#dependencies_2","title":"Dependencies","text":"<ul> <li>#1105 - Reverted minimum Python 3.6 version to 3.6.0 rather than 3.6.2.</li> </ul>"},{"location":"release-notes/version-1.2.html#documentation_8","title":"Documentation","text":"<ul> <li>#843 - Added more information about Celery in the Upgrading Nautobot docs.</li> <li>#888 - Addressed FIXME comment in LDAP documentation.</li> <li>#965 - Added example script for performing group sync from AzureAD.</li> <li>#1080 - Added documentation around using LDAP with multiple search groups.</li> <li>#1104 - Added documentation and context on filtering execution of unit tests using labels</li> <li>#1124 - Added documentation on generating <code>SECRET_KEY</code> before Nautobot is configured.</li> <li>#1133 - Fixed some incorrect documentation about the Docker image build/publish process.</li> <li>#1143 - Added documentation on using LDAP with multiple LDAP servers.</li> </ul>"},{"location":"release-notes/version-1.2.html#v120b1-2021-11-19","title":"v1.2.0b1 (2021-11-19)","text":""},{"location":"release-notes/version-1.2.html#security_4","title":"Security","text":"<ul> <li>#1017 - Custom field descriptions no longer potentially render as arbitrary HTML in object edit forms; Markdown format is now supported as a less dangerous option.</li> </ul>"},{"location":"release-notes/version-1.2.html#added_7","title":"Added","text":"<ul> <li>#13 - Added <code>nautobot_database_ready</code> signal</li> <li>#125 - Added support for <code>approval_required = True</code> on Jobs</li> <li>#157 - Added support for same-object-type and symmetric Relationships</li> <li>#171 - GraphQL queries have been greatly optimized by integration with <code>graphene-django-optimizer</code></li> <li>#229 - Added user-facing views for Custom Field management</li> <li>#248 - Added support for filtering GraphQL queries at all levels</li> <li>#370 - Added support for server configuration via the Admin UI.</li> <li>#374 - Added ability to schedule Jobs for future and/or recurring execution</li> <li>#478 - CustomFieldChoice model now supports GraphQL.</li> <li>#479 - Added shared generic template for all object detail views</li> <li>#519 - Added webhook support for <code>CustomField</code> and <code>CustomFieldChoice</code> models.</li> <li>#534 - Added ability to inject a banner from a plugin</li> <li>#541 - Added Secrets integration</li> <li>#580 - Added ability for plugins to register \"home\" and \"configuration\" views.</li> <li>#585 - Added \"Advanced\" tab to object detail views including UUID and slug information.</li> <li>#674 - Plugins can now add items to the Nautobot home page</li> <li>#716 - Nautobot home page content is now dynamically populated based on installed apps and plugins.</li> <li>#866 - Added support for organizational custom branding for the logo and icons</li> <li>#935 - Added Installed Plugins list view and detail view</li> <li>#937 - Added bulk-delete option for scheduled jobs</li> <li>#938 - Added titles to job approval UI buttons</li> <li>#947 - Added <code>DISABLE_PREFIX_LIST_HIERARCHY</code> setting to render IPAM Prefix list view as a flat list</li> <li>#953 - Added option to use MySQL in docker-compose development environment</li> </ul>"},{"location":"release-notes/version-1.2.html#changed_7","title":"Changed","text":"<ul> <li>#222 - Changed wildcard imports to explicitly enumerated imports and enabled associated Flake8 linter rules.</li> <li>#472 - <code>JobResult</code> lists now show the associated Job's name (if available) instead of the Job's <code>class_path</code>.</li> <li>#493 - All <code>slug</code> fields are now optional when creating records via the REST API, ORM, or CSV import. Slugs will be automatically assigned if unspecified.</li> <li>#877 - Hid unused \"Social Auth\" section from Django admin page.</li> <li>#900 - Admin site has been revised and re-skinned to more closely match the core Nautobot UI.</li> </ul>"},{"location":"release-notes/version-1.2.html#fixed_10","title":"Fixed","text":"<ul> <li>#852 - Fixed missing \"Change Log\" tab on certain object detail views</li> <li>#853 - Fixed <code>AttributeError</code> on certain object detail views</li> <li>#891 - Fixed custom field select/multiselect not handled by new UI and added integration tests</li> <li>#966 - Fixed missing \"Advanced\" tab on Device detail views</li> </ul>"},{"location":"release-notes/version-1.2.html#documentation_9","title":"Documentation","text":"<ul> <li>#642 - Added documentation of the <code>GIT_SSL_NO_VERIFY</code> environment variable for using self-signed Git repositories</li> <li>#866 - Added documentation for job scheduling and approvals</li> <li>#1060 - Fixed documentation incorrectly indicating that the Admin UI was the only way to manage custom field definitions.</li> </ul>"},{"location":"release-notes/version-1.2.html#housekeeping_7","title":"Housekeeping","text":"<ul> <li>#879 - Added API testing for job scheduling and approvals</li> <li>#908 - Added UI testing for job scheduling and approvals</li> </ul>"},{"location":"release-notes/version-1.3.html","title":"Version 1.3","text":""},{"location":"release-notes/version-1.3.html#nautobot-v13","title":"Nautobot v1.3","text":"<p>This document describes all new features and changes in Nautobot 1.3.</p> <p>If you are a user migrating from NetBox to Nautobot, please refer to the \"Migrating from NetBox\" documentation.</p>"},{"location":"release-notes/version-1.3.html#release-overview","title":"Release Overview","text":""},{"location":"release-notes/version-1.3.html#added","title":"Added","text":""},{"location":"release-notes/version-1.3.html#dynamic-group-model-896","title":"Dynamic Group Model (#896)","text":"<p>A new data model for representing dynamic groups of objects has been implemented. Dynamic groups can be used to organize objects together by matching criteria such as their site location or region, for example, and are dynamically updated whenever new matching objects are created, or existing objects are updated.</p> <p>For the initial release only dynamic groups of <code>Device</code> and <code>VirtualMachine</code> objects are supported.</p>"},{"location":"release-notes/version-1.3.html#extend-filtersets-and-filter-forms-via-plugins-1470","title":"Extend FilterSets and Filter Forms via Plugins (#1470)","text":"<p>Plugins can now extend existing FilterSets and Filter Forms. This allows plugins to provide alternative lookup methods or custom queries in the UI or API that may not already exist today.</p> <p>You can refer to the plugin development guide on how to create new filters and fields.</p>"},{"location":"release-notes/version-1.3.html#graphql-pagination-1109","title":"GraphQL Pagination (#1109)","text":"<p>GraphQL list queries can now be paginated by specifying the filter parameters <code>limit</code> and <code>offset</code>. Refer to the GraphQL user guide for examples.</p>"},{"location":"release-notes/version-1.3.html#job-database-model-1001","title":"Job Database Model (#1001)","text":"<p>Installed Jobs are now represented by a data model in the Nautobot database. This allows for new functionality including:</p> <ul> <li>The Jobs listing UI view can now be filtered and searched like most other Nautobot table/list views.</li> <li>Job attributes (name, description, approval requirements, etc.) can now be managed via the Nautobot UI by an administrator or user with appropriate permissions to customize or override the attributes defined in the Job source code.</li> <li>Jobs can now be identified by a <code>slug</code> as well as by their <code>class_path</code>.</li> <li>A new set of REST API endpoints have been added to <code>/api/extras/jobs/&lt;uuid&gt;/</code>. The existing <code>/api/extras/jobs/&lt;class_path&gt;/</code> REST API endpoints continue to work but should be considered as deprecated.<ul> <li>A new version of the REST API <code>/api/extras/jobs/</code> list endpoint has been implemented as well, but by default this endpoint continues to demonstrate the pre-1.3 behavior unless the REST API client explicitly requests API <code>version=1.3</code>. See the section on REST API versioning, below, for more details.</li> </ul> </li> <li>As a minor security measure, newly installed Jobs default to <code>enabled = False</code>, preventing them from being run until an administrator or user with appropriate permissions updates them to be enabled for running.</li> </ul> <p>Note</p> <p>As a convenience measure, when initially upgrading to Nautobot 1.3.x, any existing Jobs that have been run or scheduled previously (i.e., have at least one associated JobResult and/or ScheduledJob record) will instead default to <code>enabled = True</code> so that they may continue to be run without requiring changes.</p> <p>For more details please refer to the Jobs feature documentation as well as the Job data model documentation.</p>"},{"location":"release-notes/version-1.3.html#jobs-with-sensitive-parameters-2091","title":"Jobs With Sensitive Parameters (#2091)","text":"<p>Jobs model now includes a <code>has_sensitive_variables</code> field which by default prevents the job's input parameters from being saved to the database. Review whether each job's input parameters include sensitive data such as passwords or other user credentials before setting this to <code>False</code> for any given job.</p>"},{"location":"release-notes/version-1.3.html#json-type-for-custom-fields-897","title":"JSON Type for Custom Fields (#897)","text":"<p>Custom fields can now have a type of \"json\". Fields of this type can be used to store arbitrary JSON data.</p>"},{"location":"release-notes/version-1.3.html#natural-indexing-for-common-lookups-1638","title":"Natural Indexing for Common Lookups (#1638)","text":"<p>Many fields have had indexing added to them as well as index togethers on <code>ObjectChange</code> fields. This should provide a noticeable performance improvement when filtering and doing lookups.</p> <p>Note</p> <p>This is going to perform several migrations to add all of the indexes. On MySQL databases and tables with 1M+ records this can take a few minutes. Every environment is different but it should be expected for this upgrade to take some time.</p>"},{"location":"release-notes/version-1.3.html#overlappingmultiple-nat-support-630","title":"Overlapping/Multiple NAT Support (#630)","text":"<p>IP addresses can now be associated with multiple outside NAT IP addresses. To do this, set more than one IP Address to have the same NAT inside IP address.</p> <p>A new version of the REST API <code>/api/ipam/ip-addresses/*</code> endpoints have been implemented as well, but by default this endpoint continues to demonstrate the pre-1.3 behavior unless the REST API client explicitly requests API <code>version=1.3</code>. See the section on REST API versioning, below, for more details.</p> <p>Note</p> <p>There are some guardrails on this feature to support backwards compatibility. If you consume the REST API without specifying the version header or query argument and start associating multiple IPs to have the same NAT inside IP address, an error will be reported, because the existing REST API schema returns <code>nat_outside</code> as a single object, where as 1.3 and beyond will return this as a list.</p>"},{"location":"release-notes/version-1.3.html#provider-network-model-724","title":"Provider Network Model (#724)","text":"<p>A data model has been added to support representing the termination of a circuit to an external provider's network.</p>"},{"location":"release-notes/version-1.3.html#python-310-support-1255","title":"Python 3.10 Support (#1255)","text":"<p>Python 3.10 is officially supported by Nautobot now, and we are building and publishing Docker images with Python 3.10 now.</p>"},{"location":"release-notes/version-1.3.html#regular-expression-support-in-api-filtering-1525","title":"Regular Expression Support in API Filtering (#1525)","text":"<p>New lookup expressions for using regular expressions to filter objects by string (char) fields in the API have been added to all core filters.</p> <p>The expressions <code>re</code> (regex), <code>nre</code> (negated regex), <code>ire</code> (case-insensitive regex), and <code>nire</code> (negated case-insensitive regex) lookup expressions are now dynamically-generated for filter fields inherited by subclasses of <code>nautobot.utilities.filters.BaseFilterSet</code>.</p>"},{"location":"release-notes/version-1.3.html#remove-stale-scheduled-jobs-2091","title":"Remove Stale Scheduled Jobs (#2091)","text":"<p>remove_stale_scheduled_jobs management command has been added to delete non-recurring scheduled jobs that were scheduled to run more than a specified days ago.</p>"},{"location":"release-notes/version-1.3.html#rest-api-token-provisioning-1374","title":"REST API Token Provisioning (#1374)","text":"<p>Nautobot now has an <code>/api/users/tokens/</code> REST API endpoint where a user can provision a new REST API token. This allows a user to gain REST API access without needing to first create a token via the web UI.</p> <pre><code>curl -X POST \\\n-H \"Accept: application/json; indent=4\" \\\n-u \"hankhill:I&lt;3C3H8\" \\\nhttps://nautobot/api/users/tokens/\n</code></pre> <p>This endpoint specifically supports Basic Authentication in addition to the other REST API authentication methods.</p>"},{"location":"release-notes/version-1.3.html#rest-api-versioning-1465","title":"REST API Versioning (#1465)","text":"<p>Nautobot's REST API now supports multiple versions, which may be requested by modifying the HTTP Accept header on any requests sent by a REST API client. Details are in the REST API documentation, but in brief:</p> <ul> <li>The REST API endpoints that are versioned in the 1.3.0 release are<ul> <li><code>/api/extras/jobs/</code> listing endpoint</li> <li><code>/api/extras/tags/</code> create/put/patch endpoints</li> <li>all <code>/api/ipam/ip-addresses/</code> endpoints</li> </ul> </li> <li>All other REST API endpoints are currently non-versioned. However, over time more versioned REST APIs will be developed, so this is important to understand for all REST API consumers.</li> <li>If a REST API client does not request a specific REST API version (in other words, requests <code>Accept: application/json</code> rather than <code>Accept: application/json; version=1.3</code>) the API behavior will be compatible with Nautobot 1.2, at a minimum for the remainder of the Nautobot 1.x release cycle.</li> <li>The API behavior may change to a newer default version in a Nautobot major release (such as 2.0).</li> <li>To request an updated (non-backwards-compatible) API endpoint, an API version must be requested corresponding at a minimum to the Nautobot <code>major.minor</code> version where the updated API endpoint was introduced (so to interact with the updated REST API endpoints mentioned above, <code>Accept: application/json; version=1.3</code>).</li> </ul> <p>Tip</p> <p>As a best practice, when developing a Nautobot REST API integration, your client should always request the current API version it is being developed against, rather than relying on the default API behavior (which may change with a new Nautobot major release, as noted, and which also may not include the latest and greatest API endpoints already available but not yet made default in the current release).</p>"},{"location":"release-notes/version-1.3.html#webhook-prepost-change-data-added-to-request-body-330","title":"Webhook Pre/Post-change Data Added to Request Body (#330)","text":"<p>Webhooks now provide a snapshot of data before and after a change, as well as the differences between the old and new data. See the default request body section in the webhook docs.</p>"},{"location":"release-notes/version-1.3.html#changed","title":"Changed","text":""},{"location":"release-notes/version-1.3.html#docker-images-now-default-to-python-37-1252","title":"Docker Images Now Default to Python 3.7 (#1252)","text":"<p>As Python 3.6 has reached end-of-life, the default Docker images published for this release (i.e. <code>1.3.0</code>, <code>stable</code>, <code>latest</code>) have been updated to use Python 3.7 instead.</p>"},{"location":"release-notes/version-1.3.html#job-approval-now-controlled-by-extrasapprove_job-permission-1490","title":"Job Approval Now Controlled By <code>extras.approve_job</code> Permission (#1490)","text":"<p>Similar to the existing <code>extras.run_job</code> permission, a new <code>extras.approve_job</code> permission is now enforced by the UI and the REST API when approving scheduled jobs. Only users with this permission can approve or deny approval requests; additionally such users also now require the <code>extras.view_scheduledjob</code>, <code>extras.change_scheduledjob</code>, and <code>extras.delete_scheduledjob</code> permissions as well.</p>"},{"location":"release-notes/version-1.3.html#openapi-30-rest-api-documentation-595","title":"OpenAPI 3.0 REST API documentation (#595)","text":"<p>The online REST API Swagger documentation (<code>/api/docs/</code>) has been updated from OpenAPI 2.0 format to OpenAPI 3.0 format and now supports Nautobot's REST API versioning as described above. Try <code>/api/docs/?api_version=1.3</code> as an example.</p>"},{"location":"release-notes/version-1.3.html#tag-restriction-by-content-type-872","title":"Tag restriction by content-type (#872)","text":"<p>When created, a <code>Tag</code> can be associated to one or more model content-types using a many-to-many relationship. The tag will then apply only to models belonging to those associated content-types.</p> <p>For users migrating from an earlier Nautobot release, any existing tags will default to being enabled for all content-types for compatibility purposes. Individual tags may subsequently edited to remove any content-types that they do not need to apply to.</p> <p>Note that a Tag created programmatically via the ORM without assigning any <code>content_types</code> will not be applicable to any model until content-types are assigned to it.</p>"},{"location":"release-notes/version-1.3.html#update-jinja2-to-3x-1474","title":"Update Jinja2 to 3.x (#1474)","text":"<p>We've updated the Jinja2 dependency from version 2.11 to version 3.0.3. This may affect the syntax of any <code>nautobot.extras.models.ComputedField</code> objects in your database... Specifically, the <code>template</code> attribute, which is parsed as a Jinja2 template. Please refer to Jinja2 3.0.x's release notes to check if any changes might be required in your computed fields' templates.</p>"},{"location":"release-notes/version-1.3.html#virtual-chassis-master-device-interfaces-list","title":"Virtual Chassis Master Device Interfaces List","text":"<p>The device column will now show on a device's interfaces list if this device is the master in a virtual chassis. And will conversely not appear if the device is not a master on a virtual chassis.</p> <p>It is no longer possible to connect an interface to itself in the cable connect form.</p>"},{"location":"release-notes/version-1.3.html#removed","title":"Removed","text":""},{"location":"release-notes/version-1.3.html#python-36-no-longer-supported-1268","title":"Python 3.6 No Longer Supported (#1268)","text":"<p>As Python 3.6 has reached end-of-life, and many of Nautobot's dependencies have already dropped support for Python 3.6 as a consequence, Nautobot 1.3 and later do not support installation under Python 3.6.</p>"},{"location":"release-notes/version-1.3.html#v1310-2022-08-08","title":"v1.3.10 (2022-08-08)","text":""},{"location":"release-notes/version-1.3.html#security","title":"Security","text":"<p>Important</p> <p>With introducing the <code>has_sensitive_variables</code> flag on Job classes and model (see: #2091), jobs can be prevented from storing their inputs in the database. Due to the nature of queuing or scheduling jobs, the desired inputs must be stored for future use.</p> <p>New safe-default behavior will only permit jobs to be executed immediately, as <code>has_sensitive_variables</code> defaults to <code>True</code>. This value can be overridden by the Job class itself or the Job model edit page. Values entered for jobs executing immediately go straight to the Celery message bus and are cleaned up on completion of execution.</p> <p>Scheduling jobs or requiring approval necessitates those values to be stored in the database until they have been sent to the Celery message bus for execution.</p> <p>During installation of <code>v1.3.10</code>, a migration is applied to set the <code>has_sensitive_variables</code> value to <code>True</code> to all existing Jobs. However to maintain backwards-compatibility, past scheduled jobs are permitted to keep their schedule. New schedules cannot be made until an administrator has overridden the <code>has_sensitive_variables</code> for the desired Job.</p> <p>A new management command exists (<code>remove_stale_scheduled_jobs</code>) which will aid in cleaning up schedules to past jobs which may still have sensitive data stored in the database. This command is not exhaustive nor intended to clean up sensitive values stored in the database. You should review the <code>extras_scheduledjob</code> table for any further cleanup.</p> <p>Note: Leveraging the Secrets and Secret Groups features in Jobs does not need to be considered a sensitive variable. Secrets are retrieved by reference at run time, which means no secret value is stored directly in the database.</p>"},{"location":"release-notes/version-1.3.html#added_1","title":"Added","text":"<ul> <li>#1226 - Added custom job intervals package management.</li> <li>#2073 - Added <code>--local</code> option to <code>nautobot-server runjob</code> command.</li> <li>#2080 - Added <code>--data</code> parameter to <code>nautobot-server runjob</code> command.</li> <li>#2091 - Added <code>remove_stale_scheduled_jobs</code> management command which removes all stale scheduled jobs and also added <code>has_sensitive_variables</code> field to Job model which prevents the job's input parameters from being saved to the database.</li> <li>#2143 - Scheduled Job detail view now includes details of any custom interval.</li> </ul>"},{"location":"release-notes/version-1.3.html#changed_1","title":"Changed","text":"<ul> <li>#2114 - Home page now redirects to the login page when <code>HIDE_RESTRICTED_UI</code> is enabled and user is not authenticated.</li> </ul>"},{"location":"release-notes/version-1.3.html#fixed","title":"Fixed","text":"<ul> <li>#1739 - Fixed paginator not enforcing <code>max_page_size</code> setting in web UI views.</li> <li>#2060 - Fixed relationship <code>peer_id</code> filter non-existent error on relationship association page.</li> <li>#2095 - Fixed health check failing with Redis Sentinel, TLS configuration.</li> </ul>"},{"location":"release-notes/version-1.3.html#dependencies","title":"Dependencies","text":"<ul> <li>#2115 - Patch updates to <code>mkdocs</code>, <code>svgwrite</code>.</li> </ul>"},{"location":"release-notes/version-1.3.html#housekeeping","title":"Housekeeping","text":"<ul> <li>#2025 - Tweak Renovate config for automated package management.</li> <li>#2119 - Fixed flaky integration test for cable connection UI.</li> </ul>"},{"location":"release-notes/version-1.3.html#v139-2022-07-25","title":"v1.3.9 (2022-07-25)","text":""},{"location":"release-notes/version-1.3.html#added_2","title":"Added","text":"<ul> <li>#1595 - Add ability to specify uWSGI buffer size via environment variable.</li> <li>#1757 - Added nullable face, position to Device bulk edit form to provided desired behavior to bulk assigning to a new rack.</li> </ul>"},{"location":"release-notes/version-1.3.html#changed_2","title":"Changed","text":"<ul> <li>#386 - Clarified messaging in API for rack position occupied.</li> <li>#1356 - Virtual chassis master device interface list is less confusing.</li> <li>#2045 - Clarified Job authoring around proper class inheritance.</li> </ul>"},{"location":"release-notes/version-1.3.html#fixed_1","title":"Fixed","text":"<ul> <li>#1035 - Fix assertion raised if SLAAC Status is missing when creating <code>IPAddress</code> objects</li> <li>#1694 - Fixed CablePath not found error when disconnects/delete action performed on a cable</li> <li>#1795 - Corrected relationship source/destination filter help text from queryset Filter to filterset Filter and updated documentations.</li> <li>#1839 - Fixed staff users with auth &gt; group permissions unable to view groups in admin UI.</li> <li>#1937 - Solved <code>_custom_field_data</code> do not fully delete when using CustomFieldBulkDeleteView.</li> <li>#1947 - Fixed unbound local error by initializing template variable before conditional logic statements.</li> <li>#2039 - Fixed IntegerVar with default set to 0 on Job evaluating to False.</li> <li>#2057 - Fixed RIR changelog route being in VRF name prefix.</li> <li>#2077 - Fixed an error when viewing object detail pages after uninstalling a plugin but still having RelationshipAssociations involving the plugin's models.</li> <li>#2081 - Fixed error raised if status connected not found when creating a cable</li> </ul>"},{"location":"release-notes/version-1.3.html#documentation","title":"Documentation","text":"<ul> <li>#860 - Added documentation that adding device component to device type does not modify existing device instances</li> <li>#2036 - Fixed outdated UI navigation references in documentation.</li> </ul>"},{"location":"release-notes/version-1.3.html#v138-2022-07-11","title":"v1.3.8 (2022-07-11)","text":""},{"location":"release-notes/version-1.3.html#security_1","title":"Security","text":"<p>Important</p> <p>CVE in Django versions <code>&gt;= 3.2, &lt; 3.2.14</code>. This update upgrades Django to <code>3.2.14</code>.</p> <ul> <li>#2004 - Bump Django from 3.2.13 to 3.2.14 for for CVE-2022-34265.</li> </ul>"},{"location":"release-notes/version-1.3.html#added_3","title":"Added","text":"<ul> <li>#1464 - Added \"Continue with SSO\" link on login page.</li> </ul>"},{"location":"release-notes/version-1.3.html#changed_3","title":"Changed","text":"<ul> <li>#1407 - Changed custom field export column headings to prefix with <code>cf_</code>.</li> <li>#1603 - Changed GraphQL schema generation to call time for GraphQL API.</li> </ul>"},{"location":"release-notes/version-1.3.html#fixed_2","title":"Fixed","text":"<ul> <li>#1838 - Fixed job result to show latest not oldest.</li> <li>#1874 - Fixed Git repo sync issue with Sentinel with deprecated <code>rq_count</code> check.</li> </ul>"},{"location":"release-notes/version-1.3.html#dependencies_1","title":"Dependencies","text":"<ul> <li>#2020 - Updated <code>celery &gt;= 5.2.7</code>, <code>django-jinja &gt;= 2.10.2</code>, and <code>mysqlclient &gt;= 2.1.1</code> versions in lock file (patch updates).</li> </ul>"},{"location":"release-notes/version-1.3.html#housekeeping_1","title":"Housekeeping","text":"<ul> <li>#1977 - Updated Renovate config to batch updates (additional PRs included to further refine config).</li> </ul>"},{"location":"release-notes/version-1.3.html#v137-2022-06-27","title":"v1.3.7 (2022-06-27)","text":""},{"location":"release-notes/version-1.3.html#added_4","title":"Added","text":"<ul> <li>#1900 - Added ability to filter Git repository table based on provided contents.</li> </ul>"},{"location":"release-notes/version-1.3.html#changed_4","title":"Changed","text":"<ul> <li>#1645 - Hide search bar for unauthenticated users if <code>HIDE_RESTRICTED_UI</code> is True</li> <li>#1946 - Increase character limit on <code>FileAttachment.mimetype</code> to 255 to allow for all mime types to be used.</li> </ul>"},{"location":"release-notes/version-1.3.html#fixed_3","title":"Fixed","text":"<ul> <li>#1677 - Fixed default values of custom fields on device components (such as Interface) not being applied upon Device creation.</li> <li>#1769 - Resolve missing menu 'General / Installed Plugins' in navbar if <code>HIDE_RESTRICTED_UI</code> is activated</li> <li>#1836 - Fixed incorrect pre-population of custom field filters in table views.</li> <li>#1870 - Fixed cable <code>_abs_length</code> validation error.</li> </ul>"},{"location":"release-notes/version-1.3.html#documentation_1","title":"Documentation","text":"<ul> <li>#1941 - Fixed uWSGI config example, development environment links in Docker section of docs.</li> </ul>"},{"location":"release-notes/version-1.3.html#housekeeping_2","title":"Housekeeping","text":"<ul> <li>#1896 - Added Renovate Bot configuration, targeting <code>next</code>.</li> <li>#1948 - Switched Renovate Bot configuration to bump lock-file only on patch releases instead of bumping in <code>pyproject.toml</code>.</li> </ul>"},{"location":"release-notes/version-1.3.html#v136-2022-06-13","title":"v1.3.6 (2022-06-13)","text":""},{"location":"release-notes/version-1.3.html#fixed_4","title":"Fixed","text":"<ul> <li>#1409 - Fixed page title on device status (NAPALM) page template.</li> <li>#1524 - Fixed valid \"None\" option removed from search field upon display.</li> <li>#1649 - Changed the incorrect view permission (<code>circuits.view_vrf</code> to <code>ipam.view_vrf</code>)</li> <li>#1750 - Fixed incorrect display of boolean value in Virtual Chassis display.</li> <li>#1759 - Fixed TypeError on webhook REST API PATCH.</li> <li>#1787 - Fix scheduled jobs failing when scheduled from REST API.</li> <li>#1841 - Fixed incorrect display of boolean values in Git Repository view.</li> <li>#1850 - Added <code>{{block.super}}</code> to negate the override from the js block in rack.html. This change fixed the issue of unable to navigate away from rack changelog tab.</li> </ul>"},{"location":"release-notes/version-1.3.html#documentation_2","title":"Documentation","text":"<ul> <li>#207 - Update permissions documentation to add assigning permissions section.</li> <li>#1763 - Job testing documentation updated to include details around enabling jobs. Job logs database added to <code>TransactionTestCase</code>.</li> <li>#1856 - Updated links to Slack community.</li> <li>#1868 - Updated link to advanced Docker compose use in getting started guide.</li> </ul>"},{"location":"release-notes/version-1.3.html#housekeeping_3","title":"Housekeeping","text":"<ul> <li>#1829 - Change Docker build GitHub Action to cache with matrix awareness.</li> <li>#1848 - Fix Poetry cache issue in CI causing version tests to fail in <code>next</code>.</li> </ul>"},{"location":"release-notes/version-1.3.html#v135-2022-05-30","title":"v1.3.5 (2022-05-30)","text":""},{"location":"release-notes/version-1.3.html#security_2","title":"Security","text":"<p>Attention</p> <p><code>PyJWT</code> - Nautobot does not directly depend on <code>PyJWT</code> so your upgrading Nautobot via <code>pip</code> or other package management tools may not pick up the patched version (we are not pinning this dependency). However some tools support an \"eager\" upgrade policy as an option. For example, <code>pip install --upgrade --upgrade-strategy eager nautobot</code> will upgrade Nautobot and all it's dependencies to their latest compatible version. This may not work for all use cases so it may be safer to update Nautobot then perform <code>pip install --upgrade PyJWT</code>.</p> <p>Docker containers published with this build will have PyJWT upgraded.</p> <ul> <li>#1808 - Bump PyJWT from 2.3.0 to 2.4.0</li> </ul>"},{"location":"release-notes/version-1.3.html#fixed_5","title":"Fixed","text":"<ul> <li>#895 - Fixed validation when creating <code>Interface</code> and <code>VMInterface</code> objects via the REST API while specifying <code>untagged_vlan</code> without <code>mode</code> also set in the payload. A 400 error will now be raised as expected.</li> <li>#1289 - Fixed issue where job result live pagination would reset to page 1 on refresh. The currently selected page will now persist until the job run completes.</li> <li>#1290 - Fix NAPALM enable password argument for devices using the eos NAPALM driver.</li> <li>#1427 - Fix NoReverseMatch exception when related views for <code>action_buttons</code> don't exist.</li> <li>#1428 - Fix IPAM prefix utilization sometimes showing greater than 100 percent for IPv4 prefixes.</li> <li>#1604 - Fix missing filter restriction enforcement on relationship association.</li> <li>#1771 - Fix exception raised for RelationshipAssociation when updating source.</li> <li>#1772 - Fix RelationshipAssociationSerializer not triggering model clean method.</li> <li>#1784 - Fix <code>nautobot-server dumpdata</code> not working due to <code>django_rq</code> update. Updated documentation.</li> </ul>"},{"location":"release-notes/version-1.3.html#documentation_3","title":"Documentation","text":"<ul> <li>#1606 - Added best practices for working with FilterSet classes to developer documentation.</li> <li>#1796 - Added documentation for using Git Repositories behind/via proxies.</li> </ul>"},{"location":"release-notes/version-1.3.html#housekeeping_4","title":"Housekeeping","text":"<ul> <li>#1805 - Fix git pre-commit hook incompatibility with dash shell and add warning on skipped tests.</li> <li>#1811 - Added developer Docker container for running mkdocs instead of locally.</li> <li>#1818 - Changed README.md to link to correct build status workflows.</li> </ul>"},{"location":"release-notes/version-1.3.html#v134-2022-05-16","title":"v1.3.4 (2022-05-16)","text":""},{"location":"release-notes/version-1.3.html#security_3","title":"Security","text":"<ul> <li>#1715 - Add <code>SANITIZER_PATTERNS</code> optional setting and <code>nautobot.utilities.logging.sanitize</code> function and use it for redaction of Job log entries.</li> </ul>"},{"location":"release-notes/version-1.3.html#added_5","title":"Added","text":"<ul> <li>#1766 - Added configuration for downloaded filename branding.</li> <li>#1752 - Added a new <code>SearchFilter</code> that is now used on all core filtersets to provide the <code>q=</code> search parameter for basic searching in list view of objects.</li> </ul>"},{"location":"release-notes/version-1.3.html#fixed_6","title":"Fixed","text":"<ul> <li>#1263 - Rack device image toggle added back to detail UI.</li> <li>#1449 - Fixed a performance bug in <code>/api/dcim/devices/</code> and <code>/api/virtualization/virtual-machines/</code> relating to configuration contexts.</li> <li>#1652 - Unicode now renders correctly on uses of json.dumps and yaml.dump throughout the code base.</li> <li>#1712 - Fixed circuit termination detail view getting 500 response when it's a provider network.</li> <li>#1755 - Fixed \"Select All\" helper widget from taking full UI height.</li> </ul>"},{"location":"release-notes/version-1.3.html#documentation_4","title":"Documentation","text":"<ul> <li>#1744 - Updated REST API token provisioning docs to include added in version.</li> <li>#1751 - Updated secrets documentation advisory notes.</li> <li>#1761 - Fixed typo in upgrading documentation.</li> </ul>"},{"location":"release-notes/version-1.3.html#v133-2022-05-02","title":"v1.3.3 (2022-05-02)","text":""},{"location":"release-notes/version-1.3.html#added_6","title":"Added","text":"<ul> <li>#1481 - Pre-Generate Docs, Add Support for Plugin-Provided Docs</li> <li>#1617 - Added <code>run_job_for_testing</code> helper method for testing Jobs in plugins, internally.</li> </ul>"},{"location":"release-notes/version-1.3.html#changed_5","title":"Changed","text":"<ul> <li>#1481 - Docs link in footer now opens link to bundled documentation instead of Read the Docs.</li> </ul>"},{"location":"release-notes/version-1.3.html#fixed_7","title":"Fixed","text":"<ul> <li>#473 - Fix <code>get_return_url</code> for plugin reverse URLs.</li> <li>#1430 - Fix not being able to print Job results, related IPs.</li> <li>#1503 - SSO users can no longer interact with or see the change password form.</li> <li>#1515 - Further fixes for slow/unresponsive jobs results display.</li> <li>#1538 - Fix incorrect page title alignment on the \"Device Type Import\" page.</li> <li>#1678 - Custom fields with 'json' type no longer raise TypeError when filtering on an object list URL</li> <li>#1679 - Fix a data migration error when upgrading to 1.3.x with pre-existing JobResults that reference Jobs with names exceeding 100 characters in length.</li> <li>#1692 - Fix duplicate tags in search list results.</li> <li>#1701 - Fix static file serving of drf-spectacular-sidecar assets when using alternative <code>STATICFILES_STORAGE</code> settings.</li> <li>#1705 - Fix <code>NestedVMInterfaceSerializer</code> referencing the wrong model.</li> </ul>"},{"location":"release-notes/version-1.3.html#dependencies_2","title":"Dependencies","text":"<ul> <li>#1680 - Bump netutils dependency to 1.1.0.</li> <li>#1700 - Revert vendoring <code>drf-spectacular</code>.</li> </ul>"},{"location":"release-notes/version-1.3.html#documentation_5","title":"Documentation","text":"<ul> <li>#1697 - Fix docs incorrectly stating Celery Redis URLs defaulting from CACHES.</li> </ul>"},{"location":"release-notes/version-1.3.html#housekeeping_5","title":"Housekeeping","text":"<ul> <li>#1685 - Fix Hadolint issue of <code>docker/Dockerfile</code>.</li> </ul>"},{"location":"release-notes/version-1.3.html#v132-2022-04-22","title":"v1.3.2 (2022-04-22)","text":""},{"location":"release-notes/version-1.3.html#security_4","title":"Security","text":"<p>Important</p> <p>Critical CVEs in Django versions <code>&gt;= 3.2, &lt; 3.2.13</code>. This update upgrades Django to <code>3.2.13</code>.</p> <ul> <li>#1686 - Implemented fixes for CVE-2022-28347 and CVE-2022-28346 to require Django &gt;=3.2.13.</li> </ul>"},{"location":"release-notes/version-1.3.html#added_7","title":"Added","text":"<ul> <li>#1219 - Add ARM64 support (alpha).</li> </ul>"},{"location":"release-notes/version-1.3.html#changed_6","title":"Changed","text":"<ul> <li>#1670 - Configure drf-spectacular schema to more closely match drf-yasg (related to: nautobot-ansible#135).</li> </ul>"},{"location":"release-notes/version-1.3.html#fixed_8","title":"Fixed","text":"<ul> <li>#1682 - Fixed Nautobot health checks failing if Redis Sentinel password is required.</li> </ul>"},{"location":"release-notes/version-1.3.html#documentation_6","title":"Documentation","text":"<ul> <li>#1426 - Added plugin development documentation around using ObjectListView.</li> <li>#1659 - Added some missing test/lint commands to the development getting-started documentation, and made <code>invoke cli</code> parameters match <code>invoke start/stop</code>.</li> <li>#1666 - Fixed errors in documentation with incomplete import statements.</li> <li>#1667 - Updated README.md screenshots.</li> </ul>"},{"location":"release-notes/version-1.3.html#housekeeping_6","title":"Housekeeping","text":"<ul> <li>#1674 - Added flag in Dockerfile, tasks.py to enable Poetry install parallelization.</li> </ul>"},{"location":"release-notes/version-1.3.html#v131-2022-04-19","title":"v1.3.1 (2022-04-19)","text":""},{"location":"release-notes/version-1.3.html#changed_7","title":"Changed","text":"<ul> <li>#1647 - Changed class inheritance of JobViewSet to be simpler and more self-consistent.</li> </ul>"},{"location":"release-notes/version-1.3.html#fixed_9","title":"Fixed","text":"<ul> <li>#1278 - Fixed several different errors that could be raised when working with RelationshipAssociations.</li> <li>#1662 - Fixed <code>nat_outside</code> prefetch on Device API view, and displaying multiple <code>nat_outside</code> entries on VM detail view.</li> </ul>"},{"location":"release-notes/version-1.3.html#v130-2022-04-18","title":"v1.3.0 (2022-04-18)","text":""},{"location":"release-notes/version-1.3.html#added_8","title":"Added","text":"<ul> <li>#630 - Added support for multiple NAT outside IP addresses.</li> <li>#872 - Added ability to scope tags to content types.</li> <li>#896 - Implemented support for Dynamic Groups objects.</li> <li>#897 - Added JSON type for custom fields.</li> <li>#1374 - Added REST API Token Provisioning. (Port of NetBox #6592 and subsequent fixes)</li> <li>#1465 - Implemented REST API versioning.</li> <li>#1525 - Implemented support for regex lookup expressions for <code>BaseFilterSet</code> filter fields in the API.</li> <li>#1638 - Implemented numerous indexes on models natural lookup fields as well as some index togethers for <code>ObjectChange</code>.</li> </ul>"},{"location":"release-notes/version-1.3.html#changed_8","title":"Changed","text":"<ul> <li>#595 - Migrated from <code>drf-yasg</code> (OpenAPI 2.0) to <code>drf-spectacular</code> (OpenAPI 3.0) for REST API interactive Swagger documentation.</li> <li>#792 - Poetry-installed dependencies are now identical between <code>dev</code> and <code>final</code> images.</li> <li>#1225 - Relaxed uniqueness constraint on Webhook creation, allowing multiple webhooks to send to the same target address so long as their content-type(s) and action(s) do not overlap.</li> <li>#1478 - ScheduledJob REST API endpoints now enforce <code>extras.approve_job</code> permissions as appropriate.</li> <li>#1502 Finalized Dynamic Groups implementation for 1.3 release (including documentation and integration tests).</li> <li>#1521 - Consolidated Job REST API endpoints, taking advantage of REST API versioning.</li> </ul>"},{"location":"release-notes/version-1.3.html#fixed_10","title":"Fixed","text":"<ul> <li>#794 - Fixed health check issue when using Redis Sentinel for caching with Cacheops. The Redis health check backend is now aware of Redis Sentinel.</li> <li>#1311 - Fixed where it was not possible to set the rack height to <code>0</code> when performing a bulk edit of device types.</li> <li>#1476 - Fixed a bug wherein a Job run via the REST API with a missing <code>schedule</code> would allow <code>approval_required</code> to be bypassed.</li> <li>#1504 - Fixed an error that could be encountered when migrating from Nautobot 1.1 or earlier with JobResults with very long log entries.</li> <li>#1515 - Fix Job Result rendering performance issue causing Bad Gateway errors.</li> <li>#1562 - Fixed JobResult filter form UI pointing to the wrong endpoint.</li> <li>#1563 - Fixed UI crash when trying to execute Jobs provided by disabled plugins. A friendly error message will now be displayed.</li> <li>#1582 - Fixed a timing issue with editing a record while its custom field(s) are in the process of being cleaned up by a background task.</li> <li>#1632 - Fixed issue accessing request attributes when request may be None.</li> <li>#1637 - Fixed warnings logged during REST API schema generation.</li> </ul>"},{"location":"release-notes/version-1.3.html#documentation_7","title":"Documentation","text":"<ul> <li>#814 - Extended documentation for configuring Celery for use Redis Sentinel clustering.</li> <li>#1479 - Updated Jobs documentation regarding the concrete Job database model.</li> <li>#1556 - Cleaned up typos and formatting issues across docs, few code spots.</li> </ul>"},{"location":"release-notes/version-1.3.html#housekeeping_7","title":"Housekeeping","text":"<ul> <li>#1385 - Added MarkdownLint validation and enforcement to CI.</li> <li>#1417 - CI scope improvements for streamlined performance.</li> <li>#1516 - Fixed MySQL unit tests running in Docker environment and revised recommended MySQL encoding settings.</li> </ul>"},{"location":"release-notes/version-1.3.html#v130b1-2022-03-11","title":"v1.3.0b1 (2022-03-11)","text":""},{"location":"release-notes/version-1.3.html#added_9","title":"Added","text":"<ul> <li>#5 - Added the option to perform a \"dry run\" of Git repository syncing.</li> <li>#330 - Added pre-/post-change data to WebHooks leveraging snapshots.</li> <li>#498 - Added custom-validator support to the RelationshipAssociation model.</li> <li>#724 - Added Provider Network data model. (Partially based on NetBox #5986.)</li> <li>#795 - Added ability to filter objects missing custom field values by using <code>null</code>.</li> <li>#803 - Added a <code>render_boolean</code> template filter, which renders computed boolean values as HTML in a consistent manner.</li> <li>#863 - Added the ability to hide a job in the UI by setting <code>hidden = True</code> in the Job's inner <code>Meta</code> class.</li> <li>#881 - Improved the UX of the main Jobs list by adding accordion style interface that can collapse/expand jobs provided by each module.</li> <li>#885 - Added the ability to define a <code>soft_time_limit</code> and <code>time_limit</code> in seconds as attributes of a Job's <code>Meta</code>.</li> <li>#894 - Added the ability to view computed fields in an object list.</li> <li>#898 - Added support for moving a CustomField, Relationship or ComputedField from the main tab of an object's detail page in the UI to the \"Advanced\" tab.</li> <li>#1001 - Added Job database model and associated functionality.</li> <li>#1109 - Added pagination support for GraphQL list queries.</li> <li>#1255 - Added Python 3.10 support.</li> <li>#1350 - Added missing methods on Circuit Termination detail view.</li> <li>#1411 - Added concrete Job database model; added database signals to populate Job records in the database; added detail, edit, and delete views for Job records.</li> <li>#1457 - Added new Jobs REST API, added control logic to use JobModel rather than JobClass where appropriate; improved permissions enforcement for Jobs.</li> <li>#1470 - Added plugin framework for extending FilterSets and Filter Forms.</li> </ul>"},{"location":"release-notes/version-1.3.html#changed_9","title":"Changed","text":"<ul> <li>#368 - Added <code>nautobot.extras.forms.NautobotModelForm</code> and <code>nautobot.extras.filters.NautobotFilterSet</code> base classes. All form classes which inherited from all three of (<code>BootstrapMixin</code>, <code>CustomFieldModelForm</code>, and <code>RelationshipModelForm</code>) now inherit from <code>NautobotModelForm</code> as their base class. All filterset classes which inherited from all three of (<code>BaseFilterSet</code>, <code>CreatedUpdatedFilterSet</code>, and <code>CustomFieldModelFilterSet</code>) now inherit from <code>NautobotFilterSet</code> as their base class.</li> <li>#591 - All uses of <code>type()</code> are now refactored to use <code>isinstance()</code> where applicable.</li> <li>#880 - Jobs menu items now form their own top-level menu instead of a sub-section under the Extensibility menu.</li> <li>#909 - Device, InventoryItem, and Rack serial numbers can now be up to 255 characters in length.</li> <li>#916 - A <code>Job.Meta.description</code> can now contain markdown-formatted multi-line text.</li> <li>#1107 - Circuit Provider account numbers can now be up to 100 characters in length.</li> <li>#1252 - As Python 3.6 has reached end-of-life, the default Docker images published for this release (i.e. <code>1.3.0</code>, <code>stable</code>, <code>latest</code>) have been updated to use Python 3.7 instead.</li> <li>#1367 - Extracted Job-related models to submodule <code>nautobot.extras.models.jobs</code>; refined Job testing best practices.</li> </ul>"},{"location":"release-notes/version-1.3.html#removed_1","title":"Removed","text":"<ul> <li>#1268 - Drop Support for Python 3.6.</li> </ul>"},{"location":"release-notes/version-1.3.html#fixed_11","title":"Fixed","text":"<ul> <li>#1440 - Handle models missing serializer methods, dependent from adding pre-/post-change data to WebHooks.</li> </ul>"},{"location":"release-notes/version-1.3.html#dependencies_3","title":"Dependencies","text":"<ul> <li>#1277 - Updated Django dependency to 3.2.X LTS.</li> <li>#1307 - Updated various Python package dependencies to their latest compatible versions.</li> <li>#1321 - Updates to various browser package dependencies. This includes updating from Material Design Icons 5.x to 6.x, which has a potential impact on plugins: a small number of icons have been removed or renamed as a result of this change.</li> <li>#1391 - Updated Jinja2 dependency to 3.0.X.</li> <li>#1435 - Update to Selenium 4.X.</li> </ul>"},{"location":"release-notes/version-1.3.html#housekeeping_8","title":"Housekeeping","text":"<ul> <li>#443 - The provided \"Dummy Plugin\" has been renamed to \"Example Plugin\".</li> <li>#1314 - Updated various development-only Python package dependencies to their latest compatible versions.</li> </ul>"},{"location":"release-notes/version-1.4.html","title":"Version 1.4","text":""},{"location":"release-notes/version-1.4.html#nautobot-v14","title":"Nautobot v1.4","text":"<p>This document describes all new features and changes in Nautobot 1.4.</p> <p>If you are a user migrating from NetBox to Nautobot, please refer to the \"Migrating from NetBox\" documentation.</p>"},{"location":"release-notes/version-1.4.html#release-overview","title":"Release Overview","text":""},{"location":"release-notes/version-1.4.html#added","title":"Added","text":""},{"location":"release-notes/version-1.4.html#custom-field-extended-filtering-1498","title":"Custom Field Extended Filtering (#1498)","text":"<p>Objects with custom fields now support filter lookup expressions for filtering by custom field values, such as <code>cf_date_field__gte=2022-08-11</code> to select objects whose <code>date_field</code> custom field has a date of 2022-08-11 or later.</p>"},{"location":"release-notes/version-1.4.html#custom-field-slugs-1962","title":"Custom Field Slugs (#1962)","text":"<p>Custom fields now have a distinct <code>slug</code> field. The custom field <code>name</code> attribute should be considered deprecated, and will be removed in a future major release (see also #824.) Additionally, the <code>label</code> attribute, while currently optional in the database, will become mandatory in that same future release as a consequence. When migrating from an earlier Nautobot release to version 1.4 or later, the <code>slug</code> and <code>label</code> for all existing custom fields will be automatically populated if not previously defined.</p> <p>A new version of the <code>/api/extras/custom-fields/</code> REST API endpoints has been implemented. By default this endpoint continues to demonstrate the pre-1.4 behavior (<code>name</code> required, <code>slug</code> and <code>label</code> optional; if unspecified, the <code>slug</code> and <code>label</code> will receive default values based on the provided <code>name</code>). A REST API client can request API version 1.4, in which case the updated API will require <code>slug</code> and <code>label</code> parameters in place of <code>name</code>.</p> <p>Additionally, REST API serialization of custom field data is itself now versioned. For all object endpoints that include custom field data under the <code>custom_fields</code> key, REST API versions 1.3 and earlier will continue the previous behavior of indexing the <code>custom_fields</code> dictionary by fields' <code>name</code> values, but when REST API version 1.4 or later is requested, the <code>custom_fields</code> data will be indexed by <code>slug</code> instead.</p> <p>For technical reasons of backwards-compatibility, the database (ORM) and GraphQL interfaces continue to access and store object custom field data exclusively under the <code>name</code> key; this will change to use the <code>slug</code> in a future major release. Again, watch #824 for plans in that regard.</p>"},{"location":"release-notes/version-1.4.html#custom-tabs-in-object-detail-views-1000","title":"Custom Tabs in Object Detail Views (#1000)","text":"<p>A plugin may now define extra tabs which will be appended to the object view's list of tabs.</p> <p>You can refer to the plugin development guide on how to add tabs to existing object detail views.</p>"},{"location":"release-notes/version-1.4.html#custom-template-css-html-javascript-on-job-forms-1865","title":"Custom Template (CSS, HTML, JavaScript) on Job Forms (#1865)","text":"<p>Jobs can now specify a <code>template_name</code> property and provide a custom template with additional JavaScript and CSS to help with user input on the Job submission form.</p> <p>You can refer to the Job class metadata attribute documentation on how to build and define this template.</p>"},{"location":"release-notes/version-1.4.html#dynamic-groups-support-additional-models-2200","title":"Dynamic Groups Support Additional Models (#2200)","text":"<p>Cluster, IP Address, Prefix, and Rack models can now be filtered on in Dynamic Groups and can also support nested or groups of Dynamic Groups. Some fields have been excluded from filtering until a sensible widget can be provided.</p>"},{"location":"release-notes/version-1.4.html#dark-mode-ui-729","title":"Dark Mode UI (#729)","text":"<p>Nautobot's UI now supports dark mode, both explicitly and via browser preference selection.</p> <p>The \"Theme\" link in the footer provides a modal popup to select the preferred theme. This preference is saved per browser via <code>localStorage</code>.</p>"},{"location":"release-notes/version-1.4.html#improved-filter-coverage-for-dcim-and-virtualization-models","title":"Improved Filter Coverage for DCIM and Virtualization Models","text":"<ul> <li>DCIM: #1729</li> <li>Virtualization: #1735</li> </ul> <p>The DCIM, Virtualization FilterSets have been updated with over 150 new filters, including hybrid filters that support filtering on both <code>pk</code> and <code>slug</code> (or <code>pk</code> and <code>name</code> where <code>slug</code> is not available). A new filter class <code>NaturalKeyOrPKMultipleChoiceFilter</code> was added to <code>nautobot.utilities.filters</code> to support filtering on multiple fields of a related object.</p> <p>Please see the documentation on best practices for mapping model fields to filters for more information.</p>"},{"location":"release-notes/version-1.4.html#job-hooks-1878","title":"Job Hooks (#1878)","text":"<p>Jobs can now be configured to run automatically when a change event occurs on a Nautobot object. Job hooks associate jobs to content types and actions to run jobs when a create, update or delete action occurs on the selected content type. A new job base class <code>JobHookReceiver</code> was introduced that jobs must subclass to be associated with a job hook.</p> <p>Please see the documentation on Job Hooks for more information.</p>"},{"location":"release-notes/version-1.4.html#job-re-runs-1875","title":"Job Re-Runs (#1875)","text":"<p>JobResult records now save the arguments with which the Job was called, allowing for easy re-execution of the Job with the same arguments as before. A \"re-run\" button has been added to the JobResult list view and detail view.</p>"},{"location":"release-notes/version-1.4.html#location-data-model-1052","title":"Location Data Model (#1052)","text":"<p>To locate network information more precisely than a Site defines, you can now define a hierarchy of Location Types (for example, <code>Building</code> \u2190 <code>Floor</code> \u2190 <code>Room</code>) and then create Locations corresponding to these types within each Site. Data objects such as devices, prefixes, VLAN groups, etc. can thus be mapped or assigned to Location representing a specific building, wing, floor, room, etc. as appropriate to your needs.</p> <p>Info</p> <p>At present, Locations fill the conceptual space between the more abstract Region and Site models and the more concrete Rack Group model. In a future Nautobot release, some or all of these other models may be collapsed into Locations. That is to say, in the future you might not deal with Regions and Sites as distinct models, but instead your Location Type hierarchy might include these higher-level categories, becoming something like Country \u2190 City \u2190 Site \u2190 Building \u2190 Floor \u2190 Room.</p>"},{"location":"release-notes/version-1.4.html#parent-interfaces-and-bridge-interfaces-1455","title":"Parent Interfaces and Bridge Interfaces (#1455)","text":"<p>Interface and VMInterface models now have <code>parent_interface</code> and <code>bridge</code> keys. An interface of type <code>Virtual</code> can now associate to a parent physical interface on the same device, virtual chassis, or virtual machine, and an interface of any type can specify another interface as its associated bridge interface. (A new <code>Bridge</code> interface type has also been added, but the <code>bridge</code> interface property is not restricted to interfaces of this type.)</p>"},{"location":"release-notes/version-1.4.html#rackview-ui-add-option-to-truncate-device-name-1119","title":"Rackview UI - Add Option to Truncate Device Name (#1119)","text":"<p>Users can now toggle device full name and truncated name in the rack elevation view. The truncating function is customizable in <code>nautobot_config.py</code> via defining <code>UI_RACK_VIEW_TRUNCATE_FUNCTION</code>. Default behavior is to split on <code>.</code> and return the first item in the list.</p> <p>\"Save SVG\" link presents the same view as what is currently displayed on screen</p> <p>Current preferred toggle state is preserved across tabs (requires refresh) and persists in-browser until local storage is cleared. This presents a consistent behavior when browsing between multiple racks.</p>"},{"location":"release-notes/version-1.4.html#rest-api-enhancements-1463","title":"REST API Enhancements (#1463)","text":"<ul> <li>For all models that support Relationships, their corresponding list and detail REST API endpoints now include the option to include data on their associated Relationships and related objects by specifying <code>include=relationships</code> as a query parameter.</li> <li>Relationship associations on a model can be edited by a PATCH to the appropriate nested value, such as <code>\"relationships\" -&gt; &lt;relationship-slug&gt; -&gt; \"source\"</code> or <code>\"relationships\" -&gt; &lt;relationship-slug&gt; -&gt; \"destination\"</code>.</li> <li>For implementers of REST API serializers (core and/or plugins), a new <code>nautobot.extras.api.serializers.NautobotModelSerializer</code> base class has been added. Using this class guarantees support for relationships, custom fields, and computed fields on the serializer, and provides for a streamlined developer experience.</li> </ul>"},{"location":"release-notes/version-1.4.html#status-field-on-interface-vminterface-models-984","title":"Status Field on Interface, VMInterface Models (#984)","text":"<p>Interface and VMInterface models now support a status. Default statuses that are available to be set are: Active, Planned, Maintenance, Failed, and Decommissioned. During migration all existing interfaces will be set to the status of \"Active\".</p> <p>A new version of the <code>/dcim/interfaces/*</code> REST API endpoints have been implemented. By default this endpoint continues to demonstrate the pre-1.4 behavior unless the REST API client explicitly requests API version=1.4. If you continue to use the pre-1.4 API endpoints, status is defaulted to \"Active\".</p> <p>Visit the documentation on REST API versioning for more information on using the versioned APIs.</p>"},{"location":"release-notes/version-1.4.html#nautobotuiviewset-1812","title":"NautobotUIViewSet (#1812)","text":"<p>New in Nautobot 1.4 is the debut of <code>NautobotUIViewSet</code>: A powerful plugin development tool that can save plugin developer hundreds of lines of code compared to using legacy <code>generic.views</code>. Using it to gain access to default functionalities previous provided by <code>generic.views</code> such as <code>create()</code>, <code>bulk_create()</code>, <code>update()</code>, <code>partial_update()</code>, <code>bulk_update()</code>, <code>destroy()</code>, <code>bulk_destroy()</code>, <code>retrieve()</code> and <code>list()</code> actions.</p> <p>Note that this ViewSet is catered specifically to the UI, not the API.</p> <p>Concrete examples on how to use <code>NautobotUIViewSet</code> resides in <code>nautobot.circuits.views</code>.</p> <p>Please visit the plugin development guide on <code>NautobotViewSet</code> for more information.</p>"},{"location":"release-notes/version-1.4.html#notes-767","title":"Notes (#767)","text":"<p>Primary and Organizational models now support notes. A notes tab has been added to the Object Detail view for all models that inherit the Primary or Organizational base abstract models.</p> <p>Warning</p> <p>Any plugin that inherits from one of these two models and uses the <code>ViewTestCases.PrimaryObjectViewTestCase</code> or <code>ViewTestCases.OrganizationalObjectViewTestCase</code> for their test will need to add the <code>NotesObjectView</code> to the objects URLs.</p> <p>Notes can also be used via the REST API at endpoint <code>/api/extras/notes/</code> or per object detail endpoint at the object's nested <code>/notes/</code> endpoint.</p> <p>Info</p> <p>For implementers of REST API views (core and/or plugins), a new <code>nautobot.extras.api.views.NautobotModelViewSet</code> base class has been added. Use of this class ensures that all features from <code>PrimaryModel</code> or <code>OrganizationalModel</code> are accessible through the API. This includes custom fields and notes.</p> <p>Please see the on plugin development guide on Notes for more details.</p>"},{"location":"release-notes/version-1.4.html#changed","title":"Changed","text":""},{"location":"release-notes/version-1.4.html#dynamic-groups-of-dynamic-groups-1614","title":"Dynamic Groups of Dynamic Groups (#1614)","text":"<p>Dynamic Groups may now be nested in parent/child relationships. The Dynamic Group edit view now has a \"Child Groups\" tab that allows one to make other Dynamic Groups of the same content type children of the parent group. Any filters provided by the child groups are used to filter the members from the parent group using one of three operators: \"Restrict (AND)\", \"Include (OR)\", or \"Exclude (NOT)\". This allows for logical parenthetical grouping of nested groups by the operator you choose for that child group association to the parent.</p> <p>Warning</p> <p>The default behavior of Dynamic Groups with an empty filter (<code>{}</code>) has been inverted to include all objects matching the content type by default instead of matching no objects. This was necessary to implement the progressive layering of child filters similarly to how we use filters to reduce desired objects from basic list view filters.</p> <p>Please see the greatly-expanded documentation on Dynamic Groups for more information.</p>"},{"location":"release-notes/version-1.4.html#renamed-mixin-classes-2135","title":"Renamed Mixin Classes (#2135)","text":"<p>A number of mixin classes have been renamed for improved self-consistency and clarity of usage. The former names of these mixins are still available for now as aliases, but inheriting from these mixins will raise a <code>DeprecationWarning</code>, and these aliases will be removed in a future major release.</p> Former Name New Name <code>AddRemoveTagsForm</code> <code>TagsBulkEditFormMixin</code> <code>CustomFieldBulkCreateForm</code> <code>CustomFieldModelBulkEditFormMixin</code> <code>CustomFieldBulkEditForm</code> <code>CustomFieldModelBulkEditFormMixin</code> <code>CustomFieldFilterForm</code> <code>CustomFieldModelFilterFormMixin</code> <code>CustomFieldModelForm</code> <code>CustomFieldModelFormMixin</code> <code>RelationshipModelForm</code> <code>RelationshipModelFormMixin</code> <code>StatusBulkEditFormMixin</code> <code>StatusModelBulkEditFormMixin</code> <code>StatusFilterFormMixin</code> <code>StatusModelFilterFormMixin</code>"},{"location":"release-notes/version-1.4.html#strict-filter-validation-by-default-1736","title":"Strict Filter Validation by Default (#1736)","text":"<p>Filtering of object lists in the UI and in the REST API will now report an error if an unknown or unrecognized filter parameter is specified. This is a behavior change from previous Nautobot releases, in which unknown filter parameters would be silently discarded and ignored.</p> <p>A new configuration setting, <code>STRICT_FILTERING</code> has been added. It defaults to <code>True</code>, enabling strict validation of filter parameters, but can be set to <code>False</code> to disable this validation.</p> <p>Warning</p> <p>Setting <code>STRICT_FILTERING</code> to <code>False</code> can result in unexpected filtering results in the case of user error, for example a request to <code>/api/dcim/devices/?has_primry_ip=false</code> (note the typo <code>primry</code>) will result in a list of all devices, rather than the intended list of only devices that lack a primary IP address. In the case of Jobs or external automation making use of such a filter, this could have wide-ranging consequences.</p>"},{"location":"release-notes/version-1.4.html#moved-registry-template-context-1945","title":"Moved Registry Template Context (#1945)","text":"<p>The <code>settings_and_registry</code> default context processor was changed to purely <code>settings</code> - the (large) Nautobot application registry dictionary is no longer provided as part of the render context for all templates by default. Added a new <code>registry</code> template tag that can be invoked by specific templates to provide this variable where needed.</p>"},{"location":"release-notes/version-1.4.html#v1410-2022-11-07","title":"v1.4.10 (2022-11-07)","text":""},{"location":"release-notes/version-1.4.html#changed_1","title":"Changed","text":"<ul> <li>#2758 - Changed console logging back to disabled by default when running <code>nautobot-server test ...</code>.</li> </ul>"},{"location":"release-notes/version-1.4.html#fixed","title":"Fixed","text":"<ul> <li>#2755 - Fixed incorrect file permissions on <code>/opt/nautobot/nautobot_config.py</code> in <code>final</code> Docker images.</li> </ul>"},{"location":"release-notes/version-1.4.html#v149-2022-11-04","title":"v1.4.9 (2022-11-04)","text":""},{"location":"release-notes/version-1.4.html#added_1","title":"Added","text":"<ul> <li>#1720 - Added NullableDateField to enable Date Type CustomField to filter on null value.</li> </ul>"},{"location":"release-notes/version-1.4.html#changed_2","title":"Changed","text":"<ul> <li>#2669 - Blocked changing the parent of a LocationType when it already has Locations using it.</li> <li>#2671 - Changed the published <code>nautobot-dev</code> images to use the same default <code>nautobot_config.py</code> as the published <code>nautobot</code> images, instead of using the Nautobot core development <code>nautobot_config.py</code> file.</li> </ul>"},{"location":"release-notes/version-1.4.html#fixed_1","title":"Fixed","text":"<ul> <li>#2406 - Fixed missing HTML element ID for hyperlinks.</li> <li>#2419 - Fixed the null device interface status when a device is created with a device_role associated to an InterfaceTemplate.</li> <li>#2552 - Updated CSS to better account for footer resizing.</li> <li>#2601 - Fixed an issue where a Git repository could provide Jobs even if not marked as a provider of Jobs.</li> <li>#2683 - Fixed so that unauthenticated users don't see the version number for Nautobot in the footer.</li> <li>#2684 - Fixed \"The results could not be loaded\" when filtering <code>ContentTypes</code> in the UI.</li> <li>#2688 - Fixed exception not raised when the interface contains a tagged vlan but mode is not set to tagged.</li> <li>#2702 - Fixed NautobotUIViewSet BulkCreateViewMixin validation error handling and .csv file import issue.</li> <li>#2706 - Fixed a ValidationError that could occur when specifying Site latitude/longitude as a float.</li> <li>#2717 - Fixed backwards-compatibility with changes made to <code>TreeNodeMultipleChoiceFilter</code>.</li> <li>#2733 - Fixed bug in <code>run_job_for_testing</code> when no request is provided.</li> </ul>"},{"location":"release-notes/version-1.4.html#documentation","title":"Documentation","text":"<ul> <li>#2658 - Updated plugin development documentation to introduce <code>NautobotUIViewSet</code> as the first approach for the <code>Adding Web UI Views</code> section.</li> <li>#2712 - Updated docs links to include the <code>/projects/core</code> in the url path to link correctly.</li> </ul>"},{"location":"release-notes/version-1.4.html#housekeeping","title":"Housekeeping","text":"<ul> <li>#2671 - Renamed <code>development/docker-compose.build.yml</code> to <code>development/docker-compose.final.yml</code> to better reflect its meaning.</li> <li>#2671 - Changed the image labels used in the docker-compose development workflow to reduce ambiguity.</li> <li>#2682 - Fixed test failing when version number contains alpha characters.</li> <li>#2685 - Added watchdog dev-dependency explicitly.</li> <li>#2685 - Added watchmedo command to worker container to allow container to restart on file change and documented.</li> <li>#2736 - Fixed incorrect <code>site_url</code> setting for MkDocs.</li> </ul>"},{"location":"release-notes/version-1.4.html#v148-2022-10-31","title":"v1.4.8 (2022-10-31)","text":""},{"location":"release-notes/version-1.4.html#security","title":"Security","text":"<ul> <li>#2651 - Updated <code>Django</code> minimum version to 3.2.16 due to CVE-2022-41323.</li> </ul>"},{"location":"release-notes/version-1.4.html#added_2","title":"Added","text":"<ul> <li>#2086 - Added JobResult export feature.</li> <li>#2578 - Added support for the documented environment variables in Nautobot's base <code>settings.py</code>, so that they will be recognized even when using a minimal <code>nautobot_config.py</code> or one that was not generated by <code>nautobot-server init</code>.</li> <li>#2578 - Added documentation of more configuration options in the configuration that is generated by <code>nautobot-server init</code>.</li> <li>#2675 - Added the ability to configure Redis Unix socket connections.</li> </ul>"},{"location":"release-notes/version-1.4.html#changed_3","title":"Changed","text":"<ul> <li>#2578 - Updated defaults in <code>settings.py</code> to more closely align to the documentation. If you're using a configuration file generated by <code>nautobot-server init</code>, these changes should have no impact, but if you have a manually crafted configuration file, please verify that the configuration of your system is still as expected after upgrading, with a particular focus on the database configuration, <code>SECRET_KEY</code>, and <code>LOGGING</code>.</li> <li>#2578 - Changed the default <code>LOGGING</code> configuration for virtualenv installs to be the same as it is for Nautobot's published Docker images.</li> <li>#2578 - Revised the template for new configurations generated by <code>nautobot-server init</code> to have less redundancy with Nautobot's built-in <code>settings.py</code>.</li> </ul>"},{"location":"release-notes/version-1.4.html#fixed_2","title":"Fixed","text":"<ul> <li>#2099 - Fixed PowerFeed Utilization on Rack View not displaying correctly.</li> <li>#2099 - Fixed Total Power Utilization on Rack View not taking into account direct-connected devices.</li> <li>#2099 - Fixed <code>created_updated</code> template adding the end small tag twice.</li> <li>#2146 - Added signals to log when a user logs in and logs out to fix a bug where SSO logins were not being logged.</li> <li>#2426 - Fixed weekly scheduled job executing a day early.</li> <li>#2489 - Fixed custom field regex validation always anchored to beginning of string.</li> <li>#2494 - Fixed custom field regex validation not being enforced on URL custom fields.</li> <li>#2513 - Fixed an issue with <code>DynamicGroup</code> not properly filtering by <code>Region</code> or <code>Location</code>.</li> <li>#2578 - Fixed issue where the documented environment variables for various configuration settings would not be supported if using a minimal <code>nautobot_config.py</code> that was not generated from <code>nautobot-server init</code>.</li> <li>#2632 - Fixed incorrect link from Circuit Type detail view to filtered Circuits table.</li> <li>#2652 - Fixed the issue with Job ObjectChange and Notes not displaying the page header.</li> <li>#2655 - Fixed error when selecting a \"related path\" from the Cable Trace view.</li> <li>#2693 - Fixed filtering by tree node objects in nested Dynamic Groups.</li> </ul>"},{"location":"release-notes/version-1.4.html#dependencies","title":"Dependencies","text":"<ul> <li>#2585 - Updated dependency <code>django-health-check</code> from 3.16.5 to 3.16.7.</li> <li>#2585 - Updated dependency <code>psycopg2-binary</code> from 2.9.3 to 2.9.4.</li> </ul>"},{"location":"release-notes/version-1.4.html#documentation_1","title":"Documentation","text":"<ul> <li>#2578 - Added a warning in the documentation about django-cryptography and changing <code>SECRET_KEY</code>.</li> <li>#2591 - Updated README.md to include additional information about the Nautobot project.</li> <li>#2619 - Added notes about restarting the Nautobot server after creating relationships, custom fields, and computed fields to show them in GraphQL.</li> <li>#2677 - Fixed a documentation error by adding an import statement to a code example in <code>nautobot/docs/plugins/development.md</code>.</li> </ul>"},{"location":"release-notes/version-1.4.html#housekeeping_1","title":"Housekeeping","text":"<ul> <li>#2585 - Updated development dependency <code>coverage</code> from 6.4.2 to 6.4.4.</li> <li>#2585 - Updated development dependency <code>invoke</code> from 1.7.1 to 1.7.3.</li> <li>#2585 - Updated development dependency <code>mkdocs-material</code> from 8.4.2 to 8.4.4.</li> <li>#2590 - Added unit tests for bulk-editing and bulk-deleting all instances of a model.</li> <li>#2661 - Fixed default tagging of Docker images built with <code>invoke buildx</code>.</li> <li>#2681 - Added multiple assert failure messages to <code>UpdateObjectViewTestCase</code>.</li> <li>#2690 - Fixed test settings to disable logging when running tests.</li> </ul>"},{"location":"release-notes/version-1.4.html#v147-2022-10-18","title":"v1.4.7 (2022-10-18)","text":""},{"location":"release-notes/version-1.4.html#fixed_3","title":"Fixed","text":"<ul> <li>#2636 - Fixed <code>pyproject.toml</code> to be a proper full release.</li> </ul>"},{"location":"release-notes/version-1.4.html#v146-2022-10-17","title":"v1.4.6 (2022-10-17)","text":""},{"location":"release-notes/version-1.4.html#security_1","title":"Security","text":"<ul> <li>#2434 - Updated <code>oauthlib</code> to <code>3.2.1</code> for <code>CVE-2022-36087</code>. This is a dependency of <code>social-auth-core</code> so will not auto-update when upgrading. Please be sure to upgrade your local environment.</li> </ul>"},{"location":"release-notes/version-1.4.html#added_3","title":"Added","text":"<ul> <li>#2437 - Added Nautobot-themed error page for handling 403 CSRF errors.</li> </ul>"},{"location":"release-notes/version-1.4.html#changed_4","title":"Changed","text":"<ul> <li>#2602 - Increased size of <code>ObjectChange.change_context_detail</code> field from 100 to 400 chars, and add truncation to it. Also adding truncation to <code>ObjectChange.object_repr</code>.</li> </ul>"},{"location":"release-notes/version-1.4.html#fixed_4","title":"Fixed","text":"<ul> <li>#2075 - Fixed white screen flash in dark mode.</li> <li>#2546 - Applied a hotfix for multiple jobs executing from a single scheduled job.</li> <li>#2560 - Fixed NautobotHTMLRenderer incorrectly overrides selected <code>pk_list</code> for <code>bulk_destroy</code> and <code>bulk_update</code>.</li> <li>#2573 - Fixed link from VLAN group detail view to filtered VLAN list.</li> <li>#2574 - Updated <code>nautobot.core.settings</code> to match expected behavior on <code>NAPALM_USERNAME</code>, <code>NAPALM_PASSWORD</code>, and <code>NAPALM_TIMEOUT</code> based on documentation.</li> <li>#2595 - Fixed NautobotUIViewSet handling of unauthenticated users.</li> </ul>"},{"location":"release-notes/version-1.4.html#documentation_2","title":"Documentation","text":"<ul> <li>#2512 - Added link to <code>nautobot-plugin-nornir</code> in the Apps section of the documentation.</li> <li>#2530 - Updated development documentation to include LTM, additional release schedule information.</li> <li>#2566 - Clarified documentation on superusers needing staff permission to access admin UI.</li> <li>#2588 - Added a danger admonition to developer docs about never using <code>pip</code> to install Poetry into Nautobot dev environment.</li> </ul>"},{"location":"release-notes/version-1.4.html#housekeeping_2","title":"Housekeeping","text":"<ul> <li>#2614 - Fixed CONTRIBUTING.md link to actual Nautobot documentation.</li> </ul>"},{"location":"release-notes/version-1.4.html#v145-2022-10-03","title":"v1.4.5 (2022-10-03)","text":""},{"location":"release-notes/version-1.4.html#added_4","title":"Added","text":"<ul> <li>#2330 - Added <code>created</code> and <code>last_updated</code> fields to Device <code>Component</code> and <code>ComponentTemplate</code> models.</li> </ul>"},{"location":"release-notes/version-1.4.html#changed_5","title":"Changed","text":"<ul> <li>#2508 - Updated dark mode theme to be less...dark.</li> </ul>"},{"location":"release-notes/version-1.4.html#fixed_5","title":"Fixed","text":"<ul> <li>#2326 - Fixed 500 error in Circuit Termination swap.</li> <li>#2330 - Fixed missing Change Log tab on device component detail views.</li> <li>#2466 - Fixed Jobs misleading sensitive variables or requiring approval error message.</li> <li>#2509 - Fixed template lookup logic in ObjectNotesView, ObjectDynamicGroupsView and ObjectChangeLogView.</li> </ul>"},{"location":"release-notes/version-1.4.html#dependencies_1","title":"Dependencies","text":"<ul> <li>#2537 - Updated <code>django-extensions</code> to <code>3.2.1</code>, <code>drf-spectacular</code> to <code>0.24.2</code>, <code>drf-yasg</code> to <code>1.21.4</code>.</li> </ul>"},{"location":"release-notes/version-1.4.html#documentation_3","title":"Documentation","text":"<ul> <li>#2539 - Updated links from nautobot.readthedocs.io to docs.nautobot.com.</li> </ul>"},{"location":"release-notes/version-1.4.html#housekeeping_3","title":"Housekeeping","text":"<ul> <li>#2445 - Fixed invalid Renovate config.</li> <li>#2490 - Added change log fragment checkbox to Github pull request template.</li> <li>#2526 - Fixed error in rendering the example plugin's <code>AnotherExampleModel</code> list view by adding a <code>get_absolute_url()</code> method to the <code>AnotherExampleModel</code> class and adding an <code>AnotherExampleModel</code> detail view template.</li> <li>#2533 - Fixed <code>test_list_objects_unknown_filter_no_strict_filtering</code> failure if a filterset couldn't be found for a given model.</li> <li>#2544 - Updated towncrier template to convert multi-line change fragments into multiple release notes entries.</li> </ul>"},{"location":"release-notes/version-1.4.html#v144-2022-09-26","title":"v1.4.4 (2022-09-26)","text":""},{"location":"release-notes/version-1.4.html#added_5","title":"Added","text":"<ul> <li>#2023 - Added reusable GitHub Action workflow for use by plugins to test against <code>next</code>, <code>develop</code> routinely.</li> </ul>"},{"location":"release-notes/version-1.4.html#changed_6","title":"Changed","text":"<ul> <li>#2235 - Added ancestor information to Location and LocationType display names to provide additional context in the UI.</li> </ul>"},{"location":"release-notes/version-1.4.html#fixed_6","title":"Fixed","text":"<ul> <li>#2353 - Fixed MultiSelect CustomField being emptied unintentionally after bulk update.</li> <li>#2375 - Fixed error in Cable list view filtering when <code>color</code> and <code>type</code> filters are not set.</li> <li>#2461 - Fixed an exception during OpenAPI schema generation when certain Nautobot apps (including <code>nautobot-firewall-models</code>) were installed.</li> </ul>"},{"location":"release-notes/version-1.4.html#documentation_4","title":"Documentation","text":"<ul> <li>#2153 - Updated optional settings documentation to provide clarity on Nautobot vs Django settings.</li> </ul>"},{"location":"release-notes/version-1.4.html#housekeeping_4","title":"Housekeeping","text":"<ul> <li>#2457 - Moved <code>towncrier_template.j2</code> from root to develop directory.</li> <li>#2468 - Upgraded CI gh-action-setup-poetry-environment action to v3</li> <li>#2496 - Fixed failing CI due to #2468</li> </ul>"},{"location":"release-notes/version-1.4.html#v143-2022-09-19","title":"v1.4.3 (2022-09-19)","text":""},{"location":"release-notes/version-1.4.html#added_6","title":"Added","text":"<ul> <li>#2327 - Added help text to the Job scheduling datetime picker to indicate the applicable time zone.</li> </ul>"},{"location":"release-notes/version-1.4.html#changed_7","title":"Changed","text":"<ul> <li>#2223 - Augment <code>get_route_for_model()</code> to support REST API routes.</li> <li>#2340 - Improved rendering of badges, labels, buttons, and color selection menus in dark mode.</li> <li>#2447 - Moved Dynamic Groups tab on object detail view to it's own view as a generic <code>ObjectDynamicGroupsView</code>.</li> </ul>"},{"location":"release-notes/version-1.4.html#fixed_7","title":"Fixed","text":"<ul> <li>#138 - Fixed lack of user-facing message when an exception occurs while discovering Jobs from a Git repository.</li> <li>#950 - Fixed database concurrency issues with uWSGI pre-forking.</li> <li>#1619 - Improved accuracy of OpenAPI schema for bulk REST API operations.</li> <li>#2299 - Remove <code>render_filter()</code> method and <code>filter</code> field from table columns</li> <li>#2309 - Fixed 404 on ScheduledJobView, <code>job_class</code> no longer found behavior.</li> <li>#2324 - Fixed errors encountered when a job model is deleted while a job is running.</li> <li>#2338 - Fixed whitespace issue with Text File secrets and they are now stripped of leading/trailing whitespace and newlines.</li> <li>#2378 - Fix Job Result redirection on submit.</li> <li>#2382 - Removed extraneous cache and temporary files from the <code>dev</code> and <code>final-dev</code> Docker images to reduce image size.</li> <li>#2389 - Removed extraneous <code>inspect.getsource()</code> call from Job class.</li> </ul>"},{"location":"release-notes/version-1.4.html#dependencies_2","title":"Dependencies","text":"<ul> <li>#1619 - Updated <code>drf-spectacular</code> dependency to version 0.24.</li> </ul>"},{"location":"release-notes/version-1.4.html#documentation_5","title":"Documentation","text":"<ul> <li>#2383 - Updated documentation link for Nautobot ChatOps plugin.</li> <li>#2400 - Improved formatting of version changes in the documentation.</li> <li>#2407 - Corrected SSO Backend reference for Azure AD Tenant.</li> <li>#2431 - Add section to the custom field documentation on ORM filtering.</li> </ul>"},{"location":"release-notes/version-1.4.html#housekeeping_5","title":"Housekeeping","text":"<ul> <li>#2362 - Added documentation and automation for Nautobot Github project to use <code>towncrier</code> for changelog fragments.</li> <li>#2364 - Allow <code>invoke</code> tasks to be run even if <code>rich</code> is not installed.</li> <li>#2392 - Un-group Renovate <code>next</code> updates to address code changes per package.</li> <li>#2417 - Reworked Docker builds in CI to publish an intermediate \"dependencies-only\" image to speed up rebuild times.</li> <li>#2449 - CI: Moved dependency build to be a job, not a step.</li> </ul>"},{"location":"release-notes/version-1.4.html#v142-2022-09-05","title":"v1.4.2 (2022-09-05)","text":""},{"location":"release-notes/version-1.4.html#added_7","title":"Added","text":"<ul> <li>#983 - Added functionalities to specify <code>args</code> and <code>kwargs</code> to <code>NavMenuItem</code>.</li> <li>#2250 - Added \"Stats\" and \"Rack Groups\" to Location detail view, added \"Locations\" to Site detail view.</li> <li>#2273 - Added custom markdownlint rule to check for invalid relative links in the documentation.</li> <li>#2307 - Added <code>dynamic_groups</code> field in GraphQL on objects that can belong to dynamic groups.</li> <li>#2360 - Added Django natural key to <code>extras.Tag</code>.</li> </ul>"},{"location":"release-notes/version-1.4.html#changed_8","title":"Changed","text":"<ul> <li>#2360 - Django natural key for Status is now <code>name</code> rather than <code>slug</code>.</li> </ul>"},{"location":"release-notes/version-1.4.html#fixed_8","title":"Fixed","text":"<ul> <li>#449 - Improved error checking and reporting when syncing Git repositories.</li> <li>#1227 - The <code>NAUTOBOT_DOCKER_SKIP_INIT</code> environment variable can now be set to \"false\" (case-insensitive),</li> <li>#1807 - Fixed <code>post_run</code> method fails to add exceptions to job log.</li> <li>#2085 - The log entries table on a job result page can now be filtered by log level or message and hitting the return key has no effect.</li> <li>#2107 - Fixed a TypeError when a view defines <code>action_buttons = None</code>.</li> <li>#2237 - Fixed several issues with permissions enforcement for Note creation and viewing.</li> <li>#2269 - Fixed missing JS code causing rendering errors on GraphQL Query and Rack Reservation detail views.</li> <li>#2278 - Fixed incorrect permissions check on \"Installed Plugins\" menu item.</li> <li>#2290 - Fixed inheritance of ObjectListViewMixin for CircuitTypeUIViewSet.</li> <li>#2311 - Fixed autopopulation of \"Parent\" selection when editing an existing Location.</li> <li>#2350 - Fixed potential Redis deadlock if Nautobot server restarts at an unfortunate time.</li> </ul>"},{"location":"release-notes/version-1.4.html#dependencies_3","title":"Dependencies","text":"<ul> <li>#2296 - Updated <code>netutils</code> dependency from 1.1.x to 1.2.x.</li> </ul>"},{"location":"release-notes/version-1.4.html#documentation_6","title":"Documentation","text":"<ul> <li>#2268 - Fixed broken links in documentation.</li> <li>#2341 - Fixed omission of docs from published Python packages.</li> <li>#2347 - Revamped documentation look and feel.</li> <li>#2363 - Update app icons for consistency</li> <li>#2365 - Update Network to Code branding name</li> <li>#2367 - Remove coming soon from projects that exists</li> </ul>"},{"location":"release-notes/version-1.4.html#housekeeping_6","title":"Housekeeping","text":"<ul> <li>#2011 - replaced all .format() strings and C format strings with fstrings.</li> <li>#2293 - Updated GitHub bug report template.</li> <li>#2314 - Added <code>pylint</code> to linting suite and CI.</li> <li>#2339 - Enabled and addressed additional <code>pylint</code> checkers.</li> <li>#2342 - Reduced file size of <code>nautobot-dev</code> Docker images by clearing Poetry cache</li> <li>#2349 - Docker images are now built with Poetry 1.2.0.</li> </ul>"},{"location":"release-notes/version-1.4.html#v141-2022-08-22","title":"v1.4.1 (2022-08-22)","text":""},{"location":"release-notes/version-1.4.html#added_8","title":"Added","text":"<ul> <li>#1809 - Added Django natural key to <code>extras.Status</code> to simplify exporting and importing of database dumps for <code>Status</code> objects.</li> <li>#2202 - Added <code>validate_models</code> management command to validate each instance in the database.</li> </ul>"},{"location":"release-notes/version-1.4.html#changed_9","title":"Changed","text":"<ul> <li>#2206 - Changed Run button on Job Result to always be displayed, \"Re-Run\" if available.</li> </ul>"},{"location":"release-notes/version-1.4.html#fixed_9","title":"Fixed","text":"<ul> <li>#2209 - Fixed lack of dark-mode support in GraphiQL page.</li> <li>#2215 - Fixed error seen in migration from 1.3.x if certain default Statuses had been modified.</li> <li>#2219 - Fixed broken pagination in Dynamic Group detail \"Members\" tab.</li> <li>#2222 - Fixed missing app headings in Swagger UI.</li> <li>#2229 - Fixed <code>render_form.html</code> include template to not render a duplicate <code>object_note</code> field.</li> <li>#2232 - Fixed incorrect API URLs and incorrect inclusion of Circuits UI URLs in Swagger UI.</li> <li>#2241 - Fixed <code>DynamicGroup.objects.get_for_model()</code> to support nested Dynamic Groups.</li> <li>#2259 - Fixed footer not bound to bottom of Device View.</li> </ul>"},{"location":"release-notes/version-1.4.html#documentation_7","title":"Documentation","text":"<ul> <li>#2218 - Fixed typos/links in release notes and Dynamic Groups docs.</li> <li>#2252 - Updated Poetry install command for Development Getting Started guide.</li> </ul>"},{"location":"release-notes/version-1.4.html#housekeeping_7","title":"Housekeeping","text":"<ul> <li>#2213 - Added a new <code>--pull</code> parameter for <code>invoke build</code> to tell Docker to pull images when building containers.</li> <li>#2220 - Narrowed scope of auto-formatting in VSCode to only apply to Python files.</li> </ul>"},{"location":"release-notes/version-1.4.html#v140-2022-08-15","title":"v1.4.0 (2022-08-15)","text":""},{"location":"release-notes/version-1.4.html#added_9","title":"Added","text":"<ul> <li>#1812 - Added <code>NautobotViewSet</code> and accompanying helper methods, documentation.</li> <li>#2105 - Added support for Notes in NautobotBulkEditForm and NautobotEditForm.</li> <li>#2200 - Added Dynamic Groups support for Cluster, IP Address, Prefix, and Rack.</li> </ul>"},{"location":"release-notes/version-1.4.html#changed_10","title":"Changed","text":"<ul> <li>#1812 - Changed Circuit app models to use <code>NautobotViewSet</code>s.</li> <li>#2200 - Group of dynamic group membership links now link to the group's membership table view.</li> </ul>"},{"location":"release-notes/version-1.4.html#fixed_10","title":"Fixed","text":"<ul> <li>#1304 - Fixed incorrect display of connection counts on home page.</li> <li>#1845 - Fixed not being able to schedule job with 'immediate' schedule via API.</li> <li>#1996 - Fixed Menu Item <code>link_text</code> render on top of buttons.</li> <li>#2178 - Fixed \"invalid filter\" error when filtering JobResults in the UI.</li> <li>#2184 - Fixed job re-run not honoring <code>has_sensitive_variables</code>.</li> <li>#2190 - Fixed tags missing from Location forms.</li> <li>#2191 - Fix widget for boolean filters fields when generating filter form for a Dynamic Group</li> <li>#2192 - Fixed job.request removed from job instance in <code>v1.4.0b1</code>.</li> <li>#2197 - Fixed some display issues in the Dynamic Groups detail view.</li> </ul>"},{"location":"release-notes/version-1.4.html#dependencies_4","title":"Dependencies","text":"<ul> <li>#2183 - Update dependency django to ~3.2.15.</li> </ul>"},{"location":"release-notes/version-1.4.html#documentation_8","title":"Documentation","text":"<ul> <li>#2029 - Updated optional settings docs to call out environment variable only settings.</li> <li>#2193 - Updated Postgres/MySQL <code>dumpdata</code> docs to exclude <code>django_rq</code> exports.</li> </ul>"},{"location":"release-notes/version-1.4.html#housekeeping_8","title":"Housekeeping","text":"<ul> <li>#2173 - Added flake8 linting and black formatting settings to vscode workspace settings.</li> <li>#2176 - Update invoke task output to use rich formatting, print full Docker Compose commands.</li> </ul>"},{"location":"release-notes/version-1.4.html#v140rc1-2022-08-10","title":"v1.4.0rc1 (2022-08-10)","text":""},{"location":"release-notes/version-1.4.html#added_10","title":"Added","text":"<ul> <li>#767 - Added notes field to Primary and Organizational models.</li> <li>#1498 - Added extended lookup expression filters to custom fields.</li> <li>#1962 - Added <code>slug</code> field to Custom Field model, added 1.4 REST API version of the <code>api/extras/custom-fields/</code> endpoints.</li> <li>#2106 - Added support for listing/creating Notes via REST API.</li> </ul>"},{"location":"release-notes/version-1.4.html#changed_11","title":"Changed","text":"<ul> <li>#2168 - Added model toggle to skip adding missing Dynamic Group filter fields for use in easing integration of new models into Dynamic Groups.</li> </ul>"},{"location":"release-notes/version-1.4.html#fixed_11","title":"Fixed","text":"<ul> <li>#2090 - Fixed an issue where a REST API PATCH of a Tag could inadvertently reset its associated content-types.</li> <li>#2132 - Updated job hooks to use slugs in urls instead of pk.</li> <li>#2133 - Update documentation for job hooks, make it reachable from the Nautobot UI.</li> <li>#2135 - Fixed ImportError on <code>RelationshipModelForm</code>, renamed other mixins and added aliases for backwards compatibility.</li> <li>#2137 - Fixed incorrect parameter name in <code>NaturalKeyOrPKMultipleChoiceFilter</code> documentation.</li> <li>#2142 - Fixed incorrect URL field in REST API nested relationship representation.</li> </ul>"},{"location":"release-notes/version-1.4.html#documentation_9","title":"Documentation","text":"<ul> <li>#2156 - Update network automation apps listed on overview of docs.</li> </ul>"},{"location":"release-notes/version-1.4.html#housekeeping_9","title":"Housekeeping","text":"<ul> <li>#2150 - Fixed unit tests performance degradation.</li> <li>#2165 - Fix up relationship-association API test issue.</li> </ul>"},{"location":"release-notes/version-1.4.html#v140b1-2022-07-30","title":"v1.4.0b1 (2022-07-30)","text":""},{"location":"release-notes/version-1.4.html#added_11","title":"Added","text":"<ul> <li>#1463 - Added REST API support for opt-in <code>relationships</code> data on model endpoints; added <code>NautobotModelSerializer</code> base class.</li> <li>#1614 - Added support for nesting of Dynamic Groups, allowing inclusion/exclusion rules of sub-group members.</li> <li>#1735 - Added missing filters to model FilterSets for Virtualization models.</li> <li>#1865 - Added support for a custom template on Job forms.</li> <li>#1875 - Add ability to quickly re-submit a previously run <code>Job</code> with the same parameters.</li> <li>#1877 - Add new job base class JobHookReceiver to support triggering job execution from change events.</li> <li>#1878 - Add job hooks feature.</li> <li>#1883 - Add ability to filter objects by their relationships into the existing FilterSet.</li> <li>#1884 - Add ability to set the relationship filter via the filter form.</li> <li>#2035 - Added change source context to object change context manager.</li> <li>#2051 - Add changelog url for Relationships.</li> <li>#2061 - Add draggable child groups to Dynamic Groups edit view in UI, recompute and hide weights.</li> </ul>"},{"location":"release-notes/version-1.4.html#changed_12","title":"Changed","text":"<ul> <li>#2049 - Moved <code>get_changelog_url</code> to a method on objects that support changelogs, updated template context.</li> </ul>"},{"location":"release-notes/version-1.4.html#fixed_12","title":"Fixed","text":"<ul> <li>#1710 - Fixed invalid CSS when clicking \"Add another\" row buttons for formsets on Secrets Groups, Dynamic Groups edit view in the UI.</li> <li>#2069 - Addressed numerous UX improvements for Dynamic Groups of Dynamic Groups feature to ease usability of this feature.</li> <li>#2109 - Fixed Relationship Filters are not Applied with \"And\" Operator.</li> <li>#2111 - Fixed Invalid filter error thrown for <code>__source</code> with message: \"\" is not a valid UUID.</li> </ul>"},{"location":"release-notes/version-1.4.html#dependencies_5","title":"Dependencies","text":"<ul> <li>#2116 - Updated package dependencies: Pillow <code>~9.1.1</code> -&gt; <code>~9.2.0</code>, black <code>~22.3.0</code> -&gt; <code>~22.6.0</code>, coverage <code>6.4.1</code> -&gt; <code>6.4.2</code>, django-cacheops <code>6.0</code> -&gt; <code>6.1</code>, django-cryptography <code>1.0</code> -&gt; <code>1.1</code>, django-debug-toolbar <code>~3.4.0</code> -&gt; <code>~3.5.0</code>, django-extensions <code>~3.1.5</code> -&gt; <code>~3.2.0</code>, drf-yasg <code>~1.20.0</code> -&gt; <code>^1.20.0</code>, importlib-metadata <code>~4.4</code> -&gt; <code>^4.4.0</code>, jsonschema <code>~4.4.0</code> -&gt; <code>~4.8.0</code>, mkdocs <code>1.3.0</code> -&gt; <code>1.3.1</code>, mkdocs <code>==1.3.0</code> -&gt; <code>==1.3.1</code>, mkdocs-include-markdown-plugin <code>~3.2.3</code> -&gt; <code>~3.6.0</code>, mkdocs-include-markdown-plugin <code>==3.2.3</code> -&gt; <code>==3.6.1</code>, social-auth-core <code>~4.2.0</code> -&gt; <code>~4.3.0</code>, svgwrite <code>1.4.2</code> -&gt; <code>1.4.3</code></li> </ul>"},{"location":"release-notes/version-1.4.html#documentation_10","title":"Documentation","text":"<ul> <li>#2072 - Expand on <code>query_params</code> for <code>ObjectVar</code> in Jobs documentation.</li> </ul>"},{"location":"release-notes/version-1.4.html#v140a2-2022-07-11","title":"v1.4.0a2 (2022-07-11)","text":"<p>Attention</p> <p>The  <code>next</code> and <code>develop</code> branches introduced conflicting migration numbers during the release cycle. This necessitates reordering the migration in <code>next</code>. If you installed <code>v1.4.0a1</code>, you will need to roll back a migration before upgrading/installing <code>v1.4.0a2</code> and newer. If you have not installed <code>v1.4.0a</code> this will not be an issue.</p> <p>Before upgrading, run: <code>nautobot-server migrate extras 0033_add__optimized_indexing</code>. This will revert the reordered migration <code>0034_configcontextschema__remove_name_unique__create_constraint_unique_name_owner</code>, which is now number <code>0035</code>.</p> <p>Perform the Nautobot upgrade as usual and proceed with post-installation migration.</p> <p>No data loss is expected as the reordered migration only modified indexing on existing fields.</p>"},{"location":"release-notes/version-1.4.html#added_12","title":"Added","text":"<ul> <li>#1000 - Object detail views can now have extra UI tabs which are defined by a plugin.</li> <li>#1052 - Initial prototype implementation of Location data model.</li> <li>#1318 - Added <code>nautobot.extras.forms.NautobotBulkEditForm</code> base class. All bulk-edit forms for models that support both custom fields and relationships now inherit from this class.</li> <li>#1466 - Plugins can now override views.</li> <li>#1729 - Add new filter class <code>NaturalKeyOrPKMultipleChoiceFilter</code> to <code>nautobot.utilities.filters</code>.</li> <li>#1729 - Add 137 new filters to <code>nautobot.dcim.filters</code> FilterSets.</li> <li>#1729 - Add <code>cable_terminations</code> to the <code>model_features</code> registry.</li> <li>#1893 - Added an object detail view for Relationships.</li> </ul>"},{"location":"release-notes/version-1.4.html#changed_13","title":"Changed","text":"<ul> <li>#1945 - Change the <code>settings_and_registry</code> default context processor to purely <code>settings</code>, moving registry dictionary to be accessible via <code>registry</code> template tag.</li> </ul>"},{"location":"release-notes/version-1.4.html#removed","title":"Removed","text":"<ul> <li>#1462 - Removed job source tab from Job and Job Result view.</li> <li>#2002 - Removed rqworker container from default Docker development environment.</li> </ul>"},{"location":"release-notes/version-1.4.html#fixed_13","title":"Fixed","text":"<ul> <li>#1898 - Browsable API is now properly styled as the rest of the app.</li> </ul>"},{"location":"release-notes/version-1.4.html#dependencies_6","title":"Dependencies","text":"<ul> <li>#1908 - Update dependency Markdown to ~3.3.7</li> <li>#1909 - Update dependency MarkupSafe to ~2.1.1</li> <li>#1912 - Update dependency celery to ~5.2.7</li> <li>#1913 - Update dependency django-jinja to ~2.10.2</li> <li>#1915 - Update dependency invoke to ~1.7.1</li> <li>#1917 - Update dependency svgwrite to ~1.4.2</li> <li>#1919 - Update dependency Pillow to ~9.1.1</li> <li>#1920 - Update dependency coverage to ~6.4.1</li> <li>#1921 - Update dependency django-auth-ldap to ~4.1.0</li> <li>#1924 - Update dependency django-cors-headers to ~3.13.0</li> <li>#1925 - Update dependency django-debug-toolbar to ~3.4.0</li> <li>#1928 - Update dependency napalm to ~3.4.1</li> <li>#1929 - Update dependency selenium to ~4.2.0</li> </ul>"},{"location":"release-notes/version-1.4.html#housekeeping_10","title":"Housekeeping","text":"<ul> <li>#1949 - Added TestCaseMixin for Helper Functions across all test case bases.</li> </ul>"},{"location":"release-notes/version-1.4.html#v140a1-2022-06-13","title":"v1.4.0a1 (2022-06-13)","text":""},{"location":"release-notes/version-1.4.html#added_13","title":"Added","text":"<ul> <li>#729 - Added UI dark mode.</li> <li>#984 - Added status field to Interface, VMInterface models.</li> <li>#1119 - Added truncated device name functionality to Rackview UI.</li> <li>#1455 - Added <code>parent_interface</code> and <code>bridge</code> fields to Interface and VMInterface models.</li> <li>#1833 - Added <code>hyperlinked_object</code> template filter to consistently reference objects in templates.</li> </ul>"},{"location":"release-notes/version-1.4.html#changed_14","title":"Changed","text":"<ul> <li>#1736 - <code>STRICT_FILTERING</code> setting is added and enabled by default.</li> <li>#1793 - Added index notes to fields from analysis, relaxed ConfigContextSchema constraint (unique on <code>name</code>, <code>owner_content_type</code>, <code>owner_object_id</code> instead of just <code>name</code>).</li> </ul>"},{"location":"release-notes/version-1.4.html#fixed_14","title":"Fixed","text":"<ul> <li>#1815 - Fix theme link style in footer.</li> <li>#1831 - Fixed missing <code>parent_interface</code> and <code>bridge</code> from 1.4 serializer of Interfaces.</li> <li>#1831 - Fix job from with <code>approval_required=True</code> and <code>has_sensitive_variables=True</code> can be scheduled. .</li> </ul>"},{"location":"release-notes/version-1.5.html","title":"Version 1.5","text":""},{"location":"release-notes/version-1.5.html#nautobot-v15","title":"Nautobot v1.5","text":"<p>This document describes all new features and changes in Nautobot 1.5.</p> <p>If you are a user migrating from NetBox to Nautobot, please refer to the \"Migrating from NetBox\" documentation.</p>"},{"location":"release-notes/version-1.5.html#release-overview","title":"Release Overview","text":""},{"location":"release-notes/version-1.5.html#added","title":"Added","text":""},{"location":"release-notes/version-1.5.html#added-nautobot-server-generate_test_data-command-2536","title":"Added <code>nautobot-server generate_test_data</code> command (#2536)","text":"<p>A new management command, <code>nautobot-server generate_test_data</code>, has been added that can be used to populate the Nautobot database with various data as a baseline for manual or automated testing. This is now used internally by Nautobot's unit testing suite to create a synthetic data set that looks and feels like real data with randomly-generated values. Most importantly, the objects are created with all of the fields fully and correctly populated, to assert that each object in the database is properly exercising all features.</p> <p>Warning</p> <p>Be very cautious about running this command on your server instance. It is not intended to be used in production environments and will result in data loss.</p>"},{"location":"release-notes/version-1.5.html#custom-field-grouping-899","title":"Custom Field Grouping (#899)","text":"<p>Custom fields can now be assigned to a free-text \"grouping\" to improve usability when a large number of custom fields are defined on a given model. In the UI, fields in the same grouping will be grouped together, and groupings can be expanded/collapsed for display purposes.</p>"},{"location":"release-notes/version-1.5.html#custom-celery-task-queues-2421","title":"Custom Celery Task Queues (#2421)","text":"<p>A new optional job property <code>task_queues</code> has been introduced to allow Nautobot to leverage custom celery queues for jobs. This will allow you to send jobs to specific workers based on which queue is selected. This property can be set on the job class and overridden in the job model, similar to other overridable job fields. If <code>task_queues</code> is not defined on the job class or job model, the job will only be able to use the default queue. A new field has been added to the job run form to allow you to select a queue when you run the job and  an optional field <code>task_queue</code> has been added to the REST API job run endpoint for the same purpose.</p> <p>Important</p> <p>The default celery queue name has been changed from <code>celery</code> to <code>default</code>. If you have any workers or tasks hard coded to use <code>celery</code> you will need to update those workers/tasks or change the <code>CELERY_TASK_DEFAULT_QUEUE</code> setting in your <code>nautobot_config.py</code>.</p>"},{"location":"release-notes/version-1.5.html#device-redundancy-groups-1892","title":"Device Redundancy Groups (#1892)","text":"<p>Device Redundancy Groups have been added to model groups of distinct devices that perform device clustering or failover high availability functions. This may be used to model whole device redundancy strategies across devices with separate control planes (ex: ASA failover), not devices that share a control plane (ex: stackwise switch stacks), or interface specific redundancy strategies (ex: hsrp). Device Redundancy Groups support grouping an arbitrary number of devices and may be assigned an optional secrets group and one or more optional failover strategies.</p>"},{"location":"release-notes/version-1.5.html#nautobot-apps-api-2723","title":"Nautobot Apps API (#2723)","text":"<p>Added in version 1.5.2</p> <p>The new <code>nautobot.apps</code> module provides a common starting point for app (a.k.a. plugin) developers to find all of the functions and classes that are recommended for use in apps. For example, instead of needing to look through the entire Nautobot codebase to find the appropriate classes, and then write:</p> <pre><code>from nautobot.extras.forms import NautobotModelForm\nfrom nautobot.utilities.forms import BulkEditForm, CSVModelForm\nfrom nautobot.utilities.forms.fields import DynamicModelChoiceField\n</code></pre> <p>an app developer can now refer to <code>nautobot.apps.forms</code> and then write simply:</p> <pre><code>from nautobot.apps.forms import (\nBulkEditForm,\nCSVModelForm,\nDynamicModelChoiceField,\nNautobotModelForm,\n)\n</code></pre> <p>For more details, please refer to the updated app developer documentation.</p>"},{"location":"release-notes/version-1.5.html#nestable-locationtypes-2608","title":"Nestable LocationTypes (#2608)","text":"<p><code>LocationType</code> definitions can now be flagged as <code>nestable</code>. When this flag is set, Locations of this type may nest within one another, similar to how Regions work at present. This allows you to have a variable-depth hierarchy of Locations, for example:</p> <ul> <li>Main Campus (\"Building Group\" location type)<ul> <li>West Campus (Building Group)<ul> <li>Building A (\"Building\" location type)</li> <li>Building B (Building)</li> </ul> </li> <li>East Campus (Building Group)<ul> <li>Building C (Building)</li> <li>Building D (Building)</li> </ul> </li> <li>South Campus (Building Group)<ul> <li>Western South Campus (Building Group)<ul> <li>Building G (Building)</li> </ul> </li> </ul> </li> </ul> </li> <li>Satellite Campus (Building Group)<ul> <li>Building Z (Building)</li> </ul> </li> </ul> <p>In the above example, only two LocationTypes are defined (\"Building Group\" and \"Building\") but the \"Building Group\" type is flagged as nestable, so one Building Group may contain another Building Group.</p>"},{"location":"release-notes/version-1.5.html#required-relationships-873","title":"Required Relationships (#873)","text":"<p>Relationships can be marked as being required. By default, relationships are not marked as being required.</p> <p>To mark a relationship as being required, select \"Source objects MUST implement this relationship\" or conversely \" Destination objects MUST implement this relationship\" from the \"Required on\" field when editing or creating a relationship:</p> <ul> <li>If \"Destination objects MUST implement this relationship\" is selected, objects of the type selected in \"Destination Type\" will enforce this relationship when they are created or edited.</li> <li>If \"Source objects MUST implement this relationship\" is selected, objects of the type selected in \"Source Type\" will enforce this relationship when they are created or edited.</li> </ul> <p>Required relationships are enforced in the following scenarios:</p> <ul> <li>Creating or editing an object via the API or the UI</li> <li>Bulk creating objects via the API</li> <li>Bulk editing objects via the API or the UI</li> </ul>"},{"location":"release-notes/version-1.5.html#changed","title":"Changed","text":""},{"location":"release-notes/version-1.5.html#database-query-caching-is-now-disabled-by-default-1721","title":"Database Query Caching is now Disabled by Default (#1721)","text":"<p>In prior versions of Nautobot, database query caching using the <code>django-cacheops</code> application (aka Cacheops) was enabled by default. This is determined by the default value of the <code>CACHEOPS_ENABLED</code> setting being set to <code>True</code>.</p> <p>Through much trial and error we ultimately decided that this feature is more trouble than it is worth and we have begun to put more emphasis on improving performance of complex database queries over continuing to rely upon the various benefits and pitfalls of utilizing Cacheops.</p> <p>As a result, the value of this setting now defaults to <code>False</code>, disabling database query caching entirely for new deployments. Cacheops will be removed entirely in a future release.</p> <p>Important</p> <p>Users with existing <code>nautobot_config.py</code> files generated from earlier versions of Nautobot will still have <code>CACHEOPS_ENABLED = True</code> unless they modify or regenerate their configuration. If users no longer desire caching, please be sure to explicitly toggle the value of this setting to <code>False</code> and restart your Nautobot services.</p>"},{"location":"release-notes/version-1.5.html#deprecation-warnings-silenced-by-default-2798","title":"Deprecation Warnings Silenced by Default (#2798)","text":"<p>Changed in version 1.5.2</p> <p>Deprecation warnings raised by Nautobot itself (such as warnings about upcoming breaking changes in a future release) are no longer logged as <code>WARNING</code> log messages by default, but can be enabled by setting the <code>NAUTOBOT_LOG_DEPRECATION_WARNINGS</code> environment variable to <code>True</code> in your configuration. More information is available under Optional Settings.</p> <p>Caution</p> <p>In Nautobot 2.0, deprecation warnings will again be logged by default; a future release of Nautobot 1.5.x will also re-enable default logging of deprecation warnings.</p>"},{"location":"release-notes/version-1.5.html#redesigned-list-filtering-ui-1998","title":"Redesigned List Filtering UI (#1998)","text":"<p>Added a dynamic filter form that allows users to filter object tables/lists by any field and lookup expression combination supported by the corresponding FilterSet and API.</p>"},{"location":"release-notes/version-1.5.html#renamed-mixin-classes-2779","title":"Renamed Mixin Classes (#2779)","text":"<p>Changed in version 1.5.2</p> <p>A number of mixin classes have been renamed and/or relocated for improved self-consistency and clarity of usage. The former names of these mixins are still available for now as aliases, but inheriting from these aliases will now raise a <code>DeprecationWarning</code>, and these aliases wil be removed in a future release.</p> Former Name New Name <code>CableTerminationFilterSet</code> <code>CableTerminationModelFilterSetMixin</code> <code>CableTerminationSerializer</code> <code>CableTerminationModelSerializerMixin</code> <code>ConnectedEndpointSerializer</code> <code>PathEndpointModelSerializerMixin</code> <code>ConnectionFilterSet</code> <code>ConnectionFilterSetMixin</code> <code>CreatedUpdatedFilterSet</code> <code>CreatedUpdatedModelFilterSetMixin</code> <code>CustomFieldModelFilterSet</code> <code>CustomFieldModelFilterSetMixin</code> <code>CustomFieldModelSerializer</code> <code>CustomFieldModelSerializerMixin</code> <code>DeviceComponentFilterSet</code> <code>DeviceComponentModelFilterSetMixin</code> <code>DeviceTypeComponentFilterSet</code> <code>DeviceComponentTemplateModelFilterSetMixin</code> <code>LocalContextFilterSet</code> <code>LocalContextModelFilterSetMixin</code> <code>PathEndpointFilterSet</code> <code>PathEndpointModelFilterSetMixin</code> <code>PluginBanner</code> <code>Banner</code> <code>PluginConfig</code> <code>NautobotAppConfig</code> <code>PluginCustomValidator</code> <code>CustomValidator</code> <code>PluginFilterExtension</code> <code>FilterExtension</code> <code>PluginTemplateExtension</code> <code>TemplateExtension</code> <code>RelationshipModelFilterSet</code> <code>RelationshipModelFilterSetMixin</code> <code>TaggedObjectSerializer</code> <code>TaggedModelSerializerMixin</code> <code>TenancyFilterSet</code> <code>TenancyModelFilterSetMixin</code>"},{"location":"release-notes/version-1.5.html#v1524-2023-07-24","title":"v1.5.24 (2023-07-24)","text":""},{"location":"release-notes/version-1.5.html#security","title":"Security","text":"<ul> <li>#4126 - Updated <code>cryptography</code> to <code>41.0.2</code> due to CVE-2023-38325. As this is not a direct dependency of Nautobot, it will not auto-update when upgrading. Please be sure to upgrade your local environment.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed","title":"Fixed","text":"<ul> <li>#3312 - Fixed custom fields not auto-populating when creating objects through the ORM.</li> <li>#4127 - Fixed JavaScript error with 'Check Secret' button introduced in the previous patch release.</li> </ul>"},{"location":"release-notes/version-1.5.html#v1523-2023-07-10","title":"v1.5.23 (2023-07-10)","text":""},{"location":"release-notes/version-1.5.html#security_1","title":"Security","text":"<ul> <li>#4064 - Updated <code>Django</code> to <code>3.2.20</code> to address <code>CVE-2023-36053</code>.</li> </ul>"},{"location":"release-notes/version-1.5.html#added_1","title":"Added","text":"<ul> <li>#3235 - Added a warning notifying users when the requested <code>per_page</code> on a list page exceeds the <code>MAX_PAGE_SIZE</code> set.</li> <li>#3937 - Added a Nautobot 2.0 pre-migration management command aptly named <code>pre_migrate</code>.</li> </ul>"},{"location":"release-notes/version-1.5.html#changed_1","title":"Changed","text":"<ul> <li>#1854 - When sorting tables for MPTT models, nesting/indentation of the model name display is disabled as it was misleading.</li> <li>#1854 - Disabled sorting on TreeNode model tables as TreeNode do not support sorting.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_1","title":"Fixed","text":"<ul> <li>#2374 - Fixed a signal handler that could cause <code>nautobot-server loaddata</code> to abort if certain data is present.</li> <li>#3109 - Fixed missing trailing slash in NautobotUIViewSet urls.</li> <li>#3524 - Fixed the unhandled exception brought on by updating Rack to a new site with a similar device sharing the same name and tenant by catching error in 'RackForm.clean`.</li> <li>#4021 - Fixed erroneous warning banner on list views when <code>MAX_PAGE_SIZE</code> is set to zero.</li> <li>#4048 - Fixed broken tab navigation in secrets.</li> </ul>"},{"location":"release-notes/version-1.5.html#dependencies","title":"Dependencies","text":"<ul> <li>#4064 - Updated <code>Django</code> to <code>3.2.20</code> to address <code>CVE-2023-36053</code>.</li> </ul>"},{"location":"release-notes/version-1.5.html#documentation","title":"Documentation","text":"<ul> <li>#2374 - Revised documentation for recommended parameters to use when running <code>nautobot-server dumpdata</code>.</li> <li>#2374 - Revised documentation around preparing to run <code>nautobot-server loaddata</code>.</li> <li>#2374 - Added documentation to run <code>nautobot-server trace_paths</code> after <code>nautobot-server loaddata</code>.</li> </ul>"},{"location":"release-notes/version-1.5.html#housekeeping","title":"Housekeeping","text":"<ul> <li>#3422 - Fixed postgres database healthcheck error message in development environment.</li> <li>#4049 - Restructured non-production dependencies in <code>pyproject.toml</code> to comply with latest Poetry expectations.</li> <li>#4049 - Updated development-only dependencies for documentation rendering: <code>mkdocstrings</code> 0.22.0, <code>mkdocstrings-python</code> 1.1.2, and <code>griffe</code> 0.30.1.</li> <li>#4050 - Added <code>develop-1.6</code> to list of target branches to run changelog step in pull request CI workflow.</li> </ul>"},{"location":"release-notes/version-1.5.html#v1522-2023-06-26","title":"v1.5.22 (2023-06-26)","text":""},{"location":"release-notes/version-1.5.html#security_2","title":"Security","text":"<ul> <li>#3796 - Updated <code>requests</code> to 2.31.0 to address CVE-2023-32681. This is a development dependency and will not auto-update when upgrading Nautobot. Please be sure to update your local environment.</li> <li>#3843 - Updated <code>cryptography</code> to 41.0.0 due to a statically linked version of OpenSSL which contained vulnerability CVE-2023-2650. This is not a direct dependency so will not auto-update when upgrading. Please be sure to upgrade your local environment.</li> </ul>"},{"location":"release-notes/version-1.5.html#added_2","title":"Added","text":"<ul> <li>#3534 - Added optional args and kwargs to <code>BaseModel.validated_save()</code> that pass through to the model's <code>save</code> method.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_2","title":"Fixed","text":"<ul> <li>#3658 - Fixed a typo in the success message when removing a child Device from a Device Bay.</li> <li>#3739 - Fixed change log entries not being created for some long running requests.</li> <li>#3891 - Fixed a bug preventing Job buttons from supporting the <code>FORCE_SCRIPT_NAME</code> setting due to hard-coded URLs.</li> <li>#3924 - Fixed a potential server hang at startup when a misconfigured GitRepository is present.</li> <li>#3948 - Fixed device name copy button adding an extra space/return.</li> <li>#3987 - Fixed issue where download SVG download did not actually download.</li> </ul>"},{"location":"release-notes/version-1.5.html#documentation_1","title":"Documentation","text":"<ul> <li>#3946 - Added warning note to job scheduling documentation for the attributes that can prevent scheduling.</li> </ul>"},{"location":"release-notes/version-1.5.html#housekeeping_1","title":"Housekeeping","text":"<ul> <li>#3534 - Fixed confusing unit test failure message when trying to run a non-existent test.</li> <li>#3534 - Fixed unit tests sometimes clearing out the default database.</li> </ul>"},{"location":"release-notes/version-1.5.html#v1521-2023-06-12","title":"v1.5.21 (2023-06-12)","text":""},{"location":"release-notes/version-1.5.html#added_3","title":"Added","text":"<ul> <li>#3897 - Adds log message when a secrets group for a git repository doesn't yield a token.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_3","title":"Fixed","text":"<ul> <li>#3809 - Fixed a bug that prevented  <code>__init__()</code> function of <code>bulk_create_form_class</code> being overridden in NautobotUIViewSet.</li> </ul>"},{"location":"release-notes/version-1.5.html#dependencies_1","title":"Dependencies","text":"<ul> <li>#3882 - Removed deprecated distutils dependency.</li> </ul>"},{"location":"release-notes/version-1.5.html#documentation_2","title":"Documentation","text":"<ul> <li>#3806 - Added instructions and examples for SAML SSO using Okta as the IdP.</li> <li>#3811 - Added a note that addresses UWSGI buffer size concerns with Azure SSO in <code>nautobot/docs/user-guide/administration/configuration/authentication/sso.md</code>.</li> <li>#3888 - Changed note for celery concurrency in the docs.</li> </ul>"},{"location":"release-notes/version-1.5.html#v1520-2023-05-30","title":"v1.5.20 (2023-05-30)","text":""},{"location":"release-notes/version-1.5.html#changed_2","title":"Changed","text":"<ul> <li>#3680 - Changed device component instantiation to be a separate method.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_4","title":"Fixed","text":"<ul> <li>#3503 - Fixed FieldError when sorting VMs list by primary IP.</li> <li>#3616 - Fixed <code>location</code> filter on <code>CircuitFilterSet</code> and <code>ProviderFilterSet</code>.</li> <li>#3787 - Fixed MySQL <code>Out of sort memory</code> error on <code>JobListView</code> and <code>JobResultListView</code>.</li> <li>#3789 - Fixed Exception <code>unsupported operand type(s) for -: 'list' and 'list'</code> for MultiObjectVar with missing UUID.</li> </ul>"},{"location":"release-notes/version-1.5.html#documentation_3","title":"Documentation","text":"<ul> <li>#3766 - Add troubleshooting steps for Azure AD SSO Group Sync example.</li> <li>#3400 - Added documentation on how to enable Jobs and Job hooks.</li> </ul>"},{"location":"release-notes/version-1.5.html#v1519-2023-05-16","title":"v1.5.19 (2023-05-16)","text":""},{"location":"release-notes/version-1.5.html#security_3","title":"Security","text":"<ul> <li>#3698 - Updated <code>lxml</code> to <code>~4.9.2</code> to address <code>CVE-2022-2309</code>. This is not a direct dependency so it will not auto-update when upgrading Nautobot. Please be sure to update your local environment.</li> <li>#3724 - Updated <code>django</code> to <code>~3.2.19</code> due to <code>CVE-2023-31047</code>.</li> <li>#3753 - Updated indirect dev dependency <code>pymdown-extensions</code> to <code>10.0</code> to address <code>CVE-2023-32309</code>. This should not be installed in a production environment by default but should be updated if you have installed it.</li> </ul>"},{"location":"release-notes/version-1.5.html#changed_3","title":"Changed","text":"<ul> <li>#3617 - SearchForms on Nautobot homepage now redirect users to login page when they are not authenticated.</li> <li>#3663 - Modified <code>delete_button</code> and <code>edit_button</code> template tags to lookup <code>pk</code> and <code>slug</code> without the need to specify the lookup key.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_5","title":"Fixed","text":"<ul> <li>#3704 - Fixed GitRepository fetching on Home Page when getting repo-based Job's name.</li> <li>#3726 - Fixed a <code>KeyError</code> when filtering Cables in the UI by <code>termination_a_type</code> or <code>termination_b_type</code>.</li> </ul>"},{"location":"release-notes/version-1.5.html#dependencies_2","title":"Dependencies","text":"<ul> <li>#3549 - Updated <code>django</code> to <code>~3.2.19</code> to address <code>CVE-2023-31047</code>.</li> <li>#3549 - Updated <code>mkdocs</code> to <code>~1.4.3</code>.</li> <li>#3549 - Updated <code>psycopg2-binary</code> to <code>~2.9.6</code>.</li> <li>#3698 - Updated <code>social-auth-core</code> to <code>~4.4.0</code> to permit addressing <code>CVE-2022-2309</code>.</li> </ul>"},{"location":"release-notes/version-1.5.html#documentation_4","title":"Documentation","text":"<ul> <li>#3695 - Added note to documentation about using <code>{{ obj.cf }}</code> to access custom fields in jinja templates.</li> <li>#3703 - Added generic views documentation to navigation panel.</li> </ul>"},{"location":"release-notes/version-1.5.html#housekeeping_2","title":"Housekeeping","text":"<ul> <li>#3753 - Updated indirect dev dependency <code>pymdown-extensions</code> to <code>10.0</code> to address <code>CVE-2023-32309</code>.</li> </ul>"},{"location":"release-notes/version-1.5.html#v1518-2023-05-01","title":"v1.5.18 (2023-05-01)","text":""},{"location":"release-notes/version-1.5.html#security_4","title":"Security","text":"<ul> <li>#3642 - Updated <code>sqlparse</code> to <code>0.4.4</code> due to CVE-2023-30608. This is not a direct dependency so it will not auto-update when upgrading Nautobot. Please be sure to update your local environment.</li> </ul>"},{"location":"release-notes/version-1.5.html#added_4","title":"Added","text":"<ul> <li>#1526 - Added UI button and REST API to validate a <code>Secret</code> can be retrieved.</li> <li>#3669 - Added indexes to <code>JobResult</code> across common fields: <code>created</code>, <code>completed</code>, and <code>status</code>.</li> </ul>"},{"location":"release-notes/version-1.5.html#changed_4","title":"Changed","text":"<ul> <li>#3633 - Changed Custom Validator applicator to not require DB query.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_6","title":"Fixed","text":"<ul> <li>#3533 - Fixed an issue where sending a PATCH to <code>/api/dcim/interfaces/(uuid)/</code> might inadvertently reset the interface's status to <code>Active</code>.</li> <li>#3533 - Fixed an issue where sending a PATCH to <code>/api/users/tokens/(uuid)/</code> might inadvertently change the token's value.</li> <li>#3612 - Fixed a 500 error when filtering by <code>content_type</code> in Dynamic Groups list view.</li> <li>#3660 - Fixed an issue where grouped job buttons would always be disabled due to a template rendering issue.</li> </ul>"},{"location":"release-notes/version-1.5.html#documentation_5","title":"Documentation","text":"<ul> <li>#2800 - Add model documentation to navigation panel.</li> <li>#3440 - Added warning admonitions for Job Hooks and Job Approvals documentation that setting <code>Meta.approval_required</code> is ignored on <code>JobHookReceiver</code> classes.</li> </ul>"},{"location":"release-notes/version-1.5.html#housekeeping_3","title":"Housekeeping","text":"<ul> <li>#3083 - Fixed an issue where unit tests might fail erroneously when dealing with objects whose name/display contains characters like <code>\"&lt;&gt;</code>.</li> <li>#3602 - Updated <code>.gitignore</code> to not track new UI non-source files.</li> <li>#3621 - Changed development Docker compose commands to not leave temporary containers behind.</li> </ul>"},{"location":"release-notes/version-1.5.html#v1517-2023-04-17","title":"v1.5.17 (2023-04-17)","text":""},{"location":"release-notes/version-1.5.html#added_5","title":"Added","text":"<ul> <li>#3484 - Added job profiling option to job execution when in DEBUG mode.</li> <li>#3544 - Added the ability to change the <code>CACHES[\"default\"][\"BACKEND\"]</code> via an environment variable <code>NAUTOBOT_CACHES_BACKEND</code></li> </ul>"},{"location":"release-notes/version-1.5.html#changed_5","title":"Changed","text":"<ul> <li>#3544 - The default database backend if <code>METRICS_ENABLED</code> is <code>True</code> is now \"django_prometheus.db.backends.postgresql\"</li> <li>#3544 - The default CACHES backend if <code>METRICS_ENABLED</code> is <code>True</code> is now \"django_prometheus.cache.backends.redis.RedisCache\"</li> <li>#3595 - Update the warning provided when a bad reverse entry is not found in serializer to point to correct import location.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_7","title":"Fixed","text":"<ul> <li>#3116 - Fixed JSON comparison of <code>data_scheme</code> keys in <code>assertInstanceEqual</code> tests.</li> <li>#3573 - Fixed advanced filtering on interface UI list page not working.</li> <li>#3598 - Fixed default sanitizer patterns to account for strings beginning with <code>i</code> or <code>is</code>.</li> </ul>"},{"location":"release-notes/version-1.5.html#dependencies_3","title":"Dependencies","text":"<ul> <li>#3525 - Added explicit dependency on <code>packaging</code> that had been inadvertently omitted.</li> </ul>"},{"location":"release-notes/version-1.5.html#documentation_6","title":"Documentation","text":"<ul> <li>#3548 - Changed Git Repository docs to include admonition about Github Apps.</li> <li>#3577 - Fixed <code>NautobotUIViewSet</code> documentation example for case sensitive typos.</li> <li>#3577 - Fixed <code>NautobotUIViewSet</code> documentation example not including imports.</li> </ul>"},{"location":"release-notes/version-1.5.html#v1516-2023-04-10","title":"v1.5.16 (2023-04-10)","text":""},{"location":"release-notes/version-1.5.html#fixed_8","title":"Fixed","text":"<ul> <li>#2944 - Fixed slow performance of relationships on ObjectListView.</li> <li>#3345 - Fixed missing Relationships in DynamicFilterForm.</li> <li>#3550 - Fixed display name of filtered relationships on ObjectListView.</li> </ul>"},{"location":"release-notes/version-1.5.html#documentation_7","title":"Documentation","text":"<ul> <li>#3477 - Added a note under heading Setting ViewSet Attributes to mention the caveat of not using <code>slug</code> or <code>pk</code>.</li> <li>#3557 - Added docs page for Circuit Maintenance.</li> </ul>"},{"location":"release-notes/version-1.5.html#housekeeping_4","title":"Housekeeping","text":"<ul> <li>#3502 - Updated upstream workflow to support testing apps <code>next-2.0</code> branches against <code>next</code>.</li> </ul>"},{"location":"release-notes/version-1.5.html#v1515-2023-04-04","title":"v1.5.15 (2023-04-04)","text":""},{"location":"release-notes/version-1.5.html#security_5","title":"Security","text":"<ul> <li>#3499 - Updated <code>redis</code> to 4.5.4 due to CVE-2023-28858 and CVE-2023-28859. This is not a direct dependency so will not auto-update when upgrading. Please be sure to upgrade your local environment.</li> </ul>"},{"location":"release-notes/version-1.5.html#changed_6","title":"Changed","text":"<ul> <li>#3384 - Moved extra information stored previously in <code>block sidebar</code> to <code>block header_extra</code> in page templates (<code>aggregate_list.html</code> and <code>objectchange_list.html</code>).</li> <li>#3384 - Documented <code>block header_extra</code> in <code>docs/development/templates.md</code>.</li> </ul>"},{"location":"release-notes/version-1.5.html#removed","title":"Removed","text":"<ul> <li>#3384 - Removed all remaining instances of <code>block sidebar</code> from page templates (<code>aggregate_list.html</code> and <code>objectchange_list.html</code>).</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_9","title":"Fixed","text":"<ul> <li>#3480 - Fixed an error that could be seen in certain cases with IPAddress records.</li> </ul>"},{"location":"release-notes/version-1.5.html#dependencies_4","title":"Dependencies","text":"<ul> <li>#3499 - Updated <code>redis</code> to 4.5.4. This is not a direct dependency of Nautobot so it will not auto-update when upgrading. Please update your local environment as needed.</li> </ul>"},{"location":"release-notes/version-1.5.html#documentation_8","title":"Documentation","text":"<ul> <li>#3384 - Removed documentation about <code>block sidebar</code> from <code>docs/development/templates.md</code>.</li> <li>#3446 - Added documentation links for Device Onboarding and LifeCycle Management plugins to docs.nautobot.com menu.</li> </ul>"},{"location":"release-notes/version-1.5.html#housekeeping_5","title":"Housekeeping","text":"<ul> <li>#3206 - Fixed Docker tag syntax on prerelease workflow.</li> </ul>"},{"location":"release-notes/version-1.5.html#v1514-2023-03-20","title":"v1.5.14 (2023-03-20)","text":""},{"location":"release-notes/version-1.5.html#added_6","title":"Added","text":"<ul> <li>#3033 - Added <code>JobButton</code> model to create single click execution buttons in the web UI to run jobs based on a single object.</li> <li>#3377 - Added additional choices for many data types in <code>nautobot.dcim</code>.</li> </ul>"},{"location":"release-notes/version-1.5.html#documentation_9","title":"Documentation","text":"<ul> <li>#3434 - Changed the recommended exception to raise to end jobs early.</li> </ul>"},{"location":"release-notes/version-1.5.html#housekeeping_6","title":"Housekeeping","text":"<ul> <li>#2618 - Added the ability to stand up a local dev env for SSO using Keycloak.</li> <li>#3419 - Fixed <code>test_queryset_to_csv</code> to format data fetched from the model.</li> </ul>"},{"location":"release-notes/version-1.5.html#v1513-2023-03-14","title":"v1.5.13 (2023-03-14)","text":""},{"location":"release-notes/version-1.5.html#added_7","title":"Added","text":"<ul> <li>#766 - Added option for apps to extend Nautobot's Prometheus metrics, based on <code>nautobot_capacity_metrics</code>.</li> <li>#3410 - Added <code>-time</code> index for ObjectChange records.</li> </ul>"},{"location":"release-notes/version-1.5.html#changed_7","title":"Changed","text":"<ul> <li>#3410 - Changed Homepage ObjectChange query to not join User or Content Type tables, use record cache for user entries instead.</li> </ul>"},{"location":"release-notes/version-1.5.html#removed_1","title":"Removed","text":"<ul> <li>#3407 - Removed permission checks for ContentTypeAPIViewSet.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_10","title":"Fixed","text":"<ul> <li>#3347 - Fixed (again) <code>Location.parent</code> not populating correctly in the form when editing an existing Location.</li> </ul>"},{"location":"release-notes/version-1.5.html#dependencies_5","title":"Dependencies","text":"<ul> <li>#3405 - Updated version of <code>pyopenssl</code> in Nautobot dev environment and Docker images to 23.0.0 due to an incompatibility between older versions of <code>pyopenssl</code> and version 39.x of <code>cryptography</code>. This is not a direct dependency of Nautobot so it will not auto-update when upgrading. Please update your local environment as needed.</li> <li>#3405 - Updated <code>cryptography</code> to 39.0.2. This is not a direct dependency of Nautobot so it will not auto-update when upgrading. Please update your local environment as needed.</li> </ul>"},{"location":"release-notes/version-1.5.html#documentation_10","title":"Documentation","text":"<ul> <li>#3416 - Updated Windows development documentation.</li> </ul>"},{"location":"release-notes/version-1.5.html#v1512-2023-03-03","title":"v1.5.12 (2023-03-03)","text":""},{"location":"release-notes/version-1.5.html#added_8","title":"Added","text":"<ul> <li>#3182 - Added support for assigning Config Context objects via Dynamic Groups.</li> <li>#3219 - Added support for custom fields to Dynamic Groups.</li> <li>#3220 - Added support for relationships to Dynamic Groups.</li> </ul>"},{"location":"release-notes/version-1.5.html#changed_8","title":"Changed","text":"<ul> <li>#3369 - Changed <code>RelationshipModelFilterSetMixin</code> to perform a single OR query including <code>select_related</code> for <code>source_type</code> and <code>destination_type</code> vs. two single queries for each source/destination types.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_11","title":"Fixed","text":"<ul> <li>#3295 - Fixed kombu serialization error on <code>User</code> object that arose when <code>CELERY_RESULT_EXTENDED == True</code> or when <code>enqueue_job</code> was called from within an existing <code>Job</code>.</li> <li>#3318 - Fixed a bug in prefix factory when a /0 ipv6 network is generated by faker.</li> <li>#3341 - Fixed missing <code>get_route_for_model()</code> logic for the <code>ContentType</code> and <code>Group</code> models.</li> <li>#3353 - Fixed a bug in <code>nautobot.extras.forms.mixins.CustomFieldModelFilterFormMixin</code> where the list of custom field names were not being stored on <code>self.custom_fields</code>.</li> <li>#3353 - Fixed a bug in <code>nautobot.utilities.filters.MappedPredicatesFilterMixin</code> (from which <code>SearchFilter</code> inherits) that was preventing <code>q</code> fields from being used in Dynamic Group filters.</li> </ul>"},{"location":"release-notes/version-1.5.html#dependencies_6","title":"Dependencies","text":"<ul> <li>#3388 - Updated <code>GitPython</code> to 3.1.31.</li> <li>#3388 - Updated <code>drf-yasg</code> to 1.21.5. Note: this is automatic for the Nautobot-provided containers, but because our dependency on it goes away in 2.0, it's an optional update for other installations.</li> <li>#3388 - Updated <code>netutils</code> to 1.4.1.</li> </ul>"},{"location":"release-notes/version-1.5.html#v1511-2023-02-18","title":"v1.5.11 (2023-02-18)","text":""},{"location":"release-notes/version-1.5.html#security_6","title":"Security","text":"<ul> <li>#3251 - Updated <code>oauthlib</code> to 3.2.2 due to CVE-2022-36087. This is not a direct dependency so will not auto-update when upgrading. Please be sure to upgrade your local environment.</li> <li>#3258 - Updated <code>cryptography</code> to 39.0.1 due to CVE-2023-0286, CVE-2023-23931. This is not a direct dependency so will not auto-update when upgrading. Please be sure to upgrade your local environment.</li> <li>#3320 - Updated <code>django</code> to 3.2.18 due to CVE-2023-24580.</li> </ul>"},{"location":"release-notes/version-1.5.html#added_9","title":"Added","text":"<ul> <li>#3168 - Add device name to bulk interface rename header.</li> </ul>"},{"location":"release-notes/version-1.5.html#changed_9","title":"Changed","text":"<ul> <li>#3134 - Migrate ModelMultipleChoiceFilters to NaturalKeyOrPKMultipleChoiceFilter.</li> <li>#3264 - Changed <code>DynamicGroup.objects.get_for_object()</code> to be a little more efficient.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_12","title":"Fixed","text":"<ul> <li>#3187 - Fixed <code>DynamicModelChoiceField</code>s having a generic default label when one is provided.</li> <li>#3274 - Fixed ObjectListViewMixin's filtering when exporting objects in NautobotUIViewSet.</li> <li>#3290 - Fixed an issue preventing the inclusion of <code>netutils</code> functions in Django templates.</li> <li>#3335 - Fixed inability to change filtering on custom field (selection) once filter is configured.</li> </ul>"},{"location":"release-notes/version-1.5.html#dependencies_7","title":"Dependencies","text":"<ul> <li>#3251 - Updated <code>oauthlib</code> to 3.2.2.</li> <li>#3258 - Updated <code>cryptography</code> to 39.0.1.</li> <li>#3320 - Updated <code>django</code> to 3.2.18.</li> <li>#3333 - Updated <code>netutils</code> constraint from ~1.4.0 to ^1.4.0 to permit semver upgrades.</li> </ul>"},{"location":"release-notes/version-1.5.html#documentation_11","title":"Documentation","text":"<ul> <li>#3184 - Added Git 2.0+ as a mandatory dependency in the installation instructions.</li> <li>#3224 - Updates to our deprecation policy: Prior-major REST API versions will be dropped upon next-major release.</li> <li>#3308 - Fixed incorrect documentation for object permissions.</li> <li>#3311 - Add Links to Branch Names to README.md.</li> <li>#3314 - Updated developer documentation for user and prototype branching conventions.</li> <li>#3327 - Fixed Azure AD tenant configuration documentation.</li> <li>#3332 - Fixed missing imports in Secrets Providers plugin development documentation.</li> </ul>"},{"location":"release-notes/version-1.5.html#housekeeping_7","title":"Housekeeping","text":"<ul> <li>#2580 - Fixed fragile generic view test.</li> <li>#3255 - Added <code>--cache-test-fixtures</code> command line argument to Nautobot unit and integration tests.</li> <li>#3277 - Fixed incorrect test data in <code>nautobot.extras.tests.test_api.NoteTest</code>.</li> <li>#3278 - Fixed docker development environment error when the Nautobot container tries to start before the database is ready.</li> <li>#3314 - Updated pre-commit hook to validate user namespace prefix on branch name.</li> </ul>"},{"location":"release-notes/version-1.5.html#v1510-2023-02-06","title":"v1.5.10 (2023-02-06)","text":""},{"location":"release-notes/version-1.5.html#security_7","title":"Security","text":"<ul> <li>#3227 - Updated <code>django</code> to 3.2.17 due to CVE-2023-23969.</li> </ul>"},{"location":"release-notes/version-1.5.html#added_10","title":"Added","text":"<ul> <li>#3013 - Added <code>CELERY_WORKER_PROMETHEUS_PORTS</code> configuration setting</li> <li>#3013 - Added prometheus HTTP server listening on the worker to expose worker metrics</li> <li>#3013 - Added <code>nautobot_job_duration_seconds</code> counter metric that reports on job execution</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_13","title":"Fixed","text":"<ul> <li>#3126 - Fixed interface not raising exception when adding a VLAN from a different site in tagged_vlans.</li> </ul>"},{"location":"release-notes/version-1.5.html#dependencies_8","title":"Dependencies","text":"<ul> <li>#3227 - Updated <code>django</code> to 3.2.17.</li> </ul>"},{"location":"release-notes/version-1.5.html#housekeeping_8","title":"Housekeeping","text":"<ul> <li>#3153 - Made integration test <code>CableConnectFormTestCase.test_js_functionality</code> more resilient and less prone to erroneous failures.</li> <li>#3177 - Updated VLANFactory to generate longer and more \"realistic\" VLAN names.</li> <li>#3177 - Fixed a spurious failure in BulkEditObjectsViewTestCase.test_bulk_edit_objects_with_constrained_permission.</li> <li>#3198 - Added dependencies towncrier section, removed extra newline.</li> <li>#3200 - Added <code>dependencies</code> to the list of valid change fragment types in the documentation.</li> </ul>"},{"location":"release-notes/version-1.5.html#v159-2023-01-26","title":"v1.5.9 (2023-01-26)","text":""},{"location":"release-notes/version-1.5.html#changed_10","title":"Changed","text":"<ul> <li>#3171 - Increased maximum VLAN name length from 64 characters to 255 characters.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_14","title":"Fixed","text":"<ul> <li>#3114 - Fixed Navbar scroll through top-level menu in low resolution desktop screens.</li> <li>#3155 - Aligned buttons on device component create page.</li> <li>#3169 - Fixed data mismatch in <code>ScheduledJob</code> causing celery workers to fail when running scheduled jobs created in versions prior to <code>v1.5.8</code>. \u26a0 NOTE: If your celery workers are failing on startup after upgrading to <code>v1.5.8</code>, you may need to purge the celery queue with <code>nautobot-server celery purge</code> or <code>nautobot-server celery purge -Q &lt;queues&gt;</code> to purge custom queues.</li> </ul>"},{"location":"release-notes/version-1.5.html#dependencies_9","title":"Dependencies","text":"<ul> <li>#3144 - Updated <code>netutils</code> to <code>~1.4.0</code></li> </ul>"},{"location":"release-notes/version-1.5.html#housekeeping_9","title":"Housekeeping","text":"<ul> <li>#3117 - Update Renovate config to batch lockfile updates to next.</li> </ul>"},{"location":"release-notes/version-1.5.html#v158-2023-01-23","title":"v1.5.8 (2023-01-23)","text":""},{"location":"release-notes/version-1.5.html#security_8","title":"Security","text":"<ul> <li>#3055 - Updated <code>setuptools</code> to <code>65.5.1</code> to address <code>CVE-2022-40897</code>. This is not a direct dependency so will not auto-update when upgrading. Please be sure to upgrade your local environment.</li> <li>#3082 - Updated <code>gitpython</code> to <code>~3.1.30</code> to address <code>CVE-2022-24439</code>.</li> <li>#3119 - Updated <code>future</code> to <code>0.18.3</code> due to <code>CVE-2022-40899</code>. This is not a direct dependency so will not auto-update when upgrading. Please be sure to upgrade your local environment.</li> </ul>"},{"location":"release-notes/version-1.5.html#changed_11","title":"Changed","text":"<ul> <li>#3112 - Converted eligible <code>prefetch_related()</code> to <code>select_related()</code> queries. Users should note a performance gain from this change, but note that cacheops is no longer recommended in v1.5 and this change will likely result in invalid data responses if cacheops remains enabled in your environment. Cacheops will be removed entirely in a future release.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_15","title":"Fixed","text":"<ul> <li>#2244 - Fixed an unnecessary and sometimes problematic database access from the Celery worker before it forks off to execute an individual job.</li> <li>#3097 - Fixed scrolling past select dropdown in modals.</li> <li>#3104 - Fixed bug preventing filters from being removed from list views.</li> </ul>"},{"location":"release-notes/version-1.5.html#documentation_12","title":"Documentation","text":"<ul> <li>#3077 - Updated Nautobot release checklist to reflect current branching and pull request process.</li> <li>#3103 - Added Redis troubleshooting section to installation docs.</li> <li>#3121 - Updated Config Contexts documentation to denote support for associating by Device Redundancy Group membership.</li> </ul>"},{"location":"release-notes/version-1.5.html#housekeeping_10","title":"Housekeeping","text":"<ul> <li>#3072 - In Nautobot's unit tests, all HTTP requests are now sent with SERVER_NAME set to <code>nautobot.example.com</code> instead of <code>testserver</code> (Django's default) and the test configuration for Nautobot itself sets <code>ALLOWED_HOSTS</code> to expect <code>nautobot.example.com</code>. This is intended to protect against issues such as #3065.</li> </ul>"},{"location":"release-notes/version-1.5.html#v157-2023-01-04","title":"v1.5.7 (2023-01-04)","text":""},{"location":"release-notes/version-1.5.html#security_9","title":"Security","text":"<ul> <li>#3074 - Sandboxed rendering of Jinja2 templates is now enforced by default in keeping with Jinja2 best practices. To enable template sandboxing in a Nautobot instance without needing to upgrade, add the following value to your <code>nautobot_config.py</code> and restart your Nautobot services: <code>TEMPLATES[1][\"OPTIONS\"][\"environment\"] = \"jinja2.sandbox.SandboxedEnvironment\"</code></li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_16","title":"Fixed","text":"<ul> <li>#3065 - Rolled back the changes made in 1.5.6 by #3016 to fix a breaking issue with <code>ALLOWED_HOSTS</code> and change-logging.</li> </ul>"},{"location":"release-notes/version-1.5.html#v156-2022-12-23","title":"v1.5.6 (2022-12-23)","text":""},{"location":"release-notes/version-1.5.html#added_11","title":"Added","text":"<ul> <li>#1768 - Added the display of half-depth rack items from the rear face.</li> <li>#2481 - Added <code>clone_fields</code> definition to Custom Field class.</li> <li>#2511 - Added mouseover help text for cable connect buttons on DeviceConsolePortTable, DeviceConsoleServerPortTable, DevicePowerPortTable, DeviceInterfaceTable, DeviceFrontPortTable, DeviceRearPortTable.</li> <li>#2951 - Added change logging when relationships are changed.</li> <li>#2966 - Added device name to rack elevation with images.</li> <li>#3014 - Added support for Git repositories to provide config contexts filtered by Location.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_17","title":"Fixed","text":"<ul> <li>#2898 - Disabled sorting on Computed Field column.</li> <li>#2967 - Fixed inverted device images in dark mode.</li> <li>#2989 - Fixed legacy filters displaying UUIDs instead of user-friendly display names.</li> <li>#2999 - Fixed several missing fields in the UI when bulk-adding components to a list of devices.</li> <li>#3018 - Fixed rendering of Select2 widgets in modal dialogs.</li> <li>#3028 - Fixed filter fields on advanced filter form not being alpha-sorted.</li> <li>#3036 - Fixed MultiValueUUIDFilter's value input field in ObjectListView Advanced FilterSet Form.</li> </ul>"},{"location":"release-notes/version-1.5.html#dependencies_10","title":"Dependencies","text":"<ul> <li>#2970 - Updated <code>certifi</code> to <code>2022.12.7</code> for <code>CVE-2022-23491</code>. This is a nested dependency so will not auto-update when upgrading. Please be sure to upgrade your local environment.</li> <li>#2994 - Updated <code>mkdocs-material</code> to <code>8.5.11</code>.</li> </ul>"},{"location":"release-notes/version-1.5.html#documentation_13","title":"Documentation","text":"<ul> <li>#2589 - Updated all screenshots on the README.md to gifs.</li> </ul>"},{"location":"release-notes/version-1.5.html#housekeeping_11","title":"Housekeeping","text":"<ul> <li>#2995 - Updated <code>Poetry</code> lockfile to use new v2 version format (requiring <code>Poetry&gt;=1.3</code>).</li> <li>#2995 - Updated included <code>poetry</code> version in <code>nautobot-dev</code> container to <code>1.3.1</code>.</li> <li>#3025 - Added plugin banner test back to ListObjectsViewTestCase and ensured <code>example_plugin</code> installation before running it.</li> </ul>"},{"location":"release-notes/version-1.5.html#v155-2022-12-12","title":"v1.5.5 (2022-12-12)","text":""},{"location":"release-notes/version-1.5.html#changed_12","title":"Changed","text":"<ul> <li>#2663 - Changed <code>tags</code> field in ConfigContextForm to <code>DynamicModelMultipleChoiceField</code>.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_18","title":"Fixed","text":"<ul> <li>#2962 - Fixed an error raised when logging errors about a <code>Secret</code> with an invalid <code>provider</code>.</li> <li>#2963 - Fixed 500 error when combining filtering on relationships with concrete fields.</li> </ul>"},{"location":"release-notes/version-1.5.html#housekeeping_12","title":"Housekeeping","text":"<ul> <li>#2948 - Fixed incorrect assumption in test base that <code>example_plugin</code> would always be installed.</li> </ul>"},{"location":"release-notes/version-1.5.html#v154-2022-12-02","title":"v1.5.4 (2022-12-02)","text":""},{"location":"release-notes/version-1.5.html#fixed_19","title":"Fixed","text":"<ul> <li>#2154 - Fixed SwaggerUI use of Authorization Token, API calls in SwaggerUI now use appropriate token pattern and curl command match the correct pattern.</li> <li>#2931 - Fixed title and breadcrumb rendering in NautobotUIViewSet list views.</li> <li>#2936 - Fixed NautobotUIViewSet views not being able to delete objects.</li> </ul>"},{"location":"release-notes/version-1.5.html#documentation_14","title":"Documentation","text":"<ul> <li>#86 - Added user-guide for relationships and S3 storage backends.</li> </ul>"},{"location":"release-notes/version-1.5.html#v153-2022-11-29","title":"v1.5.3 (2022-11-29)","text":""},{"location":"release-notes/version-1.5.html#fixed_20","title":"Fixed","text":"<ul> <li>#2924 - Fix deprecation warning flag check throwing error on startup with plugins installed.</li> </ul>"},{"location":"release-notes/version-1.5.html#v152-2022-11-28","title":"v1.5.2 (2022-11-28)","text":""},{"location":"release-notes/version-1.5.html#added_12","title":"Added","text":"<ul> <li>#2473 - Added <code>multipart/form-data</code> support to Job run API.</li> <li>#2723 - Added <code>nautobot.apps</code> module to provide a central location for code that is recommended for use by Nautobot apps (plugins).</li> <li>#2759 - Add prometheus metrics for health check results</li> <li>#2798 - Added <code>LOG_DEPRECATION_WARNINGS</code> configuration variable and corresponding environment-variable support.</li> </ul>"},{"location":"release-notes/version-1.5.html#changed_13","title":"Changed","text":"<ul> <li>#2644 - Changed published accepted content types for REST API to remove unsupported types.</li> <li>#2779 - Renamed many mixin classes for clarity and consistency. Aliases remain but will raise <code>DeprecationWarning</code>.</li> <li>#2779 - Reorganized filterset code and created <code>nautobot.dcim.filters.mixins</code>, <code>nautobot.extras.filters.mixins</code>, and <code>nautobot.tenancy.filters.mixins</code> submodules.</li> <li>#2798 - Changed logging of Nautobot deprecation warnings to be silent by default (can be enabled with <code>DEBUG</code> or <code>LOG_DEPRECATION_WARNINGS</code> settings).</li> <li>#2838 - Fixed filter selection box colors in dark mode.</li> <li>#2878 - Changed Upstream Workflow Job to continue on error for group, not each specific job.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_21","title":"Fixed","text":"<ul> <li>#1519 - Extending the model table columns that need to display copy button when hovered over.</li> <li>#2477 - Fixed last login time being updated during maintenance mode when remote user authentication is used.</li> <li>#2744 - Enforced required Relationships when bulk editing or creating objects that have required relationships. Bulk edit via API or UI. Bulk create via API.</li> <li>#2795 - Fixed changelog diff data to fall back to <code>object_data</code> when <code>object_data_v2</code> is not present for both <code>ObjectChange</code> instances.</li> <li>#2816 - Fixed issue where changing the interface mode first required removing tagged_vlans in a different request.</li> <li>#2833 - Fixed plugin banner issue and breadcrumb rendering issue in NautobotHTMLRenderer.</li> <li>#2837 - Fixed incorrect logic in <code>nautobot.utilities.utils.is_single_choice_field</code> that was causing valid filters to report as invalid.</li> </ul>"},{"location":"release-notes/version-1.5.html#dependencies_11","title":"Dependencies","text":"<ul> <li>#2814 - Update dependency <code>netutils</code> to <code>~1.3.0</code>.</li> </ul>"},{"location":"release-notes/version-1.5.html#documentation_15","title":"Documentation","text":"<ul> <li>#1273 - Added section \"VS Code Remote Debugging Configuration\" to development chapter in documentation.</li> <li>#2723 - Added code reference documentation for the <code>nautobot.apps</code> module.</li> <li>#2723 - Moved app (plugin) development documentation into its own section.</li> <li>#2723 - Revised \"plugin\" development documentation to refer to \"apps\" instead where appropriate.</li> <li>#2817 - Update docs to not indicate prompt, makes for better use of copy code snippet feature of MkDocs</li> </ul>"},{"location":"release-notes/version-1.5.html#housekeeping_13","title":"Housekeeping","text":"<ul> <li>#2774 - Fixed SiteFactory time_zone attribute to use only <code>pytz.common_timezones</code>.</li> <li>#2819 - Adds appropriate invoke task for running docs locally and adds how to run manually.</li> </ul>"},{"location":"release-notes/version-1.5.html#v151-2022-11-14","title":"v1.5.1 (2022-11-14)","text":""},{"location":"release-notes/version-1.5.html#added_13","title":"Added","text":"<ul> <li>#2500 - Added <code>try/except</code> block to catch <code>NoReverseMatch</code> exception in NotesSerializerMixin and return helpful message.</li> <li>#2740 - Added ObjectChangeLogView and ObjectNotesView Viewset mixins and routes.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_22","title":"Fixed","text":"<ul> <li>#2470 - Fixed incorrect automatic generation of Location slugs in the UI.</li> <li>#2757 - Fixed filters on default filter form replaces filters on dynamic filter form on submit</li> <li>#2761 - Fixed failover strategy not being displayed on Device Redundancy Group page.</li> <li>#2789 - Fixed web UI footer margin and swagger UI authorization box size.</li> <li>#2824 - Fixed an issue when filtering on nested related fields for Dynamic Groups.</li> </ul>"},{"location":"release-notes/version-1.5.html#housekeeping_14","title":"Housekeeping","text":"<ul> <li>#1813 - Updated Example_Plugin to use NautobotUIViewSet.</li> <li>#2556 - Revised TODO/FIXME comments for more clarity.</li> </ul>"},{"location":"release-notes/version-1.5.html#v150-2022-11-08","title":"v1.5.0 (2022-11-08)","text":"<p>Unchanged from v1.5.0-beta.1.</p>"},{"location":"release-notes/version-1.5.html#v150-beta1-2022-11-07","title":"v1.5.0-beta.1 (2022-11-07)","text":""},{"location":"release-notes/version-1.5.html#added_14","title":"Added","text":"<ul> <li>#873 - Made it possible to require Relationships to be included when editing or creating the related models.</li> <li>#899 - Added support for grouping of Custom Fields.</li> <li>#1468 - Added relationship columns to ObjectListTableView and disabled sorting.</li> <li>#1892 - Added <code>DeviceRedundancyGroup</code> model for representing a logical grouping of physical hardware for the purposes of high-availability.</li> <li>#2063 - Added documentation and initial support for custom celery queues.</li> <li>#2064 - Added <code>task_queues</code> job property to support custom celery queues.</li> <li>#2460 - Added search box filter form to generic list views.</li> <li>#2518 - Added <code>base_site</code> and <code>subtree</code> filters to <code>LocationFilterSet</code>, allowing for filtering Locations by their root ancestor or its Site.</li> <li>#2536 - Added <code>nautobot-server generate_test_data</code> command.</li> <li>#2536 - Added <code>TEST_USE_FACTORIES</code> and <code>TEST_FACTORY_SEED</code> optional settings.</li> <li>#2608 - Added the option for certain LocationTypes to be nestable (similar to Regions).</li> <li>#2617 - Added dynamic filter form support to specialized list views.</li> </ul>"},{"location":"release-notes/version-1.5.html#changed_14","title":"Changed","text":"<ul> <li>#1892 - Updated <code>Device</code> to have <code>device_redundancy_group</code> relationship, <code>device_redundancy_group_priority</code> numeric property.</li> <li>#1892 - Updated <code>ConfigContext</code> to have <code>ManyToManyField</code> to <code>dcim.DeviceRedundancyGroup</code> for the purposes of applying a <code>ConfigContext</code> based upon a <code>Device</code>s <code>DeviceRedundancyGroup</code> membership.</li> <li>#1998 - Added DynamicFilterForm to list views.</li> <li>#2064 - Changed default celery queue name from <code>celery</code> to <code>default</code>.</li> <li>#2615 - Changed <code>ConfigContextFilterForm</code>s <code>schema</code> filter form field to support added filter field on <code>ConfigContextFilterSet</code>.</li> <li>#2615 - Changed <code>BaseNetworkQuerySet</code> and <code>IPAddressQuerySet</code> to search both IPv6 and IPv4 when given search string is ambiguous.</li> </ul>"},{"location":"release-notes/version-1.5.html#fixed_23","title":"Fixed","text":"<ul> <li>#2266 - Fixed navbar floating over main viewport scrollbar.</li> <li>#2388 - Return \"\u2014\" instead of \"None\" when relationship column is empty.</li> <li>#2555 - Fixed broken accordion for Job list view.</li> <li>#2615 - Fixed <code>ConfigContextFilterSet</code> missing <code>schema</code> filter but existed on form.</li> <li>#2615 - Fixed <code>BaseNetworkQuerySet</code> and <code>IPAddressQuerySet</code> only searching non-abbreviated first hextet IPv6 addresses.</li> <li>#2746 - Fixed Site <code>latitude</code>, <code>longitude</code> clean method for when valid string value entered.</li> </ul>"},{"location":"release-notes/version-1.5.html#dependencies_12","title":"Dependencies","text":"<ul> <li>#1983 - Updated <code>django-taggit</code> dependency to 3.0.0.</li> <li>#2170 - Updated <code>django-constance</code> dependency to 2.9.1; updated <code>Jinja2</code> dependency to 3.1.2; updated <code>black</code> development dependency to 22.8.0.</li> <li>#2482 - Updated <code>djangorestframework</code> to <code>~3.14.0</code>, <code>drf-spectacular</code> to <code>0.24.2</code>.</li> <li>#2562 - Updated <code>django-mptt</code> dependency to 0.14.0.</li> <li>#2597 - Updated <code>GitPython</code> dependency from 3.1.27 to 3.1.29.</li> <li>#2645 - Updated <code>psycopg2-binary</code> dependency from 2.9.3 to 2.9.5.</li> <li>#2710 - Updated <code>pyuwsgi</code> minimum version from 2.0.20 to 2.0.21.</li> <li>#2711 - Updated <code>Pillow</code> package dependency from 9.2.0 to 9.3.0.</li> </ul>"},{"location":"release-notes/version-1.5.html#documentation_16","title":"Documentation","text":"<ul> <li>#270 - Added custom fields user guide to documentation.</li> </ul>"},{"location":"release-notes/version-1.5.html#housekeeping_15","title":"Housekeeping","text":"<ul> <li>#192 - Eliminated Unit Test noisy output.</li> <li>#2227 - Added generating performance report options to 'invoke unittest'.</li> <li>#2227 - Added <code>invoke performance-test</code> to <code>tasks.py</code>.</li> <li>#2281 - Added test database fixtures for Tag and Status models.</li> <li>#2282 - Added fixture factory for Region, Site, Location, LocationType.</li> <li>#2282 - Changed unittests to use Site, Region, Location, LocationType fixtures.</li> <li>#2283 - Added test fixture factories for Prefix and IPAddress models.</li> <li>#2320 - Removed PKs from Tag test database fixture.</li> <li>#2479 - Added <code>factory-boy</code> as development dependency. Added factories for Tenant, TenantGroup, RIR, and Aggregate models. Updated test runner global setup to use these factories to pre-populate baseline data.</li> <li>#2483 - Updated <code>mkdocs</code> to 1.4.2 and <code>mkdocs-material</code> to 8.5.8.</li> <li>#2484 - Updated <code>django-debug-toolbar</code> to <code>~3.7.0</code></li> <li>#2514 - Added test factories for RouteTarget, VRF, Role, VLANGroup, and VLAN models.</li> <li>#2514 - Added <code>OrganizationalModelFactory</code> and <code>PrimaryModelFactory</code> base classes.</li> <li>#2514 - Added <code>TenancyFilterTestCaseMixin</code> class.</li> <li>#2536 - Made use of test factories optional when using Nautobot test runner.</li> <li>#2551 - Updated development dependency on <code>coverage</code> to version 6.5.0.</li> <li>#2593 - Added StatusFactory and TagFactory classes.</li> <li>#2593 - Removed static test fixtures since we're using factories now instead.</li> <li>#2594 - Added factories for DCIM <code>DeviceRole</code>, <code>DeviceType</code>, <code>Manufacturer</code>, and <code>Platform</code>.</li> <li>#2615 - Changed <code>test_slug_not_modified</code> to ensure no collision on new slug source value as well as changing lookup expression from <code>__contains</code> to <code>__exact</code>.</li> <li>#2615 - Changed <code>DeleteObjectViewTestCase.get_deletable_object</code> to throw a helpful failure message when deletable object not found.</li> <li>#2615 - Fixed <code>Device(Form)TestCase</code> flaky test setup possibly not finding a <code>DeviceType</code> with a <code>Manufacturer</code> with associated <code>Platform</code>s that is full depth and 1U height.</li> <li>#2615 - Fixed <code>Location(View)TestCase</code>, <code>RouteTarget(View)TestCase</code> flaky test setup possibly finding names for <code>csv_data</code> that might include commas but not escaped.</li> <li>#2615 - Fixed <code>PrefixFactory</code> may randomly decide to create a child of <code>2.2.2.2/32</code>.</li> <li>#2615 - Fixed <code>DynamicFilterLookupExpressionTest</code>, <code>VirtualChassis(Filter)TestCase</code>, <code>Cluster(Filter)TestCase</code>, <code>VirtualMachine(Filter)TestCase</code> had too narrow of a region lookup for supported tests.</li> <li>#2615 - Fixed <code>RackGroup(Model)Test</code>, <code>Prefix(Model)Test</code>, <code>VLANGroup(Model)Test</code> may randomly choose to update to the same site.</li> <li>#2615 - Fixed <code>Tenant(View)TestCase</code>, <code>RIR(View)TestCase</code> may not find deletable objects.</li> <li>#2615 - Fixed <code>VLAN(View)TestCase</code> may not find enough <code>Site</code>s with <code>Location</code>s.</li> <li>#2686 - Added test helper method to <code>FilterTestCases</code> to find values suitable for testing multiple choice filters.</li> <li>#2691 - Fixed hard coded tests that were failing after factory fixtures were integrated.</li> <li>#2746 - Changed <code>LocationType</code> test case to not attempt to re-parent a <code>LocationType</code> with descendant <code>Locations</code>.</li> </ul>"},{"location":"release-notes/version-1.6.html","title":"Version 1.6","text":""},{"location":"release-notes/version-1.6.html#nautobot-v16","title":"Nautobot v1.6","text":"<p>This document describes all new features and changes in Nautobot 1.6.</p>"},{"location":"release-notes/version-1.6.html#release-overview","title":"Release Overview","text":""},{"location":"release-notes/version-1.6.html#added","title":"Added","text":""},{"location":"release-notes/version-1.6.html#custom-field-markdown-type-4006","title":"Custom Field \"Markdown\" Type (#4006)","text":"<p>A new Custom Field type, \"Markdown\", has been added. Custom fields of this type can store Markdown-formatted text which will be rendered in the web UI.</p>"},{"location":"release-notes/version-1.6.html#caching-of-dynamic-groups-and-content-types-4092","title":"Caching of Dynamic Groups and Content Types (#4092)","text":"<p>APIs have been added to allow for caching of the results of looking up an object's content-type or Dynamic Group memberships, as well as for looking up the members of a Dynamic Group itself. These caches are disabled by default but can be enabled by configuring the <code>DYNAMIC_GROUPS_MEMBER_CACHE_TIMEOUT</code> and <code>CONTENT_TYPE_CACHE_TIMEOUT</code> settings respectively. Apps (plugins) that make use of dynamic groups should review the documentation for the APIs to determine how and when to make use of the cache for improved performance.</p>"},{"location":"release-notes/version-1.6.html#interface-redundancy-group-2825","title":"Interface Redundancy Group (#2825)","text":"<p>Interface Redundancy Group model and related views have been added to allow logical grouping of multiple interfaces under a specific interface redundancy protocol (HSRP, VRRP, CARP, and etc).</p>"},{"location":"release-notes/version-1.6.html#installation-metrics-4047","title":"Installation Metrics (#4047)","text":"<p>A new setting, <code>INSTALLATION_METRICS_ENABLED</code>, has been added to allow Nautobot to send anonymous installation metrics to the Nautobot maintainers. This setting is <code>True</code> by default but can be changed in <code>nautobot_config.py</code> or the <code>NAUTOBOT_INSTALLATION_METRICS_ENABLED</code> environment variable.</p> <p>If the <code>INSTALLATION_METRICS_ENABLED</code> setting is <code>True</code>, running the <code>post_upgrade</code> or <code>send_installation_metrics</code> management commands will send a list of all installed apps and their versions, as well as the currently installed Nautobot and Python versions, to the Nautobot maintainers. A randomized UUID will be generated and saved in the <code>DEPLOYMENT_ID</code> setting to anonymously and uniquely identify each installation. The plugin names will be one-way hashed with SHA256 to further anonymize the data sent. This enables tracking the installation metrics of publicly released apps without disclosing the names of any private apps.</p> <p>The following is an example of the data that is sent:</p> <pre><code>{\n\"deployment_id\": \"1de3dacf-f046-4a98-8d4a-17419080db79\",\n\"nautobot_version\": \"1.6.0b1\",\n\"python_version\": \"3.10.12\",\n\"installed_apps\": {\n# \"example_plugin\" hashed by sha256\n\"3ffee4622af3aad6f78257e3ae12da99ca21d71d099f67f4a2e19e464453bee7\": \"1.0.0\"\n},\n\"debug\": true\n}\n</code></pre>"},{"location":"release-notes/version-1.6.html#platformnetwork_driver-and-related-fields-4136","title":"<code>Platform.network_driver</code> and related fields (4136)","text":"<p>The Platform model has been enhanced to include a <code>network_driver</code> database field and a <code>network_driver_mappings</code> derived property based on the <code>netutils</code> library. For example, if you set a Platform to have a <code>network_driver</code> value of <code>\"cisco_ios\"</code>, the <code>platform.network_driver_mappings</code> property will return a dictionary containing <code>ansible</code>, <code>hier_config</code>, <code>napalm</code>, <code>netmiko</code>, <code>ntc_templates</code>, <code>pyats</code>, <code>pyntc</code>, and <code>scrapli</code> keys corresponding to this entry. These properties can be referenced via the REST API and GraphQL to assist in developing and maintaining Apps, Jobs, or third-party code that interact with devices by using any of these libraries.</p> <p>If the default derivations provided by <code>netutils</code> are not suitable for your purposes, you can extend or override them by configuring the <code>NETWORK_DRIVERS</code> system setting.</p>"},{"location":"release-notes/version-1.6.html#python-311-support-3561","title":"Python 3.11 Support (#3561)","text":"<p>Nautobot 1.6.0 formally adds support for installation and operation under Python 3.11.</p>"},{"location":"release-notes/version-1.6.html#changed","title":"Changed","text":""},{"location":"release-notes/version-1.6.html#additional-hide_restricted_ui-effects-for-unauthenticated-users-3646","title":"Additional <code>HIDE_RESTRICTED_UI</code> Effects for Unauthenticated Users (#3646)","text":"<p>When <code>HIDE_RESTRICTED_UI</code> is enabled, unauthenticated users are no longer able to view the OpenAPI (Swagger) UI, the GraphiQL UI, or any configured top/bottom banners. Additionally, the page footer on the login page will not display the Nautobot server hostname in this case.</p>"},{"location":"release-notes/version-1.6.html#increased-deviceasset_tag-maximum-length-3693","title":"Increased <code>Device.asset_tag</code> maximum length (#3693)","text":"<p>The maximum length of the <code>Device.asset_tag</code> field has been increased from 50 to 100 characters.</p>"},{"location":"release-notes/version-1.6.html#changed-default-python-version-for-docker-images-4029","title":"Changed Default Python Version for Docker Images (#4029)","text":"<p>The default Python version for Nautobot Docker images has been changed from 3.7 to 3.11.</p>"},{"location":"release-notes/version-1.6.html#removed","title":"Removed","text":""},{"location":"release-notes/version-1.6.html#removed-python-37-support-3561","title":"Removed Python 3.7 Support (#3561)","text":"<p>As Python 3.7 has reached end-of-life, Nautobot 1.6 and later do not support installation or operation under Python 3.7.</p>"},{"location":"release-notes/version-1.6.html#v165-2023-11-13","title":"v1.6.5 (2023-11-13)","text":""},{"location":"release-notes/version-1.6.html#security","title":"Security","text":"<ul> <li>#4671 - Updated <code>urllib3</code> to 2.0.7 due to CVE-2023-45803. This is not a direct dependency so it will not auto-update when upgrading. Please be sure to upgrade your local environment.</li> <li>#4748 - Updated <code>Django</code> minimum version to 3.2.23 to protect against CVE-2023-46695.</li> </ul>"},{"location":"release-notes/version-1.6.html#added_1","title":"Added","text":"<ul> <li>#4649 - Added <code>device_redundancy_groups</code> field to <code>ConfigContextSerializer</code>.</li> </ul>"},{"location":"release-notes/version-1.6.html#fixed","title":"Fixed","text":"<ul> <li>#4645 - Fixed a bug where the <code>failover-strategy</code> field was required for the device redundancy group API.</li> <li>#4686 - Fixed incorrect tagging of 1.6.x Docker <code>nautobot-dev</code> images as <code>latest</code>.</li> <li>#4718 - Fixed bug in which a device's device redundancy group priority was not being set to <code>None</code> when the device redundancy group was deleted.</li> <li>#4728 - Fixed bug with JobResultFilterSet and ScheduledJobFilterSet using <code>django_filters.DateTimeFilter</code> for only exact date matches.</li> <li>#4733 - Fixed the bug that prevents retrieval of IPAddress using its address args if it was created using <code>host</code> and <code>prefix_length</code>.</li> </ul>"},{"location":"release-notes/version-1.6.html#documentation","title":"Documentation","text":"<ul> <li>#4700 - Removed incorrect <code>NAUTOBOT_DYNAMIC_GROUPS_MEMBER_CACHE_TIMEOUT</code> environment variable reference from settings documentation.</li> </ul>"},{"location":"release-notes/version-1.6.html#housekeeping","title":"Housekeeping","text":"<ul> <li>#4638 - Renamed <code>ltm/1.6</code> branch to <code>ltm-1.6</code>.</li> </ul>"},{"location":"release-notes/version-1.6.html#v164-2023-10-17","title":"v1.6.4 (2023-10-17)","text":""},{"location":"release-notes/version-1.6.html#added_2","title":"Added","text":"<ul> <li>#4361 - Added <code>SUPPORT_MESSAGE</code> configuration setting.</li> <li>#4573 - Added caching for <code>display</code> property of <code>Location</code> and <code>LocationType</code>, mitigating duplicated SQL queries in the related API views.</li> </ul>"},{"location":"release-notes/version-1.6.html#changed_1","title":"Changed","text":"<ul> <li>#4313 - Updated device search to include manufacturer name.</li> </ul>"},{"location":"release-notes/version-1.6.html#removed_1","title":"Removed","text":"<ul> <li>#4595 - Removed <code>stable</code> tagging for container builds in LTM release workflow.</li> </ul>"},{"location":"release-notes/version-1.6.html#housekeeping_1","title":"Housekeeping","text":"<ul> <li>#4619 - Fixed broken links in Nautobot README.md.</li> </ul>"},{"location":"release-notes/version-1.6.html#v163-2023-10-03","title":"v1.6.3 (2023-10-03)","text":""},{"location":"release-notes/version-1.6.html#security_1","title":"Security","text":"<ul> <li>#4446 - Updated <code>GitPython</code> to <code>3.1.36</code> to address <code>CVE-2023-41040</code>.</li> </ul>"},{"location":"release-notes/version-1.6.html#added_3","title":"Added","text":"<ul> <li>#3372 - Added ObjectPermission constraints check to <code>pre_migrate</code> management command.</li> </ul>"},{"location":"release-notes/version-1.6.html#fixed_1","title":"Fixed","text":"<ul> <li>#4396 - Fixed rack form silently dropping custom field values.</li> </ul>"},{"location":"release-notes/version-1.6.html#housekeeping_2","title":"Housekeeping","text":"<ul> <li>#4587 - Fixed <code>release.yml</code> and <code>pre-release.yml</code> workflow files to target <code>ci_integration.yml</code> in its own branch.</li> <li>#4587 - Enforced changelog requirement in <code>ci_pullrequest.yml</code> for <code>ltm/1.6</code>.</li> </ul>"},{"location":"release-notes/version-1.6.html#v162-2023-09-01","title":"v1.6.2 (2023-09-01)","text":""},{"location":"release-notes/version-1.6.html#added_4","title":"Added","text":"<ul> <li>#3913 - Added <code>url</code> field to GraphQL objects.</li> <li>#4316 - Added management command <code>nautobot-server populate_platform_network_driver</code> to help update the <code>Platform.network_driver</code> field in bulk.</li> </ul>"},{"location":"release-notes/version-1.6.html#changed_2","title":"Changed","text":"<ul> <li>#3212 - Updated Dynamic Group field filter/child group exclusivity error to be more noticeable.</li> <li>#3949 - Moved DynamicGroup <code>clean_filter()</code> call from <code>clean()</code> to <code>clean_fields()</code>, which has the impact that it will still be called by <code>full_clean()</code> and <code>validated_save()</code> but no longer called on a simple <code>clean()</code>.</li> <li>#4216 - Changed the rendering of <code>TagFilterField</code> to prevent very slow rendering of pages when large numbers of tags are defined.</li> <li>#4217 - Added a restriction that two Git repositories with the same <code>remote_url</code> cannot overlap in their <code>provided_contents</code>, as such cases are highly likely to introduce data conflicts.</li> </ul>"},{"location":"release-notes/version-1.6.html#fixed_2","title":"Fixed","text":"<ul> <li>#3949 - Fixed a ValueError when editing an existing DynamicGroup that has invalid <code>filter</code> data.</li> <li>#3949 - Fixed <code>DynamicGroup.clean_fields()</code> so that it will respect an <code>exclude=[\"filter\"]</code> kwarg by not validating the <code>filter</code> field.</li> <li>#4262 - Fixed warning message when trying to use bulk edit with no items selected.</li> </ul>"},{"location":"release-notes/version-1.6.html#documentation_1","title":"Documentation","text":"<ul> <li>#3289 - Added documentation on factory data caching.</li> <li>#4201 - Added docs for <code>InterfaceRedundancyGroup</code>.</li> </ul>"},{"location":"release-notes/version-1.6.html#housekeeping_3","title":"Housekeeping","text":"<ul> <li>#4317 - Added tests for GraphQL url field.</li> <li>#4331 - Added a \"housekeeping\" subsection to the release-notes via <code>towncrier</code>.</li> </ul>"},{"location":"release-notes/version-1.6.html#v161-2023-08-21","title":"v1.6.1 (2023-08-21)","text":""},{"location":"release-notes/version-1.6.html#changed_3","title":"Changed","text":"<ul> <li>#4242 - Changed behavior of <code>dev</code> and <code>final-dev</code> Docker images to disable installation metrics by default.</li> </ul>"},{"location":"release-notes/version-1.6.html#fixed_3","title":"Fixed","text":"<ul> <li>#4093 - Fixed dependencies required for saml support missing in final docker image.</li> <li>#4149 - Fixed a bug that prevented renaming a <code>Rack</code> if it contained any devices whose names were not globally unique.</li> <li>#4241 - Added a timeout and exception handling to the <code>nautobot-server send_installation_metrics</code> command.</li> </ul>"},{"location":"release-notes/version-1.6.html#documentation_2","title":"Documentation","text":"<ul> <li>#4256 - Introduced new <code>mkdocs</code> setting of <code>tabbed</code>.</li> <li>#4256 - Updated docs at <code>nautobot/docs/installation/nautobot.md</code> and <code>nautobot/docs/installation/http-server.md</code> to adopt tabbed interfaces.</li> <li>#4258 - Re-enabled copy-to-clipboard button in mkdocs theme.</li> </ul>"},{"location":"release-notes/version-1.6.html#housekeeping_4","title":"Housekeeping","text":"<ul> <li>#4028 - Fixed CI integration workflow to publish 'final-dev', and build only <code>final</code> images.</li> <li>#4028 - Fixed CI integration workflow <code>set-output</code> warnings.</li> <li>#4242 - Changed <code>development/nautobot_config.py</code> to disable installation metrics for developer environments by default.</li> </ul>"},{"location":"release-notes/version-1.6.html#v160-2023-08-08","title":"v1.6.0 (2023-08-08)","text":""},{"location":"release-notes/version-1.6.html#added_5","title":"Added","text":"<ul> <li>#4169 - Added environment variable <code>NAUTOBOT_SESSION_EXPIRE_AT_BROWSER_CLOSE</code> to set the <code>SESSION_EXPIRE_AT_BROWSER_CLOSE</code> Django setting which expires session cookies when the user closes their browser.</li> </ul>"},{"location":"release-notes/version-1.6.html#fixed_4","title":"Fixed","text":"<ul> <li>#3985 - Added error handling in <code>JobResult.log()</code> for the case where an object's <code>get_absolute_url()</code> raises an exception.</li> <li>#3985 - Added missing <code>get_absolute_url()</code> implementation on <code>CustomFieldChoice</code> model.</li> <li>#4175 - Changed custom field clean to not populate null default values.</li> <li>#4204 - Fixed failing Apps CI by downgrading <code>jsonschema&lt;4.18</code>.</li> <li>#4205 - Fixed failing Apps CI due to missing dependency of <code>toml</code>.</li> <li>#4222 - Fixed a bug in which <code>Job</code> <code>ChoiceVars</code> could sometimes get rendered incorrectly in the UI as multiple-choice fields.</li> </ul>"},{"location":"release-notes/version-1.6.html#dependencies","title":"Dependencies","text":"<ul> <li>#4208 - Updated django-rq to 2.8.1.</li> <li>#4209 - Relaxed constraint on prometheus-client minimum version to <code>0.14.1</code>.</li> <li>#4173 - Updated <code>drf-spectacular</code> to <code>0.26.4</code>.</li> <li>#4199 - Updated <code>cryptography</code> to <code>~41.0.3</code>. As this is not a direct dependency of Nautobot, it will not auto-update when upgrading. Please be sure to upgrade your local environment.</li> <li>#4215 - Broadened the range of acceptable <code>packaging</code> dependency versions.</li> </ul>"},{"location":"release-notes/version-1.6.html#documentation_3","title":"Documentation","text":"<ul> <li>#4184 - Added documentation detailing rack power utilization calculation.</li> </ul>"},{"location":"release-notes/version-1.6.html#v160-rc1-2023-08-02","title":"v1.6.0-rc.1 (2023-08-02)","text":""},{"location":"release-notes/version-1.6.html#added_6","title":"Added","text":"<ul> <li>#2825 - Added InterfaceRedundancyGroup and related views, forms, filtersets and table.</li> <li>#3269 - Added ability to cache <code>DynamicGroup</code> memberships in Redis to improve reverse lookup performance.</li> <li>#3269 - Added ability to cache <code>ContentType</code> lookups in Redis to improve performance.</li> <li>#3561 - Added support for Python 3.11.</li> <li>#4006 - Added Markdown custom field type.</li> <li>#4044 - Added ability to use <code>@action(detail=True)</code> decorator for registering additional non-standard <code>GET</code> views to a <code>NautobotUIViewSet</code>.</li> <li>#4047 - Added ability for Nautobot to send installation metrics.</li> <li>#4136 - Added <code>network_driver</code> database field to the <code>Platform</code> model.</li> <li>#4136 - Added <code>network_driver_mappings</code> derived attribute on the <code>Platform</code> model.</li> <li>#4136 - Added <code>CONSTANCE_DATABASE_CACHE_BACKEND = 'default'</code> to <code>settings.py</code>, which should improve performance a bit.</li> <li>#4136 - Added support for <code>NETWORK_DRIVERS</code> config setting to override or extend default network driver mappings from <code>netutils</code> library.</li> <li>#4161 - Enhanced <code>NautobotUIViewSet</code> to allow Create and Update methods to have their own form classes.</li> </ul>"},{"location":"release-notes/version-1.6.html#changed_4","title":"Changed","text":"<ul> <li>#3646 - Redirect unauthenticated users on all views to login page if <code>HIDE_RESTRICTED_UI</code> is True.</li> <li>#3646 - Only time is shown on the footer if a user is unauthenticated and <code>HIDE_RESTRICTED_UI</code> is True.</li> <li>#3693 - Increased Device model's <code>asset_tag</code> size limit to 100.</li> <li>#4029 - Changed default Python version for Docker images from 3.7 to 3.11.</li> </ul>"},{"location":"release-notes/version-1.6.html#removed_2","title":"Removed","text":"<ul> <li>#3561 - Dropped support for Python 3.7. Python 3.8 is now the minimum version required by Nautobot.</li> <li>#3561 - Removed direct dependency on <code>importlib-metadata</code>.</li> <li>#3561 - Removed direct dependency on <code>pycryptodome</code> as Nautobot does not currently use this library and hasn't for some time.</li> </ul>"},{"location":"release-notes/version-1.6.html#fixed_5","title":"Fixed","text":"<ul> <li>#4178 - Fixed JSON serialization of overloaded/non-default FilterForm fields on Dynamic Groups.</li> </ul>"},{"location":"release-notes/version-1.6.html#dependencies_1","title":"Dependencies","text":"<ul> <li>#3561 - Updated <code>celery</code> dependency to <code>~5.3.1</code>.</li> <li>#3561 - Updated <code>django-auth-ldap</code> optional dependency to <code>~4.3.0</code>.</li> <li>#3561 - Updated <code>django-cacheops</code> dependency to <code>~6.2</code>.</li> <li>#3561 - Updated <code>django-celery-beat</code> dependency to <code>~2.5.0</code>.</li> <li>#3561 - Updated <code>django-constance</code> dependency to <code>~2.9.1</code>.</li> <li>#3561 - Updated <code>django-cors-headers</code> dependency to <code>~4.2.0</code>.</li> <li>#3561 - Updated <code>django-cryptography</code> dependency to <code>~1.1</code>. Note that this dependency will be removed in Nautobot 2.0.</li> <li>#3561 - Updated <code>django-extensions</code> dependency to <code>~3.2.3</code>.</li> <li>#3561 - Updated <code>django-filter</code> dependency to <code>~23.1</code>.</li> <li>#3561 - Updated <code>django-health-check</code> dependency to <code>~3.17.0</code></li> <li>#3561 - Updated <code>django-prometheus</code> dependency to <code>~2.3.1</code>.</li> <li>#3561 - Updated <code>django-redis</code> dependency to <code>~5.3.0</code>.</li> <li>#3561 - Updated <code>django-storages</code> optional dependency to <code>~1.13.2</code>.</li> <li>#3561 - Updated <code>django-tables2</code> dependency to <code>~2.6.0</code>.</li> <li>#3561 - Updated <code>django-taggit</code> dependency to <code>~4.0.0</code>.</li> <li>#3561 - Updated <code>django-timezone-field</code> dependency to <code>~5.1</code>.</li> <li>#3561 - Updated <code>django-tree-queries</code> dependency to <code>~0.15.0</code>.</li> <li>#3561 - Updated <code>drf-spectacular</code> dependency to <code>~0.26.3</code>.</li> <li>#3561 - Updated <code>graphene-django</code> dependency to <code>~2.16.0</code>.</li> <li>#3561 - Updated <code>Jinja2</code> dependency to <code>~3.1.2</code>.</li> <li>#3561 - Updated <code>jsonschema</code> dependency to permit versions up to 4.18.x. Note that versions back to 4.7.0 are still permitted, so this dependency may not necessarily auto-upgrade when updating Nautobot.</li> <li>#3561 - Updated <code>MarkupSafe</code> dependency to <code>~2.1.3</code>.</li> <li>#3561 - Updated <code>mysqlclient</code> optional dependency to <code>~2.2.0</code>.</li> <li>#3561 - Updated <code>napalm</code> optional dependency to <code>~4.1.0</code>. Note that as a result of this update, the following indirect package dependencies are no longer included by default when installing Nautobot with NAPALM: <code>ciscoconfparse</code>, <code>dnspython</code>, <code>loguru</code>, <code>passlib</code>, <code>tenacity</code>, <code>toml</code>, <code>win32-setctime</code>.</li> <li>#3561 - Updated <code>packaging</code> dependency to <code>~23.1</code>.</li> <li>#3561 - Updated <code>Pillow</code> dependency to <code>~10.0.0</code>.</li> <li>#3561 - Updated <code>prometheus-client</code> dependency to <code>~0.17.1</code>.</li> <li>#3561 - Updated <code>social-auth-core</code> optional dependency to <code>~4.4.2</code>.</li> <li>#3561 - Updated <code>social-auth-app-django</code> dependency to <code>~5.2.0</code>.</li> <li>#3561 - Updated various development-only dependencies to the latest available versions.</li> </ul>"},{"location":"release-notes/version-1.6.html#documentation_4","title":"Documentation","text":"<ul> <li>#4118 - Added documentation for troubleshooting integration test failures via VNC.</li> </ul>"},{"location":"release-notes/version-2.0.html","title":"Version 2.0","text":""},{"location":"release-notes/version-2.0.html#nautobot-v20","title":"Nautobot v2.0","text":"<p>This document describes all new features and changes in Nautobot 2.0.</p> <p>Note</p> <p>Please thoroughly review the release overview below to see what changes may affect you during upgrade. Our \"Upgrading from Nautobot v1.X\" guide provides a lot of information around pre- and post-migration helpers we have written that should assist you in a successful 2.0 upgrade. If you have any questions, please reach out to us on the #nautobot channel on Network to Code's Slack community or GitHub Discussions.</p>"},{"location":"release-notes/version-2.0.html#release-overview","title":"Release Overview","text":""},{"location":"release-notes/version-2.0.html#added","title":"Added","text":""},{"location":"release-notes/version-2.0.html#alpha-ui-20-3142","title":"Alpha UI 2.0 (#3142)","text":"<p>Nautobot 2.0 includes an \"alpha\" version of a new user interface (UI) for Nautobot, based on the React web framework.</p> <p>Changed in version 2.0.3</p> <p>This UI is disabled by default but can be enabled as an option by setting the <code>ENABLE_ALPHA_UI</code> setting to <code>True</code> in your <code>nautobot_config.py</code> and then running <code>nautobot-server build_ui</code>.</p> <p>Users can switch between the existing UI and new UI for views supported in the new UI via a \"View in New UI\" link in the page footer of the existing UI and a \"Return to Legacy UI\" link in the left sidebar of the new UI.</p> <p>Tip</p> <p>The new UI also includes a \"Submit Feedback\" link that can be used to easily submit feedback regarding the new UI to the Nautobot maintainers.</p> <p>As of Nautobot release 2.0.0, the new UI supports read-only access to Locations, Device Types, Devices, Prefixes, and IP Addresses; these views will be enhanced and refined, and support for additional models and workflows will be added, throughout the Nautobot 2.x release lifecycle.</p> <p>Info</p> <p>As of Nautobot release 2.0.0, the new UI, as an alpha feature, does not yet support Nautobot Apps (plugins), but this capability will be added and supported in a future release.</p>"},{"location":"release-notes/version-2.0.html#assign-an-ip-address-to-multiple-interfaces-2403","title":"Assign an IP Address to Multiple Interfaces (#2403)","text":"<p>Introduced the ability to assign one <code>IPAddress</code> to multiple <code>Interfaces</code>/<code>Devices</code> and <code>VMInterfaces</code>/<code>VirtualMachines</code> by creating a many to many relationship between <code>IPAddress</code> and <code>Interface</code>/<code>VMInterface</code> models represented as a through table model <code>IPAddressToInterface</code>. This feature allows you to model a network environment where you have anycast <code>IPAddresses</code> are shared extensively among a large number of <code>Devices</code>/<code>VirtualMachines</code>.</p> <p>As a result of this feature and associated changes, you can no longer assign <code>Interfaces</code>/<code>VMInterfaces</code> during bulk creation of <code>IPAddresses</code>, but a separate bulk-create endpoint has been introduced to allow the bulk import of <code>IPAddressToInterface</code> assignments.</p>"},{"location":"release-notes/version-2.0.html#generic-role-model-1063","title":"Generic Role Model (#1063)","text":"<p><code>DeviceRole</code>, <code>RackRole</code>, IPAM <code>Role</code>, and <code>IPAddressRoleChoices</code> have all been merged into a single generic <code>Role</code> model. A <code>Role</code>can now be created and associated to one or more of the content-types that support reference to a <code>role</code>. These model content-types include <code>dcim.device</code>, <code>dcim.rack</code>, <code>virtualization.virtualmachine</code>, <code>ipam.ipaddress</code>, <code>ipam.prefix</code>, and <code>ipam.vlan</code>.</p>"},{"location":"release-notes/version-2.0.html#ipam-namespaces-3337","title":"IPAM Namespaces (#3337)","text":"<p>The new Namespace model expands on the functionality previously provided by <code>VRF.enforce_unique</code> and the <code>ENFORCE_GLOBAL_UNIQUE</code> settings flag, both of which have now been removed. Within a namespace, all VRFs, prefixes, and IP addresses must be unique and non-duplicated. For more details please refer to the documentation.</p>"},{"location":"release-notes/version-2.0.html#natural-key-support-across-nautobot-models-2900","title":"Natural Key Support Across Nautobot Models (#2900)","text":"<p>Nautobot's <code>BaseModel</code> base class and related classes now implement automatic support for Django natural keys for lookup and referencing. For example:</p> <pre><code>&gt;&gt;&gt; DeviceType.objects.first().natural_key()\n['MegaCorp', 'Model 9000']\n&gt;&gt;&gt; DeviceType.objects.get_by_natural_key(\"MegaCorp\", \"Model 9000\")\n&lt;DeviceType: Model 9000&gt;\n</code></pre> <p>Developers can refer to the documentation on natural keys for details on how to support and use this feature.</p> <p>Two new configuration settings, <code>DEVICE_NAME_AS_NATURAL_KEY</code> and <code>LOCATION_NAME_AS_NATURAL_KEY</code>, have been added to allow an administrator to customize the natural-key behavior of these two widely-used models.</p>"},{"location":"release-notes/version-2.0.html#rest-api-query-depth-parameter-3042","title":"REST API Query Depth Parameter (#3042)","text":"<p>Added the <code>?depth</code> query parameter in Nautobot v2.X to replace the <code>?brief</code> parameter in the REST API. It enables nested serialization functionality and offers a more dynamic and comprehensive browsable API. It allows users greater control of the API response data and it is available for both retrieving a single object and a list of objects. This parameter is a positive integer value that can range from 0 to 10. To learn more more, check out the documentation on the <code>?depth</code> query parameter.</p>"},{"location":"release-notes/version-2.0.html#site-fields-added-to-location-2954","title":"Site Fields Added to Location (#2954)","text":"<p>Added Site Model Fields to Location. Location Model now has <code>asn</code>, <code>comments</code>, <code>contact_email</code>, <code>contact_name</code>, <code>contact_phone</code>, <code>facility</code>, <code>latitude</code>, <code>longitude</code>, <code>physical_address</code>, <code>shipping_address</code> and <code>time_zone</code> fields.</p>"},{"location":"release-notes/version-2.0.html#changed","title":"Changed","text":""},{"location":"release-notes/version-2.0.html#aggregate-model-migrated-to-prefix-3302","title":"Aggregate Model Migrated to Prefix (#3302)","text":"<p>The <code>ipam.Aggregate</code> model has been removed and all existing aggregates will be migrated to <code>ipam.Prefix</code> with <code>type</code> set to \"Container\". The <code>Aggregate.date_added</code> field will be migrated to <code>Prefix.date_allocated</code> and changed from a Date field to a DateTime field with the time set to <code>00:00</code>. <code>Aggregate.tenant</code>, <code>Aggregate.rir</code> and <code>Aggregate.description</code> will be migrated over to the same fields on <code>Prefix</code>.</p> <p>See the upgrade guide for more details on the data migration.</p>"},{"location":"release-notes/version-2.0.html#changed-created-field-to-datetimefield-for-changeloggedmodel-2076","title":"Changed <code>created</code> Field to DateTimeField for ChangeLoggedModel (#2076)","text":"<p>The <code>created</code> field of all models that inherit from <code>ChangedLoggedModel</code>, which includes <code>OrganizationalModel</code> and <code>PrimaryModel</code> and therefore most objects in the core data model, has been changed from a <code>DateField</code> to a <code>DateTimeField</code> for added granularity. Preexisting records will show as created at midnight UTC on their original creation date.</p> <p>All such objects may now be filtered by date or time or a combination of both. All other date-based behavior such as filtering works as it did before.</p>"},{"location":"release-notes/version-2.0.html#collapsed-nautobotutilities-into-nautobotcore-2721","title":"Collapsed <code>nautobot.utilities</code> into <code>nautobot.core</code> (#2721)","text":"<p><code>nautobot.utilities</code> no longer exists as a separate Python module or Django app. Its functionality has been collapsed into the <code>nautobot.core</code> app. See details at Python Code Location Changes.</p>"},{"location":"release-notes/version-2.0.html#collapsed-region-and-site-models-into-location-2517","title":"Collapsed Region and Site Models into Location (#2517)","text":""},{"location":"release-notes/version-2.0.html#initial-data-migration","title":"Initial Data Migration","text":"<p>The <code>Site</code> and <code>Region</code> models have been removed in v2.0 and have been replaced with <code>Location</code> of specific <code>LocationType</code>. As a result, the existing <code>Site</code> and <code>Region</code> data will be migrated to corresponding <code>LocationType</code> and <code>Location</code> objects. Here is what to expect:</p> <ol> <li>If you do not have any <code>Site</code> and <code>Region</code> instances in your existing database, running this data migration will do nothing.</li> <li>If you only have <code>Region</code> instances in your existing database, a <code>LocationType</code> named Region will be created and for each legacy <code>Region</code> instance, a corresponding <code>Location</code> instance with the same attributes (<code>id</code>, <code>name</code>, <code>description</code>, etc.) and hierarchy will be created.</li> <li> <p>If you only have <code>Site</code> instances in your existing database:</p> <ul> <li> <p>A <code>LocationType</code> named Site will be created and every preexisting root level <code>LocationType</code> in your database will be updated to have the new Site <code>LocationType</code> as their parent.</p> </li> <li> <p>For each legacy <code>Site</code> instance, a corresponding <code>Location</code> instance with the same attributes (<code>id</code>, <code>name</code>, <code>description</code>, <code>tenant</code>, <code>facility</code>, <code>asn</code>, <code>latitude</code>, <code>longitude</code>, etc.) will be created, and any preexisting <code>Locations</code> in your database will be updated to have the appropriate \"site\" <code>Locations</code> as their parents.</p> </li> <li> <p>Model instances that had a <code>site</code> field (<code>CircuitTermination</code>, <code>Device</code>, <code>PowerPanel</code>, <code>RackGroup</code>, <code>Rack</code>, <code>Prefix</code>, <code>VLANGroup</code>, <code>VLAN</code>, <code>Cluster</code>) assigned and did not have a <code>location</code> attribute assigned will be updated to have their <code>location</code> point to the new <code>Location</code> corresponding to that <code>Site</code>. All other attributes on these models will remain unchanged.</p> </li> <li> <p>Model instances that were previously associated to the <code>ContentType</code> for <code>Site</code> (<code>ComputedField</code>, <code>CustomField</code>, <code>CustomLink</code>, <code>ExportTemplate</code>, <code>ImageAttachment</code>, <code>JobHook</code>, <code>Note</code>, <code>Relationship</code>, <code>Status</code>, <code>Tag</code> and <code>Webhook</code>) will have their <code>ContentType</code> replaced with <code>Location</code>. All other attributes on these models will remain unchanged.</p> </li> </ul> <p>For Example:</p> <ul> <li> <p>We will start with a <code>Site</code> instance with name AMS01 as the base <code>Site</code> for two top-level <code>Location</code> objects with names root-01 and root-02 respectively.</p> </li> <li> <p>During the data migration, a <code>LocationType</code> named Site will be created, and a <code>Location</code> of Site <code>LocationType</code> named AMS01 with all the information (<code>asn</code>, <code>latitude</code>, etc.) from the base <code>Site</code> will be created.</p> </li> <li> <p>The <code>Location</code> objects named root-01 and root-02 will have this AMS01 <code>Location</code> set as their <code>parent</code>.</p> </li> </ul> </li> <li> <p>If you have both <code>Site</code> and <code>Region</code> instances in your existing database:</p> <ul> <li> <p>A <code>LocationType</code> named Region will be created.</p> </li> <li> <p>For each legacy <code>Region</code> instance, a corresponding <code>Location</code> instance with the same attributes (<code>id</code>, <code>name</code>, <code>description</code>, etc.) will be created.</p> </li> <li> <p>A <code>LocationType</code> named Site will be created with the new <code>LocationType</code> named Region set as its <code>parent</code>.</p> </li> <li> <p>Every pre-existing root-level <code>LocationType</code> in your database will be updated to have the new <code>LocationType</code> named Site as its <code>parent</code>.</p> </li> <li> <p>For each legacy <code>Site</code> instance, a corresponding \"site\" <code>Location</code> instance with the same attributes (<code>id</code>, <code>name</code>, <code>description</code>, <code>tenant</code>, <code>facility</code>, <code>asn</code>, <code>latitude</code>, <code>longitude</code>, etc.) will be created with its parent set to the corresponding \"region\" <code>Location</code> if any.</p> <ul> <li>If you have <code>Site</code> instances in your database without a <code>Region</code> assigned to them, one additional <code>Location</code> named Global Region of <code>LocationType</code> Region will be created and each <code>Location</code> of <code>LocationType</code> Site created from the legacy region-less <code>Site</code> instances will have the Global Region <code>Location</code> as their parent.</li> </ul> </li> <li> <p>Model instances that had a <code>site</code> attribute (<code>CircuitTermination</code>, <code>Device</code>, <code>Location</code>, <code>PowerPanel</code>, <code>Rack</code>, <code>RackGroup</code>, <code>Prefix</code>, <code>VLANGroup</code>, <code>VLAN</code>, <code>Cluster</code>) assigned and did not have a <code>location</code> attribute assigned will be updated to have their <code>location</code> point to the new <code>Location</code> of <code>LocationType</code> Site. All other attributes on these models will remain unchanged.</p> </li> <li> <p>Model instances that were previously associated to the <code>ContentType</code> for <code>Site</code>  or <code>Region</code> (<code>ComputedField</code>, <code>CustomField</code>, <code>CustomLink</code>, <code>ExportTemplate</code>, <code>ImageAttachment</code>, <code>JobHook</code>, <code>Note</code>, <code>Relationship</code>, <code>Status</code>, <code>Tag</code> and <code>Webhook</code>) will have their <code>ContentType</code> replaced with <code>Location</code>. All other attributes on these models will remain unchanged.</p> </li> </ul> <p>For Example:</p> <ul> <li> <p>There are two <code>Site</code> instances and one <code>Region</code> instance in your existing database. The <code>Region</code> with name America has one child <code>Site</code> instance named AMS01. And the other <code>Site</code> instance named AUS01 is not associated with any <code>Region</code> (<code>region</code> attribute is set to <code>None</code>).</p> </li> <li> <p>The <code>Site</code> AMS01 is the base <code>Site</code> for two top-level <code>Location</code> objects with names root-01 and root-02 respectively.</p> </li> <li> <p>During the data migration, a <code>LocationType</code> named Region and a <code>Location</code> of this <code>LocationType</code> named America with all the same information will be created.</p> </li> <li> <p>The <code>LocationType</code> named Site with its <code>parent</code> set as the new <code>LocationType</code> Region and a <code>Location</code> of <code>LocationType</code> named AMS01 with all the same information (<code>asn</code>, <code>latitude</code>, etc.) will be created. The <code>Location</code> AMS01 will have <code>Location</code> America as its <code>parent</code> and each - <code>Location</code> root-01 and root-02 will have <code>Location</code> AMS01 as its <code>parent</code>.</p> </li> <li> <p>Finally, the <code>Site</code> instance AUS01, since it does not have a <code>Region</code> instance associated with it, its corresponding <code>Location</code> AUS01 will have a new <code>Location</code> named Global Region of <code>LocationType</code> Region as its <code>parent</code>.</p> </li> <li> <p>In addition, legacy <code>Site</code> instance with name AMS01 also has three <code>Device</code> instances associated with it named ams01-edge-01, ams01-edge-02,  and ams01-edge-03.</p> </li> <li> <p>However, ams01-edge-01 only has its <code>site</code> attribute set as <code>Site</code> AMS01 whereas ams01-edge-02 and ams01-edge-03 have both its <code>site</code> and <code>location</code> attributes set <code>Site</code> AMS01 and <code>Location</code> root-01 respectively.</p> </li> <li> <p>During the data migration, ams01-edge-01's <code>location</code> attribute will point to the new <code>Location</code> of <code>LocationType</code> Site with name AMS01 while devices ams01-edge-02 and ams01-edge-03 will remain unchanged.</p> </li> </ul> </li> </ol>"},{"location":"release-notes/version-2.0.html#remove-site-and-region-related-fields-from-models","title":"Remove Site and Region Related Fields from Models","text":"<p><code>Region</code> and <code>Site</code> relationships are being removed from these models: <code>CircuitTermination</code>, <code>Device</code>, <code>Location</code>, <code>Rack</code>, <code>RackGroup</code>, <code>PowerFeed</code>, <code>PowerPanel</code>, <code>ConfigContext</code>, <code>Prefix</code>, <code>VLAN</code>, <code>VLANGroup</code>, <code>Cluster</code>.</p> <p>The <code>ContentType</code> for <code>Region</code> and <code>Site</code> are being replaced with <code>Location</code> on these models: <code>ComputedField</code>, <code>CustomField</code>, <code>CustomLink</code>, <code>ExportTemplate</code>, <code>ImageAttachment</code>, <code>JobHook</code>, <code>Note</code>, <code>Relationship</code>, <code>Status</code>, <code>Tag</code> and <code>Webhook</code>.</p> <p>The <code>region</code> and <code>site</code> fields are being removed in the <code>filter</code> data of <code>DynamicGroup</code> objects. The previously associated values are being added to the existing <code>location</code> field and its associated list of filter values or to a new <code>location</code> key with an empty list if one does not exist.</p> <p>Check out the API and UI endpoints changes incurred by the changes stated above in the \"Upgrading from Nautobot v1.X\" guide.</p> <p>Check out the Region and Site Related Data Model Migration Guide to learn how to migrate your Nautobot Apps and data models from <code>Site</code> and <code>Region</code> to <code>Location</code>.</p>"},{"location":"release-notes/version-2.0.html#corrected-filter-fields-2804","title":"Corrected Filter Fields (#2804)","text":"<p>Warning</p> <p>This change may introduce breaking changes to your existing <code>DynamicGroup</code> filters, <code>ObjectPermission</code> filters, <code>Relationship</code> filters, and any other saved references to these fields. You should review any existing instances of these models before and after upgrading your production environment for any potentially subtle change. Please refer to the Upgrading from Nautobot v1.X guide for more details.</p> <p>There were also instances where a foreign-key related field (e.g. <code>console_ports</code>) was incorrectly mapped to a boolean membership filter (e.g. <code>has_console_ports</code>), making it impossible to filter based on specific values of the foreign key:</p> <p>For example in v1.x:</p> <p><code>/dcim/devices/?console_ports=True</code> and <code>/dcim/devices/?has_console_ports=True</code> are functionally the same and this behavior is incorrect.</p> <p>This has been addressed in v2.x as follows:</p> <p><code>console_ports</code> and similar filters are taking foreign key UUIDs as input values and can be used in this format: <code>/dcim/devices/?console_ports=&lt;uuid&gt;</code> whereas <code>has_console_ports</code> and similar filters remain the same.</p> <p>Check out the specific changes documented in the table at UI and REST API Filter Changes</p>"},{"location":"release-notes/version-2.0.html#enhanced-filter-fields-2804","title":"Enhanced Filter Fields (#2804)","text":"<p>Warning</p> <p>This change may introduce breaking changes to your existing <code>DynamicGroup</code> filters, <code>ObjectPermission</code> filters, <code>Relationship</code> filters, and any other saved references to these fields. You should review any existing instances of these models before and after upgrading your production environment for any potentially subtle change. Please refer to the Upgrading from Nautobot v1.X guide for more details.</p> <p>Many filter fields have been enhanced to enable filtering by both names and UUID primary keys.</p> <p>For example in v1.X, to filter <code>RackGroups</code> with a specific <code>parent</code> value in the UI or make changes to them via the REST API, you could only to input slugs as the filter values:</p> <p><code>/dcim/rack-groups/?parent=&lt;slug&gt;</code></p> <p>Now in v2.x, you are able to filter those <code>RackGroups</code> by their parent(s) names or UUID primary keys:</p> <p><code>/dcim/rack-groups/?parent=&lt;name&gt;</code> or <code>/dcim/rack-groups/?parent=&lt;uuid&gt;</code></p> <p>Check out the specific changes documented in the table at UI and REST API Filter Changes</p>"},{"location":"release-notes/version-2.0.html#generic-role-model-1063_1","title":"Generic Role Model (#1063)","text":"<p>The <code>DeviceRole</code>, <code>RackRole</code>, <code>ipam.Role</code>, and <code>IPAddressRoleChoices</code> have all been removed and replaced with a <code>extras.Role</code> model, This means that all references to any of the replaced models and choices now points to this generic role model.</p> <p>In addition, the <code>role</code> field of the <code>IPAddress</code> model has also been changed from a choice field to a foreign key related field to the <code>extras.Role</code> model.</p>"},{"location":"release-notes/version-2.0.html#job-overhaul-765","title":"Job Overhaul (#765)","text":"<p>Within Nautobot 2.0, Jobs has undergone significant changes within the overall functionality of Jobs along with migration for existing 1.x Jobs operation. Database changes for Jobs will affect DryRun functionality. Other significant changes to Jobs in 2.0 provide greater interoperability with Celery for registering, logging, and tracking however 2.0 will be moving away from previous backwards compatibility scripts. These improvements will simplify Job implementation and help reduce administration overhead for status tracking on completions and/or failures. For more details, refer to Migrating Jobs from Nautobot v1.X to Nautobot v2.0.</p>"},{"location":"release-notes/version-2.0.html#prefix-is_pool-field-and-container-status-replaced-by-new-field-prefixtype-1362","title":"Prefix <code>is_pool</code> Field and \"Container\" Status replaced by New Field <code>Prefix.type</code> (#1362)","text":"<p>A new <code>type</code> field was added to <code>Prefix</code> to replace the <code>is_pool</code> boolean field and the \"Container\" status. The <code>type</code> field can be set to \"Network\", \"Pool\" or \"Container\", with \"Network\" being the default.</p> <p>Existing prefixes with a status of \"Container\" will be migrated to the \"Container\" type. Existing prefixes with <code>is_pool</code> set will be migrated to the \"Pool\" type. Prefixes with both <code>is_pool</code> set and a status of \"Container\" will be migrated to the \"Pool\" type.</p> <p>The \"Container\" status will be removed and all prefixes will be migrated to the \"Active\" status if it exists. If the \"Active\" status was deleted, prefixes will be migrated to the first available prefix status in the database that is not \"Container\".</p>"},{"location":"release-notes/version-2.0.html#renamed-database-foreign-keys-and-related-names-2520","title":"Renamed Database Foreign Keys and Related Names (#2520)","text":"<p>Warning</p> <p>This change may introduce breaking changes to your existing <code>DynamicGroup</code> filters, <code>ObjectPermission</code> filters, <code>Relationship</code> filters, and any other saved references to these fields. You should review any existing instances of these models before and after upgrading your production environment for any potentially subtle change. Please refer to the Upgrading from Nautobot v1.X guide for more details.</p> <p>Some Foreign Key fields have been renamed to follow a more self-consistent pattern across the Nautobot app. This change is aimed to offer more clarity and predictability when it comes to related object database operations:</p> <p>For example in v1.x to create a circuit object with <code>type</code> \"circuit-type-1\", you would do:</p> <pre><code>Circuit.objects.create(\ncid=\"Circuit 1\",\nprovider=\"provider-1\",\ntype=\"circuit-type-1\",\nstatus=\"active\",\n)\n</code></pre> <p>and to filter <code>Circuit</code> objects of <code>type</code> \"circuit-type-2\", you would do:</p> <pre><code>Circuit.objects.filter(type=\"circuit-type-2\")\n</code></pre> <p>Now in v2.x, we have renamed the Foreign Key field <code>type</code> on Circuit Model to <code>circuit_type</code>, because this naming convention made it clearer that this Foregin Key field is pointing to the model <code>CircuitType</code>. The same operations would look like:</p> <pre><code>Circuit.objects.create(\ncid=\"Circuit 1\",\nprovider=\"provider-1\",\ncircuit_type=\"circuit-type-1\",\nstatus=\"active\",\n)\n</code></pre> <pre><code>Circuit.objects.filter(circuit_type=\"circuit-type-2\")\n</code></pre> <p>Check out more Foreign Key related changes documented in the table Renamed Database Fields</p> <p>In addition to the changes made to Foreign Key fields' own names, some of their <code>related_names</code> are also renamed:</p> <p>For example in v1.x, to query <code>Circuit</code> objects with <code>CircuitTermination</code> instances located in sites [\"ams01\", \"ams02\", \"atl03\"], you would do:</p> <pre><code>Circuit.objects.filter(terminations__site__in=[\"ams01\", \"ams02\", \"atl03\"])\n</code></pre> <p>Now in v2.x, we have renamed the Foreign Key field <code>circuit</code>'s <code>related_name</code> attribute <code>terminations</code> on <code>CircuitTermination</code> Model to <code>circuit_terminations</code>, the same operations would look like:</p> <pre><code>Circuit.objects.filter(circuit_terminations__site__in=[\"ams01\", \"ams02\", \"atl03\"])\n</code></pre> <p>Check out more <code>related-name</code> changes documented in the table Renamed Database Fields</p>"},{"location":"release-notes/version-2.0.html#renamed-filter-fields-2804","title":"Renamed Filter Fields (#2804)","text":"<p>Warning</p> <p>This change may introduce breaking changes to your existing <code>DynamicGroup</code> filters, <code>ObjectPermission</code> filters, <code>Relationship</code> filters, and any other saved references to these fields. You should review any existing instances of these models before and after upgrading your production environment for any potentially subtle change. Please refer to the Upgrading from Nautobot v1.X guide for more details.</p> <p>Some filter fields have been renamed to reflect their functionalities better.</p> <p>For example in v1.X, to filter <code>FrontPorts</code> that has a cable attached in the UI or make changes to them via Rest API, you would use the <code>cabled</code> filter:</p> <p><code>/dcim/front-ports/?cabled=True</code></p> <p>Now in v2.x, you would instead use the <code>has_cable</code> filter which has a more user-friendly name:</p> <p><code>/dcim/front-ports/?has_cable=True</code></p> <p>Check out the specific changes documented in the table at UI and REST API Filter Changes</p>"},{"location":"release-notes/version-2.0.html#rest-api-versioning-behavior-2799","title":"REST API Versioning Behavior (#2799)","text":"<p>In Nautobot 2.0 and later, the REST API defaults, when the caller doesn't request a specific API version, to using the latest available version of the REST API. This is a change from Nautobot 1.x, where the default behavior was to use the 1.2 version of the REST API even when newer versions were available.</p>"},{"location":"release-notes/version-2.0.html#revamped-csv-import-and-export-254","title":"Revamped CSV Import and Export (#254)","text":"<p>Exporting objects and lists of objects to CSV format has been totally reimplemented in a new framework for ease of use and maintainability. Instead of accessing <code>http://nautobot/&lt;app&gt;/&lt;model&gt;/?export</code> users can now use the URL pattern <code>http://nautobot/api/&lt;app&gt;/&lt;model&gt;/?format=csv</code> (the \"Export\" links in the UI have of course been updated accordingly), as the new CSV rendering for exports is based on the REST API serializer definitions. This results in substantially more comprehensive CSV representations of many models.</p> <p>Conversely, importing objects from CSV format has also been reimplemented in the same new framework. The REST API can now accept CSV files as well as the existing JSON support, and the UI for importing CSVs uses this same framework behind the scenes.</p> <p>Warning</p> <p>The Nautobot 2.0 CSV formats for exports and imports are not backwards-compatible with the Nautobot 1.x CSV formats. In general, the CSV formats are subject to refinement in future releases, and should not be considered a stable API for data portability between differing Nautobot versions.</p> <p>An immediate benefit users can notice from this reimplementation is that CSVs should now generally be \"round-trip\" capable, meaning that you can export a set of records to CSV format and then import that CSV into a different Nautobot instance (or delete the records and use the CSV to recreate them) without needing to \"massage\" the CSV into a different set of columns or fields. One caveat to this is many-to-many fields (such as <code>VRF.import_targets</code> or <code>Interface.tagged_vlans</code>), which are not currently included in CSV exports or supported for CSV import, with the exception of object <code>tags</code> which are supported. Support for many-to-many export and import via CSV may be added in a future release.</p> <p>A benefit to App developers is that data models no longer need to define a <code>csv_headers</code> attribute or implement a <code>to_csv</code> method, because implementing the REST API for a model is now sufficient to enable CSV import/export support for that model. Similarly, there is no longer a need to implement a <code>CSVForm</code> for each model in order to support CSV import.</p> <p>In addition to the above improvements, you can now reference related objects in your CSV by using a combination of unique fields. For instance:</p> <p>Instead of:</p> <pre><code>name,rack\nDevice one,7f3ca431-8103-45cc-a9ce-b94c1f784a1d\n</code></pre> <p>you can use:</p> <pre><code>name,rack__location__name,rack__name\nDevice one,Equinix DC6,R204\n</code></pre> <p>This enhancement allows you to specify related objects using their unique attributes, making data import even more intuitive and flexible.</p>"},{"location":"release-notes/version-2.0.html#removed","title":"Removed","text":""},{"location":"release-notes/version-2.0.html#brief-rest-api-query-parameter-3042","title":"Brief REST API Query Parameter (#3042)","text":"<p>Support for <code>?brief</code> REST API query parameter and <code>Nested*Serializers</code> have been removed in Nautobot v2.X. They are replaced by the new <code>?depth</code> query parameter.</p>"},{"location":"release-notes/version-2.0.html#django-cacheops-1721","title":"<code>django-cacheops</code> (#1721)","text":"<p>Nautobot no longer uses <code>django-cacheops</code> for caching of database queries or other information. In some cases this has been replaced by the use of Django's native Redis caching capabilities.</p> <p>The configuration settings <code>CACHEOPS</code>, <code>CACHEOPS_DEFAULTS</code>, <code>CACHEOPS_DEGRADE_ON_FAILURE</code>, <code>CACHEOPS_ENABLED</code>, <code>CACHEOPS_HEALTH_CHECK_ENABLED</code>, <code>CACHEOPS_REDIS</code>, etc. are now unused by Nautobot and may be removed from your configuration.</p>"},{"location":"release-notes/version-2.0.html#legacy-managepy-removed-1634","title":"Legacy <code>manage.py</code> Removed (#1634)","text":"<p>When we launched Nautobot we introduced the <code>nautobot-server</code> command as the primary entrypoint to managing your application, replacing the legacy <code>manage.py</code> script that is common with Django-based applications. The original <code>manage.py</code> was left there initially in v1.0.0 as a fallback, however it is no longer needed, so we have removed it in Nautobot 2.0.</p>"},{"location":"release-notes/version-2.0.html#redundant-filter-fields-2804","title":"Redundant Filter Fields (#2804)","text":"<p>Warning</p> <p>This change may introduce breaking changes to your existing <code>DynamicGroup</code> filters, <code>ObjectPermission</code> filters, <code>Relationship</code> filters, and any other saved references to these fields. You should review any existing instances of these models before and after upgrading your production environment for any potentially subtle change. Please refer to the Upgrading from Nautobot v1.X guide for more details.</p> <p>As a part of breaking changes made in v2.X, shadowed filter/filterset fields are being removed throughout Nautobot.</p> <p>In Nautobot 1.x, for some of the foreign-key related fields:     - The field was shadowed for the purpose of replacing the PK filter with a lookup-based on a more human-readable value (typically <code>slug</code>, if available).     - A PK-based filter was available as well, generally with a name suffixed by <code>_id</code></p> <p>Now these two filter fields will be replaced by a single filter field that can support both names and UUID primary keys as inputs; As a result, PK-based filters suffixed by <code>_id</code> will no longer be supported in v2.0.</p> <p>For example in v1.X, to filter <code>Circuits</code> with a specific <code>provider</code> value in the UI or make changes to them via the REST API with a UUID primary key, you would use:</p> <p><code>/circuits/circuits/?provider_id=&lt;uuid&gt;</code></p> <p>Now in v2.x, that format is no longer supported. Instead, you would use:</p> <p><code>/circuits/circuits/?provider=&lt;uuid&gt;</code></p> <p>Check out the specific changes documented in the table at UI and REST API Filter Changes</p>"},{"location":"release-notes/version-2.0.html#rq-support-2523","title":"RQ support (#2523)","text":"<p>Support for RQ and <code>django-rq</code>, deprecated since Nautobot 1.1.0, has been fully removed from Nautobot 2.0.</p>"},{"location":"release-notes/version-2.0.html#slug-fields-2662","title":"Slug Fields (#2662)","text":"<p>The <code>slug</code> field has been removed from all core models except for <code>GitRepository</code>. Generally, Nautobot URLs that referenced the <code>slug</code> field have been changed to use the primary key instead. For example, the URL for <code>https://nautobot/dcim/locations/building-01</code> would change to a URL similar to <code>https://nautobot/dcim/locations/e41f381a-a53b-485a-886f-9d36859b47a1</code>. There are a small number of URLs that still reference a value that's not the primary key, including some URLs related to secrets providers, cables and jobs.</p> <p>A <code>natural_slug</code> property has been added to all models that inherit from <code>BaseModel</code> to provide a human-readable value for use in tools that require a loose reference to a Nautobot object, but this value is not equivalent to the <code>slug</code> field and is not guaranteed to be unique.</p> <p>A natural key interface has been provided for most models to allow for uniquely referencing objects by a name that is friendlier than the primary key. For more information on the usage of natural keys vs primary keys see the documentation for Uniquely Identifying a Nautobot Object.</p>"},{"location":"release-notes/version-2.0.html#v205-2023-11-21","title":"v2.0.5 (2023-11-21)","text":""},{"location":"release-notes/version-2.0.html#security","title":"Security","text":"<ul> <li>#4832 - Fixed cross-site-scripting (XSS) potential with maliciously crafted Custom Links, Computed Fields, and Job Buttons (GHSA-cf9f-wmhp-v4pr).</li> </ul>"},{"location":"release-notes/version-2.0.html#changed_1","title":"Changed","text":"<ul> <li>#4832 - Changed the <code>render_jinja2()</code> API to no longer automatically call <code>mark_safe()</code> on the output.</li> </ul>"},{"location":"release-notes/version-2.0.html#fixed","title":"Fixed","text":"<ul> <li>#3015 - Fixed multiple jobhooks and/or webhooks triggered by a single change.</li> <li>#3015 - Fixed change logging behavior to properly combine multiple changes to an object in the same request.</li> <li>#4280 - Fixed text color of linked labels to use the same color as the text color of the non-linked labels.</li> <li>#4790 - Fixed REST API error that interpreted <code>rack_group</code> as a required field when creating a rack.</li> <li>#4791 - Fixed a bug where some form fields may change unexpectedly.</li> <li>#4799 - Reduced size of Nautobot <code>sdist</code> and <code>wheel</code> packages from 86 MB to 31 MB.</li> <li>#4804 - Fixed VarbinaryIPField storing None or empty values as the binary representation of b'' thereby ignoring the non-null constraint on the field.</li> </ul>"},{"location":"release-notes/version-2.0.html#dependencies","title":"Dependencies","text":"<ul> <li>#4615 - Updated <code>psycopg2-binary</code> dependency to version 2.9.9.</li> <li>#4615 - Updated <code>pylint</code> development dependency to version 2.17.7.</li> <li>#4799 - Updated <code>mkdocs</code> development dependency to <code>1.5.3</code>.</li> </ul>"},{"location":"release-notes/version-2.0.html#documentation","title":"Documentation","text":"<ul> <li>#4008 - Removed CacheOps reference from application stack diagram.</li> </ul>"},{"location":"release-notes/version-2.0.html#housekeeping","title":"Housekeeping","text":"<ul> <li>#3179 - Added unittest for CircuitTermination with a cable connected to CircuitTermination, FrontPort, or RearPort fix in #4815.</li> <li>#4799 - Updated docs configuration for <code>examples/example_plugin</code>.</li> <li>#4832 - Added <code>ruff</code> to invoke tasks and CI.</li> </ul>"},{"location":"release-notes/version-2.0.html#v204-2023-11-13","title":"v2.0.4 (2023-11-13)","text":""},{"location":"release-notes/version-2.0.html#security_1","title":"Security","text":"<ul> <li>#4748 - Updated <code>Django</code> minimum version to 3.2.23 to protect against CVE-2023-46695.</li> <li>#4782 - Updated alpha-UI dependency <code>axios</code> to version 1.6.0 due to CVE-2023-45857.</li> </ul>"},{"location":"release-notes/version-2.0.html#added_1","title":"Added","text":"<ul> <li>#4349 - Added Note List View.</li> <li>#4704 - Added missing Rack table to Role Detail View.</li> <li>#4709 - Added form field to allow assignment of IP addresses when creating a new Interface.</li> </ul>"},{"location":"release-notes/version-2.0.html#changed_2","title":"Changed","text":"<ul> <li>#4709 - Changed order of fields displayed when editing an Interface to be the same as when creating a new Interface.</li> </ul>"},{"location":"release-notes/version-2.0.html#fixed_1","title":"Fixed","text":"<ul> <li>#3990 - Fixed the issue preventing associated Note objects from being deleted when the assigned object is deleted.</li> <li>#4626 - Fixed incorrect \"Prefixes\" link from VRF detail view.</li> <li>#4675 - Fixed the issue where the 500 error page does not support dark mode.</li> <li>#4680 - Fixed the bug that prevented the user from adding tags without member objects as DynamicGroup <code>tags</code> filters.</li> <li>#4681 - Fixed NAPALM device view functions assuming 'Active' as the correct status.</li> <li>#4684 - Fixed InterfaceRedundancyGroup.status to no longer be nullable.</li> <li>#4684 - Fixed InterfaceRedundancyGroupAssociation.created to be a DateTimeField.</li> <li>#4685 - Fixed invalid link to IPAddress in Interface Detail View.</li> <li>#4704 - Fixed a display issue with table pagination controls floating over other UI elements.</li> <li>#4704 - Fixed Role detail view displaying tables for content types that aren't in the Role's allowed content types.</li> <li>#4709 - Fixed incorrect (missing) filtering of available VRFs by parent Device when editing an Interface in the UI.</li> <li>#4718 - Fixed bug in which a device's device redundancy group priority was not being set to <code>None</code> when the device redundancy group was deleted.</li> <li>#4726 - Fixed the bug caused by Tenant Edit View template accessing <code>group</code> instead of <code>tenant_group</code>.</li> <li>#4728 - Fixed bug with JobResultFilterSet and ScheduledJobFilterSet using <code>django_filters.DateTimeFilter</code> for only exact date matches.</li> <li>#4751 - Fixed a bug with <code>BaseModel.get_absolute_url</code> returning an AttributeError instead of raising it.</li> <li>#4779 - Fixed an error when syncing a git repo without a worker running.</li> </ul>"},{"location":"release-notes/version-2.0.html#documentation_1","title":"Documentation","text":"<ul> <li>#3927 - Fixed documentation for creating databases on PostgreSQL version 15.</li> <li>#4622 - Fixed docs incorrectly referencing Nautobot 1.5 as the LTM release for 1.x.</li> <li>#4642 - Added <code>documentation</code> category to release-notes.</li> <li>#4704 - Fixed a broken link in CONTRIBUTING.md to point to the correct contributing guide.</li> <li>#4713 - Fixed documentation regarding API endpoint to use for running saved GraphQL queries.</li> <li>#4714 - Added documentation detailing rack power utilization calculation.</li> <li>#4720 - Added redeployment demo environment step to release-checklist.md.</li> <li>#4767 - Updated Job and App Developer docs to import from the <code>nautobot.apps</code> module throughout.</li> </ul>"},{"location":"release-notes/version-2.0.html#housekeeping_1","title":"Housekeeping","text":"<ul> <li>#4638 - Updated Apps upstream testing CI to use the correct branch pairings post-2.0.</li> <li>#4686 - Fixed incorrect tagging of 1.6.x Docker <code>nautobot-dev</code> images as <code>latest</code>.</li> <li>#4700 - Removed incorrect <code>NAUTOBOT_DYNAMIC_GROUPS_MEMBER_CACHE_TIMEOUT</code> environment variable reference from settings documentation.</li> <li>#4709 - Replaced a number of <code>ModelChoiceField</code> in DCIM forms with more appropriate <code>DynamicModelChoiceField</code>.</li> </ul>"},{"location":"release-notes/version-2.0.html#v203-2023-10-23","title":"v2.0.3 (2023-10-23)","text":""},{"location":"release-notes/version-2.0.html#security_2","title":"Security","text":"<ul> <li>#4671 - Updated <code>urllib3</code> to 2.0.7 due to CVE-2023-45803. This is not a direct dependency so it will not auto-update when upgrading. Please be sure to upgrade your local environment.</li> <li>#4673 - Fixed token exposure in <code>JobResult</code> traceback and result output when a <code>GitRepositorySync</code> job fails in certain ways.</li> <li>#4692 - Fixed potential exposure of hashed user password data on certain REST API endpoints when using the <code>?depth=1</code> query parameter. For more details, please refer to GHSA-r2hw-74xv-4gqp.</li> </ul>"},{"location":"release-notes/version-2.0.html#added_2","title":"Added","text":"<ul> <li>#4612 - Added validation step to handle invalid/legacy filters from v1.x in DynamicGroup form validation.</li> <li>#4668 - Added an <code>ENABLE_ALPHA_UI</code> configuration option to the settings, which is initially set to False. When set to True, this option enables the \"Alpha UI 2.0\" feature.</li> </ul>"},{"location":"release-notes/version-2.0.html#changed_3","title":"Changed","text":"<ul> <li>#4668 - Changed the flag <code>--no-build-ui</code> to <code>--build-ui</code>, and its default value to False for the <code>nautobot-server post-upgrade</code> command.</li> </ul>"},{"location":"release-notes/version-2.0.html#fixed_2","title":"Fixed","text":"<ul> <li>#4604 - Fixed <code>post_upgrade</code> bug involving potential left over references to Aggregate, DeviceRole, and RackRole ContentTypes in ObjectChange records.</li> <li>#4608 - Fixed error <code>'IPAddressBulkAddForm' has no field named 'parent'</code> when bulk creating IPs via UI.</li> <li>#4676 - Ensured that <code>ScheduledJob.job_class</code> values are correctly transferred to <code>ScheduledJob.task</code> during v2 migration.</li> <li>#4692 - Fixed incorrect inheritance of <code>Meta</code> attributes into nested serializers (<code>depth &gt;= 1</code>).</li> </ul>"},{"location":"release-notes/version-2.0.html#documentation_2","title":"Documentation","text":"<ul> <li>#4669 - Added redirects from 1.x documentation paths to their 2.x equivalents to fix broken links/bookmarks.</li> </ul>"},{"location":"release-notes/version-2.0.html#housekeeping_2","title":"Housekeeping","text":"<ul> <li>#4692 - Added check in REST API generic test cases to detect strings like <code>password</code> and <code>sha256</code> that shouldn't generally appear in REST API responses.</li> </ul>"},{"location":"release-notes/version-2.0.html#v202-2023-10-16","title":"v2.0.2 (2023-10-16)","text":""},{"location":"release-notes/version-2.0.html#security_3","title":"Security","text":"<ul> <li>#4586 - Updated <code>urllib3</code> to 2.0.6 due to CVE-2023-43804. This is not a direct dependency so it will not auto-update when upgrading. Please be sure to upgrade your local environment.</li> <li>#4621 - Updated <code>postcss</code> <code>npm</code> package to 8.4.31 to address CVE-2023-44270.</li> <li>#4652 - Updated <code>babel/traverse</code> <code>npm</code> dependency to 7.23.2 to address CVE-2023-45133.</li> </ul>"},{"location":"release-notes/version-2.0.html#added_3","title":"Added","text":"<ul> <li>#4361 - Added <code>SUPPORT_MESSAGE</code> configuration setting.</li> <li>#4607 - Added <code>nautobot-server audit_graphql_queries</code> management command for evaluating breaking filter changes to existing GraphQLQuery instances.</li> </ul>"},{"location":"release-notes/version-2.0.html#changed_4","title":"Changed","text":"<ul> <li>#4313 - Updated device search to include manufacturer name.</li> </ul>"},{"location":"release-notes/version-2.0.html#fixed_3","title":"Fixed","text":"<ul> <li>#4472 - Fixed incorrect logic in <code>nautobot_config.py.j2</code> template that wouldn't detect the MySQL engine when Prometheus metrics are enabled.</li> <li>#4547 - Fixed incorrect form field type for <code>DeviceFilterForm.device_redundancy_group_priority</code>.</li> <li>#4588 - Fixed the error when creating a child Location under a non-globally-unique named parent Location.</li> <li>#4603 - Fixed a bug that makes Manufacturers list fail to load.</li> <li>#4639 - Fixed the ability to attach images to Locations.</li> </ul>"},{"location":"release-notes/version-2.0.html#documentation_3","title":"Documentation","text":"<ul> <li>#4591 - Fixed incorrect documentation of <code>FEEDBACK_BUTTON_ENABLED</code> configuration setting.</li> <li>#4591 - Fixed a number of missing app code-reference links in the documentation table of contents.</li> <li>#4592 - Updated formatting on installation docs.</li> <li>#4598 - Fixed inconsistent column names in <code>docs/user-guide/administration/upgrading/from-v1/tables/v2-filters-renamed-fields.yml</code>.</li> <li>#4613 - Changed CLI reference from <code>dns</code> to <code>dnf</code> for install on RHEL systems.</li> <li>#4619 - Fixed broken links in Nautobot README.md.</li> </ul>"},{"location":"release-notes/version-2.0.html#housekeeping_3","title":"Housekeeping","text":"<ul> <li>#4611 - Updated pylint to use multiple threads.</li> </ul>"},{"location":"release-notes/version-2.0.html#v201-2023-10-04","title":"v2.0.1 (2023-10-04)","text":""},{"location":"release-notes/version-2.0.html#fixed_4","title":"Fixed","text":"<ul> <li>#4436 - Allowed Interfaces of type <code>Virtual</code>, <code>LAG</code>, and <code>Bridge</code> to be selected as a virtual Interface's <code>parent</code>.</li> <li>#4572 - Fixed a JS crash when using list view search box to filter objects in legacy UI.</li> </ul>"},{"location":"release-notes/version-2.0.html#housekeeping_4","title":"Housekeeping","text":"<ul> <li>#4523 - Fixed <code>invoke eslint</code> not running against local development environment.</li> <li>#4552 - Improved <code>test_bulk_delete_form_contains_all_filtered</code> and <code>test_bulk_edit_form_contains_all_filtered</code> generic tests to fail more gracefully if insufficient test data is available.</li> </ul>"},{"location":"release-notes/version-2.0.html#v200-2023-09-28","title":"v2.0.0 (2023-09-28)","text":""},{"location":"release-notes/version-2.0.html#added_4","title":"Added","text":"<ul> <li>#4553 - Implement table sticky headers.</li> </ul>"},{"location":"release-notes/version-2.0.html#fixed_5","title":"Fixed","text":"<ul> <li>#4550 - Fixed a 500 error caused by <code>PrefixForm</code> when <code>prefix_length</code> was omitted from <code>prefix</code> input.</li> <li>#4559 - Fixed behavior of a <code>DynamicGroup</code> with an invalid <code>filter</code> to fail closed rather than failing open.</li> <li>#4566 - Fixed table sticky headers in Firefox.</li> </ul>"},{"location":"release-notes/version-2.0.html#documentation_4","title":"Documentation","text":"<ul> <li>#4489 - Added release note overview to Jobs Overhaul.</li> <li>#4492 - Added slug removal documentation to the 2.0 release notes Release Overview.</li> <li>#4488 - Added documentation on the ability to assign one IPAddress to multiple Interfaces/VMInterfaces in Nautobot 2.0 release overview.</li> <li>#4556 - Added documentation for using lowercase variables in App provided Constance Config.</li> </ul>"},{"location":"release-notes/version-2.0.html#v200rc-4-2023-09-27","title":"v2.0.0.rc-4 (2023-09-27)","text":""},{"location":"release-notes/version-2.0.html#security_4","title":"Security","text":"<ul> <li>#4500 - Updated <code>cryptography</code> to 41.0.4 due to GHSA-v8gr-m533-ghj9. This is not a direct dependency so will not auto-update when upgrading. Please be sure to upgrade your local environment.</li> </ul>"},{"location":"release-notes/version-2.0.html#added_5","title":"Added","text":"<ul> <li>#4103 - Added UI viewset for detail/list/import/export views of <code>IPAddressToInterface</code> objects.</li> <li>#4418 - Added <code>netutils_parser</code> to <code>network_driver</code>.</li> <li>#4425 - Added <code>BaseModelSerializer.determine_view_options()</code> API for use in new UI.</li> <li>#4425 - Added option for individual model serializers to override the default contents of the Advanced tab in the new UI.</li> <li>#4425 - Added option for individual model serializers to define additional tabs in the new UI and the fields included in such tabs.</li> <li>#4426 - Added the ability to specify one or more content types to the <code>fix_custom_fields</code> management command.</li> <li>#4434 - Implemented <code>ObjectList</code> view filters in <code>FiltersPanelContent</code> component of the new UI.</li> <li>#4459 - Added more re-exports to the <code>nautobot.apps</code> namespace.</li> <li>#4462 - Added FilterSet data to REST API metadata.</li> <li>#4474 - Added live search of <code>q</code> filter to list and detail views.</li> <li>#4476 - Added <code>/api/extras/jobs/&lt;name&gt;/...</code> REST API endpoints as an alternative option to the existing <code>/api/extras/jobs/&lt;uuid&gt;/...</code> endpoints.</li> <li>#4477 - Added the <code>slugify</code> Django template tag as a Jinja filter.</li> <li>#4524 - Added optional <code>api</code> parameter to <code>NotesMixin.get_notes_url()</code> model method.</li> </ul>"},{"location":"release-notes/version-2.0.html#changed_5","title":"Changed","text":"<ul> <li>#2472 - Added <code>tagged_vlans</code> and <code>untagged_vlan</code> as selected/prefetched in (VM)Interface API views.</li> <li>#2472 - Added <code>ip_addresses</code> as prefetched in VMInterface API views.</li> <li>#4014 - Refine Prefix List and Detail Views in new UI.</li> <li>#4367 - Changed CSV export to use multi-column natural keys for related models instead of composite-keys.</li> <li>#4367 - Changed <code>natural_key_field_names</code> for Prefix from <code>[\"namespace\", \"prefix\"]</code> to <code>[\"namespace\", \"network\", \"prefix_length\"]</code></li> <li>#4425 - Refined layout of new-UI Device detail view, including addition of \"Virtual Chassis\" tab.</li> <li>#4425 - Moved logic deriving list and detail view schemas for new UI from a serializer from <code>nautobot.core.api.metadata</code> to <code>nautobot.core.api.serializers</code>.</li> <li>#4425 - Changed new-UI detail-view schema construction to automatically include <code>comments</code> and <code>tags</code> fields (if present) in the appropriate location to avoid needing every serializer to specify these fields in its configuration.</li> <li>#4425 - Refined the structure of new-UI detail-view and list-view schemas.</li> <li>#4426 - Changed <code>fix_custom_fields</code> to skip models without any custom fields.</li> <li>#4462 - Updated new UI to use REST API FilterSet metadata to populate filter form.</li> </ul>"},{"location":"release-notes/version-2.0.html#removed_1","title":"Removed","text":"<ul> <li>#4425 - Removed composite key from new UI object-detail \"Advanced\" tab.</li> <li>#4448 - Removed composite key from user-facing interfaces (API, UI).</li> <li>#4538 - Removed unnecessary dependency on <code>semver</code> npm package.</li> </ul>"},{"location":"release-notes/version-2.0.html#fixed_6","title":"Fixed","text":"<ul> <li>#4033 - Fixed filtering objects in bulk edit and bulk delete.</li> <li>#4327 - Fixed a case where an ObjectChange would not be created when making an M2M change via the ORM.</li> <li>#4327 - Fixed an error when trying to send a Webhook after all ObjectChanges for an object had been deleted/pruned.</li> <li>#4327 - Fixed a case where a JobHook would not be sent when making an M2M change after all existing ObjectChanges for the object had been deleted/pruned.</li> <li>#4396 - Fixed rack form silently dropping custom field values.</li> <li>#4416 - Fixed a bug that raises <code>CablePath matching query does not exist</code> exception when deleting a device with multiple types of connected interfaces.</li> <li>#4426 - Fixed a potential out-of-memory issue when running <code>nautobot-server fix_custom_fields</code> on large datasets.</li> <li>#4430 - Fixed VLAN form missing VLAN Group.</li> <li>#4469 - Fixed issue that resulted in stacktrace if no model docs and dunder str was not resolvable.</li> <li>#4469 - Fixed <code>alter_queryset</code> not being respected by list views based on <code>NautobotUIViewSet</code>.</li> <li>#4473 - Fixed a bug that stripped any <code>tags</code> field from Job input forms.</li> <li>#4487 - Fixed general UI layout sizing and spacing.</li> <li>#4503 - Fixed a bug that stripped any <code>tags</code> field from DynamicGroup filter options in <code>DynamicGroupEditForm</code>.</li> <li>#4510 - Fixed placeholder values being present in new UI.</li> <li>#4514 - Fixed an issue with <code>alter_queryset</code> not being called when constructing a table.</li> <li>#4524 - Fixed incorrect implementation of <code>test_notes_url_on_object</code> test case that never actually tested anything.</li> <li>#4524 - Fixed incorrect permissions enforcement on REST API <code>/notes/</code> action endpoints.</li> <li>#4524 - Fixed an exception in REST API <code>/notes/</code> action endpoints that was inadvertently introduced in #4517.</li> <li>#4535 - Fixed off-by-one error in new UI date processing.</li> </ul>"},{"location":"release-notes/version-2.0.html#dependencies_1","title":"Dependencies","text":"<ul> <li>#4418 - Dependency <code>netutils</code> updated to <code>^1.6.0</code>.</li> <li>#4538 - Updated npm dependencies via <code>npm update</code>.</li> </ul>"},{"location":"release-notes/version-2.0.html#documentation_5","title":"Documentation","text":"<ul> <li>#3303 - Added additional section headers to the Release Overview of Nautobot 2.0 release notes.</li> <li>#3303 - Added TODO comments for each additional section header.</li> <li>#3689 - Added namespace diagram to docs.</li> <li>#4301 - Added missing and good-to-have information in the app migration guide.</li> <li>#4301 - Removed references to <code>RoleModelSerializerMixin</code>, <code>RoleRequiredRoleModelSerializerMixin</code> and <code>RoleSerializerField</code> from generic Role-related documentation.</li> <li>#4420 - Updated jobs migration docs to reflect alternate method of job params migration.</li> <li>#4490 - Added additional information to the release-notes and other documentation about the revamped CSV import/export feature.</li> <li>#4491 - Added documentation to Nautobot 2.0 release notes Release Overview for removal of <code>manage.py</code>.</li> <li>#4491 - Added documentation to Nautobot 2.0 release notes Release Overview for change of <code>ChangedLoggedModel.created</code> field from <code>DateField</code> to <code>DateTimeField</code>.</li> <li>#4493 - Added release-note overview of alpha 2.0 UI.</li> <li>#4493 - Reordered overview items in the 2.0 release-notes.</li> <li>#4507 - Added Data Validation Engine to list of apps in docs.</li> </ul>"},{"location":"release-notes/version-2.0.html#housekeeping_5","title":"Housekeeping","text":"<ul> <li>#4479 - Configured <code>npm</code> in Docker image to use 30s timeout, pinned <code>npm</code> to 9.X, and changed Docker build to use <code>npm ci</code> instead of <code>npm install</code> to improve builds.</li> <li>#4524 - Added <code>test_notes_url_functionality</code> test case to <code>APIViewTestCases.NotesURLViewTestCase</code> generic test class.</li> </ul>"},{"location":"release-notes/version-2.0.html#v200-rc3-2023-09-15","title":"v2.0.0-rc.3 (2023-09-15)","text":""},{"location":"release-notes/version-2.0.html#security_5","title":"Security","text":"<ul> <li>#3880 - Updated <code>GitPython</code> to <code>3.1.36</code> to address <code>CVE-2023-41040</code>.</li> </ul>"},{"location":"release-notes/version-2.0.html#added_6","title":"Added","text":"<ul> <li>#3934 - Added <code>Namespace</code> column to <code>VRFDeviceAssignmentTable</code> and <code>VRFPrefixAssignmentTable</code> to display assigned VRFs' <code>namespace</code> property.</li> <li>#3934 - Added <code>namespace</code> attribute to rendering of \"IP Addresses\" columns of relevant <code>Interface</code> and <code>InterfaceRedundancyGroup</code> tables.</li> <li>#3934 - Added <code>namespace</code> attribute to rendering of <code>primary_ip</code> fields in <code>DeviceDetailView</code> and <code>VirtualMachineDetailView</code>.</li> <li>#3934 - Added hover copy button and functionality to <code>primary_ip</code> field in <code>VirtualMachineDetailView</code>.</li> <li>#4011 - Added redirect in new UI to legacy UI if the page being visited is not new UI ready.</li> <li>#4249 - Added REST API endpoint for the IPAddressToInterface model.</li> <li>#4346 - Implemented <code>.natural_slug</code> property on all models.</li> </ul>"},{"location":"release-notes/version-2.0.html#changed_6","title":"Changed","text":"<ul> <li>#4012 - Disable non ready Model View in new-ui sidebar.</li> <li>#4015 - Refined new-UI IPAddress detail view.</li> <li>#4017 - Refined new-UI DeviceType detail view.</li> <li>#4017 - Moved <code>object_type</code> to the Advanced tab of new-UI detail views in general.</li> <li>#4019 - Refine new-ui Location Detail view.</li> <li>#4333 - Updated Dockerfile not to use Python virtual environment.</li> <li>#4440 - Fixed an issues with ModelForm's that used <code>__all__</code>  on <code>Meta.fields</code> and <code>custom_fields</code> displayed a JSON blob.</li> </ul>"},{"location":"release-notes/version-2.0.html#removed_2","title":"Removed","text":"<ul> <li>#3934 - Removed <code>ip_family</code> queryset annotation from <code>PrefixQuerySet</code> and <code>IPAddressQuerySet</code>.</li> <li>#4011 - Removed the \"disable menu\" feature for non-NewUI ready menu links in the sidebar and NavBar.</li> <li>#4015 - Removed <code>tags</code>, <code>custom-fields</code>, <code>computed-fields</code>, <code>relationships</code> from new-UI object detail</li> <li>#4017 - Removed <code>notes_url</code> from new-UI object detail views.</li> </ul>"},{"location":"release-notes/version-2.0.html#fixed_7","title":"Fixed","text":"<ul> <li>#3934 - Fixed validation logic for VirtualMachine primary ips.</li> <li>#4010 - Fixed error not being raised when an invalid parent is provided to the IPAddress in both the API and ORM.</li> <li>#4293 - Fixed the issue of ObjectChange Detail View not rendering in the new UI.</li> <li>#4307 - Fixed incorrect hyperlinks that exist in the Notes and ChangeLog Tables in the ObjectDetailView of the new UI.</li> <li>#4329 - Fixed an issue in <code>TreeNodeMultipleChoiceFilter</code> filtering that could result in incorrect inclusion of unrelated records with the same name located elsewhere in the tree.</li> <li>#4377 - Fixed incorrect OpenAPI schema for filters available on Device and VirtualMachine REST API endpoints.</li> <li>#4377 - Fixed incorrect logic for queryset annotation on Device and VirtualMachine REST API views.</li> <li>#4388 - Fixed a bug that makes ConfigContexts applied to parent locations missing from rendered config context of child location Devices/Virtual Machines.</li> <li>#4407 - Fixed Dockerfile Node.js <code>setup_XX.x</code> deprecated script.</li> </ul>"},{"location":"release-notes/version-2.0.html#documentation_6","title":"Documentation","text":"<ul> <li>#2821 - Adds navigation.footer to mkdocs features to enable navigation in the footer.</li> <li>#2821 - Updates installation documentation into a single path, using tabs for MySQL/PostgeSQL &amp; Ubuntu/Debian/RHEL.</li> <li>#2821 - Removes centos.md and ubuntu.md as these are collapsed into single <code>install_system.md</code> file.</li> <li>#3289 - Added documentation on factory data caching and generic filter tests.</li> <li>#3372 - Added documentation for migrating permission constraints.</li> <li>#4249 - Added section on many-to-many relationships in the REST API overview docs.</li> <li>#4303 - Added documentation on identifying objects after the removal of slug fields.</li> <li>#4326 - Update documentation on Nautobot release workflow.</li> <li>#4429 - Updated the pylint-nautobot migration steps.</li> </ul>"},{"location":"release-notes/version-2.0.html#housekeeping_6","title":"Housekeeping","text":"<ul> <li>#2821 - Updates docker-compose standalone to docker compose plugin to assist in development environment.</li> <li>#4310 - Updated CI integration workflow to remove some redundant tests, run more tests in parallel and remove arm64 platform from the container build.</li> <li>#4311 - Updated CI pull request workflow for <code>next</code> branch to remove some redundant tests, run more tests in parallel and test the container build.</li> <li>#4338 - Updated GitHub CI integration workflow for Long-term maintenance branch.</li> <li>#4409 - Updated upstream testing workflow for apps to test against LTM and 2.0 with <code>ltm-1.6</code> and <code>develop</code> branch tags respectively.</li> </ul>"},{"location":"release-notes/version-2.0.html#v200rc-2-2023-08-24","title":"v2.0.0.rc-2 (2023-08-24)","text":""},{"location":"release-notes/version-2.0.html#added_7","title":"Added","text":"<ul> <li>#3794 - Added support for multi-column keys for CSV Import.</li> </ul>"},{"location":"release-notes/version-2.0.html#changed_7","title":"Changed","text":"<ul> <li>#2807 - Renamed <code>IPAddress</code> <code>vrf</code> filter to <code>vrfs</code>.</li> <li>#2807 - Renamed <code>Prefix</code> <code>mask_length</code> filter to <code>prefix_length</code> and <code>vrf</code> filter to <code>vrfs</code>.</li> <li>#2807 - Enhanced <code>Prefix</code> <code>vlan_vid</code> filter to permit multiple query values.</li> <li>#2807 - Renamed <code>RouteTarget</code> <code>exporting_vrf</code> filter to <code>exporting_vrfs</code> and <code>importing_vrf</code> filter to <code>importing_vrfs</code>.</li> <li>#2807 - Renamed <code>Service</code> <code>port</code> filter to <code>ports</code>.</li> <li>#2807 - Renamed <code>VRF</code> <code>export_target</code> filter to <code>export_targets</code> and <code>import_target</code> filter to <code>import_targets</code>.</li> <li>#2853 - Renamed <code>JobView</code> to <code>JobRunView</code> and <code>JobDetailView</code> to <code>JobView</code>.</li> <li>#2853 - Rename url lookups <code>job</code> to <code>job_run_by_class_path</code> and <code>job_detail</code> to <code>job</code>.</li> <li>#2853 - Changed <code>as_form_class</code>, <code>as_form</code> and <code>validate_data</code> functions on BaseJob Model to <code>classmethods</code>.</li> <li>#4305 - Merged develop back into next after release 1.6.1</li> </ul>"},{"location":"release-notes/version-2.0.html#removed_3","title":"Removed","text":"<ul> <li>#2807 - Removed <code>RouteTarget</code> <code>exporting_vrf_id</code> and <code>importing_vrf_id</code> filters as they are redundant with the <code>exporting_vrfs</code> and <code>importing_vrfs</code> filters.</li> <li>#2807 - Removed <code>Service</code> <code>device_id</code> and <code>virtual_machine_id</code> filters as they are redundant with the <code>device</code> and <code>virtual_machine</code> filters.</li> <li>#2807 - Removed <code>VRF</code> <code>export_target_id</code> and <code>import_target_id</code> filters as they are redundant with the <code>export_targets</code> and <code>import_targets</code> filters.</li> <li>#2853 - Removed <code>/extras/jobs/results/&lt;uuid:pk&gt;/</code> URL endpoint.</li> </ul>"},{"location":"release-notes/version-2.0.html#fixed_8","title":"Fixed","text":"<ul> <li>#2807 - Fixed misnamed <code>tag</code> fields on various filter forms (correct filter name is now <code>tags</code>).</li> <li>#4299 - Added missing <code>to_field_name</code> attribute on <code>TagFilterField</code>, which was causing dynamic-group filtering failures.</li> <li>#4300 - Fixed a permission issue when using <code>final-dev</code> containers by switching to root user before exposing port and entrypoint.</li> </ul>"},{"location":"release-notes/version-2.0.html#v200rc1-2023-08-18","title":"v2.0.0rc1 (2023-08-18)","text":""},{"location":"release-notes/version-2.0.html#added_8","title":"Added","text":"<ul> <li>#1175 - Added \"Submit Feedback\" functionality to the new UI.</li> <li>#3582 - The 'GetFilterSetFieldDOMElementAPIView' now has the option to return the filterset field's DOM element in JSON format.</li> <li>#3904 - Added Input component for changing the page number, in addition to using the arrows.</li> <li>#3904 - Added total number of rows to footer.</li> <li>#3976 - Added support for related-object specification by PK (UUID) in CSV imports as an alternative to composite-keys.</li> <li>#3976 - Added support for related-object specification by composite-key in JSON REST API data.</li> <li>#3977 - Added <code>DEVICE_NAME_AS_NATURAL_KEY</code> and <code>LOCATION_NAME_AS_NATURAL_KEY</code> optional config settings to allow the use of simplified natural keys for Device and Location models.</li> <li>#3978 - Added data migration for JobResult to migrate old status to its equivalent new status.</li> <li>#3983 - Added <code>FiltersPanel</code> UI component.</li> <li>#4052 - Added the option for models to specify a <code>documentation_static_path</code> attribute if a non-default path is needed.</li> <li>#4081 - Added data migration to ensure <code>Note</code> objects' <code>created</code> timestamps are unique.</li> <li>#4100 - Added columns for interface count, device count, VM interface count and virtual machine count to the IP address list view.</li> <li>#4154 - Added handleOnKeyDown to Pagination to now update the page number when Enter key is pressed.</li> <li>#4154 - Added double arrow icons to Pagination for navigating to first/last page.</li> <li>#4197 - Added Bulk Import View for Namespace.</li> <li>#4225 - Added Namespace to IPAddressDetailTable.</li> <li>#4228 - Incorporated all code changes from Nautobot 1.6.0.</li> </ul>"},{"location":"release-notes/version-2.0.html#changed_8","title":"Changed","text":"<ul> <li>#3229 - Rename JobResult.data to JobResult.result and delete the original JobResult.result.</li> <li>#3636 - Reintroduced \"Assign IP Address\" button to Device Interfaces list view.</li> <li>#3892 - Removed <code>logger</code> kwarg from <code>JobResult.log()</code>. Jobs' <code>self.logger</code> logging instance automatically logs to both the console and database and should be used instead of this method.</li> <li>#3892 - Changed the function signatures for <code>nautobot.extras.datasources.git</code> methods <code>get_repo_from_url_to_path_and_from_branch</code>, <code>ensure_git_repository</code>, <code>git_repository_dry_run</code>, <code>import_config_context</code>, <code>import_local_config_context</code>, and <code>import_config_context_schema</code>.</li> <li>#3904 - Restyled the pagination section.</li> <li>#3904 - Modified the back \"&lt;\" and next \"&gt;\" arrows to navigate to the previous/next page, respectively, rather than the first/last page.</li> <li>#3904 - The back \"&lt;\" and next \"&gt;\" arrows no longer show when they aren't relevant (i.e. when on the first/last page).</li> <li>#3904 - Changed Pagination component from Class to function.</li> <li>#3906 - Changed visual loading behavior of object list views in new UI.</li> <li>#3928 - Updated settings documentation for Nautobot 2.0 Celery changes.</li> <li>#3972 - Changed the natural-key for <code>ComponentModel</code> to <code>[\"name\", \"device\"]</code>.</li> <li>#3972 - Re-ordered the natural-key fields for <code>PowerOutlet</code> and <code>PowerPanel</code>.</li> <li>#3972 - Changed the natural-key fields for <code>Cable</code>, <code>CablePath</code>, and <code>TaggedItem</code> to merely \"pk\".</li> <li>#3972 - Changed the natural-key for <code>RackReservation</code> to <code>[\"units\", \"racks\"]</code>.</li> <li>#3972 - Changed the natural-key of <code>VirtualChassis</code> to \"name\".</li> <li>#3976 - Moved <code>NautobotHyperlinkedRelatedField</code> from <code>nautobot.core.api.serializers</code> to <code>nautobot.core.api.fields</code>.</li> <li>#4013 - Refined the Device Detail View in the New UI.</li> <li>#4061 - Changed the <code>dev</code> and <code>final-dev</code> Docker images to install and run Nautobot as a <code>nautobot</code> user instead of as <code>root</code>.</li> <li>#4061 - Updated <code>poetry</code> version included in <code>dev</code> and <code>final-dev</code> Docker images from 1.3.1 to 1.5.1.</li> <li>#4061 - Changed all Docker images to install Nautobot and its dependencies to a virtualenv in <code>/opt/nautobot/</code> instead of the system Python.</li> <li>#4061 - Changed Docker build to install dependencies for and then build the new UI as a separate set of stages from the installation of Python dependencies and build of the Python package.</li> <li>#4164 - Modified docker dev stage to run as root user to prevent permission issues with bind mounts.</li> <li>#4242 - Changed behavior of <code>dev</code> and <code>final-dev</code> Docker images to disable installation metrics by default.</li> </ul>"},{"location":"release-notes/version-2.0.html#removed_4","title":"Removed","text":"<ul> <li>#3761 - Remove remaining <code>Site</code> and <code>Region</code> references from core docs.</li> <li>#3892 - Removed unused method <code>get_job_result_and_repository_record</code> in <code>nautobot.extras.datasources.git</code>.</li> <li>#4061 - Removed <code>node_modules</code> shared volume from Docker development environment as no longer needed.</li> <li>#4104 - Removed unused <code>primary_for_device</code> from Interface data migration.</li> <li>#4115 - Removed temporary code from <code>ObjectEditView</code> that was working around some IPAddress/Prefix form validation gaps.</li> </ul>"},{"location":"release-notes/version-2.0.html#fixed_9","title":"Fixed","text":"<ul> <li>#3904 - Added proper spacing/alignment to pagination section.</li> <li>#3974 - Corrected the natural-key definitions for <code>ComputedField</code>, <code>CustomField</code>, <code>FileAttachment</code>, <code>ImageAttachment</code>, <code>ObjectChange</code>, <code>Relationship</code>, <code>RelationshipAssociation</code>, and <code>Token</code> models.</li> <li>#3976 - Fixed an error when creating <code>VRF</code> or <code>Prefix</code> records via the REST API without specifying a <code>namespace</code> value.</li> <li>#4013 - Fixed incorrect related model url rendering in ObjectRetrieve view.</li> <li>#4061 - Fixed error when running 'invoke markdownlint' with Docker Compose workflow.</li> <li>#4083 - Fixed a issue that was causing the build process of react to be slow.</li> <li>#4100 - Fixed <code>assigned</code> column in the IP address list view.</li> <li>#4115 - Fixed missing data validation in <code>IPAddressForm</code> and <code>PrefixForm</code>.</li> <li>#4131 - Fixed inability to filter most models with <code>.exclude(composite_key=\"...\")</code>.</li> <li>#4131 - Fixed inability to call <code>Prefix.objects.exclude(prefix=\"...\")</code>.</li> <li>#4131 - Fixed inability to call <code>IPAddress.objects.exclude(address=\"...\")</code>.</li> <li>#4149 - Fixed a bug that prevented renaming a <code>Rack</code> if it contained any devices whose names were not globally unique.</li> <li>#4154 - Added useEffect to fix the <code>last_page</code> in Pagination from not updating dynamically.</li> <li>#4241 - Added a timeout and exception handling to the <code>nautobot-server send_installation_metrics</code> command.</li> </ul>"},{"location":"release-notes/version-2.0.html#dependencies_2","title":"Dependencies","text":"<ul> <li>#4125 - Added support for Python 3.11.</li> <li>#4125 - Updated <code>django-auth-ldap</code> optional dependency to <code>~4.3.0</code>.</li> <li>#4125 - Updated <code>django-cors-headers</code> dependency to <code>~4.2.0</code>.</li> <li>#4125 - Updated <code>django-storages</code> optional dependency to <code>~1.13.2</code>.</li> <li>#4125 - Updated <code>django-tables2</code> dependency to <code>~2.6.0</code>.</li> <li>#4125 - Updated <code>django-tree-queries</code> dependency to <code>~0.15.0</code>.</li> <li>#4125 - Updated <code>drf-spectacular</code> dependency to <code>~0.26.3</code>.</li> <li>#4125 - Updated <code>napalm</code> optional dependency to <code>~4.1.0</code>.</li> <li>#4125 - Updated <code>Pillow</code> dependency to <code>~10.0.0</code>.</li> <li>#4125 - Updated <code>prometheus-client</code> dependency to <code>~0.17.1</code>.</li> <li>#4125 - Updated <code>social-auth-core</code> optional dependency to <code>~4.4.2</code>.</li> <li>#4143 - Updated <code>celery</code> dependency to <code>~5.3.1</code>.</li> <li>#4143 - Updated <code>django-celery-beat</code> dependency to <code>~2.5.0</code>.</li> <li>#4143 - Updated <code>django-constance</code> dependency to <code>~2.9.1</code>.</li> <li>#4143 - Updated <code>django-extensions</code> dependency to <code>~3.2.3</code>.</li> <li>#4143 - Updated <code>django-prometheus</code> dependency to <code>~2.3.1</code>.</li> <li>#4143 - Updated <code>django-redis</code> dependency to <code>~5.3.0</code>.</li> <li>#4143 - Updated <code>django-taggit</code> dependency to <code>~4.0.0.</code></li> <li>#4143 - Updated <code>django-timezone-field</code> dependency to <code>~5.1</code>.</li> <li>#4143 - Updated <code>GitPython</code> dependency to <code>~3.1.32</code>.</li> <li>#4143 - Updated <code>graphene-django</code> dependency to <code>~2.16.0</code>.</li> <li>#4143 - Updated <code>Jinja2</code> dependency to <code>~3.1.2</code>.</li> <li>#4143 - Updated <code>jsonschema</code> dependency to permit versions up to 4.18.x. Note that versions back to 4.7.0 are still permitted, so this dependency may not necessarily auto-upgrade when updating Nautobot.</li> <li>#4143 - Updated <code>MarkupSafe</code> dependency to <code>~2.1.3</code>.</li> <li>#4143 - Updated <code>mysqlclient</code> optional dependency to <code>~2.2.0</code>.</li> <li>#4143 - Updated <code>packaging</code> dependency to <code>~23.1</code>.</li> <li>#4143 - Updated <code>psycopg2-binary</code> dependency to <code>~2.9.6</code>.</li> </ul>"},{"location":"release-notes/version-2.0.html#documentation_7","title":"Documentation","text":"<ul> <li>#3330 - Added UI configuration documentation.</li> <li>#3386 - Added documentation linking to best practices for database backup.</li> <li>#3386 - Added missing files to the documentation table of contents.</li> <li>#3387 - Added an app developer migration guide on how to upgrade an Nautobot App from v1.x to v2.0.</li> <li>#3394 - Added Developer migration guide.</li> <li>#3690 - Added an IPAM Migration Guide for users upgrading to Nautobot 2.0.</li> <li>#4042 - Added additional documentations and references for how CustomField, ComputedField, and Relationship behave in Nautobot v2.0.</li> <li>#4061 - Fixed a few broken links in the documentation.</li> <li>#4091 - Added information about installing and running Node.js as a part of the Nautobot installation documentation.</li> </ul>"},{"location":"release-notes/version-2.0.html#housekeeping_7","title":"Housekeeping","text":"<ul> <li>#4028 - Fixed CI integration workflow to publish 'final-dev', and build only <code>final</code> images.</li> <li>#4028 - Fixed CI integration workflow <code>set-output</code> warnings.</li> <li>#4061 - Changed development <code>nodejs</code> Docker container to use Nautobot <code>dev</code> image instead of generic <code>node</code> image.</li> <li>#4061 - Updated <code>markdownlint-cli</code> to version 0.35.0.</li> <li>#4061 - Consolidated development/non-development <code>package.json</code> and <code>package-lock.json</code> files into a single set of files.</li> <li>#4124 - Fixed inability to start <code>nodejs</code> development container due to missing files.</li> <li>#4125 - Updated various development-only dependencies to the latest available versions.</li> <li>#4143 - Updated various development-only dependencies to the latest available versions.</li> <li>#4242 - Changed <code>development/nautobot_config.py</code> to disable installation metrics for developer environments by default.</li> <li>#4254 - Fixed CI container builds failing on <code>npm install</code> steps.</li> <li>#4285 - Fixed <code>next</code> container build workflow.</li> </ul>"},{"location":"release-notes/version-2.0.html#v200-beta2-2023-07-07","title":"v2.0.0-beta.2 (2023-07-07)","text":""},{"location":"release-notes/version-2.0.html#added_9","title":"Added","text":"<ul> <li>#3287 - Added <code>nautobot-server audit_dynamic_groups</code> management command for evaluating breaking filter changes to existing DynamicGroup instances.</li> <li>#3526 - Added detail view UI layout config.</li> <li>#3635 - Added <code>interfaces</code> and <code>vm_interfaces</code> fields to REST API representation of <code>IPAddress</code>.</li> <li>#3845 - Added data migration to ensure all existing service instances fit those uniqueness constraints.</li> <li>#3845 - Added CreateView for Service Model.</li> <li>#3846 - Added migration helper method to check if a model contains duplicate records based on its natural key fields.</li> <li>#3846 - Added migration to check whether all existing Virtual Chassis instances have unique names and to fail if they do not.</li> <li>#3885 - Added a <code>unique_together</code> constraint for <code>ObjectChange</code> records.</li> <li>#3935 - Added constraints to the <code>parent</code> field on <code>Prefix</code> based on the prefix's <code>type</code> and the parent's <code>type</code>.</li> <li>#3939 - Added a post-migration helper tool for de-duplicating <code>IPAddresses</code>.</li> <li>#4003 - Synced in code changes from <code>develop</code> branch up through version 1.5.22.</li> <li>#4004 - Added <code>--save</code> option to <code>nautobot-server validate_models</code> command.</li> <li>#4004 - Added <code>successful_post</code> callback function to <code>ObjectEditView</code>.</li> <li>#4004 - Added <code>parent</code> filter for <code>Prefix</code> objects.</li> <li>#4004 - Added warning messages when creating or editing a <code>Prefix</code> or <code>IPAddress</code> that does not follow prefix <code>type</code> guidance.</li> </ul>"},{"location":"release-notes/version-2.0.html#changed_9","title":"Changed","text":"<ul> <li>#2662 - Changed many FilterSet filters to filter on (name or ID) instead of (slug or ID) since the relevant model <code>slug</code> fields have been removed.</li> <li>#2662 - Changed FilterSet filters referring to <code>DeviceType</code> objects to filter on (model or ID) instead of (slug or ID).</li> <li>#2662 - Changed <code>NaturalKeyOrPKMultipleChoiceFilter</code> default <code>to_field_name</code> from <code>slug</code> to <code>name</code>.</li> <li>#2662 - Replaced <code>NameSlugSearchFilterSet</code> with <code>NameSearchFilterSet</code>.</li> <li>#2662 - Changed default <code>ModelViewTestCase._get_url()</code> behavior to prefer <code>pk</code>-based URLs over <code>slug</code>-based URLs.</li> <li>#2662 - Changed <code>ObjectEditView.get_object()</code> and <code>ObjectDeleteView.get_object()</code> to prefer <code>pk</code>-based object lookups over <code>slug</code>-based lookups.</li> <li>#2662 - Changed Git repository provided \"implicit\" config context files to be based on <code>name</code> (or <code>model</code> in the case of DeviceType contexts) instead of <code>slug</code>.</li> <li>#2916 - Updated prefix utilization calculation.</li> <li>#3287 - Changed the <code>ip_version</code> filters in <code>PrefixFilterSet</code> and <code>IPAddressFilterSet</code> to <code>django_filters.NumberFilter</code>.</li> <li>#3424 - Added <code>IPAddress.type</code> field and moved DHCP/SLAAC status to types.</li> <li>#3634 - Restored <code>assigned_to_interface</code> as a <code>RelatedMembershipBooleanFilter</code> with name <code>has_interface_assignments</code> on <code>IPAddressFilterSet</code>.</li> <li>#3634 - Restored <code>present_in_vrf</code> and <code>present_in_vrf_id</code> filters on <code>IPAddressFilterSet</code>.</li> <li>#3725 - Changed REST API nested hyperlink to a brief object representation consisting of its ID, URL, and object_type.</li> <li>#3748 - Updated API serializers to support Namespaces and unskip unit tests</li> <li>#3770 - Modified the text color to be gray-1 for the sidebarNav components.</li> <li>#3770 - In Layout.js, also made the 'Return to Legacy UI' link gray-1 for consistency.</li> <li>#3770 - Made the sidebar button links be orange when selected and on that page.</li> <li>#3778 - Changed the REST API depth for generating the OpenAPI schema from 1 to 0.</li> <li>#3778 - Set <code>ENUM_GENERATE_CHOICE_DESCRIPTION</code> to False to make OpenAPI schema for REST API filters less verbose.</li> <li>#3793 - Renamed Natural-key slug to Composite key throughout the code base, UI, REST API, and documentation.</li> <li>#3793 - Changed url separator character for Composite keys from <code>&amp;</code> to <code>;</code>.</li> <li>#3845 - Changed <code>Service.name</code> and <code>Service.device</code> or <code>Service.name</code> and <code>Service.virtual_machine</code> to be globally unique and to serve as the natural key for this model.</li> <li>#3846 - Changed <code>VirtualChassis.name</code> to be globally unique and to serve as the natural key for this model.</li> <li>#3847 - Changed <code>ScheduledJob.name</code> to be globally unique and serve as the natural key for this model.</li> <li>#3847 - Increased <code>ScheduledJob.task</code> <code>max_length</code> to fix an off-by-one potential error.</li> <li>#3848 - Changed <code>ExportTemplate</code> uniqueness constraint (and natural key) to be simply <code>(content_type, name)</code>.</li> <li>#3849 - Changed <code>ConfigContext.name</code> to be globally unique and serve as the natural key for this model.</li> <li>#3849 - Changed <code>ConfigContextSchema.name</code> to be globally unique and serve as the natural key for this model.</li> <li>#3850 - Changed VLANGroup <code>name</code> to unique.</li> <li>#3851 - Changed <code>ObjectPermission.name</code> to be globally unique and serve as the natural key for this model.</li> <li>#3854 - Updated default index page for \"Networks\" context to Prefixes.</li> <li>#3898 - Changed the <code>IPAddress</code> natural key definition (<code>IPAddress.natural_key_field_names</code>) to <code>[parent__namespace, host]</code>.</li> <li>#3936 - Restored navigation menu structure in the legacy UI.</li> <li>#3939 - Changed <code>Device.primary_ip4</code> and <code>primary_ip6</code> fields from <code>OneToOneField</code> to <code>ForeignKey</code>, relaxing the uniqueness constraint.</li> <li>#3939 - Changed <code>VirtualMachine.primary_ip4</code> and <code>primary_ip6</code> fields from <code>OneToOneField</code> to <code>ForeignKey</code>, relaxing the uniqueness constraint.</li> <li>#3940 - Updated <code>JOBS_ROOT</code> Jobs import code to check for conflicts with existing package names.</li> <li>#3953 - Removed static \"Home\" text.</li> <li>#3953 - Fixed padding/spacing of Home and Object Views to be consistent.</li> <li>#3973 - Changed natural-key for <code>Prefix</code> model to <code>[namespace, prefix]</code>.</li> <li>#3973 - Changed natural-key for <code>Service</code> model to <code>[name, virtual_machine, device]</code>.</li> <li>#3973 - Changed natural-key for <code>VLANGroup</code> model to simply <code>[name]</code>.</li> <li>#3973 - Changed natural-key for <code>VLAN</code> model to <code>[pk]</code> for now.</li> <li>#4004 - Changed <code>Prefix.type</code> validation with respect to parents and children from strictly-enforced to advisory-only for 2.0.</li> <li>#4004 - Changed <code>parent</code> filter on <code>IPAddress</code> to be exact-match by PK; the previously present filter is renamed to <code>prefix</code>.</li> </ul>"},{"location":"release-notes/version-2.0.html#removed_5","title":"Removed","text":"<ul> <li>#2662 - Removed <code>DeviceType.slug</code> field.</li> <li>#2662 - Removed <code>Location.slug</code> field.</li> <li>#2662 - Removed <code>LocationType.slug</code> field.</li> <li>#2662 - Removed <code>Note.slug</code> field.</li> <li>#2662 - Removed <code>ProviderNetwork.slug</code> field.</li> <li>#2662 - Removed <code>RackGroup.slug</code> field.</li> <li>#2662 - Removed <code>Tag.slug</code> field.</li> <li>#2662 - Removed <code>VLANGroup.slug</code> field.</li> <li>#2662 - Removed <code>slug</code> FilterSet filters from models that no longer have slugs.</li> <li>#3424 - The built-in \"SLAAC\" <code>Status</code> object has been removed and replaced with an <code>IPAddress.type</code> of the same name.</li> <li>#3424 - The built-in \"DHCP\" <code>Status</code> object has been removed and replaced with an <code>IPAddress.type</code> of the same name.</li> <li>#3635 - Removed leftover <code>interface</code> and <code>vminterface</code> fields from <code>IPAddress</code> GraphQL representation.</li> <li>#3778 - Removed currently unused <code>app_full_width_fragment</code>, <code>detail-view-config</code>, <code>form-fields</code>, and <code>table-fields</code> REST API endpoints.</li> <li>#3847 - Removed <code>ScheduledJob.job_class</code> field as redundant.</li> <li>#3849 - Removed <code>ConfigContextSchema.slug</code> field.</li> <li>#3850 - Removed VLANGroup [<code>location</code>, <code>name</code>] uniqueness constraint.</li> <li>#3941 - Removed <code>device, rd, name</code> and <code>virtual_machine, rd, name</code> uniqueness constraints on <code>VRFDeviceAssignment</code>.</li> <li>#3941 - Removed <code>namespace, name</code> uniqueness constraint on <code>VRF</code>.</li> <li>#3941 - Removed some overly verbose messaging in IPAM migration utilities.</li> </ul>"},{"location":"release-notes/version-2.0.html#fixed_10","title":"Fixed","text":"<ul> <li>#2662 - Corrected leftover \"natural key slug\" reference in <code>object_bulk_create.html</code>.</li> <li>#2662 - Fixed leftover reference to <code>GraphQLQuery.slug</code> in <code>CustomGraphQLView</code>.</li> <li>#2662 - Fixed leftover references to <code>slug</code> in various detail view and edit view templates.</li> <li>#2662 - Fixed leftover references to <code>slug</code> in various IPAM table columns.</li> <li>#2662 - Fixed various leftover references to <code>slug</code> fields in the documentation.</li> <li>#3424 - Fixed a typo in <code>AvailableIPSerializer</code> for <code>ip_version</code> field representation.</li> <li>#3574 - Fixed Inability to select multiple entries on (Multiple) selection custom fields in filter.</li> <li>#3580 - Fixed a bug that prevented moving IP Addresses between Namespaces.</li> <li>#3778 - Fixed self-referential type loop in the OpenAPI schema that made Swagger UI unusable for some endpoints.</li> <li>#3782 - Fixed filename for CSV exports.</li> <li>#3847 - Fixed incorrect filter form definitions for JobHookFilterForm, JobResultFilterForm, ScheduledJobFilterForm.</li> <li>#3858 - Fixed broken dynamic filter form in legacy view.</li> <li>#3859 - Added logic to protect against defining a <code>GitRepository.slug</code> that would conflict with existing Python modules.</li> <li>#3865 - Fixed erroneous algorithms used in CustomField and Relationship data migrations.</li> <li>#3879 - Fixed permission check for navigation menu item for Namespaces.</li> <li>#3885 - Fixed missing <code>natural_key</code> for <code>ObjectChange</code> records.</li> <li>#3889 - Fixed a bug in <code>ScheduledJob</code> data migration where it is trying to delete a non-existent key from a dictionary.</li> <li>#3890 - Fixed an error that could happen during migrations if a Site and a Location both have the same <code>slug</code>.</li> <li>#3896 - Fixed a <code>KeyError</code> when accessing <code>ObjectChange</code> records for a <code>ConfigContext</code> via the REST API.</li> <li>#3898 - Fixed several errors that could occur when defining a model's <code>natural_key_field_names</code> to include related object lookups.</li> <li>#3902 - Fixed a GraphQL error when querying Interface <code>mac_address</code> when unset/null/empty values are present.</li> <li>#3916 - Fixed custom NautobotHyperlinkedRelatedField <code>to_representation</code> logic.</li> <li>#3955 - Fixed an error in dcim.0030 migration when CircuitTerminations terminated to ProviderNetworks exist.</li> <li>#3955 - Fixed an error in ipam.0031 migration when an interface had multiple IPs in the same VRF.</li> <li>#3955 - Fixed failure of ipam.0031 migration to detect when an interface has a mix of VRF IPs and non-VRF IPs.</li> <li>#3980 - Fixed a regression in the display of Tag records in the UI.</li> <li>#3998 - Fixed rendering of breadcrumbs in the 2.0 UI.</li> <li>#4005 - Added logic to catch and report errors when registering a Job to the database.</li> <li>#4005 - Added logic to Job class <code>@classproperty</code> methods to enforce correct data types.</li> </ul>"},{"location":"release-notes/version-2.0.html#dependencies_3","title":"Dependencies","text":"<ul> <li>#3883 - Updated nautobot-ui package in next.</li> </ul>"},{"location":"release-notes/version-2.0.html#documentation_8","title":"Documentation","text":"<ul> <li>#2662 - Revised development best-practices documentation around the inclusion of <code>slug</code> fields in models.</li> <li>#3847 - Corrected out-of-date information about <code>class_path</code> in the Jobs documentation.</li> <li>#3940 - Added Jobs migration docs.</li> <li>#4005 - Fixed incorrect documentation about how to register Jobs from an app.</li> </ul>"},{"location":"release-notes/version-2.0.html#housekeeping_8","title":"Housekeeping","text":"<ul> <li>#2662 - Corrected incorrect logic in generic view test <code>test_list_objects_filtered</code> and <code>test_list_objects_unknown_filter_strict_filtering</code>.</li> <li>#3424 - Unskipped <code>nautobot.ipam.tests.test_forms.IPAddressFormTest</code></li> <li>#3635 - Re-enabled and updated some GraphQL tests relating to IPAddress objects in GraphQL.</li> <li>#3867 - Fixed <code>node_modules</code> volume mount in docker-compose.</li> <li>#3876 - Fixed markdownlint command syntax.</li> <li>#3900 - Added 'invoke migration-test' and corresponding CI step.</li> <li>#3930 - Fixed inconsistent job test behavior.</li> <li>#3933 - Fixed noisy output of unit tests.</li> <li>#4071 - Fixed Docker tag syntax for pre-release workflow.</li> <li>#4078 - Fixed prerelease workflow referenced <code>ci_integration.yml</code> file.</li> </ul>"},{"location":"release-notes/version-2.0.html#v200-beta1-2023-06-06","title":"v2.0.0-beta.1 (2023-06-06)","text":""},{"location":"release-notes/version-2.0.html#added_10","title":"Added","text":"<ul> <li>#851 - Added list view with CSV import/export buttons for <code>CircuitTermination</code> objects.</li> <li>#1633 - Added <code>created</code> and <code>last_updated</code> fields on the <code>VMInterface</code> model. When migrating to this release, these fields will default to <code>None</code> for any pre-existing instances of this model.</li> <li>#2331 - Added job stdout/stderr redirection to database <code>JobLogEntry</code> records.</li> <li>#2331 - Added support to skip job logs from being written to the database.</li> <li>#2901 - Added <code>get_absolute_url</code> method on <code>BaseModel</code> which will attempt to resolve the detail view route for all subclassed models.</li> <li>#3192 - Added a data migration to migrate existing ScheduledJob instances to support new format.</li> <li>#3203 - Added a <code>nautobot-server build_ui</code> command for building the web UI</li> <li>#3237 - Added Node.JS to Docker final image, bundled <code>node_modules</code> to speed up rebuilds.</li> <li>#3615 - Added toggle buttons between Legacy UI and New UI.</li> <li>#3637 - Added <code>pre_delete</code> signal to nullify the device's <code>primary_ip</code> field/fields if its primary ips are removed from interface's <code>ip_addresses</code> m2m field.</li> <li>#3637 - Added <code>pre_save</code> signal to catch invalid operations in manual creations of <code>IPAddressToInterface</code>.</li> <li>#3637 - Added <code>unique_together</code> for through model <code>IPAddressToInterface</code>.</li> <li>#3651 - Added <code>home_url</code>, <code>config_url</code>, and <code>docs_url</code> keys to the <code>/api/plugins/installed-plugins/</code> REST API endpoint.</li> <li>#3679 - Added optional <code>api</code> argument to <code>BaseModel.get_absolute_url()</code>.</li> <li>#3702 - Added basic Redis caching for <code>TreeModel.display</code> to reduce redundant queries when listing such objects.</li> <li>#3708 - Added sorting support to the REST API via the <code>sort</code> query parameter.</li> <li>#3713 - Added <code>celery_kwargs</code> field to <code>JobResult</code> and <code>ScheduledJob</code> models.</li> <li>#3714 - Added support for <code>{\"value\": \"x\"}</code> format when writing to ChoiceFields in the REST API, making round-trip data easier.</li> <li>#3715 - Added <code>NautobotCSVParser</code> class, providing the ability for the REST API to accept CSV as an input format.</li> <li>#3715 - Added ability to specify a <code>parent_bay</code> when creating a Device via the REST API.</li> <li>#3715 - Added <code>APIViewTestCases.CreateObjectViewTestCase.test_recreate_object_csv</code> generic test, testing the \"round-trip\" capability of each API endpoint's CSV export and import.</li> <li>#3715 - Added (temporary) <code>natural_key_field_names</code> to <code>IPAddress</code>, <code>Prefix</code>, <code>RackReservation</code>, <code>ScheduledJob</code>, and <code>Service</code> models.</li> <li>#3721 - Added App provided model view override.</li> <li>#3722 - Added <code>termination_type</code> filter to <code>CableFilterSet</code>.</li> <li>#3722 - Added <code>natural_key_slug</code> field to REST API serializers.</li> <li>#3736 - Added App provided custom route view.</li> <li>#3741 - Added natural-key-slug information to UI detail views.</li> <li>#3754 - Added loading widget to the left of the ObjectListTable Buttons after initial data load.</li> <li>#3759 - Implemented IPAM Namespace &amp; parenting data migrations.</li> <li>#3767 - Added <code>detail-view-config</code> API endpoint to <code>ModelViewSetMixin</code>.</li> <li>#3804 - Added feature to redirect all add and edit views to legacy UI.</li> <li>#3840 - Added <code>bool</code> return value for <code>Nautobot.extras.datasources.git.ensure_git_repository()</code> to indicate whether the filesystem was changed.</li> </ul>"},{"location":"release-notes/version-2.0.html#changed_10","title":"Changed","text":"<ul> <li>#1633 - The base class for all <code>tags</code> fields on <code>PrimaryModel</code> subclasses is now <code>nautobot.core.models.fields.TagsField</code> rather than <code>taggit.managers.TaggableManager</code>. Any apps using <code>PrimaryModel</code> as a base class will likely need to generate and run a schema migration to reflect this change.</li> <li>#2331 - Changed <code>JobLogEntry.log_level</code> choices from <code>default</code>, <code>info</code>, <code>success</code>, <code>warning</code>, <code>failure</code> to Python default logging levels <code>debug</code>, <code>info</code>, <code>warning</code>, <code>error</code> and <code>critical</code>.</li> <li>#2331 - Changed job logging from custom log methods on the <code>BaseJob</code> class to celery's <code>get_task_logger</code> logging implementation.</li> <li>#2569 - Revamped CSV export functionality to use REST API serializers for more self-consistency and reduced boilerplate.</li> <li>#2569 - Revised the natural key for <code>SecretsGroupAssociation</code> through-table model.</li> <li>#2569 - Changed behavior of <code>JobLogEntry.display</code> REST API field to match the model behavior.</li> <li>#2799 - Changed REST API versioning to default to latest instead of earliest when unspecified by the client.</li> <li>#3042 - Removed all <code>Nested*Serializer</code> classes in favor of a <code>depth</code>-based REST API design.</li> <li>#3042 - The <code>?brief=True</code> REST API parameter has been replaced by a new <code>?depth=&lt;0-10&gt;</code> API parameter, allowing greater control of the returned data.</li> <li>#3228 - Removed <code>run_job</code> Celery task and updated <code>BaseJob</code> to subclass Celery <code>Task</code>.</li> <li>#3449 - Renamed <code>Relationship</code> model attribute <code>slug</code> to <code>key</code>.</li> <li>#3449 - Renamed <code>Relationship</code> model attribute <code>name</code> to <code>label</code>.</li> <li>#3450 - Renamed <code>ComputedField</code> model attribute <code>slug</code> to <code>key</code>.</li> <li>#3465 - Renamed IPAddress <code>prefix_length</code> field to <code>mask_length</code>.</li> <li>#3465 - Made IPAddress <code>host</code> field non-modifiable.</li> <li>#3527 - Restructured navigation menus to context-centered design for 2.0.</li> <li>#3552 - Extracted data tables from upgrading-from-nautobot-v1.md into separate YAML files.</li> <li>#3586 - Changed REST API for Device and VirtualMachine to omit <code>config_context</code> by default and only include it when requested by using the <code>?include=config_context</code> query parameter.</li> <li>#3607 - Changed the default <code>lookup_field</code> for <code>NautobotUIViewSet</code> to <code>\"pk\"</code> instead of <code>\"slug\"</code>.</li> <li>#3663 - Modified <code>delete_button</code> and <code>edit_button</code> template tags to lookup <code>pk</code> and <code>slug</code> without the need to specify the lookup key.</li> <li>#3679 - Changed <code>BaseModelSerializer</code> to inherit from <code>HyperlinkedModelSerializer</code> instead of <code>ModelSerializer</code>. This changed the REST API representation of related objects (at depth 0) from UUIDs to API hyperlinks to improve discoverability and usability of the API.</li> <li>#3691 - Implemented <code>Meta.list_display_fields</code> for all serializers.</li> <li>#3692 - Updated <code>JobResult</code> manager <code>store_result</code> method to censor sensitive variables.</li> <li>#3702 - Changed nested serialization to never include tags, computed fields, relationships, and other M2M fields.</li> <li>#3713 - Changed <code>Job.read_only</code> field to an informational field set by the job author and removed the ability for administrators to override this field. This field no longer changes the behavior of Nautobot core.</li> <li>#3715 - Reworked CSV import to be based on the REST API implementation instead of custom forms and views.</li> <li>#3715 - Changed the parameters and behavior of <code>CSVDataField</code> and <code>CSVFileField</code> in support of the new CSV import framework.</li> <li>#3715 - Changed the <code>user</code> parameter on the RackReservation REST API to optional; if omitted, the requesting user will now be automatically selected as the owner of any created reservations.</li> <li>#3742 - Centered the LoadingWidget component in UI.</li> <li>#3742 - Lightened the color of the LoadingWidget text to gray-3.</li> <li>#3742 - Lightened the color of the skeleton component when loading tables.</li> <li>#3744 - A batch of improvements to state handling in the UI to solve loading bugs.</li> <li>#3767 - Enhanced error handling for fetcher in React UI <code>ObjectRetrieveView</code>.</li> <li>#3785 - Deprecated <code>StatusModel</code> mixin in favor of directly including a <code>StatusField</code> as needed.</li> <li>#3840 - Changed Job <code>class_path</code> property from <code>&lt;source&gt;/&lt;module&gt;/&lt;ClassName&gt;</code> to simply <code>&lt;module&gt;.&lt;ClassName&gt;</code>.</li> <li>#3840 - Changed GitRepository slugs to use underscores rather than dashes so they can be used as Python module names.</li> <li>#3840 - Changed Job <code>module_name</code> for Git-derived Jobs to <code>&lt;git_repository_slug&gt;.jobs.&lt;module&gt;</code>.</li> <li>#3840 - System-provided Jobs are now enabled by default for running.</li> <li>#3840 - Changed return signature for <code>Nautobot.core.utils.git.GitRepo.checkout()</code> to include whether the filesystem was changed.</li> <li>#3840 - Changed <code>job</code> filter on JobButton, JobHook, JobResult, and ScheduledJob to be name-based rather than slug-based.</li> <li>#3840 - Changed <code>Job.runnable</code> property to not consider whether the <code>job_class</code> is set, as a performance optimization.</li> <li>#3840 - Changed client-side slug construction (legacy UI) to use underscores rather than dashes.</li> </ul>"},{"location":"release-notes/version-2.0.html#removed_6","title":"Removed","text":"<ul> <li>#1633 - Removed <code>nautobot.extras.utils.is_taggable</code>; use <code>nautobot.core.models.utils.is_taggable</code> instead.</li> <li>#1633 - Removed backward-compatibility with <code>taggit</code> 1.x Python API; instead of <code>object.tags.set(tag1, tag2, tag3)</code> you must now do <code>object.tags.set([tag1, tag2, tag3])</code>.</li> <li>#1721 - Removed dependency on and usage of <code>django-cacheops</code>.</li> <li>#2331 - Removed custom <code>BaseJob</code> logging methods <code>_log</code>, <code>log</code>, <code>log_debug</code>, <code>log_success</code>, <code>log_info</code>, <code>log_warning</code> and <code>log_failure</code>.</li> <li>#2331 - Removed <code>active_test</code> and <code>failed</code> properties from <code>BaseJob</code> class.</li> <li>#2569 - Removed <code>csv_headers</code> and <code>to_csv()</code> from all models as they are no longer needed.</li> <li>#2885 - Removed <code>changelog_url</code> from <code>ObjectView</code>'s context.</li> <li>#3228 - Removed atomic transaction from Jobs.</li> <li>#3228 - Removed support for <code>test_*</code> and <code>post_run</code> methods in Jobs.</li> <li>#3465 - Removed <code>broadcast</code> field from IPAddress.</li> <li>#3527 - Removed <code>NavMenuButton</code> and its subclasses as they are not a part of the 2.0 UI.</li> <li>#3527 - Removed <code>NavMenuTab.weight</code> property as the menu tabs/contexts are not reorderable in 2.0.</li> <li>#3623 - Removed remaining erroneous slug references from tenant.html and tenantgroup.html.</li> <li>#3651 - Removed misspelled <code>verison</code> key from <code>/api/plugins/installed-plugins</code> REST API endpoint.</li> <li>#3679 - Removed explicit <code>url</code> field declarations from most REST API serializers as they are now derived automatically.</li> <li>#3713 - Removed <code>Job.read_only_override</code>, <code>JobResult.obj_type</code>, <code>JobResult.periodic_task_name</code>, and <code>JobResult.task_id</code> fields.</li> <li>#3713 - Removed <code>NautobotFakeRequest</code> and associated methods, variables and logic.</li> <li>#3715 - Removed <code>LocatableModelCSVFormMixin</code>, <code>RoleModelCSVFormMixin</code>, <code>RoleRequiredRoleModelCSVFormMixin</code>, and <code>StatusModelCSVFormMixin</code> classes, as they are no longer needed after reworking how CSV import is handled.</li> <li>#3715 - Removed <code>bulk_create_form_class</code> field from <code>NautobotUIViewSet</code> as it's no longer used or needed.</li> <li>#3715 - Removed <code>model_form</code> and <code>widget_attrs</code> fields from <code>BulkImportView</code> as they are no longer used or needed.</li> <li>#3840 - Removed <code>Job.slug</code>, <code>Job.source</code>, and <code>Job.git_repository</code> database fields.</li> <li>#3840 - Removed <code>source</code> and <code>slug</code> filters for Jobs.</li> <li>#3840 - Removed <code>get_jobs()</code>, <code>get_job_classpaths()</code>, <code>jobs_in_directory()</code> functions.</li> </ul>"},{"location":"release-notes/version-2.0.html#fixed_11","title":"Fixed","text":"<ul> <li>#3437 - Fixed the possibility of inadvertently applying the same <code>Tag</code> to the same object multiple times by adding appropriate uniqueness constraints on the <code>TaggedItem</code> through table.</li> <li>#3518 - Fixed an error seen when running the <code>extras.0061_collect_roles_from_related_apps_roles</code> migration.</li> <li>#3545 - Fixed a bug in Job edit view template where slug was missing, preventing creation from happening.</li> <li>#3592 - Fixed heuristic for duplicate calls to <code>populate_model_features_registry</code> causing skipped updates.</li> <li>#3675 - Fixed job edit form silently failing.</li> <li>#3687 - Fixed a bug in <code>Prefix.reparent_ips()</code> that was too greedy in reparenting IP addresses when child prexies were deeply nested (such as /31)</li> <li>#3702 - Added some missing <code>select_related</code> on <code>DeviceViewSet</code> and <code>PrefixViewSet</code> to improve performance.</li> <li>#3714 - Fixed inability to set null via the REST API on <code>Interface.mac_address</code> and <code>VMInterface.mac_address</code>.</li> <li>#3714 - Fixed inability to set null via the REST API on <code>DeviceType.front_image</code> and <code>DeviceType.rear_image</code>.</li> <li>#3714 - Fixed <code>password</code> being incorrectly marked as a required field when editing a User via the REST API.</li> <li>#3715 - Fixed inability to set the <code>failover_strategy</code> field as unspecified/blank when creating/updating <code>DeviceRedundancyGroup</code> via the REST API.</li> <li>#3715 - Fixed incorrect interim natural key definition for <code>Device</code> and <code>VRF</code> models.</li> <li>#3715 - Fixed the possibility of setting values for nonexistent custom fields via the REST API.</li> <li>#3715 - Fixed incorrect password-handling logic when creating/updating a <code>User</code> via the REST API.</li> <li>#3716 - Fixed an error when attempting to edit a user via the Nautobot admin UI.</li> <li>#3722 - Fixed incorrect filter forms on console-connections, power-connections, and interface-connections list views.</li> <li>#3729 - Fixed a bug that references a non-existent Relationship model attribute in Relationship migration file.</li> <li>#3741 - Fixed missing time-zone information on various Job-related tests in <code>nautobot.extras.tests.test_views</code>.</li> <li>#3741 - Fixed various cable-termination API serializers incorrectly reporting the <code>cable</code> field as writable.</li> <li>#3768 - Fixed new UI homepage breaks if recent object-changes reference objects that no longer exist.</li> <li>#3785 - Fixed undesirable nullability of <code>status</code> fields to correctly match their intended usage.</li> <li>#3786 - Fixed default descriptions of REST API actions in the OpenAPI schema to be more accurate.</li> <li>#3792 - Fixed logging output not being suppressed during unit and integration tests.</li> <li>#3828 - Fixed a bug caused by #3637 that prevents devices with <code>primary_ip</code> from being deleted.</li> <li>#3829 - Fixed build failure caused by registered App missing ui/index.js.</li> <li>#3833 - Fixed build failure caused by registered App missing urls.py file or a urlpatterns.</li> <li>#3840 - Removed leftover/non-functional <code>Source</code> tab from <code>job_approval_request.html</code>.</li> <li>#3864 - Fixed cases where Device.role was null, incongruent with the enforcement in the API and UI.</li> </ul>"},{"location":"release-notes/version-2.0.html#dependencies_4","title":"Dependencies","text":"<ul> <li>#1721 - Removed dependency on <code>django-cacheops</code>.</li> <li>#3672 - Changed <code>napalm</code> dependency to 4.x release in order to allow Netmiko 4.x to install. Dependency resolution resulted in removing the following packages: <code>ciscoconfparse</code>, <code>deprecat</code>, <code>dnspython</code>, <code>loguru</code>, <code>toml</code>, <code>win32-setctime</code>.</li> </ul>"},{"location":"release-notes/version-2.0.html#documentation_9","title":"Documentation","text":"<ul> <li>#3591 - Fixed a few errors in the v2.0 migration documentation.</li> </ul>"},{"location":"release-notes/version-2.0.html#housekeeping_9","title":"Housekeeping","text":"<ul> <li>#1633 - Removed monkey-patching of <code>taggit.managers.TaggableManager</code>.</li> <li>#3378 - Re-enabled skipped tests.</li> <li>#3618 - Fix corrupted <code>package-lock.json</code> which was causing test failures.</li> <li>#3650 - Updated ui 2.0 jsconfig.json to exclude <code>node_modules</code> and <code>build</code> directories.</li> <li>#3714 - Added generic test for GET/PUT round-trip in the REST API.</li> <li>#3731 - Fixed <code>debugpy</code> workflow not working with the removal of <code>manage.py</code>.</li> <li>#3737 - Fixed broken <code>--cache_test_fixtures</code> when running tests.</li> <li>#3740 - Fixed container builds failed resulting from #3731.</li> <li>#3840 - Moved test Jobs from <code>nautobot/extras/tests/example_jobs/test_*.py</code> to <code>nautobot/extras/test_jobs/*.py</code> to avoid unnecessary loading by the <code>unittest</code> runner.</li> </ul>"},{"location":"release-notes/version-2.0.html#v200-alpha3-2023-04-13","title":"v2.0.0-alpha.3 (2023-04-13)","text":""},{"location":"release-notes/version-2.0.html#added_11","title":"Added","text":"<ul> <li>#3337 - Add <code>Namespace</code> model to IPAM.</li> </ul>"},{"location":"release-notes/version-2.0.html#changed_11","title":"Changed","text":"<ul> <li>#2915 - Implemented a concrete <code>parent</code> relationship from <code>Prefix</code> to itself.</li> <li>#3337 - Changed Prefix and other model uniqueness to center around Namespace model.</li> <li>#3337 - TODO: Update with many more changes.</li> <li>#3439 - Changed the GraphQL <code>execute_saved_query</code> function's argument from <code>saved_query_slug</code> to <code>saved_query_name</code>.</li> <li>#3523 - Renamed <code>nat_outside</code> field on IPAddress serializer to <code>nat_outside_list</code> for self-consistency.</li> </ul>"},{"location":"release-notes/version-2.0.html#removed_7","title":"Removed","text":"<ul> <li>#3439 - Removed <code>slug</code> field from many database models.</li> <li>#3523 - Removed <code>nat_outside</code> getter-setter in IPAddress model.</li> </ul>"},{"location":"release-notes/version-2.0.html#dependencies_5","title":"Dependencies","text":"<ul> <li>#2316 - Dropped support for Python 3.7. Python 3.8 is now the minimum version required by Nautobot.</li> <li>#2316 - Updated <code>django-auth-ldap</code> dependency to <code>~4.2.0</code>.</li> <li>#2316 - Updated <code>django-cors-headers</code> dependency to <code>~3.14.0</code>.</li> <li>#2316 - Updated <code>django-filter</code> dependency to <code>~23.1</code>.</li> <li>#2316 - Updated <code>django-health-check</code> dependency to <code>~3.17.0</code>.</li> <li>#2316 - Updated <code>django-tables2</code> dependency to <code>~2.5.3</code>.</li> <li>#2316 - Updated <code>django-tree-queries</code> dependency to <code>~0.14.0</code>.</li> <li>#2316 - Removed direct dependency on <code>importlib-metadata</code>.</li> <li>#2316 - Updated <code>pillow</code> dependency to <code>~9.5.0</code>.</li> <li>#2316 - Updated <code>prometheus-client</code> dependency to <code>~0.16.0</code>.</li> <li>#2316 - Updated <code>social-auth-core</code> dependency to <code>~4.4.1</code>.</li> <li>#2316 - Updated <code>social-auth-app-django</code> dependency to <code>~5.2.0</code>.</li> <li>#3525 - Added explicit dependency on <code>packaging</code> that had been inadvertently omitted.</li> </ul>"},{"location":"release-notes/version-2.0.html#housekeeping_10","title":"Housekeeping","text":"<ul> <li>#2316 - Updated various development-only dependencies to the latest available versions.</li> </ul>"},{"location":"release-notes/version-2.0.html#v200-alpha2-2023-03-29","title":"v2.0.0-alpha.2 (2023-03-29)","text":""},{"location":"release-notes/version-2.0.html#added_12","title":"Added","text":"<ul> <li>#2900 - Added natural-key support to most Nautobot models, inspired by the <code>django-natural-keys</code> library.</li> <li>#2957 - Added Location constraints for objects (CircuitTermination, Device, PowerPanel, PowerFeed, RackGroup, Rack, Prefix, VLAN, VLANGroup, Cluster).</li> <li>#2957 - Added Region and Site data migration to Locations for existing ConfigContext instances.</li> <li>#3066 - Added <code>ForeignKeyWithAutoRelatedName</code> helper class.</li> <li>#3154 - Added ability for <code>tags</code> filters to filter by UUID as well as by slug.</li> <li>#3185 - Added missing user filterset fields.</li> <li>#3222 - Added Site and Region data migration for ConfigContext class and ensured that \"Site\" LocationType allows the correct ContentTypes.</li> <li>#3256 - Added Site and Region data migration for ComputedFields, CustomFields, CustomLinks, ExportTemplates, ImageAttachments, JobHooks, Notes, Relationships, Webhooks, Statuses and Tags</li> <li>#3283 - Added Site and Region migration to Location for filter data of DynamicGroups.</li> <li>#3360 - Added an alternate approach to updating model feature registry without having to decorate a model with <code>@extras_features</code>.</li> <li>#3364 - Added FK fields <code>migrated_location</code> to Site and Region models before data migration is applied.</li> <li>#3403 - Added support for Nautobot Apps to provide Django Constance Fields for the settings.</li> <li>#3418 - Added ObjectPermission Data Migration from Region/Site to Location.</li> </ul>"},{"location":"release-notes/version-2.0.html#changed_12","title":"Changed","text":"<ul> <li>#824 - Renamed <code>slug</code> field to <code>key</code> on CustomField model class.</li> <li>#824 - Changed validation of CustomField <code>key</code> to enforce that it is valid as a GraphQL identifier.</li> <li>#951 - The <code>nautobot-server nbshell</code> command is now based on <code>shell_plus</code> from <code>django-extensions</code>.</li> <li>#1362 - Added <code>type</code> field to <code>Prefix</code>, replacing \"Container\" status and <code>is_pool</code> field.</li> <li>#2076 - Changed the <code>created</code> field of all models from a DateField to a DateTimeField for added granularity. Preexisting records will show as created at midnight UTC on their original creation date.</li> <li>#2611 - Changed <code>Job</code> model uniqueness constraints and <code>slug</code> field.</li> <li>#2806 - Enhanced VLAN <code>available_on_device</code> filter to permit specifying multiple Devices.</li> <li>#3066 - Changed <code>related_name</code> values for path endpoints on <code>CablePath</code> for consistency and readability (<code>dcim_interface_related</code> to <code>interfaces</code>, <code>circuits_circuittermination_related</code> to <code>circuit_terminations</code>, etc.)</li> <li>#3066 - Changed <code>related_name</code> values for device components on <code>Device</code> for consistency and readability (<code>consoleports</code> to <code>console_ports</code>, <code>devicebays</code> to <code>device_bays</code>, etc.)</li> <li>#3066 - Changed <code>related_name</code> values for device component templates on <code>DeviceType</code> for consistency and readability (<code>consoleporttemplates</code> to <code>console_port_templates</code>, <code>devicebaytemplates</code> to <code>device_bay_templates</code>, etc.)</li> <li>#3066 - Changed <code>DeviceType.instances</code> to <code>devices</code> and renamed the corresponding query filters.</li> <li>#3066 - Changed <code>DeviceRedundancyGroup.members</code> to <code>devices</code>.</li> <li>#3066 - Changed <code>FrontPortTemplate.rear_port</code> to <code>rear_port_template</code>.</li> <li>#3066 - Changed <code>Location.powerpanels</code> to <code>power_panels</code>.</li> <li>#3066 - Changed <code>PowerOutletTemplate.power_port</code> to <code>power_port_template</code>.</li> <li>#3066 - Changed <code>PowerPanel.powerfeeds</code> to <code>power_feeds</code>.</li> <li>#3066 - Changed <code>PowerPort.poweroutlets</code> to <code>power_outlets</code>.</li> <li>#3066 - Changed <code>PowerPortTemplate.poweroutlet_templates</code> to <code>power_outlet_templates</code>.</li> <li>#3066 - Changed <code>Rack.powerfeed_set</code> to <code>power_feeds</code>.</li> <li>#3066 - Changed <code>Rack.group</code> and <code>Rack.reservations</code> to <code>rack_group</code> and <code>rack_reservations</code> and renamed the corresponding query filters.</li> <li>#3066 - Changed <code>RackGroup.powerpanel_set</code> to <code>power_panels</code>.</li> <li>#3066 - Changed <code>RearPort.frontports</code> to <code>front_ports</code>.</li> <li>#3066 - Changed <code>RearPortTemplate.frontport_templates</code> to <code>front_port_templates</code>.</li> <li>#3066 - Changed <code>SecretsGroup.device_set</code> and <code>SecretsGroup.deviceredundancygroup_set</code> to <code>devices</code> and <code>device_redundancy_groups</code>.</li> <li>#3066 - Changed <code>Tenant.rackreservations</code> to <code>rack_reservations</code>.</li> <li>#3066 - Changed <code>User.rackreservation_set</code> to <code>rack_reservations</code>.</li> <li>#3066 - Changed REST API field on <code>Interface</code> from <code>count_ipaddresses</code> to <code>ip_address_count</code>.</li> <li>#3066 - Changed REST API fields on <code>Manufacturer</code> from <code>devicetype_count</code> and <code>inventoryitem_count</code> to <code>device_type_count</code> and <code>inventory_item_count</code>.</li> <li>#3066 - Changed REST API field on <code>Platform</code> from <code>virtualmachine_count</code> to <code>virtual_machine_count</code>.</li> <li>#3066 - Changed REST API field on <code>PowerPanel</code> from <code>powerfeed_count</code> to <code>power_feed_count</code>.</li> <li>#3066 - Changed REST API field on <code>Rack</code> from <code>powerfeed_count</code> to <code>power_feed_count</code>.</li> <li>#3066 - Changed <code>RackReservation</code> <code>group</code> filter to <code>rack_group</code>.</li> <li>#3154 - Renamed various <code>tag</code> filters to <code>tags</code> for self-consistency.</li> <li>#3160 - Changed logger names to use <code>__name__</code> instead of explicit module names.</li> <li>#3215 - Changed representation of related Status objects in the REST API to use a NestedStatusSerializer instead of presenting as enums.</li> <li>#3236 - Changed <code>Interface</code> and <code>VMInterface</code> relationship to <code>IPAddress</code> to many-to-many instead of one-to-many.</li> <li>#3262 - Changed extras FKs and related names.</li> <li>#3266 - Changed erroneous attribute \"type\" to correct \"circuit_type\" in circuit-related templates.</li> <li>#3302 - Migrated <code>Aggregate</code> model to <code>Prefix</code> with type set to \"Container\".</li> <li>#3351 - Changed extras abstract model ForeignKeys to use ForeignKeyWithAutoRelatedName.</li> <li>#3354 - Synced in fixes from 1.5.x LTM branch up through v1.5.11.</li> </ul>"},{"location":"release-notes/version-2.0.html#removed_8","title":"Removed","text":"<ul> <li>#824 - Removed <code>name</code> field from CustomField model class.</li> <li>#1634 - Removed unnecessary legacy <code>manage.py</code> file from Nautobot repository.</li> <li>#2521 - Removed support for storing Git repository credentials (username/token) in the Nautobot database. Use Secrets instead.</li> <li>#2957 - Removed Site constraints for model classes (CircuitTermination, Device, Location, PowerPanel, PowerFeed, RackGroup, Rack, Prefix, VLAN, VLANGroup, Cluster).</li> <li>#2957 - Removed <code>regions</code> and <code>sites</code> attributes from ConfigContext model class.</li> <li>#2957 - Removed <code>region</code> and <code>site</code> related fields from Serializers for aforementioned model classes.</li> <li>#2957 - Removed <code>region</code> and <code>site</code> related fields from Forms for aforementioned model classes.</li> <li>#2957 - Removed <code>region</code> and <code>site</code> related UI and API Endpoints for aforementioned model classes.</li> <li>#2957 - Removed <code>region</code> and <code>site</code> columns from Tables for aforementioned model classes.</li> <li>#2958 - Removed Region and Site factories, filtersets, forms, factories, models, navigation menu items, serializers, tables, templates, tests and urls.</li> <li>#3224 - Removed support for Nautobot \"1.x\" REST API versions. The minimum supported REST API version is now \"2.0\".</li> <li>#3302 - Removed <code>Aggregate</code> and migrated all existing instances to <code>Prefix</code>.</li> </ul>"},{"location":"release-notes/version-2.0.html#fixed_12","title":"Fixed","text":"<ul> <li>#633 - Fixed job result not updating when job hard time limit is reached.</li> <li>#1362 - Fixed migrations for <code>Prefix.type</code>.</li> <li>#1422 - Improved OpenAPI schema representation of polymorphic fields such as <code>cable_peer</code>, <code>assigned_object</code>, etc.</li> <li>#2806 - Fixed some issues with initialization and updating of the dynamic (\"advanced\") filter form.</li> <li>#3066 - Fixed incorrect <code>field_class</code> when filtering <code>FloatField</code> and <code>DecimalField</code> model fields.</li> <li>#3066 - Fixed inability to provide non-integer values when filtering on <code>FloatField</code> and <code>DecimalField</code> fields in GraphQL.</li> <li>#3066 - Fixed inability to specify partial substrings in the UI when filtering by MAC address.</li> <li>#3154 - Fixed incorrect initialization of <code>TagFilter</code> when auto-attached to a FilterSet.</li> <li>#3164 - Merged <code>TaskResult</code> from <code>django-celery-results</code> into <code>JobResult</code>.</li> <li>#3291 - Fixed inheritance and <code>RoleField</code> definition on <code>Role</code> model mixins.</li> <li>#3342 - Fixed BaseFilterSet not using multiple choice filters for CharFields with choices.</li> <li>#3457 - Fixed bug preventing scheduled job from running.</li> </ul>"},{"location":"release-notes/version-2.0.html#dependencies_6","title":"Dependencies","text":"<ul> <li>#2521 - Removed dependency on <code>django-cryptography</code>.</li> <li>#2524 - Removed no-longer-used <code>drf-yasg</code> dependency.</li> </ul>"},{"location":"release-notes/version-2.0.html#housekeeping_11","title":"Housekeeping","text":"<ul> <li>#3255 - Added <code>--cache-test-fixtures</code> command line argument to Nautobot unit and integration tests.</li> <li>#3233 - Removed <code>CeleryTestCase</code> and associated calling code as it is no longer needed.</li> </ul>"},{"location":"release-notes/version-2.0.html#v200-alpha1-2023-01-31","title":"v2.0.0-alpha.1 (2023-01-31)","text":""},{"location":"release-notes/version-2.0.html#added_13","title":"Added","text":"<ul> <li>#1731 - Added missing filters to <code>circuits</code> app.</li> <li>#1733 - Added support for filtering on many more fields to the <code>Tenant</code> and <code>TenantGroup</code> filtersets.</li> <li>#2954 - Added fields (<code>contact_name</code>, <code>latitude</code>, etc.) from <code>Site</code> model to <code>Location</code> model to prepare for merging all sites into locations.</li> <li>#2955 - Added \"Region\" and \"Site\" <code>LocationTypes</code> and their respective locations based on existing <code>Site</code> and <code>Region</code> instances.</li> <li>#3132 - Added the ability for apps to register their models for inclusion in the global Nautobot search.</li> </ul>"},{"location":"release-notes/version-2.0.html#changed_13","title":"Changed","text":"<ul> <li>#510 - The <code>Region</code>, <code>RackGroup</code>, <code>TenantGroup</code>, and <code>InventoryItem</code> models are now based on <code>django-tree-queries</code> instead of <code>django-mptt</code>. This does change the API for certain tree operations on these models, for example <code>get_ancestors()</code> is now <code>ancestors()</code> and <code>get_descendants()</code> is now <code>descendants()</code>.</li> <li>#510 - The UI and REST API for <code>Region</code>, <code>RackGroup</code>, and <code>TenantGroup</code> now provide only the related count of objects (e.g. <code>site_count</code> for <code>Region</code>) that are directly related to each instance. Formerly they provided a cumulative total including objects related to its descendants as well.</li> <li>#510 - Renamed field <code>_depth</code> to <code>tree_depth</code> in the REST API for <code>Region</code>, <code>RackGroup</code>, <code>TenantGroup</code>, and <code>InventoryItem</code>.</li> <li>#510 - Renamed InventoryItem database relation <code>child_items</code> and filter fields <code>child_items</code> and <code>has_child_items</code> to <code>children</code> and <code>has_children</code> respectively.</li> <li>#2163 - <code>JobLogEntry.log_object</code>, <code>JobLogEntry.absolute_url</code>, <code>ScheduledJob.queue</code>, and <code>WebHook.ca_file_path</code> no longer permit null database values; use <code>\"\"</code> instead if needed.</li> <li>#2822 - Collapsed <code>DeviceRole</code>, <code>RackRole</code>, IPAM <code>Role</code> model and <code>IPAddressRoleChoices</code> into a single generic <code>Role</code> model.</li> <li>#2721 - Collapsed <code>nautobot.utilities</code> into <code>nautobot.core</code>. Refer to the 2.0 migration guide for details.</li> <li>#2788 - Changed REST framework allowed versions logic to support 1.2-1.5 and 2.0+.</li> <li>#2809 - Renamed <code>tag</code> filter on <code>TenantFilterSet</code> to <code>tags</code> same as elsewhere.</li> <li>#2872 - Refactored imports in <code>utilities</code> app to follow new code style.</li> <li>#2955 - Changed <code>CircuitTermination</code>, <code>Device</code>, <code>PowerPanel</code>, <code>RackGroup</code>, <code>Rack</code>, <code>Prefix</code>, <code>VLANGroup</code>, <code>VLAN</code>, <code>Cluster</code> instances associated with existing <code>Site</code> model instances to use the newly created corresponding <code>Locations</code> of <code>LocationType</code> \"Site\".</li> <li>#2993 - Implemented initial database backend for Celery task results.</li> <li>#3068 - Renamed fields on <code>Circuit</code> model: <code>type</code> to <code>circuit_type</code>, <code>terminations</code> to <code>circuit_terminations</code>, <code>termination_a</code> to <code>circuit_termination_a</code>, and <code>termination_z</code> to <code>circuit_termination_z</code>.</li> <li>#3068 - Renamed reverse-relation <code>circuittermination</code> to <code>circuit_terminations</code> on the <code>CablePath</code> model.</li> <li>#3068 - Renamed <code>group</code> field to <code>vlan_group</code> on VLAN model, renamed <code>ipaddresses</code> to <code>ip_addresses</code> on <code>Service</code> model.</li> <li>#3068 - Renamed <code>group</code> field to <code>tenant_group</code> on <code>Tenant</code> model.</li> <li>#3069 - Renamed foreign key fields and related names in Virtualization and DCIM apps to follow a common naming convention. See v2 upgrade guide for full list of changes.</li> </ul>"},{"location":"release-notes/version-2.0.html#removed_9","title":"Removed","text":"<ul> <li>#510 - Removed dependency on <code>django-mptt</code>. Models (<code>Region</code>, <code>RackGroup</code>, <code>TenantGroup</code>, <code>InventoryItem</code>) that previously were based on MPTT are now implemented using <code>django-tree-queries</code> instead.</li> <li>#1731 - Removed redundant filters from <code>circuits</code> app.</li> <li>#2163 - Removed unused <code>NullableCharField</code>, <code>NullableCharFieldFilter</code> and <code>MACAddressField</code> (not to be confused with <code>MACAddressCharField</code>, which remains) classes.</li> <li>#2523 - Removed <code>django-rq</code> dependency and support for RQ workers.</li> <li>#2815 - Removed <code>pycryptodome</code> dependency as it is no longer used.</li> <li>#2993 - Removed <code>NAUTOBOT_CELERY_RESULT_BACKEND</code> environment variable used to customize where Celery stores task results.</li> <li>#2993 - Removed optional settings documentation for <code>CELERY_RESULT_BACKEND</code> as it is no longer user-serviceable.</li> <li>#2993 - Removed optional settings documentation for <code>CELERY_RESULT_BACKEND_TRANSPORT_OPTIONS</code> as it is no longer user-serviceable.</li> <li>#3130 - Removed <code>CSS_CLASSES</code> definitions from legacy <code>ChoiceSets</code>.</li> </ul>"},{"location":"release-notes/version-2.0.html#fixed_13","title":"Fixed","text":"<ul> <li>#1982 - Fixed a UI presentation/validation issue with dynamic-groups using foreign-key filters that aren't explicitly defined in the corresponding FilterForm.</li> <li>#2808 - Fixed incorrectly named filters in <code>circuits</code> app.</li> <li>#3126 - Fixed <code>Interface</code> not raising exception when adding a <code>VLAN</code> from a different <code>Site</code> in <code>tagged_vlans</code>.</li> <li>#3167 - Fixed <code>ObjectChange</code> records not being migrated and <code>legacy_role__name</code> not being a property in <code>Role</code> migrations.</li> </ul>"},{"location":"release-notes/version-2.0.html#dependencies_7","title":"Dependencies","text":"<ul> <li>#2771 - Updated <code>jsonschema</code> version to <code>~4.17.0</code>.</li> <li>#2883 - Updated <code>django-taggit</code> to <code>3.1.0</code>.</li> <li>#2942 - Updated <code>django-tree-queries</code> to <code>0.13.0</code>.</li> <li>#2943 - Updated dependency <code>rich</code> to <code>~12.6.0</code>.</li> <li>#3027 - Updated dependencies <code>prometheus-client</code>, <code>django-storages</code>, <code>drf-spectacular</code>, <code>black</code>, <code>django-debug-toolbar</code>, <code>mkdocstrings</code>, <code>mkdocstrings-python</code>, <code>pylint</code>, <code>requests</code>, <code>selenium</code>, <code>watchdog</code>.</li> </ul>"},{"location":"release-notes/version-2.0.html#documentation_10","title":"Documentation","text":"<ul> <li>#204 - Added style guide documentation for importing python modules in Nautobot.</li> </ul>"},{"location":"release-notes/version-2.0.html#housekeeping_12","title":"Housekeeping","text":"<ul> <li>#204 - Changed imports to use module namespaces in <code>utilities/filters.py</code>.</li> <li>#2674 - Updated development dependency <code>black</code> to <code>~22.10.0</code>.</li> <li>#2803 - Updated <code>mkdocs-include-markdown-plugin</code> to <code>3.9.1</code>.</li> <li>#2844 - Updated development dependency <code>mkdocstrings-python</code> to 0.8.0.</li> <li>#3153 - Made integration test <code>CableConnectFormTestCase.test_js_functionality</code> more resilient and less prone to erroneous failures.</li> <li>#3177 - Updated <code>VLANFactory</code> to generate longer and more \"realistic\" <code>VLAN</code> names.</li> <li>#3177 - Fixed a spurious failure in <code>BulkEditObjectsViewTestCase.test_bulk_edit_objects_with_constrained_permission</code>.</li> </ul>"},{"location":"user-guide/index.html","title":"User Guide","text":""},{"location":"user-guide/administration/configuration/index.html","title":"Nautobot Configuration","text":"<p>This section describes how to get started with configuring Nautobot.</p>"},{"location":"user-guide/administration/configuration/index.html#initializing-the-configuration","title":"Initializing the Configuration","text":"<p>An initial configuration can be created by executing <code>nautobot-server init</code>. This will generate a new configuration with all of the default settings provided for you, and will also generate a unique <code>SECRET_KEY</code>.</p> <p>By default (if you haven't set <code>NAUTOBOT_ROOT</code> to some other value), the file will be created at <code>$HOME/.nautobot/nautobot_config.py</code>:</p> <pre><code>nautobot-server init\n</code></pre> <p>Example output:</p> <pre><code>Configuration file created at '/opt/nautobot/nautobot_config.py'\n</code></pre> <p>Tip</p> <p>The Nautobot Installation Docs example sets <code>NAUTOBOT_ROOT</code> to <code>/opt/nautobot</code>, so <code>nautobot_config.py</code> would be found at <code>/opt/nautobot/nautobot_config.py</code>.</p> <p>You may specify a different location for the configuration as the argument to <code>init</code>:</p> <pre><code>nautobot-server init /tmp/custom_config.py\n</code></pre> <pre><code>Configuration file created at '/tmp/custom_config.py'\n</code></pre> <p>Note</p> <p>Throughout the documentation, the configuration file will be referred to by name as <code>nautobot_config.py</code>. If you use a custom file name, you must use that instead.</p>"},{"location":"user-guide/administration/configuration/index.html#specifying-your-configuration","title":"Specifying your Configuration","text":"<p>If you place your configuration in the default location at <code>$HOME/.nautobot/nautobot_config.py</code>, you may utilize the <code>nautobot-server</code> command and it will use that location automatically.</p> <p>If you do not wish to utilize the default location, you have two options:</p>"},{"location":"user-guide/administration/configuration/index.html#config-argument","title":"Config argument","text":"<p>You may provide the <code>--config</code> argument when executing <code>nautobot-server</code> to tell Nautobot where to find your configuration. For example, to start a Nautobot shell with the configuration in an alternate location:</p> <pre><code>nautobot-server --config=/etc/nautobot_config.py nbshell\n</code></pre>"},{"location":"user-guide/administration/configuration/index.html#environment-variable","title":"Environment variable","text":"<p>You may also set the <code>NAUTOBOT_CONFIG</code> environment variable to the location of your configuration file so that you don't have to keep providing the <code>--config</code> argument. If set, this overrides the default location.</p> <pre><code>export NAUTOBOT_CONFIG=/etc/nautobot_config.py\nnautobot-server nbshell\n</code></pre>"},{"location":"user-guide/administration/configuration/index.html#nautobot-root-directory","title":"Nautobot Root Directory","text":"<p>By default, Nautobot will always read or store files in <code>~/.nautobot</code> to allow for installation without requiring superuser (root) permissions.</p> <p>The <code>NAUTOBOT_ROOT</code> configuration setting specifies where these files will be stored on your file system. You may customize this location by setting the <code>NAUTOBOT_ROOT</code> environment variable. For example:</p> <pre><code>export NAUTOBOT_ROOT=/opt/nautobot\n</code></pre> <p>This setting is also used in the Nautobot deployment guide to make the <code>nautobot-server</code> command easier to find and use.</p> <p>Note</p> <p>The <code>--config</code> argument and the <code>NAUTOBOT_CONFIG</code> environment variable will always take precedence over <code>NAUTOBOT_ROOT</code> for the purpose of telling Nautobot where your <code>nautobot_config.py</code> can be found.</p> <p>Warning</p> <p>Do not override <code>NAUTOBOT_ROOT</code> in your <code>nautobot_config.py</code>. It will not work as expected. If you need to customize this setting, please always set the <code>NAUTOBOT_ROOT</code> environment variable.</p>"},{"location":"user-guide/administration/configuration/index.html#file-storage","title":"File Storage","text":"<p>Nautobot is capable of storing various types of files. This includes Jobs, Git repositories, image attachments, and static files (CSS, JavaScript, etc.).</p> <p>Each of the features requiring use of file storage default to being stored in <code>NAUTOBOT_ROOT</code>. If desired, you may customize each one individually. Please see each feature's respective documentation linked above for how to do that.</p>"},{"location":"user-guide/administration/configuration/index.html#configuration-parameters","title":"Configuration Parameters","text":"<p>While Nautobot has many configuration settings, only a few of them must be defined at the time of installation. These configuration parameters may be set in <code>nautobot_config.py</code> or by default many of them may also be set by environment variables. Please see the following links for more information:</p> <ul> <li>Required settings</li> <li>Optional settings</li> </ul>"},{"location":"user-guide/administration/configuration/index.html#optional-authentication-configuration","title":"Optional Authentication Configuration","text":"<ul> <li>LDAP Authentication</li> <li>Remote User Authentication</li> <li>SSO Authentication</li> </ul>"},{"location":"user-guide/administration/configuration/index.html#changing-the-configuration","title":"Changing the Configuration","text":"<p>Configuration settings may be changed at any time. However, the WSGI service (e.g. uWSGI) must be restarted before the changes will take effect. For example, if you're running Nautobot using <code>systemd:</code></p> <pre><code>sudo systemctl restart nautobot nautobot-worker\n</code></pre>"},{"location":"user-guide/administration/configuration/index.html#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"user-guide/administration/configuration/index.html#troubleshooting-the-configuration","title":"Troubleshooting the Configuration","text":"<p>To facilitate troubleshooting and debugging of settings, try inspecting the settings from a shell.</p> <p>First get a Nautobot shell, which automatically loads the Django settings:</p> <pre><code>nautobot-server nbshell\n</code></pre> <p>Output:</p> <pre><code># Shell Plus Model Imports\n...\n# Shell Plus Django Imports\n..\nfrom django.conf import settings\n...\n# Django version 3.2.18\n# Nautobot version 2.0.0a2\n...\nPython 3.8.16 (default, Mar 23 2023, 04:48:11)\n[GCC 10.2.1 20210110] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n&gt;&gt;&gt;\n</code></pre> <p>Inspect the <code>SETTINGS_PATH</code> variable. Does it match the configuration you're expecting to be loading?</p> <pre><code>&gt;&gt;&gt; settings.SETTINGS_PATH\n'/home/example/.nautobot/nautobot_config.py'\n</code></pre> <p>If not, double check that you haven't set the <code>NAUTOBOT_CONFIG</code> environment variable, or if you did, that the path defined there is the correct one.</p> <pre><code>echo $NAUTOBOT_CONFIG\n</code></pre>"},{"location":"user-guide/administration/configuration/index.html#adding-your-own-dependencies","title":"Adding your own dependencies","text":"<p>Warning</p> <p>Be cautious not to confuse extra applications with Nautobot plugins which are installed using the <code>PLUGINS</code> setting. They are similar, but distinctly different!</p> <p>Nautobot, being a Django application, allows for installation of additional dependencies utilizing the <code>INSTALLED_APPS</code> settings. Due to the highly specialized nature of Nautobot, you cannot safely do this.</p> <p>For example, let's assume that you want to install the popular <code>django-health-check</code> plugin to your Nautobot deployment which requires you to add one or more <code>health_check</code> entries to your <code>INSTALLED_APPS</code>.</p> <p>If you attempt to modify <code>INSTALLED_APPS</code> yourself, you might see an error such as this:</p> <pre><code>Traceback (most recent call last):\nFile \"/usr/local/bin/nautobot-server\", line 8, in &lt;module&gt;\nsys.exit(main())\nFile \"/usr/local/lib/python3.8/site-packages/nautobot/core/cli.py\", line 53, in main\ninitializer=_configure_settings,  # Called after defaults\nFile \"/usr/local/lib/python3.8/site-packages/nautobot/core/runner/runner.py\", line 193, in run_app\nmanagement.execute_from_command_line([runner_name, command] + command_args)\nFile \"/usr/local/lib/python3.8/site-packages/django/core/management/__init__.py\", line 401, in execute_from_command_line\nutility.execute()\nFile \"/usr/local/lib/python3.8/site-packages/django/core/management/__init__.py\", line 377, in execute\ndjango.setup()\nFile \"/usr/local/lib/python3.8/site-packages/django/__init__.py\", line 24, in setup\napps.populate(settings.INSTALLED_APPS)\nFile \"/usr/local/lib/python3.8/site-packages/django/apps/registry.py\", line 95, in populate\n\"duplicates: %s\" % app_config.label)\ndjango.core.exceptions.ImproperlyConfigured: Application labels aren't unique, duplicates: health_check\n</code></pre> <p>To make it work, you would simply specify <code>EXTRA_INSTALLED_APPS</code> instead:</p> <pre><code>EXTRA_INSTALLED_APPS = [\n'health_check',\n...\n]\n</code></pre> <p>For more information on installing extra applications, please see the documentation on Extra Applications.</p> <p>For more information on installing or developing Nautobot plugins, please see the documentation on Plugins.</p>"},{"location":"user-guide/administration/configuration/node-configuration.html","title":"Node.js Configuration","text":"<p>This document provides instructions on how to configure Node.js for builds and rebuilds of the 2.x Nautobot UI.</p>"},{"location":"user-guide/administration/configuration/node-configuration.html#adding-an-alternate-npm-registry","title":"Adding an Alternate <code>npm</code> registry","text":"<p>By configuring <code>npm</code> with an alternate registry, you can have more control over where <code>npm</code> looks for packages and how it resolves dependencies. There are several reasons why you might want to add an alternate npm registry such as:</p> <ol> <li>Network Restrictions: In certain network environments, such as corporate networks or restricted networks, access to the default npm registry might be blocked. This can prevent you from installing or updating packages. By adding an alternate registry, which is accessible from your network, you can bypass these restrictions and ensure seamless package installations.</li> <li>Package Management Control: Hosting your own npm registry gives you greater control over the packages used in your project. You can curate a set of packages that are tailored to your organization's needs, ensuring consistency and stability across your projects. Additionally, by hosting your own registry, you can enforce stricter version controls and ensure that only approved packages are used.</li> </ol> <p>To add an alternate <code>npm</code> registry to your Nautobot installation, follow these steps:</p> <ol> <li>Open your terminal or command prompt.</li> <li>Navigate to the <code>nautobot/ui</code> directory.</li> <li> <p>Use the <code>npm config set</code> command to set the registry URL. Replace REGISTRY_URL with the URL of the alternate registry you want to use.</p> <pre><code>npm config set registry REGISTRY_URL\n</code></pre> <p>For example, if you want to configure npm to use the npm public registry as the fallback registry, you can use the following command:</p> <pre><code>npm config set registry https://registry.npmjs.org\n</code></pre> </li> <li> <p>Verify the configuration by running the <code>npm config list</code> command. This will display the current <code>npm</code> configuration, including the registry URL.</p> <p>```shell npm config list</p> </li> </ol>"},{"location":"user-guide/administration/configuration/optional-settings.html","title":"Optional Configuration Settings","text":""},{"location":"user-guide/administration/configuration/optional-settings.html#administratively-configurable-settings","title":"Administratively Configurable Settings","text":"<p>Added in version 1.2.0</p> <p>A number of settings can alternatively be configured via the Nautobot Admin UI. To do so, these settings must not be defined in your <code>nautobot_config.py</code>, as any settings defined there will take precedence over any values defined in the Admin UI. Settings that are currently configurable via the Admin UI include:</p> <ul> <li>BANNER_BOTTOM</li> <li>BANNER_LOGIN</li> <li>BANNER_TOP</li> <li>CHANGELOG_RETENTION</li> <li>DEPLOYMENT_ID</li> <li>DEVICE_NAME_AS_NATURAL_KEY</li> <li>DYNAMIC_GROUPS_MEMBER_CACHE_TIMEOUT</li> <li>FEEDBACK_BUTTON_ENABLED</li> <li>HIDE_RESTRICTED_UI</li> <li>LOCATION_NAME_AS_NATURAL_KEY</li> <li>MAX_PAGE_SIZE</li> <li>NETWORK_DRIVERS</li> <li>PAGINATE_COUNT</li> <li>PER_PAGE_DEFAULTS</li> <li>PREFER_IPV4</li> <li>RACK_ELEVATION_DEFAULT_UNIT_HEIGHT</li> <li>RACK_ELEVATION_DEFAULT_UNIT_WIDTH</li> <li>RELEASE_CHECK_TIMEOUT</li> <li>RELEASE_CHECK_URL</li> <li>SUPPORT_MESSAGE</li> </ul>"},{"location":"user-guide/administration/configuration/optional-settings.html#extra-applications","title":"Extra Applications","text":"<p>A need may arise to allow the user to register additional settings. These will automatically apply based on keynames prefixed with <code>EXTRA_</code> assuming the base key (the latter part of the setting name) is of type list or tuple.</p> <p>For example, to register additional <code>INSTALLED_APPS</code>, you would simply specify this in your custom (user) configuration::</p> <pre><code>EXTRA_INSTALLED_APPS = [\n'foo.bar',\n]\n</code></pre> <p>This will ensure your default setting's <code>INSTALLED_APPS</code> do not have to be modified, and the user can specify additional apps with ease.  Similarly, additional <code>MIDDLEWARE</code> can be added using <code>EXTRA_MIDDLEWARE</code>.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#allowed_url_schemes","title":"ALLOWED_URL_SCHEMES","text":"<p>Default: <code>('file', 'ftp', 'ftps', 'http', 'https', 'irc', 'mailto', 'sftp', 'ssh', 'tel', 'telnet', 'tftp', 'vnc', 'xmpp')</code></p> <p>A list of permitted URL schemes referenced when rendering links within Nautobot. Note that only the schemes specified in this list will be accepted: If adding your own, be sure to replicate all of the default values as well (excluding those schemes which are not desirable).</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#banner_top","title":"BANNER_TOP","text":""},{"location":"user-guide/administration/configuration/optional-settings.html#banner_bottom","title":"BANNER_BOTTOM","text":"<p>Default: <code>\"\"</code> (Empty string)</p> <p>Setting these variables will display custom content in a banner at the top and/or bottom of the page, respectively. HTML is allowed. To replicate the content of the top banner in the bottom banner, set:</p> <pre><code>BANNER_TOP = 'Your banner text'\nBANNER_BOTTOM = BANNER_TOP\n</code></pre> <p>Added in version 1.2.0</p> <p>If you do not set a value for these settings in your <code>nautobot_config.py</code>, they can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for either setting in <code>nautobot_config.py</code>, it will override any dynamically configured value.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#banner_login","title":"BANNER_LOGIN","text":"<p>Default: <code>\"\"</code> (Empty string)</p> <p>This defines custom content to be displayed on the login page above the login form. HTML is allowed.</p> <p>Added in version 1.2.0</p> <p>If you do not set a value for this setting in your <code>nautobot_config.py</code>, it can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for this setting in <code>nautobot_config.py</code>, it will override any dynamically configured value.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#branding_filepaths","title":"BRANDING_FILEPATHS","text":"<p>Default:</p> <pre><code>{\n\"logo\": os.getenv(\"NAUTOBOT_BRANDING_FILEPATHS_LOGO\", None),  # Navbar logo\n\"favicon\": os.getenv(\"NAUTOBOT_BRANDING_FILEPATHS_FAVICON\", None),  # Browser favicon\n\"icon_16\": os.getenv(\"NAUTOBOT_BRANDING_FILEPATHS_ICON_16\", None),  # 16x16px icon\n\"icon_32\": os.getenv(\"NAUTOBOT_BRANDING_FILEPATHS_ICON_32\", None),  # 32x32px icon\n\"icon_180\": os.getenv(\"NAUTOBOT_BRANDING_FILEPATHS_ICON_180\", None),  # 180x180px icon - used for the apple-touch-icon header\n\"icon_192\": os.getenv(\"NAUTOBOT_BRANDING_FILEPATHS_ICON_192\", None),  # 192x192px icon\n\"icon_mask\": os.getenv(\"NAUTOBOT_BRANDING_FILEPATHS_ICON_MASK\", None),  # mono-chrome icon used for the mask-icon header\n}\n</code></pre> <p>A set of filepaths relative to the <code>MEDIA_ROOT</code> which locate image assets used for custom branding. Each of these assets takes the place of the corresponding stock Nautobot asset. This allows for instance, providing your own navbar logo and favicon.</p> <p>These environment variables may be used to specify the values:</p> <ul> <li><code>NAUTOBOT_BRANDING_FILEPATHS_LOGO</code></li> <li><code>NAUTOBOT_BRANDING_FILEPATHS_FAVICON</code></li> <li><code>NAUTOBOT_BRANDING_FILEPATHS_ICON_16</code></li> <li><code>NAUTOBOT_BRANDING_FILEPATHS_ICON_32</code></li> <li><code>NAUTOBOT_BRANDING_FILEPATHS_ICON_180</code></li> <li><code>NAUTOBOT_BRANDING_FILEPATHS_ICON_192</code></li> <li><code>NAUTOBOT_BRANDING_FILEPATHS_ICON_MASK</code></li> </ul> <p>If a custom image asset is not provided for any of the above options, the stock Nautobot asset is used.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#branding_prepended_filename","title":"BRANDING_PREPENDED_FILENAME","text":"<p>Added in version 1.3.4</p> <p>Default: <code>\"nautobot_\"</code></p> <p>Environment Variable: <code>NAUTOBOT_BRANDING_PREPENDED_FILENAME</code></p> <p>Defines the prefix of the filename when exporting to CSV/YAML or export templates.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#branding_title","title":"BRANDING_TITLE","text":"<p>Default: <code>\"Nautobot\"</code></p> <p>Environment Variable: <code>NAUTOBOT_BRANDING_TITLE</code></p> <p>The defines the custom branding title that should be used in place of \"Nautobot\" within user facing areas of the application like the HTML title of web pages.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#branding_urls","title":"BRANDING_URLS","text":"<p>Default:</p> <pre><code>{\n\"code\": os.getenv(\"NAUTOBOT_BRANDING_URLS_CODE\", \"https://github.com/nautobot/nautobot\"),  # Code link in the footer\n\"docs\": os.getenv(\"NAUTOBOT_BRANDING_URLS_DOCS\", \"&lt;STATIC_URL&gt;docs/index.html\"),  # Docs link in the footer\n\"help\": os.getenv(\"NAUTOBOT_BRANDING_URLS_HELP\", \"https://github.com/nautobot/nautobot/wiki\"),  # Help link in the footer\n}\n</code></pre> <p>A set of URLs that correspond to helpful links in the right of the footer on every web page.</p> <p>These environment variables may be used to specify the values:</p> <ul> <li><code>NAUTOBOT_BRANDING_URLS_CODE</code></li> <li><code>NAUTOBOT_BRANDING_URLS_DOCS</code></li> <li><code>NAUTOBOT_BRANDING_URLS_HELP</code></li> </ul> <p>If a custom URL is not provided for any of the links, the default link within the Nautobot community is used.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#celery_broker_transport_options","title":"CELERY_BROKER_TRANSPORT_OPTIONS","text":"<p>Default: <code>{}</code></p> <p>A dict of additional options passed to the Celery broker transport. This is only required when configuring Celery to utilize Redis Sentinel.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#celery_broker_url","title":"CELERY_BROKER_URL","text":"<p>Environment Variable: <code>NAUTOBOT_CELERY_BROKER_URL</code></p> <p>Default: <code>'redis://localhost:6379/0'</code></p> <p>Celery broker URL used to tell workers where queues are located.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#celery_task_default_queue","title":"CELERY_TASK_DEFAULT_QUEUE","text":"<p>Added in version 1.5.0</p> <p>Environment Variable: <code>NAUTOBOT_CELERY_TASK_DEFAULT_QUEUE</code></p> <p>Default: <code>'default'</code></p> <p>The default celery queue name that will be used by workers if no queue is specified in the <code>nautobot-server celery worker</code> command. This queue will also be used by celery tasks if no queue is specified when a task is run.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#celery_task_soft_time_limit","title":"CELERY_TASK_SOFT_TIME_LIMIT","text":"<p>Default: <code>300</code> (5 minutes)</p> <p>Environment Variable: <code>NAUTOBOT_CELERY_TASK_SOFT_TIME_LIMIT</code></p> <p>The global Celery task soft timeout (in seconds). Any background task that exceeds this duration will receive a <code>SoftTimeLimitExceeded</code> exception and is responsible for handling this exception and performing any necessary cleanup or final operations before ending. See also <code>CELERY_TASK_TIME_LIMIT</code> below.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#celery_task_time_limit","title":"CELERY_TASK_TIME_LIMIT","text":"<p>Default: <code>600</code> (10 minutes)</p> <p>Environment Variable: <code>NAUTOBOT_CELERY_TASK_TIME_LIMIT</code></p> <p>The global Celery task hard timeout (in seconds). Any background task that exceeds this duration will be forcibly killed with a <code>SIGKILL</code> signal.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#celery_worker_prometheus_ports","title":"CELERY_WORKER_PROMETHEUS_PORTS","text":"<p>Added in version 1.5.10</p> <p>Default: <code>[]</code> (disabled)</p> <p>Environment Variable: <code>NAUTOBOT_CELERY_WORKER_PROMETHEUS_PORTS</code></p> <p>Ports for Prometheus metric HTTP server running on the celery worker(s).</p> <p>Normally this should be set to a single port, unless you have multiple workers running on a single machine, i.e. sharing the same available ports. In that case you need to specify a range of ports greater than or equal to the highest amount of workers you are running on a single machine (comma-separated, like \"8080,8081,8082\"). You can then use the <code>target_limit</code> parameter to the Prometheus <code>scrape_config</code> to ensure you are not getting duplicate metrics in that case. Set this to an empty list to disable it.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#celery_worker_redirect_stdouts","title":"CELERY_WORKER_REDIRECT_STDOUTS","text":"<p>Added in version 2.0.0</p> <p>Environment Variable: <code>NAUTOBOT_CELERY_WORKER_REDIRECT_STDOUTS</code></p> <p>Default: <code>True</code></p> <p>If enabled stdout and stderr of running jobs will be redirected to the task logger.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#celery_worker_redirect_stdouts_level","title":"CELERY_WORKER_REDIRECT_STDOUTS_LEVEL","text":"<p>Added in version 2.0.0</p> <p>Environment Variable: <code>NAUTOBOT_CELERY_WORKER_REDIRECT_STDOUTS_LEVEL</code></p> <p>Default: <code>WARNING</code></p> <p>The log level of log messages generated by redirected job stdout and stderr. Can be one of <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, or <code>CRITICAL</code>.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#changelog_retention","title":"CHANGELOG_RETENTION","text":"<p>Default: <code>90</code></p> <p>The number of days to retain logged changes (object creations, updates, and deletions). Set this to <code>0</code> to retain changes in the database indefinitely.</p> <p>Warning</p> <p>If enabling indefinite changelog retention, it is recommended to periodically delete old entries. Otherwise, the database may eventually exceed capacity.</p> <p>Added in version 1.2.0</p> <p>If you do not set a value for this setting in your <code>nautobot_config.py</code>, it can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for this setting in <code>nautobot_config.py</code>, it will override any dynamically configured value.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#config_context_dynamic_groups_enalbed","title":"CONFIG_CONTEXT_DYNAMIC_GROUPS_ENALBED","text":"<p>Default: <code>False</code></p> <p>Environment Variable: <code>NAUTOBOT_CONFIG_CONTEXT_DYNAMIC_GROUPS_ENABLED</code></p> <p>If <code>True</code>, it will be possible to apply Config Context objects to Devices and Virtual Machines via Dynamic Group membership. When set to <code>False</code> this behavior will not be available.</p> <p>Warning</p> <p>With a large number of dynamic groups, enabling this could invoke a performance penalty when processing Config Contexts.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#content_type_cache_timeout","title":"CONTENT_TYPE_CACHE_TIMEOUT","text":"<p>Added in version 1.6.0</p> <p>Default: <code>0</code> (disabled)</p> <p>Environment Variable: <code>NAUTOBOT_CONTENT_TYPE_CACHE_TIMEOUT</code></p> <p>The number of seconds to cache the content type accessible via a object's class property <code>Object._content_type_cached</code>. This can save frequent calls to <code>ContentType.objects.get_for_model(model)</code>. Set this to <code>0</code> to disable caching.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#cors_allow_all_origins","title":"CORS_ALLOW_ALL_ORIGINS","text":"<p>Default: <code>False</code></p> <p>Environment Variable: <code>NAUTOBOT_CORS_ALLOW_ALL_ORIGINS</code></p> <p>If <code>True</code>, all origins will be allowed. Other settings restricting allowed origins will be ignored.</p> <p>Setting this to <code>True</code> can be dangerous, as it allows any website to make cross-origin requests to yours. Generally you'll want to restrict the list of allowed origins with <code>CORS_ALLOWED_ORIGINS</code> or <code>CORS_ALLOWED_ORIGIN_REGEXES</code>.</p> <p>Previously this setting was called <code>CORS_ORIGIN_ALLOW_ALL</code>, which still works as an alias, with the new name taking precedence.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#cors_allowed_origins","title":"CORS_ALLOWED_ORIGINS","text":"<p>Default: <code>[]</code> (Empty list)</p> <p>A list of origins that are authorized to make cross-site HTTP requests.</p> <p>An Origin is defined by the CORS RFC Section 3.2 as a URI <code>scheme + hostname + port</code>, or one of the special values <code>'null'</code> or <code>'file://'</code>. Default ports (HTTPS = 443, HTTP = 80) are optional here.</p> <p>The special value <code>null</code> is sent by the browser in \"privacy-sensitive contexts\", such as when the client is running from a <code>file://</code> domain. The special value <code>file://</code> is sent accidentally by some versions of Chrome on Android as per this bug.</p> <p>Example:</p> <pre><code>CORS_ALLOWED_ORIGINS = [\n\"https://example.com\",\n\"https://sub.example.com\",\n\"http://localhost:8080\",\n\"http://127.0.0.1:9000\"\n]\n</code></pre> <p>Previously this setting was called <code>CORS_ORIGIN_WHITELIST</code>, which still works as an alias, with the new name taking precedence.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#cors_allowed_origin_regexes","title":"CORS_ALLOWED_ORIGIN_REGEXES","text":"<p>Default: <code>[]</code></p> <p>A list of strings representing regexes that match Origins that are authorized to make cross-site HTTP requests. Useful when <code>CORS_ALLOWED_ORIGINS</code> is impractical, such as when you have a large number of subdomains.</p> <p>Example:</p> <pre><code>CORS_ALLOWED_ORIGIN_REGEXES = [\nr\"^https://\\w+\\.example\\.com$\",\n]\n</code></pre> <p>Previously this setting was called <code>CORS_ORIGIN_REGEX_WHITELIST</code>, which still works as an alias, with the new name taking precedence.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#deployment_id","title":"DEPLOYMENT_ID","text":"<p>Added in version 1.6.0</p> <p>Default: a random UUID generated at install time.</p> <p>This setting is used to uniquely but anonymously identify Nautobot deployments when sending installation metrics. This setting is not generally intended to be user-serviceable. See the documentation for the <code>send_installation_metrics</code> management command for more details.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#device_name_as_natural_key","title":"DEVICE_NAME_AS_NATURAL_KEY","text":"<p>Added in version 2.0.0</p> <p>Default: <code>False</code></p> <p><code>Device</code> names are not guaranteed globally-unique by Nautobot but in practice they often are. Set this to <code>True</code> to use the device <code>name</code> alone as the natural key for <code>Device</code> objects. Set this to <code>False</code> to use the sequence <code>(name, tenant, location)</code> as the natural key instead.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#disable_prefix_list_hierarchy","title":"DISABLE_PREFIX_LIST_HIERARCHY","text":"<p>Default: <code>False</code></p> <p>This setting disables rendering of the IP prefix hierarchy (parent/child relationships) in the IPAM prefix list view. With large sets of prefixes, users may encounter a performance penalty when trying to load the prefix list view due to the nature of calculating the parent/child relationships. This setting allows users to disable the hierarchy and instead only render a flat list of all prefixes in the table.</p> <p>A later release of Nautobot will address the underlying performance issues, and likely remove this configuration option.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#dynamic_groups_member_cache_timeout","title":"DYNAMIC_GROUPS_MEMBER_CACHE_TIMEOUT","text":"<p>Added in version 1.6.0</p> <p>Default: <code>0</code> (disabled)</p> <p>The number of seconds to cache the member list of dynamic groups. With large datasets (those in scope of a Dynamic Group and number of Dynamic Groups themselves), users will encounter a performance penalty using or accessing the membership lists. This setting allows users to accept a cached list for common use cases (particularly in the UI) that expires after the configured time. Set this to <code>0</code> to disable caching.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#enforce_global_unique","title":"ENFORCE_GLOBAL_UNIQUE","text":"<p>Default: <code>False</code></p> <p>Environment Variable: <code>NAUTOBOT_ENFORCE_GLOBAL_UNIQUE</code></p> <p>By default, Nautobot will permit users to create duplicate prefixes and IP addresses in the global table (that is, those which are not assigned to any VRF). This behavior can be disabled by setting <code>ENFORCE_GLOBAL_UNIQUE</code> to <code>True</code>.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#exempt_view_permissions","title":"EXEMPT_VIEW_PERMISSIONS","text":"<p>Default: <code>[]</code> (Empty list)</p> <p>A list of Nautobot models to exempt from the enforcement of view permissions. Models listed here will be viewable by all users, both authenticated and anonymous.</p> <p>List models in the form <code>&lt;app&gt;.&lt;model&gt;</code>. For example:</p> <pre><code>EXEMPT_VIEW_PERMISSIONS = [\n'dcim.location',\n'dcim.location_type',\n'ipam.prefix',\n]\n</code></pre> <p>To exempt all models from view permission enforcement, set the following. (Note that <code>EXEMPT_VIEW_PERMISSIONS</code> must be an iterable.)</p> <pre><code>EXEMPT_VIEW_PERMISSIONS = ['*']\n</code></pre> <p>Note</p> <p>Using a wildcard will not affect certain potentially sensitive models, such as user permissions. If there is a need to exempt these models, they must be specified individually.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#external_auth_default_groups","title":"EXTERNAL_AUTH_DEFAULT_GROUPS","text":"<p>Default: <code>[]</code> (Empty list)</p> <p>The list of group names to assign a new user account when created using 3rd-party authentication.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#external_auth_default_permissions","title":"EXTERNAL_AUTH_DEFAULT_PERMISSIONS","text":"<p>Default: <code>{}</code> (Empty dictionary)</p> <p>A mapping of permissions to assign a new user account when created using SSO authentication. Each key in the dictionary will be the permission name specified as <code>&lt;app_label&gt;.&lt;action&gt;_&lt;model&gt;</code>, and the value should be set to the permission constraints, or <code>None</code> to allow all objects.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#example-permissions","title":"Example Permissions","text":"Permission Description <code>{'dcim.view_device': {}}</code> or <code>{'dcim.view_device': None}</code> Users can view all devices <code>{'dcim.add_device': {}}</code> Users can add devices, see note below <code>{'dcim.view_device': {\"location__name__in\": [\"HQ\"], \"location__location_type__name__in\": [\"Building\"]}}</code> Users can view all devices in the HQ Building <p>Warning</p> <p>Permissions can be complicated! Be careful when restricting permissions to also add any required prerequisite permissions.</p> <p>For example, when adding Devices the Device Role, Device Type, Location, and Status fields are all required fields in order for the UI to function properly. Users will also need view permissions for those fields or the corresponding field selections in the UI will be unavailable and potentially prevent objects from being able to be created or edited.</p> <p>The following example gives a user a reasonable amount of access to add devices to a single location (Building HQ in this case):</p> <pre><code>{\n'dcim.add_device': {\"location__name__in\":  [\"HQ\"], \"location__location_type__name__in\": [\"Building\"]},\n'dcim.view_device': {\"location__name__in\":  [\"HQ\"], \"location__location_type__name__in\": [\"Building\"]},\n'dcim.view_devicerole': None,\n'dcim.view_devicetype': None,\n'extras.view_status': None,\n'dcim.view_location': {\"name__in\":  [\"HQ\"], \"location_type__name__in\": [\"Building\"]},\n'dcim.view_manufacturer': None,\n'dcim.view_region': None,\n'dcim.view_rack': None,\n'dcim.view_rackgroup': None,\n'dcim.view_platform': None,\n'virtualization.view_cluster': None,\n'virtualization.view_clustergroup': None,\n'tenancy.view_tenant': None,\n'tenancy.view_tenantgroup': None,\n}\n</code></pre> <p>Please see the object permissions page for more information.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#feedback_button_enabled","title":"FEEDBACK_BUTTON_ENABLED","text":"<p>Added in version 2.0.0</p> <p>Default: <code>True</code></p> <p>If set to <code>True</code>, a \"Submit Feedback\" button is added to the New UI sidebar secondary menu, which is used to collect user feedback.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#git_root","title":"GIT_ROOT","text":"<p>Default: <code>os.path.join(NAUTOBOT_ROOT, \"git\")</code></p> <p>Environment Variable: <code>NAUTOBOT_GIT_ROOT</code></p> <p>The file path to a directory where cloned Git repositories will be located.</p> <p>The value of this variable can also be customized by setting the environment variable <code>NAUTOBOT_GIT_ROOT</code> to a directory path of your choosing.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#graphql_computed_field_prefix","title":"GRAPHQL_COMPUTED_FIELD_PREFIX","text":"<p>Default: <code>\"cpf\"</code></p> <p>By default, all computed fields in GraphQL will be prefixed with <code>cf</code>. A computed field named <code>my_field</code> will appear in GraphQL as <code>cpf_my_field</code> by default. It's possible to change or remove the prefix by setting the value of <code>GRAPHQL_COMPUTED_FIELD_PREFIX</code>.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#graphql_custom_field_prefix","title":"GRAPHQL_CUSTOM_FIELD_PREFIX","text":"<p>Default: <code>\"cf\"</code></p> <p>By default, all custom fields in GraphQL will be prefixed with <code>cf</code>. A custom field named <code>my_field</code> will appear in GraphQL as <code>cf_my_field</code> by default. It's possible to change or remove the prefix by setting the value of <code>GRAPHQL_CUSTOM_FIELD_PREFIX</code>.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#graphql_relationship_prefix","title":"GRAPHQL_RELATIONSHIP_PREFIX","text":"<p>Default: <code>\"rel\"</code></p> <p>By default, all relationship associations in GraphQL will be prefixed with <code>rel</code>. A relationship named <code>my_relationship</code> will appear in GraphQL as <code>rel_my_relationship</code> by default. It's possible to change or remove the prefix by setting the value of <code>GRAPHQL_RELATIONSHIP_PREFIX</code>.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#hide_restricted_ui","title":"HIDE_RESTRICTED_UI","text":"<p>Default: <code>False</code></p> <p>When set to <code>True</code>, users with limited permissions will only be able to see items in the UI they have access to.</p> <p>Added in version 1.2.0</p> <p>If you do not set a value for this setting in your <code>nautobot_config.py</code>, it can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for this setting in <code>nautobot_config.py</code>, it will override any dynamically configured value.</p> <p>Added in version 1.3.10</p> <p>When this setting is set to <code>True</code>, logged out users will be redirected to the login page when navigating to the Nautobot home page.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#http_proxies","title":"HTTP_PROXIES","text":"<p>Default: <code>None</code> (Disabled)</p> <p>A dictionary of HTTP proxies to use for outbound requests originating from Nautobot (e.g. when sending webhook requests). Proxies should be specified by schema (HTTP and HTTPS) as per the Python requests library documentation. For example:</p> <pre><code>HTTP_PROXIES = {\n'http': 'http://10.10.1.10:3128',\n'https': 'http://10.10.1.10:1080',\n}\n</code></pre> <p>Note</p> <p>When using Git repositories within Nautobot the Python library <code>GitPython</code> needs extra proxy configuration:</p> <pre><code>git config --global http.proxy http://192.0.2.1:3128\ngit config --global https.proxy http://192.0.2.1:3128\n</code></pre>"},{"location":"user-guide/administration/configuration/optional-settings.html#installation_metrics_enabled","title":"INSTALLATION_METRICS_ENABLED","text":"<p>Added in version 1.6.0</p> <p>Default: <code>True</code> for existing Nautobot deployments, user-specified when running <code>nautobot-server init</code> for a new deployment.</p> <p>Environment Variable: <code>NAUTOBOT_INSTALLATION_METRICS_ENABLED</code></p> <p>When set to <code>True</code>, Nautobot will send anonymized installation metrics to the Nautobot maintainers when running the <code>post_upgrade</code> or <code>send_installation_metrics</code> management commands. See the documentation for the <code>send_installation_metrics</code> management command for more details.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#jobs_root","title":"JOBS_ROOT","text":"<p>Default: <code>os.path.join(NAUTOBOT_ROOT, \"jobs\")</code></p> <p>Environment Variable: <code>NAUTOBOT_JOBS_ROOT</code></p> <p>The file path to a directory where Jobs can be discovered.</p> <p>Caution</p> <p>This directory must contain an <code>__init__.py</code> file.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#location_name_as_natural_key","title":"LOCATION_NAME_AS_NATURAL_KEY","text":"<p>Added in version 2.0.0</p> <p>Default: <code>False</code></p> <p><code>Location</code> names are not guaranteed globally-unique by Nautobot but in practice they often are. Set this to <code>True</code> to use the location <code>name</code> alone as the natural key for <code>Location</code> objects. Set this to <code>False</code> to use the sequence <code>(name, parent__name, parent__parent__name, ...)</code> as the natural key instead.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#log_deprecation_warnings","title":"LOG_DEPRECATION_WARNINGS","text":"<p>Removed in version 1.5.3</p> <p>This setting was moved to environment variable only as it conflicts with app startup due to import-time order.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#maintenance_mode","title":"MAINTENANCE_MODE","text":"<p>Default: <code>False</code></p> <p>Environment Variable: <code>NAUTOBOT_MAINTENANCE_MODE</code></p> <p>Setting this to <code>True</code> will display a \"maintenance mode\" banner at the top of every page. Additionally, Nautobot will no longer update a user's \"last active\" time upon login. This is to allow new logins when the database is in a read-only state. Recording of login times will resume when maintenance mode is disabled.</p> <p>Note</p> <p>The default <code>SESSION_ENGINE</code> configuration will store sessions in the database, this obviously will not work when <code>MAINTENANCE_MODE</code> is <code>True</code> and the database is in a read-only state for maintenance.  Consider setting <code>SESSION_ENGINE</code> to <code>django.contrib.sessions.backends.cache</code> when enabling <code>MAINTENANCE_MODE</code>.</p> <p>Note</p> <p>The Docker container normally attempts to run migrations on startup; however, if the database is in a read-only state the Docker container will fail to start.  Setting the environment variable <code>NAUTOBOT_DOCKER_SKIP_INIT</code> to <code>true</code> will prevent the migrations from occurring.</p> <p>Note</p> <p>If you are using <code>django-auth-ldap</code> for LDAP authentication, <code>django-auth-ldap</code> by default will try to update a user object on every log in.  If the database is in a read-only state <code>django-auth-ldap</code> will fail.  You will also need to set <code>AUTH_LDAP_ALWAYS_UPDATE_USER=False</code> and <code>AUTH_LDAP_NO_NEW_USERS=True</code> to avoid this, please see the <code>django-auth-ldap</code> documentation for more information.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#max_page_size","title":"MAX_PAGE_SIZE","text":"<p>Default: <code>1000</code></p> <p>A web user or API consumer can request an arbitrary number of objects by appending the \"limit\" parameter to the URL (e.g. <code>?limit=1000</code>). This parameter defines the maximum acceptable limit. Setting this to <code>0</code> or <code>None</code> will allow a client to retrieve all matching objects at once with no limit by specifying <code>?limit=0</code>.</p> <p>Added in version 1.2.0</p> <p>If you do not set a value for this setting in your <code>nautobot_config.py</code>, it can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for this setting in <code>nautobot_config.py</code>, it will override any dynamically configured value.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#metrics_enabled","title":"METRICS_ENABLED","text":"<p>Default: <code>False</code></p> <p>Environment Variable: <code>NAUTOBOT_METRICS_ENABLED</code></p> <p>Toggle the availability Prometheus-compatible metrics at <code>/metrics</code>. See the Prometheus Metrics documentation for more details.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#napalm_username","title":"NAPALM_USERNAME","text":""},{"location":"user-guide/administration/configuration/optional-settings.html#napalm_password","title":"NAPALM_PASSWORD","text":"<p>Default: <code>\"\"</code> (Empty string)</p> <p>Environment Variables: <code>NAUTOBOT_NAPALM_USERNAME</code> and <code>NAUTOBOT_NAPALM_PASSWORD</code></p> <p>Nautobot will use these credentials when authenticating to remote devices via the NAPALM library, if installed. Both parameters are optional.</p> <p>Note</p> <p>If SSH public key authentication has been set up on the remote device(s) for the system account under which Nautobot runs, these parameters are not needed.</p> <p>Note</p> <p>If a given device has an appropriately populated secrets group assigned to it, the [secrets]((../../platform-functionality/secrets.md) defined in that group will take precedence over these default values.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#napalm_args","title":"NAPALM_ARGS","text":"<p>Default: <code>{}</code> (Empty dictionary)</p> <p>A dictionary of optional arguments to pass to NAPALM when instantiating a network driver. See the NAPALM documentation for a complete list of optional arguments. An example:</p> <pre><code>NAPALM_ARGS = {\n'api_key': '472071a93b60a1bd1fafb401d9f8ef41',\n'port': 2222,\n}\n</code></pre> <p>Some platforms (e.g. Cisco IOS) require an enable password to be passed in addition to the normal password. If desired, you can use the configured <code>NAPALM_PASSWORD</code> as the value for this argument:</p> <pre><code>NAPALM_USERNAME = 'username'\nNAPALM_PASSWORD = 'MySecretPassword'\nNAPALM_ARGS = {\n'secret': NAPALM_PASSWORD,          # ios and nxos_ssh\n'enable_password': NAPALM_PASSWORD, # eos\n# Include any additional args here\n}\n</code></pre> <p>Note</p> <p>If a given device has an appropriately populated secrets group assigned to it, a secret defined in that group can override the <code>NAPALM_ARGS[\"secret\"]</code> or <code>NAPALM_ARGS[\"enable_password\"]</code> default value defined here.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#napalm_timeout","title":"NAPALM_TIMEOUT","text":"<p>Default: <code>30</code></p> <p>Environment Variable: <code>NAUTOBOT_NAPALM_TIMEOUT</code></p> <p>The amount of time (in seconds) to wait for NAPALM to connect to a device.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#network_drivers","title":"NETWORK_DRIVERS","text":"<p>Added in version 1.6.0</p> <p>Default: <code>{}</code> (Empty dictionary)</p> <p>An optional dictionary to extend or override the default <code>Platform.network_driver</code> translations provided by netutils. For example, to add support for a custom <code>Platform.network_driver</code> value of <code>\"my_network_driver\"</code> for Netmiko and PyATS drivers:</p> <pre><code>NETWORK_DRIVERS = {\n\"netmiko\": {\"my_network_driver\": \"cisco_ios\"},\n\"pyats\": {\"my_network_driver\": \"iosxe\"},\n}\n</code></pre> <p>The default top-level keys are <code>ansible</code>, <code>hier_config</code>, <code>napalm</code>, <code>netmiko</code>, <code>netutils_parser</code>, <code>ntc_templates</code>, <code>pyats</code>, <code>pyntc</code>, and <code>scrapli</code>, but you can also add additional keys if you have an alternative network driver that you want your Nautobot instance to include.</p> <p>Tip</p> <p>If you do not set a value for this setting in your <code>nautobot_config.py</code>, it can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for this setting in <code>nautobot_config.py</code>, it will override any dynamically configured value.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#paginate_count","title":"PAGINATE_COUNT","text":"<p>Default: <code>50</code></p> <p>The default maximum number of objects to display per page within each list of objects. Applies to both the UI and the REST API.</p> <p>Added in version 1.2.0</p> <p>If you do not set a value for this setting in your <code>nautobot_config.py</code>, it can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for this setting in <code>nautobot_config.py</code>, it will override any dynamically configured value.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#per_page_defaults","title":"PER_PAGE_DEFAULTS","text":"<p>Default: <code>[25, 50, 100, 250, 500, 1000]</code></p> <p>The options displayed in the web interface dropdown to limit the number of objects per page. For proper user experience, this list should include the <code>PAGINATE_COUNT</code> and <code>MAX_PAGE_SIZE</code> values as options.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#plugins","title":"PLUGINS","text":"<p>Default: <code>[]</code> (Empty list)</p> <p>A list of installed Nautobot plugins to enable. Plugins will not take effect unless they are listed here.</p> <p>Warning</p> <p>Plugins extend Nautobot by allowing external code to run with the same access and privileges as Nautobot itself. Only install plugins from trusted sources. The Nautobot maintainers make absolutely no guarantees about the integrity or security of your installation with plugins enabled.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#plugins_config","title":"PLUGINS_CONFIG","text":"<p>Default: <code>{}</code> (Empty dictionary)</p> <p>This parameter holds configuration settings for individual Nautobot plugins. It is defined as a dictionary, with each key using the name of an installed plugin. The specific parameters supported are unique to each plugin: Reference the plugin's documentation to determine the supported parameters. An example configuration is shown below:</p> <pre><code>PLUGINS_CONFIG = {\n'plugin1': {\n'foo': 123,\n'bar': True\n},\n'plugin2': {\n'foo': 456,\n},\n}\n</code></pre> <p>Note that a plugin must be listed in <code>PLUGINS</code> for its configuration to take effect.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#prefer_ipv4","title":"PREFER_IPV4","text":"<p>Default: <code>False</code></p> <p>When determining the primary IP address for a device, IPv6 is preferred over IPv4 by default. Set this to True to prefer IPv4 instead.</p> <p>Added in version 1.2.0</p> <p>If you do not set a value for this setting in your <code>nautobot_config.py</code>, it can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for this setting in <code>nautobot_config.py</code>, it will override any dynamically configured value.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#rack_elevation_default_unit_height","title":"RACK_ELEVATION_DEFAULT_UNIT_HEIGHT","text":"<p>Default: <code>22</code></p> <p>Default height (in pixels) of a unit within a rack elevation. For best results, this should be approximately one tenth of <code>RACK_ELEVATION_DEFAULT_UNIT_WIDTH</code>.</p> <p>Added in version 1.2.0</p> <p>If you do not set a value for this setting in your <code>nautobot_config.py</code>, it can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for this setting in <code>nautobot_config.py</code>, it will override any dynamically configured value.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#rack_elevation_default_unit_width","title":"RACK_ELEVATION_DEFAULT_UNIT_WIDTH","text":"<p>Default: <code>220</code></p> <p>Default width (in pixels) of a unit within a rack elevation.</p> <p>Added in version 1.2.0</p> <p>If you do not set a value for this setting in your <code>nautobot_config.py</code>, it can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for this setting in <code>nautobot_config.py</code>, it will override any dynamically configured value.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#redis_lock_timeout","title":"REDIS_LOCK_TIMEOUT","text":"<p>Default: <code>600</code></p> <p>Environment Variable: <code>NAUTOBOT_REDIS_LOCK_TIMEOUT</code></p> <p>Maximum duration of a Redis lock created when calling <code>/api/ipam/prefixes/{id}/available-prefixes/</code> or <code>/api/ipam/prefixes/{id}/available-ips/</code> to avoid inadvertently allocating the same prefix or IP to multiple simultaneous callers. Default is set to 600 seconds (10 minutes) to be longer than any theoretical API call time. This is to prevent a deadlock scenario where the server did not gracefully exit the <code>with</code> block when acquiring the Redis lock.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#release_check_timeout","title":"RELEASE_CHECK_TIMEOUT","text":"<p>Default: <code>86400</code> (24 hours)</p> <p>The number of seconds to retain the latest version that is fetched from the GitHub API before automatically invalidating it and fetching it from the API again.</p> <p>Warning</p> <p>This must be set to at least one hour (<code>3600</code> seconds). Setting it to a value lower than this is an error.</p> <p>Added in version 1.2.0</p> <p>If you do not set a value for this setting in your <code>nautobot_config.py</code>, it can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for this setting in <code>nautobot_config.py</code>, it will override any dynamically configured value.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#release_check_url","title":"RELEASE_CHECK_URL","text":"<p>Default: <code>None</code> (disabled)</p> <p>This parameter defines the URL of the repository that will be checked periodically for new Nautobot releases. When a new release is detected, a message will be displayed to administrative users on the home page. This can be set to the official repository (<code>'https://api.github.com/repos/nautobot/nautobot/releases'</code>) or a custom fork. Set this to <code>None</code> to disable automatic update checks.</p> <p>Note</p> <p>The URL provided must be compatible with the GitHub REST API.</p> <p>Added in version 1.2.0</p> <p>If you do not set a value for this setting in your <code>nautobot_config.py</code>, it can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for this setting in <code>nautobot_config.py</code>, it will override any dynamically configured value.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#sanitizer_patterns","title":"SANITIZER_PATTERNS","text":"<p>Added in version 1.3.4</p> <p>Default:</p> <pre><code>[\n(re.compile(r\"(https?://)?\\S+\\s*@\", re.IGNORECASE), r\"\\1{replacement}@\"),\n(re.compile(r\"(username|password|passwd|pwd)((?:\\s+is.?|:)?\\s+)\\S+\", re.IGNORECASE), r\"\\1\\2{replacement}\"),\n]\n</code></pre> <p>List of (regular expression, replacement pattern) tuples used by the <code>nautobot.core.utils.logging.sanitize()</code> function. As of Nautobot 1.3.4 this function is used primarily for sanitization of Job log entries, but it may be used in other scopes in the future.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#storage_backend","title":"STORAGE_BACKEND","text":"<p>Default: <code>None</code> (local storage)</p> <p>The backend storage engine for handling uploaded files (e.g. image attachments). Nautobot supports integration with the <code>django-storages</code> package, which provides backends for several popular file storage services. If not configured, local filesystem storage will be used.</p> <p>An example of using django-storages with AWS S3 buckets, visit the django-storages with S3 user-guide.</p> <p>The configuration parameters for the specified storage backend are defined under the <code>STORAGE_CONFIG</code> setting.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#storage_config","title":"STORAGE_CONFIG","text":"<p>Default: <code>{}</code> (Empty dictionary)</p> <p>A dictionary of configuration parameters for the storage backend configured as <code>STORAGE_BACKEND</code>. The specific parameters to be used here are specific to each backend; see the <code>django-storages</code> documentation for more detail.</p> <p>If <code>STORAGE_BACKEND</code> is not defined, this setting will be ignored.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#strict_filtering","title":"STRICT_FILTERING","text":"<p>Added in version 1.4.0</p> <p>Default: <code>True</code></p> <p>Environment Variable: <code>NAUTOBOT_STRICT_FILTERING</code></p> <p>If set to <code>True</code> (default), UI and REST API filtering of object lists will fail if an unknown/unrecognized filter parameter is provided as a URL parameter. (For example, <code>/dcim/devices/?ice_cream_flavor=chocolate</code> or <code>/api/dcim/locations/?ice_cream_flavor=chocolate</code>). UI list (table) views will report an error message in this case and display no filtered objects; REST API list endpoints will return a 400 Bad Request response with an explanatory error message.</p> <p>If set to <code>False</code>, unknown/unrecognized filter parameters will be discarded and ignored, although Nautobot will log a warning message.</p> <p>Warning</p> <p>Setting this to <code>False</code> can result in unexpected filtering results in the case of user error, for example <code>/dcim/devices/?has_primry_ip=false</code> (note the typo <code>primry</code>) will result in a list of all devices, rather than the intended list of only devices that lack a primary IP address. In the case of Jobs or external automation making use of such a filter, this could have wide-ranging consequences.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#support_message","title":"SUPPORT_MESSAGE","text":"<p>Added in version 1.6.4</p> <p>Added in version 2.0.2</p> <p>Default: <code>\"\"</code></p> <p>A message to include on error pages (status code 403, 404, 500, etc.) when an error occurs. You can configure this to direct users to the appropriate contact(s) within your organization that provide support for Nautobot. Markdown formatting is supported within this message (raw HTML is not).</p> <p>If unset, the default message that will appear is <code>If further assistance is required, please join the #nautobot channel on [Network to Code's Slack community](https://slack.networktocode.com) and post your question.</code></p> <p>Tip</p> <p>If you do not set a value for this setting in your <code>nautobot_config.py</code>, it can be configured dynamically by an admin user via the Nautobot Admin UI. If you do have a value for this setting in <code>nautobot_config.py</code>, it will override any dynamically configured value.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#test_factory_seed","title":"TEST_FACTORY_SEED","text":"<p>Added in version 1.5.0</p> <p>Default: <code>None</code></p> <p>Environment Variable: <code>NAUTOBOT_TEST_FACTORY_SEED</code></p> <p>When <code>TEST_USE_FACTORIES</code> is set to <code>True</code>, this configuration provides a fixed seed string for the pseudo-random generator used to populate test data into the database, providing for reproducible randomness across consecutive test runs. If unset, a random seed will be used each time.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#test_use_factories","title":"TEST_USE_FACTORIES","text":"<p>Added in version 1.5.0</p> <p>Default: <code>False</code></p> <p>Environment Variable: <code>NAUTOBOT_TEST_USE_FACTORIES</code></p> <p>If set to <code>True</code>, the Nautobot test runner will call <code>nautobot-server generate_test_data ...</code> before executing any test cases, pre-populating the test database with various pseudo-random instances of many of Nautobot's data models.</p> <p>Warning</p> <p>This functionality requires the installation of the <code>factory-boy</code> Python package, which is present in Nautobot's own development environment, but is not an inherent dependency of the Nautobot package when installed otherwise, such as into a plugin's development environment.</p> <p>Info</p> <p>Setting this to <code>True</code> is a requirement for all Nautobot core tests as of 1.5.0, and it is set accordingly in <code>nautobot/core/tests/nautobot_config.py</code>, but defaults to <code>False</code> otherwise so as to remain backwards-compatible with plugins that also may use the Nautobot test runner in their own test environments, but have not yet updated their tests to account for the presence of this test data.</p> <p>Because this test data can obviate the need to manually construct complex test data, and the random factor can improve test robustness, plugin developers are encouraged to set this to <code>True</code> in their configuration, ensure that their development environments include the <code>factory-boy</code> Python package as a test dependency, and update their tests as needed.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#test_performance_baseline_file","title":"TEST_PERFORMANCE_BASELINE_FILE","text":"<p>Added in version 1.5.0</p> <p>Default: <code>nautobot/core/tests/performance_baselines.yml</code></p> <p>Environment Variable: <code>TEST_PERFORMANCE_BASELINE_FILE</code></p> <p><code>TEST_PERFORMANCE_BASELINE_FILE</code> is set to a certain file path, this file path should point to a .yml file that conforms to the following format:</p> <pre><code>tests:\n- name: &gt;-\ntest_run_job_with_sensitive_variables_and_requires_approval\n(nautobot.extras.tests.test_views.JobTestCase)\nexecution_time: 4.799533\n- name: test_run_missing_schedule (nautobot.extras.tests.test_views.JobTestCase)\nexecution_time: 4.367563\n- name: test_run_now_missing_args (nautobot.extras.tests.test_views.JobTestCase)\nexecution_time: 4.363194\n- name: &gt;-\ntest_create_object_with_constrained_permission\n(nautobot.extras.tests.test_views.GraphQLQueriesTestCase)\nexecution_time: 3.474244\n- name: &gt;-\ntest_run_now_constrained_permissions\n(nautobot.extras.tests.test_views.JobTestCase)\nexecution_time: 2.727531\n...\n</code></pre> <p>and store the performance baselines with the <code>name</code> of the test and the baseline <code>execution_time</code>. This file should provide the baseline times that all performance-related tests are running against.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#ui_rack_view_truncate_function","title":"UI_RACK_VIEW_TRUNCATE_FUNCTION","text":"<p>Added in version 1.4.0</p> <p>Default:</p> <pre><code>def UI_RACK_VIEW_TRUNCATE_FUNCTION(device_display_name):\nreturn str(device_display_name).split(\".\")[0]\n</code></pre> <p>This setting function is used to perform the rack elevation truncation feature. This provides a way to tailor the truncation behavior to best suit the needs of the installation.</p> <p>The function must take only one argument: the device display name, as a string, attempting to be rendered on the rack elevation.</p> <p>The function must return only one argument: a string of the truncated device display name.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#environment-variable-only-settings","title":"Environment-Variable-Only Settings","text":"<p>Warning</p> <p>The following settings are only configurable as environment variables, and not via <code>nautobot_config.py</code> or similar.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#git_ssl_no_verify","title":"GIT_SSL_NO_VERIFY","text":"<p>Default: Unset</p> <p>If you are using a self-signed git repository, you will need to set the environment variable <code>GIT_SSL_NO_VERIFY=\"1\"</code> in order for the repository to sync.</p> <p>Warning</p> <p>This must be specified as an environment variable. Setting it in <code>nautobot_config.py</code> will not have the desired effect.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#nautobot_log_deprecation_warnings","title":"NAUTOBOT_LOG_DEPRECATION_WARNINGS","text":"<p>Added in version 1.5.2</p> <p>Changed in version 1.5.3</p> <p>This was previously available as a config file setting but changed to environment-variable only. Also <code>DEBUG = True</code> will no longer work to log deprecation warnings.</p> <p>Default: <code>False</code></p> <p>This can be set to <code>True</code> to allow deprecation warnings raised by Nautobot to (additionally) be logged as <code>WARNING</code> level log messages. (Deprecation warnings are normally silent in Python, but can be enabled globally by various means such as setting the <code>PYTHONWARNINGS</code> environment variable. However, doing so can be rather noisy, as it will also include warnings from within Django about various code in various package dependencies of Nautobot's, etc. This configuration setting allows a more targeted enablement of only warnings from within Nautobot itself, which can be useful when vetting various Nautobot apps (plugins) for future-proofness against upcoming changes to Nautobot.)</p> <p>Caution</p> <p>In Nautobot 2.0, deprecation warnings will be logged by default; a future release of Nautobot 1.5.x will also enable default logging of deprecation warnings.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#nautobot_root","title":"NAUTOBOT_ROOT","text":"<p>Default: <code>~/.nautobot/</code></p> <p>The filesystem path to use to store Nautobot files (Jobs, uploaded images, Git repositories, etc.).</p> <p>This setting is used internally in the core settings to provide default locations for features that require file storage, and the default location of the <code>nautobot_config.py</code>.</p> <p>Warning</p> <p>Do not override <code>NAUTOBOT_ROOT</code> in your <code>nautobot_config.py</code>. It will not work as expected. If you need to customize this setting, please always set the <code>NAUTOBOT_ROOT</code> environment variable.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#django-configuration-settings","title":"Django Configuration Settings","text":"<p>While the official Django documentation documents all Django settings, the below is provided where either the setting is common in Nautobot deployments and/or there is a supported <code>NAUTOBOT_*</code> environment variable.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#admins","title":"ADMINS","text":"<p>Default: <code>[]</code> (Empty list)</p> <p>Nautobot will email details about critical errors to the administrators listed here. This should be a list of (name, email) tuples. For example:</p> <pre><code>ADMINS = [\n['Hank Hill', 'hhill@example.com'],\n['Dale Gribble', 'dgribble@example.com'],\n]\n</code></pre> <p>Please see the official Django documentation on <code>ADMINS</code> for more information.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#csrf_trusted_origins","title":"CSRF_TRUSTED_ORIGINS","text":"<p>Default: <code>[]</code></p> <p>A list of hosts (fully-qualified domain names (FQDNs) or subdomains) that are considered trusted origins for cross-site secure requests such as HTTPS POST.</p> <p>For more information, please see the official Django documentation on <code>CSRF_TRUSTED_ORIGINS</code> and more generally the official Django documentation on CSRF protection</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#date-and-time-formatting","title":"Date and Time Formatting","text":"<p>You may define custom formatting for date and times. For detailed instructions on writing format strings, please see the Django documentation. Default formats are listed below.</p> <pre><code>DATE_FORMAT = 'N j, Y'               # June 26, 2016\nSHORT_DATE_FORMAT = 'Y-m-d'          # 2016-06-26\nTIME_FORMAT = 'g:i a'                # 1:23 p.m.\nDATETIME_FORMAT = 'N j, Y g:i a'     # June 26, 2016 1:23 p.m.\nSHORT_DATETIME_FORMAT = 'Y-m-d H:i'  # 2016-06-26 13:23\n</code></pre> <p>Environment Variables:</p> <ul> <li><code>NAUTOBOT_DATE_FORMAT</code></li> <li><code>NAUTOBOT_SHORT_DATE_FORMAT</code></li> <li><code>NAUTOBOT_TIME_FORMAT</code></li> <li><code>NAUTOBOT_SHORT_TIME_FORMAT</code></li> <li><code>NAUTOBOT_DATETIME_FORMAT</code></li> <li><code>NAUTOBOT_SHORT_DATETIME_FORMAT</code></li> </ul>"},{"location":"user-guide/administration/configuration/optional-settings.html#debug","title":"DEBUG","text":"<p>Default: <code>False</code></p> <p>Environment Variable: <code>NAUTOBOT_DEBUG</code></p> <p>This setting enables debugging. Debugging should be enabled only during development or troubleshooting. Note that only clients which access Nautobot from a recognized internal IP address will see debugging tools in the user interface.</p> <p>Warning</p> <p>Never enable debugging on a production system, as it can expose sensitive data to unauthenticated users and impose a substantial performance penalty.</p> <p>Please see the official Django documentation on <code>DEBUG</code> for more information.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#force_script_name","title":"FORCE_SCRIPT_NAME","text":"<p>Default: <code>None</code></p> <p>If not <code>None</code>, this will be used as the value of the <code>SCRIPT_NAME</code> environment variable in any HTTP request. This setting can be used to override the server-provided value of <code>SCRIPT_NAME</code>, which is most commonly used for hosting Nautobot in a subdirectory (e.g. example.com/nautobot/).</p> <p>Important</p> <p>To host Nautobot under a subdirectory you must set this value to match the same prefix configured on your HTTP server. For example, if you configure NGINX to serve Nautobot at <code>/nautobot/</code>, you must set <code>FORCE_SCRIPT_NAME = \"/nautobot/\"</code>.</p> <p>Please see the official Django documentation on <code>FORCE_SCRIPT_NAME</code> for more information.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#internal_ips","title":"INTERNAL_IPS","text":"<p>Default: <code>('127.0.0.1', '::1')</code></p> <p>A list of IP addresses recognized as internal to the system, used to control the display of debugging output. For example, the Django debugging toolbar, if installed, will be viewable only when a client is accessing Nautobot from one of the listed IP addresses (and <code>DEBUG</code> is true).</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#logging","title":"LOGGING","text":"<p>Default:</p> <pre><code>{\n\"version\": 1,\n\"disable_existing_loggers\": False,\n\"formatters\": {\n\"normal\": {\n\"format\": \"%(asctime)s.%(msecs)03d %(levelname)-7s %(name)s :\\n  %(message)s\",\n\"datefmt\": \"%H:%M:%S\",\n},\n\"verbose\": {\n\"format\": \"%(asctime)s.%(msecs)03d %(levelname)-7s %(name)-20s %(filename)-15s %(funcName)30s() :\\n  %(message)s\",\n\"datefmt\": \"%H:%M:%S\",\n},\n},\n\"handlers\": {\n\"normal_console\": {\n\"level\": \"INFO\",\n\"class\": \"logging.StreamHandler\",\n\"formatter\": \"normal\",\n},\n\"verbose_console\": {\n\"level\": \"DEBUG\",\n\"class\": \"logging.StreamHandler\",\n\"formatter\": \"verbose\",\n},\n},\n\"loggers\": {\n\"django\": {\"handlers\": [\"normal_console\"], \"level\": \"INFO\"},\n\"nautobot\": {\n\"handlers\": [\"verbose_console\" if DEBUG else \"normal_console\"],\n\"level\": LOG_LEVEL,\n},\n},\n}\n</code></pre> <p>Changed in version 1.4.10</p> <p>While running unit or integration tests via <code>nautobot-server test ...</code>, LOGGING will be set to <code>{}</code> instead of the above defaults, as verbose logging to the console is typically not desirable while running tests.</p> <p>Changed in version 2.0.0</p> <p>Unit/integration test logging was modified to send all nautobot logs to a <code>NullHandler</code> to prevent logs falling through to the last resort logger and being output to stderr.</p> <p>This translates to:</p> <ul> <li>all messages from Django and from Nautobot of INFO severity or higher will be logged to the console.</li> <li>if <code>DEBUG</code> is True, Nautobot DEBUG messages will also be logged, and all Nautobot messages will be logged with a more verbose format including the filename and function name that originated each log message.</li> </ul> <p>The above default log formatters split each log message across two lines of output for greater readability, which is useful for local observation and troubleshooting, but you may find it impractical to use in production environments that expect one line per log message. Fortunately, the Django framework on which Nautobot runs allows for extensive customization of logging format and destination. Please consult the Django logging documentation for more information on configuring this setting.</p> <p>Below is an example configuration extension which will additionally write all INFO and higher messages to a local file:</p> <pre><code>LOGGING[\"handlers\"][\"file\"] = {\n\"level\": \"INFO\",\n\"class\": \"logging.FileHandler\",\n\"filename\": \"/var/log/nautobot.log\",\n\"formatter\": \"normal\",\n}\nLOGGING[\"loggers\"][\"django\"][\"handlers\"] += [\"file\"]\nLOGGING[\"loggers\"][\"nautobot\"][\"handlers\"] += [\"file\"]\n</code></pre> <p>Additional examples are available in the <code>/examples/logging</code> directory in the Nautobot repository.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#available-loggers","title":"Available Loggers","text":"<ul> <li><code>django.*</code> - Generic Django operations (HTTP requests/responses, etc.)</li> <li><code>nautobot.&lt;app&gt;.&lt;module&gt;</code> - Generic form for model- or module-specific log messages</li> <li><code>nautobot.auth.*</code> - Authentication events</li> <li><code>nautobot.extras.jobs.*</code> - Job execution (<code>* = JobClassName</code>)</li> <li><code>nautobot.core.graphql.*</code> - GraphQL initialization and operation.</li> <li><code>nautobot.extras.plugins.*</code> - Plugin loading and activity</li> <li><code>nautobot.core.views.generic.*</code> - Generic views which handle business logic for the web UI</li> </ul>"},{"location":"user-guide/administration/configuration/optional-settings.html#media_root","title":"MEDIA_ROOT","text":"<p>Default: <code>os.path.join(NAUTOBOT_ROOT, \"media\")</code></p> <p>The file path to the location where media files (such as image attachments) are stored.</p> <p>Please see the official Django documentation on <code>MEDIA_ROOT</code> for more information.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#session_expire_at_browser_close","title":"SESSION_EXPIRE_AT_BROWSER_CLOSE","text":"<p>Default: <code>False</code></p> <p>Environment Variable: <code>NAUTOBOT_SESSION_EXPIRE_AT_BROWSER_CLOSE</code></p> <p>If this is set to True, Nautobot will use browser-length cookies - cookies that expire as soon as the user closes their browser.</p> <p>By default, <code>SESSION_EXPIRE_AT_BROWSER_CLOSE</code> is set to False, which means session cookies will be stored in users\u2019 browsers for as long as <code>SESSION_COOKIE_AGE</code>.</p> <p>Please see the official Django documentation on <code>SESSION_EXPIRE_AT_BROWSER_CLOSE</code> for more information.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#session_cookie_age","title":"SESSION_COOKIE_AGE","text":"<p>Default: <code>1209600</code> (2 weeks, in seconds)</p> <p>Environment Variable: <code>NAUTOBOT_SESSION_COOKIE_AGE</code></p> <p>The age of session cookies, in seconds.</p> <p>Please see the official Django documentation on <code>SESSION_COOKIE_AGE</code> for more information.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#session_engine","title":"SESSION_ENGINE","text":"<p>Default: <code>'django.contrib.sessions.backends.db'</code></p> <p>Controls where Nautobot stores session data.</p> <p>To use cache-based sessions, set this to <code>'django.contrib.sessions.backends.cache'</code>. To use file-based sessions, set this to <code>'django.contrib.sessions.backends.file'</code>.</p> <p>See the official Django documentation on Configuring the session engine for more details.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#session_file_path","title":"SESSION_FILE_PATH","text":"<p>Default: <code>None</code></p> <p>Environment Variable: <code>NAUTOBOT_SESSION_FILE_PATH</code></p> <p>HTTP session data is used to track authenticated users when they access Nautobot. By default, Nautobot stores session data in its database. However, this inhibits authentication to a standby instance of Nautobot without write access to the database. Alternatively, a local file path may be specified here and Nautobot will store session data as files instead of using the database. Note that the Nautobot system user must have read and write permissions to this path.</p> <p>When the default value (<code>None</code>) is used, Nautobot will use the standard temporary directory for the system.</p> <p>If you set this value, you must also enable file-based sessions as explained above using <code>SESSION_ENGINE</code>.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#static_root","title":"STATIC_ROOT","text":"<p>Default: <code>os.path.join(NAUTOBOT_ROOT, \"static\")</code></p> <p>The location where static files (such as CSS, JavaScript, fonts, or images) used to serve the web interface will be staged by the <code>nautobot-server collectstatic</code> command.</p> <p>Please see the official Django documentation on <code>STATIC_ROOT</code> for more information.</p>"},{"location":"user-guide/administration/configuration/optional-settings.html#time_zone","title":"TIME_ZONE","text":"<p>Default: <code>\"UTC\"</code></p> <p>Environment Variable: <code>NAUTOBOT_TIME_ZONE</code></p> <p>The time zone Nautobot will use when dealing with dates and times. It is recommended to use UTC time unless you have a specific need to use a local time zone. Please see the list of available time zones.</p> <p>Please see the official Django documentation on <code>TIME_ZONE</code> for more information.</p>"},{"location":"user-guide/administration/configuration/required-settings.html","title":"Required Configuration Settings","text":""},{"location":"user-guide/administration/configuration/required-settings.html#allowed_hosts","title":"ALLOWED_HOSTS","text":"<p>Environment Variable: <code>NAUTOBOT_ALLOWED_HOSTS</code> specified as a space-separated quoted string (e.g. <code>NAUTOBOT_ALLOWED_HOSTS=\"localhost 127.0.0.1 example.com\"</code>).</p> <p>This is a list of valid fully-qualified domain names (FQDNs) and/or IP addresses that can be used to reach the Nautobot service. Usually this is the same as the hostname for the Nautobot server, but can also be different; for example, when using a reverse proxy serving the Nautobot website under a different FQDN than the hostname of the Nautobot server. To help guard against HTTP Host header attacks, Nautobot will not permit access to the server via any other hostnames (or IPs).</p> <p>Keep in mind that by default Nautobot sets <code>USE_X_FORWARDED_HOST</code> to <code>True</code>, which means that if you're using a reverse proxy, the FQDN used to reach that reverse proxy needs to be in this list.</p> <p>Note</p> <p>This parameter must always be defined as a list or tuple, even if only a single value is provided.</p> <p>Example:</p> <pre><code>ALLOWED_HOSTS = ['nautobot.example.com', '192.0.2.123']\n</code></pre> <p>Tip</p> <p>If there is more than one hostname in this list, you may also need to set <code>CSRF_TRUSTED_ORIGINS</code> as well.</p> <p>If you are not yet sure what the domain name and/or IP address of the Nautobot installation will be, and are comfortable accepting the risks in doing so, you can set this to a wildcard (asterisk) to allow all host values:</p> <pre><code>ALLOWED_HOSTS = ['*']\n</code></pre> <p>Warning</p> <p>It is not recommended to leave this value as <code>['*']</code> for production deployments. Please see the official Django documentation on <code>ALLOWED_HOSTS</code> for help.</p>"},{"location":"user-guide/administration/configuration/required-settings.html#databases","title":"DATABASES","text":"<p>Nautobot requires access to a supported database service to store data. This service can run locally on the Nautobot server or on a remote system. The following parameters must be defined within the <code>DATABASES</code> dictionary:</p> <ul> <li><code>NAME</code> - Database name</li> <li><code>USER</code> - Database username</li> <li><code>PASSWORD</code> - Database password</li> <li><code>HOST</code> - Name or IP address of the database server (use <code>localhost</code> if running locally)</li> <li><code>PORT</code> - The port to use when connecting to the database. An empty string means the default port for your selected backend. (PostgreSQL: <code>5432</code>, MySQL: <code>3306</code>)</li> <li><code>CONN_MAX_AGE</code> - Lifetime of a persistent database connection, in seconds (300 is the default)</li> <li><code>ENGINE</code> - The database backend to use. This can be either <code>django.db.backends.postgresql</code> or <code>django.db.backends.mysql</code>.  If <code>METRICS_ENABLED</code> is <code>True</code> this can also be either <code>django_prometheus.db.backends.postgresql</code> or <code>django_prometheus.db.backends.mysql</code></li> </ul> <p>The following environment variables may also be set for each of the above values:</p> <ul> <li><code>NAUTOBOT_DB_NAME</code></li> <li><code>NAUTOBOT_DB_USER</code></li> <li><code>NAUTOBOT_DB_PASSWORD</code></li> <li><code>NAUTOBOT_DB_HOST</code></li> <li><code>NAUTOBOT_DB_PORT</code></li> <li><code>NAUTOBOT_DB_TIMEOUT</code></li> <li><code>NAUTOBOT_DB_ENGINE</code></li> </ul> <p>Added in version 1.1.0</p> <p>The <code>NAUTOBOT_DB_ENGINE</code> setting was added along with support for MySQL.</p> <p>Warning</p> <p>Nautobot supports either MySQL or PostgreSQL as a database backend. You must make sure that the <code>ENGINE</code> setting matches your selected database backend or you will be unable to connect to the database.</p> <p>Example:</p> <pre><code>DATABASES = {\n'default': {\n'NAME': 'nautobot',                         # Database name\n'USER': 'nautobot',                         # Database username\n'PASSWORD': 'awesome_password',             # Database password\n'HOST': 'localhost',                        # Database server\n'PORT': '',                                 # Database port (leave blank for default)\n'CONN_MAX_AGE': 300,                        # Max database connection age\n'ENGINE': 'django.db.backends.postgresql',  # Database driver (\"mysql\" or \"postgresql\")\n}\n}\n</code></pre> <p>Note</p> <p>Nautobot supports all database options supported by the underlying Django framework. For a complete list of available parameters, please see the official Django documentation on <code>DATABASES</code>.</p>"},{"location":"user-guide/administration/configuration/required-settings.html#mysql-unicode-settings","title":"MySQL Unicode Settings","text":"<p>Added in version 1.1.0</p> <p>Tip</p> <p>By default, MySQL is case-insensitive in its handling of text strings. This is different from PostgreSQL which is case-sensitive by default. We strongly recommend that you configure MySQL to be case-sensitive for use with Nautobot, either when you enable the MySQL server, or when you create the Nautobot database in MySQL. If you follow the provided installation instructions for CentOS or Ubuntu, the recommended steps there will include the appropriate database configuration.</p> <p>When using MySQL as a database backend, and you want to enable support for Unicode characters like the beloved poop emoji, you'll need to update your settings.</p> <p>If you try to use emojis without this setting, you will encounter a server error along the lines of <code>Incorrect string value</code>, because you are running afoul of the legacy implementation of Unicode (aka <code>utf8</code>) encoding in MySQL. The <code>utf8</code> encoding in MySQL is limited to 3-bytes per character. Newer Unicode emoji require 4-bytes.</p> <p>To properly support using such characters, you will need to create an entry in <code>DATABASES</code> -&gt; <code>default</code> -&gt; <code>OPTIONS</code> with the value <code>{\"charset\": \"utf8mb4\"}</code> in your <code>nautobot_config.py</code> and restart all Nautobot services. This will tell MySQL to always use <code>utf8mb4</code> character set for database client connections.</p> <p>For example:</p> <pre><code>DATABASES = {\n\"default\": {\n# Other settings...\n\"OPTIONS\": {\"charset\": \"utf8mb4\"},  # Add this line\n}\n}\n</code></pre> <p>Added in version 1.1.0</p> <p>If you have generated a new <code>nautobot_config.py</code> using <code>nautobot-server init</code>, this line is already there for you in your config. You'll just need to uncomment it!</p> <p>Changed in version 1.1.5</p> <p>If you have generated a new <code>nautobot_config.py</code> using <code>nautobot-server init</code>, this line is already present in your config and no action is required.</p>"},{"location":"user-guide/administration/configuration/required-settings.html#redis-settings","title":"Redis Settings","text":"<p>Redis is an in-memory data store similar to memcached. It is required to support Nautobot's caching, task queueing, and webhook features. The connection settings are explained here, allowing Nautobot to connect to different Redis instances/databases per feature.</p> <p>Warning</p> <p>It is highly recommended to keep the Redis databases for caching and tasks separate. Using the same database number on the same Redis instance for both may result in queued background tasks being lost during cache flushing events. For this reason, the default settings utilize database <code>1</code> for caching and database <code>0</code> for tasks.</p> <p>Tip</p> <p>The default Redis settings in your <code>nautobot_config.py</code> should be suitable for most deployments and should only require customization for more advanced configurations.</p>"},{"location":"user-guide/administration/configuration/required-settings.html#caching","title":"Caching","text":"<p>For more details on Nautobot's caching, including TLS and HA configuration, see the guide on Caching.</p>"},{"location":"user-guide/administration/configuration/required-settings.html#task-queuing","title":"Task Queuing","text":""},{"location":"user-guide/administration/configuration/required-settings.html#caches","title":"CACHES","text":"<p>The <code>django-redis</code> Django plugin is used to enable Redis as a concurrent write lock for preventing race conditions when allocating IP address objects. The <code>CACHES</code> setting is required to simplify the configuration for <code>django-redis</code>.</p> <p>Important</p> <p>Nautobot also utilizes the built-in Django cache framework (which also relies on the <code>CACHES</code> setting) to perform caching.</p> <p>Default:</p> <pre><code># Uncomment the following line to configure TLS/SSL\n# import ssl\nCACHES = {\n\"default\": {\n\"BACKEND\": \"django_redis.cache.RedisCache\",\n\"LOCATION\": \"redis://localhost:6379/1\",\n\"TIMEOUT\": 300,\n\"OPTIONS\": {\n\"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n# Uncomment the following lines to configure TLS/SSL\n# \"CONNECTION_POOL_KWARGS\": {\n#     \"ssl_cert_reqs\": ssl.CERT_REQUIRED,\n#     \"ssl_ca_certs\": \"/opt/nautobot/redis/ca.crt\",\n#     \"ssl_certfile\": \"/opt/nautobot/redis/tls.crt\",\n#     \"ssl_keyfile\": \"/opt/nautobot/redis/tls.key\",\n# },\n},\n}\n}\n</code></pre> <p>The following environment variables may also be set for some of the above values:</p> <ul> <li><code>NAUTOBOT_CACHES_BACKEND</code></li> </ul> <p>Changed in version 2.0.0</p> <p>The default value of <code>CACHES[\"default\"][\"LOCATION\"]</code> has changed from <code>redis://localhost:6379/0</code> to <code>redis://localhost:6379/1</code>, as Django's native caching is now taking the role previously occupied by <code>django-cacheops</code>.</p>"},{"location":"user-guide/administration/configuration/required-settings.html#task-queuing-with-celery","title":"Task Queuing with Celery","text":"<p>Added in version 1.1.0</p> <p>Out of the box you do not need to make any changes to utilize task queueing with Celery. All of the default settings are sufficient for most installations.</p> <p>In the event you do need to make customizations to how Celery interacts with the message broker such as for more advanced clustered deployments, the following setting may be changed.</p>"},{"location":"user-guide/administration/configuration/required-settings.html#celery_broker_url","title":"CELERY_BROKER_URL","text":"<p>This setting tells Celery and its workers how and where to communicate with the message broker. The default value for this points to <code>redis://localhost:6379/0</code>. Please see the optional settings documentation for <code>CELERY_BROKER_URL</code> for more information on customizing this setting.</p>"},{"location":"user-guide/administration/configuration/required-settings.html#configuring-celery-with-tls","title":"Configuring Celery with TLS","text":"<p>Optionally, you can configure Celery to use custom SSL certificates to connect to redis by setting the following variables:</p> <pre><code>import ssl\nCELERY_REDIS_BACKEND_USE_SSL = {\n\"ssl_cert_reqs\": ssl.CERT_REQUIRED,\n\"ssl_ca_certs\": \"/opt/nautobot/redis/ca.crt\",\n\"ssl_certfile\": \"/opt/nautobot/redis/tls.crt\",\n\"ssl_keyfile\": \"/opt/nautobot/redis/tls.key\",\n}\nCELERY_BROKER_USE_SSL = CELERY_REDIS_BACKEND_USE_SSL\n</code></pre> <p>Please see the celery documentation for additional details.</p>"},{"location":"user-guide/administration/configuration/required-settings.html#configuring-celery-for-high-availability","title":"Configuring Celery for High Availability","text":"<p>High availability clustering of Redis for use with Celery can be performed using Redis Sentinel. Please see documentation section on configuring Celery for Redis Sentinel for more information.</p>"},{"location":"user-guide/administration/configuration/required-settings.html#secret_key","title":"SECRET_KEY","text":"<p>Environment Variable: <code>NAUTOBOT_SECRET_KEY</code></p> <p>This is a secret, random string used to assist in the creation new cryptographic hashes for passwords and HTTP cookies. The key defined here should not be shared outside of the configuration file. <code>SECRET_KEY</code> can be changed at any time, however be aware that doing so will invalidate all existing sessions.</p> <p><code>SECRET_KEY</code> should be at least 50 characters in length and contain a random mix of letters, digits, and symbols.</p> <p>Note</p> <p>A unique <code>SECRET_KEY</code> is generated for you automatically when you use <code>nautobot-server init</code> to create a new <code>nautobot_config.py</code>.</p> <p>You may run <code>nautobot-server generate_secret_key</code> to generate a new key at any time.</p> <pre><code>nautobot-server generate_secret_key\n</code></pre> <p>Sample output:</p> <pre><code>+$_kw69oq&amp;fbkfk6&amp;q-+ksbgzw1&amp;061ghw%420u3(wen54w(m\n</code></pre> <p>Alternatively use the following command to generate a secret even before <code>nautobot-server</code> is runnable:</p> <pre><code>LC_ALL=C tr -cd '[:lower:][:digit:]!@#$%^&amp;*(\\-_=+)' &lt; /dev/urandom | fold -w50 | head -n1\n</code></pre> <p>Example output:</p> <pre><code>9.V$@Kxkc@@Kd@z&lt;a/=.J-Y;rYc79&lt;y@](9o9(L(*sS)Q+ud5P\n</code></pre> <p>Warning</p> <p>In the case of a highly available installation with multiple web servers, <code>SECRET_KEY</code> must be identical among all servers in order to maintain a persistent user session state.</p> <p>For more details see Nautobot Configuration.</p>"},{"location":"user-guide/administration/configuration/authentication/ldap.html","title":"LDAP Authentication","text":"<p>This guide explains how to implement LDAP authentication using an external server. User authentication will fall back to built-in Django users in the event of a failure.</p>"},{"location":"user-guide/administration/configuration/authentication/ldap.html#install-requirements","title":"Install Requirements","text":""},{"location":"user-guide/administration/configuration/authentication/ldap.html#install-system-packages","title":"Install System Packages","text":"<p>On Ubuntu:</p> <pre><code>sudo apt install -y libldap-dev libsasl2-dev\n</code></pre> <p>On CentOS:</p> <pre><code>sudo dnf install -y openldap-devel\n</code></pre>"},{"location":"user-guide/administration/configuration/authentication/ldap.html#install-django-auth-ldap","title":"Install django-auth-ldap","text":"<p>Warning</p> <p>This and all remaining steps in this document should all be performed as the <code>nautobot</code> user!</p> <p>Hint: Use <code>sudo -iu nautobot</code></p> <p>Activate the Python virtual environment and install the <code>django-auth-ldap</code> package using pip:</p> <pre><code>source /opt/nautobot/bin/activate\npip3 install \"nautobot[ldap]\"\n</code></pre> <p>Once installed, add the package to <code>local_requirements.txt</code> to ensure it is re-installed during future rebuilds of the virtual environment:</p> <pre><code>echo \"nautobot[ldap]\" &gt;&gt; /opt/nautobot/local_requirements.txt\n</code></pre>"},{"location":"user-guide/administration/configuration/authentication/ldap.html#configuration","title":"Configuration","text":"<p>Enable the LDAP authentication backend by adding the following to your <code>nautobot_config.py</code>:</p> <p>Note</p> <p>It is critical that you include the <code>ObjectPermissionsBackend</code> provided by Nautobot after the <code>LDAPBackend</code> so that object-level permissions features can work properly.</p> <pre><code>AUTHENTICATION_BACKENDS = [\n'django_auth_ldap.backend.LDAPBackend',\n'nautobot.core.authentication.ObjectPermissionBackend',\n]\n</code></pre>"},{"location":"user-guide/administration/configuration/authentication/ldap.html#general-server-configuration","title":"General Server Configuration","text":"<p>Define all of the parameters required below in your <code>nautobot_config.py</code>. Complete documentation of all <code>django-auth-ldap</code> configuration options is included in the project's official documentation.</p> <p>Info</p> <p>When using Windows Server 2012 you may wish to use the Global Catalog by specifying a port on <code>AUTH_LDAP_SERVER_URI</code>. Use <code>3269</code> for secure (<code>ldaps://</code>), or <code>3268</code> for non-secure.</p> <pre><code>import ldap\n# Server URI\nAUTH_LDAP_SERVER_URI = \"ldap://ad.example.com\"\n# The following may be needed if you are binding to Active Directory.\nAUTH_LDAP_CONNECTION_OPTIONS = {\nldap.OPT_REFERRALS: 0\n}\n# Set the DN and password for the Nautobot service account.\nAUTH_LDAP_BIND_DN = \"CN=NAUTOBOTSA, OU=Service Accounts,DC=example,DC=com\"\nAUTH_LDAP_BIND_PASSWORD = \"demo\"\n</code></pre>"},{"location":"user-guide/administration/configuration/authentication/ldap.html#encryption-options","title":"Encryption Options","text":"<p>It is recommended when using LDAP to use STARTTLS, however SSL can also be used.</p>"},{"location":"user-guide/administration/configuration/authentication/ldap.html#tls-options","title":"TLS Options","text":"<p>STARTTLS can be configured by setting <code>AUTH_LDAP_START_TLS = True</code> and using the <code>ldap://</code> URI scheme.</p> <pre><code>AUTH_LDAP_SERVER_URI = \"ldap://ad.example.com\"\nAUTH_LDAP_START_TLS = True\n</code></pre>"},{"location":"user-guide/administration/configuration/authentication/ldap.html#ssl-options","title":"SSL Options","text":"<p>SSL can also be used by using the <code>ldaps://</code> URI scheme.</p> <pre><code>AUTH_LDAP_SERVER_URI = \"ldaps://ad.example.com\"\n</code></pre>"},{"location":"user-guide/administration/configuration/authentication/ldap.html#certificate-validation","title":"Certificate Validation","text":"<p>When using either TLS or SSL it is necessary to validate the certificate from your LDAP server. Copy your CA cert to <code>/opt/nautobot/ca.pem</code>.</p> <pre><code># Set the path to the trusted CA certificates and create a new internal SSL context.\nAUTH_LDAP_CONNECTION_OPTIONS = {\nldap.OPT_X_TLS_CACERTFILE: \"/opt/nautobot/ca.pem\",\nldap.OPT_X_TLS_NEWCTX: 0\n}\n</code></pre> <p>If you prefer you can ignore the certificate, however, this is only recommended in development and not production.</p> <pre><code># WARNING: You should not do this in production!\nAUTH_LDAP_CONNECTION_OPTIONS = {\nldap.OPT_X_TLS_REQUIRE_CERT: ldap.OPT_X_TLS_NEVER,\n}\n</code></pre> <p>Additional ldap connection options can be found in the python-ldap documentation.</p>"},{"location":"user-guide/administration/configuration/authentication/ldap.html#user-authentication","title":"User Authentication","text":"<p>Info</p> <p>When using Windows Server 2012, <code>AUTH_LDAP_USER_DN_TEMPLATE</code> should be set to None.</p> <pre><code>from django_auth_ldap.config import LDAPSearch\n# This search matches users with the sAMAccountName equal to the provided username. This is required if the user's\n# username is not in their DN (Active Directory).\nAUTH_LDAP_USER_SEARCH = LDAPSearch(\"ou=Users,dc=example,dc=com\",\nldap.SCOPE_SUBTREE,\n\"(sAMAccountName=%(user)s)\")\n# If a user's DN is producible from their username, we don't need to search.\nAUTH_LDAP_USER_DN_TEMPLATE = \"uid=%(user)s,ou=users,dc=example,dc=com\"\n# You can map user attributes to Django attributes as so.\nAUTH_LDAP_USER_ATTR_MAP = {\n\"first_name\": \"givenName\",\n\"last_name\": \"sn\",\n\"email\": \"mail\"\n}\n</code></pre>"},{"location":"user-guide/administration/configuration/authentication/ldap.html#searching-in-multiple-ldap-groups","title":"Searching in Multiple LDAP Groups","text":"<p>Define the user-groups in your environment, such as a <code>*.env</code> file (delimiter <code>';'</code>):</p> <pre><code># Groups to search for user objects. \"(sAMAccountName=%(user)s),...\"\nNAUTOBOT_AUTH_LDAP_USER_SEARCH_DN=OU=IT-Admins,OU=special-users,OU=Acme-User,DC=Acme,DC=local;OU=Infrastruktur,OU=IT,OU=my-location,OU=User,OU=Acme-User,DC=Acme,DC=local\n</code></pre> <p>Import LDAPSearchUnion in <code>nautobot_config.py</code>, and replace the AUTH_LDAP_USER_SEARCH command from above:</p> <pre><code>from django_auth_ldap.config import ..., LDAPSearchUnion\n# ...\nAUTH_LDAP_USER_SEARCH_DN = os.getenv(\"NAUTOBOT_AUTH_LDAP_USER_SEARCH_DN\", \"\")\nif AUTH_LDAP_USER_SEARCH_DN != \"\":\nuser_search_dn_list = str(AUTH_LDAP_USER_SEARCH_DN).split(\";\")\nldapsearch_objects = []\nfor sdn in user_search_dn_list:\nldapsearch_objects.append(LDAPSearch(sdn.strip(), ldap.SCOPE_SUBTREE, \"(sAMAccountName=%(user)s)\"))\nAUTH_LDAP_USER_SEARCH = LDAPSearchUnion(*ldapsearch_objects)\n</code></pre>"},{"location":"user-guide/administration/configuration/authentication/ldap.html#user-groups-for-permissions","title":"User Groups for Permissions","text":"<p>Info</p> <p>When using Microsoft Active Directory, support for nested groups can be activated by using <code>NestedGroupOfNamesType()</code> instead of <code>GroupOfNamesType()</code> for <code>AUTH_LDAP_GROUP_TYPE</code>. You will also need to modify the import line to use <code>NestedGroupOfNamesType</code> instead of <code>GroupOfNamesType</code> .</p> <pre><code>from django_auth_ldap.config import LDAPSearch, GroupOfNamesType\n# This search ought to return all groups to which the user belongs. django_auth_ldap uses this to determine group\n# hierarchy.\nAUTH_LDAP_GROUP_SEARCH = LDAPSearch(\"dc=example,dc=com\", ldap.SCOPE_SUBTREE,\n\"(objectClass=group)\")\nAUTH_LDAP_GROUP_TYPE = GroupOfNamesType()\n# Define a group required to login.\nAUTH_LDAP_REQUIRE_GROUP = \"CN=NAUTOBOT_USERS,DC=example,DC=com\"\n# Define special user types using groups. Exercise great caution when assigning superuser status.\nAUTH_LDAP_USER_FLAGS_BY_GROUP = {\n\"is_active\": \"cn=active,ou=groups,dc=example,dc=com\",\n\"is_staff\": \"cn=staff,ou=groups,dc=example,dc=com\",\n\"is_superuser\": \"cn=superuser,ou=groups,dc=example,dc=com\"\n}\n# For more granular permissions, we can map LDAP groups to Django groups.\nAUTH_LDAP_FIND_GROUP_PERMS = True\n# Cache groups for one hour to reduce LDAP traffic\nAUTH_LDAP_CACHE_TIMEOUT = 3600\n</code></pre> <ul> <li><code>is_active</code> - All users must be mapped to at least this group to enable authentication. Without this, users cannot log in.</li> <li><code>is_staff</code> - Users mapped to this group are enabled for access to the administration tools; this is the equivalent of checking the \"staff status\" box on a manually created user. This doesn't grant any specific permissions.</li> <li><code>is_superuser</code> - Users mapped to this group will be granted superuser status. Superusers are implicitly granted all permissions.</li> </ul> <p>Warning</p> <p>Authentication will fail if the groups (the distinguished names) do not exist in the LDAP directory.</p>"},{"location":"user-guide/administration/configuration/authentication/ldap.html#multiple-ldap-server-support","title":"Multiple LDAP Server Support","text":"<p>Multiple servers can be supported in <code>django-auth-ldap</code> by the use of additional LDAP backends, as described in the library's documentation.</p> <p>In order to define and load additional backends into Nautobot a plugin can be used. This plugin will allow the backend(s) to be loaded into the Django settings for use within the <code>nautobot_config.py</code> file. At the simplest form the plugin should have a custom backend(s) defined:</p> <pre><code># my_customer_backends.py\nfrom django_auth_ldap.backend import LDAPBackend\nclass LDAPBackendSecondary(LDAPBackend):\nsettings_prefix = \"AUTH_LDAP_SECONDARY_\"\n</code></pre> <p>If the plugin is named <code>nautobot_ldap_plugin</code>, the following snippet could be used to load the additional LDAP backend:</p> <pre><code># nautobot_config.py\nAUTHENTICATION_BACKENDS = [\n'django_auth_ldap.backend.LDAPBackend',\n'nautobot_ldap_plugin.my_customer_backends.LDAPBackendSecondary',  # path to the custom LDAP Backend\n'nautobot.core.authentication.ObjectPermissionBackend',\n]\n</code></pre> <p>Once the custom backend is loaded into the settings all the configuration items mentioned previously need to be completed for each server. As a simplified example defining the URIs would be accomplished by the following two lines in the <code>nautobot_config.py</code> file. A similar approach would be done to define the rest of the settings.</p> <pre><code># nautobot_config.py\n# Server URI which uses django_auth_ldap.backend.LDAPBackend\nAUTH_LDAP_SERVER_URI = \"ldap://ad.example.com\"\n# Server URI which uses nautobot_ldap_plugin.my_customer_backends.LDAPBackendSecondary\nAUTH_LDAP_SECONDARY_SERVER_URI = \"ldap://secondary-ad.example.com\"\n</code></pre> <p>Info</p> <p>In this example the default LDAPBackend was still used as the first LDAP server, which utilized the <code>AUTH_LDAP_*</code> environment variables. It is also possible to remove the default backend and create multiple custom backends instead to normalize the environment variable naming scheme.</p>"},{"location":"user-guide/administration/configuration/authentication/ldap.html#troubleshooting-ldap","title":"Troubleshooting LDAP","text":"<p><code>systemctl restart nautobot</code> restarts the Nautobot service, and initiates any changes made to <code>nautobot_config.py</code>. If there are syntax errors present, the Nautobot process will not spawn an instance, and errors should be logged to <code>/var/log/messages</code>.</p> <p>For troubleshooting LDAP user/group queries, add or merge the following logging configuration to <code>nautobot_config.py</code>:</p> <pre><code>LOGGING = {\n'version': 1,\n'disable_existing_loggers': False,\n'handlers': {\n'nautobot_auth_log': {\n'level': 'DEBUG',\n'class': 'logging.handlers.RotatingFileHandler',\n'filename': '/opt/nautobot/logs/django-ldap-debug.log',\n'maxBytes': 1024 * 500,\n'backupCount': 5,\n},\n},\n'loggers': {\n'django_auth_ldap': {\n'handlers': ['nautobot_auth_log'],\n'level': 'DEBUG',\n},\n},\n}\n</code></pre> <p>Ensure the file and path specified in logfile exist and are writable and executable by the application service account. Restart the nautobot service and attempt to log into the site to trigger log entries to this file.</p> <p>Be sure to configure <code>EXTERNAL_AUTH_DEFAULT_GROUPS</code> and <code>EXTERNAL_AUTH_DEFAULT_PERMISSIONS</code> next.</p>"},{"location":"user-guide/administration/configuration/authentication/remote.html","title":"Remote User Authentication","text":"<p>Nautobot can be configured to support remote user authentication by inferring users from an HTTP header set by an authenticating reverse proxy (e.g. NGINX).</p> <p>This document describes how to make use of an external authentication source (where the Web server sets the <code>REMOTE_USER</code> environment variable). This type of authentication solution is typically seen on intranet sites, with single sign-on solutions.</p> <p>User authentication will still fall back to built-in Django users in the event of a failure in remote authentication.</p>"},{"location":"user-guide/administration/configuration/authentication/remote.html#installation","title":"Installation","text":"<p>Enable the remote user authentication backend by adding the following to your <code>nautobot_config.py</code>:</p> <p>Note</p> <p>It is critical that you include the <code>ObjectPermissionsBackend</code> provided by Nautobot after the <code>RemoteUserBackend</code> so that object-level permissions features can work properly.</p> <pre><code>AUTHENTICATION_BACKENDS = [\n'nautobot.core.authentication.RemoteUserBackend',\n'nautobot.core.authentication.ObjectPermissionBackend',\n]\n</code></pre>"},{"location":"user-guide/administration/configuration/authentication/remote.html#configuration","title":"Configuration","text":"<p>The following configuration variables describe the default values and as long as <code>RemoteUserBackend</code> has been installed as described above, no changes are required.</p> <p>If you do require customizing any of these settings, they must be set in your <code>nautobot_config.py</code>.</p>"},{"location":"user-guide/administration/configuration/authentication/remote.html#remote_auth_auto_create_user","title":"REMOTE_AUTH_AUTO_CREATE_USER","text":"<p>Default: <code>False</code></p> <p>If set to <code>True</code>, local accounts will be automatically created for users authenticated via a remote service.</p>"},{"location":"user-guide/administration/configuration/authentication/remote.html#remote_auth_header","title":"REMOTE_AUTH_HEADER","text":"<p>Default: <code>'HTTP_REMOTE_USER'</code></p> <p>When remote user authentication is in use, this is the name of the HTTP header which informs Nautobot of the currently authenticated user. For example, to use the request header <code>X-Remote-User</code> it needs to be set to <code>HTTP_X_REMOTE_USER</code>.</p> <p>Be sure to configure <code>EXTERNAL_AUTH_DEFAULT_GROUPS</code> and <code>EXTERNAL_AUTH_DEFAULT_PERMISSIONS</code> next.</p>"},{"location":"user-guide/administration/configuration/authentication/sso.html","title":"Single Sign On","text":"<p>Nautobot supports several different authentication mechanisms including OAuth (1 and 2), OpenID, SAML, and others. To accomplish this, Nautobot comes preinstalled with the social-auth-app-django Python module.</p> <p>This module supports several authentication backends by default including:</p> <ul> <li>Google</li> <li>Microsoft Azure Active Directory</li> <li>Okta</li> <li>And many more...</li> </ul>"},{"location":"user-guide/administration/configuration/authentication/sso.html#installation","title":"Installation","text":"<p>Warning</p> <p>Unless otherwise noted, all remaining steps in this document should all be performed as the <code>nautobot</code> user!</p> <p>Hint: Use <code>sudo -iu nautobot</code></p>"},{"location":"user-guide/administration/configuration/authentication/sso.html#install-dependencies","title":"Install Dependencies","text":"<p>If you are using OpenID Connect or SAML you will also need to install the extra dependencies for those.</p>"},{"location":"user-guide/administration/configuration/authentication/sso.html#openid-connect-dependencies","title":"OpenID Connect Dependencies","text":"<p>For OpenID connect, you'll need to install the <code>sso</code> Python extra.</p> <pre><code>pip3 install \"nautobot[sso]\"\n</code></pre>"},{"location":"user-guide/administration/configuration/authentication/sso.html#saml-dependencies","title":"SAML Dependencies","text":"<p>For SAML, additional system-level dependencies are required so that the specialized XML libraries can be built and compiled for your system.</p> <p>Note</p> <p>These instructions have only been certified on Ubuntu 20.04 at this time.</p> <p>Install the system dependencies as <code>root</code>:</p> <pre><code>sudo apt install -y libxmlsec1-dev libxmlsec1-openssl pkg-config\n</code></pre> <p>Install the <code>sso</code> Python extra as the <code>nautobot</code> user.</p> <pre><code>pip3 install \"nautobot[sso]\"\n</code></pre> <p>Please see the SAML configuration guide below for an example of how to configure Nautobot to authenticate using SAML with Google as the identity provider.</p>"},{"location":"user-guide/administration/configuration/authentication/sso.html#configuration","title":"Configuration","text":""},{"location":"user-guide/administration/configuration/authentication/sso.html#authentication-backends","title":"Authentication Backends","text":"<p>To use external authentication, you'll need to define <code>AUTHENTICATION_BACKENDS</code> in your <code>nautobot_config.py</code>.</p> <ul> <li>Insert the desired external authentication backend as the first item in the list. This step is key to properly redirecting when users click the login button.</li> <li>You must also ensure that <code>nautobot.core.authentication.ObjectPermissionBackend</code> is always the second item in the list. It is an error to exclude this backend.</li> </ul> <p>Note</p> <p>It is critical that you include the <code>ObjectPermissionsBackend</code> provided by Nautobot after the desired backend so that object-level permissions features can work properly.</p> <p>For example, if you wanted to use Google OAuth2 as your authentication backend:</p> <pre><code>AUTHENTICATION_BACKENDS = [\n\"social_core.backends.google.GoogleOAuth2\",\n\"nautobot.core.authentication.ObjectPermissionBackend\",\n]\n</code></pre> <p>Note</p> <p>Many backends have settings specific to that backend that are not covered in this guide. Please consult the documentation for your desired backend linked in the next section.</p> <p>Warning</p> <p>You should only enable one social authentication authentication backend. It is technically possible to use multiple backends but we cannot officially support more than one at this time.</p>"},{"location":"user-guide/administration/configuration/authentication/sso.html#custom-authentication-backends","title":"Custom Authentication Backends","text":"<p>The default external authentication supported is social-auth-app-django as stated above. If you have developed your own external authentication backend, you will need to configure <code>SOCIAL_AUTH_BACKEND_PREFIX</code> to use your backend instead and correctly enable the SSO redirect when the login button is clicked. For example, if your custom authentication backend is available at <code>custom_auth.backends.custom.Oauth2</code>, you would set things as follows:</p> <pre><code>SOCIAL_AUTH_BACKEND_PREFIX = \"custom_auth.backends\"\nAUTHENTICATION_BACKENDS = [\n\"custom_auth.backends.custom.Oauth2\",\n\"nautobot.core.authentication.ObjectPermissionBackend\",\n]\n</code></pre> <p>In the example above, <code>SOCIAL_AUTH_BACKEND_PREFIX</code> was set to <code>custom_auth.backends</code> within the <code>nautobot_config.py</code> for our custom authentication plugin we created (custom_auth.backends.custom.Oauth2). This will enable the SSO redirect for users when they click the login button.</p>"},{"location":"user-guide/administration/configuration/authentication/sso.html#select-your-authentication-backend","title":"Select your Authentication Backend","text":"<p>You will need to select the correct social authentication module name for your desired method of external authentication. Please see the official Python Social Auth documentation on supported backends for more the full list of backends and any specific configuration or required settings.</p> <p>Some common backend module names include:</p> Backend Social Auth Backend Module Name Microsoft Azure Active Directory <code>social_core.backends.azuread.AzureADOAuth2</code> <code>social_core.backends.azuread_b2c.AzureADB2COAuth2</code> <code>social_core.backends.azuread_tenant.AzureADTenantOAuth2</code> <code>social_core.backends.azuread_tenant.AzureADV2TenantOAuth2</code> Google <code>social_core.backends.gae.GoogleAppEngineAuth</code> <code>social_core.backends.google.GoogleOAuth2</code> <code>social_core.backends.google.GoogleOAuth</code> <code>social_core.backends.google_openidconnect.GoogleOpenIdConnect</code> Okta <code>social_core.backends.okta.OktaOAuth2</code> <code>social_core.backends.okta_openidconnect.OktaOpenIdConnect</code> SAML <code>social_core.backends.saml.SAMLAuth</code>"},{"location":"user-guide/administration/configuration/authentication/sso.html#user-permissions","title":"User Permissions","text":"<p>By default, once authenticated, if the user has never logged in before a new user account will be created for the user. This new user will not be a member of any group or have any permissions assigned. If you would like to create users with a default set of permissions there are some additional variables to configure the permissions.</p> <p>Please see the documentation on <code>EXTERNAL_AUTH_DEFAULT_GROUPS</code> and <code>EXTERNAL_AUTH_DEFAULT_PERMISSIONS</code> for more information.</p>"},{"location":"user-guide/administration/configuration/authentication/sso.html#configuration-guides","title":"Configuration Guides","text":"<p>The following guides are provided for some of the most common authentication methods.</p>"},{"location":"user-guide/administration/configuration/authentication/sso.html#okta","title":"Okta","text":"<ol> <li>In the Okta admin portal, create a new Web application</li> <li> <p>Configure the application as follows:</p> <ul> <li>Base URIs: should be the URI of your Nautobot application such as <code>https://nautobot.example.com</code></li> <li>Login redirect URIs: should be the Base URI plus <code>/complete/okta-openidconnect/</code> such as <code>https://nautobot.example.com/complete/okta-openidconnect/</code></li> <li>Logout redirect URIs: should be the Base URI plus <code>/disconnect/okta-openidconnect/</code> such as <code>https://nautobot.example.com/disconnect/okta-openidconnect/</code></li> </ul> </li> <li> <p>Once the application is configured in Okta, SSO can either be configured with OAuth2 or OpenID Connect (OIDC). When using an organization's authentication server OAuth2 is preferred; with custom Okta authentication backends, use OIDC.</p> </li> </ol>"},{"location":"user-guide/administration/configuration/authentication/sso.html#okta-oauth2","title":"Okta - OAuth2","text":"<p>Edit your <code>nautobot_config.py</code> as follows:</p> <pre><code>AUTHENTICATION_BACKENDS = [\n\"social_core.backends.okta.OktaOAuth2\",\n\"nautobot.core.authentication.ObjectPermissionBackend\",\n]\nSOCIAL_AUTH_OKTA_OAUTH2_KEY = '&lt;Client ID from Okta&gt;'\nSOCIAL_AUTH_OKTA_OAUTH2_SECRET = '&lt;Client Secret From Okta&gt;'\nSOCIAL_AUTH_OKTA_OAUTH2_API_URL = 'https://&lt;Okta URL&gt;'\n</code></pre>"},{"location":"user-guide/administration/configuration/authentication/sso.html#okta-openid","title":"Okta - OpenID","text":"<p>Edit your <code>nautobot_config.py</code> as follows:</p> <pre><code>AUTHENTICATION_BACKENDS = [\n\"social_core.backends.okta_openidconnect.OktaOpenIdConnect\",\n\"nautobot.core.authentication.ObjectPermissionBackend\",\n]\nSOCIAL_AUTH_OKTA_OPENIDCONNECT_KEY = '&lt;Client ID from Okta&gt;'\nSOCIAL_AUTH_OKTA_OPENIDCONNECT_SECRET = '&lt;Client Secret From Okta&gt;'\nSOCIAL_AUTH_OKTA_OPENIDCONNECT_API_URL = 'https://&lt;Okta URL&gt;/oauth2/&lt;Authentication Server&gt;'\n</code></pre> <p>The <code>/default</code> authentication server can be used for testing, however, it should not be used in production.</p>"},{"location":"user-guide/administration/configuration/authentication/sso.html#okta-saml","title":"Okta - SAML","text":"<p>See SAML Prerequisites for common setup.</p> <p>Setup SAML in Okta</p> <ol> <li>Visit your Okta Admin Dasboard.</li> <li>Create a new application (Create App Integration) and select SAML 2.0.</li> <li>Give you application a name and logo if you choose.</li> <li>Configure the SAML Settings as follows.<ul> <li>Single Sign-on URL: <code>https://nautobot.example.com/complete/saml/</code></li> <li>Audience URI: <code>https://nautobot.example.com</code></li> <li>Default RelayState: <code>okta</code></li> <li>Name ID Format: <code>Unspecified</code></li> <li>Application Username: <code>Okta Username</code></li> </ul> </li> <li>Under Attribute Statements, configure the following:<ul> <li><code>firstName</code> - Basic - <code>user.firstName</code></li> <li><code>lastName</code> - Basic - <code>user.lastName</code></li> <li><code>emailAddress</code> - Basic <code>user.email</code></li> </ul> </li> <li>(Optional) Configure group Attribute statements.<ul> <li><code>groups</code> - Basic - Startswith - <code>nautobot</code> (example, needs to be adjusted to your environment)</li> </ul> </li> <li>Select <code>internal application</code> and then <code>finish</code>.</li> <li>Don't forget to assign users/groups to the application so they have access.</li> <li>Lastly, look at the <code>Sign On</code> tab, then Show Details under Metadata details for detail you will need to configure Nautobot.</li> </ol> <p>Edit your <code>nautobot_config.py</code> as follows:</p> <pre><code># Django authentication backends\nAUTHENTICATION_BACKENDS = [\n\"social_core.backends.saml.SAMLAuth\",\n\"nautobot.core.authentication.ObjectPermissionBackend\",\n]\n# The https FQDN to your Nautobot instance\nSOCIAL_AUTH_SAML_SP_ENTITY_ID = \"https://nautobot.example.com/\"\n# X.509 cert/key pair used for host verification are not used for this example because\n# Nautobot is directly authenticating itself to Google. Set them to empty strings.\nSOCIAL_AUTH_SAML_SP_PUBLIC_CERT = \"\"\nSOCIAL_AUTH_SAML_SP_PRIVATE_KEY = \"\"\n# A dictionary that contains information about your app. You must specify values for\n# English at a minimum.\nSOCIAL_AUTH_SAML_ORG_INFO = {\n\"en-US\": {\n\"name\": \"Nautobot\",\n\"displayname\": \"Nautobot\",\n\"url\": \"https://nautobot.example.com\",\n}\n}\n# Technical point of contact\nSOCIAL_AUTH_SAML_TECHNICAL_CONTACT = {\n\"givenName\": \"Bob Jones\",\n\"emailAddress\": \"bob@example.com\"\n}\n# Support point of contact\nSOCIAL_AUTH_SAML_SUPPORT_CONTACT = {\n\"givenName\": \"Alice Jenkins\",\n\"emailAddress\": \"alice@example.com\"\n}\n# The Issuer URL for Okta from step 9\nOKTA_ENTITY_ID = \"&lt;Issuer from Okta&gt;\"\n# The Sign On URL for Okta from step 9\nOKTA_SSO_URL = \"&lt;Sign On URL from Okta&gt;\"\n# The Signing Certificate for  Okta from step 9\nOKTA_CERTIFICATE = \"&lt;Signing Certificate from Okta&gt;\"\n# The most important setting. List the Entity ID (Issuer), SSO URL (Sign On URL), and x.509 public key certificate\n# for each provider that you app wants to support. \nSOCIAL_AUTH_SAML_ENABLED_IDPS = {\n\"okta\": {\n'force_authn': \"true\",\n'allow_unsolicited': \"true\",\n'requested_authn_context': \"false\",\n\"entity_id\": OKTA_ENTITY_ID,\n\"url\": OKTA_SSO_URL,\n\"x509cert\": OKTA_CERTIFICATE,\n# These are used to map to User object fields in Nautobot using Google\n# attribute fields we configured in step 8 of \"Setup SAML in Google\".\n\"attr_user_permanent_id\": \"emailAddress\",\n\"attr_first_name\": \"firstName\",\n\"attr_last_name\": \"lastName\",\n\"attr_username\": \"emailAddress\",\n\"attr_email\": \"emailAddress\",\n}\n}\n# Required for correctly redirecting when behind SSL proxy (NGINX). You may or may not need\n# these depending on your production deployment. They are provided here just in case.\nSECURE_SSL_REDIRECT = True\nSECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\n</code></pre>"},{"location":"user-guide/administration/configuration/authentication/sso.html#login-with-okta-saml","title":"Login with Okta SAML","text":"<p>Note the provider entry we configured in SOCIAL_AUTH_SAML_ENABLED_IDPS as okta. This will be used to login and will be referenced in the query parameter using idp=okta. For example /login/saml/?idp=okta.</p> <p>This should be the URL that is mapped to the \"Log in\" button on the top right of the index page when you navigate to Nautobot in your browser. Clicking this link should automatically redirect you to Google, ask you to \"Choose an account\", log you in and redirect you back to the Nautobot home page. Your email address will also be your username.</p> <p>Be sure to configure EXTERNAL_AUTH_DEFAULT_GROUPS and EXTERNAL_AUTH_DEFAULT_PERMISSIONS next.</p>"},{"location":"user-guide/administration/configuration/authentication/sso.html#okta-additional-scopes","title":"Okta - Additional Scopes","text":"<p>It is possible to get additional OAuth scopes from okta by adding them to the <code>SOCIAL_AUTH_{BACKEND}_SCOPE</code> list. For example to get the <code>groups</code> scope from Okta using OAuth2 add the following to your <code>nautobot_config.py</code>:</p> <pre><code>SOCIAL_AUTH_OKTA_OAUTH2_SCOPE = ['groups']\n</code></pre> <p>for OpenID:</p> <pre><code>SOCIAL_AUTH_OKTA_OPENIDCONNECT_SCOPE = ['groups']\n</code></pre> <p>In order to use this returned scope a custom function needs to be written and added to the <code>SOCIAL_AUTH_PIPELINE</code> as described in the <code>python-social-auth</code> authentication pipeline documentation.</p> <p>An example to sync groups with Okta is provided in the <code>examples/okta</code> folder in the root of the Nautobot repository.</p>"},{"location":"user-guide/administration/configuration/authentication/sso.html#google-oauth2","title":"Google - OAuth2","text":"<p>The following instructions guide you through the process of configuring Google for OAuth2 authentication.</p> <p>Important</p> <p>Please note there is further guidance provided by python-social-auth as well as Google. For more</p> <p>information please utilize these additional resources.</p> <ol> <li>In the Google API Console create a new project or select an existing one.</li> <li>Select OAuth consent screen from the menu on the left side of the page</li> <li>For User Type select Internal and click Create</li> <li> <p>Configure as follows:</p> <ul> <li>App name: Acme Corp Nautobot</li> <li>User support email: select an email</li> <li>App logo: The Nautobot logo can be found at <code>nautobot/project-static/img/nautobot_logo.png</code></li> </ul> </li> <li> <p>Click Save and Continue</p> </li> <li>No additional scopes are needed click Save and Continue</li> <li>Select Credentials from the menu on the left side of the page</li> <li>Click + Create Credentials at the top of the page and select OAuth client ID</li> <li> <p>Configure as follows:</p> <ul> <li>Application type: Web application</li> <li>Name: Nautobot</li> <li>Authorized redirect URIs: should be the Nautobot URL plus <code>/complete/google-oauth2/</code> for example <code>https://nautobot.example.com/complete/google-oauth2/</code></li> </ul> </li> <li> <p>Click Create</p> </li> <li>Edit your <code>nautobot_config.py</code> as follows:</li> </ol> <pre><code>AUTHENTICATION_BACKENDS = [\n\"social_core.backends.google.GoogleOAuth2\",\n\"nautobot.core.authentication.ObjectPermissionBackend\",\n]\nSOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '&lt;Client ID from Google&gt;'\nSOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '&lt;Secret ID from Google&gt;'\nSOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = ['openid']\n</code></pre>"},{"location":"user-guide/administration/configuration/authentication/sso.html#saml","title":"SAML","text":"<p>This guide will walk you through configuring Nautobot to authenticate using SAML with Google as the identity provider.</p> <p>Important</p> <p>Please note that there is further guidance provided by python-social-auth and Google. For more information please utilize these additional resources.</p>"},{"location":"user-guide/administration/configuration/authentication/sso.html#prerequisites","title":"Prerequisites","text":"<p>Warning</p> <p>SAML will not work without end-to-end encryption. These requirements are not flexible.</p> <p>Before you begin you will need the following:</p> <ul> <li>The fully-qualified domain name (FQDN) of your Nautobot host must be registered in DNS. For this example we will be using <code>nautobot.example.com</code>.</li> <li>A valid publicly trusted SSL certificate matching the FQDN of your host. You cannot use a self-signed certificate. Google validates this certificate to assert authenticity of SAML authentication requests.</li> <li>The name and email address for a technical point of contact. For this example we will use <code>Bob Jones, bob@example.com</code>.</li> <li>The name and email address for a support point of contact. For this example we will use <code>Alice Jenkins, alice@example.com.</code></li> </ul>"},{"location":"user-guide/administration/configuration/authentication/sso.html#setup-saml-in-google","title":"Setup SAML in Google","text":"<ol> <li>Visit the Web and mobile apps console in the Google Admin dashboard.</li> <li>Follow Google's official document to Set up your own custom SAML application, pausing at step 6.</li> <li>From step 6 of the instructions, capture the SSO URL, Entity ID, and Certificate. You will use these in later steps to configure Nautobot. Each of these will be referred to as <code>GOOGLE_SSO_URL</code>, <code>GOOGLE_ENTITY_ID</code>, and <code>GOOGLE_CERTIFICATE</code> respectively.</li> <li>Skip step 7 in the instructions, as that does not apply here because we will be configuring Nautobot directly.</li> <li>For step 9 of the instructions under Service provider details, provide the following<ul> <li>ACS URL: <code>https://nautobot.example.com/complete/saml/</code></li> <li>Entity ID: <code>https://nautobot.example.com/</code></li> <li>Start URL: Leave this field blank</li> </ul> </li> <li>Skip step 10 in the instructions, as a signed response is not required.</li> <li>For step 11 of the instructions, under Name ID, set the following:<ul> <li>Name ID Format: Select EMAIL</li> <li>Name ID: Select Basic Information &gt; Primary Email</li> </ul> </li> <li>For step 13 of the instructions, on the Attribute mapping page, add the following mappings for Google Directory attributes to App attributes:<ul> <li>Primary email --&gt; <code>email</code></li> <li>First name --&gt; <code>first_name</code></li> <li>Last name --&gt; <code>last_name</code></li> </ul> </li> <li>Click Finish</li> </ol>"},{"location":"user-guide/administration/configuration/authentication/sso.html#configure-nautobot","title":"Configure Nautobot","text":"<p>There is a lot to configure to inform Nautobot how to integrate with SAML, so please provide the following configuration very carefully. All of these values must be correct in your <code>nautobot_config.py</code>.</p> <p>Important</p> <p>Refer to the official Python Social Auth documentation for required SAML configuration if you run into any issues.</p> <pre><code># Django authentication backends\nAUTHENTICATION_BACKENDS = [\n\"social_core.backends.saml.SAMLAuth\",\n\"nautobot.core.authentication.ObjectPermissionBackend\",\n]\n# The https FQDN to your Nautobot instance\nSOCIAL_AUTH_SAML_SP_ENTITY_ID = \"https://nautobot.example.com/\"\n# X.509 cert/key pair used for host verification are not used for this example because\n# Nautobot is directly authenticating itself to Google. Set them to empty strings.\nSOCIAL_AUTH_SAML_SP_PUBLIC_CERT = \"\"\nSOCIAL_AUTH_SAML_SP_PRIVATE_KEY = \"\"\n# A dictionary that contains information about your app. You must specify values for\n# English at a minimum.\nSOCIAL_AUTH_SAML_ORG_INFO = {\n\"en-US\": {\n\"name\": \"Nautobot\",\n\"displayname\": \"Nautobot\",\n\"url\": \"https://nautobot.example.com\",\n}\n}\n# Technical point of contact\nSOCIAL_AUTH_SAML_TECHNICAL_CONTACT = {\n\"givenName\": \"Bob Jones\",\n\"emailAddress\": \"bob@example.com\"\n}\n# Support point of contact\nSOCIAL_AUTH_SAML_SUPPORT_CONTACT = {\n\"givenName\": \"Alice Jenkins\",\n\"emailAddress\": \"alice@example.com\"\n}\n# The Entity ID URL for Google from step 3\nGOOGLE_ENTITY_ID = \"&lt;Entity ID from Google&gt;\"\n# The SSO URL for Google from step 3\nGOOGLE_SSO_URL = \"&lt;SSO URL from Google&gt;\"\n# The Certificate for Google from step 3\nGOOGLE_CERTIFICATE = \"&lt;Certificate from Google&gt;\"\n# The most important setting. List the Entity ID, SSO URL, and x.509 public key certificate\n# for each provider that you app wants to support. We are only supporting Google for this\n# example.\nSOCIAL_AUTH_SAML_ENABLED_IDPS = {\n\"google\": {\n\"entity_id\": GOOGLE_ENTITY_ID,\n\"url\": GOOGLE_SSO_URL,\n\"x509cert\": GOOGLE_CERTIFICATE,\n# These are used to map to User object fields in Nautobot using Google\n# attribute fields we configured in step 8 of \"Setup SAML in Google\".\n\"attr_user_permanent_id\": \"email\",\n\"attr_first_name\": \"first_name\",\n\"attr_last_name\": \"last_name\",\n\"attr_username\": \"email\",\n\"attr_email\": \"email\",\n}\n}\n# Required for correctly redirecting when behind SSL proxy (NGINX). You may or may not need\n# these depending on your production deployment. They are provided here just in case.\nSECURE_SSL_REDIRECT = True\nSECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\n</code></pre>"},{"location":"user-guide/administration/configuration/authentication/sso.html#enable-saml-in-google","title":"Enable SAML in Google","text":"<p>Now that you've configured both Google and Nautobot for SAML, you still need to enable SAML for your users in your Google domain.</p> <p>On Google's official site to Set up your own custom SAML application, scroll down to Turn on your SAML app and follow the remaining instructions to enable and verify SAML in Google.</p>"},{"location":"user-guide/administration/configuration/authentication/sso.html#login-with-saml","title":"Login with SAML","text":"<p>Note the provider entry we configured in <code>SOCIAL_AUTH_SAML_ENABLED_IDPS</code> as <code>google</code>. This will be used to login and will be referenced in the query parameter using <code>idp=google</code>. For example <code>/login/saml/?idp=google</code>.</p> <p>This should be the URL that is mapped to the \"Log in\" button on the top right of the index page when you navigate to Nautobot in your browser. Clicking this link should automatically redirect you to Google, ask you to \"Choose an account\", log you in and redirect you back to the Nautobot home page. Your email address will also be your username.</p> <p>Be sure to configure <code>EXTERNAL_AUTH_DEFAULT_GROUPS</code> and <code>EXTERNAL_AUTH_DEFAULT_PERMISSIONS</code> next.</p>"},{"location":"user-guide/administration/configuration/authentication/sso.html#azure-ad","title":"Azure AD","text":"<ol> <li>In the Azure admin portal, search for and select Azure Active Directory.</li> <li>Under Manage, select App registrations -&gt; New registration.</li> <li> <p>Configure the application as follows:</p> <ul> <li>Name: This is the user-facing display name for the app.</li> <li>Supported account types: This specifies the AD directories that you're allowing to authenticate with this app.</li> <li>Redirect URIs: Don't fill this out yet, it will be configured in the following steps.</li> </ul> </li> <li> <p>Once the application is configured in Azure, you'll be shown the app registration's Overview page. Please take note of the Application (client) ID for use later. SSO with Azure can either be configured with OAuth2 or OpenID Connect (OIDC). When using an organization's authentication server OAuth2 is preferred; with custom Azure authentication backends, use OIDC.</p> </li> <li>From the App registration page, click on Authentication. Under Platform configurations, select Add a platform and select Web.</li> <li> <p>Click on the Add a Redirect URI link on the page and configure it as follows:</p> <ul> <li>Redirect URIs: should be the Base URI plus <code>/complete/azuread-oauth2/</code> such as <code>https://nautobot.example.com/complete/azuread-oauth2/</code></li> </ul> </li> <li> <p>Once the Redirect URI is set, the last thing you'll need is to generate a client secret. To do so, click on Certificates &amp; secrets and then the New client secret option. At this point you'll need to specify the expiration for the secret. Microsoft recommends less than 12 months with a maximum of 24 months as an option. Ensure you make a note of the secret that's generated for the next step.</p> </li> <li> <p>With the client secret generated, edit your <code>nautobot_config.py</code> as follows:</p> </li> </ol>"},{"location":"user-guide/administration/configuration/authentication/sso.html#azure-ad-oauth2","title":"Azure AD - OAuth2","text":"<p>If your app is linked to the common tenant, you'll want to edit your <code>nautobot_config.py</code> as follows:</p> <pre><code>AUTHENTICATION_BACKENDS = [\n\"social_core.backends.azuread.AzureADOAuth2\",\n\"nautobot.core.authentication.ObjectPermissionBackend\",\n]\nSOCIAL_AUTH_AZUREAD_OAUTH2_KEY = \"&lt;Client ID from Azure&gt;\"\nSOCIAL_AUTH_AZUREAD_OAUTH2_SECRET = \"&lt;Client Secret From Azure&gt;\"\n</code></pre>"},{"location":"user-guide/administration/configuration/authentication/sso.html#azure-tenant-support","title":"Azure - Tenant Support","text":"<p>If your app is linked to a specific tenant instead of the common tenant, you'll want to edit your <code>nautobot_config.py</code> as follows:</p> <pre><code>AUTHENTICATION_BACKENDS = [\n\"social_core.backends.azuread_tenant.AzureADTenantOAuth2\",\n\"nautobot.core.authentication.ObjectPermissionBackend\",\n]\nSOCIAL_AUTH_AZUREAD_TENANT_OAUTH2_KEY = \"&lt;Client ID from Azure&gt;\"\nSOCIAL_AUTH_AZUREAD_TENANT_OAUTH2_SECRET = \"&lt;Client Secret From Azure&gt;\"\nSOCIAL_AUTH_AZUREAD_TENANT_OAUTH2_TENANT_ID = \"&lt;Tenant ID from Azure&gt;\"\n</code></pre> <p>With those settings in place your users should be able to authenticate against Azure AD and successfully login to Nautobot. However, that user will not be placed in any groups or given any permissions. In order to do so, you'll need to utilize a script to synchronize the groups passed from Azure to Nautobot after authentication succeeds. Any group permissions will need to be set manually in the Nautobot admin panel.</p> <p>An example to sync groups with Azure is provided in the <code>examples/azure_ad</code> folder in the root of the Nautobot repository.</p> <p>Note</p> <p>You may need to set <code>UWSGI_BUFFER_SIZE</code> to something bigger than the default 4096 bytes in the UWSGI config if you are seeing errors like <code>invalid request block size</code> in your application logs (see here for more information)</p>"},{"location":"user-guide/administration/guides/caching.html","title":"Caching","text":"<p>A fundamental trade-off in dynamic websites like Nautobot is that, well, they're dynamic. Each time a user requests a page, the Web server makes all sorts of calculations \u2013 from database queries to template rendering to business logic \u2013 to create the page that your site's visitor sees. This is a lot more expensive, from a processing-overhead perspective, than your standard read-a-file-off-the-filesystem server arrangement.</p> <p>That's where caching comes in.</p> <p>To cache something is to save the result of an expensive calculation so that you don't have to perform the calculation next time.</p> <p>Nautobot makes extensive use of caching; this is not a simple topic but it's a useful one for a Nautobot administrator to understand, so read on if you please.</p>"},{"location":"user-guide/administration/guides/caching.html#how-it-works","title":"How it Works","text":"<p>Removed in version 2.0.0</p> <p><code>django-cacheops</code> has been removed as a Nautobot dependency and is no longer used.</p> <p>Caching is a complex topic and there are some important details to clarify with how caching is implemented and configured in Nautobot.</p>"},{"location":"user-guide/administration/guides/caching.html#caching-in-django","title":"Caching in Django","text":"<p>Django includes its own cache framework. Nautobot uses this cache framework in a limited number of cases.</p>"},{"location":"user-guide/administration/guides/caching.html#caches-and-django-redis","title":"<code>CACHES</code> and <code>django-redis</code>","text":"<p>The <code>CACHES</code> setting is used to, among other things, configure Django's built-in caching. This is a required setting. Here's why:</p> <p>Nautobot uses the <code>django-redis</code> Django plugin which allows it to use Redis as a backend for caching and session storage. This is used to provide a concurrent write lock for preventing race conditions when allocating IP address objects.</p> <p><code>django-redis</code> also uses the <code>CACHES</code> setting, in its case to simplify the configuration for establishing concurrent write locks.</p>"},{"location":"user-guide/administration/guides/caching.html#high-availability-caching","title":"High Availability Caching","text":"<p>Redis provides two different methods to achieve high availability: The first is Redis Sentinel and the second is the newer Redis Clustering feature. Currently, Nautobot only supports Redis Sentinel for high availability.</p>"},{"location":"user-guide/administration/guides/caching.html#using-redis-sentinel","title":"Using Redis Sentinel","text":"<p>The installation/configuration of the Redis Sentinel cluster itself is outside the scope of this document, this section is intended to provide the steps necessary to configure Nautobot to connect to a Sentinel cluster.</p> <p>We need to configure <code>django-redis</code> and <code>celery</code> to use Sentinel. Each library is configured differently, so please pay close attention to the details.</p>"},{"location":"user-guide/administration/guides/caching.html#django-redis-sentinel-configuration","title":"<code>django-redis</code> Sentinel Configuration","text":"<p>Notable settings:</p> <ul> <li><code>SENTINELS</code>: List of tuples or tuple of tuples with each inner tuple containing the name or IP address of the Redis server and port for each sentinel instance to connect to</li> <li><code>LOCATION</code>: Similar to a redis URL, however, the hostname in the URL is the master/service name in redis sentinel</li> <li><code>SENTINEL_KWARGS</code>: Options which will be passed directly to Redis Sentinel</li> <li><code>PASSWORD</code>: The redis password (if set), the <code>SENTINEL_KWARGS[\"password\"]</code> setting is the password for Sentinel</li> </ul> <p>Example:</p> <pre><code>DJANGO_REDIS_CONNECTION_FACTORY = \"django_redis.pool.SentinelConnectionFactory\"\nCACHES = {\n\"default\": {\n\"BACKEND\": \"django_redis.cache.RedisCache\",\n\"LOCATION\": \"redis://nautobot/0\",  # in this context 'nautobot' is the redis master/service name\n\"OPTIONS\": {\n\"CLIENT_CLASS\": \"django_redis.client.SentinelClient\",\n\"CONNECTION_POOL_CLASS\": \"redis.sentinel.SentinelConnectionPool\",\n\"PASSWORD\": \"\",\n\"SENTINEL_KWARGS\": {\n\"password\": \"\",  # likely the same password from above\n},\n\"SENTINELS\": [\n(\"mysentinel.redis.example.com\", 26379),\n(\"othersentinel.redis.example.com\", 26379),\n(\"thirdsentinel.redis.example.com\", 26379)\n],\n},\n},\n}\n</code></pre> <p>For more details on configuring django-redis with Redis Sentinel, please see the documentation for Django Redis.</p>"},{"location":"user-guide/administration/guides/caching.html#celery-sentinel-configuration","title":"<code>celery</code> Sentinel Configuration","text":"<p>Changed in version 2.0.0</p> <p>Celery now stores results in the Nautobot database. The <code>CELERY_RESULT_BACKEND</code> and <code>CELERY_RESULT_BACKEND_TRANSPORT_OPTIONS</code> should not be changed from their default values.</p> <p>Note</p> <p>Celery is not directly related to caching but it does utilize Redis, therefore in more advanced deployments if Redis Sentinel is required for caching, Celery must also be configured to use Redis Sentinel to high availability.</p> <p>Celery Sentinel configuration is controlled by two settings within your <code>nautobot_config.py</code>:</p> <ul> <li><code>CELERY_BROKER_URL</code></li> <li><code>CELERY_BROKER_TRANSPORT_OPTIONS</code></li> </ul> <pre><code>redis_password = \"\"\nsentinel_password = \"\"\nCELERY_BROKER_URL = (\nf\"sentinel://:{redis_password}@mysentinel.redis.example.com:26379;\"\nf\"sentinel://:{redis_password}@othersentinel.redis.example.com:26379;\"\n# The final entry must not have the `;` delimiter\nf\"sentinel://:{redis_password}@thirdsentinel.redis.example.com:26379\"\n)\nCELERY_BROKER_TRANSPORT_OPTIONS = {\n\"master_name\": \"nautobot\",\n\"sentinel_kwargs\": {\"password\": sentinel_password},\n}\n</code></pre> <p>Please see the official Celery documentation for more information on how to configure Celery to use Redis Sentinel.</p> <p>Please also see the Nautobot documentation on required settings for Celery for additional information.</p>"},{"location":"user-guide/administration/guides/celery-queues.html","title":"Celery Task Queues","text":"<p>If you're planning to run multiple jobs, leverage job hooks or are finding that your jobs are taking too long to complete you may want to consider deploying multiple celery workers with different queues for different types of tasks.</p>"},{"location":"user-guide/administration/guides/celery-queues.html#how-celery-task-queues-work","title":"How Celery Task Queues Work","text":"<p>The default celery behavior is:</p> <ul> <li><code>--queue celery</code></li> <li><code>--concurrency</code> set to the number of CPUs detected on the system</li> <li><code>worker_prefetch_multiplier=4</code></li> </ul> <p>This means that a worker running on a 4 core system will run 4 tasks concurrently and reserve a maximum of 16 more tasks from the queue named <code>celery</code>. If you have a mixture of long running and short running tasks with a single queue, you could find your long running tasks blocking the shorter tasks.</p>"},{"location":"user-guide/administration/guides/celery-queues.html#recommended-worker-deployment","title":"Recommended Worker Deployment","text":"<p>Each environment is unique but it's generally a good idea to add at least one extra worker on a separate queue for running jobs. Nautobot uses the default <code>celery</code> queue to perform some background tasks and if the queue is full of long running jobs these system tasks could take a long time to execute. This could cause performance problems or unexpected behavior in Nautobot. A new worker can be deployed on a separate queue by using the <code>nautobot-worker.service</code> systemd service and modifying the <code>ExecStart</code> line to include a <code>--queues</code> option. Example:</p> <pre><code>ExecStart=/opt/nautobot/bin/nautobot-server celery worker --loglevel INFO --pidfile /var/tmp/nautobot-worker-jobqueue.pid --queues job_queue\n</code></pre> <p>This will create a worker that will only process tasks sent to the <code>job_queue</code> celery queue. You can use this worker to run jobs while the rest of Nautobot's background tasks will be processed by the default celery worker listening to the <code>celery</code> queue.</p> <p>Info</p> <p>Workers can be configured to listen to multiple queues by supplying a comma separated list of queues to the <code>--queues</code> argument. See the celery workers guide for more information.</p> <p>Warning</p> <p>If a job is sent to a queue that no workers are listening to, that job will remain in pending status until it's purged or a worker starts listening to that queue and processes the job. Be sure that the queue name on the worker and jobs match.</p>"},{"location":"user-guide/administration/guides/celery-queues.html#concurrency-setting","title":"Concurrency Setting","text":"<p>If you have long running jobs that use little CPU resources you may want to increase your <code>--concurrency</code> setting on your worker to increase the number of jobs that run in parallel. For example, you may have a job that logs into a device over ssh and collects some information from the command line. This task could take a long time to run but consume minimal CPU so your system may be able to run many more of these tasks in parallel than the default concurrency setting allows. The <code>--concurrency</code> setting can be modified by adding the command line option in the <code>ExecStart</code> line in your systemd service:</p> <pre><code>ExecStart=/opt/nautobot/bin/nautobot-server celery worker --loglevel INFO --pidfile /var/tmp/nautobot-worker-jobqueue.pid --queues job_queue --concurrency 64\n</code></pre> <p>You may have to change this setting multiple times to find what works best in your environment.</p> <p>Warning</p> <p>Modifying your concurrency setting may increase the CPU and will increase the memory load on your celery worker by at least 175MB per concurrent thread. Only change this setting if you have monitoring systems in place to monitor the system resources on your worker.</p>"},{"location":"user-guide/administration/guides/healthcheck.html","title":"Healthcheck Endpoint","text":"<p>Nautobot includes a health check endpoint <code>/health</code> which utilizes the django-health-check project and some custom health checks (database connection and cache availability).  This endpoint is designed for use by an optional load balancer placed in front of Nautobot to determine the health of the Nautobot application server.  By default the health check enables checks for the following:</p> <ul> <li>Database Backend</li> <li>Caching Backend</li> <li>Storage Backend</li> </ul> <p>In addition to exposing a health check URL the <code>nautobot-server</code> utility also provides a <code>health_check</code> management command which provides the same information as the web interface.</p> <p>Additional health checks are available as part of the django-health-check project and can be added to the <code>EXTRA_INSTALLED_APPS</code> configuration variable as desired.  The Nautobot server is healthy if the HTTP response is 200 from a GET request to <code>/health</code>, a web UI is also available at the same endpoint for human consumption.</p>"},{"location":"user-guide/administration/guides/permissions.html","title":"Permissions","text":"<p>Nautobot provides an object-based permissions framework, which replace's Django's built-in permissions model. Object-based permissions enable an administrator to grant users or groups the ability to perform an action on arbitrary subsets of objects in Nautobot, rather than all objects of a certain type. For example, it is possible to grant a user permission to view only locations within a particular parent location, or to modify only VLANs with a numeric ID within a certain range.</p> <p>See the documentation on user permissions.</p>"},{"location":"user-guide/administration/guides/permissions.html#example-constraint-definitions","title":"Example Constraint Definitions","text":"Constraints Description <code>{\"status__name\": \"Active\"}</code> Status name is active <code>{\"status__name__in\": [\"Planned\", \"Reserved\"]}</code> Status name is active OR reserved <code>{\"status__name\": \"Active\", \"role__name\": \"testing\"}</code> Status name is active OR role name is testing <code>{\"name__startswith\": \"Foo\"}</code> Name starts with \"Foo\" (case-sensitive) <code>{\"name__iendswith\": \"bar\"}</code> Name ends with \"bar\" (case-insensitive) <code>{\"vid__gte\": 100, \"vid__lt\": 200}</code> VLAN ID is greater than or equal to 100 AND less than 200 <code>[{\"vid__lt\": 200}, {\"status__name\": \"Reserved\"}]</code> VLAN ID is less than 200 OR status is reserved"},{"location":"user-guide/administration/guides/permissions.html#permissions-enforcement","title":"Permissions Enforcement","text":""},{"location":"user-guide/administration/guides/permissions.html#viewing-objects","title":"Viewing Objects","text":"<p>Object-based permissions work by filtering the database query generated by a user's request to restrict the set of objects returned. When a request is received, Nautobot first determines whether the user is authenticated and has been granted to perform the requested action. For example, if the requested URL is <code>/dcim/devices/</code>, Nautobot will check for the <code>dcim.view_device</code> permission. If the user has not been assigned this permission (either directly or via a group assignment), Nautobot will return a 403 (forbidden) HTTP response.</p> <p>If the permission has been granted, Nautobot will compile any specified constraints for the model and action. For example, suppose two permissions have been assigned to the user granting view access to the device model, with the following constraints:</p> <pre><code>[\n{\"location__name__in\":  [\"NYC1\", \"NYC2\"]},\n{\"location__location_type__name__in\":  [\"City\"]},\n{\"status__name\":  \"Offline\", \"tenant__isnull\":  true}\n]\n</code></pre> <p>This grants the user access to view any device that is assigned to a location named NYC1 or NYC2 with location type <code>City</code>, or which has a status name of \"Offline\" and has no tenant assigned. These constraints are equivalent to the following ORM query:</p> <pre><code>Location.objects.filter(\n    Q(location__name__in=['NYC1', 'NYC2']),\n    Q(location__location_type__name__in=['City']),\n    Q(status__name='Active', tenant__isnull=True)\n)\n</code></pre>"},{"location":"user-guide/administration/guides/permissions.html#creating-and-modifying-objects","title":"Creating and Modifying Objects","text":"<p>The same sort of logic is in play when a user attempts to create or modify an object in Nautobot, with a twist. Once validation has completed, Nautobot starts an atomic database transaction to facilitate the change, and the object is created or saved normally. Next, still within the transaction, Nautobot issues a second query to retrieve the newly created/updated object, filtering the restricted queryset with the object's primary key. If this query fails to return the object, Nautobot knows that the new revision does not match the constraints imposed by the permission. The transaction is then rolled back, leaving the database in its original state prior to the change, and the user is informed of the violation.</p>"},{"location":"user-guide/administration/guides/permissions.html#assigning-permissions","title":"Assigning Permissions","text":"<p>Permissions are implemented by assigning them to specific users and/or to groups of users. Users can have a combination of permissions and groups assigned to their account. All of the permissions granted to the user's groups and directly to the user's account will be used when determining authorization to access an object or view.</p>"},{"location":"user-guide/administration/guides/permissions.html#assigning-permissions-to-individual-users","title":"Assigning Permissions to Individual Users","text":"<p>Permissions can be related directly to users from the Admin UI or the API:</p> - Admin UI API Staff superusers Yes Yes Non-staff superusers No Yes Staff users with <code>users.add_permission</code> or <code>users.change_permission</code> Yes Yes Non-staff users with <code>users.add_permission</code> or <code>users.change_permission</code> No Yes <p>Multiple permissions can be assigned to a user account.</p> <p>Info</p> <p>User permission relationships can be managed in the Admin UI by modifying the user or the permission.</p> <p>Warning</p> <p>Granting a user <code>users.change_permission</code> or <code>users.add_permission</code> gives the user the ability to modify their own permissions. This permission should be restricted to trusted accounts and should be considered the same as giving a user full access.</p>"},{"location":"user-guide/administration/guides/permissions.html#creating-groups","title":"Creating Groups","text":"<p>Groups of users can be created to provide role-based access control and simplify user permissions management. Permissions related to a group will apply to all users in the group. A user can belong to any number of groups. Groups can be created from the Admin UI or the API:</p> - Admin UI API Superusers Yes Yes Users with <code>auth.add_group</code> or <code>auth.change_group</code> No Yes"},{"location":"user-guide/administration/guides/permissions.html#adding-users-to-groups","title":"Adding Users to Groups","text":"<p>Users can be added to groups through the Admin UI by superusers or automatically assigned to externally authenticated users through the <code>EXTERNAL_AUTH_DEFAULT_GROUPS</code> and <code>EXTERNAL_AUTH_DEFAULT_PERMISSIONS</code> settings. Nautobot groups can optionally be mapped to LDAP groups when using LDAP authentication.</p>"},{"location":"user-guide/administration/guides/permissions.html#assigning-permissions-to-groups","title":"Assigning Permissions to Groups","text":"<p>Permissions can be related to groups by superusers or users with <code>users.add_permission</code> or <code>users.change_permission</code> permissions.</p> - Admin UI API Superusers Yes Yes Staff users with <code>users.add_permission</code> or <code>users.change_permission</code> Yes Yes Regular users with <code>users.add_permission</code> or <code>users.change_permission</code> No Yes <p>Multiple permissions can be assigned to a user group.</p> <p>Info</p> <p>Group permission relationships can be managed in the Admin UI by modifying the group (superusers only) or the permission.</p>"},{"location":"user-guide/administration/guides/prometheus-metrics.html","title":"Prometheus Metrics","text":"<p>Nautobot supports optionally exposing native Prometheus metrics from the application. Prometheus is a popular time series metric platform used for monitoring.</p>"},{"location":"user-guide/administration/guides/prometheus-metrics.html#configuration","title":"Configuration","text":"<p>Metrics are not exposed by default. Metric exposition can be toggled with the <code>METRICS_ENABLED</code> configuration setting which exposes metrics at the <code>/metrics</code> HTTP endpoint, e.g. <code>https://nautobot.local/metrics</code>.</p> <p>In addition to the <code>METRICS_ENABLED</code> setting, database and/or caching metrics can also be enabled by changing the database engine and/or caching backends from <code>django.db.backends</code> / <code>django_redis.cache</code> to <code>django_prometheus.db.backends</code> / <code>django_prometheus.cache.backends.redis</code>:</p> <pre><code>DATABASES = {\n\"default\": {\n# Other settings...\n\"ENGINE\": \"django_prometheus.db.backends.postgresql\",  # use \"django_prometheus.db.backends.mysql\" with MySQL\n}\n}\n# Other settings...\nCACHES = {\n\"default\": {\n# Other settings...\n\"BACKEND\": \"django_prometheus.cache.backends.redis.RedisCache\",\n}\n}\n</code></pre> <p>For more information see the django-prometheus docs.</p>"},{"location":"user-guide/administration/guides/prometheus-metrics.html#metric-types","title":"Metric Types","text":"<p>Nautobot makes use of the django-prometheus library to export a number of different types of metrics, including:</p> <ul> <li>Per model insert, update, and delete counters</li> <li>Per view request counters</li> <li>Per view request latency histograms</li> <li>Request body size histograms</li> <li>Response body size histograms</li> <li>Response code counters</li> <li>Database connection, execution, and error counters</li> <li>Cache hit, miss, and invalidation counters</li> <li>Django middleware latency histograms</li> <li>Other Django related metadata metrics</li> </ul> <p>For the exhaustive list of exposed metrics, visit the <code>/metrics</code> endpoint on your Nautobot instance.</p>"},{"location":"user-guide/administration/guides/prometheus-metrics.html#multi-processing-notes","title":"Multi Processing Notes","text":"<p>When deploying Nautobot in a multi-process manner (e.g. running multiple uWSGI workers) the Prometheus client library requires the use of a shared directory to collect metrics from all worker processes. To configure this, first create or designate a local directory to which the worker processes have read and write access, and then configure your WSGI service (e.g. uWSGI) to define this path as the <code>prometheus_multiproc_dir</code> environment variable.</p> <p>Warning</p> <p>If having accurate long-term metrics in a multi-process environment is crucial to your deployment, it's recommended you use the <code>uwsgi</code> library instead of <code>gunicorn</code>. The issue lies in the way <code>gunicorn</code> tracks worker processes (vs <code>uwsgi</code>) which helps manage the metrics files created by the above configurations. If you're using Nautobot with gunicorn in a containerized environment following the one-process-per-container methodology, then you will likely not need to change to <code>uwsgi</code>. More details can be found in  issue #3779.</p> <p>Note</p> <p>Metrics from the celery worker are not available from Nautobot at this time.  However, additional tools such as flower can be used to monitor the celery workers until these metrics are exposed through Nautobot.</p>"},{"location":"user-guide/administration/guides/replicating-nautobot.html","title":"Replicating Nautobot","text":""},{"location":"user-guide/administration/guides/replicating-nautobot.html#replicating-the-database","title":"Replicating the Database","text":"<p>Nautobot employs a PostgreSQL database, so general PostgreSQL best practices apply here. The database can be written to a file and restored using the <code>pg_dump</code> and <code>psql</code> utilities, respectively.</p> <p>Note</p> <p>The examples below assume that your database is named <code>nautobot</code>.</p>"},{"location":"user-guide/administration/guides/replicating-nautobot.html#export-the-database","title":"Export the Database","text":"<p>Use the <code>pg_dump</code> utility to export the entire database to a file:</p> <pre><code>pg_dump nautobot &gt; nautobot.sql\n</code></pre> <p>When replicating a production database for development purposes, you may find it convenient to exclude changelog data, which can easily account for the bulk of a database's size. To do this, exclude the <code>extras_objectchange</code> table data from the export. The table will still be included in the output file, but will not be populated with any data.</p> <pre><code>pg_dump --exclude-table-data=extras_objectchange nautobot &gt; nautobot.sql\n</code></pre>"},{"location":"user-guide/administration/guides/replicating-nautobot.html#load-an-exported-database","title":"Load an Exported Database","text":"<p>When restoring a database from a file, it's recommended to delete any existing database first to avoid potential conflicts.</p> <p>Warning</p> <p>The following will destroy and replace any existing instance of the database.</p> <pre><code>psql -c 'drop database nautobot'\npsql -c 'create database nautobot'\npsql nautobot &lt; nautobot.sql\n</code></pre> <p>Keep in mind that PostgreSQL user accounts and permissions are not included with the dump: You will need to create those manually if you want to fully replicate the original database (see the installation docs). When setting up a development instance of Nautobot, it's strongly recommended to use different credentials anyway.</p>"},{"location":"user-guide/administration/guides/replicating-nautobot.html#export-the-database-schema","title":"Export the Database Schema","text":"<p>If you want to export only the database schema, and not the data itself (e.g. for development reference), do the following:</p> <pre><code>pg_dump -s nautobot &gt; nautobot_schema.sql\n</code></pre>"},{"location":"user-guide/administration/guides/replicating-nautobot.html#replicating-uploaded-media","title":"Replicating Uploaded Media","text":"<p>By default, Nautobot stores uploaded files (such as image attachments) in its media directory. To fully replicate an instance of Nautobot, you'll need to copy both the database and the media files.</p> <p>Note</p> <p>These operations are not necessary if your installation is utilizing a remote storage backend.</p>"},{"location":"user-guide/administration/guides/replicating-nautobot.html#archive-the-media-directory","title":"Archive the Media Directory","text":"<p>Execute the following command (which may need to be changed if you're using non-default storage path settings):</p> <pre><code>tar -czf nautobot_media.tar.gz $NAUTOBOT_ROOT/media/\n</code></pre>"},{"location":"user-guide/administration/guides/replicating-nautobot.html#restore-the-media-directory","title":"Restore the Media Directory","text":"<p>To extract the saved archive into a new installation, run the following from the installation root:</p> <pre><code>tar -xf nautobot_media.tar.gz\n</code></pre>"},{"location":"user-guide/administration/guides/s3-django-storage.html","title":"AWS S3 using Django-Storage Backend","text":"<p>The backend storage engine is used for Nautobot to handle uploaded files (e.g. image attachments), as well as static files (e.g. css, js). Nautobot supports integration with the django-storages package, which provides backends for several popular file storage services. If not configured, local filesystem storage will be used; however this user-guide will demonstrate how to use AWS S3 buckets to store these files.</p>"},{"location":"user-guide/administration/guides/s3-django-storage.html#installation","title":"Installation","text":"<p>Nautobot can use <code>django-storages</code> to publish files to S3 -- see the installation docs for more information on installing this optional dependency.</p> <p>TLDR:</p> <pre><code>$ echo \"nautobot[remote_storage]\" &gt;&gt; $NAUTOBOT_ROOT/local_requirements.txt\n$ pip3 install \"nautobot[remote_storage]\"\n</code></pre>"},{"location":"user-guide/administration/guides/s3-django-storage.html#bucket-creation-terraform","title":"Bucket Creation Terraform","text":"<p>The AWS S3 bucket will be hosting Nautobot static files and needs some specific configuration to allow anonymous HTTP access.  The following is an example of Terraform configuration to create the S3 bucket appropriately, the same values can be configured manually:</p> <pre><code>resource \"aws_s3_bucket\" \"nautobot_static_files\" {\nbucket        = \"my-bucket-name\"\nacl           = \"public-read\"\ncors_rule {\nallowed_headers = [\"*\"]\nallowed_methods = [\"GET\"]\nallowed_origins = [\"http*\"]\n}\ncors_rule {\nallowed_methods = [\"GET\", \"HEAD\"]\nallowed_origins = [\"*\"]\n}\ntags = {\nName = \"Nautobot Static Files\"\n}\n}\n</code></pre>"},{"location":"user-guide/administration/guides/s3-django-storage.html#configuration","title":"Configuration","text":"<p>The <code>django-storages</code> library is quite powerful, please refer to their documentation for a more detailed explanation of the individual settings or for more information.</p> <p>In <code>nautobot_config.py</code> define the following configuration:</p> <pre><code>STORAGE_BACKEND = \"storages.backends.s3boto3.S3Boto3Storage\"\nSTORAGE_CONFIG = {\n\"AWS_ACCESS_KEY_ID\": \"...\",\n\"AWS_SECRET_ACCESS_KEY\": \"...\",\n\"AWS_STORAGE_BUCKET_NAME\": \"my-bucket-name\",\n\"AWS_S3_REGION_NAME\": \"us-west-1\",\n\"AWS_DEFAULT_ACL\": \"public-read\",\n\"AWS_QUERYSTRING_AUTH\": False,\n\"AWS_LOCATION\": \"subfolder/name/static/\"\n}\nSTATICFILES_STORAGE = STORAGE_BACKEND\n</code></pre> <p>If <code>AWS_ACCESS_KEY_ID</code> and <code>AWS_SECRET_ACCESS_KEY</code> are not set, <code>boto3</code> internally looks up IAM credentials.  Using an IAM Role for EC2 is highly recommended.</p> <p>The <code>STORAGE_CONFIG</code> has some valuable pieces of information.</p> <ul> <li>Access Key and Secret Key are for authentication and authorization of the S3 bucket.</li> <li>Storage bucket name is the S3 bucket name, within the bucket provided the aws location will be used to build the parent directory structure.<ul> <li>In the example above the static files will be stored in <code>f\"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/{AWS_LOCATION}\"</code></li> </ul> </li> <li>Finally, region is where the s3 bucket resides.</li> </ul> <p>Info</p> <p>The remaining options are not required, but django-storages documentation should be reviewed to understand the security requirements.</p> <p>By using the the settings listed above, the static files will be stored in the S3 bucket instead of on the Nautobot server's filesystem. Once the <code>nautobot-server collectstatic</code> is executed you will see the files.</p> <p>Here's a snippet from the S3 bucket in use. </p> <p>Now when an image is added to one of the core supported models like the <code>dcim.device-type</code>, a new directory will be created in the S3 bucket based on the <code>upload_to</code> attribute from the originating model. As an example we now see a new directory called <code>devicetype-images/</code>.</p> <p></p> <p>The directory is defined in the <code>Devicetype</code> model on the front/rear images attributes. Source code snippet below:</p> <pre><code>front_image = models.ImageField(upload_to=\"devicetype-images\", blank=True)\nrear_image = models.ImageField(upload_to=\"devicetype-images\", blank=True)\n</code></pre> <p>At a high level this takes care of everything you'd need for standard Nautobot deployment, but what if you're creating a plugin and you have a requirement for the data to be stored in an additional directory?</p> <p>This is where using the generic <code>FileField</code> provided by Django comes into play. For example, lets say a new plugin is being developed and storing the software images is one of the key requirements. The model might look something like the snippet below:</p> <pre><code>class SoftwareFileAttachment(BaseModel):\n\"\"\"An uploaded software bin file for OS upgrades.\"\"\"\nfile = models.FileField(upload_to=\"uploads/\")\nname = models.CharField(max_length=50, blank=True)\ncreated = models.DateTimeField(auto_now_add=True)\ndef __str__(self):\n\"\"\"String value for HTML rendering.\"\"\"\nreturn f\"{self.file}\"\n</code></pre> <p>The <code>models.FileField</code> alongside the <code>upload_to</code> argument can be used to store user uploaded files into the already established S3 bucket. With the configuration settings provided earlier in this article and the <code>upload_to=uploads/</code> attribute the software attachments will be stored at <code>f\"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/{AWS_LOCATION}/uploads/\"</code>.</p> <p>The nice thing about using <code>django-storages</code> is the ease of use and the ability to easily extend storage backends. One use case for extending storage backends that has been used is to store certain plugin data attachments in its own S3 bucket with different permissions. If we take this concept to the example of <code>SoftwareFileAttachment</code> we can put the software images in their own S3 bucket by creating a custom storage backend that we can pass to our <code>models.FileField</code> model field.</p> <p>For this example I created a simple python file called <code>customer_storage.py</code> in the root of my plugin.</p> <pre><code>\"\"\"Example of a custom extension to support flexible s3 storage.\"\"\"\nfrom storages.backends.s3boto3 import S3Boto3Storage\nclass MediaStorage(S3Boto3Storage):\nbucket_name = 'nautobot-sw-media'\nlocation = \"software_images\" # store files under directory `software_images/` in bucket `nautobot-sw-media`\n</code></pre> <p>In the model you just need to pass in the <code>storage=</code> argument.</p> <pre><code>from custom_config_plugin.custom_storage import MediaStorage\nclass SoftwareFileAttachment(BaseModel):\n\"\"\"An uploaded software bin file for OS upgrades.\"\"\"\nfile = models.FileField(upload_to=\"uploads/\", storage=MediaStorage)\nname = models.CharField(max_length=50, blank=True)\ncreated = models.DateTimeField(auto_now_add=True)\ndef __str__(self):\n\"\"\"String value for HTML rendering.\"\"\"\nreturn f\"{self.file}\"\n</code></pre> <p>When a user uploads a new software image to this model it will be stored in <code>&lt;AWS S3 URL&gt;/software_images/uploads/&lt;file&gt;.bin</code>.</p> <p>This is valuable because you may have certain models in a plugin or other enhancements that need to have more specific granularity in the S3 bucket they belong in, also it may be crucial to have different S3 IAM requirements for certain files over the general static files the Nautobot application needs to run appropriately.</p>"},{"location":"user-guide/administration/guides/s3-django-storage.html#summary","title":"Summary","text":"<p>Django-Storages is the backend library used to extend Nautobots backend storage flexibility. The same concepts above can be used for Azure Storage, Dropbox, GCP etc. As all of these have native support within the <code>django-storages</code> library.</p>"},{"location":"user-guide/administration/installation/index.html","title":"Installation","text":"<p>This set of documents will help you get Nautobot up and running.  As an alternative, you can also run Nautobot in Docker.</p>"},{"location":"user-guide/administration/installation/index.html#about-dependencies","title":"About Dependencies","text":"<p>This section describes the system dependencies required for Nautobot. They can be all installed on a single system, or distributed across your environment. That will be up to you. Our install instructions assume a single system install, and that is good for most use cases. More advanced configurations are also possible, but are not covered here.</p> <p>The installation instructions below will guide you through a fresh installation.</p>"},{"location":"user-guide/administration/installation/index.html#mandatory-dependencies","title":"Mandatory dependencies","text":"<p>The following minimum versions are required for Nautobot to operate:</p> Dependency Role Minimum Version Python Application 3.8 PostgreSQL Database 9.6 MySQL Database 8.0 Redis Cache, Queue 4.0 Git Additional 2.0 Node.js Frontend 18.0 <p>Note</p> <p>Either PostgreSQL or MySQL must be selected, but not both.</p> <p>Added in version 1.1.0</p> <p>MySQL support was added.</p> <p>Added in version 1.3.0</p> <p>Python 3.10 support was added.</p> <p>Removed in version 1.3.0</p> <p>Python 3.6 support was removed.</p> <p>Changed in version 1.6.0</p> <p>Python 3.11 support was added and Python 3.7 support was removed.</p> <p>Nautobot will not work without these dependencies.</p>"},{"location":"user-guide/administration/installation/index.html#python","title":"Python","text":"<p>Nautobot is written in the Python programming language. The official Python package installer is called Pip, and you will see the <code>pip</code> command referenced often to install or update Python packages.</p> <p>All Nautobot plugins and library dependencies will be written using Python.</p>"},{"location":"user-guide/administration/installation/index.html#database","title":"Database","text":"<p>Nautobot uses a relational database to store its data. Both MySQL and PostgreSQL are officially supported.</p>"},{"location":"user-guide/administration/installation/index.html#mysql","title":"MySQL","text":"<p>MySQL is an open-source relational database management system that\u2019s relatively easy to set up and manage, fast, reliable, and well-understood.</p>"},{"location":"user-guide/administration/installation/index.html#postgresql","title":"PostgreSQL","text":"<p>PostgreSQL is a powerful, feature-rich open source relational database server that can handle complex queries and massive databases.</p>"},{"location":"user-guide/administration/installation/index.html#redis","title":"Redis","text":"<p>Redis is an open source, in-memory data store which Nautobot employs for caching and queuing.</p>"},{"location":"user-guide/administration/installation/index.html#nodejs","title":"Node.js","text":"<p>Node.js is a JavaScript runtime environment that is used to build the Nautobot frontend.</p>"},{"location":"user-guide/administration/installation/index.html#optional-dependencies","title":"Optional dependencies","text":"<p>Nautobot will still operate without these optional dependencies, but would likely not be ready for use in a production environment without them. The installation and configuration of these dependencies are covered in the detailed guides which follow.</p> <p>For production deployment we recommend the following:</p> <ul> <li>uWSGI WSGI server</li> <li>NGINX HTTP server</li> <li>External authentication service for SSO such as SAML, OAuth2, or LDAP, or an authenticating proxy</li> </ul> <p>For additional features:</p> <ul> <li>NAPALM support for retrieving operational data from network devices</li> <li>Prometheus metrics for exporting application performance and telemetry data</li> </ul>"},{"location":"user-guide/administration/installation/index.html#installing-nautobot-dependencies","title":"Installing Nautobot Dependencies","text":"<p>Nautobot was designed to be a cross-platform application that can run on nearly any system that is able to run the required dependencies. Only the operating system platforms listed below are officially supported at this time.</p> <ul> <li>Red Hat flavors of Linux including CentOS 8.2+ and Red Hat Enterprise Linux (RHEL) 8.2+ are supported.</li> <li>Debian/Ubuntu flavors of Linux including Ubuntu 20.04+ and Debian 11+ are supported.</li> </ul> <p>Info</p> <p>Nautobot should work on any POSIX-compliant system including practically any flavor of Linux, BSD, or even macOS, but those are not officially supported at this time.</p> <p>To begin with installing Nautobot dependencies on a supported platform, see the next page of the documentation.</p>"},{"location":"user-guide/administration/installation/index.html#running-nautobot-in-docker","title":"Running Nautobot in Docker","text":"<p>Nautobot docker images are available for use in a containerized deployment for an easier installation, see the Docker overview for more information.</p>"},{"location":"user-guide/administration/installation/index.html#upgrading","title":"Upgrading","text":"<p>If you are upgrading from an existing installation, please consult the upgrading guide.</p>"},{"location":"user-guide/administration/installation/app-install.html","title":"Installing Apps","text":"<p>The instructions below detail the process for installing and enabling a Nautobot app.</p> <p>You must be absolutely sure to install the app within Nautobot's virtual environment.</p> <p>Note</p> <p>If you installed Nautobot in a production environment, you'll want to sudo to the nautobot user first using <code>sudo -iu nautobot</code>.</p>"},{"location":"user-guide/administration/installation/app-install.html#install-the-package","title":"Install the Package","text":"<p>Download and install the app package per its installation instructions. Apps published via PyPI are typically installed using <code>pip3</code>.</p> <pre><code>pip3 install &lt;package&gt;\n</code></pre> <p>Alternatively, if you're or installing a app from from a local source copy, you may wish to install the app manually by running <code>python setup.py install</code>.</p> <p>If you are developing a app and want to install it only temporarily, run <code>python setup.py develop</code> instead.</p>"},{"location":"user-guide/administration/installation/app-install.html#enable-the-app","title":"Enable the App","text":"<p>In your <code>nautobot_config.py</code>, add the app's name to the <code>PLUGINS</code> list:</p> <pre><code>PLUGINS = [\n'app_name',\n]\n</code></pre>"},{"location":"user-guide/administration/installation/app-install.html#configure-the-app","title":"Configure the App","text":"<p>If the app requires any configuration, define it in <code>nautobot_config.py</code> under the <code>PLUGINS_CONFIG</code> parameter. The available configuration parameters should be detailed in the app's README file.</p> <pre><code>PLUGINS_CONFIG = {\n'app_name': {\n'foo': 'bar',\n'buzz': 'bazz'\n}\n}\n</code></pre>"},{"location":"user-guide/administration/installation/app-install.html#run-nautobot-server-post_upgrade","title":"Run <code>nautobot-server post_upgrade</code>","text":"<p>After installing or upgrading a app, you should always run <code>nautobot-server post_upgrade</code>. This command will ensure that any necessary post-installation tasks are run, for example:</p> <ul> <li>Migrating the database to include any new or updated data models from the app</li> <li>Collecting any static files provided by the app</li> <li>Etc.</li> </ul> <pre><code># nautobot-server post_upgrade\nPerforming database migrations...\nOperations to perform:\n  Apply all migrations: admin, auth, circuits, contenttypes, db, dcim, extras, ipam,\nnautobot_app_example, sessions, social_django, taggit, tenancy, users, virtualization\nRunning migrations:\n  No migrations to apply.\n\nGenerating cable paths...\nFound no missing circuit termination paths; skipping\nFound no missing console port paths; skipping\nFound no missing console server port paths; skipping\nFound no missing interface paths; skipping\nFound no missing power feed paths; skipping\nFound no missing power outlet paths; skipping\nFound no missing power port paths; skipping\nFinished.\n\nCollecting static files...\n\n0 static files copied to '/opt/nautobot/static', 972 unmodified.\n\nRemoving stale content types...\n\nRemoving expired sessions...\n\nInvalidating cache...\n</code></pre>"},{"location":"user-guide/administration/installation/app-install.html#restart-the-wsgi-service","title":"Restart the WSGI Service","text":"<p>Restart the WSGI service to load the new app:</p> <pre><code># sudo systemctl restart nautobot nautobot-worker\n</code></pre>"},{"location":"user-guide/administration/installation/app-install.html#verify-that-the-app-is-installed","title":"Verify that the App is Installed","text":"<p>In the Nautobot UI, navigate to Apps -&gt; Installed Apps. The newly installed app should appear in the displayed table if everything is configured correctly. You can also click on the app's name in this table to view more detailed information about this app.</p>"},{"location":"user-guide/administration/installation/docker.html","title":"Nautobot Docker Images","text":"<p>Nautobot is packaged as a Docker image for use in a production environment; developer images are also provided for those working on App development and testing. The Docker image and deployment strategies are being actively developed, check back here or join the #nautobot channel on Network to Code's Slack community for the most up to date information.</p>"},{"location":"user-guide/administration/installation/docker.html#python-versions","title":"Python Versions","text":"<p>Docker images are published for multiple supported Python versions. The default image, recommended for most users, is based on the <code>python:3.11-slim</code> image.</p> <p>Changed in version 1.6.1</p> <p>The Python version for the image tags that do not explicitly state a Python version changed to 3.11 for Nautobot 1.6.1. From now on, these tagged images will always contain the latest supported Python version (e.g., when Python 3.12 support is added, these tags will change to contain Python 3.12). This is a change from Nautobot 1.6.0 and earlier, where tags that did not state a Python version would contain the earliest supported Python version.</p> <p>Currently images are pushed for the following python versions:</p> <ul> <li>3.8</li> <li>3.9</li> <li>3.10</li> <li>3.11</li> </ul> <p>Added in version 1.6.0</p> <p>Python 3.11 was added to the set of published images.</p> <p>Removed in version 1.6.0</p> <p>Python 3.7 was removed from the set of published images as Python 3.7 is now end-of-life.</p>"},{"location":"user-guide/administration/installation/docker.html#platforms","title":"Platforms","text":"<p>Nautobot docker images are currently provided for both <code>linux/amd64</code> and <code>linux/arm64</code> architectures. Please note ARM64 support is untested by our automated tests and should be considered in an alpha state.</p>"},{"location":"user-guide/administration/installation/docker.html#tags","title":"Tags","text":""},{"location":"user-guide/administration/installation/docker.html#production-tags","title":"Production Tags","text":"<p>A set of production-ready Docker images are built for each Nautobot release and published to both Docker Hub and the GitHub Container Registry.</p> <p>To get a specific tagged image from Docker Hub or the GitHub Container Registry run:</p> <pre><code>docker image pull networktocode/nautobot:${TAG}\n</code></pre> <p>or</p> <pre><code>docker pull ghcr.io/nautobot/nautobot:${TAG}\n</code></pre> <p>The following tags are available on both Docker Hub and the GitHub Container Registry:</p> Tag Nautobot Version Python Version Example <code>${NAUTOBOT_VER}</code> As specified 3.11 <code>2.0.0</code> <code>${NAUTOBOT_VER}-py${PYTHON_VER}</code> As specified As specified <code>2.0.0-py3.8</code> <code>${NAUTOBOT_MAJOR_VER}.${NAUTOBOT_MINOR_VER}</code> As specified 3.11 <code>2.0</code> <code>${NAUTOBOT_MAJOR_VER}.${NAUTOBOT_MINOR_VER}-py${PYTHON_VER}</code> As specified As specified <code>2.0-py3.8</code> <code>stable</code> Latest stable release 3.11 <code>stable</code> <code>stable-py${PYTHON_VER}</code> Latest stable release As specified <code>stable-py3.8</code>"},{"location":"user-guide/administration/installation/docker.html#developer-tags","title":"Developer Tags","text":"<p>Additionally, GitHub Actions are used to automatically build \"developer\" images corresponding to each commit to the <code>ltm-1.6</code>, <code>develop</code>, and <code>next</code> branches. These images are named <code>networktocode/nautobot-dev:${TAG}</code> and <code>ghcr.io/nautobot/nautobot-dev:${TAG}</code>, and provide the development dependencies needed to build Nautobot; they can be used as a base for development to develop your own Nautobot apps but should NOT be used in production.</p> <p>In addition to all tags described in the previous section, the following additional tags are available from the GitHub Container Registry, only for the <code>ghcr.io/nautobot/nautobot-dev</code> images:</p> Tag Nautobot Branch Python Version <code>latest</code> <code>develop</code>, the latest commit 3.11 <code>latest-py${PYTHON_VER}</code> <code>develop</code>, the latest commit As specified <code>develop</code> <code>develop</code>, the latest commit 3.11 <code>develop-py${PYTHON_VER}</code> <code>develop</code>, the latest commit As specified <code>ltm-1.6</code> <code>ltm-1.6</code>, the latest commit 3.11 <code>ltm-1.6-py${PYTHON_VER}</code> <code>ltm-1.6</code>, the latest commit As specified <code>next</code> <code>next</code>, the latest commit 3.11 <code>next-py${PYTHON_VER}</code> <code>next</code>, the latest commit As specified"},{"location":"user-guide/administration/installation/docker.html#getting-started","title":"Getting Started","text":"<p>Nautobot requires a MySQL or PostgreSQL database and Redis instance before it will start. Because of this the quickest and easiest way to get Nautobot running is with Docker Compose, which will install and configure PostgreSQL and Redis containers for you automatically.</p>"},{"location":"user-guide/administration/installation/docker.html#configuration","title":"Configuration","text":"<p>Most configuration parameters are available via environment variables which can be passed to the container. If you desire you can inject your own <code>nautobot_config.py</code> by overriding <code>/opt/nautobot/nautobot_config.py</code> using docker volumes by adding <code>-v /local/path/to/custom/nautobot_config.py:/opt/nautobot/nautobot_config.py</code> to your docker run command, for example:</p> <pre><code>docker run \\\n    -v /local/path/to/custom/nautobot_config.py:/opt/nautobot/nautobot_config.py \\\n    --name nautobot networktocode/nautobot\n</code></pre> <p>Or if you are using docker compose:</p> <pre><code>services:\nnautobot:\nimage: \"networktocode/nautobot\"\nvolumes:\n- /local/path/to/custom/nautobot_config.py:/opt/nautobot/nautobot_config.py:ro\n</code></pre>"},{"location":"user-guide/administration/installation/docker.html#docker-only-configuration","title":"Docker only configuration","text":"<p>The entry point for the Docker container has some additional features that can be configured via additional environment variables. The following are all optional variables:</p>"},{"location":"user-guide/administration/installation/docker.html#nautobot_create_superuser","title":"<code>NAUTOBOT_CREATE_SUPERUSER</code>","text":"<p>Default: unset</p> <p>Enables creation of a super user specified by <code>NAUTOBOT_SUPERUSER_NAME</code>, <code>NAUTOBOT_SUPERUSER_EMAIL</code>, <code>NAUTOBOT_SUPERUSER_PASSWORD</code>, and <code>NAUTOBOT_SUPERUSER_API_TOKEN</code>.</p>"},{"location":"user-guide/administration/installation/docker.html#nautobot_docker_skip_init","title":"<code>NAUTOBOT_DOCKER_SKIP_INIT</code>","text":"<p>Default: unset</p> <p>When starting, the container attempts to connect to the database and run database migrations and upgrade steps necessary when upgrading versions. In normal operation this is harmless to run on every startup and validates the database is operating correctly. However, in certain circumstances such as database maintenance when the database is in a read-only mode it may make sense to start Nautobot but skip these steps. Setting this variable to <code>true</code> will start Nautobot without running these initial steps.</p> <p>Note</p> <p>Setting this value to anything other than \"false\" (case-insensitive) will prevent migrations from occurring.</p>"},{"location":"user-guide/administration/installation/docker.html#nautobot_superuser_api_token","title":"<code>NAUTOBOT_SUPERUSER_API_TOKEN</code>","text":"<p>Default: unset</p> <p>If <code>NAUTOBOT_CREATE_SUPERUSER</code> is true, <code>NAUTOBOT_SUPERUSER_API_TOKEN</code> specifies the API token of the super user to be created; alternatively the <code>/run/secrets/superuser_api_token</code> file contents are read for the token. Either the variable or the file is required if <code>NAUTOBOT_CREATE_SUPERUSER</code> is true.</p>"},{"location":"user-guide/administration/installation/docker.html#nautobot_superuser_email","title":"<code>NAUTOBOT_SUPERUSER_EMAIL</code>","text":"<p>Default: <code>admin@example.com</code></p> <p>If <code>NAUTOBOT_CREATE_SUPERUSER</code> is true, <code>NAUTOBOT_SUPERUSER_EMAIL</code> specifies the email address of the super user to be created.</p>"},{"location":"user-guide/administration/installation/docker.html#nautobot_superuser_name","title":"<code>NAUTOBOT_SUPERUSER_NAME</code>","text":"<p>Default: <code>admin</code></p> <p>If <code>NAUTOBOT_CREATE_SUPERUSER</code> is true, <code>NAUTOBOT_SUPERUSER_NAME</code> specifies the username of the super user to be created.</p>"},{"location":"user-guide/administration/installation/docker.html#nautobot_superuser_password","title":"<code>NAUTOBOT_SUPERUSER_PASSWORD</code>","text":"<p>Default: unset</p> <p>If <code>NAUTOBOT_CREATE_SUPERUSER</code> is true, <code>NAUTOBOT_SUPERUSER_PASSWORD</code> specifies the password of the super user to be created; alternatively the <code>/run/secrets/superuser_password</code> file contents are read for the password. Either the variable or the file is required if <code>NAUTOBOT_CREATE_SUPERUSER</code> is true.</p>"},{"location":"user-guide/administration/installation/docker.html#uwsgi","title":"uWSGI","text":"<p>The docker container uses uWSGI to serve Nautobot. A default configuration is provided, and can be overridden by injecting a new <code>uwsgi.ini</code> file at <code>/opt/nautobot/uwsgi.ini</code>. There are a couple of environment variables provided to override some uWSGI defaults:</p>"},{"location":"user-guide/administration/installation/docker.html#nautobot_uwsgi_buffer_size","title":"<code>NAUTOBOT_UWSGI_BUFFER_SIZE</code>","text":"<p>Added in version 1.3.9</p> <p>Default: <code>4096</code></p> <p>Max: <code>65535</code></p> <p>The max size of non-body request payload, roughly the size of request headers for uWSGI. Request headers that might contain lengthy query parameters, for example GraphQL or Relationship filtered lookups, might go well over the default limit. Increasing this limit will have an impact on running memory usage. Please see the uWSGI documentation for more information.</p> <p>This can also be overridden by appending <code>-b DESIRED_BUFFER_SIZE</code>, ex: <code>-b 8192</code>, to the entry command in all Nautobot containers running uWSGI if you are on a release before <code>1.3.9</code>.</p>"},{"location":"user-guide/administration/installation/docker.html#nautobot_uwsgi_listen","title":"<code>NAUTOBOT_UWSGI_LISTEN</code>","text":"<p>Default: <code>128</code></p> <p>The socket listen queue size of uWSGI. In production environments it is recommended to increase this value to 1024 or higher, however depending on your platform, this may require additional kernel parameter settings, please see the uWSGI documentation for more information.</p> <p>Please see the official uWSGI documentation on <code>listen</code> for more information.</p>"},{"location":"user-guide/administration/installation/docker.html#nautobot_uwsgi_processes","title":"<code>NAUTOBOT_UWSGI_PROCESSES</code>","text":"<p>Default: <code>3</code></p> <p>The number of worker processes uWSGI will spawn.</p> <p>Please see the official uWSGI documentation on <code>processes</code> for more information.</p>"},{"location":"user-guide/administration/installation/docker.html#ssl","title":"SSL","text":"<p>Self signed SSL certificates are included by default with the container. For a production deployment you should utilize your own signed certificates, these can be injected into the container at runtime using docker volumes. The public certificate should be placed at <code>/opt/nautobot/nautobot.crt</code> and the private key should be at <code>/opt/nautobot/nautobot.key</code>. Using a <code>docker run</code> these can be injected using the <code>-v</code> parameter:</p> <pre><code>docker run \\\n    -v /local/path/to/custom/nautobot.crt:/opt/nautobot/nautobot.crt \\\n    -v /local/path/to/custom/nautobot.key:/opt/nautobot/nautobot.key \\\n    --name nautobot networktocode/nautobot\n</code></pre> <p>Or if you are using <code>docker-compose</code>:</p> <pre><code>services:\nnautobot:\nimage: \"networktocode/nautobot\"\nvolumes:\n- /local/path/to/custom/nautobot.crt:/opt/nautobot/nautobot.crt:ro\n- /local/path/to/custom/nautobot.key:/opt/nautobot/nautobot.key:ro\n</code></pre>"},{"location":"user-guide/administration/installation/docker.html#nautobot-plugins","title":"Nautobot Plugins","text":"<p>At this time adding Nautobot plugins to the existing Docker image is not supported, however, you can use the Nautobot image as the base within your <code>Dockerfile</code> to install your own plugins, here is an example dockerfile:</p> <pre><code>FROM networktocode/nautobot\nRUN pip install nautobot-chatops\n\nCOPY nautobot_config.py /opt/nautobot/nautobot_config.py\n</code></pre>"},{"location":"user-guide/administration/installation/docker.html#building-the-image","title":"Building the Image","text":"<p>If you have a development environment you can use <code>invoke</code> to build the Docker image. By default <code>invoke build</code> will build the <code>dev</code> image:</p> <pre><code>invoke build\n</code></pre> <p>After some output and a prompt is returned:</p> <pre><code>docker images\n</code></pre> <p>Example output:</p> <pre><code>REPOSITORY                                       TAG                              IMAGE ID       CREATED          SIZE\nlocal/nautobot-dev                               local-py3.8                      0d93eec7dfea   5 minutes ago    1.31GB\n</code></pre> <p>If you need to build or test the <code>final</code> image, you must set your <code>invoke.yml</code> to use <code>docker-compose.final.yml</code> in place of <code>docker-compose.dev.yml</code>:</p> <pre><code>---\nnautobot:\ncompose_files:\n- \"docker-compose.yml\"\n- \"docker-compose.postgres.yml\"\n- \"docker-compose.final.yml\"\n</code></pre> <p>Then you can re-run the <code>invoke build</code> command:</p> <pre><code>invoke build\n</code></pre> <p>Example output:</p> <pre><code>...\n</code></pre> <pre><code>docker images\n</code></pre> <p>Example output:</p> <pre><code>REPOSITORY                                       TAG                              IMAGE ID       CREATED          SIZE\nlocal/nautobot-final                             local-py3.8                      e03e752fcc6b   27 minutes ago   629MB\n</code></pre> <p>Similarly, you can use <code>docker-compose.final-dev.yml</code> if you wish to build and test the <code>final-dev</code> image.</p>"},{"location":"user-guide/administration/installation/docker.html#docker-compose","title":"Docker Compose","text":"<p>An example library for using Docker Compose to build out all of the components for Nautobot can be found within the Nautobot community. Please see https://github.com/nautobot/nautobot-docker-compose/ for examples on the base application, LDAP integration, and using plugins.</p>"},{"location":"user-guide/administration/installation/external-authentication.html","title":"External Authentication","text":"<p>This guide explains how to implement authentication using an external server. User authentication will fall back to built-in Django users in the event of a failure.</p>"},{"location":"user-guide/administration/installation/external-authentication.html#supported-external-authentication-backends","title":"Supported External Authentication Backends","text":"<ul> <li>LDAP Authentication</li> <li>Remote User Authentication</li> <li>SSO Authentication</li> </ul>"},{"location":"user-guide/administration/installation/http-server.html","title":"Configuring an HTTP Server","text":"<p>This documentation provides example configurations for NGINX though any HTTP server which supports WSGI should be compatible.</p>"},{"location":"user-guide/administration/installation/http-server.html#obtain-an-ssl-certificate","title":"Obtain an SSL Certificate","text":"<p>To enable HTTPS access to Nautobot, you'll need a valid SSL certificate. You can purchase one from a trusted commercial provider, obtain one for free from Let's Encrypt, or generate your own (although self-signed certificates are generally untrusted). Both the public certificate and private key files need to be installed on your Nautobot server in a secure location that is readable only by the <code>root</code> user.</p> <p>Warning</p> <p>The command below can be used to generate a self-signed certificate for testing purposes, however it is strongly recommended to use a certificate from a trusted authority in production.</p> <p>Two files will be created: the public certificate (<code>nautobot.crt</code>) and the private key (<code>nautobot.key</code>). The certificate is published to the world, whereas the private key must be kept secret at all times.</p> Ubuntu/DebianCentOS/RHEL8 <pre><code>sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n  -keyout /etc/ssl/private/nautobot.key \\\n  -out /etc/ssl/certs/nautobot.crt\n</code></pre> <pre><code>sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n  -keyout /etc/pki/tls/private/nautobot.key \\\n  -out /etc/pki/tls/certs/nautobot.crt\n</code></pre>"},{"location":"user-guide/administration/installation/http-server.html#http-server-installation","title":"HTTP Server Installation","text":"<p>Any HTTP server of your choosing is supported. For your convenience, setup instructions for NGINX are provided here.</p> <p>Warning</p> <p>The following steps must be performed with root permissions.</p>"},{"location":"user-guide/administration/installation/http-server.html#nginx","title":"NGINX","text":"<p>NGINX is a free, open source, high-performance HTTP server and reverse proxy and is by far the most popular choice.</p>"},{"location":"user-guide/administration/installation/http-server.html#install-nginx","title":"Install NGINX","text":"<p>Begin by installing NGINX:</p> Ubuntu/DebianCentOS/RHEL8 <pre><code>sudo apt install -y nginx\n</code></pre> <pre><code>sudo dnf install -y nginx\n</code></pre>"},{"location":"user-guide/administration/installation/http-server.html#configure-nginx","title":"Configure NGINX","text":"<p>Once NGINX is installed, copy and paste the following NGINX configuration into <code>/etc/nginx/sites-available/nautobot.conf</code> for Ubuntu or <code>/etc/nginx/conf.d/nautobot.conf</code> for CentOS/RHEL:</p> <p>Note</p> <p>If the file location of SSL certificates had to be changed in the Obtain an SSL Certificate step above, then the location will need to be changed in the NGINX configuration below.</p> Ubuntu/DebianCentOS/RHEL8 <pre><code>server {\n    listen 443 ssl http2 default_server;\n    listen [::]:443 ssl http2 default_server;\n\n    server_name _;\n\n    ssl_certificate /etc/ssl/certs/nautobot.crt;\n    ssl_certificate_key /etc/ssl/private/nautobot.key;\n\n    client_max_body_size 25m;\n\n    location /static/ {\n        alias /opt/nautobot/static/;\n    }\n\n    # For subdirectory hosting, you'll want to toggle this (e.g. `/nautobot/`).\n    # Don't forget to set `FORCE_SCRIPT_NAME` in your `nautobot_config.py` to match.\n    # location /nautobot/ {\n    location / {\n        include uwsgi_params;\n        uwsgi_pass  127.0.0.1:8001;\n        uwsgi_param Host $host;\n        uwsgi_param X-Real-IP $remote_addr;\n        uwsgi_param X-Forwarded-For $proxy_add_x_forwarded_for;\n        uwsgi_param X-Forwarded-Proto $http_x_forwarded_proto;\n\n        # If you want subdirectory hosting, uncomment this. The path must match\n        # the path of this location block (e.g. `/nautobot`). For NGINX the path\n        # MUST NOT end with a trailing \"/\".\n        # uwsgi_param SCRIPT_NAME /nautobot;\n    }\n\n}\n\nserver {\n    # Redirect HTTP traffic to HTTPS\n    listen 80 default_server;\n    listen [::]:80 default_server;\n    server_name _;\n    return 301 https://$host$request_uri;\n}\n</code></pre> <pre><code>server {\n    listen 443 ssl http2 default_server;\n    listen [::]:443 ssl http2 default_server;\n\n    server_name _;\n\n    ssl_certificate /etc/pki/tls/certs/nautobot.crt;\n    ssl_certificate_key /etc/pki/tls/private/nautobot.key;\n\n    client_max_body_size 25m;\n\n    location /static/ {\n        alias /opt/nautobot/static/;\n    }\n\n    # For subdirectory hosting, you'll want to toggle this (e.g. `/nautobot/`).\n    # Don't forget to set `FORCE_SCRIPT_NAME` in your `nautobot_config.py` to match.\n    # location /nautobot/ {\n    location / {\n        include uwsgi_params;\n        uwsgi_pass  127.0.0.1:8001;\n        uwsgi_param Host $host;\n        uwsgi_param X-Real-IP $remote_addr;\n        uwsgi_param X-Forwarded-For $proxy_add_x_forwarded_for;\n        uwsgi_param X-Forwarded-Proto $http_x_forwarded_proto;\n\n        # If you want subdirectory hosting, uncomment this. The path must match\n        # the path of this location block (e.g. `/nautobot`). For NGINX the path\n        # MUST NOT end with a trailing \"/\".\n        # uwsgi_param SCRIPT_NAME /nautobot;\n    }\n\n}\n\nserver {\n    # Redirect HTTP traffic to HTTPS\n    listen 80 default_server;\n    listen [::]:80 default_server;\n    server_name _;\n    return 301 https://$host$request_uri;\n}\n</code></pre>"},{"location":"user-guide/administration/installation/http-server.html#enable-nautobot","title":"Enable Nautobot","text":"Ubuntu/DebianCentOS/RHEL8 <p>To enable the Nautobot site, you'll need to delete <code>/etc/nginx/sites-enabled/default</code> and create a symbolic link in the <code>sites-enabled</code> directory to the configuration file you just created:</p> <pre><code>sudo rm -f /etc/nginx/sites-enabled/default\nsudo ln -s /etc/nginx/sites-available/nautobot.conf /etc/nginx/sites-enabled/nautobot.conf\n</code></pre> <p>Run the following command to disable the default site that comes with the <code>nginx</code> package:</p> <pre><code>sudo sed -i 's@ default_server@@' /etc/nginx/nginx.conf\n</code></pre>"},{"location":"user-guide/administration/installation/http-server.html#restart-nginx","title":"Restart NGINX","text":"<p>Finally, restart the <code>nginx</code> service to use the new configuration.</p> <pre><code>sudo systemctl restart nginx\n</code></pre> <p>Info</p> <p>If the restart fails, and you changed the default key location, check to make sure the <code>nautobot.conf</code> file you pasted has the updated key location. For example, CentOS requires keys to be in <code>/etc/pki/tls/</code> instead of <code>/etc/ssl/</code>.</p>"},{"location":"user-guide/administration/installation/http-server.html#confirm-permissions-for-nautobot_root","title":"Confirm Permissions for NAUTOBOT_ROOT","text":"<p>Ensure that the <code>NAUTOBOT_ROOT</code> permissions are set to <code>755</code>. If permissions need to be changed, as the <code>nautobot</code> user run:</p> <pre><code>chmod 755 $NAUTOBOT_ROOT\n</code></pre>"},{"location":"user-guide/administration/installation/http-server.html#confirm-connectivity","title":"Confirm Connectivity","text":"<p>At this point, you should be able to connect to the HTTPS service at the server name or IP address you provided. If you used a self-signed certificate, you will likely need to explicitly allow connectivity in your browser.</p> <p>Info</p> <p>Please keep in mind that the configurations provided here are bare minimums required to get Nautobot up and running. You may want to make adjustments to better suit your production environment.</p> <p>Warning</p> <p>Certain components of Nautobot (such as the display of rack elevation diagrams) rely on the use of embedded objects. Ensure that your HTTP server configuration does not override the <code>X-Frame-Options</code> response header set by Nautobot.</p>"},{"location":"user-guide/administration/installation/http-server.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/administration/installation/http-server.html#unable-to-connect","title":"Unable to Connect","text":"<p>If you are unable to connect to the HTTP server, check that:</p> <ul> <li>NGINX is running and configured to listen on the correct port.</li> <li>Access is not being blocked by a firewall somewhere along the path. (Try connecting locally from the server itself.)</li> </ul>"},{"location":"user-guide/administration/installation/http-server.html#static-media-failure","title":"Static Media Failure","text":"<p>If you get a Static Media Failure; The following static media file failed to load: css/base.css, verify the permissions on the <code>$NAUTOBOT_ROOT</code> directory are <code>755</code>.</p> <p>Example of correct permissions (at the <code>[root@localhost ~]#</code> prompt)</p> <pre><code>ls -l /opt/\n</code></pre> <p>Example output:</p> <pre><code>total 4\ndrwxr-xr-x. 11 nautobot nautobot 4096 Apr  5 11:24 nautobot\n[root@localhost ~]#\n</code></pre> <p>If the permissions are not correct, modify them accordingly.</p> <p>Example of modifying the permissions:</p> <pre><code>ls -l /opt/\n</code></pre> <p>Example output:</p> <pre><code>total 4\ndrwx------. 11 nautobot nautobot 4096 Apr  5 10:00 nautobot\n</code></pre> <p>At the prompt <code>[nautobot@localhost ~]$</code> execute:</p> <pre><code>chmod 755 $NAUTOBOT\n</code></pre> <p>Then to verify that the user has the permissions to the directory execute at the <code>[nautobot@localhost ~]$</code> prompt:</p> <pre><code>ls -l /opt/\n</code></pre> <p>Example output shows that the user and group are both <code>nautobot</code> below:</p> <pre><code>total 4\ndrwxr-xr-x. 11 nautobot nautobot 4096 Apr  5 11:24 nautobot\n</code></pre>"},{"location":"user-guide/administration/installation/http-server.html#502-bad-gateway","title":"502 Bad Gateway","text":"<p>If you are able to connect but receive a 502 (bad gateway) error, check the following:</p> <ul> <li>The uWSGI worker processes are running (<code>systemctl status nautobot</code> should show a status of <code>active (running)</code>)</li> <li>NGINX is configured to connect to the port on which uWSGI is listening (default is <code>8001</code>).</li> <li>SELinux may be preventing the reverse proxy connection. You may need to allow HTTP network connections with the   command <code>setsebool -P httpd_can_network_connect 1</code>. For further information, view the SELinux   troubleshooting guide.</li> </ul>"},{"location":"user-guide/administration/installation/install_system.html","title":"Installing Nautobot System Dependencies","text":"<p>The documentation assumes that you are running one of the following:</p> <ul> <li>Ubuntu 20.04+</li> <li>Debian 11+</li> <li>RHEL/CentOS 8.2+<ul> <li>Also includes other derivatives of RHEL such as RockyLinux or AlmaLinux</li> </ul> </li> </ul>"},{"location":"user-guide/administration/installation/install_system.html#install-system-packages","title":"Install System Packages","text":"<p>Install the prerequisite system libraries and utilities.</p> <p>This will install:</p> <ul> <li>Git</li> <li>Python 3</li> <li>Pip</li> <li>Redis server and client</li> <li>Node.JS and NPM</li> </ul> Ubuntu/DebianRHEL8 + Derivatives <pre><code>sudo apt update -y\nsudo apt install -y ca-certificates curl gnupg # Pre-requisites for adding the NodeSource Node.js repository\n# NodeSource Node.js Repository Setup\nsudo mkdir -p /etc/apt/keyrings  # Create the keyring directory if it doesn't exist\ncurl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg  # Add the Node.js signing key\nNODE_MAJOR=18  # Nautobot requires Node.js 18, the latest LTS release\necho \"deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main\" | sudo tee /etc/apt/sources.list.d/nodesource.list  # Add the Node.js repository\nsudo apt update -y\nsudo apt install -y git python3 python3-pip python3-venv python3-dev redis-server nodejs\n</code></pre> <pre><code>sudo dnf check-update\nsudo dnf install -y git python38 python38-devel python38-pip redis\nsudo dnf module reset -y nodejs # Reset the nodejs modules to ensure we get the desired version\nsudo dnf module enable -y nodejs:18 # Enable the Node.js 18.x module\nsudo dnf module install -y nodejs:18/common # Install Node.js 18.x\n</code></pre>"},{"location":"user-guide/administration/installation/install_system.html#database-setup","title":"Database Setup","text":"<p>In this step you'll set up your database server, create a database and database user for use by Nautobot, and verify your connection to the database.</p> <p>You must select either MySQL (MariaDB is not supported) or PostgreSQL. PostgreSQL is used by default with Nautobot, so if you just want to get started or don't have a preference, please stick with PostgreSQL.</p> <p>Please follow the steps for your selected database backend below.</p> Ubuntu/Debian PostgreSQLUbuntu/Debian MySQLRHEL8 PostgreSQLRHEL8 MySQL"},{"location":"user-guide/administration/installation/install_system.html#install-postgresql","title":"Install PostgreSQL","text":"<p>This will install the PostgreSQL database server and client.</p> <pre><code>sudo apt install -y postgresql\n</code></pre>"},{"location":"user-guide/administration/installation/install_system.html#create-a-postgresql-database","title":"Create a PostgreSQL Database","text":"<p>At a minimum, we need to create a database for Nautobot and assign it a username and password for authentication. This is done with the following commands.</p> <p>Danger</p> <p>Do not use the password from the example. Choose a strong, random password to ensure secure database authentication for your Nautobot installation.</p> <pre><code>sudo -u postgres psql\n</code></pre> <p>Example output:</p> <pre><code>psql (12.5 (Ubuntu 12.5-0ubuntu0.20.04.1))\nType \"help\" for help.\n\npostgres=# CREATE DATABASE nautobot;\nCREATE DATABASE\npostgres=# CREATE USER nautobot WITH PASSWORD 'insecure_password';\nCREATE ROLE\npostgres=# GRANT ALL PRIVILEGES ON DATABASE nautobot TO nautobot;\nGRANT\npostgres=# GRANT CREATE ON SCHEMA public TO nautobot;\nGRANT\npostgres=# \\q\n</code></pre>"},{"location":"user-guide/administration/installation/install_system.html#verify-postgresql-service-status","title":"Verify PostgreSQL Service Status","text":"<p>You can verify that authentication works issuing the following command and providing the configured password. (Replace <code>localhost</code> with your database server if using a remote database.)</p> <p>If successful, you will enter a <code>nautobot</code> prompt. Type <code>\\conninfo</code> to confirm your connection, or type <code>\\q</code> to exit.</p> <pre><code>psql --username nautobot --password --host localhost nautobot\n</code></pre> <p>Example output:</p> <pre><code>Password for user nautobot:\npsql (12.5 (Ubuntu 12.5-0ubuntu0.20.04.1))\nSSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)\nType \"help\" for help.\n\nnautobot=&gt; \\conninfo\nYou are connected to database \"nautobot\" as user \"nautobot\" on host \"localhost\" (address \"127.0.0.1\") at port \"5432\".\nSSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)\nnautobot=&gt; \\q\n</code></pre>"},{"location":"user-guide/administration/installation/install_system.html#install-mysql","title":"Install MySQL","text":"<p>This will install the MySQL database server and client. Additionally, MySQL requires that the MySQL development libraries are installed so that we may compile the Python <code>mysqlclient</code> library during the Nautobot installation steps.</p> <pre><code>sudo apt install -y libmysqlclient-dev mysql-server\n</code></pre> <p>Note</p> <p>In the Nautobot Docker image <code>libmariadb-dev</code> is installed due to licensing challenges with <code>libmysqlclient-dev</code>. </p>"},{"location":"user-guide/administration/installation/install_system.html#create-a-mysql-database","title":"Create a MySQL Database","text":"<p>At a minimum, we need to create a database for Nautobot and assign it a username and password for authentication. This is done with the following commands.</p> <p>Note</p> <p>Replace <code>localhost</code> below with your database server if using a remote database.</p> <p>Danger</p> <p>Do not use the password from the example. Choose a strong, random password to ensure secure database authentication for your Nautobot installation.</p> <pre><code>sudo -u root mysql\n</code></pre> <p>Example output:</p> <pre><code>Welcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 11\nServer version: 8.0.25-0ubuntu0.20.04.1 (Ubuntu)\n\nCopyright (c) 2000, 2021, Oracle and/or its affiliates.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql&gt; CREATE DATABASE nautobot;\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; CREATE USER 'nautobot'@'localhost' IDENTIFIED BY 'insecure_password';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql&gt; GRANT ALL ON nautobot.* TO 'nautobot'@'localhost';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; \\q\nBye\n</code></pre>"},{"location":"user-guide/administration/installation/install_system.html#verify-mysql-service-status","title":"Verify MySQL Service Status","text":"<p>You can verify that authentication works issuing the following command and providing the configured password.</p> <p>If successful, you will enter a <code>mysql&gt;</code> prompt. Type <code>status</code> to confirm your connection, or type <code>\\q</code> to exit.</p> <p>Note</p> <p>Replace <code>localhost</code> below with your database server if using a remote database.</p> <pre><code>mysql --user nautobot --password --host localhost nautobot\n</code></pre> <p>Example output:</p> <pre><code>Enter password:\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 13\nServer version: 8.0.25-0ubuntu0.20.04.1 (Ubuntu)\n\nCopyright (c) 2000, 2021, Oracle and/or its affiliates.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql&gt; status\n--------------\nmysql  Ver 8.0.25-0ubuntu0.20.04.1 for Linux on x86_64 ((Ubuntu))\n\nConnection id:          13\nCurrent database:       nautobot\nCurrent user:           nautobot@localhost\nSSL:                    Not in use\nCurrent pager:          stdout\nUsing outfile:          ''\nUsing delimiter:        ;\nServer version:         8.0.25-0ubuntu0.20.04.1 (Ubuntu)\nProtocol version:       10\nConnection:             Localhost via UNIX socket\nServer characterset:    utf8mb4\nDb     characterset:    utf8mb4\nClient characterset:    utf8mb4\nConn.  characterset:    utf8mb4\nUNIX socket:            /var/run/mysqld/mysqld.sock\nBinary data as:         Hexadecimal\nUptime:                 26 min 31 sec\n\nThreads: 2  Questions: 29  Slow queries: 0  Opens: 193  Flush tables: 3  Open tables: 112  Queries per second avg: 0.018\n--------------\n\nmysql&gt; \\q\nBye\n</code></pre>"},{"location":"user-guide/administration/installation/install_system.html#install-postgresql_1","title":"Install PostgreSQL","text":"<p>This will install the PostgreSQL database server and client.</p> <pre><code>sudo dnf install -y postgresql-server\n</code></pre>"},{"location":"user-guide/administration/installation/install_system.html#initialize-postgresql","title":"Initialize PostgreSQL","text":"<p>CentOS/RHEL requires a manual step to generate the initial configurations required by PostgreSQL.</p> <pre><code>sudo postgresql-setup --initdb\n</code></pre>"},{"location":"user-guide/administration/installation/install_system.html#configure-authentication","title":"Configure Authentication","text":"<p>CentOS/RHEL configures PostgreSQL to use <code>ident</code> host-based authentication by default. Because Nautobot will need to authenticate using a username and password, we must update <code>pg_hba.conf</code> to support <code>md5</code> password authentication.</p> <p>As root, edit <code>/var/lib/pgsql/data/pg_hba.conf</code> and change <code>ident</code> to <code>md5</code> for the lines below.</p> <p>Before:</p> <pre><code># IPv4 local connections:\nhost    all             all             127.0.0.1/32            ident\n# IPv6 local connections:\nhost    all             all             ::1/128                 ident\n</code></pre> <p>After:</p> <pre><code># IPv4 local connections:\nhost    all             all             127.0.0.1/32            md5\n# IPv6 local connections:\nhost    all             all             ::1/128                 md5\n</code></pre>"},{"location":"user-guide/administration/installation/install_system.html#start-postgresql","title":"Start PostgreSQL","text":"<p>Start the service and enable it to run at system startup:</p> <pre><code>sudo systemctl enable --now postgresql\n</code></pre>"},{"location":"user-guide/administration/installation/install_system.html#create-a-postgresql-database_1","title":"Create a PostgreSQL Database","text":"<p>At a minimum, we need to create a database for Nautobot and assign it a username and password for authentication. This is done with the following commands.</p> <p>Danger</p> <p>Do not use the password from the example. Choose a strong, random password to ensure secure database authentication for your Nautobot installation.</p> <pre><code>sudo -u postgres psql\n</code></pre> <p>Example output:</p> <pre><code>psql (10.15)\nType \"help\" for help.\n</code></pre> <pre><code>postgres=# CREATE DATABASE nautobot;\nCREATE DATABASE\npostgres=# CREATE USER nautobot WITH PASSWORD 'insecure_password';\nCREATE ROLE\npostgres=# GRANT ALL PRIVILEGES ON DATABASE nautobot TO nautobot;\nGRANT\npostgres=# \\q\n</code></pre>"},{"location":"user-guide/administration/installation/install_system.html#verify-postgresql-service-status_1","title":"Verify PostgreSQL Service Status","text":"<p>You can verify that authentication works issuing the following command and providing the configured password. (Replace <code>localhost</code> with your database server if using a remote database.)</p> <p>If successful, you will enter a <code>nautobot</code> prompt. Type <code>\\conninfo</code> to confirm your connection, or type <code>\\q</code> to exit.</p> <pre><code>psql --username nautobot --password --host localhost nautobot\n</code></pre> <p>Example output:</p> <pre><code>Password for user nautobot:\npsql (10.15)\nType \"help\" for help.\n\nnautobot=&gt; \\conninfo\nYou are connected to database \"nautobot\" as user \"nautobot\" on host \"localhost\" (address \"127.0.0.1\") at port \"5432\".\nnautobot=&gt; \\q\n</code></pre>"},{"location":"user-guide/administration/installation/install_system.html#install-mysql_1","title":"Install MySQL","text":"<p>This will install the MySQL database server and client. Additionally, MySQL requires that <code>gcc</code> and the MySQL development libraries are installed so that we may compile the Python <code>mysqlclient</code> library during the Nautobot installation steps.</p> <pre><code>sudo dnf install -y gcc mysql-server mysql-devel\n</code></pre>"},{"location":"user-guide/administration/installation/install_system.html#start-mysql","title":"Start MySQL","text":"<p>Start the service and enable it to run at system startup:</p> <pre><code>sudo systemctl enable --now mysql\n</code></pre>"},{"location":"user-guide/administration/installation/install_system.html#create-a-mysql-database_1","title":"Create a MySQL Database","text":"<p>At a minimum, we need to create a database for Nautobot and assign it a username and password for authentication. This is done with the following commands.</p> <p>Note</p> <p>Replace <code>localhost</code> below with your database server if using a remote database.</p> <p>Danger</p> <p>Do not use the password from the example. Choose a strong, random password to ensure secure database authentication for your Nautobot installation.</p> <pre><code>sudo -u root mysql\n</code></pre> <p>Example output:</p> <pre><code>Welcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 8\nServer version: 8.0.21 Source distribution\n\nCopyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql&gt; CREATE DATABASE nautobot;\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; CREATE USER 'nautobot'@'localhost' IDENTIFIED BY 'insecure_password';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; GRANT ALL ON nautobot.* TO 'nautobot'@'localhost';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; \\q\nBye\n</code></pre>"},{"location":"user-guide/administration/installation/install_system.html#verify-mysql-service-status_1","title":"Verify MySQL Service Status","text":"<p>You can verify that authentication works issuing the following command and providing the configured password.</p> <p>If successful, you will enter a <code>mysql&gt;</code> prompt. Type <code>status</code> to confirm your connection, or type <code>\\q</code> to exit.</p> <p>Note</p> <p>Replace <code>localhost</code> below with your database server if using a remote database.</p> <pre><code>mysql --user nautobot --password --host localhost nautobot\n</code></pre> <p>Example output:</p> <pre><code>Enter password:\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 10\nServer version: 8.0.21 Source distribution\n\nCopyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql&gt; status\n--------------\nmysql  Ver 8.0.21 for Linux on x86_64 (Source distribution)\n\nConnection id:          10\nCurrent database:       nautobot\nCurrent user:           nautobot@localhost\nSSL:                    Not in use\nCurrent pager:          stdout\nUsing outfile:          ''\nUsing delimiter:        ;\nServer version:         8.0.21 Source distribution\nProtocol version:       10\nConnection:             Localhost via UNIX socket\nServer characterset:    utf8mb4\nDb     characterset:    utf8mb4\nClient characterset:    utf8mb4\nConn.  characterset:    utf8mb4\nUNIX socket:            /var/lib/mysql/mysql.sock\nBinary data as:         Hexadecimal\nUptime:                 4 min 12 sec\n\nThreads: 2  Questions: 12  Slow queries: 0  Opens: 151  Flush tables: 3  Open tables: 69  Queries per second avg: 0.047\n--------------\n\nmysql&gt; \\q\nBye\n</code></pre>"},{"location":"user-guide/administration/installation/install_system.html#redis-setup","title":"Redis Setup","text":"Ubuntu/DebianRHEL8 <p>Since Redis was already installed, let's just verify that it's working using <code>redis-cli</code>:</p> <pre><code>redis-cli ping\n</code></pre> <p>Example output:</p> <pre><code>PONG\n</code></pre>"},{"location":"user-guide/administration/installation/install_system.html#start-redis","title":"Start Redis","text":"<p>Start the service and enable it to run at system startup:</p> <pre><code>sudo systemctl enable --now redis\n</code></pre>"},{"location":"user-guide/administration/installation/install_system.html#verify-redis-service-status","title":"Verify Redis Service Status","text":"<p>Use the <code>redis-cli</code> utility to ensure the Redis service is functional:</p> <pre><code>redis-cli ping\n</code></pre> <p>Example output:</p> <pre><code>PONG\n</code></pre>"},{"location":"user-guide/administration/installation/install_system.html#deploy-nautobot","title":"Deploy Nautobot","text":"<p>Now that Nautobot dependencies are installed and configured, you're ready to Install Nautobot!</p>"},{"location":"user-guide/administration/installation/nautobot.html","title":"Installing Nautobot","text":"<p>This section of the documentation discusses installing and configuring the Nautobot application itself.</p> <p>These instructions will guide you through the following actions:</p> <ul> <li>Establish a Nautobot root directory for the application environment</li> <li>Create a <code>nautobot</code> system account</li> <li>Create a Python virtual environment (virtualenv)</li> <li>Install Nautobot and all required Python packages</li> <li>Run the database schema migrations</li> <li>Aggregate static resource files on disk</li> <li>Verify the installation using the development/test server</li> </ul> <p>Important</p> <p>Your database server and Redis must have been successfully installed before continuing with deployment steps. If you haven't done that yet, please visit the guide on Installing Nautobot Dependencies</p>"},{"location":"user-guide/administration/installation/nautobot.html#choose-your-nautobot_root","title":"Choose your <code>NAUTOBOT_ROOT</code>","text":"<p>You need to select a directory path where everything related to Nautobot will be installed. We will use this value across the documentation and it will be referred to as <code>NAUTOBOT_ROOT</code>.</p> <p>We will be using this path as the home directory of the <code>nautobot</code> user.</p> <p>Tip</p> <p>We have selected <code>/opt/nautobot</code>, but you may use any directory you choose.</p> <p>Later on, we will need to set this directory path as the <code>NAUTOBOT_ROOT</code> environment variable to tell Nautobot where to find its files and settings.</p>"},{"location":"user-guide/administration/installation/nautobot.html#create-the-nautobot-system-user","title":"Create the Nautobot System User","text":"<p>Create a system user account named <code>nautobot</code>. This user will own all of the Nautobot files, and the Nautobot web services will be configured to run under this account.</p> <p>The following command also creates the <code>/opt/nautobot</code> directory and sets it as the home directory for the user.</p> <pre><code>sudo useradd --system --shell /bin/bash --create-home --home-dir /opt/nautobot nautobot\n</code></pre>"},{"location":"user-guide/administration/installation/nautobot.html#setup-the-virtual-environment","title":"Setup the Virtual Environment","text":"<p>A Python virtual environment or virtualenv is like a container for a set of Python packages. A virtualenv allows you to build environments suited to specific projects without interfering with system packages or other projects.</p> <p>When installed per the documentation, Nautobot uses a virtual environment in production.</p> <p>In the following steps, we will have you create the virtualenv within the <code>NAUTOBOT_ROOT</code> you chose in the previous step. This is the same we had you set as the home directory as the <code>nautobot</code> user.</p> <p>Note</p> <p>Instead of deliberately requiring you to activate/deactivate the virtualenv, we are emphasizing on relying on the <code>$PATH</code> to access programs installed within it. We find this to be much more intuitive and natural when working with Nautobot in this way.</p>"},{"location":"user-guide/administration/installation/nautobot.html#create-the-virtual-environment","title":"Create the Virtual Environment","text":"<p>As root, we're going to create the virtualenv in our <code>NAUTOBOT_ROOT</code> as the <code>nautobot</code> user to populate the <code>/opt/nautobot</code> directory with a self-contained Python environment including a <code>bin</code> directory for scripts and a <code>lib</code> directory for Python libraries.</p> Ubuntu/DebianCentOS/RHEL8 <pre><code>sudo -u nautobot python3 -m venv /opt/nautobot\n</code></pre> <pre><code>sudo -u nautobot python3.8 -m venv /opt/nautobot\n</code></pre>"},{"location":"user-guide/administration/installation/nautobot.html#update-the-nautobot-bashrc","title":"Update the Nautobot <code>.bashrc</code>","text":"<p>So what about the <code>NAUTOBOT_ROOT</code>? We've referenced this environment variable several times. Here is where it finally gets set.</p> <p>We need to set the <code>NAUTOBOT_ROOT</code> environment variable for the <code>nautobot</code> user and make sure that it always set without having to do it manually.</p> <p>Run this command to update <code>~/.bashrc</code> for <code>nautobot</code> so that anytime you become <code>nautobot</code>, your <code>NAUTOBOT_ROOT</code> will be set automatically.</p> <pre><code>echo \"export NAUTOBOT_ROOT=/opt/nautobot\" | sudo tee -a ~nautobot/.bashrc\n</code></pre>"},{"location":"user-guide/administration/installation/nautobot.html#sudo-to-nautobot","title":"Sudo to nautobot","text":"<p>It is critical to install Nautobot as the <code>nautobot</code> user so that we don't have to worry about fixing permissions later.</p> <pre><code>sudo -iu nautobot\n</code></pre> <p>Observe also that you can now echo the value of the <code>NAUTOBOT_ROOT</code> environment variable that is automatically set because we added to <code>.bashrc</code>:</p> <pre><code>echo $NAUTOBOT_ROOT\n</code></pre> <p>Example output:</p> <pre><code>/opt/nautobot\n</code></pre> <p>Warning</p> <p>Unless explicitly stated, all remaining steps requiring the use of <code>pip3</code> or <code>nautobot-server</code> in this document should be performed as the <code>nautobot</code> user!</p>"},{"location":"user-guide/administration/installation/nautobot.html#understanding-the-virtual-environment","title":"Understanding the Virtual Environment","text":"<p>Because the <code>nautobot</code> user was created with <code>NAUTOBOT_ROOT</code> set as its home directory and we had you set the shell to <code>/bin/bash</code>, the binary path <code>$NAUTOBOT_ROOT/bin</code> is automatically added to the beginning of the <code>$PATH</code> environment variable:</p> Ubuntu 20.04RHEL8 flavors <pre><code>echo $PATH\n</code></pre> <p>Example output:</p> <pre><code>/opt/nautobot/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin\n</code></pre> <pre><code>echo $PATH\n</code></pre> <p>Example output:</p> <pre><code>/opt/nautobot/.local/bin:/opt/nautobot/bin:/opt/nautobot/.local/bin:/opt/nautobot/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin\n</code></pre> <p>Therefore, any commands executed by the <code>nautobot</code> user will always check <code>$NAUTOBOT_ROOT/bin</code> first.</p> <p>Since <code>NAUTOBOT_ROOT</code> also contains the Python virtualenv for Nautobot, all of the commands you will execute as the <code>nautobot</code> user, will automatically prefer the virtualenv's commands because they come first in the <code>$PATH</code>.</p> <p>As the <code>nautobot</code> user, you may use <code>which pip3</code> to confirm that you are using the correct version of <code>pip3</code>. The path should match that of <code>$NAUTOBOT_ROOT/bin</code>. For example:</p> <pre><code>which pip3\n</code></pre> <p>Example output:</p> <pre><code>/opt/nautobot/bin/pip3\n</code></pre> <p>This makes sure that the version of Python you're using, as well any dependencies that you install, remain isolated in this environment.</p>"},{"location":"user-guide/administration/installation/nautobot.html#prepare-the-virtual-environment","title":"Prepare the Virtual Environment","text":"<p>Before we install anything into the virtualenv, we want to make sure that Pip is running the latest version.</p> <p>Pip is Python's package installer and is referred interchangeably as <code>pip</code> or <code>pip3</code>. For the purpose of this document, we'll deliberately be referring to it as <code>pip3</code>. Many common issues can be solved by running the latest version of Pip. Before continuing with installing Nautobot, upgrade Pip to its latest release.</p> <p>We also want to deliberately install the <code>wheel</code> library which will tell Pip to always try to install wheel packages if they are available. A wheel is a pre-compiled Python package, which is quicker and safer to install because it does not require development libraries or <code>gcc</code> to be installed on your system just so that some more advanced Python libraries can be compiled.</p> <pre><code>pip3 install --upgrade pip wheel\n</code></pre>"},{"location":"user-guide/administration/installation/nautobot.html#install-nautobot","title":"Install Nautobot","text":"PostgreSQL (Ubuntu and RHEL Flavors)MySQL (Ubuntu and RHEL Flavors) <p>Use Pip to install Nautobot:</p> <pre><code>pip3 install nautobot\n</code></pre> <p>Use Pip to install Nautobot with the MySQL client:</p> <pre><code>pip3 install \"nautobot[mysql]\"\n</code></pre> <p>Great! We have <code>NAUTOBOT_ROOT</code> ready for use by the <code>nautobot</code> user, so let's proceed to verifying the installation.</p>"},{"location":"user-guide/administration/installation/nautobot.html#verify-your-nautobot-installation","title":"Verify your Nautobot Installation","text":"<p>You should now have a fancy <code>nautobot-server</code> command in your environment. This will be your gateway to all things Nautobot! Run it to confirm the installed version of <code>nautobot</code>:</p> <pre><code>nautobot-server --version\n</code></pre>"},{"location":"user-guide/administration/installation/nautobot.html#configuration","title":"Configuration","text":"<p>Before you can use Nautobot, you'll need to configure it by telling it where your database and Redis servers can be found, among other things. This is done with the <code>nautobot_config.py</code> configuration file.</p>"},{"location":"user-guide/administration/installation/nautobot.html#initialize-your-configuration","title":"Initialize your configuration","text":"<p>Initialize a new configuration by running <code>nautobot-server init</code>. You may specify an alternate location and detailed instructions for this are covered in the documentation on Nautobot Configuration.</p> <p>However, because we've set the <code>NAUTOBOT_ROOT</code>, this command will automatically create a new <code>nautobot_config.py</code> at the default location based on this at <code>$NAUTOBOT_ROOT/nautobot_config.py</code>:</p> <pre><code>nautobot-server init\n</code></pre> <p>Example output:</p> <pre><code>Nautobot would like to send anonymized installation metrics to the project's maintainers.\nThese metrics include the installed Nautobot version, the Python version in use, an anonymous \"deployment ID\", and a list of one-way-hashed names of enabled Nautobot Apps and their versions.\nAllow Nautobot to send these metrics? [y/n]: y\nInstallation metrics will be sent when running 'nautobot-server post_upgrade'. Thank you!\nConfiguration file created at /opt/nautobot/nautobot_config.py\n</code></pre> <p>Added in version 1.6.0</p> <p>The <code>nautobot-server init</code> command will now prompt you to set the initial value for the <code>INSTALLATION_METRICS_ENABLED</code> setting. See the send_installation_metrics command for more information about the feature that this setting toggles.</p>"},{"location":"user-guide/administration/installation/nautobot.html#required-settings","title":"Required Settings","text":"<p>Your <code>nautobot_config.py</code> provides sane defaults for all of the configuration settings. You will inevitably need to update the settings for your environment, most notably the <code>DATABASES</code> setting. If you do not wish to modify the config, by default, many of these configuration settings can also be specified by environment variables. Please see Required Settings for further details.</p> <p>Edit <code>$NAUTOBOT_ROOT/nautobot_config.py</code>, and head over to the documentation on Required Settings to tweak your required settings. At a minimum, you'll need to update the following settings:</p> <ul> <li><code>ALLOWED_HOSTS</code>: You must set this value. This can be set to <code>[\"*\"]</code> for a quick start, but this value is not suitable for production deployment.</li> <li><code>DATABASES</code>: Database connection parameters. If you installed your database server on the same system as Nautobot, you'll need to update the <code>USER</code> and <code>PASSWORD</code> fields here. If you are using MySQL, you'll also need to update the <code>ENGINE</code> field, changing the default database driver suffix from <code>django.db.backends.postgresql</code> to <code>django.db.backends.mysql</code>.</li> <li>Redis settings: Redis configuration requires multiple settings, if different from the defaults. If you installed Redis on the same system as Nautobot, you do not need to change these settings.</li> </ul> <p>Important</p> <p>You absolutely must update your required settings in your <code>nautobot_config.py</code> or Nautobot will not work.</p> <p>Warning</p> <p>If you are using MySQL as your database backend, you must also update the database <code>ENGINE</code> setting to <code>django.db.backends.mysql</code>.</p> <p>Save your changes to your <code>nautobot_config.py</code> and then proceed to the next step.</p>"},{"location":"user-guide/administration/installation/nautobot.html#mysql-unicode-settings","title":"MySQL Unicode Settings","text":"<p>If you are using MySQL as your database backend, and you want to enable support for Unicode emojis, please make sure to add <code>\"OPTIONS\": {\"charset\": \"utf8mb4\"}</code> to your <code>DATABASES</code> setting. Please see the configuration guide on MySQL Unicode settings for more information.</p>"},{"location":"user-guide/administration/installation/nautobot.html#optional-settings","title":"Optional Settings","text":"<p>All Python packages required by Nautobot will be installed automatically when running <code>pip3 install nautobot</code>.</p> <p>Nautobot also supports the ability to install optional Python packages. If desired, these packages should be listed in <code>local_requirements.txt</code> within the <code>NAUTOBOT_ROOT</code> directory, such as <code>/opt/nautobot/local_requirements.txt</code>.</p> <p>If you decide to use any Nautobot plugins, they should be listed in this file.</p> <p>We will cover two examples of common optional settings below.</p>"},{"location":"user-guide/administration/installation/nautobot.html#configuring-napalm","title":"Configuring NAPALM","text":"<p>Nautobot provides built-in support for the NAPALM automation library, which allows Nautobot to fetch live data from devices and return it to a requester via its REST API. The <code>NAPALM_USERNAME</code> and <code>NAPALM_PASSWORD</code> configuration parameters define the credentials to be used when connecting to a device.</p> <p>To use NAPALM, add <code>nautobot[napalm]</code> to your <code>local_requirements.txt</code> so that it can be installed and kept up to date:</p> <pre><code>echo \"nautobot[napalm]\" &gt;&gt; $NAUTOBOT_ROOT/local_requirements.txt\n</code></pre>"},{"location":"user-guide/administration/installation/nautobot.html#remote-file-storage","title":"Remote File Storage","text":"<p>By default, Nautobot will use the local filesystem to store uploaded files. To use a remote filesystem, install the <code>django-storages</code> library and configure your desired storage backend in <code>nautobot_config.py</code>.</p> <p>To use remote file storage, add <code>nautobot[remote_storage]</code> to your <code>local_requirements.txt</code> so that it can be installed and kept up to date:</p> <pre><code>echo \"nautobot[remote_storage]\" &gt;&gt; $NAUTOBOT_ROOT/local_requirements.txt\n</code></pre> <p>An example of using django-storages with AWS S3 buckets, visit the django-storages with S3 user-guide.</p>"},{"location":"user-guide/administration/installation/nautobot.html#prepare-the-database","title":"Prepare the Database","text":"<p>Before Nautobot can run, the database migrations must be performed to prepare the database for use. This will populate the database tables and relationships:</p> <pre><code>nautobot-server migrate\n</code></pre>"},{"location":"user-guide/administration/installation/nautobot.html#create-a-superuser","title":"Create a Superuser","text":"<p>Nautobot does not come with any predefined user accounts. You'll need to create a administrative superuser account to be able to log into Nautobot for the first time. Specifying an email address for the user is not required, but be sure to use a very strong password.</p> <pre><code>nautobot-server createsuperuser\n</code></pre>"},{"location":"user-guide/administration/installation/nautobot.html#build-nautobot-20-ui","title":"Build Nautobot 2.0 UI","text":"<p>Nautobot 2.0 introduces a new user interface. This interface is built using React and requires Node.js version 18 or higher to build the UI.</p>"},{"location":"user-guide/administration/installation/nautobot.html#build-the-ui","title":"Build the UI","text":"<p>Nautobot provides a management command to install the required Node.js packages and build the UI:</p> <pre><code>nautobot-server build_ui --npm-install\n</code></pre> <p>This only needs to be performed manually the first time Nautobot v2 is installed. The <code>post_upgrade</code> command that must be ran after any Nautobot upgrade will automatically re-run this command.</p>"},{"location":"user-guide/administration/installation/nautobot.html#create-static-directories","title":"Create Static Directories","text":"<p>Nautobot relies upon many static files including:</p> <ul> <li><code>git</code> - For storing Git repositories</li> <li><code>jobs</code> - For storing custom Jobs</li> <li><code>media</code> - For storing uploaded images and attachments (such as device type images)</li> <li><code>static</code> - The home for CSS, JavaScript, and images used to serve the web interface</li> </ul> <p>Each of these have their own corresponding setting that defined in <code>nautobot_config.py</code>, but by default they will all be placed in <code>NAUTOBOT_ROOT</code> unless you tell Nautobot otherwise by customizing their unique variable.</p> <p>The <code>collectstatic</code> command will create these directories if they do not exist, and in the case of the <code>static</code> files directory, it will also copy the appropriate files:</p> <pre><code>nautobot-server collectstatic\n</code></pre>"},{"location":"user-guide/administration/installation/nautobot.html#install-local-requirements","title":"Install Local Requirements","text":"<p>Note</p> <p>If you did not create a <code>local_requirements.txt</code> above, please skip this step.</p> <p>This step is entirely optional. As indicated above, we mentioned that any extra local requirements should go into <code>$NAUTOBOT_ROOT/local_requirements.txt</code>.</p> <pre><code>pip3 install -r $NAUTOBOT_ROOT/local_requirements.txt\n</code></pre>"},{"location":"user-guide/administration/installation/nautobot.html#check-your-configuration","title":"Check your Configuration","text":"<p>Nautobot leverages Django's built-in system check framework to validate the configuration to detect common problems and to provide hints for how to fix them.</p> <p>Checks are ran automatically when running a development server using <code>nautobot-server runserver</code>, but not when running in production using WSGI.</p> <p>Hint</p> <p>Get into the habit of running checks before deployments!</p> <pre><code>nautobot-server check\n</code></pre>"},{"location":"user-guide/administration/installation/nautobot.html#test-the-application","title":"Test the Application","text":"<p>At this point, we should be able to run Nautobot's development server for testing. We can check by starting a development instance:</p> <pre><code>nautobot-server runserver 0.0.0.0:8080 --insecure\n</code></pre> <p>Next, connect to the name or IP of the server (as defined in <code>ALLOWED_HOSTS</code>) on port 8080; for example, http://127.0.0.1:8080/. You should be greeted with the Nautobot home page.</p> <p>Danger</p> <p>DO NOT USE THIS SERVER IN A PRODUCTION SETTING. The development server is for development and testing purposes only. It is neither performant nor secure enough for production use.</p> <p>Warning</p> <p>If the test service does not run, or you cannot reach the Nautobot home page, something has gone wrong. Do not proceed with the rest of this guide until the installation has been corrected. Some platforms (such as CentOS) have a firewall enabled by default. If you are unable to connect to the server url on port 8080, verify the firewall policy to allow the appropriate connections, or select an already permitted port.</p> <p>Important</p> <p>Certain Nautobot features (Git repository synchronization, webhooks, jobs, etc.) depend on the presence of Nautobot's background Celery worker process, which is not automatically started by the <code>runserver</code> command. To start it for testing purposes, you can run <code>nautobot-server celery worker</code> separately. For production use, Nautobot and the worker processes should be managed by <code>systemd</code> rather than started manually, as described in the next section of this documentation.</p> <p>Note that the initial user interface will be locked down for non-authenticated users.</p> <p></p> <p>Try logging in using the superuser account we just created. Once authenticated, you'll be able to access all areas of the UI:</p> <p></p> <p>Type <code>Ctrl-C</code> to stop the development server. Now you're ready to proceed to starting Nautobot as a system service.</p>"},{"location":"user-guide/administration/installation/selinux-troubleshooting.html","title":"SELinux Troubleshooting","text":"<p>When installing Nautobot for the first time on a Redhat-based Linux Distribution, SELinux may prevent the Nautobot stack from working properly. An example is SELinux preventing the HTTP daemon (NGINX, et al.) from communicating to the Django application stack on the backend.</p>"},{"location":"user-guide/administration/installation/selinux-troubleshooting.html#determine-if-selinux-is-the-culprit","title":"Determine if SELinux is the Culprit","text":"<p>An example of a broken application can be seen in the Nginx error logs below:</p> <pre><code>sudo tail -f /var/log/nginx/error.log\n</code></pre> <p>Example output:</p> <pre><code>2021/02/26 15:16:55 [crit] 67245#0: *494 connect() to 127.0.0.1:8080 failed (13: Permission denied) while connecting to upstream, client: 47.221.167.40, server: nautobot.example.com, request: \"GET / HTTP/1.1\", upstream: \"http://127.0.0.1:8080/\", host: \"nautobot.example.com\"\n2021/02/26 15:16:56 [crit] 67245#0: *494 connect() to 127.0.0.1:8080 failed (13: Permission denied) while connecting to upstream, client: 47.221.167.40, server: nautobot.example.com, request: \"GET /favicon.ico HTTP/1.1\", upstream: \"http://127.0.0.1:8080/favicon.ico\", host: \"nautobot.example.com\", referrer: \"https://nautobot.example.com/\"\n2021/02/26 15:16:58 [crit] 67245#0: *544 connect() to 127.0.0.1:8080 failed (13: Permission denied) while connecting to upstream, client: 47.221.167.40, server: nautobot.example.com, request: \"GET / HTTP/1.1\", upstream: \"http://127.0.0.1:8080/\", host: \"nautobot.example.com\"\n2021/02/26 15:16:58 [crit] 67245#0: *544 connect() to 127.0.0.1:8080 failed (13: Permission denied) while connecting to upstream, client: 47.221.167.40, server: nautobot.example.com, request: \"GET /favicon.ico HTTP/1.1\", upstream: \"http://127.0.0.1:8080/favicon.ico\", host: \"nautobot.example.com\", referrer: \"https://nautobot.example.com/\"\n</code></pre> <p>A quick way to verify that SELinux is preventing the application from working is to first, verify that SELinux is indeed <code>enabled</code> and operating in <code>enforcing</code> mode, and second, temporarily put SELinux in <code>permissive</code> mode. With SELinux in <code>permissive</code> mode, the application stack can be tested again. If the application starts working as expected, then SELinux is most likely the culprit.</p> <pre><code># sestatus | egrep 'SELinux status|Current mode'\nSELinux status:                 enabled\nCurrent mode:                   enforcing\n</code></pre> <p>To put SELinux in <code>permissive</code> mode, execute the <code>setenforce</code> command with the <code>0</code> flag.</p> <pre><code># setenforce 0\n\n# sestatus | egrep 'SELinux status|Current mode'\nSELinux status:                 enabled\nCurrent mode:                   permissive\n</code></pre> <p>With SELinux in <code>permissive</code> mode, test the application stack and ensure everything is working properly. If the application is working, put SELinux back into <code>enforcing</code> mode. This is done by executing the <code>setenforce</code> command with the <code>1</code> flag.</p> <pre><code># setenforce 1\n\n# sestatus | egrep 'SELinux status|Current mode'\nSELinux status:                 enabled\nCurrent mode:                   enforcing\n</code></pre>"},{"location":"user-guide/administration/installation/selinux-troubleshooting.html#troubleshoot-selinux","title":"Troubleshoot SELinux","text":"<p>Troubleshooting SELinux in most instances is straightforward. Using the <code>sealert</code> command to parse <code>/var/log/audit/audit.log</code> is the fastest way to pin-point SELinux specific issues. In many cases, <code>sealert</code> will also provide guidance as to how to resolve the issue.</p> <pre><code># sealert -a /var/log/audit/audit.log\n100% done\nfound 1 alerts in /var/log/audit/audit.log\n--------------------------------------------------------------------------------\n\nSELinux is preventing /usr/sbin/nginx from name_connect access on the tcp_socket port 8080.\n\n*****  Plugin connect_ports (85.9 confidence) suggests   *********************\n\nIf you want to allow /usr/sbin/nginx to connect to network port 8080\nThen you need to modify the port type.\nDo\n# semanage port -a -t PORT_TYPE -p tcp 8080\n    where PORT_TYPE is one of the following: dns_port_t, dnssec_port_t, kerberos_port_t, ocsp_port_t.\n\n*****  Plugin catchall_boolean (7.33 confidence) suggests   ******************\n\nIf you want to allow httpd to can network connect\nThen you must tell SELinux about this by enabling the 'httpd_can_network_connect' boolean.\n\nDo\nsetsebool -P httpd_can_network_connect 1\n\n*****  Plugin catchall_boolean (7.33 confidence) suggests   ******************\n\nIf you want to allow nis to enabled\nThen you must tell SELinux about this by enabling the 'nis_enabled' boolean.\n\nDo\nsetsebool -P nis_enabled 1\n\n*****  Plugin catchall (1.35 confidence) suggests   **************************\n\nIf you believe that nginx should be allowed name_connect access on the port 8080 tcp_socket by default.\nThen you should report this as a bug.\nYou can generate a local policy module to allow this access.\nDo\nallow this access for now by executing:\n# ausearch -c 'nginx' --raw | audit2allow -M my-nginx\n# semodule -X 300 -i my-nginx.pp\n\nAdditional Information:\nSource Context                system_u:system_r:httpd_t:s0\nTarget Context                system_u:object_r:unreserved_port_t:s0\nTarget Objects                port 8080 [ tcp_socket ]\nSource                        nginx\nSource Path                   /usr/sbin/nginx\nPort                          8080\nHost                          &lt;Unknown&gt;\nSource RPM Packages           nginx-1.14.1-9.module_el8.0.0+184+e34fea82.x86_64\nTarget RPM Packages\nSELinux Policy RPM            selinux-policy-targeted-3.14.3-54.el8_3.2.noarch\nLocal Policy RPM              selinux-policy-targeted-3.14.3-54.el8_3.2.noarch\nSelinux Enabled               True\nPolicy Type                   targeted\nEnforcing Mode                Enforcing\nHost Name                     nautobot.example.com\nPlatform                      Linux nautobot.example.com\n                              4.18.0-240.1.1.el8_3.x86_64 #1 SMP Thu Nov 19\n                              17:20:08 UTC 2020 x86_64 x86_64\nAlert Count                   5\nFirst Seen                    2021-02-26 15:16:55 UTC\nLast Seen                     2021-02-26 15:23:12 UTC\nLocal ID                      b83bb817-85f6-4f5c-b6e0-eee3acc85504\n\nRaw Audit Messages\ntype=AVC msg=audit(1614352992.209:585): avc:  denied  { name_connect } for  pid=67245 comm=\"nginx\" dest=8080 scontext=system_u:system_r:httpd_t:s0 tcontext=system_u:object_r:unreserved_port_t:s0 tclass=tcp_socket permissive=0\n\ntype=SYSCALL msg=audit(1614352992.209:585): arch=x86_64 syscall=connect success=no exit=EACCES a0=12 a1=55d061477358 a2=10 a3=7ffc0c62296c items=0 ppid=67243 pid=67245 auid=4294967295 uid=988 gid=985 euid=988 suid=988 fsuid=988 egid=985 sgid=985 fsgid=985 tty=(none) ses=4294967295 comm=nginx exe=/usr/sbin/nginx subj=system_u:system_r:httpd_t:s0 key=(null)ARCH=x86_64 SYSCALL=connect AUID=unset UID=nginx GID=nginx EUID=nginx SUID=nginx FSUID=nginx EGID=nginx SGID=nginx FSGID=nginx\n\nHash: nginx,httpd_t,unreserved_port_t,tcp_socket,name_connect\n</code></pre> <p>In the first few lines of the audit, <code>sealert</code> details what SELinux is blocking and provides some options to remedy the issue. Since Nginx is communicating with the Nautobot application via HTTP, the second option is the best option.</p> <pre><code>SELinux is preventing /usr/sbin/nginx from name_connect access on the tcp_socket port 8080.\n\n*****  Plugin connect_ports (85.9 confidence) suggests   *********************\n\nIf you want to allow /usr/sbin/nginx to connect to network port 8080\nThen you need to modify the port type.\nDo\n# semanage port -a -t PORT_TYPE -p tcp 8080\n    where PORT_TYPE is one of the following: dns_port_t, dnssec_port_t, kerberos_port_t, ocsp_port_t.\n\n*****  Plugin catchall_boolean (7.33 confidence) suggests   ******************\n\nIf you want to allow httpd to can network connect\nThen you must tell SELinux about this by enabling the 'httpd_can_network_connect' boolean.\n\nDo\nsetsebool -P httpd_can_network_connect 1\n</code></pre> <p>Executing <code>setsebool -P httpd_can_network_connect 1</code> should remedy the issue. Verify this by executing the <code>setsebool</code> command, verify that SELinux is enabled and in <code>enforcing</code> mode via the <code>sestatus</code> command, and test the application stack for functionality.</p> <p>The first curl command demonstrates the failure. Nginx responds with a HTTP response code of 502, indicating that it is unable to communicate with the Nautobot application. After executing the <code>setsebool</code> command, curl is used again to verify that Nginx is able to communicate with the Nautobot application. This is verified with the HTTP response code of 200.</p> <pre><code># curl -ik https://nautobot.example.com\nHTTP/1.1 502 Bad Gateway\nServer: nginx/1.14.1\nDate: Fri, 26 Feb 2021 15:41:22 GMT\nContent-Type: text/html\nContent-Length: 173\nConnection: keep-alive\n\n# sestatus\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   enforcing\nMode from config file:          enforcing\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      32\n\n# setsebool -P httpd_can_network_connect 1\n\n# curl -ik https://nautobot.example.com\nHTTP/1.1 200 OK\nServer: nginx/1.14.1\nDate: Fri, 26 Feb 2021 15:41:49 GMT\nContent-Type: text/html; charset=utf-8\nContent-Length: 18698\nConnection: keep-alive\nX-Content-Type-Options: nosniff\nReferrer-Policy: same-origin\nX-Frame-Options: DENY\nVary: Cookie, Origin\n</code></pre>"},{"location":"user-guide/administration/installation/services.html","title":"Deploying Nautobot: Web Service and Workers","text":""},{"location":"user-guide/administration/installation/services.html#services-overview","title":"Services Overview","text":"<p>Like most Django applications, Nautobot runs as a WSGI application behind an HTTP server.</p> <p>Nautobot comes preinstalled with uWSGI to use as the WSGI server, however other WSGI servers are available and should work similarly well. Gunicorn is a popular alternative.</p> <p>Additionally, certain Nautobot features (including Git repository synchronization, Webhooks, Jobs, etc.) depend on the presence of Nautobot's Celery background worker process, which is not automatically started with Nautobot and is run as a separate service.</p> <p>This document will guide you through setting up uWSGI and establishing Nautobot web and Celery worker services to run on system startup.</p>"},{"location":"user-guide/administration/installation/services.html#web-service","title":"Web Service","text":"<p>Nautobot includes a <code>nautobot-server start</code> management command that directly invokes uWSGI. This command behaves exactly as uWSGI does, but allows us to maintain a single entrypoint into the Nautobot application.</p> <pre><code>nautobot-server start --help\n</code></pre>"},{"location":"user-guide/administration/installation/services.html#worker-service","title":"Worker Service","text":"<p>Nautobot requires at least one worker to consume background tasks required for advanced background features. A <code>nautobot-server celery</code> command is included that directly invokes Celery. This command behaves exactly as the Celery command-line utility does, but launches it through Nautobot's environment to share Redis and database connection settings transparently.</p> <pre><code>nautobot-server celery --help\n</code></pre> <p>Changed in version 1.1.0</p> <p>Prior to version 1.1.0, Nautobot utilized RQ as the primary background task worker. As of Nautobot 1.1.0, RQ is now deprecated. RQ and the <code>@job</code> decorator for custom tasks were still supported for the remainder of the 1.x.y releases, but users should migrate the primary worker to Celery.</p> <p>Removed in version 2.0.0</p> <p>Support for RQ has been completely removed from Nautobot.</p>"},{"location":"user-guide/administration/installation/services.html#advanced-task-queue-configuration","title":"Advanced Task Queue Configuration","text":"<p>You may want to deploy multiple workers and/or multiple queues. For more information see the task queues documentation.</p>"},{"location":"user-guide/administration/installation/services.html#configuration","title":"Configuration","text":"<p>As the <code>nautobot</code> user, copy and paste the following into <code>$NAUTOBOT_ROOT/uwsgi.ini</code>:</p> <pre><code>[uwsgi]\n; The IP address (typically localhost) and port that the WSGI process should listen on\nsocket = 127.0.0.1:8001\n; Fail to start if any parameter in the configuration file isn\u2019t explicitly understood by uWSGI\nstrict = true\n; Enable master process to gracefully re-spawn and pre-fork workers\nmaster = true\n; Allow Python app-generated threads to run\nenable-threads = true\n;Try to remove all of the generated file/sockets during shutdown\nvacuum = true\n; Do not use multiple interpreters, allowing only Nautobot to run\nsingle-interpreter = true\n; Shutdown when receiving SIGTERM (default is respawn)\ndie-on-term = true\n; Prevents uWSGI from starting if it is unable load Nautobot (usually due to errors)\nneed-app = true\n; By default, uWSGI has rather verbose logging that can be noisy\ndisable-logging = true\n; Assert that critical 4xx and 5xx errors are still logged\nlog-4xx = true\nlog-5xx = true\n; Enable HTTP 1.1 keepalive support\nhttp-keepalive = 1\n;\n; Advanced settings (disabled by default)\n; Customize these for your environment if and only if you need them.\n; Ref: https://uwsgi-docs.readthedocs.io/en/latest/Options.html\n;\n; Number of uWSGI workers to spawn. This should typically be 2n+1, where n is the number of CPU cores present.\n; processes = 5\n; If using subdirectory hosting e.g. example.com/nautobot, you must uncomment this line. Otherwise you'll get double paths e.g. example.com/nautobot/nautobot/.\n; Ref: https://uwsgi-docs.readthedocs.io/en/latest/Changelog-2.0.11.html#fixpathinfo-routing-action\n; route-run = fixpathinfo:\n; If hosted behind a load balancer uncomment these lines, the harakiri timeout should be greater than your load balancer timeout.\n; Ref: https://uwsgi-docs.readthedocs.io/en/latest/HTTP.html?highlight=keepalive#http-keep-alive\n; harakiri = 65\n; add-header = Connection: Keep-Alive\n; http-keepalive = 1\n</code></pre> <p>This configuration should suffice for most initial installations, you may wish to edit this file to change the bound IP address and/or port number, or to make performance-related adjustments. See uWSGI documentation for the available configuration parameters.</p> <p>Note</p> <p>If you are deploying uWSGI behind a load balancer be sure to configure the harakiri timeout and keep alive appropriately.</p>"},{"location":"user-guide/administration/installation/services.html#setup-systemd","title":"Setup systemd","text":"<p>We'll use <code>systemd</code> to control both uWSGI and Nautobot's background worker processes.</p> <p>Warning</p> <p>The following steps must be performed with root permissions.</p>"},{"location":"user-guide/administration/installation/services.html#nautobot-service","title":"Nautobot Service","text":"<p>First, we'll establish the <code>systemd</code> unit file for the Nautobot web service. Copy and paste the following into <code>/etc/systemd/system/nautobot.service</code>:</p> <pre><code>[Unit]\nDescription=Nautobot WSGI Service\nDocumentation=https://docs.nautobot.com/projects/core/en/stable/\nAfter=network-online.target\nWants=network-online.target\n[Service]\nType=simple\nEnvironment=\"NAUTOBOT_ROOT=/opt/nautobot\"\nUser=nautobot\nGroup=nautobot\nPIDFile=/var/tmp/nautobot.pid\nWorkingDirectory=/opt/nautobot\nExecStart=/opt/nautobot/bin/nautobot-server start --pidfile /var/tmp/nautobot.pid --ini /opt/nautobot/uwsgi.ini\nExecStop=/opt/nautobot/bin/nautobot-server start --stop /var/tmp/nautobot.pid\nExecReload=/opt/nautobot/bin/nautobot-server start --reload /var/tmp/nautobot.pid\nRestart=on-failure\nRestartSec=30\nPrivateTmp=true\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"user-guide/administration/installation/services.html#nautobot-background-services","title":"Nautobot Background Services","text":"<p>Changed in version 1.1.0</p> <p>Prior to version 1.1.0, Nautobot utilized RQ as the primary background task worker. As of Nautobot 1.1.0, RQ is now deprecated and has been replaced with Celery. RQ and the <code>@job</code> decorator for custom tasks were still supported for the remainder of the 1.x.y releases, but users should migrate the primary worker to Celery.</p> <p>Removed in version 2.0.0</p> <p>RQ support has been fully removed from Nautobot.</p> <p>Next, we will setup the <code>systemd</code> units for the Celery worker and Celery Beat scheduler.</p>"},{"location":"user-guide/administration/installation/services.html#celery-worker","title":"Celery Worker","text":"<p>Added in version 1.1.0</p> <p>The Celery worker service consumes tasks from background task queues and is required for taking advantage of advanced Nautobot features including Jobs, Custom Fields, and Git Repositories, among others.</p> <p>To establish the <code>systemd</code> unit file for the Celery worker, copy and paste the following into <code>/etc/systemd/system/nautobot-worker.service</code>:</p> <pre><code>[Unit]\nDescription=Nautobot Celery Worker\nDocumentation=https://docs.nautobot.com/projects/core/en/stable/\nAfter=network-online.target\nWants=network-online.target\n[Service]\nType=exec\nEnvironment=\"NAUTOBOT_ROOT=/opt/nautobot\"\nUser=nautobot\nGroup=nautobot\nPIDFile=/var/tmp/nautobot-worker.pid\nWorkingDirectory=/opt/nautobot\nExecStart=/opt/nautobot/bin/nautobot-server celery worker --loglevel INFO --pidfile /var/tmp/nautobot-worker.pid\nRestart=always\nRestartSec=30\nPrivateTmp=true\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"user-guide/administration/installation/services.html#celery-beat-scheduler","title":"Celery Beat Scheduler","text":"<p>Added in version 1.2.0</p> <p>The Celery Beat scheduler enables the periodic execution of and scheduling of background tasks. It is required to take advantage of the job scheduling and approval features.</p> <p>To establish the <code>systemd</code> unit file for the Celery Beat scheduler, copy and paste the following into <code>/etc/systemd/system/nautobot-scheduler.service</code>:</p> <pre><code>[Unit]\nDescription=Nautobot Celery Beat Scheduler\nDocumentation=https://docs.nautobot.com/projects/core/en/stable/\nAfter=network-online.target\nWants=network-online.target\n[Service]\nType=exec\nEnvironment=\"NAUTOBOT_ROOT=/opt/nautobot\"\nUser=nautobot\nGroup=nautobot\nPIDFile=/var/tmp/nautobot-scheduler.pid\nWorkingDirectory=/opt/nautobot\nExecStart=/opt/nautobot/bin/nautobot-server celery beat --loglevel INFO --pidfile /var/tmp/nautobot-scheduler.pid\nRestart=always\nRestartSec=30\nPrivateTmp=true\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"user-guide/administration/installation/services.html#migrating-to-celery-from-rq","title":"Migrating to Celery from RQ","text":"<p>Prior to migrating, you need to determine whether you have any plugins installed that run custom background tasks that still rely on the RQ worker. There are a few ways to do this. Two of them are:</p> <ul> <li>Ask your developer or administrator if there are any plugins running background tasks still using the RQ worker</li> <li>If you are savvy with code, search your code for the <code>@job</code> decorator or for <code>from django_rq import job</code></li> </ul> <p>If you're upgrading from Nautobot version 1.0.x and are NOT running plugins that use the RQ worker, all you really need to do are two things.</p> <p>First, you must replace the contents of <code>/etc/systemd/system/nautobot-worker.service</code> with the <code>systemd</code> unit file provided just above.</p> <p>Next, you must update any custom background tasks that you may have written. If you do not have any custom background tasks, then you may continue on to the next section to reload your worker service to use Celery.</p> <p>To update your custom tasks, you'll need to do the following.</p> <ul> <li>Replace each import <code>from django_rq import job</code> with <code>from nautobot.core.celery import nautobot_task</code></li> <li>Replace each decorator of <code>@job</code> with <code>@nautobot_task</code></li> </ul> <p>For example:</p> <pre><code>diff --git a/task_example.py b/task_example.py\nindex f84073fb5..52baf6096 100644\n--- a/task_example.py\n+++ b/task_example.py\n@@ -1,6 +1,6 @@\n-from django_rq import job\n+from nautobot.core.celery import nautobot_task\n-@job(\"default\")\n+@nautobot_task\ndef example_task(*args, **kwargs):\n     return \"examples are cool!\"\n(END)\n</code></pre> <p>Warning</p> <p>Failure to account for the RQ to Celery migration may break your custom background tasks.</p>"},{"location":"user-guide/administration/installation/services.html#configure-systemd","title":"Configure systemd","text":"<p>Because we just added new service files, you'll need to reload the systemd daemon:</p> <pre><code>sudo systemctl daemon-reload\n</code></pre> <p>Then, start the <code>nautobot</code>, <code>nautobot-worker</code>, and <code>nautobot-scheduler</code> services and enable them to initiate at boot time:</p> <pre><code>sudo systemctl enable --now nautobot nautobot-worker nautobot-scheduler\n</code></pre>"},{"location":"user-guide/administration/installation/services.html#verify-the-service","title":"Verify the service","text":"<p>You can use the command <code>systemctl status nautobot.service</code> to verify that the WSGI service is running:</p> <pre><code>\u25cf nautobot.service - Nautobot WSGI Service\n     Loaded: loaded (/etc/systemd/system/nautobot.service; enabled; vendor preset: enabled)\n     Active: active (running) since Fri 2021-03-05 22:23:33 UTC; 35min ago\n       Docs: https://docs.nautobot.com/projects/core/en/stable/\n   Main PID: 6992 (nautobot-server)\n      Tasks: 16 (limit: 9513)\n     Memory: 221.1M\n     CGroup: /system.slice/nautobot.service\n             \u251c\u25006992 /opt/nautobot/bin/python3 /opt/nautobot/bin/nautobot-server start /&gt;\n             \u251c\u25007007 /opt/nautobot/bin/python3 /opt/nautobot/bin/nautobot-server start /&gt;\n             \u251c\u25007010 /opt/nautobot/bin/python3 /opt/nautobot/bin/nautobot-server start /&gt;\n             \u251c\u25007013 /opt/nautobot/bin/python3 /opt/nautobot/bin/nautobot-server start /&gt;\n             \u251c\u25007016 /opt/nautobot/bin/python3 /opt/nautobot/bin/nautobot-server start /&gt;\n             \u2514\u25007019 /opt/nautobot/bin/python3 /opt/nautobot/bin/nautobot-server start /&gt;\n</code></pre> <p>Note</p> <p>If the Nautobot service fails to start, issue the command <code>journalctl -eu nautobot.service</code> to check for log messages that may indicate the problem.</p> <p>Once you've verified that the WSGI service and worker are up and running, move on to HTTP server setup.</p>"},{"location":"user-guide/administration/installation/services.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/administration/installation/services.html#operational-error-incorrect-string-value","title":"Operational Error: Incorrect string value","text":"<p>When using MySQL as a database backend, if you encounter a server error along the lines of <code>Incorrect string value: '\\\\xF0\\\\x9F\\\\x92\\\\x80' for column</code>, it is because you are running afoul of the legacy implementation of Unicode (aka <code>utf8</code>) encoding in MySQL. This often occurs when using modern Unicode glyphs like the famous poop emoji.</p> <p>Please see the configuration guide on MySQL Unicode settings for instructions on how to address this.</p> <p>Please see Computed fields with fallback value that is unicode results in OperationalError (#645) for more details.</p>"},{"location":"user-guide/administration/installation/services.html#svg-images-not-rendered","title":"SVG images not rendered","text":"<p>When serving Nautobot directly from uWSGI on RedHat or CentOS there may be a problem rendering .svg images to include the Nautobot logo. On the RedHat based operating systems there is no file <code>/etc/mime.types</code> by default, unfortunately, uWSGI looks for this file to serve static files (see Serving static files with uWSGI). To work around this copy the file <code>/etc/mime.types</code> from a known good system for example an Ubuntu/Debian system or even the Nautobot container to /opt/nautobot/mime.types. Then add the following line to your <code>uwsgi.ini</code> file and restart the Nautobot services:</p> <pre><code>mime-file = /opt/nautobot/mime.types\n</code></pre> <p>Alternatively, host Nautobot behind Nginx as instructed in HTTP server setup.</p>"},{"location":"user-guide/administration/installation/services.html#test-redis-connectivity","title":"Test Redis Connectivity","text":"<p>From a nautobot shell (<code>nautobot-server shell_plus</code>) use the following Python commands to test connectivity to your Redis server. If successful, python should not return any exceptions.</p> <pre><code>import os\nimport redis\nfrom nautobot.core.settings_funcs import parse_redis_connection\nconnection = parse_redis_connection(0)\nclient = redis.from_url(connection)\nclient.ping() # test basic connectivity\nclient.keys() # retrieve a list of keys in the redis database\nclient.auth(password=os.getenv(\"NAUTOBOT_REDIS_PASSWORD\")) # test password authentication\n</code></pre>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html","title":"Migrating to Nautobot from NetBox","text":""},{"location":"user-guide/administration/migration/migrating-from-netbox.html#review-the-release-notes","title":"Review the Release Notes","text":"<p>Be sure to carefully review all release notes that have been published. In particular, the Nautobot 1.0 release notes include an overview of key changes between NetBox 2.10 and Nautobot 1.0, while later release notes highlight incremental changes between Nautobot versions.</p>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#install-nautobot","title":"Install Nautobot","text":"<p>Install Nautobot as described in the documentation.</p>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#configure-nautobot","title":"Configure Nautobot","text":"<p>Although Nautobot will run perfectly well with a default configuration (such as generated by <code>nautobot-server init</code>, you may want to replicate aspects of your previous NetBox configuration to Nautobot. Refer to the configuration documentation for details on the available options.</p>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#migrate-database-contents-using-nautobot-netbox-importer","title":"Migrate Database Contents Using <code>nautobot-netbox-importer</code>","text":"<p>Due to a number of significant infrastructural changes between the applications, you cannot simply point Nautobot at your existing NetBox PostgreSQL database and have it automatically load your data. Fortunately, Network to Code (NTC) and collaborators have developed a Nautobot plugin, <code>nautobot-netbox-importer</code>, that can be used to import a NetBox database dump file into Nautobot. For full details, refer to the plugin's own documentation, but here is a brief overview:</p> <ol> <li>Export your NetBox database to a JSON file.</li> <li>Install the importer plugin.</li> <li>Enable the importer plugin.</li> <li>Run the plugin's import command to import the data.</li> <li>Connect to Nautobot and verify that your data has been successfully imported.</li> </ol>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#migrate-files-from-netbox-to-nautobot","title":"Migrate Files from NetBox to Nautobot","text":"<p>Uploaded media (device images, etc.) are stored on the filesystem rather than in the database and hence need to be migrated separately. The same is true for custom scripts and reports that you may wish to import.</p>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#copy-uploaded-media","title":"Copy Uploaded Media","text":"<p>The exact command will depend on where your <code>MEDIA_ROOT</code> is configured in NetBox as well as where it's configured in Nautobot, but in general it will be:</p> <pre><code>cp -pr $NETBOX_MEDIA_ROOT/* $NAUTOBOT_MEDIA_ROOT/*\n</code></pre>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#copy-custom-scripts-and-reports","title":"Copy Custom Scripts and Reports","text":"<p>Similarly, the exact commands depend on your <code>SCRIPTS_ROOT</code> and <code>REPORTS_ROOT</code> settings in NetBox and your <code>JOBS_ROOT</code> in Nautobot, but in general they will be:</p> <pre><code>cp -pr $NETBOX_SCRIPTS_ROOT/* $NAUTOBOT_JOBS_ROOT/\ncp -pr $NETBOX_REPORTS_ROOT/* $NAUTOBOT_JOBS_ROOT/\n</code></pre>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#update-scripts-reports-and-plugins-for-nautobot-compatibility","title":"Update Scripts, Reports, and Plugins for Nautobot compatibility","text":"<p>Depending on the complexity of your scripts, reports, or plugins, and how tightly integrated with NetBox they were, it may be simple or complex to port them to be compatible with Nautobot, and we cannot possibly provide a generalized step-by-step guide that would cover all possibilities. One change that you will certainly have to make to even begin this process, however, is updating the Python module names for any modules that were being imported from NetBox:</p> <ul> <li><code>circuits.* -&gt; nautobot.circuits.*</code></li> <li><code>dcim.* -&gt; nautobot.dcim.*</code></li> <li><code>extras.* -&gt; nautobot.extras.*</code></li> <li><code>ipam.* -&gt; nautobot.ipam.*</code></li> <li><code>netbox.* -&gt; nautobot.core.*</code></li> <li><code>tenancy.* -&gt; nautobot.tenancy.*</code></li> <li><code>utilities.* -&gt; nautobot.core.*</code></li> <li><code>virtualization.* -&gt; nautobot.virtualization.*</code></li> </ul> <p>Changed in version 2.0.0</p> <p>The equivalent of NetBox's <code>utilities</code> module moved from <code>nautobot.utilities</code> to <code>nautobot.core</code>.</p>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#update-your-other-integration-code","title":"Update Your other Integration Code","text":"<p>If you have developed any custom integrations or plugins you may need to update some of your calls. Please see the data model changes below for guidance.</p>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#data-model-changes","title":"Data Model Changes","text":"<p>The following backwards-incompatible changes have been made to the data model in Nautobot.</p>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#status-fields","title":"Status Fields","text":"<p>A new <code>Status</code> model has been added to represent the <code>status</code> field for many models. Each status has a human-readable <code>name</code> field (e.g. <code>Active</code>), a <code>color</code>, a <code>description</code>, and a set of <code>content_types</code> that it can be applied to (for example, <code>Device</code> and <code>Location</code>).</p>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#display-name","title":"Display name","text":"<p>Several models such as device type and VLAN exposed a <code>display_name</code> property, which has now been renamed to <code>display</code>. In fact, there are several other instances, especially in the REST API, where the <code>display_name</code> field was used and as such, all instances have been renamed to <code>display</code>.</p>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#default-choices","title":"Default Choices","text":"<p>Because <code>status</code> fields are now stored in the database, they cannot have a default value, just like other similar objects like Device Roles or Device Types. In cases where <code>status</code> was not required to be set because it would use the default value, you must now provide a <code>status</code> yourself.  </p>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#choices-in-code","title":"Choices in Code","text":"<p>All <code>*StatusChoices</code> enums used for populated <code>status</code> field choices (such as <code>nautobot.dcim.choices.DeviceStatusChoices</code>) are deprecated. Any code you have that is leveraging these will now result in an error when performing lookups on objects with <code>status</code> fields.</p> <p>Anywhere you have code like this:</p> <pre><code>from dcim.choices import DeviceStatusChoices\nfrom dcim.models import Device\nDevice.objects.filter(status=DeviceStatusChoices.STATUS_PLANNED)\n</code></pre> <p>Update it to this:</p> <pre><code>from nautobot.extras.models import Status\nfrom nautobot.dcim.models import Device\nDevice.objects.filter(status=Status.objects.get(name=\"Planned\"))\n</code></pre>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#uuid-primary-database-keys","title":"UUID Primary Database Keys","text":"<p>Tip</p> <p>Primary key (aka ID) fields are no longer auto-incrementing integers and are now randomly-generated UUIDs.</p> <p>Database keys are now defined as randomly-generated Universally Unique Identifiers (UUIDs) instead of integers, protecting against certain classes of data-traversal attacks.</p>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#merge-of-userconfig-data-into-user-model","title":"Merge of UserConfig data into User model","text":"<p>There is no longer a distinct <code>UserConfig</code> model; instead, user configuration and preferences are stored directly on the <code>User</code> model under the key <code>config_data</code>.</p>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#custom-fields","title":"Custom Fields","text":"<p>Tip</p> <p>You can no longer rename or change the type of a custom field.</p> <p>Custom Fields have been overhauled for asserting data integrity and improving user experience.</p> <ul> <li>Custom Fields can no longer be renamed or have their type changed after they have been created.</li> <li>Choices for Custom Fields are now stored as discrete <code>CustomFieldChoice</code> database objects. Choices that are in active use cannot be deleted.</li> </ul>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#ipam-network-field-types","title":"IPAM Network Field Types","text":"<p>Tip</p> <p>Nautobot 1.2 and later supports most of the same filter-based network membership queries as NetBox. See below and the filtering documentation for more details. (Prior to Nautobot 1.2, IPAM network objects only supported model-manager-based methods for network membership filtering.)</p> <p>All IPAM objects with network field types (<code>ipam.IPAddress</code>, and <code>ipam.Prefix</code>) are no longer hard-coded to use PostgreSQL-only <code>inet</code> or <code>cidr</code> field types and are now using a custom implementation leveraging SQL-standard <code>varbinary</code> field types.</p>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#technical-details","title":"Technical Details","text":"<p>Below is a summary of the underlying technical changes to network fields. These will be explained in more detail in the following sections.</p> <ul> <li>For <code>IPAddress</code>, the <code>address</code> field was exploded out to <code>host</code> and <code>mask_length</code> fields; <code>address</code> was converted into a computed field.</li> <li>For <code>Prefix</code> objects, the <code>prefix</code> field was exploded out to <code>network</code>, <code>broadcast</code>, and <code>prefix_length</code> fields; <code>prefix</code> was converted into a computed field.</li> <li>The <code>host</code>, <code>network</code>, and <code>broadcast</code> fields are now of a <code>varbinary</code> database type, which is represented as a packed binary integer (for example, the host <code>1.1.1.1</code> is packed as <code>b\"\\x01\\x01\\x01\\x01\"</code>)</li> <li>Network membership queries are accomplished by triangulating the \"position\" of an address using the <code>host</code> of the <code>IPAddress</code> and the <code>network</code> and <code>broadcast</code> of the <code>Prefix</code>.</li> </ul> <p>Note</p> <p>You should never have to worry about the binary nature of how the network fields are stored in the database! The Django database ORM takes care of it all!</p>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#changes-to-ipaddress","title":"Changes to <code>IPAddress</code>","text":"<p>The following fields have changed when working with <code>ipam.IPAddress</code> objects:</p>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#address-is-now-a-computed-field","title":"<code>address</code> is now a computed field","text":"<p>This field is computed from <code>{host}/{mask_length}</code> and is represented as a <code>netaddr.IPNetwork</code> object.</p> <pre><code>&gt;&gt;&gt; ip = IPAddress(address=\"1.1.1.1/30\")\n&gt;&gt;&gt; ip.address\nIPNetwork('1.1.1.1/30')\n</code></pre> <p>While this field is now a virtual field, it can still be used in many ways.</p> <p>It can be used to create objects:</p> <pre><code>&gt;&gt;&gt; ip = IPAddress.objects.create(address=\"1.1.1.1/30\")\n</code></pre> <p>It can be used in <code>.get()</code> and <code>.filter()</code> lookups where <code>address</code> is the primary argument:</p> <pre><code>&gt;&gt;&gt; IPAddress.objects.get(address=\"1.1.1.1/30\")\nIPNetwork('1.1.1.1/30')\n&gt;&gt;&gt; IPAddress.objects.filter(address=\"1.1.1.1/30\")\n&lt;IPAddressQuerySet [&lt;IPAddress: 1.1.1.1/30&gt;]&gt;\n</code></pre> <p>Note</p> <p>If you use a <code>mask_length</code> other than <code>/32</code> (IPv4) or <code>/128</code> (IPv6) it must be included in your lookups</p> <p>This field cannot be used in nested filter expressions:</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(primary_ip4__address=\"1.1.1.1\")\ndjango.core.exceptions.FieldError: Related Field got invalid lookup: address\n</code></pre>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#host-contains-the-ip-address","title":"<code>host</code> contains the IP address","text":"<p>The IP (host) component of the address is now stored in the <code>host</code> field.</p> <pre><code>&gt;&gt;&gt; ip.host\n'1.1.1.1'\n</code></pre> <p>This field can be used in nested filter expressions, for example:</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(primary_ip4__host=\"1.1.1.1\")\n</code></pre>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#ipaddress-mask_length-contains-the-prefix-length","title":"IPAddress <code>mask_length</code> contains the prefix length","text":"<p>This is an integer, such as <code>30</code> for <code>/30</code>.</p> <pre><code>&gt;&gt;&gt; ip.mask_length\n30\n</code></pre> <p>For IP addresses with a mask length other than a host prefix, you will need to filter using <code>host</code> and <code>mask_length</code> fields for greater accuracy.</p> <p>For example, if you have multiple <code>IPAddress</code> objects with the same <code>host</code> value but different <code>mask_length</code>:</p> <pre><code>&gt;&gt;&gt; IPAddress.objects.create(address=\"1.1.1.1/32\")\n&lt;IPAddress: 1.1.1.1/32&gt;\n&gt;&gt;&gt; IPAddress.objects.filter(host=\"1.1.1.1\")\n&lt;IPAddressQuerySet [&lt;IPAddress: 1.1.1.1/30&gt;, &lt;IPAddress: 1.1.1.1/32&gt;]&gt;\n&gt;&gt;&gt; IPAddress.objects.filter(host=\"1.1.1.1\", mask_length=30)\n&lt;IPAddressQuerySet [&lt;IPAddress: 1.1.1.1/30&gt;]&gt;\n</code></pre>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#changes-to-aggregate-and-prefix","title":"Changes to <code>Aggregate</code> and <code>Prefix</code>","text":"<p>The following fields have changed when working with <code>ipam.Aggregate</code> and <code>ipam.Prefix</code> objects.</p>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#aggregate-model-merged-into-prefix","title":"<code>Aggregate</code> model merged into <code>Prefix</code>","text":"<p>The Aggregate model has been removed in Nautobot and its functionality was moved to the Prefix model. The <code>rir</code> and <code>tenant</code> fields were directly copied over to Prefix, the <code>date_added</code> field was renamed to <code>date_allocated</code> and changed to a DateTimeField in Prefix.</p>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#prefix-is-now-a-computed-field","title":"<code>prefix</code> is now a computed field","text":"<p>This field is computed from <code>{network}/{prefix_length}</code> and is represented as a <code>netaddr.IPNetwork</code> object.</p> <p>While this field is now a virtual field, it can still be used in many ways.</p> <p>It can be used to create objects:</p> <pre><code>&gt;&gt;&gt; net = Prefix.objects.create(prefix=\"1.1.1.0/24\")\n</code></pre> <p>It can be used in <code>.get()</code> and <code>.filter()</code> lookups where <code>prefix</code> is the primary argument:</p> <pre><code>&gt;&gt;&gt; Prefix.objects.get(prefix=\"1.1.1.0/24\")\n&lt;Prefix: 1.1.1.0/24&gt;\n&gt;&gt;&gt; Prefix.objects.filter(prefix=\"1.1.1.0/24\")\n&lt;PrefixQuerySet [&lt;Prefix: 1.1.1.0/24&gt;]&gt;\n</code></pre>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#network-contains-the-network-address","title":"<code>network</code> contains the network address","text":"<p>The network component of the address is now stored in the <code>network</code> field.</p> <pre><code>&gt;&gt;&gt; net.network\n'1.1.1.0'\n</code></pre>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#prefix-prefix_length-contains-the-prefix-length","title":"Prefix <code>prefix_length</code> contains the prefix length","text":"<p>This is an integer, such as <code>24</code> for <code>/24</code>.</p> <pre><code>&gt;&gt;&gt; net.prefix_length\n24\n</code></pre> <p>It's highly likely that you will have multiple objects with the same <code>network</code> address but varying prefix lengths, so you will need to filter using <code>network</code> and <code>prefix_length</code> fields for greater accuracy.</p> <p>For example, if you have multiple <code>Prefix</code> objects with the same <code>network</code> value but different <code>prefix_length</code>:</p> <pre><code>&gt;&gt;&gt; Prefix.objects.create(prefix=\"1.1.1.0/25\")\n&lt;Prefix: 1.1.1.0/25&gt;\n&gt;&gt;&gt; Prefix.objects.filter(network=\"1.1.1.0\")\n&lt;PrefixQuerySet [&lt;Prefix: 1.1.1.0/24&gt;, &lt;Prefix: 1.1.1.0/25&gt;]&gt;\n&gt;&gt;&gt; Prefix.objects.filter(network=\"1.1.1.0\", prefix_length=25)\n&lt;PrefixQuerySet [&lt;Prefix: 1.1.1.0/25&gt;]&gt;\n</code></pre>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#prefix-broadcast-contains-the-broadcast-address","title":"Prefix <code>broadcast</code> contains the broadcast address","text":"<p>The <code>broadcast</code> will be derived from the <code>prefix_length</code> and will be that of the last network address for that prefix length (e.g. <code>1.1.1.255</code>):</p> <pre><code>&gt;&gt;&gt; Prefix.objects.get(prefix=\"1.1.1.0/24\").broadcast\n'1.1.1.255'\n</code></pre> <p>Note</p> <p>This field is largely for internal use only for facilitating network membership queries and it is not recommend that you use it for filtering.</p>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#membership-lookups","title":"Membership Lookups","text":"<p>Nautobot 1.0.x and 1.1.x did not support the custom lookup expressions that NetBox supported for membership queries on IPAM objects (such as <code>Prefix.objects.filter(prefix__net_contained=\"10.0.0.0/24\")</code>), but instead provided an alternate approach using model manager methods (such as <code>Prefix.objects.net_contained(\"10.0.0.0/24\")</code>).</p> <p>In Nautobot 1.2.0 and later, both model manager methods and custom lookup expressions are supported for this purpose, but the latter are now preferred for most use cases and are generally equivalent to their counterparts in NetBox.</p> <p>Note</p> <p>Nautobot did not mimic the support of non-subnets for the <code>net_in</code> query to avoid mistakes and confusion caused by an IP address being mistaken for a /32 as an example.</p>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#net_mask_length","title":"net_mask_length","text":"<p>Returns target addresses matching the source address prefix length.</p> <p>Note</p> <p>The NetBox filter net_mask_length should use the <code>prefix_length</code> field for filtering.</p> <p>NetBox:</p> <pre><code>IPAddress.objects.filter(address__net_mask_length=value)\n# or\nPrefix.objects.filter(prefix__net_mask_length=value)\n</code></pre> <p>Nautobot:</p> <pre><code>IPAddress.objects.filter(mask_length=value)\n# or\nPrefix.objects.filter(prefix_length=value)\n</code></pre>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#rest-api-changes","title":"REST API Changes","text":"<p>The following backwards-incompatible changes have been made to the REST API in Nautobot.</p>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#display-field","title":"Display field","text":"<p>In several endpoints such as device type and VLAN, a <code>display_name</code> field is used to expose a human friendly string value for the object. This field has been renamed to <code>display</code> and has been standardized across all model API endpoints.</p>"},{"location":"user-guide/administration/migration/migrating-from-netbox.html#custom-field-choices","title":"Custom Field Choices","text":"<p>Custom field choices are exposed in Nautobot at a dedicated endpoint: <code>/api/extras/custom-field-choices/</code>. This replaces the <code>choices</code> field on on the CustomField model and the subsequent endpoint: <code>/api/extras/custom-fields/</code></p>"},{"location":"user-guide/administration/migration/migrating-from-postgresql.html","title":"Migrating from PostgreSQL to MySQL","text":"<p>This document explains how to migrate the contents of an existing Nautobot PostgreSQL database to a new MySQL database.</p>"},{"location":"user-guide/administration/migration/migrating-from-postgresql.html#export-data-from-postgresql","title":"Export data from PostgreSQL","text":"<p>In your existing installation of Nautobot with PostgreSQL, run the following command to generate a JSON dump of the database contents. This may take several minutes to complete depending on the size of your database. From the Postgres host <code>(nautobot-postgres) $</code>:</p> <pre><code>nautobot-server dumpdata \\\n    --exclude auth.permission \\\n    --format json \\\n    --indent 2 \\\n    --traceback \\\n    &gt; nautobot_dump.json\n</code></pre> <p>Changed in version 1.5.23</p> <ul> <li>We do not recommend at this time using <code>--natural-primary</code> as this can result in inconsistent or incorrect data for data models that use GenericForeignKeys, such as <code>Cable</code>, <code>Note</code>, <code>ObjectChange</code>, and <code>Tag</code>.</li> <li>We also do not recommend at this time using <code>--natural-foreign</code> as it can potentially result in errors if any data models incorrectly implement their <code>natural_key()</code> and/or <code>get_by_natural_key()</code> API methods.</li> <li><code>contenttypes</code> must not be excluded from the dump (it could be excluded previously due to the use of <code>--natural-foreign</code>).</li> </ul> <p>Warning</p> <p>Because of the different SQL dialects used by PostgreSQL and MySQL, Django's JSON database dump format is being used as the go-between for migrating your database contents from the one system to the other. This is a different case than general database backup and recovery; for best practices there, please refer to Database Backup.</p> <p>This will result in a file named <code>nautobot_dump.json</code>.</p>"},{"location":"user-guide/administration/migration/migrating-from-postgresql.html#create-the-mysql-database","title":"Create the MySQL database","text":"<p>Create the MySQL database for Nautobot, ensuring that it is utilizing the default character set (<code>utf8mb4</code>) and default collation (<code>utf8mb4_0900_ai_ci</code>) settings for case-insensitivity. It is required that MySQL will be case-insensitive. Because these encodings are the defaults, if your MySQL installation has not been modified, there will be nothing for you to do other than make sure.</p> <p>In very rare cases, there may be problems when importing your data from the case-sensitive PostgreSQL database dump that will need to be handled on a case-by-case basis. Please refer to the instructions as necessary if you are unsure how to set up MySQL and create the Nautobot database.</p>"},{"location":"user-guide/administration/migration/migrating-from-postgresql.html#confirming-database-encoding","title":"Confirming database encoding","text":"<p>To confirm that your MySQL database has the correct encoding, you may start up a database shell using <code>nautobot-server dbshell</code> and run the following command with the prompt <code>(nautobot-mysql) $</code></p> <pre><code>nautobot-server dbshell\nmysql&gt; SELECT @@character_set_database, @@collation_database;\n+--------------------------+----------------------+\n| @@character_set_database | @@collation_database |\n+--------------------------+----------------------+\n| utf8mb4                  | utf8mb4_0900_ai_ci   |\n+--------------------------+----------------------+\n1 row in set (0.00 sec)\n</code></pre>"},{"location":"user-guide/administration/migration/migrating-from-postgresql.html#apply-database-migrations-to-the-mysql-database","title":"Apply database migrations to the MySQL database","text":"<p>With Nautobot pointing to the MySQL database (we recommend creating a new Nautobot installation for this purpose), run <code>nautobot-server migrate</code> to create all of Nautobot's tables in the MySQL database <code>(nautobot-mysql) $</code>:</p> <pre><code>nautobot-server migrate\n</code></pre>"},{"location":"user-guide/administration/migration/migrating-from-postgresql.html#remove-auto-populated-records-from-the-mysql-database","title":"Remove auto-populated records from the MySQL database","text":"<p>A side effect of the <code>nautobot-server migrate</code> command is that it will populate the <code>ContentType</code>, <code>Job</code>, and <code>Status</code> tables with a number of predefined records. Depending on what Nautobot App(s) you have installed, the app(s) may also have auto-created database records of their own, such as <code>CustomField</code> or <code>Tag</code> records, in response to <code>nautobot-server migrate</code>. This is normally useful for getting started quickly with Nautobot, but since we're going to be importing data from our other database, these records will likely conflict with the records to be imported. Therefore we need to remove them, using the <code>nautobot-server nbshell</code> command in our MySQL instance of Nautobot (<code>(nautobot-mysql) $</code> shell prompt):</p> <pre><code>nautobot-server nbshell\n</code></pre> <p>Enter the following Python commands into the shell:</p> <pre><code>from django.apps import apps\nfor model in apps.get_models():\nif model._meta.managed and model.objects.exists():\nprint(f\"Deleting objects of {model}\")\nprint(model.objects.all().delete())\n</code></pre> <p>Example output:</p> <pre><code>...\n# Django version 3.2.16\n# Nautobot version 2.0.0a0\n# Example Nautobot App version 1.0.0\nPython 3.8.16 (default, Mar 23 2023, 04:48:11)\n[GCC 10.2.1 20210110] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n&gt;&gt;&gt; from django.apps import apps\n&gt;&gt;&gt; for model in apps.get_models():\n...     if model._meta.managed and model.objects.exists():\n...         print(f\"Deleting objects of {model}\")\n...         print(model.objects.all().delete())\n...\nDeleting objects of &lt;class 'django.contrib.auth.models.Permission'&gt;\n(465, {'auth.Permission': 465})\nDeleting objects of &lt;class 'django.contrib.contenttypes.models.ContentType'&gt;\n(186, {'extras.CustomField_content_types': 1, 'extras.Status_content_types': 68, 'contenttypes.ContentType': 117})\nDeleting objects of &lt;class 'nautobot.extras.models.customfields.CustomField'&gt;\n(1, {'extras.CustomField': 1})\nDeleting objects of &lt;class 'nautobot.extras.models.statuses.Status'&gt;\n(20, {'extras.Status': 20})\nDeleting objects of &lt;class 'nautobot.extras.models.jobs.Job'&gt;\n(6, {'extras.Job': 6})\n</code></pre> <p>Press Control-D to exit the <code>nbshell</code> when you are finished.</p>"},{"location":"user-guide/administration/migration/migrating-from-postgresql.html#import-the-database-dump-into-mysql","title":"Import the database dump into MySQL","text":"<p>Use the <code>nautobot-server loaddata</code> command to import the database dump that you previously created. This may take several minutes to complete depending on the size of your database. This is from the MySQL host with the prompt (<code>(nautobot-mysql) $</code>):</p> <pre><code>nautobot-server loaddata --traceback nautobot_dump.json\n</code></pre> <p>Assuming that the command ran to completion with no errors, you should now have a fully populated clone of your original database in MySQL.</p>"},{"location":"user-guide/administration/migration/migrating-from-postgresql.html#rebuild-cached-cable-path-traces","title":"Rebuild cached cable path traces","text":"<p>Because cable path traces contain cached data which includes denormalized references to other database objects, it's possible that this cached data will be inaccurate after doing a <code>loaddata</code>. Fortunately there is a <code>nautobot-server</code> command to force rebuilding of these caches, and we recommend doing so after the import is completed:</p> <pre><code>nautobot-server trace_paths --force --no-input\n</code></pre>"},{"location":"user-guide/administration/tools/nautobot-server.html","title":"The Nautobot Server Command","text":"<p>Nautobot includes a command-line (CLI) management utility called <code>nautobot-server</code>, that is used as a single entrypoint for common administrative tasks.</p>"},{"location":"user-guide/administration/tools/nautobot-server.html#background","title":"Background","text":"<p>For those familiar with Django applications, this CLI utility works exactly as a project's <code>manage.py</code> script would, except that it comes bundled with the Nautobot code and therefore it gets automatically installed in the <code>bin</code> directory of your application environment.</p> <p>Important</p> <p>Since Nautobot is a Django application, there are a number of built-in management commands that will not be covered in this document. Please see the official Django documentation on management commands for more information.</p> <p>Important</p> <p>Django does not recognize <code>nautobot-server</code>. Anywhere <code>python manage.py</code> is mentioned, it is safe to replace with <code>nautobot-server</code>.</p>"},{"location":"user-guide/administration/tools/nautobot-server.html#getting-help","title":"Getting Help","text":"<p>To see all available management commands as the Nautobot user:</p> <pre><code>nautobot-server help\n</code></pre> <p>All management commands have a <code>-h/--help</code> flag to list all available arguments for that command, for example:</p> <pre><code>nautobot-server migrate --help\n</code></pre>"},{"location":"user-guide/administration/tools/nautobot-server.html#available-commands","title":"Available Commands","text":""},{"location":"user-guide/administration/tools/nautobot-server.html#audit_dynamic_groups","title":"<code>audit_dynamic_groups</code>","text":"<p><code>nautobot-server audit_dynamic_groups</code></p> <p>After upgrading your Nautobot instance from v1.x to v2.x, breaking changes made to model filter fields will, in some cases, invalidate existing <code>DynamicGroup</code> instances' filter data. <code>nautobot-server audit_dynamic_groups</code> is a helper command to assist you in cleaning up <code>DynamicGroup</code> filter data by spotting invalid filters and outputting them to the command line interface.</p> <pre><code>nautobot-server audit_dynamic_groups\n</code></pre> <p>Example output:</p> <p>If you have invalid filters in your <code>DynamicGroup</code> instances, the following output should be expected:</p> <pre><code>&gt;&gt;&gt; Auditing existing DynamicGroup data for invalid filters ...\n\n    DynamicGroup instance with name `Test DP` and content type `dcim | rack` has an invalid filter `site`\n    DynamicGroup instance with name `Test DP` and content type `dcim | rack` has an invalid filter `length`\n    DynamicGroup instance with name `Test DP` and content type `dcim | rack` has an invalid filter `region`\n    DynamicGroup instance with name `Test DP 1` and content type `ipam | IP address` has an invalid filter `site`\n    DynamicGroup instance with name `Test DP 1` and content type `ipam | IP address` has an invalid filter `length`\n    DynamicGroup instance with name `Test DP 2` and content type `dcim | device` has an invalid filter `site`\n    DynamicGroup instance with name `Test DP 2` and content type `dcim | device` has an invalid filter `region`\n    DynamicGroup instance with name `Test DP 3` and content type `dcim | device redundancy group` has an invalid filter `site`\n    DynamicGroup instance with name `Test DP 3` and content type `dcim | device redundancy group` has an invalid filter `length`\n    DynamicGroup instance with name `Test DP 3` and content type `dcim | device redundancy group` has an invalid filter `region`\n    DynamicGroup instance with name `Test DP 4` and content type `example_plugin | another example model` has an invalid filter `site`\n\n&gt;&gt;&gt; Please fix the broken filters stated above according to the documentation available at:\nhttps://docs.nautobot.com/projects/core/en/stable/user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1/#ui-graphql-and-rest-api-filter-changes\n</code></pre> <p>If your filter data is valid, you should see a success message at the end of the output:</p> <pre><code>&gt;&gt;&gt; Auditing existing DynamicGroup data for invalid filters ...\n\n&gt;&gt;&gt; All DynamicGroup filters are validated successfully!\n</code></pre>"},{"location":"user-guide/administration/tools/nautobot-server.html#audit_graphql_queries","title":"<code>audit_graphql_queries</code>","text":"<p><code>nautobot-server audit_graphql_queries</code></p> <p>After upgrading your Nautobot instance from v1.x to v2.x, breaking changes made to model filter fields will, in some cases, invalidate existing <code>GraphQLQuery</code> instances' query data. <code>nautobot-server audit_graphql_queries</code> is a helper command to assist you in cleaning up <code>GraphQLQuery</code> query data by spotting invalid query filters and outputting them to the command line interface.</p> <pre><code>nautobot-server audit_graphql_queries\n</code></pre> <p>Example output:</p> <p>If you have invalid query data in your <code>GraphQLQuery</code> instances, the following output should be expected:</p> <pre><code>&gt;&gt;&gt; Auditing existing GraphQLQuery data for invalid queries ...\n\n&gt;&gt;&gt; The following GraphQLQuery instances have invalid query data:\n\n    GraphQLQuery with name `Wrong Query` has invalid query data: [{'message': 'Unknown argument \"site\" on field \"racks\" of type \"Query\".', 'locations': [{'line': 2, 'column': 19}]}]\n    GraphQLQuery with name `Wrong Query 1` has invalid query data: [{'message': 'Unknown argument \"site\" on field \"device\" of type \"Query\".', 'locations': [{'line': 2, 'column': 14}]}]\n    GraphQLQuery with name `Wrong Query 2` has invalid query data: [{'message': \"{'location': ['Select a valid choice. Location 01 is not one of the available choices.']}\", 'locations': [{'line': 5, 'column': 8}], 'path': ['devices']}]\n\n&gt;&gt;&gt; Please fix the outdated query data stated above according to the documentation available at:\nhttps://docs.nautobot.com/projects/core/en/stable/user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1/#ui-graphql-and-rest-api-filter-changes\n</code></pre> <p>If your query data is valid, you should see a success message at the end of the output:</p> <pre><code>&gt;&gt;&gt; Auditing existing GraphQLQuery data for invalid queries ...\n\n&gt;&gt;&gt; All GraphQLQuery queries are validated successfully!\n</code></pre>"},{"location":"user-guide/administration/tools/nautobot-server.html#build_ui","title":"<code>build_ui</code>","text":"<p><code>nautobot-server build_ui</code></p> <p>Build or rebuild the UI for the Nautobot server environment and installed Nautobot Apps.</p> <p>Here are some commonly used flags:</p> <ol> <li><code>--npm-install</code> - Install UI packages.</li> <li><code>--no-render-apps</code> - Do not render Nautobot App imports.</li> <li><code>--no-npm-build</code> - Do not compile UI.</li> </ol>"},{"location":"user-guide/administration/tools/nautobot-server.html#celery","title":"<code>celery</code>","text":"<p><code>nautobot-server celery</code></p> <p>Celery command entrypoint which serves as a thin wrapper to the <code>celery</code> command that includes the Nautobot Celery application context. This allows us to execute Celery commands without having to worry about the chicken-and-egg problem with bootstrapping the Django settings.</p> <p>Most commonly you will be using this command to start the Celery worker process:</p> <pre><code>nautobot-server celery worker --loglevel INFO --pidfile $(pwd)/nautobot-celery.pid -n worker1\n</code></pre> <p>Output:</p> <pre><code>celery@worker1 v5.1.1 (sun-harmonics)\n\n[config]\n.&gt; app:         nautobot:0x10c357eb0\n.&gt; transport:   redis://localhost:6379/0\n.&gt; results:     redis://localhost:6379/0\n.&gt; concurrency: 8 (prefork)\n.&gt; task events: OFF (enable -E to monitor tasks in this worker)\n\n[queues]\n.&gt; celery           exchange=celery(direct) key=celery\n\n[tasks]\n  . nautobot.core.tasks.get_releases\n  . nautobot.extras.datasources.git.pull_git_repository_and_refresh_data\n  . nautobot.extras.jobs.run_job\n  . nautobot.extras.tasks.delete_custom_field_data\n  . nautobot.extras.tasks.process_webhook\n  . nautobot.extras.tasks.provision_field\n  . nautobot.extras.tasks.update_custom_field_choice_data\n\n[2021-07-01 21:32:40,680: INFO/MainProcess] Connected to redis://localhost:6379/0\n[2021-07-01 21:32:40,690: INFO/MainProcess] mingle: searching for neighbors\n[2021-07-01 21:32:41,713: INFO/MainProcess] mingle: all alone\n[2021-07-01 21:32:41,730: INFO/MainProcess] celery@worker1 ready.\n</code></pre> <p>Note</p> <p>The internals of this command are built into Celery. Please see the official Celery workers guide for more information.</p>"},{"location":"user-guide/administration/tools/nautobot-server.html#collectstatic","title":"<code>collectstatic</code>","text":"<p><code>nautobot-server collectstatic</code></p> <p>Collect static files into <code>STATIC_ROOT</code>.</p> <pre><code>nautobot-server collectstatic\n</code></pre> <p>Output:</p> <pre><code>965 static files copied to '/opt/nautobot/static'.\n</code></pre> <p>Note</p> <p>This is a built-in Django command. Please see the official documentation on <code>collectstatic</code> for more information.</p>"},{"location":"user-guide/administration/tools/nautobot-server.html#createsuperuser","title":"<code>createsuperuser</code>","text":"<p><code>nautobot-server createsuperuser</code></p> <p>Creates a superuser account that has all permissions.</p> <pre><code>nautobot-server createsuperuser\n</code></pre> <p>This provides the following output:</p> <pre><code>Username (leave blank to use 'jathan'): example\nEmail address: example@localhost\nPassword:\nPassword (again):\nSuperuser created successfully.\n</code></pre> <p>Note</p> <p>This is a built-in Django command. Please see the official documentation on <code>createsuperuser</code> for more information.</p>"},{"location":"user-guide/administration/tools/nautobot-server.html#dbshell","title":"<code>dbshell</code>","text":"<p><code>nautobot-server dbshell</code></p> <p>A shell for your database. This can be very useful in troubleshooting raw database issues.</p> <p>Danger</p> <p>This is an advanced feature that gives you direct access to run raw SQL queries. Use this very cautiously as you can cause irreparable damage to your Nautobot installation.</p> <pre><code>nautobot-server dbshell\n</code></pre> <p>Output:</p> <pre><code>psql (12.6 (Ubuntu 12.6-0ubuntu0.20.04.1))\nSSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)\nType \"help\" for help.\n\nnautobot=&gt; \\conninfo\nYou are connected to database \"nautobot\" as user \"nautobot\" on host \"localhost\" (address \"::1\") at port \"5432\".\nSSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)\nnautobot=&gt; \\q\n</code></pre> <p>Note</p> <p>This is a built-in Django command. Please see the official documentation on <code>dbshell</code> for more information.</p>"},{"location":"user-guide/administration/tools/nautobot-server.html#dumpdata","title":"<code>dumpdata</code>","text":"<p>Changed in version 1.3.0</p> <ul> <li><code>extras.job</code> should now be included in the dump (removed <code>--exclude extras.job</code> from the example usage)</li> <li><code>django_rq</code> should now be excluded from the dump (added <code>--exclude django_rq</code> to the example usage)</li> </ul> <p>Changed in version 1.5.23</p> <ul> <li>We do not recommend at this time using <code>--natural-primary</code> as this can result in inconsistent or incorrect data for data models that use GenericForeignKeys, such as <code>Cable</code>, <code>Note</code>, <code>ObjectChange</code>, and <code>Tag</code>.</li> <li>We also do not recommend at this time using <code>--natural-foreign</code> as it can potentially result in errors if any data models incorrectly implement their <code>natural_key()</code> and/or <code>get_by_natural_key()</code> API methods.</li> <li><code>contenttypes</code> must not be excluded from the dump (it could be excluded previously due to the use of <code>--natural-foreign</code>).</li> </ul> <p>Changed in version 2.0.0</p> <ul> <li><code>django_rq</code> is no longer part of Nautobot's dependencies and so no longer needs to be explicitly excluded.</li> </ul> <pre><code>nautobot-server dumpdata \\\n  --exclude auth.permission \\\n  --format json \\\n  --indent 2 \\\n  --traceback \\\n  &gt; nautobot_dump.json\n</code></pre> <p>Use this command to generate a JSON dump of the database contents.</p> <p>One example of using this command would be to export data from PostgreSQL and then import the data dump into MySQL.</p> <p>Warning</p> <p>While this command can be used in combination with <code>nautobot-server loaddata</code> as a way to do database backup-and-restore, it's not generally the most efficient or straightforward way to do so. Refer to Database Backup for recommendations.</p>"},{"location":"user-guide/administration/tools/nautobot-server.html#fix_custom_fields","title":"<code>fix_custom_fields</code>","text":"<p><code>nautobot-server fix_custom_fields [app_label.ModelName [app_label.ModelName ...]]</code></p> <p>Adds/Removes any custom fields which should or should not exist on an object. This command should not be run unless a custom fields jobs has failed:</p> <pre><code>nautobot-server fix_custom_fields\n</code></pre> <p>Example output:</p> <pre><code>Processing ContentType dcim | device\nProcessing ContentType dcim | location\nProcessing ContentType dcim | rack\nProcessing ContentType dcim | cable\nProcessing ContentType dcim | power feed\nProcessing ContentType circuits | circuit\nProcessing ContentType ipam | prefix\n... (truncated for brevity of documentation) ...\n</code></pre> <p>You may optionally specify one or more specific models (each prefixed with its app_label) to fix:</p> <pre><code>nautobot-server fix_custom_fields circuits.Circuit dcim.Location\n</code></pre> <p>Example output:</p> <pre><code>Processing ContentType circuits | circuit\nProcessing ContentType dcim | location\n</code></pre>"},{"location":"user-guide/administration/tools/nautobot-server.html#generate_secret_key","title":"<code>generate_secret_key</code>","text":"<p><code>nautobot-server generate_secret_key</code></p> <p>Generates a new <code>SECRET_KEY</code> that can be used in your <code>nautobot_config.py</code>:</p> <pre><code>nautobot-server generate_secret_key\n</code></pre> <p>Output:</p> <pre><code>e!j=vrlhz-!wl8p_3+q5s5cph29nzj$xm81eap-!&amp;n!_9^du09\n</code></pre>"},{"location":"user-guide/administration/tools/nautobot-server.html#generate_test_data","title":"<code>generate_test_data</code>","text":"<p>Added in version 1.5.0</p> <p><code>nautobot-server generate_test_data [--flush] --seed SEED</code></p> <p>Populate the database with various data as a baseline for testing (automated or manual).</p> <p><code>--flush</code> Flush any existing data from the database before generating new data.</p> <p>Danger</p> <p>Running this command with the <code>--flush</code> argument will clear all existing data in your database. You have been warned.</p> <p><code>--seed SEED</code> String to use as a random generator seed for reproducible results.</p> <pre><code>nautobot-server generate_test_data --flush --seed \"Nautobot\"\n</code></pre> <p>Sample output:</p> <pre><code>Flushing all existing data from the database...\nSeeding the pseudo-random number generator with seed \"Nautobot\"...\nCreating Statuses...\nCreating TenantGroups...\nCreating Tenants...\nCreating RIRs...\nCreating RouteTargets...\nCreating VRFs...\nCreating IP/VLAN Roles...\nCreating VLANGroups...\nCreating VLANs...\nDatabase populated successfully!\n</code></pre>"},{"location":"user-guide/administration/tools/nautobot-server.html#health_check","title":"<code>health_check</code>","text":"<p><code>nautobot-server health_check</code></p> <p>Run health checks and exit 0 if everything went well.</p> <pre><code>nautobot-server health_check\n</code></pre> <p>Output</p> <pre><code>DatabaseBackend          ... working\nDefaultFileStorageHealthCheck ... working\nRedisBackend             ... working\n</code></pre> <p>Please see the healthcheck documentation for more information.</p>"},{"location":"user-guide/administration/tools/nautobot-server.html#init","title":"<code>init</code>","text":"<p><code>nautobot-server init [--disable-installation-metrics] [config_path]</code></p> <p>Generates a new configuration with all of the default settings provided for you, and will also generate a unique<code>SECRET_KEY</code>.</p> <p>By default the file will be created at <code>$HOME/.nautobot/nautobot_config.py</code>:</p> <pre><code>nautobot-server init\n</code></pre> <p>Output:</p> <pre><code>Nautobot would like to send anonymized installation metrics to the project's maintainers.\nThese metrics include the installed Nautobot version, the Python version in use, an anonymous \"deployment ID\", and a list of one-way-hashed names of enabled Nautobot Apps and their versions.\nAllow Nautobot to send these metrics? [y/n]: y\nInstallation metrics will be sent when running 'nautobot-server post_upgrade'. Thank you!\nConfiguration file created at /home/example/.nautobot/nautobot_config.py\n</code></pre> <p>Added in version 1.6.0</p> <p>The <code>nautobot-server init</code> command will now prompt you to set the initial value for the <code>INSTALLATION_METRICS_ENABLED</code> setting. See the send_installation_metrics command for more information about the feature that this setting toggles.</p> <p>For more information on configuring Nautobot for the first time or on more advanced configuration patterns, please see the guide on Nautobot Configuration.</p>"},{"location":"user-guide/administration/tools/nautobot-server.html#loaddata","title":"<code>loaddata</code>","text":"<p><code>nautobot-server loaddata --traceback nautobot_dump.json</code></p> <p>To import the data that was exported with <code>nautobot-server dumpdata ...</code> see the following documentation:</p> <ul> <li>Remove auto-populated records from the database</li> <li>Import the database dump</li> <li>Rebuild cached cable path traces</li> </ul>"},{"location":"user-guide/administration/tools/nautobot-server.html#migrate","title":"<code>migrate</code>","text":"<p><code>nautobot-server migrate [app_label] [migration_name]</code></p> <p>Initialize a new database or run any pending database migrations to an existing database.</p> <pre><code>nautobot-server migrate\n</code></pre> <p>Output:</p> <pre><code>Wrapping model clean methods for custom validators failed because the ContentType table was not available or populated. This is normal during the execution of the migration command for the first time.\nOperations to perform:\n  Apply all migrations: admin, auth, circuits, contenttypes, dcim, extras, ipam, sessions, taggit, tenancy, users, virtualization\nRunning migrations:\n  Applying contenttypes.0001_initial... OK\n  Applying auth.0001_initial... OK\n  Applying admin.0001_initial... OK\n... (truncated for brevity of documentation) ...\n</code></pre> <p>Note</p> <p>This is a built-in Django command. Please see the official documentation on <code>migrate</code> for more information.</p>"},{"location":"user-guide/administration/tools/nautobot-server.html#nbshell","title":"<code>nbshell</code>","text":"<p><code>nautobot-server nbshell</code></p> <p>An interactive Python shell with all of the database models and various other utilities already imported for you. This is immensely useful for direct access to manipulating database objects.</p> <p>Danger</p> <p>This is an advanced feature that gives you direct access to the Django database models. Use this very cautiously as you can cause irreparable damage to your Nautobot installation.</p> <pre><code>nautobot-server nbshell\n</code></pre> <p>Prompt provided:</p> <pre><code># Shell Plus Model Imports\nfrom constance.backends.database.models import Constance\nfrom django.contrib.admin.models import LogEntry\nfrom django.contrib.auth.models import Group, Permission\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.contrib.sessions.models import Session\nfrom django_celery_beat.models import ClockedSchedule, CrontabSchedule, IntervalSchedule, PeriodicTask, PeriodicTasks, SolarSchedule\nfrom django_celery_results.models import ChordCounter, GroupResult, TaskResult\nfrom example_plugin.models import AnotherExampleModel, ExampleModel\nfrom nautobot.circuits.models import Circuit, CircuitTermination, CircuitType, Provider, ProviderNetwork\nfrom nautobot.dcim.models.cables import Cable, CablePath\nfrom nautobot.dcim.models.device_component_templates import ConsolePortTemplate, ConsoleServerPortTemplate, DeviceBayTemplate, FrontPortTemplate, InterfaceTemplate, PowerOutletTemplate, PowerPortTemplate, RearPortTemplate\nfrom nautobot.dcim.models.device_components import ConsolePort, ConsoleServerPort, DeviceBay, FrontPort, Interface, InventoryItem, PowerOutlet, PowerPort, RearPort\nfrom nautobot.dcim.models.devices import Device, DeviceRedundancyGroup, DeviceType, Manufacturer, Platform, VirtualChassis\nfrom nautobot.dcim.models.locations import Location, LocationType\nfrom nautobot.dcim.models.power import PowerFeed, PowerPanel\nfrom nautobot.dcim.models.racks import Rack, RackGroup, RackReservation\nfrom nautobot.extras.models.change_logging import ObjectChange\nfrom nautobot.extras.models.customfields import ComputedField, CustomField, CustomFieldChoice\nfrom nautobot.extras.models.datasources import GitRepository\nfrom nautobot.extras.models.groups import DynamicGroup, DynamicGroupMembership\nfrom nautobot.extras.models.jobs import Job, JobHook, JobLogEntry, JobResult, ScheduledJob, ScheduledJobs\nfrom nautobot.extras.models.models import ConfigContext, ConfigContextSchema, CustomLink, ExportTemplate, FileAttachment, FileProxy, GraphQLQuery, HealthCheckTestModel, ImageAttachment, Note, Webhook\nfrom nautobot.extras.models.relationships import Relationship, RelationshipAssociation\nfrom nautobot.extras.models.roles import Role\nfrom nautobot.extras.models.secrets import Secret, SecretsGroup, SecretsGroupAssociation\nfrom nautobot.extras.models.statuses import Status\nfrom nautobot.extras.models.tags import Tag, TaggedItem\nfrom nautobot.ipam.models import IPAddress, Prefix, RIR, RouteTarget, Service, VLAN, VLANGroup, VRF\nfrom nautobot.tenancy.models import Tenant, TenantGroup\nfrom nautobot.users.models import AdminGroup, ObjectPermission, Token, User\nfrom nautobot.virtualization.models import Cluster, ClusterGroup, ClusterType, VMInterface, VirtualMachine\nfrom social_django.models import Association, Code, Nonce, Partial, UserSocialAuth\n# Shell Plus Django Imports\nfrom django.core.cache import cache\nfrom django.conf import settings\nfrom django.contrib.auth import get_user_model\nfrom django.db import transaction\nfrom django.db.models import Avg, Case, Count, F, Max, Min, Prefetch, Q, Sum, When\nfrom django.utils import timezone\nfrom django.urls import reverse\nfrom django.db.models import Exists, OuterRef, Subquery\n# Django version 3.2.18\n# Nautobot version 2.0.0a2\n# Example Nautobot App version 1.0.0\nPython 3.8.16 (default, Mar 23 2023, 04:48:11)\n[GCC 10.2.1 20210110] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n&gt;&gt;&gt;\n</code></pre> <p>Please see the dedicated guide on the Nautobot Shell for more information.</p>"},{"location":"user-guide/administration/tools/nautobot-server.html#pre_migrate","title":"<code>pre_migrate</code>","text":"<p>Removed in version 2.0.0</p> <p><code>nautobot-server pre_migrate</code></p> <p>Performs pre-migration validation checks for Nautobot 2.0. Only available in Nautobot 1.5.23 and later versions of Nautobot 1.x.</p>"},{"location":"user-guide/administration/tools/nautobot-server.html#post_upgrade","title":"<code>post_upgrade</code>","text":"<p><code>nautobot-server post_upgrade</code></p> <p>Performs common server post-upgrade operations using a single entrypoint.</p> <p>This will run the following management commands with default settings, in order:</p> <p>Changed in version 1.6.0</p> <p>Added the <code>send_installation_metrics</code> command to the list of commands run by <code>post_upgrade</code>.</p> <ul> <li><code>migrate</code></li> <li><code>trace_paths</code></li> <li><code>build_ui</code></li> <li><code>collectstatic</code></li> <li><code>remove_stale_contenttypes</code></li> <li><code>clearsessions</code></li> <li><code>send_installation_metrics</code></li> <li><code>refresh_content_type_cache</code></li> <li><code>refresh_dynamic_group_member_caches</code></li> </ul> <p>Note</p> <p>Commands listed here that are not covered in this document here are Django built-in commands.</p> <p>Removed in version 2.0.0</p> <p>With the removal of <code>django-cacheops</code> from Nautobot, this command no longer runs <code>invalidate all</code>.</p> <p>Added in version 2.0.0</p> <p>Added <code>build_ui</code> to this command's default behavior.</p> <p>Changed in version 2.0.3</p> <p>Changed the <code>build_ui</code> flag's value to be False by default.</p> <p><code>--build-ui</code> Build or rebuild the new UI.</p> <p><code>--no-clearsessions</code> Do not automatically clean out expired sessions.</p> <p><code>--no-collectstatic</code> Do not automatically collect static files into a single location.</p> <p><code>--no-migrate</code> Do not automatically perform any database migrations.</p> <p><code>--no-remove-stale-contenttypes</code> Do not automatically remove stale content types.</p> <p><code>--no-trace-paths</code> Do not automatically generate missing cable paths.</p> <p>Removed in version 2.0.0</p> <p>With the removal of <code>django-cacheops</code> from Nautobot, the <code>--no-invalidate-all</code> flag was removed from this command.</p> <p><code>--no-refresh-content-type-cache</code> Do not automatically refresh the content type cache.</p> <p><code>--no-refresh-dynamic-group-member-caches</code> Do not automatically refresh the dynamic group member lists.</p> <pre><code>nautobot-server post_upgrade\n</code></pre> <p>Example Output:</p> <pre><code>Performing database migrations...\nOperations to perform:\n  Apply all migrations: admin, auth, circuits, contenttypes, dcim, extras, ipam, sessions, taggit, tenancy, users, virtualization\nRunning migrations:\n  No migrations to apply.\n\nGenerating cable paths...\nFound no missing circuit termination paths; skipping\nFound no missing console port paths; skipping\nFound no missing console server port paths; skipping\nFound no missing interface paths; skipping\nFound no missing power feed paths; skipping\nFound no missing power outlet paths; skipping\nFound no missing power port paths; skipping\nFinished.\n\nCollecting static files...\n\n0 static files copied to '/opt/nautobot/static', 965 unmodified.\n\nRemoving stale content types...\n\nRemoving expired sessions...\n</code></pre>"},{"location":"user-guide/administration/tools/nautobot-server.html#refresh_dynamic_group_member_caches","title":"<code>refresh_dynamic_group_member_caches</code>","text":"<p>Added in version 1.6.0</p> <p><code>nautobot-server refresh_dynamic_group_member_caches</code></p> <p>Refresh the cached members of all Dynamic Groups. This is useful to periodically update the cached list of members of a Dynamic Group without having to wait for caches to expire, which defaults to one hour.</p>"},{"location":"user-guide/administration/tools/nautobot-server.html#refresh_content_type_caches","title":"<code>refresh_content_type_caches</code>","text":"<p>Added in version 1.6.0</p> <p><code>nautobot-server refresh_content_type_caches</code></p> <p>Refresh the cached ContentType object property available via <code>Model._content_type_cached</code>. If content types are added or removed, this command will update the cache to reflect the current state of the database, but should already be done through the <code>post_upgrade</code> command.</p>"},{"location":"user-guide/administration/tools/nautobot-server.html#remove_stale_scheduled_jobs","title":"<code>remove_stale_scheduled_jobs</code>","text":"<p>Added in version 1.3.10</p> <p><code>nautobot-server remove_stale_scheduled_jobs [max-age of days]</code></p> <p>Delete non-recurring scheduled jobs that were scheduled to run more than <code>max-age</code> days ago.</p>"},{"location":"user-guide/administration/tools/nautobot-server.html#renaturalize","title":"<code>renaturalize</code>","text":"<p><code>nautobot-server renaturalize [app_label.ModelName [app_label.ModelName ...]]</code></p> <p>Recalculate natural ordering values for the specified models.</p> <p>This defaults to recalculating natural ordering on all models which have one or more fields of type <code>NaturalOrderingField</code>:</p> <pre><code>nautobot-server renaturalize\n</code></pre> <p>Example output:</p> <pre><code>Renaturalizing 21 models.\ndcim.ConsolePort.name (_name)... 196\ndcim.ConsoleServerPort.name (_name)... 0\ndcim.PowerPort.name (_name)... 392\ndcim.PowerOutlet.name (_name)... 0\ndcim.Interface.name (_name)... 7161\ndcim.FrontPort.name (_name)... 0\ndcim.RearPort.name (_name)... 0\ndcim.DeviceBay.name (_name)... 0\ndcim.InventoryItem.name (_name)... 1\ndcim.Device.name (_name)... 208\ndcim.ConsolePortTemplate.name (_name)... 2\ndcim.ConsoleServerPortTemplate.name (_name)... 0\ndcim.PowerPortTemplate.name (_name)... 4\ndcim.PowerOutletTemplate.name (_name)... 0\ndcim.InterfaceTemplate.name (_name)... 221\ndcim.FrontPortTemplate.name (_name)... 0\ndcim.RearPortTemplate.name (_name)... 0\ndcim.DeviceBayTemplate.name (_name)... 0\ndcim.Rack.name (_name)... 156\nvirtualization.VMInterface.name (_name)... 0\nDone.\n</code></pre> <p>You may optionally specify or more specific models (each prefixed with its app_label) to renaturalize:</p> <pre><code>nautobot-server renaturalize dcim.Device\n</code></pre> <p>Example output:</p> <pre><code>Renaturalizing 1 models.\ndcim.Device.name (_name)... 208\nDone.\n</code></pre>"},{"location":"user-guide/administration/tools/nautobot-server.html#runjob","title":"<code>runjob</code>","text":"<p><code>nautobot-server runjob [job]</code></p> <p>Run a job (script, report) to validate or update data in Nautobot.</p> <p><code>--commit</code> Commit changes to DB (defaults to dry-run if unset). <code>--username</code> is mandatory if using this argument.</p> <p><code>--username &lt;username&gt;</code> User account to impersonate as the requester of this job.</p> <pre><code>nautobot-server runjob --commit --username someuser local/example/MyJobWithNoVars\n</code></pre> <p>Note that there is presently no option to provide input parameters (<code>data</code>) for jobs via the CLI.</p> <p>Please see the guide on Jobs for more information on working with and running jobs.</p>"},{"location":"user-guide/administration/tools/nautobot-server.html#send_installation_metrics","title":"<code>send_installation_metrics</code>","text":"<p>Added in version 1.6.0</p> <p><code>nautobot-server send_installation_metrics</code></p> <p>Send anonymized installation metrics to the Nautobot maintainers. This management command is called by <code>post_upgrade</code> and is not intended to be run manually.</p> <p>If the <code>INSTALLATION_METRICS_ENABLED</code> setting is <code>True</code>, this command will send a list of all installed apps and their versions, as well as the currently installed Nautobot and Python versions, to the Nautobot maintainers. A randomized UUID will be generated and saved in the <code>DEPLOYMENT_ID</code> setting to anonymously but uniquely identify this installation. The plugin names will be one-way hashed with SHA256 to further anonymize the data sent. This enables tracking the installation metrics of publicly released apps without disclosing the names of any private apps.</p> <p>The following is an example of the data that is sent:</p> <pre><code>{\n\"deployment_id\": \"1de3dacf-f046-4a98-8d4a-17419080db79\",\n\"nautobot_version\": \"1.6.0b1\",\n\"python_version\": \"3.10.12\",\n\"installed_apps\": {\n# \"example_plugin\" hashed by sha256\n\"3ffee4622af3aad6f78257e3ae12da99ca21d71d099f67f4a2e19e464453bee7\": \"1.0.0\"\n}\n}\n</code></pre>"},{"location":"user-guide/administration/tools/nautobot-server.html#start","title":"<code>start</code>","text":"<p><code>nautobot-server start</code></p> <p>Directly invoke uWSGI to start a Nautobot server suitable for production use. This command behaves exactly as uWSGI does, but allows us to maintain a single entrypoint into the Nautobot application.</p> <p>Note</p> <p>uWSGI offers an overwhelming amount of command-line arguments that could not possibly be covered here. Please see the official uWSGI Options guide for more information.</p> <pre><code>nautobot-server start --ini ./uwsgi.ini\n</code></pre> <p>Example output:</p> <pre><code>[uWSGI] getting INI configuration from ./uwsgi.ini\n[uwsgi-static] added mapping for /static =&gt; /opt/nautobot/static\n*** Starting uWSGI 2.0.19.1 (64bit) on [Thu Mar 11 21:13:22 2021] ***\ncompiled with version: 8.3.1 20190311 (Red Hat 8.3.1-3) on 23 September 2020 02:39:40\nos: Linux-5.4.0-52-generic #57-Ubuntu SMP Thu Oct 15 10:57:00 UTC 2020\nnodename: jathan-nautobot-testing\nmachine: x86_64\nclock source: unix\npcre jit disabled\ndetected number of CPU cores: 48\ncurrent working directory: /opt/nautobot\ndetected binary path: /usr/bin/python3.8\nyour processes number limit is 256070\nyour memory page size is 4096 bytes\ndetected max file descriptor number: 1024\nbuilding mime-types dictionary from file /etc/mime.types...567 entry found\nlock engine: pthread robust mutexes\nthunder lock: disabled (you can enable it with --thunder-lock)\nuwsgi socket 0 bound to TCP address 0.0.0.0:9191 fd 7\nPython version: 3.8.5 (default, Jan 27 2021, 15:41:15)  [GCC 9.3.0]\n--- Python VM already initialized ---\nPython main interpreter initialized at 0x2573e30\npython threads support enabled\nyour server socket listen backlog is limited to 1024 connections\nyour mercy for graceful operations on workers is 60 seconds\nmapped 636432 bytes (621 KB) for 15 cores\n*** Operational MODE: preforking+threaded ***\nWSGI app 0 (mountpoint='') ready in 0 seconds on interpreter 0x2573e30 pid: 112153 (default app)\nspawned uWSGI master process (pid: 112153)\nspawned uWSGI worker 1 (pid: 112159, cores: 3)\nspawned uWSGI worker 2 (pid: 112162, cores: 3)\nspawned uWSGI worker 3 (pid: 112165, cores: 3)\nspawned uWSGI worker 4 (pid: 112168, cores: 3)\nspawned uWSGI worker 5 (pid: 112171, cores: 3)\n</code></pre> <p>Please see the guide on Deploying Nautobot Services for our recommended configuration for use with uWSGI.</p>"},{"location":"user-guide/administration/tools/nautobot-server.html#startplugin","title":"<code>startplugin</code>","text":"<p><code>nautobot-server startplugin &lt;name&gt; [directory]</code></p> <p>Create a new plugin with <code>name</code>.</p> <p>This command is similar to the django-admin startapp command, but with a default template directory (<code>--template</code>) of <code>nautobot/core/templates/plugin_template</code>. This command assists with creating a basic file structure for beginning development of a new Nautobot plugin.</p> <p>Without passing in the destination directory, <code>nautobot-server startplugin</code> will use your current directory and the <code>name</code> argument provided to create a new directory. We recommend providing a directory so that the plugin can be installed or published easily. Here is an example:</p> <pre><code>mkdir -p ~/myplugin/myplugin\nnautobot-server startplugin myplugin ~/myplugin/myplugin\n</code></pre> <p>Additional options such as <code>--name</code> or <code>--extension</code> can be found in the Django documentation.</p>"},{"location":"user-guide/administration/tools/nautobot-server.html#trace_paths","title":"<code>trace_paths</code>","text":"<p><code>nautobot-server trace_paths</code></p> <p>Generate any missing cable paths among all cable termination objects in Nautobot.</p> <p>After upgrading the database or working with Cables, Circuits, or other related objects, there may be a need to rebuild cached cable paths.</p> <p><code>--force</code> Force recalculation of all existing cable paths.</p> <p><code>--no-input</code> Do not prompt user for any input/confirmation.</p> <pre><code>nautobot-server trace_paths\n</code></pre> <p>Example output:</p> <pre><code>Found no missing circuit termination paths; skipping\nFound no missing console port paths; skipping\nFound no missing console server port paths; skipping\nFound no missing interface paths; skipping\nFound no missing power feed paths; skipping\nFound no missing power outlet paths; skipping\nFound no missing power port paths; skipping\nFinished.\n</code></pre> <p>Note</p> <p>This command is safe to run at any time. If it does detect any changes, it will exit cleanly.</p>"},{"location":"user-guide/administration/tools/nautobot-server.html#webhook_receiver","title":"<code>webhook_receiver</code>","text":"<p><code>nautobot-server webhook_receiver</code></p> <p>Start a simple listener to display received HTTP requests.</p> <p><code>--port PORT</code> Optional port number (default: <code>9000</code>)</p> <p><code>--no-headers</code> Hide HTTP request headers.</p> <pre><code>nautobot-server webhook_receiver --port 9001 --no-headers\n</code></pre> <p>Example output:</p> <pre><code>Listening on port http://localhost:9000. Stop with CONTROL-C.\n</code></pre> <p>Please see the guide on Troubleshooting Webhooks for more information.</p>"},{"location":"user-guide/administration/tools/nautobot-shell.html","title":"The Nautobot Python Shell","text":"<p>Nautobot includes a Python management shell within which objects can be directly queried, created, modified, and deleted. To enter the shell, run the following command:</p> <pre><code>nautobot-server nbshell\n</code></pre> <p>This will launch a lightly customized version of the django-extensions <code>shell_plus</code> shell, which is an extension of the built-in Django shell with all relevant Nautobot models pre-loaded.</p> <pre><code>nautobot-server nbshell\n</code></pre> <p>Example output:</p> <pre><code># Shell Plus Model Imports\nfrom constance.backends.database.models import Constance\nfrom django.contrib.admin.models import LogEntry\nfrom django.contrib.auth.models import Group, Permission\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.contrib.sessions.models import Session\nfrom django_celery_beat.models import ClockedSchedule, CrontabSchedule, IntervalSchedule, PeriodicTask, PeriodicTasks, SolarSchedule\nfrom django_celery_results.models import ChordCounter, GroupResult, TaskResult\nfrom example_plugin.models import AnotherExampleModel, ExampleModel\nfrom nautobot.circuits.models import Circuit, CircuitTermination, CircuitType, Provider, ProviderNetwork\nfrom nautobot.dcim.models.cables import Cable, CablePath\nfrom nautobot.dcim.models.device_component_templates import ConsolePortTemplate, ConsoleServerPortTemplate, DeviceBayTemplate, FrontPortTemplate, InterfaceTemplate, PowerOutletTemplate, PowerPortTemplate, RearPortTemplate\nfrom nautobot.dcim.models.device_components import ConsolePort, ConsoleServerPort, DeviceBay, FrontPort, Interface, InventoryItem, PowerOutlet, PowerPort, RearPort\nfrom nautobot.dcim.models.devices import Device, DeviceRedundancyGroup, DeviceType, Manufacturer, Platform, VirtualChassis\nfrom nautobot.dcim.models.locations import Location, LocationType\nfrom nautobot.dcim.models.power import PowerFeed, PowerPanel\nfrom nautobot.dcim.models.racks import Rack, RackGroup, RackReservation\nfrom nautobot.extras.models.change_logging import ObjectChange\nfrom nautobot.extras.models.customfields import ComputedField, CustomField, CustomFieldChoice\nfrom nautobot.extras.models.datasources import GitRepository\nfrom nautobot.extras.models.groups import DynamicGroup, DynamicGroupMembership\nfrom nautobot.extras.models.jobs import Job, JobHook, JobLogEntry, JobResult, ScheduledJob, ScheduledJobs\nfrom nautobot.extras.models.models import ConfigContext, ConfigContextSchema, CustomLink, ExportTemplate, FileAttachment, FileProxy, GraphQLQuery, HealthCheckTestModel, ImageAttachment, Note, Webhook\nfrom nautobot.extras.models.relationships import Relationship, RelationshipAssociation\nfrom nautobot.extras.models.roles import Role\nfrom nautobot.extras.models.secrets import Secret, SecretsGroup, SecretsGroupAssociation\nfrom nautobot.extras.models.statuses import Status\nfrom nautobot.extras.models.tags import Tag, TaggedItem\nfrom nautobot.ipam.models import IPAddress, Prefix, RIR, RouteTarget, Service, VLAN, VLANGroup, VRF\nfrom nautobot.tenancy.models import Tenant, TenantGroup\nfrom nautobot.users.models import AdminGroup, ObjectPermission, Token, User\nfrom nautobot.virtualization.models import Cluster, ClusterGroup, ClusterType, VMInterface, VirtualMachine\nfrom social_django.models import Association, Code, Nonce, Partial, UserSocialAuth\n# Shell Plus Django Imports\nfrom django.core.cache import cache\nfrom django.conf import settings\nfrom django.contrib.auth import get_user_model\nfrom django.db import transaction\nfrom django.db.models import Avg, Case, Count, F, Max, Min, Prefetch, Q, Sum, When\nfrom django.utils import timezone\nfrom django.urls import reverse\nfrom django.db.models import Exists, OuterRef, Subquery\n# Django version 3.2.18\n# Nautobot version 2.0.0a2\n# Example Nautobot App version 1.0.0\nPython 3.8.16 (default, Mar 23 2023, 04:48:11)\n[GCC 10.2.1 20210110] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n&gt;&gt;&gt;\n</code></pre> <p>As you can see from the above output, the Nautobot shell automatically loads all relevant database models, including those built-in to Django, those provided by Nautobot itself, and those provided by any installed Nautobot apps. It also loads a number of useful Django utilities as well.</p> <p>Warning</p> <p>The Nautobot shell affords direct access to Nautobot data and function with very little validation in place. As such, it is crucial to ensure that only authorized, knowledgeable users are ever granted access to it. Never perform any action in the management shell without having a full backup in place.</p>"},{"location":"user-guide/administration/tools/nautobot-shell.html#querying-objects","title":"Querying Objects","text":"<p>Objects are retrieved from the database using a Django queryset. The base queryset for an object takes the form <code>&lt;model&gt;.objects.all()</code>, which will return a (truncated) list of all objects of that type.</p> <pre><code>&gt;&gt;&gt; Device.objects.all()\n&lt;QuerySet [&lt;Device: TestDevice1&gt;, &lt;Device: TestDevice2&gt;, &lt;Device: TestDevice3&gt;,\n&lt;Device: TestDevice4&gt;, &lt;Device: TestDevice5&gt;, '...(remaining elements truncated)...']&gt;\n</code></pre> <p>Use a <code>for</code> loop to cycle through all objects in the list:</p> <pre><code>&gt;&gt;&gt; for device in Device.objects.all():\n...   print(device.name, device.device_type)\n...\n('TestDevice1', &lt;DeviceType: PacketThingy 9000&gt;)\n('TestDevice2', &lt;DeviceType: PacketThingy 9000&gt;)\n('TestDevice3', &lt;DeviceType: PacketThingy 9000&gt;)\n('TestDevice4', &lt;DeviceType: PacketThingy 9000&gt;)\n('TestDevice5', &lt;DeviceType: PacketThingy 9000&gt;)\n...\n</code></pre> <p>To count all objects matching the query, replace <code>all()</code> with <code>count()</code>:</p> <pre><code>&gt;&gt;&gt; Device.objects.count()\n1274\n</code></pre> <p>To retrieve a particular object (typically by its primary key or other unique field), use <code>get()</code>:</p> <pre><code>&gt;&gt;&gt; Location.objects.get(pk=\"8a2c9c3b-076e-4688-8a0b-89362f343a26\")\n&lt;Location: Test Lab&gt;\n</code></pre>"},{"location":"user-guide/administration/tools/nautobot-shell.html#filtering-querysets","title":"Filtering Querysets","text":"<p>In most cases, you will want to retrieve only a specific subset of objects. To filter a queryset, replace <code>all()</code> with <code>filter()</code> and pass one or more keyword arguments. For example:</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(status__name=\"Active\")\n&lt;QuerySet [&lt;Device: TestDevice1&gt;, &lt;Device: TestDevice2&gt;, &lt;Device: TestDevice3&gt;,\n&lt;Device: TestDevice8&gt;, &lt;Device: TestDevice9&gt;, '...(remaining elements truncated)...']&gt;\n</code></pre> <p>Querysets support slicing to return a specific range of objects.</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(status__name=\"Active\")[:3]\n&lt;QuerySet [&lt;Device: TestDevice1&gt;, &lt;Device: TestDevice2&gt;, &lt;Device: TestDevice3&gt;]&gt;\n</code></pre> <p>The <code>count()</code> method can be appended to the queryset to return a count of objects rather than the full list.</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(status__name=\"Active\").count()\n982\n</code></pre> <p>Relationships with other models can be traversed by concatenating attribute names with a double-underscore. For example, the following will return all devices assigned to the tenant named \"Pied Piper.\"</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(tenant__name=\"Pied Piper\")\n</code></pre> <p>This approach can span multiple levels of relations. For example, the following will return all IP addresses assigned to a device in North America:</p> <pre><code>&gt;&gt;&gt; IPAddress.objects.filter(interfaces__device__location__name=\"North America\")\n</code></pre> <p>Note</p> <p>While the above query is functional, it's not very efficient. There are ways to optimize such requests, however they are out of scope for this document. For more information, see the Django queryset method reference documentation.</p> <p>Reverse relationships can be traversed as well. For example, the following will find all devices with an interface named \"em0\":</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(interfaces__name=\"em0\")\n</code></pre> <p>Character fields can be filtered against partial matches using the <code>contains</code> or <code>icontains</code> field lookup (the later of which is case-insensitive).</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(name__icontains=\"testdevice\")\n</code></pre> <p>Similarly, numeric fields can be filtered by values less than, greater than, and/or equal to a given value.</p> <pre><code>&gt;&gt;&gt; VLAN.objects.filter(vid__gt=2000)\n</code></pre> <p>Multiple filters can be combined to further refine a queryset.</p> <pre><code>&gt;&gt;&gt; VLAN.objects.filter(vid__gt=2000, name__icontains=\"engineering\")\n</code></pre> <p>To return the inverse of a filtered queryset, use <code>exclude()</code> instead of <code>filter()</code>.</p> <pre><code>&gt;&gt;&gt; Device.objects.count()\n4479\n&gt;&gt;&gt; Device.objects.filter(status=\"active\").count()\n4133\n&gt;&gt;&gt; Device.objects.exclude(status=\"active\").count()\n346\n</code></pre> <p>Info</p> <p>The examples above are intended only to provide a cursory introduction to queryset filtering. For an exhaustive list of the available filters, please consult the Django queryset API documentation.</p>"},{"location":"user-guide/administration/tools/nautobot-shell.html#creating-and-updating-objects","title":"Creating and Updating Objects","text":"<p>New objects can be created by instantiating the desired model, defining values for all required attributes, and calling <code>validated_save()</code> on the instance. For example, we can create a new VLAN by specifying its numeric ID, name, and assigned location:</p> <pre><code>&gt;&gt;&gt; lab1 = Location.objects.get(pk=\"8a2c9c3b-076e-4688-8a0b-89362f343a26\")\n&gt;&gt;&gt; myvlan = VLAN(vid=123, name=\"MyNewVLAN\", location=lab1)\n&gt;&gt;&gt; myvlan.validated_save()\n</code></pre> <p>Alternatively, the above can be performed as a single operation. (Note, however, that <code>validated_save()</code> does not return the new instance for reuse.)</p> <pre><code>&gt;&gt;&gt; VLAN(vid=123, name=\"MyNewVLAN\", location=Location.objects.get(pk=\"8a2c9c3b-076e-4688-8a0b-89362f343a26\")).validated_save()\n</code></pre> <p>To modify an existing object, we retrieve it, update the desired field(s), and call <code>validated_save()</code> again.</p> <pre><code>&gt;&gt;&gt; vlan = VLAN.objects.get(pk=\"b4b4344f-f6bb-4ceb-85bc-4f169c753157\")\n&gt;&gt;&gt; vlan.name\n'MyNewVLAN'\n&gt;&gt;&gt; vlan.name = 'BetterName'\n&gt;&gt;&gt; vlan.validated_save()\n&gt;&gt;&gt; VLAN.objects.get(pk=\"b4b4344f-f6bb-4ceb-85bc-4f169c753157\").name\n'BetterName'\n</code></pre> <p>Warning</p> <p>It is recommended to make use of the <code>validated_save()</code> convenience method which exists on all core models. While the Django <code>save()</code> method still exists, the <code>validated_save()</code> method saves the instance data but first enforces model validation logic. Simply calling <code>save()</code> on the model instance does not enforce validation automatically and may lead to bad data. See the development best practices.</p> <p>Warning</p> <p>The Django ORM provides methods to create/edit many objects at once, namely <code>bulk_create()</code> and <code>update()</code>. These are best avoided in most cases as they bypass a model's built-in validation and can easily lead to database corruption if not used carefully.</p>"},{"location":"user-guide/administration/tools/nautobot-shell.html#deleting-objects","title":"Deleting Objects","text":"<p>To delete an object, simply call <code>delete()</code> on its instance. This will return a dictionary of all objects (including related objects) which have been deleted as a result of this operation.</p> <pre><code>&gt;&gt;&gt; vlan\n&lt;VLAN: 123 (BetterName)&gt;\n&gt;&gt;&gt; vlan.delete()\n(1, {'ipam.VLAN': 1})\n</code></pre> <p>To delete multiple objects at once, call <code>delete()</code> on a filtered queryset. It's a good idea to always sanity-check the count of selected objects before deleting them.</p> <pre><code>&gt;&gt;&gt; Device.objects.filter(name__icontains='test').count()\n27\n&gt;&gt;&gt; Device.objects.filter(name__icontains='test').delete()\n(35, {'dcim.DeviceBay': 0, 'dcim.InterfaceConnection': 4,\n'extras.ImageAttachment': 0, 'dcim.Device': 27, 'dcim.Interface': 4,\n'dcim.ConsolePort': 0, 'dcim.PowerPort': 0})\n</code></pre> <p>Warning</p> <p>Deletions are immediate and irreversible. Always consider the impact of deleting objects carefully before calling <code>delete()</code> on an instance or queryset.</p>"},{"location":"user-guide/administration/tools/nautobot-shell.html#change-logging-and-webhooks","title":"Change Logging and Webhooks","text":"<p>Note that Nautobot's change logging and webhook processing features operate under the context of an HTTP request. As such, these functions do not work automatically when using the ORM directly, either through the Nautobot shell or otherwise. A special context manager is provided to allow these features to operate under an emulated HTTP request context. This context manager must be explicitly invoked for change log entries and webhooks to be created when interacting with objects through the ORM. Here is an example using the <code>web_request_context</code> context manager within the Nautobot shell:</p> <pre><code>&gt;&gt;&gt; from nautobot.extras.context_managers import web_request_context\n&gt;&gt;&gt; user = User.objects.get(username=\"admin\")\n&gt;&gt;&gt; with web_request_context(user):\n...     location_type = LocationType.objects.get(name=\"Airport\")\n...     status = Status.objects.get_for_model(Location).first()\n...     lax = Location(name=\"LAX\", location_type=location_type, status=status)\n...     lax.validated_save()\n</code></pre> <p>A <code>User</code> object must be provided. A <code>WSGIRequest</code> may optionally be passed and one will automatically be created if not provided.</p>"},{"location":"user-guide/administration/upgrading/database-backup.html","title":"Backing up the Nautobot Database","text":"<p>Before any upgrade of Nautobot, and as a general best practice, you'll want to back up the underlying database. This is important both from a general high-availability and error-recovery standpoint, and also specifically in case of any Nautobot update that includes database changes (which is most of them) as in general Nautobot does not guarantee that all database changes made during an upgrade will be reversible. If anything goes wrong during a Nautobot update, your database may be left in a bad/invalid state and your best recourse will be to restore from backup.</p>"},{"location":"user-guide/administration/upgrading/database-backup.html#backing-up-postgresql","title":"Backing up PostgreSQL","text":"<p>Refer to Backup and Restore in the PostgreSQL documentation for the various approaches to database backup that are recommended with PostgreSQL.</p>"},{"location":"user-guide/administration/upgrading/database-backup.html#backing-up-mysql","title":"Backing up MySQL","text":"<p>Refer to Backup and Recovery in the MySQL documentation for the various approaches to database backup that are recommended with MySQL.</p>"},{"location":"user-guide/administration/upgrading/upgrading.html","title":"Upgrading to a New Nautobot Release","text":""},{"location":"user-guide/administration/upgrading/upgrading.html#review-the-release-notes","title":"Review the Release Notes","text":"<p>Prior to upgrading your Nautobot instance, be sure to carefully review all release notes that have been published since your current version was released. Although the upgrade process typically does not involve additional work, certain releases may introduce breaking or backward-incompatible changes. These are called out in the release notes under the release in which the change went into effect.</p> <p>The below sub-sections describe some key changes that deployers should be aware of, but are not intended to be a replacement for reading the release notes carefully and in depth.</p>"},{"location":"user-guide/administration/upgrading/upgrading.html#updating-from-nautobot-10x-to-11x","title":"Updating from Nautobot 1.0.x to 1.1.x","text":""},{"location":"user-guide/administration/upgrading/upgrading.html#migration-from-rq-to-celery","title":"Migration from RQ to Celery","text":"<p>Prior to version 1.1.0, Nautobot utilized RQ as the primary background task worker. As of Nautobot 1.1.0, RQ is now deprecated, as Celery has been introduced to eventually replace RQ for executing background tasks within Nautobot. All Nautobot core usage of RQ has been migrated to use Celery.</p> <p>RQ support for custom tasks was not removed in order to give plugin authors time to migrate, however, to continue to utilize advanced Nautobot features such as Git repository synchronization, webhooks, jobs, etc. you must migrate your <code>nautobot-worker</code> deployment from RQ to Celery.</p> <p>Please see the section on migrating to Celery from RQ for more information on how to easily migrate your deployment.</p>"},{"location":"user-guide/administration/upgrading/upgrading.html#updating-from-nautobot-11x-to-12x","title":"Updating from Nautobot 1.1.x to 1.2.x","text":""},{"location":"user-guide/administration/upgrading/upgrading.html#introduction-of-celery-beat-scheduler","title":"Introduction of Celery Beat Scheduler","text":"<p>As of Nautobot v1.2.0, Nautobot supports deferring (\"scheduling\") Jobs. To facilitate this, a new service called <code>celery-scheduler</code> is now required. Please review the service installation documentation to find out how to set it up.</p>"},{"location":"user-guide/administration/upgrading/upgrading.html#updating-from-nautobot-12x-to-13x","title":"Updating from Nautobot 1.2.x to 1.3.x","text":""},{"location":"user-guide/administration/upgrading/upgrading.html#revision-of-recommended-mysql-utf-8-encoding","title":"Revision of Recommended MySQL UTF-8 Encoding","text":"<p>The recommended database encoding settings have been revised to rely upon the default UTF-8 encoding provided by MySQL for collation of data in the database. Previously we were recommending in our documentation that the collation encoding be set explicitly to <code>utf8mb4_bin</code>. We are now recommending <code>utf8mb4_0900_ai_ci</code> which is configured by default on unmodified MySQL database server deployments.</p> <p>The collation encoding is used to inform MySQL how characters are sorted in the database. This is important when it comes to retrieving data that has special characters or special byte-encoding such as accents or ligatures, and also including emojis. In some cases, with the <code>utf8mb4_bin</code> encoding we were previously recommending, case-insensitive searching may return inconsistent or incorrect results.</p> <p>Danger</p> <p>It is strongly recommended that you backup your database before executing this query and that you perform this in a non-production environment to identify any potential issues prior to updating your production environment.</p> <p>If you have an existing MySQL database, you may update your database to use the recommended encoding by using <code>nautobot-server dbshell</code> to launch a database shell and executing the following command:</p> <pre><code>nautobot-server dbshell\n</code></pre> <p>Example output:</p> <pre><code>mysql&gt; ALTER DATABASE nautobot COLLATE utf8mb4_0900_ai_ci;\nQuery OK, 1 row affected (0.07 sec)\n</code></pre> <p>Please see the official MySQL documentation on migrating collation encoding settings for more information on troubleshooting any issues you may encounter.</p>"},{"location":"user-guide/administration/upgrading/upgrading.html#update-prerequisites-to-required-versions","title":"Update Prerequisites to Required Versions","text":"<p>Nautobot v2.0.0 and later requires the following:</p> Dependency Minimum Version Python 3.8 PostgreSQL 9.6 Redis 4.0 <p>Removed in version 1.6.0</p> <p>Support for Python 3.7 was removed.</p> <p>Nautobot v1.1.0 and later can optionally support the following:</p> <p>Nautobot v1.1.0 added support for MySQL 8.0 as a database backend as an alternative to PostgreSQL.</p> Dependency Minimum Version MySQL 8.0 <p>Tip</p> <p>If you wish to migrate from PostgreSQL to MySQL, we recommend creating a new Nautobot installation based on MySQL and then migrating the database contents to the new installation, rather than attempting an in-place upgrade or migration.</p>"},{"location":"user-guide/administration/upgrading/upgrading.html#install-the-latest-release","title":"Install the Latest Release","text":"<p>As with the initial installation, you can upgrade Nautobot by installing the Python package directly from the Python Package Index (PyPI).</p> <p>Warning</p> <p>Unless explicitly stated, all steps requiring the use of <code>pip3</code> or <code>nautobot-server</code> in this document should be performed as the <code>nautobot</code> user!</p> <p>Upgrade Nautobot using <code>pip3</code>:</p> <pre><code>pip3 install --upgrade nautobot\n</code></pre>"},{"location":"user-guide/administration/upgrading/upgrading.html#upgrade-your-optional-dependencies","title":"Upgrade your Optional Dependencies","text":"<p>If you do not have any optional dependencies, you may skip this step.</p> <p>Once the new code is in place, verify that any optional Python packages required by your deployment (e.g. <code>napalm</code> or <code>django-auth-ldap</code>) are listed in <code>local_requirements.txt</code>.</p> <p>Then, upgrade your dependencies using <code>pip3</code>:</p> <pre><code>pip3 install --upgrade -r $NAUTOBOT_ROOT/local_requirements.txt\n</code></pre>"},{"location":"user-guide/administration/upgrading/upgrading.html#run-the-post-upgrade-operations","title":"Run the Post Upgrade Operations","text":"<p>Finally, run Nautobot's <code>post_upgrade</code> management command:</p> <pre><code>nautobot-server post_upgrade\n</code></pre> <p>This command performs the following actions:</p> <ul> <li>Applies any database migrations that were included in the release</li> <li>Generates any missing cable paths among all cable termination objects in the database</li> <li>Collects all static files to be served by the HTTP service</li> <li>Deletes stale content types from the database</li> <li>Deletes all expired user sessions from the database</li> <li>Clears all cached data to prevent conflicts with the new release</li> </ul>"},{"location":"user-guide/administration/upgrading/upgrading.html#restart-the-nautobot-services","title":"Restart the Nautobot Services","text":"<p>Finally, with root permissions, restart the web and background services:</p> <pre><code>sudo systemctl restart nautobot nautobot-worker nautobot-scheduler\n</code></pre>"},{"location":"user-guide/administration/upgrading/from-v1/region-and-site-data-migration-guide.html","title":"Region and Site to Location Migration Guide","text":"<p>In Nautobot 2.0.0, all the <code>Region</code> and <code>Site</code> related data models are being migrated to use <code>Location</code>. Below is a comprehensive guide for Nautobot users and Nautobot App developers to migrate their <code>Region</code> and <code>Site</code> related models and apps to <code>Location</code>.</p>"},{"location":"user-guide/administration/upgrading/from-v1/region-and-site-data-migration-guide.html#migrate-objectpermission-instances-in-nautobot-from-region-and-site-to-location","title":"Migrate ObjectPermission instances in Nautobot from Region and Site to Location","text":"<p>Nautobot admins need to migrate <code>Site</code> and <code>Region</code> Related <code>ObjectPermission</code> instances to <code>Location</code>. The correct way to do it are documented below with practical examples.</p>"},{"location":"user-guide/administration/upgrading/from-v1/region-and-site-data-migration-guide.html#region-specific-objectpermission","title":"Region Specific ObjectPermission","text":"<p>Replace <code>Location</code> ContentType to <code>object_types</code> field of the <code>ObjectPermission</code> if it is not already present and add <code>\"location_type__name\": \"Region\"</code> to <code>constraints</code> field if the old <code>ObjectPermission</code> only allows operations on <code>Region</code> instances and not on <code>Site</code> instances.</p> <p>Since <code>Location</code> has all the filters that <code>Region</code> had and they retain the same functionalities. We do not need to modify the <code>constraints</code> field of any <code>Region</code> specific <code>ObjectPermission</code> instances any further.</p>"},{"location":"user-guide/administration/upgrading/from-v1/region-and-site-data-migration-guide.html#site-specific-objectpermission","title":"Site Specific ObjectPermission","text":"<p>Replace <code>Location</code> ContentType to <code>object_types</code> field of the <code>ObjectPermission</code> if it is not already present and add <code>location_type__name: \"Site\"</code> to <code>constraints</code> field if the old <code>ObjectPermission</code> only allows operations on <code>Site</code> instances and not on <code>Region</code> instances.</p> <p>The old <code>constraints</code> field for a <code>Site</code> specific <code>ObjectPermission</code> instance might look like this:</p> <pre><code>{\n\"name\": \"AMS01\",\n\"name__in\": [\"AMS01\", \"ATL01\", \"EDX01\"],\n\"slug\": \"ams01\",\n\"slug__in\": [\"ams01\", \"atl01\", \"edx01\"],\n\"id\": \"c12753e5-8f01-49a6-b0cf-bf8b460853a1\",\n\"id__in\": [\"c12753e5-8f01-49a6-b0cf-bf8b460853a1\", \"455038c3-4045-4b78-85f5-17d9f34cb9e8\"],\n\"region__name\": \"United States\",\n\"region__name__in\": [\"United States\", \"Greece\", \"England\"],\n\"region__slug\": \"united-states\",\n\"region__slug__in\": [\"united-states\", \"greece\", \"england\"],\n\"region__id\": \"f77f5706-e5b3-49e0-9749-b8f818319c40\",\n\"region__id__in\": [\"f77f5706-e5b3-49e0-9749-b8f818319c40\", \"7df99dc2-283a-4130-8125-60b9ca293131\"],\n\"region__parent__name\": \"North America\",\n\"region__parent__name__in\": [\"North America\", \"Europe\"],\n\"region__parent__slug\": \"north-america\",\n\"region__parent__slug__in\": [\"north-america\", \"europe\"],\n\"region__parent__id\": \"c1a816df-876f-44d4-8ea0-335898998780\",\n\"region__parent__id__in\": [\"c1a816df-876f-44d4-8ea0-335898998780\", \"a68b0838-d7fb-416c-b4ba-a3e464e552ba\"]\n}\n</code></pre> <p>To modify the data correctly, we need to:     1. Replace all occurrences of \"region\" with \"parent\" in the Key portion (before \":\") of the data not Value (after \":\").     2. Since Nautobot carries over the UUIDs of the old <code>Site</code>/<code>Region</code> instances when creating the new \"Site\"/\"Region\" type <code>Location</code> instances, we do not need to change the UUID values in <code>...__id</code> and <code>...__id__in</code> Keys.     3. Since Nautobot 2.x <code>Locations</code> do not have <code>slug</code> fields, we will need to remove those references. (In a real example, you'd probably want to replace them with <code>name</code> references, but in this example we already have <code>name</code> references that are redundant with the <code>slug</code>, so here we'll just remove the <code>slug</code> references entirely.)</p> <p>The updated JSON data might look like this:</p> <pre><code>{\n\"location_type__name\": \"Site\",\n\"name\": \"AMS01\",\n\"name__in\": [\"AMS01\", \"ATL01\", \"EDX01\"],\n\"id\": \"c12753e5-8f01-49a6-b0cf-bf8b460853a1\",\n\"id__in\": [\"c12753e5-8f01-49a6-b0cf-bf8b460853a1\", \"455038c3-4045-4b78-85f5-17d9f34cb9e8\"],\n\"parent__name\": \"United States\",\n\"parent__name__in\": [\"United States\", \"Greece\", \"England\"],\n\"parent__id\":  \"f77f5706-e5b3-49e0-9749-b8f818319c40\",\n\"parent__id__in\": [\"f77f5706-e5b3-49e0-9749-b8f818319c40\", \"7df99dc2-283a-4130-8125-60b9ca293131\"],\n\"parent__parent__name\": \"North America\",\n\"parent__parent__name__in\": [\"North America\", \"Europe\"],\n\"parent__parent__id\": \"c1a816df-876f-44d4-8ea0-335898998780\",\n\"parent__parent__id__in\": [\"c1a816df-876f-44d4-8ea0-335898998780\", \"a68b0838-d7fb-416c-b4ba-a3e464e552ba\"]\n}\n</code></pre>"},{"location":"user-guide/administration/upgrading/from-v1/region-and-site-data-migration-guide.html#other-data-model-specific-objectpermission-eg-interface","title":"Other Data Model Specific ObjectPermission e.g. Interface","text":"<p>The old <code>constraints</code> field for a <code>Site</code>/<code>Region</code> related data model's (e.g. <code>Interface</code>) <code>ObjectPermission</code> instance might look like this:</p> <pre><code>{\n\"device__site__name\": \"AMS01\",\n\"device__site__name__in\": [\"AMS01\", \"ATL01\", \"ETX02\"],\n\"device__site__slug\": \"ams01\",\n\"device__site__slug__in\": [\"ams01\", \"atl01\", \"etx02\"],\n\"device__site__id\": \"0ab47314-2944-45f6-b964-9e009fc48ce0\",\n\"device__site__id__in\": [\"0ab47314-2944-45f6-b964-9e009fc48ce0\", \"b09545d4-6e2b-471e-8f07-27f25ca308f5\"],\n\"device__site__region__name\": \"United States\",\n\"device__site__region__name__in\": [\"United States\", \"United Kingdom\", \"Greece\"],\n\"device__site__region__slug\": \"united-states\",\n\"device__site__region__slug__in\": [\"united-states\", \"united-kingdom\", \"greece\"],\n\"device__site__region__id\": \"f1a79a3c-d980-40e1-979d-abdb0f83388e\",\n\"device__site__region__id__in\": [\"f1a79a3c-d980-40e1-979d-abdb0f83388e\", \"6335a61e-503d-463c-99c2-9c87ef8354d9\"],\n\"device__site__region__parent__name\": \"North America\",\n\"device__site__region__parent__name__in\": [\"North America\", \"Europe\", \"South America\"],\n\"device__site__region__parent__slug\": \"north-america\",\n\"device__site__region__parent__slug__in\": [\"north-america\", \"europe\", \"south-america\"],\n\"device__site__region__parent__id\": \"6695809c-b33b-4f12-b0de-a4969000434d\",\n\"device__site__region__parent__id__in\": [\"6695809c-b33b-4f12-b0de-a4969000434d\", \"e51d07bb-3fcf-4306-9d87-6b1ff6dd6378\"]\n}\n</code></pre> <p>To modify the data correctly, we need to:     1. Replace all occurrences of \"site\" with \"location\" in the Key portion (before \":\") of the data not Value (after \":\").     2. Replace all occurrences of \"region\" with \"parent\" in the Key portion (before \":\") of the data not Value (after \":\").     3. Add <code>\"device__location__location_type__name\": \"Site\"</code> if the old <code>ObjectPermission</code> only allows operations on <code>Interfaces</code> of <code>Device</code> instances assigned to <code>Sites</code>.     4. Since Nautobot carries over the UUIDs of the old <code>Site</code>/<code>Region</code> instances when creating the new \"Site\"/\"Region\" type <code>Location</code> instances, we do not need to change the UUID values in <code>...__id</code> and <code>...__id__in</code> Keys.     5. As before, remove any <code>slug</code> references or replace them with appropriate <code>name</code> or <code>id</code> references.</p> <p>The updated JSON data might look like this:</p> <pre><code>{\n\"device__location__location_type__name\": \"Site\",\n\"device__location__name\": \"AMS01\",\n\"device__location__name__in\": [\"AMS01\", \"ATL01\", \"ETX02\"],\n\"device__location__id\": \"0ab47314-2944-45f6-b964-9e009fc48ce0\",\n\"device__location__id__in\": [\"0ab47314-2944-45f6-b964-9e009fc48ce0\", \"b09545d4-6e2b-471e-8f07-27f25ca308f5\"],\n\"device__location__parent__name\": \"United States\",\n\"device__location__parent__name__in\": [\"United States\", \"United Kingdom\", \"Greece\"],\n\"device__location__parent__id\": \"f1a79a3c-d980-40e1-979d-abdb0f83388e\",\n\"device__location__parent__id__in\": [\"f1a79a3c-d980-40e1-979d-abdb0f83388e\", \"6335a61e-503d-463c-99c2-9c87ef8354d9\"],\n\"device__location__parent__parent__name\": \"North America\",\n\"device__location__parent__parent__name__in\": [\"North America\", \"Europe\", \"South America\"],\n\"device__location__parent__parent__id\": \"6695809c-b33b-4f12-b0de-a4969000434d\",\n\"device__location__parent__parent__id__in\": [\"6695809c-b33b-4f12-b0de-a4969000434d\", \"e51d07bb-3fcf-4306-9d87-6b1ff6dd6378\"]\n}\n</code></pre>"},{"location":"user-guide/administration/upgrading/from-v1/region-and-site-data-migration-guide.html#other-data-model-specific-objectpermission-eg-note","title":"Other Data Model Specific ObjectPermission e.g. Note","text":"<p>The old <code>constraints</code> field for a <code>Site</code>/<code>Region</code> related data model's (e.g. <code>Note</code>) <code>ObjectPermission</code> instance might look like this:</p> <pre><code>{\n\"assigned_object_type\": \"dcim.site\",\n\"assigned_object_id\": \"932d94ee-5571-40a0-903f-4274fcfbed32\",\n\"assigned_object_id__in\": [\"932d94ee-5571-40a0-903f-4274fcfbed32\", \"e383db9a-dd55-464d-9e56-2f18bc03b32c\"]\n}\n</code></pre> <p>To modify the data correctly, we need to:     1. Replace all occurrences of \"dcim.site\" and/or \"dcim.region\" with \"dcim.location\" in the Value portion (after \":\") of the <code>assigned_object_type</code> Key.     2. Since Nautobot carries over the UUIDs of the old <code>Site</code>/<code>Region</code> instances when creating the new \"Site\"/\"Region\" type <code>Location</code> instances, we do not need to change the UUID values in the <code>assigned_object_id</code> and <code>assigned_object_id__in</code> Keys.</p> <p>The updated JSON data might look like this:</p> <pre><code>{\n\"assigned_object_type\": \"dcim.location\",\n\"assigned_object_id\": \"932d94ee-5571-40a0-903f-4274fcfbed32\",\n\"assigned_object_id__in\": [\"932d94ee-5571-40a0-903f-4274fcfbed32\", \"e383db9a-dd55-464d-9e56-2f18bc03b32c\"]\n}\n</code></pre>"},{"location":"user-guide/administration/upgrading/from-v1/region-and-site-data-migration-guide.html#update-nautobot-apps","title":"Update Nautobot Apps","text":"<p>Any Nautobot Apps that you use and maintain which have existing data referencing Site or Region records will need to be updated before you can complete your migration to Nautobot 2.0.</p>"},{"location":"user-guide/administration/upgrading/from-v1/region-and-site-data-migration-guide.html#region-and-site-related-data-model-migration-guide-for-new-nautobot-app-installations-in-an-existing-nautobot-20-environment","title":"Region and Site Related Data Model Migration Guide For New Nautobot App installations in an Existing Nautobot 2.0 Environment","text":""},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html","title":"Upgrading from Nautobot v1.X","text":""},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#pre-migration-validation","title":"Pre-migration validation","text":"<p>In Nautobot 1.x, starting with 1.5.22, there is a <code>nautobot-server pre_migrate</code> command that can be run to check your existing data for compatibility with the data model changes introduced in Nautobot 2.0. You are highly encouraged to run this command before beginning to migrate to Nautobot 2.x as it will catch and report certain data-sanitization issues that cannot be remediated automatically during the migration and will need to be manually corrected before you upgrade.</p> <p>For example, if any of the pre-migration checks fail, you may see an error message like this:</p> <pre><code>$ nautobot-server pre_migrate\n&gt;&gt;&gt; Running check: check_configcontext_uniqueness...\n&gt;&gt;&gt; Running check: check_exporttemplate_uniqueness...\n&gt;&gt;&gt; Running check: check_virtualchassis_uniqueness...\nCommandError: One or more pre-migration checks failed:\n    You cannot migrate ConfigContext or ConfigContextSchema objects that have non-unique names:\n    - ConfigContext: [{'name': 'cc1', 'count': 2}]\n    - ConfigContextSchema: [{'name': 'ccs1', 'count': 2}]\n\n    You cannot migrate VirtualChassis objects with non-unique names:\n     - [{'name': 'vc1', 'count': 2}]\n</code></pre> <p>Otherwise, a clean exit displays \"All pre-migration checks passed.\" indicating that your Nautobot instance is ready to be upgraded to Nautobot 2.0:</p> <pre><code>$ nautobot-server pre_migrate\n&gt;&gt;&gt; Running check: check_configcontext_uniqueness...\n&gt;&gt;&gt; Running check: check_exporttemplate_uniqueness...\n&gt;&gt;&gt; Running check: check_virtualchassis_uniqueness...\nAll pre-migration checks passed.\n</code></pre>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#permission-constraint-migration","title":"Permission Constraint Migration","text":"<p>Permission constraints that contain references to fields or models that were changed or removed in Nautobot 2.0 will have to be updated manually after the upgrade. For example, any permission constraints that reference a <code>Site</code> will need to be updated to reference the <code>Location</code> model instead. The <code>nautobot-server pre_migrate</code> command will output a list of all permission constraints that need to be updated after the upgrade.</p> <pre><code>&gt;&gt;&gt; Running permission constraint checks...\n\nOne or more permission constraints may be affected by the Nautobot 2.0 migration.\nThese permission constraints will have to be updated manually after upgrading to\nNautobot 2.0 to reference new models and/or values. Please review the following\nwarnings and make sure to document the objects referenced by these constraints\nbefore upgrading:\n\nObjectPermission 'backbone devices' (id: ced686c3-2b34-4612-974a-bad766512661) has a constraint that references a model (nautobot.dcim.models.devices.DeviceRole) that will be migrated to a new model by the Nautobot 2.0 migration.\n{\n    \"device_role\": \"e99adc77-40ef-4a0f-b2c1-26dbf6648ef1\"\n}\n\nObjectPermission 'example job run' (id: 41c6d03e-6388-47eb-b575-1c7a21725bc3) has a constraint that references a model field (nautobot.extras.models.jobs.Job.name) that may be changed by the Nautobot 2.0 migration.\n{\n    \"name\": \"Example job, does nothing\"\n}\n\nObjectPermission 'emea' (id: 2d3b7aae-98ab-44ec-af89-43d3002a1b7d) has a constraint that references a model (nautobot.dcim.models.sites.Region) that will be migrated to a new model by the Nautobot 2.0 migration.\n[\n    {\n        \"site__region__slug\": \"emea\"\n    },\n    {\n        \"id\": \"4c9f3e5c-2dc6-46f6-95ac-ac778369edfc\"\n    }\n]\n</code></pre> <p>We recommend taking inventory of any objects referenced by primary key in permission constraints for the following models:</p> <ul> <li><code>dcim.DeviceRole</code></li> <li><code>dcim.RackRole</code></li> <li><code>extras.TaggedItem</code></li> <li><code>ipam.Aggregate</code></li> <li><code>ipam.IPAddress</code></li> <li><code>ipam.Prefix</code></li> <li><code>ipam.Role</code></li> </ul> <p>This is because the primary key for these objects may be changed during the migration. You will not be able to use the primary key value from the old object in the constraint to find the new object.</p> <p>Note</p> <p>This pre-migration check only checks the last model referenced in a constraint filter. If you have nested filters (<code>device_role__devices</code>) they may not be reported by this check. You should review all of your permission constraints after the upgrade to ensure that they are still valid.</p>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#examples","title":"Examples","text":"<p>Primary keys for the migrated <code>Site</code> and <code>Region</code> objects were retained in the <code>Location</code> model, so you do not need to update the primary key value in any <code>Site</code> or <code>Region</code> constraints:</p> Old Constraint<pre><code>{\n\"site\": \"4c9f3e5c-2dc6-46f6-95ac-ac778369edfc\"\n}\n</code></pre> New Constraint<pre><code>{\n\"location\": \"4c9f3e5c-2dc6-46f6-95ac-ac778369edfc\"\n}\n</code></pre> <p>Other models such as the <code>DeviceRole</code> that was migrated to <code>Role</code> did not retain the original primary key. In this case you will need to find the new object's primary key and update the constraint to reference the new model and new primary key value:</p> Old Constraint<pre><code>{\n\"device_role\": \"00000000-0000-0000-0000-000000000000\"\n}\n</code></pre> New Constraint<pre><code>{\n\"role\": \"11111111-1111-1111-1111-111111111111\"\n}\n</code></pre> <p>You may also need to update field names in your permission constraints. For example, if you have a permission constraint that references the <code>slug</code> field on a model that was removed in Nautobot 2.0, you will need to update the constraint to reference a different field instead:</p> Old Constraint<pre><code>{\n\"slug\": \"router-01\"\n}\n</code></pre> New Constraint<pre><code>{\n\"id\": \"5f96ac85-32d4-435d-84e4-66e631ae133f\"\n}\n</code></pre> <p>Some fields were only renamed without making any changes to the data so the constraint update will be a simple matter of updating the field name:</p> Old Constraint<pre><code>{\n\"circuit__type__name\": \"metro-ethernet-1000mb\"\n}\n</code></pre> New Constraint<pre><code>{\n\"circuit__circuit_type__name\": \"metro-ethernet-1000mb\"\n}\n</code></pre>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#dependency-changes","title":"Dependency Changes","text":"<ul> <li>Nautobot no longer uses or supports the use of <code>django-cryptography</code>.</li> <li>Nautobot no longer uses or supports the use of <code>django-mptt</code>.</li> <li>Nautobot no longer uses or supports the use of <code>django-rq</code>.</li> </ul>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#database-orm-changes","title":"Database (ORM) Changes","text":"<p>Warning</p> <p>Changes were made to model and related model fields. In some cases this may invalidate or make subtle changes to existing Permission Constraint filter data. Please review the Permission Constraint Migration section above for more information. These changes might also affect Filter Extensions you have written in your apps.</p>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#database-field-behavior-changes","title":"Database Field Behavior Changes","text":"<p>Most of the database field behavior changes in Nautobot 2.0 fall into the following general categories:</p> <ol> <li>The <code>created</code> field on models has changed from a date only (\"2023-04-06\") to being a date/time (\"2023-04-06T19:57:45.320232Z\")</li> <li>Various models that had a required <code>site</code> field and an optional <code>location</code> field now have a required <code>location</code> field.</li> </ol> Full table of database field behavior changes Model Field Changes (all) created Changed from <code>DateField</code> to <code>DateTimeField</code> ConfigContext name Now must be globally unique ConfigContextSchema name Now must be globally unique Device location No longer optional/nullable, must now be set Device primary_ip4 No longer one-to-one, now one-to-many (<code>ForeignKey</code>) Device primary_ip6 No longer one-to-one, now one-to-many (<code>ForeignKey</code>) IPAddress role Changed from <code>CharField</code> to a <code>ForeignKey</code> to the new <code>Role</code> model. IPAddress primary_ip4_for Now a list as the reverse relation for the <code>Device.primary_ip4</code> foreign key IPAddress primary_ip6_for Now a list as the reverse relation for the <code>Device.primary_ip6</code> foreign key JobLogEntry absolute_url No longer accepts <code>null</code> values, use <code>\"\"</code> instead JobLogEntry log_object No longer accepts <code>null</code> values, use <code>\"\"</code> instead ObjectPermission name Now must be globally unique PowerPanel location No longer optional/nullable, must now be set Prefix is_pool Replaced by new field <code>type</code>, valid choices are \"Container\", \"Network\" and \"Pool\" Prefix namespace New required foreign key to Namespace, defaulting to 'Global' Prefix status \"Container\" status has been replaced by new field <code>type</code> Rack location No longer optional/nullable, must now be set RackGroup location No longer optional/nullable, must now be set ScheduledJob name Now must be globally unique ScheduledJob queue No longer accepts <code>null</code> values, use <code>\"\"</code> instead VirtualChassis name Now must be globally unique VirtualMachine primary_ip4 No longer one-to-one, now one-to-many (<code>ForeignKey</code>). Remote side is now a list. VirtualMachine primary_ip6 No longer one-to-one, now one-to-many (<code>ForeignKey</code>). Remote side is now a list. VRF namespace New required foreign key to Namespace, defaulting to 'Global' Webhook ca_file_path No longer accepts <code>null</code> values, use <code>\"\"</code> instead"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#renamed-database-fields","title":"Renamed Database Fields","text":"<p>Most renamed database fields in Nautobot 2.0 fall into the following general categories:</p> <ol> <li>Renaming of foreign keys and reverse relations to more consistently and specifically match the related model name or plural name (for example, <code>Circuit.terminations</code> to <code>Circuit.circuit_terminations</code>, <code>Rack.group</code> to <code>Rack.rack_group</code>)</li> <li>Renaming of tree model fields for consistency and due to the change from <code>django-mptt</code> to <code>django-tree-queries</code> (for example, <code>InventoryItem.child_items</code> to <code>InventoryItem.children</code> and <code>InventoryItem.level</code> to <code>InventoryItem.tree_depth</code>)</li> </ol> Full table of renamed database fields Model Renamed Field New Name CablePath circuittermination circuit_terminations CablePath consoleport console_ports CablePath consoleserverport console_server_ports CablePath interface interfaces CablePath powerfeed power_feeds CablePath poweroutlet power_outlets CablePath powerport power_ports Circuit termination_a circuit_termination_a Circuit termination_z circuit_termination_z Circuit terminations circuit_terminations Circuit type circuit_type Cluster group cluster_group Cluster type cluster_type ComputedField slug key ConfigContext schema config_context_schema ConfigContextSchema device_set devices ConfigContextSchema virtualmachine_set virtual_machines ContentType computedfield_set computed_fields ContentType configcontext_set config_contexts ContentType configcontextschema_set config_context_schemas ContentType customlink_set custom_links ContentType dcim_device_related devices ContentType dynamicgroup_set dynamic_groups ContentType exporttemplate_set export_templates ContentType imageattachment_set image_attachments ContentType note_set notes ContentType virtualization_virtualmachine_related virtual_machines CustomFieldChoice field custom_field CustomField choices custom_field_choices CustomField slug key Device consoleports console_ports Device consoleserverports console_server_ports Device devicebays device_bays Device device_role role Device frontports front_ports Device inventoryitems inventory_items Device local_context_data local_config_context_data Device local_context_data_owner_content_type local_config_context_data_owner_content_type Device local_context_data_owner_object_id local_config_context_data_owner_object_id Device local_context_schema local_config_context_schema Device poweroutlets power_outlets Device powerports power_ports Device rearports rear_ports DeviceRedundancyGroup members devices DeviceType consoleporttemplates console_port_templates DeviceType consoleserverporttemplates console_server_port_templates DeviceType devicebaytemplates device_bay_templates DeviceType frontporttemplates front_port_templates DeviceType interfacetemplates interface_templates DeviceType instances devices DeviceType poweroutlettemplates power_outlet_templates DeviceType powerporttemplates power_port_templates DeviceType rearporttemplates rear_port_templates FrontPortTemplate rear_port rear_port_template InventoryItem child_items children InventoryItem level tree_depth IPAddress family ip_version IPAddress prefix_length mask_length Job job_hook job_hooks Job result job_results JobResult created date_created JobResult completed date_done JobResult job_kwargs task_kwargs JobResult logs job_log_entries JobResult schedule scheduled_job Location powerpanels power_panels PowerOutletTemplate power_port power_port_template PowerPanel powerfeeds power_feeds PowerPort poweroutlets power_outlets PowerPortTemplate poweroutlet_templates power_outlet_templates Prefix family ip_version Rack group rack_group Rack powerfeed_set power_feeds Rack reservations rack_reservations RackGroup level tree_depth RackGroup powerpanel_set power_panels RearPort frontports front_ports RearPortTemplate frontport_templates front_port_templates Relationship associations relationship_associations Relationship name label Relationship slug key RIR aggregates prefixes Secret groups secrets_groups Secret secretsgroupassociation_set secrets_group_associations SecretsGroup device_set devices SecretsGroup deviceredundancygroup_set device_redundancy_groups SecretsGroup gitrepository_set git_repositories SecretsGroup secretsgroupassociation_set secrets_group_associations SecretsGroupAssociation group secrets_group Service ipaddresses ip_addresses Status circuits_circuit_related circuits Status dcim_cable_related cables Status dcim_device_related devices Status dcim_deviceredundancygroup_related device_redundancy_groups Status dcim_interface_related interfaces Status dcim_location_related locations Status dcim_powerfeed_related power_feeds Status dcim_rack_related racks Status ipam_ipaddress_related ip_addresses Status ipam_prefix_related prefixes Status ipam_vlan_related vlans Status virtualization_virtualmachine_related virtual_machines Status virtualization_vminterface_related vm_interfaces Tenant group tenant_group Tenant rackreservations rack_reservations TenantGroup level tree_depth User changes object_changes User note notes User rackreservation_set rack_reservations VirtualMachine local_context_data local_config_context_data VirtualMachine local_context_data_owner_content_type local_config_context_data_owner_content_type VirtualMachine local_context_data_owner_object_id local_config_context_data_owner_object_id VirtualMachine local_context_schema local_config_context_schema VLAN group vlan_group"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#removed-database-fields","title":"Removed Database Fields","text":"<p>Most removed database fields in Nautobot 2.0 fall into the following general categories:</p> <ol> <li>Removal of references to removed models such as <code>Site</code> and <code>Region</code></li> <li>Removal of <code>slug</code> fields in preference to the use of natural keys.</li> <li>Removal of <code>django-mptt</code> internal fields (<code>lft</code>, <code>rght</code>, <code>tree_id</code>)</li> </ol> Full table of removed database fields Model Removed Field Comments CircuitTermination site Use <code>location</code> instead CircuitType slug Cluster site Use <code>location</code> instead ClusterGroup slug ClusterType slug ConfigContext regions Use <code>locations</code> instead ConfigContext sites Use <code>locations</code> instead ConfigContextSchema slug CustomField name Use <code>label</code> or <code>key</code> as appropriate CustomLink slug Device site Use <code>location</code> instead DeviceRedundancyGroup slug DeviceType slug DynamicGroup slug GitRepository _token Use Secrets feature instead GitRepository username Use Secrets feature instead GraphQLQuery slug InventoryItem lft Made irrelevant by <code>django-tree-queries</code> InventoryItem rght Made irrelevant by <code>django-tree-queries</code> InventoryItem tree_id Made irrelevant by <code>django-tree-queries</code> IPAddress assigned_object Replaced by <code>interfaces</code> and <code>vm_interfaces</code> many-to-many relations IPAddress broadcast Use parent Prefix's broadcast instead IPAddress vrf VRF is now related to the assigned Interface(s), as well as the parent Prefix Job git_repository Can be retrieved from the instance if desired, but is no longer a database field. Job slug Job source Now implied by the Job's <code>module_name</code> field. JobHook slug JobResult job_id JobResult obj_type Location site Location slug LocationType slug Manufacturer slug Note slug Platform slug Provider slug ProviderNetwork slug PowerFeed site Use <code>location</code> instead PowerPanel site Use <code>location</code> instead Prefix is_pool Replaced by new <code>type</code> field Prefix site Use <code>location</code> instead Prefix vrf Replaced by <code>vrf_assignments</code> many-to-many relation Rack site Use <code>location</code> instead RackGroup lft Made irrelevant by <code>django-tree-queries</code> RackGroup rght Made irrelevant by <code>django-tree-queries</code> RackGroup site Use <code>location</code> instead RackGroup slug RackGroup tree_id Made irrelevant by <code>django-tree-queries</code> RIR slug RelationshipAssociation slug RouteTarget slug ScheduledJob job_class Use <code>task</code> instead Secret slug SecretsGroup slug SecretsGroupAssociation slug Status slug Tag slug Tenant slug TenantGroup lft Made irrelevant by <code>django-tree-queries</code> TenantGroup rght Made irrelevant by <code>django-tree-queries</code> TenantGroup slug TenantGroup tree_id Made irrelevant by <code>django-tree-queries</code> VLAN site Use <code>location</code> instead VLANGroup site Use <code>location</code> instead VLANGroup slug VRF enforce_unique Uniqueness of Prefixes and IPAddresses is now enforced by the database Webhook slug <p>Info</p> <p>For more information on how to update your integrations after the removal of <code>slug</code> fields, see Uniquely Identifying a Nautobot Object.</p>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#replaced-models","title":"Replaced Models","text":""},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#generic-role-model","title":"Generic Role Model","text":"<p>The <code>ipam.Role</code>, <code>dcim.RackRole</code>, and <code>dcim.DeviceRole</code> models have been removed and replaced by a single <code>extras.Role</code> model. This means that any references to the removed models in the code now use the <code>extras.Role</code> model instead.</p> Removed Model Replaced With <code>dcim.DeviceRole</code> <code>extras.Role</code> <code>dcim.RackRole</code> <code>extras.Role</code> <code>ipam.Role</code> <code>extras.Role</code>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#site-and-region-models","title":"Site and Region Models","text":"<p>The <code>dcim.Region</code> and <code>dcim.Site</code> models have been removed and replaced by <code>dcim.Location</code> model. This means that any references to the removed models in the code now use the <code>dcim.Location</code> model instead with <code>LocationType</code> \"Site\" and \"Region\".</p> <p>Important</p> <p>If you are a Nautobot App developer, or have any Apps installed that include data models that reference <code>Site</code> or <code>Region</code>, please review the Region and Site Related Data Model Migration Guide to learn how to migrate your apps and models from <code>Site</code> and <code>Region</code> to <code>Location</code>.</p> Removed Model Replaced With <code>dcim.Region</code> <code>dcim.Location</code> <code>dcim.Site</code> <code>dcim.Location</code>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#aggregate-migrated-to-prefix","title":"Aggregate Migrated to Prefix","text":"<p>The <code>ipam.Aggregate</code> model has been removed and all existing Aggregates will be migrated to <code>ipam.Prefix</code> records with their <code>type</code> set to \"Container\". The <code>Aggregate.date_added</code> field will be migrated to <code>Prefix.date_allocated</code> and changed from a Date field to a DateTime field with the time set to <code>00:00</code> UTC. <code>Aggregate.tenant</code>, <code>Aggregate.rir</code> and <code>Aggregate.description</code> will be migrated over to the equivalent fields on the new <code>Prefix</code>. ObjectChanges, Tags, Notes, Permissions, Custom Fields, Custom Links, Computed Fields and Relationships will be migrated to relate to the new <code>Prefix</code> as well.</p> <p>If a <code>Prefix</code> already exists with the same network and prefix length as a previous <code>Aggregate</code>, the <code>rir</code> and <code>date_added</code> fields will be copied to the <code>rir</code> and <code>date_allocated</code> fields on the existing Prefix object. Messages will be output during migration (<code>nautobot-server migrate</code> or <code>nautobot-server post_upgrade</code>) if the <code>tenant</code>, <code>description</code> or <code>type</code> fields need to be manually migrated.</p> Aggregate Prefix <code>broadcast</code> <code>broadcast</code> <code>date_added</code> <code>date_allocated</code> <code>description</code> <code>description</code> <code>network</code> <code>network</code> <code>prefix_length</code> <code>prefix_length</code> <code>rir</code> <code>rir</code> <code>tenant</code> <code>tenant</code>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#prefix-parenting-concrete-relationship","title":"Prefix Parenting Concrete Relationship","text":"<p>The <code>ipam.Prefix</code> model has been modified to have a self-referencing foreign key as the <code>parent</code> field. Parenting of prefixes is now automatically managed at the database level to greatly improve performance especially when calculating tree hierarchy and utilization.</p> <p>As a result of this change, it is no longer necessary nor possible to disable tree hierarchy using <code>settings.DISABLE_PREFIX_LIST_HIERARCHY</code> as this setting has been removed. Additionally it is no longer possible to disable global uniqueness using <code>settings.ENFORCE_GLOBAL_UNIQUE</code> as this setting has been removed.</p> <p>The following changes have been made to the <code>Prefix</code> model.</p> Removed Replaced With <code>get_child_prefixes()</code> <code>descendants()</code>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#prefix-parenting-guidance","title":"Prefix Parenting Guidance","text":"<p>The following guidance has been added for the <code>Prefix</code> model in order to ensure more accurate network modeling:</p> <ul> <li>A <code>Prefix</code> of type <code>Container</code> should only have a parent (if any) of type <code>Container</code></li> <li>A <code>Prefix</code> of type <code>Network</code> should only have a parent (if any) of type <code>Container</code></li> <li>A <code>Prefix</code> of type <code>Pool</code> should only have a parent (if any) of type <code>Network</code></li> <li>Any <code>Prefix</code> can be a root prefix (i.e. have no parent)</li> </ul> <p>In Nautobot 2.0, creating or updating prefixes that violate this guidance will result in a warning; in a future Nautobot release this will be changed to an enforced data constraint.</p>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#ipaddress-parenting-concrete-relationship","title":"IPAddress Parenting Concrete Relationship","text":"<p>The <code>ipam.IPAddress</code> model has been modified to have a foreign key to <code>ipam.Prefix</code> as the <code>parent</code> field. Parenting of IP addresses is now automatically managed at the database level to greatly improve performance especially when calculating tree hierarchy and utilization.</p>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#ipaddress-parenting-guidance","title":"IPAddress Parenting Guidance","text":"<p>The following guidance has been added to the <code>IPAddress</code> model:</p> <ul> <li>An <code>IPAddress</code> should have a parent <code>Prefix</code> of type <code>Network</code></li> <li>An <code>IPAddress</code> should not be created if a suitable parent <code>Prefix</code> of type <code>Network</code> does not exist</li> <li>An <code>IPAddress</code> can be a member of a <code>Pool</code> but only if the <code>Pool</code> is a child of a <code>Network</code></li> </ul> <p>As with the <code>Prefix</code> parenting guidance above, violating this guidance in Nautobot 2.0 will result in a warning; in a future Nautobot release this will be changed to an enforced data constraint.</p>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#prefix-get_utilization-method","title":"Prefix get_utilization Method","text":"<p>The <code>get_utilization</code> method on the <code>ipam.Prefix</code> model has been updated in 2.0 to account for the <code>Prefix.type</code> field. The behavior is now as follows:</p> <ul> <li>If the <code>Prefix.type</code> is <code>Container</code>, the utilization is calculated as the sum of the total address space of all child prefixes.</li> <li>If the <code>Prefix.type</code> is <code>Pool</code>, the utilization is calculated as the sum of the total number of IP addresses within the pool's range.</li> <li>If the <code>Prefix.type</code> is <code>Network</code>:<ul> <li>The utilization is calculated as the sum of the total address space of all child <code>Pool</code> prefixes plus the total number of child IP addresses.</li> <li>For IPv4 networks larger than /31, if neither the first or last address is occupied by either a pool or an IP address, they are subtracted from the total size of the prefix.</li> </ul> </li> </ul>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#example","title":"Example","text":"<ul> <li>192.168.0.0/16          <code>Container - 1024/65536 utilization</code><ul> <li>192.168.1.0/24      <code>Network - 1/254 utilization</code><ul> <li>192.168.1.1     <code>IP Address</code></li> </ul> </li> <li>192.168.2.0/24      <code>Network - 4/256 utilization</code><ul> <li>192.168.2.0/30  <code>Pool - 1/4 utilization</code><ul> <li>192.168.2.1 <code>IP Address</code></li> </ul> </li> </ul> </li> <li>192.168.3.0/24      <code>Network - 5/254 utilization</code><ul> <li>192.168.3.1     <code>IP Address</code></li> <li>192.168.3.64/30 <code>Pool - 0/4 utilization</code></li> </ul> </li> <li>192.168.4.0/24      <code>Network - 1/256 utilization</code><ul> <li>192.168.4.255   <code>IP Address</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#graphql-and-rest-api-changes","title":"GraphQL and REST API Changes","text":""},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#api-behavior-changes","title":"API Behavior Changes","text":"<p>Most of the API behavior changes in Nautobot 2.0 fall into the following general categories:</p> <ol> <li>The <code>created</code> field on most models has changed from a date only (\"2023-04-06\") to being a date/time (\"2023-04-06T19:57:45.320232Z\")</li> <li>The <code>status</code> fields on various models has changed from a pseudo-enum value (containing a \"value\" and a \"label\") to referencing the related Status object in full, similar to other foreign-key fields.</li> <li>Various models that had a required <code>site</code> field and an optional <code>location</code> field now have a required <code>location</code> field.</li> </ol> Full table of API behavior changes Model Field Changes (all) created Now is a date/time rather than only a date Cable status Now is a foreign-key rather than a pseudo-enum Circuit status Now is a foreign-key rather than a pseudo-enum Device config_context Now is only included when specifically requested with <code>?include=config_context</code> query parameter Device location Now required, no longer optional Device status Now is a foreign-key rather than a pseudo-enum DeviceRedundancyGroup status Now is a foreign-key rather than a pseudo-enum Interface status Now is a foreign-key rather than a pseudo-enum IPAddress namespace A derived field. Required on creation, if <code>parent</code> isn't provided, to find a correct parent Prefix IPAddress parent A new foreign-key to <code>Prefix</code>. Required on creation, if <code>namespace</code> isn't provided, to find a correct parent Prefix IPAddress role Now is a foreign-key to <code>Role</code> rather than a string IPAddress status Now is a foreign-key rather than a pseudo-enum JobLogEntry display Now contains the message text rather than the message timestamp Location status Now is a foreign-key rather than a pseudo-enum PowerFeed status Now is a foreign-key rather than a pseudo-enum PowerPanel location Now required, no longer optional Prefix namespace New required foreign key to Namespace, defaulting to 'Global' Prefix status Now is a foreign-key rather than a pseudo-enum Rack location Now required, no longer optional Rack status Now is a foreign-key rather than a pseudo-enum RackGroup location Now required, no longer optional RackGroup rack_count Now only counts Racks directly belonging to this RackGroup, not those belonging to its descendants TenantGroup tenant_count Now only counts Tenants directly belonging to this TenantGroup, not those belonging to its descendants VirtualMachine status Now is a foreign-key rather than a pseudo-enum VLAN status Now is a foreign-key rather than a pseudo-enum VMInterface status Now is a foreign-key rather than a pseudo-enum VRF namespace New required foreign key to Namespace, defaulting to 'Global'"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#renamed-serializer-fields","title":"Renamed Serializer Fields","text":"<p>Most renamed API fields in Nautobot 2.0 fall into the following general categories:</p> <ol> <li>Renaming of foreign keys and reverse relations to more consistently and specifically match the related model name or plural name (for example, <code>Circuit.type</code> to <code>Circuit.circuit_type</code>, <code>Interface.count_ipaddresses</code> to <code>Interface.ip_address_count</code>)</li> <li>Renaming of tree model fields for consistency and due to the change from <code>django-mptt</code> to <code>django-tree-queries</code> (for example, <code>InventoryItem._depth</code> to <code>InventoryItem.tree_depth</code>)</li> </ol> Full table of renamed API fields Model Renamed Field New Name Circuit termination_a circuit_termination_a Circuit termination_z circuit_termination_z Circuit type circuit_type ConfigContext schema config_context_schema Cluster group cluster_group Cluster type cluster_type ComputedField slug key CustomField slug key CustomFieldChoice field custom_field Device device_role role Device local_context_data local_config_context_data Device local_context_schema local_config_context_schema Device parent_device parent_bay FrontPortTemplate rear_port rear_port_template Interface count_ipaddresses ip_address_count InventoryItem _depth tree_depth IPAddress family ip_version IPAddress prefix_length mask_length JobResult created date_created JobResult completed date_done JobResult job_kwargs task_kwargs JobResult schedule scheduled_job Location virtualmachine_count virtual_machine_count Manufacturer devicetype_count device_type_count Manufacturer inventoryitem_count inventory_item_count Platform virtualmachine_count virtual_machine_count PowerOutletTemplate power_port power_port_template PowerPanel powerfeed_count power_feed_count Prefix family ip_version Rack group rack_group Rack powerfeed_count power_feed_count RackGroup _depth tree_depth Relationship name label Relationship slug key SecretsGroupAssociation group secrets_group Service ipaddresses ip_addresses Tenant group tenant_group TenantGroup _depth tree_depth VirtualMachine local_context_data local_config_context_data VirtualMachine local_context_schema local_config_context_schema VLAN group vlan_group"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#removed-serializer-fields","title":"Removed Serializer Fields","text":"<p>Most removed database fields in Nautobot 2.0 fall into the following general categories:</p> <ol> <li>Removal of references to removed models such as <code>Site</code> and <code>Region</code></li> <li>Removal of <code>slug</code> fields in preference to the use of natural keys.</li> </ol> Full table of removed API fields Model/Endpoint Removed Field Comments /api/plugins/installed-plugins verison Use <code>version</code> instead /api/status/ rq-workers-running Django-RQ is no longer supported CircuitTermination site Use <code>location</code> instead CircuitType slug Cluster site Use <code>location</code> instead ClusterGroup slug ClusterType slug ConfigContext regions Use <code>locations</code> instead ConfigContext sites Use <code>locations</code> instead ConfigContextSchema slug CustomLink slug Device primary_ip Use <code>primary_ip4</code> or <code>primary_ip6</code>instead Device site Use <code>location</code> instead DeviceRedundancyGroup slug DeviceType slug DynamicGroup slug GitRepository token Use Secrets instead GitRepository username Use Secrets instead GraphQLQuery slug IPAddress assigned_object Changed to many-to-many field. Use the REST API view for <code>IPAddressToInterface</code>(/api/ipam/ip-address-to-interface/) to create/modify/delete associations or <code>interfaces</code>/<code>vm_interfaces</code> on this model to retrieve a list of associated interfaces. IPAddress broadcast Use parent Prefix's broadcast instead IPAddress vrf VRF is now related to the assigned Interface(s), as well as the parent Prefix JobHook slug JobResult job_id JobResult obj_type Location site Use <code>parent</code> instead Location slug LocationType slug Manufacturer slug Note slug Platform slug PowerFeed site Use <code>location</code> instead PowerPanel site Use <code>location</code> instead Prefix is_pool Use <code>type</code> instead Prefix vrf Prefixes are now assigned to a VRF in the same Namespace via a many-to-many relationship Prefix site Use <code>location</code> instead Provider slug ProviderNetwork slug Rack site Use <code>location</code> instead RackGroup site Use <code>location</code> instead RackGroup slug RelationshipAssociation slug RIR slug Role slug RouteTarget slug Secret slug SecretsGroup slug SecretsGroupAssociation slug Status slug Tag slug Tenant slug TenantGroup slug VirtualMachine primary_ip Use <code>primary_ip4</code> or <code>primary_ip6</code>instead VLAN site Use <code>location</code> instead VLANGroup site Use <code>location</code> instead VLANGroup slug VRF enforce_unique Uniqueness of Prefixes and IPAddresses is now enforced at the database level Webhook slug"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#removed-1x-version-endpoints-and-serializer-representations","title":"Removed 1.X Version Endpoints and Serializer Representations","text":"<p>Nautobot 2.0 removes support for 1.X versioned REST APIs and their Serializers. Requesting older API versions will result in a <code>400 Bad Request</code> error.</p> <p>Please ensure you are using the latest representations of request/response representations as seen in the API docs or Swagger.</p>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#replaced-endpoints","title":"Replaced Endpoints","text":"<p>These endpoints <code>/ipam/roles/</code>, <code>/dcim/rack-roles/</code> and <code>/dcim/device-roles/</code> are no longer available. Instead,  use the <code>/extras/roles/</code> endpoint to retrieve and manipulate <code>role</code> data.</p> Removed Endpoints Replaced With <code>/dcim/device-roles/</code> <code>/extras/roles/</code> <code>/dcim/rack-roles/</code> <code>/extras/roles/</code> <code>/ipam/roles/</code> <code>/extras/roles/</code>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#new-interface-to-ip-address-relationship-endpoint","title":"New Interface to IP Address Relationship Endpoint","text":"<p>The through table (<code>ipam.IPAddressToInterface</code>) for the <code>IPAddress</code> to <code>Interface</code>/<code>VMInterface</code> many-to-many relationship has been exposed through the REST API at <code>/api/ipam/ip-address-to-interface/</code>. This endpoint must be used to create, retrieve, update, and delete relationships between IP addresses and interfaces through the REST API. Each <code>ipam.IPAddressToInterface</code> object maps a single <code>ipam.IPAddress</code> object to a single <code>dcim.Interface</code> or <code>virtualization.VMInterface</code> object. When creating relationships through this endpoint, the <code>ip_address</code> field is required and one of <code>interface</code> or <code>vm_interface</code> is required. There are additional boolean fields (<code>is_primary</code>, <code>is_default</code>, etc.) exposed through the REST API that may be used if desired but are not currently implemented in the Nautobot UI.</p>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#api-query-parameters-changes","title":"API Query Parameters Changes","text":"<p>Nautobot 2.0 removes the <code>?brief</code> query parameter and adds support for the <code>?depth</code> query parameter. As a result, the ability to specify <code>brief_mode</code> in <code>DynamicModelChoiceField</code>, <code>DynamicModelMultipleChoiceField</code>, and <code>MultiMatchModelMultipleChoiceField</code> has also been removed. For every occurrence of the aforementioned fields where you have <code>brief_mode</code> set to <code>True/False</code> (e.g. <code>brief_mode=True</code>), please remove the statement, leaving other occurrences of the fields where you do not have <code>brief_mode</code> specified as they are. Please see the documentation on the <code>?depth</code> query parameter for more information.</p>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#ui-graphql-and-rest-api-filter-changes","title":"UI, GraphQL, and REST API Filter Changes","text":"<p>Warning</p> <p>Sweeping changes were made to model filter fields. In some cases this may invalidate or make subtle changes to existing <code>DynamicGroup</code>, <code>GraphQLQuery</code> or <code>Relationship</code> instances' filter data. Please utilize the <code>nautobot-server audit_dynamic_groups</code> and <code>nautobot-server audit_graphql_queries</code> helper commands when you are cleaning up <code>DynamicGroup</code> and <code>GraphQLQuery</code> filter data. You should run this command after your Nautobot instance is upgraded to v2.x successfully. The helper commands will not catch all possible issues, but they will catch some common ones. You should review all of your <code>DynamicGroup</code> filter data and <code>GraphQLQuery</code> query data after the upgrade to ensure that they are still valid. At the time of this writing, an audit helper command for <code>Relationship</code> filter data is not yet available.</p>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#removed-changelog-url-from-view-context","title":"Removed Changelog URL from View Context","text":"<p><code>changelog_url</code> is no longer provided in the <code>ObjectView</code> context. To get a model instance's changelog URL, you can retrieve it from the instance itself if it supports it: <code>model_instance.get_changelog_url()</code>.</p>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#renamed-filter-fields","title":"Renamed Filter Fields","text":"<p>Most renamed filter fields in Nautobot 2.0 fall into the following general categories:</p> <ol> <li>The <code>tag</code> filter is renamed to <code>tags</code> on all models supporting Tags.</li> <li>Renames to match renamed model/serializer fields as described earlier in this document.</li> <li>Related membership filters are renamed to <code>has_&lt;related&gt;</code> throughout, for example <code>ConsolePort.cabled</code> is renamed to <code>ConsolePort.has_cable</code>.</li> <li>Most <code>&lt;related&gt;_id</code> filters have been merged into the corresponding <code>&lt;related&gt;</code> filter (see \"Enhanced Filter Fields\" below).</li> </ol> Full table of renamed filter fields Model Renamed Filter New Name Cable tag tags Circuit tag tags Circuit type circuit_type Cluster tag tags ComputedField slug key ConsolePort cabled has_cable ConsoleServerPort cabled has_cable CustomFieldChoice field custom_field Device cluster_id cluster Device device_type_id device_type Device local_context_data local_config_context_data Device local_context_schema_id local_config_context_schema_id Device local_context_schema local_config_context_schema Device rack_group_id rack_group Device rack_id rack Device tag tags Device virtual_chassis_id virtual_chassis DeviceBay tag tags DeviceRedundancyGroup tag tags DeviceType has_instances has_devices DeviceType instances devices DeviceType tag tags FrontPort cabled has_cable FrontPort tag tags GitRepository tag tags Interface cabled has_cable Interface tag tags InventoryItem child_items children InventoryItem has_child_items has_children InventoryItem tag tags IPAddress assigned_to_interface has_interface_assignments IPAddress family ip_version IPAddress parent prefix IPAddress tag tags IPAddress vrf vrfs Job tag tags Location tag tags ObjectPermission group groups ObjectPermission group_id groups_id ObjectPermission user users PowerFeed cabled has_cable PowerFeed tag tags PowerOutlet cabled has_cable PowerPanel tag tags PowerPort cabled has_cable Prefix family ip_version Prefix is_pool type Prefix mask_length prefix_length Prefix tag tags Prefix vrf vrfs Provider tag tags ProviderNetwork tag tags Rack group rack_group Rack has_reservations has_rack_reservations Rack reservations rack_reservations Rack tag tags RackReservation group rack_group RackReservation tag tags RearPort cabled has_cable RearPort tag tags Relationship name label Relationship slug key RouteTarget exporting_vrf exporting_vrfs RouteTarget importing_vrf importing_vrfs RouteTarget tag tags SecretsGroupAssociation group secrets_group Service port ports Service tag tags Tenant group tenant_group Tenant tag tags User changes object_changes User has_changes has_object_changes User group groups User group_id groups_id VirtualMachine local_context_data local_config_context_data VirtualMachine local_context_schema_id local_config_context_schema_id VirtualMachine local_context_schema local_config_context_schema VirtualMachine tag tags VLAN group vlan_group VLAN tag tags VMInterface tag tags VRF export_target export_targets VRF import_target import_targets VRF tag tags"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#enhanced-filter-fields","title":"Enhanced Filter Fields","text":"<p>Below is a table documenting enhanced filter field changes in Nautobot 2.0. These enhancements mostly fall into the following general categories:</p> <ol> <li>Many filters are enhanced to permit filtering by UUID or by name.</li> <li>Filters that previously only supported a single filter value can now filter on multiple values.</li> </ol> Full table of enhanced filter fields Model Filter Enhancements (all) created[__(gte/lte)] Filtering on multiple values, supports date-times Cable tenant Filter by UUID or by name Circuit circuit_type Filter by UUID or by name Circuit provider Filter by UUID or by name Circuit tenant Filter by UUID or by name Circuit tenant_group Filter by UUID or by name Cluster cluster_group Filter by UUID or by name Cluster cluster_type Filter by UUID or by name Cluster tenant Filter by UUID or by name Cluster tenant_group Filter by UUID or by name ConfigContext cluster_group Filter by UUID or by name ConfigContext device_redundancy_group Filter by UUID or by name ConfigContext dynamic_groups Filter by UUID or by name ConfigContext platform Filter by UUID or by name ConfigContext tenant Filter by UUID or by name ConfigContext tenant_group Filter by UUID or by name ConsolePort device Filter by UUID or by name ConsoleServerPort device Filter by UUID or by name Device cluster (formerly cluster_id) Filter by UUID or by name Device device_redundancy_group Filter by UUID or by name Device device_type (formerly device_type_id) Filter by UUID or by model Device manufacturer Filter by UUID or by name Device platform Filter by UUID or by name Device role Filter by UUID or by name Device rack Filter by UUID or by name Device rack_group Filter by UUID or by name Device serial Filtering on multiple values Device secrets_group Filter by UUID or by name Device virtual_chassis Filter by UUID or by name DeviceBay device Filter by UUID or by name DeviceType manufacturer Filter by UUID or by name DeviceRedundancyGroup secrets_group Filter by UUID or by name DynamicGroupMembership group Filter by UUID or by name DynamicGroupMembership parent_group Filter by UUID or by name FrontPort device Filter by UUID or by name GitRepository secrets_group Filter by UUID or by name Interface device Filter by UUID or by name InventoryItem device Filter by UUID or by name InventoryItem manufacturer Filter by UUID or by name InventoryItem serial Filtering on multiple values IPAddress mask_length Filtering on multiple integer values IPAddress rir Filter by UUID or by name IPAddress tenant Filter by UUID or by name IPAddress tenant_group Filter by UUID or by name Manufacturer platforms Filter by UUID or by name Platform manufacturer Filter by UUID or by name PowerOutlet device Filter by UUID or by name PowerPort device Filter by UUID or by name Prefix rir Filter by UUID or by name Prefix tenant Filter by UUID or by name Prefix tenant_group Filter by UUID or by name Prefix vlan_vid Filtering on multiple values ProviderNetwork provider Filter by UUID or by name Rack role Filter by UUID or by name Rack serial Filtering on multiple values RackGroup parent Filter by UUID or by name RackReservation tenant Filter by UUID or by name RackReservation tenant_group Filter by UUID or by name RackReservation user Filter by UUID or by username RearPort device Filter by UUID or by name RouteTarget tenant Filter by UUID or by name RouteTarget tenant_group Filter by UUID or by name SecretsGroupAssociation secret Filter by UUID or by name SecretsGroupAssociation secrets_group Filter by UUID or by name Tenant tenant_group Filter by UUID or by name TenantGroup parent Filter by UUID or by name TenantGroup children Filter by UUID or by name TenantGroup tenants Filter by UUID or by name VirtualChassis master Filter by UUID or by name VirtualChassis tenant Filter by UUID or by name VirtualMachine cluster_group Filter by UUID or by name VirtualMachine cluster_type Filter by UUID or by name VirtualMachine platform Filter by UUID or by name VirtualMachine tenant Filter by UUID or by name VirtualMachine tenant_group Filter by UUID or by name VLAN available_on_device Filtering on multiple values VLAN tenant Filter by UUID or by name VLAN tenant_group Filter by UUID or by name VLAN vlan_group Filter by UUID or by name VRF tenant Filter by UUID or by name VRF tenant_group Filter by UUID or by name"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#corrected-filter-fields","title":"Corrected Filter Fields","text":"<p>Below is a table documenting corrected filter field changes in Nautobot 2.0. These corrections mostly involve filters that previously permitted filtering on related membership only (<code>/api/dcim/devices/?console_ports=True</code>) and have now been corrected into filters for related membership (<code>/api/dcim/devices/?has_console_ports=True</code>) as well as by actual related objects (<code>/api/dcim/devices/?console_ports=&lt;UUID&gt;</code>).</p> Full table of corrected filter fields Model Filter Correction CustomFieldChoice custom_field Filter by UUID or key Device console_ports Split into <code>has_console_ports</code> and <code>console_ports</code> filters Device console_server_ports Split into <code>has_console_server_ports</code> and <code>console_server_ports</code> filters Device device_bays Split into <code>has_device_bays</code> and <code>device_bays</code> filters Device front_ports Split into <code>has_front_ports</code> and <code>front_ports</code> filters Device interfaces Split into <code>has_interfaces</code> and <code>interfaces</code> filters Device power_outlets Split into <code>has_power_outlets</code> and <code>power_outlets</code> filters Device power_ports Split into <code>has_power_ports</code> and <code>power_ports</code> filters Device rear_ports Split into <code>has_rear_ports</code> and <code>rear_ports</code> filters IPAddress parent The <code>parent</code> filter now checks for an exact match of the parent Prefix; for legacy <code>net_host_contained</code> behavior now use the new <code>prefix</code> filter instead"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#removed-filter-fields","title":"Removed Filter Fields","text":"<p>Below is a table documenting removed filter field changes in v2.x. Most removed database fields in Nautobot 2.0 fall into the following general categories:</p> <ol> <li>Removal of <code>*_id=&lt;uuid&gt;</code> filters as they have have been merged into filters that support both uuid and name/slug (for example, instead of <code>/api/circuits/circuits/?provider_id=&lt;UUID&gt;</code>, use <code>/api/circuits/circuits/?provider=&lt;uuid&gt;</code>).</li> <li>Removal of filtering on removed models such as <code>Region</code> and <code>Site</code>. (Use <code>location</code> filters instead.)</li> <li>Removal of <code>slug</code> filters from models that no longer have a <code>slug</code> field.</li> </ol> Full table of removed filter fields Model Removed Filter Comments Circuit provider_id Circuit provider_network_id Circuit region Circuit region_id Circuit site Circuit site_id Circuit tenant_group_id Circuit type_id CircuitTermination circuit_id CircuitTermination provider_network_id CircuitTermination region_id CircuitTermination region CircuitTermination site_id CircuitTermination site CircuitType slug Cluster region Cluster region_id Cluster site Cluster site_id Cluster tenant_group_id ClusterGroup slug ClusterType slug ConfigContext region ConfigContext region_id ConfigContext role_id ConfigContext site ConfigContext site_id ConsolePort device_id ConsolePort region ConsolePort region_id ConsolePort site ConsolePort site_id ConsoleServerPort device_id ConsoleServerPort region ConsoleServerPort region_id ConsoleServerPort site ConsoleServerPort site_id CustomFieldChoice field_id Use <code>custom_field</code> filter CustomLink slug Device manufacturer_id Device model Use <code>device_type</code> filter Device pass_through_ports Use <code>has_front_ports</code> or <code>has_rear_ports</code> filters Device platform_id Device region Device region_id Device role_id Device secrets_group_id Device site Device site_id Device tenant_group_id DeviceBay device_id DeviceBay region DeviceBay region_id DeviceBay site DeviceBay site_id DeviceRedundancyGroup slug DeviceType manufacturer_id DeviceType slug DynamicGroup slug FrontPort device_id FrontPort region FrontPort region_id FrontPort site FrontPort site_id GraphQLQuery slug Interface bridge_id Interface device_id Interface lag_id Interface parent_interface_id Interface region Interface region_id Interface site Interface site_id InventoryItem device_id InventoryItem manufacturer_id InventoryItem parent_id InventoryItem region InventoryItem region_id InventoryItem site InventoryItem site_id IPAddress tenant_group_id Job slug Job source JobHook slug Location region Location region_id Location site Location site_id Location slug Location tenant_group_id LocationType slug Manufacturer slug ObjectPermission user_id Use <code>users</code> filter Platform manufacturer_id Platform slug PowerFeed power_panel_id PowerFeed rack_id PowerFeed region PowerFeed region_id PowerFeed site PowerFeed site_id PowerOutlet device_id PowerOutlet region PowerOutlet region_id PowerOutlet site PowerOutlet site_id PowerPanel rack_group_id PowerPanel region PowerPanel region_id PowerPanel site PowerPanel site_id PowerPort device_id PowerPort region PowerPort region_id PowerPort site PowerPort site_id Prefix region Prefix region_id Prefix site Prefix site_id Prefix vrf_id Use vrf filter instead Provider region Provider region_id Provider site Provider site_id Provider slug ProviderNetwork provider_id ProviderNetwork slug Rack group_id Use <code>rack_group</code> filter Rack region Rack region_id Rack role_id Rack site Rack site_id Rack tenant_group_id RackGroup parent_id RackGroup region RackGroup region_id RackGroup site RackGroup site_id RackGroup slug RackReservation group_id Use <code>rack_group</code> filter RackReservation rack_id RackReservation site RackReservation site_id RackReservation tenant_group_id RackReservation user_id RearPort device_id RearPort region RearPort region_id RearPort site RearPort site_id RelationshipAssociation slug RIR slug RouteTarget exporting_vrf_id Use <code>exporting_vrfs</code> filter RouteTarget importing_vrf_id Use <code>importing_vrfs</code> filter RouteTarget slug RouteTarget tenant_group_id Secret slug SecretsGroup slug SecretsGroupAssociation group_id Use <code>secrets_group</code> filter SecretsGroupAssociation slug Service device_id Service virtual_machine_id Status slug Tag slug Tenant aggregates Use <code>prefixes</code> filter Tenant group_id Use <code>tenant_group</code> filter Tenant has_aggregates Use <code>has_prefixes</code> filter Tenant has_sites Tenant sites Tenant slug TenantGroup parent_id TenantGroup slug VirtualChassis master_id VirtualChassis region VirtualChassis region_id VirtualChassis site VirtualChassis site_id VirtualChassis tenant_id VirtualMachine tenant_group_id VLAN group_id Use <code>vlan_group</code> filter VLAN region VLAN region_id VLAN site VLAN site_id VLAN tenant_group_id VLANGroup region VLANGroup region_id VLANGroup site VLANGroup site_id VLANGroup slug VMInterface bridge_id VMInterface parent_interface_id VRF tenant_group_id VRF export_target_id Use <code>export_targets</code> filter VRF import_target_id Use <code>import_targets</code> filter Webhook slug"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#python-code-location-changes","title":"Python Code Location Changes","text":"<p>The below is mostly relevant only to authors of Jobs and Nautobot Apps. End users should not be impacted by the changes in this section. Most changes in code location arise from the merging of the <code>nautobot.utilities</code> module into the <code>nautobot.core</code> module.</p> Full table of code location changes Old Module Class/Function(s) New Module nautobot.core.api.utils TreeModelSerializerMixin nautobot.core.api.serializers nautobot.core.fields (all) nautobot.core.models.fields nautobot.core.forms SearchForm nautobot.core.forms.search nautobot.core.utilities (all) nautobot.core.views.utils nautobot.dcim.fields MACAddressCharField nautobot.core.models.fields nautobot.dcim.forms MACAddressField nautobot.core.forms nautobot.extras.api.customfields CustomFieldModelSerializerMixin nautobot.core.api.serializers nautobot.extras.api.relationships RelationshipModelSerializerMixin nautobot.core.api.serializers nautobot.extras.api.serializers NautobotModelSerializer nautobot.core.api.serializers nautobot.extras.api.serializers NotesSerializerMixin nautobot.core.api.serializers nautobot.extras.api.serializers TaggedModelSerializerMixin nautobot.extras.api.mixins nautobot.extras.utils is_taggable nautobot.core.models.utils nautobot.utilities.api (all) nautobot.core.api.utils nautobot.utilities.apps (all) nautobot.core.apps nautobot.utilities.checks (all) nautobot.core.checks nautobot.utilities.choices (all) nautobot.core.choices nautobot.utilities.config (all) nautobot.core.utils.config nautobot.utilities.constants (all) nautobot.core.constants nautobot.utilities.deprecation (all) nautobot.core.utils.deprecation nautobot.utilities.error_handlers (all) nautobot.core.views.utils nautobot.utilities.exceptions (all) nautobot.core.exceptions nautobot.utilities.factory (all) nautobot.core.factory nautobot.utilities.fields (all) nautobot.core.models.fields nautobot.utilities.filters (all) nautobot.core.filters nautobot.utilities.forms (all) nautobot.core.forms nautobot.utilities.git (all) nautobot.core.utils.git nautobot.utilities.logging (all) nautobot.core.utils.logging nautobot.utilities.management (all) nautobot.core.management nautobot.utilities.ordering (all) nautobot.core.utils.ordering nautobot.utilities.paginator (all) nautobot.core.views.paginator nautobot.utilities.permissions (all) nautobot.core.utils.permissions nautobot.utilities.query_functions (all) nautobot.core.models.query_functions nautobot.utilities.querysets (all) nautobot.core.models.querysets nautobot.utilities.tables (all) nautobot.core.tables nautobot.utilities.tasks (all) nautobot.core.tasks nautobot.utilities.templatetags (all) nautobot.core.templatetags nautobot.utilities.testing (all) nautobot.core.testing nautobot.utilities.tree_queries (all) nautobot.core.models.tree_queries nautobot.utilities.utils array_to_string nautobot.core.models.utils nautobot.utilities.utils convert_querydict_to_factory_formset_acceptable_querydict nautobot.core.utils.requests nautobot.utilities.utils count_related nautobot.core.models.querysets nautobot.utilities.utils csv_format nautobot.core.views.utils nautobot.utilities.utils deepmerge nautobot.core.utils.data nautobot.utilities.utils dict_to_filter_params nautobot.core.api.utils nautobot.utilities.utils dynamic_import nautobot.core.api.utils nautobot.utilities.utils ensure_content_type_and_field_name_inquery_params nautobot.core.utils.requests nautobot.utilities.utils flatten_dict nautobot.core.utils.data nautobot.utilities.utils flatten_iterable nautobot.core.utils.data nautobot.utilities.utils foreground_color nautobot.core.utils.color nautobot.utilities.utils get_all_lookup_expr_for_field nautobot.core.utils.filtering nautobot.utilities.utils get_api_version_serializer nautobot.core.api.utils nautobot.utilities.utils get_changes_for_model nautobot.core.utils.lookup nautobot.utilities.utils get_filterset_field nautobot.core.utils.filtering nautobot.utilities.utils get_filterset_for_model nautobot.core.utils.lookup nautobot.utilities.utils get_filterable_params_from_filter_params nautobot.core.utils.requests nautobot.utilities.utils get_form_for_model nautobot.core.utils.lookup nautobot.utilities.utils get_model_from_name nautobot.core.utils.lookup nautobot.utilities.utils get_related_class_for_model nautobot.core.utils.lookup nautobot.utilities.utils get_route_for_model nautobot.core.utils.lookup nautobot.utilities.utils get_table_for_model nautobot.core.utils.lookup nautobot.utilities.utils hex_to_rgb nautobot.core.utils.color nautobot.utilities.utils is_taggable nautobot.core.models.utils nautobot.utilities.utils is_uuid nautobot.core.utils.data nautobot.utilities.utils lighten_color nautobot.core.utils.color nautobot.utilities.utils normalize_querydict nautobot.core.utils.requests nautobot.utilities.utils prepare_cloned_fields nautobot.core.views.utils nautobot.utilities.utils pretty_print_query nautobot.core.models.utils nautobot.utilities.utils render_jinja2 nautobot.core.utils.data nautobot.utilities.utils rgb_to_hex nautobot.core.utils.color nautobot.utilities.utils SerializerForAPIVersions nautobot.core.api.utils nautobot.utilities.utils serialize_object nautobot.core.models.utils nautobot.utilities.utils serialize_object_v2 nautobot.core.models.utils nautobot.utilities.utils shallow_compare_dict nautobot.core.utils.data nautobot.utilities.utils slugify_dots_to_dashes nautobot.core.models.fields nautobot.utilities.utils slugify_dashes_to_underscores nautobot.core.models.fields nautobot.utilities.utils to_meters nautobot.core.utils.data nautobot.utilities.utils UtilizationData nautobot.core.utils.data nautobot.utilities.utils versioned_serializer_selector nautobot.core.api.utils nautobot.utilities.validators (all) nautobot.core.models.validators nautobot.utilities.views (all) nautobot.core.views.mixins"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#removed-python-code","title":"Removed Python Code","text":"<ul> <li>Because of the replacement of the <code>?brief</code> REST API query parameter with <code>?depth</code> and the removal of all <code>Nested*Serializers</code>, some of the classes and mixins are removed because they are no longer needed.</li> <li>In the redesigned UI of Nautobot 2.0, menu items may no longer contain buttons, and so the <code>NavMenuButton</code> class and its subclasses have been removed as they are no longer needed/supported.</li> <li>With the reimplementation of CSV import and export, <code>CSVForm</code> classes are generally no longer needed, and so a number of related mixin classes have been removed.</li> </ul> Full table of code removals Module Class/Function(s) nautobot.apps.forms StatusModelCSVFormMixin nautobot.core.filters NameSlugSearchFilterSet nautobot.core.forms.utils parse_csv nautobot.core.forms.utils validate_csv nautobot.circuits.api.nested_serializers (all) nautobot.dcim.api.nested_serializers (all) nautobot.dcim.form_mixins LocatableModelCSVFormMixin nautobot.extras.api.customfields CustomFieldModelSerializer nautobot.extras.api.fields RoleSerializerField nautobot.extras.api.fields StatusSerializerField nautobot.extras.api.nested_serializers (all) nautobot.extras.api.serializers RoleModelSerializerMixin nautobot.extras.api.serializers RoleRequiredRoleModelSerializerMixin nautobot.extras.api.serializers StatusModelSerializerMixin nautobot.extras.api.serializers TagSerializerField nautobot.extras.api.serializers TaggedObjectSerializer nautobot.extras.constants JOB_MAX_SOURCE_LENGTH nautobot.extras.forms.mixins RoleModelCSVFormMixin nautobot.extras.forms.mixins RoleRequiredRoleModelCSVFormMixin nautobot.extras.forms.mixins StatusModelCSVFormMixin nautobot.extras.jobs get_jobs nautobot.extras.jobs get_job_classpaths nautobot.extras.plugins PluginMenuButton nautobot.extras.plugins PluginMenuItem nautobot.ipam.api.nested_serializers (all) nautobot.tenancy.api.nested_serializers (all) nautobot.users.api.nested_serializers (all) nautobot.virtualization.api.nested_serializers (all)"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#renamed-python-code","title":"Renamed Python Code","text":"<p>The below is mostly relevant only to authors of Jobs and Nautobot Apps. End users should not be impacted by the changes in this section. Most of the code renames are only relevant to Job related classes.</p> Full table of code renames Old Name New Name nautobot.extras.views.JobDetailView nautobot.extras.views.JobView nautobot.extras.views.JobView nautobot.extras.views.JobRunView"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#git-data-source-changes","title":"Git Data Source Changes","text":"<p>The Configuration Contexts Metadata key <code>schema</code> has been replaced with <code>config_context_schema</code>. This means that any <code>schema</code> references in your git repository's data must be updated to reflect this change.</p> <p><code>GitRepository</code> sync operations are now Jobs. As a result, when creating a new <code>GitRepository</code> it is not automatically synchronized. A <code>GitRepository.sync()</code> method has been implemented that will execute the sync job on a worker and return the <code>JobResult</code> for the operation. This method takes <code>dry_run</code> and <code>user</code> arguments. The <code>dry_run</code> argument defaults to <code>False</code>; if set to <code>True</code> will cause the sync to dry-run. The <code>user</code> argument is required if a sync is performed.</p> <p>Additionally, the <code>GitRepository.save()</code> method no longer takes a <code>trigger_resync=&lt;True|False&gt;</code> argument as it is no longer required. The act of creating a new <code>GitRepository</code> no longer has side effects.</p> <p>Below is a table documenting changes in names for Git-related Jobs. There should NOT be a need to ever manually execute the jobs due to the addition of <code>GitRepository.sync()</code>, but this is being provided for clarity.</p> Old Job Location New Job Location <code>nautobot.extras.datasources.git.pull_git_repository_and_refresh_data</code> <code>nautobot.core.jobs.GitRepositorySync</code> <code>nautobot.extras.datasources.git.git_repository_diff_origin_and_local</code> <code>nautobot.core.jobs.GitRepositoryDryRun</code>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#logging-changes","title":"Logging Changes","text":"<p>Where applicable, <code>logging.getLogger(\"some_arbitrary_name\")</code> is replaced with <code>logging.getLogger(__name__)</code> or <code>logging.getLogger(__name__ + \".SpecificFeature\")</code>.</p> <p>Below is a table documenting changes in logger names that could potentially affect existing deployments with expectations around specific logger names used for specific purposes.</p> Full table of logger name changes Old Name New Name nautobot.authentication nautobot.core.authentication nautobot.datasources.git nautobot.extras.datasources.git nautobot.datasources.utils nautobot.extras.datasources.utils nautobot.dcim.cable nautobot.dcim.signals.cable nautobot.graphql.generators nautobot.core.graphql.generators nautobot.graphql.schema nautobot.core.graphql.schema nautobot.jobs nautobot.extras.jobs nautobot.jobs.* nautobot.extras.jobs.* nautobot.releases nautobot.core.releases, nautobot.utilities.tasks nautobot.plugins nautobot.extras.templatetags.plugins, nautobot.extras.plugins.utils nautobot.views.* nautobot.core.views.generic.*"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#job-database-model-changes","title":"Job Database Model Changes","text":"<p>The Job <code>name</code> field has been changed to a unique field and the <code>name</code> + <code>grouping</code> uniqueness constraint has been removed. The processes that refresh jobs (<code>nautobot-server post_upgrade</code> and <code>nautobot-server migrate</code>) have been updated to gracefully handle duplicate job names.</p> <p>Example</p> <pre><code>class NautobotJob1(Job):\nclass Meta:\nname = \"Sample job\"\nclass NautobotJob2(Job):\nclass Meta:\nname = \"Sample job\"\n</code></pre> <p>These jobs would be named <code>Sample job</code> and <code>Sample job (2)</code></p> <p>The Job <code>slug</code>, <code>source</code> and <code>git_repository</code> fields have been removed. The Job <code>module_name</code> field will automatically be updated, for Jobs derived from a Git repository, from <code>&lt;submodule_name&gt;</code> to <code>&lt;git_repository_slug&gt;.jobs.&lt;submodule_name&gt;</code>. This also changes the secondary uniqueness constraint for Jobs to simply <code>[module_name, job_class_name]</code>.</p> <p>The Job <code>class_path</code> attribute has been simplified correspondingly, to simply <code>&lt;module&gt;.&lt;ClassName&gt;</code> instead of the former <code>&lt;source&gt;/&lt;module&gt;/&lt;ClassName&gt;</code>. For example, the Nautobot Golden Config backup job's <code>class_path</code> will change from <code>plugins/nautobot_golden_config.jobs/BackupJob</code> to <code>nautobot_golden_config.jobs.BackupJob</code>.</p> <p>The Job <code>commit_default</code> field has been renamed to <code>dryrun_default</code> and the default value has been changed from <code>True</code> to <code>False</code>. This change is a result of the fundamental job changes mentioned in the Job Changes section below.</p>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#jobresult-database-model-changes","title":"JobResult Database Model Changes","text":"<p>The <code>JobResult</code> objects for which results from Job executions are stored are now automatically managed. Therefore job authors must never manipulate or <code>save()</code> these objects as they are now used internally for all state transitions and saving the objects yourself could interfere with and cause Job execution to fail or cause data loss.</p> <p>Therefore all code that is calling <code>JobResult.set_status()</code> (which has been removed) or <code>JobResult.save()</code> must be removed.</p>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#job-changes","title":"Job Changes","text":""},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#migrating-jobs-from-v1-to-v2","title":"Migrating Jobs From v1 to v2","text":"<p>Changed in version 2.0.0</p> <p>See Migrating Jobs From Nautobot v1 for more information on how to migrate your existing jobs to Nautobot v2.</p>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#fundamental-changes","title":"Fundamental Changes","text":"<p>The <code>BaseJob</code> class is now a subclass of Celery's <code>Task</code> class. Some fundamental changes to the job's methods and signatures were required to support this change:</p> <ul> <li>The <code>test_*</code> and <code>post_run</code> methods for backwards compatibility to NetBox scripts and reports were removed. Celery implements <code>before_start</code>, <code>on_success</code>, <code>on_retry</code>, <code>on_failure</code>, and <code>after_return</code> methods that can be used by job authors to perform similar functions.</li> </ul> <p>Important</p> <p>Be sure to call the <code>super()</code> method when overloading any of the job's <code>before_start</code>, <code>on_success</code>, <code>on_retry</code>, <code>on_failure</code>, or <code>after_return</code> methods</p> <ul> <li>The run method signature is now customizable by the job author. This means that the <code>data</code> and <code>commit</code> arguments are no longer passed to the job by default and the job's run method signature should match the the job's input variables.</li> </ul> <p>Example</p> <pre><code>class ExampleJob(Job):\nvar1 = StringVar()\nvar2 = IntegerVar(required=True)\nvar3 = BooleanVar()\nvar4 = ObjectVar(model=Role)\ndef run(self, var1, var2, var3, var4):\n...\n</code></pre>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#database-transactions","title":"Database Transactions","text":"<p>Nautobot no longer wraps the job <code>run</code> method in an atomic database transaction. As a result, jobs that need to roll back database changes will have to decorate the run method with <code>@transaction.atomic</code> or use the <code>with transaction.atomic()</code> context manager in the job code.</p> <p>With the removal of the atomic transaction, the <code>commit</code> flag has been removed. The ability to bypass job approval on dryrun can be achieved by using an optional <code>dryrun</code> argument. Job authors who wish to allow users to bypass approval when the <code>dryrun</code> flag is set should set a <code>dryrun</code> attribute with a value of <code>DryRunVar()</code> on their job class. <code>DryRunVar</code> can be imported from <code>nautobot.extras.jobs</code>.</p> <p>Example</p> <pre><code>from nautobot.extras.jobs import DryRunVar, Job\nclass ExampleJob(Job):\ndryrun = DryRunVar()\ndef run(self, dryrun):\n...\n</code></pre> <p>A new <code>supports_dryrun</code> field has been added to the <code>Job</code> model and <code>Job</code> class that returns true if the <code>Job</code> class implements the <code>dryrun = DryRunVar()</code> attribute. This is used to determine if jobs that require approval can be dry run without prior approval.</p> <p>The <code>commit_default</code> job field has been renamed to <code>dryrun_default</code> and the default value has been changed from <code>True</code> to <code>False</code>.</p> <p>Important</p> <p>The <code>read_only</code> job field no longer changes the behavior of Nautobot core and is left to the job author to decide whether their job is read only.</p> <p>Important</p> <p>Nautobot no longer enforces any job behavior when dryrun is set. It is now the job author's responsibility to define and enforce the execution of a \"dry run\".</p>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#request-property","title":"Request Property","text":"<p>The <code>request</code> property has been changed to a Celery request instead of a Django web request and no longer includes the information from the web request that initiated the Job. The <code>user</code> object is now available as <code>self.user</code> instead of <code>self.request.user</code>.</p>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#url-changes","title":"URL Changes","text":"<p>The Job URL path <code>jobs/results/&lt;uuid:pk&gt;/</code> and URL pattern name <code>job_jobresult</code> are removed. Use URL path <code>job-results/&lt;uuid:pk&gt;/</code> and URL pattern name <code>jobresult</code> instead. Any <code>extras:job_jobresult</code> references should be removed and be replaced by <code>extras:jobresult</code>.</p> <p>The Job URL path <code>/extras/jobs/&lt;str:class_path&gt;/</code> and associated URL pattern name <code>extras:job</code> are changed to URL path <code>/extras/jobs/&lt;str:class_path&gt;/run/</code> and the URL pattern is renamed to <code>extras:job_run_by_class_path</code>. Conversely, the Job detail view URL pattern name <code>extras:job_detail</code> has been renamed to <code>extras:job</code> for consistency with other object detail view URL patterns.</p>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#function-changes","title":"Function Changes","text":"<p>Changed <code>as_form_class</code>, <code>as_form</code> and <code>validate_data</code> functions on <code>BaseJob</code> Model to <code>classmethods</code> so that they can be called directly from the class without needing to instantiate the Job in order to access them.</p>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#function-renames","title":"Function Renames","text":"<p><code>JobDetailView</code> is renamed to <code>JobView</code>.</p> <p><code>JobView</code> is renamed to <code>JobRunView</code>.</p>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#settings-changes","title":"Settings Changes","text":""},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#added-settings","title":"Added Settings","text":"<p>These settings are new in Nautobot 2.0 and can be changed in your <code>nautobot_config.py</code> file or via environment variables if desired:</p> <ul> <li><code>CELERY_WORKER_REDIRECT_STDOUTS</code> (env: <code>NAUTOBOT_CELERY_WORKER_REDIRECT_STDOUTS</code>)</li> <li><code>CELERY_WORKER_REDIRECT_STDOUTS_LEVEL</code> (env: <code>NAUTOBOT_CELERY_WORKER_REDIRECT_STDOUTS_LEVEL</code>)</li> </ul>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#removed-settings","title":"Removed Settings","text":"<p>These settings are no longer in use and should be removed from your <code>nautobot_config.py</code> file and environment variables if present:</p> <ul> <li><code>CACHEOPS_DEFAULTS</code> (env: <code>NAUTOBOT_CACHEOPS_TIMEOUT</code>)</li> <li><code>CACHEOPS_ENABLED</code> (env: <code>NAUTOBOT_CACHEOPS_ENABLED</code>)</li> <li><code>CACHEOPS_HEALTH_CHECK_ENABLED</code></li> <li><code>CACHEOPS_REDIS</code> (env: <code>NAUTOBOT_CACHEOPS_REDIS</code>)</li> <li><code>CACHEOPS_SENTINEL</code></li> <li><code>DISABLE_PREFIX_LIST_HIERARCHY</code></li> <li><code>ENFORCE_GLOBAL_UNIQUE</code> (env: <code>NAUTOBOT_ENFORCE_GLOBAL_UNIQUE</code>)</li> <li><code>RQ_QUEUES</code></li> </ul>"},{"location":"user-guide/administration/upgrading/from-v1/upgrading-from-nautobot-v1.html#changed-settings","title":"Changed Settings","text":"<p>These settings are no longer user servicable and should be removed from your <code>nautobot_config.py</code> file and environment variables if present:</p> <ul> <li><code>CELERY_RESULT_BACKEND</code> (env: <code>NAUTOBOT_CELERY_RESULT_BACKEND</code>)</li> <li><code>CELERY_RESULT_BACKEND_TRANSPORT_OPTIONS</code></li> </ul>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/index.html","title":"Nautobot 2.0 IPAM Migration Guide","text":""},{"location":"user-guide/administration/upgrading/from-v1/ipam/index.html#goal","title":"Goal","text":"<p>This document aims to answer the question \"What do I need to do to my data (or what changes with my data) when migrating to 2.0, specifically IPAM?\"</p> <p>Each change is covered in detail to describe the changes, their impact, and the underlying reasons why the changes were made.</p> <p>Please see the individual sections for more details.</p>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/index.html#sections","title":"Sections","text":"<ul> <li>What's Changed</li> <li>Before you Upgrade</li> <li>After you Upgrade</li> <li>For Developers</li> </ul>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/after-you-upgrade.html","title":"After you Upgrade","text":"<p>This section includes various things to consider after you have successfully upgraded to Nautobot 2.0.</p>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/after-you-upgrade.html#review-any-cleanup-or-vrf-namespaces","title":"Review any Cleanup or VRF Namespaces","text":"<p>This may also apply to any \"VRF Namespace\" objects that were created, depending on your requirements on maintaining duplicate Prefix/IPAddress objects.</p> <p>A priority of the upgrade process is to assert that no data will be lost. Due to the introduction of strict uniqueness constraints to disallow duplicate <code>Prefix</code>, <code>IPAddress</code>, and <code>VRF</code> objects within the same <code>Namespace</code>, depending on the nature of your data, you may have numerous \"VRF\" or \"Cleanup\" Namespaces that were automatically created by the upgrade process as described in the previous section.</p>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/after-you-upgrade.html#a-word-on-tenant-affinity","title":"A word on Tenant affinity","text":"<p>A best effort is made to keep <code>Prefixes</code> and <code>IPAddresses</code> together in the same <code>Namespace</code> by shared attributes such as <code>Tenant</code>, but this is not always possible for various reasons such as numerous duplicates with identical or too-closely-similar criteria.</p> <p>For more information on how this is done please see the section Parenting affinity during the upgrade above.</p> <p>If you find that you have objects that were moved to the wrong Namespaces, you might try the next section on swapping Namespaces.</p>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/after-you-upgrade.html#swapping-namespaces","title":"Swapping Namespaces","text":"<p>If you need to swap a duplicate object into another <code>Namespace</code> (say \"Global\" and \"Cleanup Namespace 1\") where it conflicts with one in the desired <code>Namespace</code>, you can use this basic strategy to facilitate moving duplicate objects between <code>Namespaces</code> by using a temporary interstitial <code>Namespace</code>.</p> <p>In this example we'll use three <code>Namespaces</code>. \"Global\", the <code>Namespace</code> in which you have duplicate objects that are found in \"Cleanup Namespace 1\", but you would like them to be the \"Global\" Namespace. We'll create a third Namespace called \"Temporary\" to act as the go-between to temporarily hold objects from one <code>Namespace</code> that we want to swap into another.</p> <ul> <li>First, Create a new  Namespace named \"Temporary\"</li> <li>Next, edit any desired objects you want to swap in objects from the \"Global\" Namespace and update their Namespace to \"Temporary\"<ul> <li>After performing this step, there should be no duplicates found in the \"Global\" Namespace</li> </ul> </li> <li>Next, edit the duplicate objects you want moved in from \"Cleanup Namespace 1\" and set their Namespace to \"Global\".<ul> <li>After performing this step there should be no duplicates found in the \"Cleanup Namespace 1\" Namespace, as they've been moved to \"Global\"</li> </ul> </li> <li>Finally, edit the original objects found in the \"Temporary\" Namespace that were moved from \"Global\" to \"Temporary\" and set their Namespace \"Cleanup Namespace 1\"<ul> <li>After performing this final step, the duplicate objects that were originally in the \"Global\" have now been swapped with those that were originally in the \"Cleanup Namespace 1\" Namespace.</li> <li>There are no duplicate objects found in the \"Temporary\" Namespace. This Namespace can safely be deleted.</li> </ul> </li> <li>Delete the \"Temporary\" Namespace when done.</li> </ul>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/after-you-upgrade.html#merge-duplicate-ip-addresses","title":"Merge duplicate IP Addresses","text":"<p>After upgrading to Nautobot v2.0 and running the data migrations necessary, duplicate <code>IPAddress</code> objects might exist in your database. We define duplicate <code>IPAddress</code> objects as those which have the same <code>host</code> attribute but exist in different <code>Namespaces</code>. If you have no use case to keep those duplicate <code>IPAddress</code> objects around, we recommend you to use this tool to de-duplicate those <code>IPAddress</code> objects and keep your database clean and manageable. But if you do have reasons to maintain duplicate <code>IPAddress</code> objects, this tool is not for you.</p> <p>For more information, please see the documentation on the Duplicate IP Address Merge Tool.</p>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/after-you-upgrade.html#delete-duplicate-objects","title":"Delete duplicate objects","text":"<p>Because preventing data loss is prioritized, some objects that may have been required to be duplicates before may no longer be needed. For objects that weren't covered by the Duplicate IP Address Merge Tool, deleting objects might be your next course of action.</p> <p>Some examples include:</p> <ul> <li>The same <code>IPAddress</code> assigned to multiple <code>Interfaces/VMInterfaces</code>. Where possible, a single <code>IPAddress</code> is now assigned leaving duplicate objects across other Namespaces to be potentially no longer necessary.</li> <li><code>VRFs</code> that were used strictly for custom uniqueness boundaries with <code>enforce_unique</code> set to <code>True</code> may not necessarily be needed.</li> </ul>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/after-you-upgrade.html#cleanup-your-config","title":"Cleanup your config","text":"<p>Remove the now-deprecated settings from your <code>nautobot_config.py</code>:</p> <ul> <li><code>DISABLE_PREFIX_LIST_HIERARCHY</code></li> <li><code>ENFORCE_GLOBAL_UNIQUE</code></li> </ul>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/before-you-upgrade.html","title":"Before you Upgrade","text":"<p>This section covers how you can prepare your IPAM Data for Nautobot 2.0.</p>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/before-you-upgrade.html#run-the-pre-migration-helper-before-upgrading","title":"Run the pre-migration helper before upgrading","text":"<p>A new pre-migration management command was added that will allow you to check your existing data for compatibility with the data model changes introduced in Nautobot 2.0. You are highly encouraged to run this before upgrading!</p> <p>For more information please see the documentation on Pre-migration validation.</p>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/before-you-upgrade.html#you-cannot-migrate-interfaces-or-vminterfaces-that-have-ips-with-differing-vrfs","title":"You cannot migrate Interfaces or VMInterfaces that have IPs with differing VRFs","text":"<p>When assigning a <code>VRF</code> to an<code>IPaddress</code>, the <code>VRF</code> must be the same across each IP when multiple <code>IPAddress</code> objects are assigned to <code>Interface</code>/<code>VMInterface</code> objects.</p> <p>Make sure for <code>Interfaces</code>/<code>VMInterfaces</code> with multiple IPs that each <code>IPAddress</code>1 assigned to the same <code>Interface</code>/<code>VMInterface</code> share the same VRF, or are not assigned a VRF.</p>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/before-you-upgrade.html#parent-prefixes-child-prefixes-and-child-ipaddresses-must-share-the-same-namespace","title":"Parent Prefixes, child Prefixes, and child IPAddresses must share the same Namespace","text":"<p>Parent <code>Prefixes</code>, child <code>Prefixes</code>, and <code>IPAddresses</code> must share the same <code>Namespace</code> and any case for duplicate <code>Prefix</code>/<code>IPAddress</code> must involve leveraging distinct <code>Namespace</code> objects.</p> <p>If you need to maintain duplicates for any reason, assert that each set of duplicate objects are assigned to a distinct <code>VRF</code> with <code>enforce_unique</code> set to <code>True</code>, as during the upgrade process these will each be moved to their own \"VRF Namespace\". Please see the section on VRF Namespaces below for more information.</p>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/before-you-upgrade.html#ipaddress-objects-can-no-longer-be-orphaned","title":"IPAddress objects can no longer be orphaned","text":"<p><code>IPAddresses</code> must now always have a parent <code>Prefix</code> to contain them. Any <code>IPAddress</code> that does not have a parent is considered to be \"orphaned\" and as of Natutobot 2.0 this is not allowed.</p> <p>When upgrading to Nautobot 2.0, the database migration will automatically create a parent <code>Prefix</code> for <code>IPAddresses</code> that do not have an eligible parent <code>Prefix</code>. For example an <code>IPAddress</code> with address of <code>1.2.3.4/32</code> will have a parent <code>Prefix</code> created of the same <code>network</code> and <code>prefix_length</code> e.g. <code>1.2.3.4/32</code>.</p> <p>If you do not wish for these single-host <code>Prefixes</code> to be created, create a parent <code>Prefix</code> of your desired size to contain any would-be orphaned <code>IPAddresses</code> before upgrading.</p>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/before-you-upgrade.html#prepare-for-namespaces","title":"Prepare for Namespaces","text":"<p>After upgrading, there will be two distinct sets of extra <code>Namespace</code> objects created based on specific conditions of your data set.</p> <p>First, any <code>VRF</code> objects with <code>enforce_unique</code> enabled (which is the default), will be moved to \"VRF Namespace\" objects. Second, any duplicate objects will be moved to \"Cleanup Namespace\" objects.</p> <p>Each of these are covered below.</p>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/before-you-upgrade.html#cleanup-namespaces","title":"Cleanup Namespaces","text":"<p>After upgrading, any duplicate objects that were found in the \"Global\" Namespace will be moved to one or more \"Cleanup\" Namespaces. Cleanup Namespaces are named numerically. When duplicate objects are identified that are not associated with a VRF that has <code>enforce_unique</code> set to <code>True</code>, each Cleanup Namespace will be enumerated until one that does not have conflicting objects can be found. If one cannot be found, a new Cleanup Namespace will be created.</p> <p>For example, the very first duplicate <code>Prefix</code> found will be moved to a Namespace named \"Cleanup Namespace 1\". For each pass that identifies a duplicate of an object in an existing Namespace, new Namespaces will be created by incrementing the number resulting in \"Cleanup Namespace 2\", \"Cleanup Namespace 3\", etc.</p> <p>Because Cleanup Namespaces will be created to avoid data loss, there is little you can do to avoid their creation during the upgrade process. You may want to review your Cleanup Namespaces or swap objects around between other Namespaces.</p> <p>Please review any Cleanup Namespaces after you upgrade.</p>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/before-you-upgrade.html#vrf-namespaces","title":"VRF Namespaces","text":"<p>For <code>VRF</code> objects that had <code>enforce_unique</code> enabled with <code>Prefixes</code> assigned to them, any child <code>Prefixes</code> or child <code>IPAddresses</code> of those <code>Prefixes</code> will be moved to a \"VRF Namespace\" with the name of the <code>VRF</code> included.</p> <p>For example, if the <code>VRF</code> is named \"Blue\" and has <code>Prefixes</code> assigned to it, the <code>VRF</code>, all <code>Prefixes</code> assigned to it, and any child <code>Prefixes</code> or <code>IPAddresses</code> will be moved to a new <code>Namespace</code> with the name \"VRF Namespace Blue\".</p> <p>If you wish to reduce the need for creation of VRF Namespaces, review your existing <code>VRF</code> objects with <code>enforce_unique</code> enabled to identify their relevance. If you do not require enforcing uniqueness in the VRF itself, you may toggle <code>enforce_unique</code> to tell Nautobot to handle any potential duplicates globally instead, which may result in duplicate objects being moved to Cleanup Namespaces that will need to be reviewed following the upgrade process.</p> <p>Please review any Cleanup or VRF Namespaces after you upgrade.</p>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/before-you-upgrade.html#aggregate-model-was-merged-into-prefix","title":"Aggregate model was merged into Prefix","text":"<p>The <code>Aggregate</code> model was removed and all existing aggregates will be migrated to <code>Prefix</code> with type set to <code>Container</code>. The <code>Aggregate.date_added</code> field will be migrated to <code>Prefix.date_allocated</code> and changed from a <code>Date</code> field to a <code>DateTime</code> field with the time set to <code>00:00</code>. The fields <code>Aggregate.tenant</code>, <code>Aggregate.rir</code>, and <code>Aggregate.description</code> will be migrated over to the same fields on <code>Prefix</code>.</p> <p>If a <code>Prefix</code> already exists with the same network and prefix length as a previous <code>Aggregate</code>, the <code>rir</code> and <code>date_added</code> fields will be copied to the <code>rir</code> and <code>date_allocated</code> fields on the existing Prefix object. Messages will be output during migration (<code>nautobot-server migrate</code> or <code>nautobot-server post_upgrade</code>) if the <code>tenant</code>, <code>description</code> or <code>type</code> fields need to be manually migrated.</p> Aggregate Prefix <code>broadcast</code> <code>broadcast</code> <code>date_added</code> <code>date_allocated</code> <code>description</code> <code>description</code> <code>network</code> <code>network</code> <code>prefix_length</code> <code>prefix_length</code> <code>rir</code> <code>rir</code> <code>tenant</code> <code>tenant</code>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/for-developers.html","title":"For Developers","text":"<p>This section covers technical changes to the underlying data models and programmable interfaces and is intended for developers or integrators to help facilitate any necessary changes to functional code in Apps/plugins that extend Nautobot.</p>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/for-developers.html#database-orm-changes","title":"Database (ORM) Changes","text":""},{"location":"user-guide/administration/upgrading/from-v1/ipam/for-developers.html#database-field-behavior-changes","title":"Database Field Behavior Changes","text":"Model Field Changes IPAddress role Changed from <code>CharField</code> to a <code>ForeignKey</code> to the new <code>Role</code> model. IPAddress primary_ip4_for Now a list as the reverse relation for the <code>Device.primary_ip4</code> foreign key IPAddress primary_ip6_for Now a list as the reverse relation for the <code>Device.primary_ip6</code> foreign key Prefix is_pool Replaced by new field <code>type</code>, valid choices are \"Container\", \"Network\" and \"Pool\" Prefix namespace New required foreign key to Namespace, defaulting to 'Global' Prefix status \"Container\" status has been replaced by new field <code>type</code> VRF namespace New required foreign key to Namespace, defaulting to 'Global'"},{"location":"user-guide/administration/upgrading/from-v1/ipam/for-developers.html#renamed-database-fields","title":"Renamed Database Fields","text":"<p>Most renamed database fields in Nautobot 2.0 fall into the following general categories:</p> <ol> <li>Renaming of foreign keys and reverse relations to more consistently and specifically match the related model name or plural name (for example, <code>Circuit.terminations</code> to <code>Circuit.circuit_terminations</code>, <code>Rack.group</code> to <code>Rack.rack_group</code>)</li> <li>Explicitly for the <code>IPAddress</code> and <code>Prefix</code> models, <code>family</code>, a derived field, was replaced with <code>ip_version</code>, a concrete integer field that may be used in query filters.</li> </ol> Model Renamed Field New Name IPAddress family ip_version IPAddress prefix_length mask_length Prefix family ip_version Service ipaddresses ip_addresses VLAN group vlan_group"},{"location":"user-guide/administration/upgrading/from-v1/ipam/for-developers.html#removed-database-fields","title":"Removed Database Fields","text":"<p>Most removed database fields in Nautobot 2.0 fall into the following general categories:</p> <ol> <li>Removal of references to removed models such as <code>Site</code> and <code>Region</code></li> <li>Removal of <code>slug</code> fields in preference to the use of the natural key.</li> </ol> Model Removed Field Comments IPAddress assigned_object Replaced by <code>interfaces</code> and <code>vm_interfaces</code> many-to-many relations IPAddress broadcast Use parent Prefix's broadcast instead IPAddress vrf VRF is now related to the assigned Interface(s), as well as the parent Prefix Prefix is_pool Replaced by new <code>type</code> field Prefix site Use <code>location</code> instead Prefix vrf Replaced by <code>vrf_assignments</code> many-to-many relation RouteTarget slug VLAN site Use <code>location</code> instead VLANGroup site Use <code>location</code> instead VLANGroup slug VRF enforce_unique Uniqueness of Prefixes and IPAddresses is now enforced by the database"},{"location":"user-guide/administration/upgrading/from-v1/ipam/for-developers.html#replaced-models","title":"Replaced Models","text":"<p>The <code>ipam.Role</code>  model has been removed and replaced by a single <code>extras.Role</code> model. This means that any references to the removed models in the code now use the <code>extras.Role</code> model instead.</p> Removed Model Replaced With <code>ipam.Role</code> <code>extras.Role</code>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/for-developers.html#graphql-and-rest-api-changes-changes","title":"GraphQL and REST API Changes Changes","text":""},{"location":"user-guide/administration/upgrading/from-v1/ipam/for-developers.html#api-behavior-changes","title":"API Behavior changes","text":"<p>Most of the API behavior changes in Nautobot 2.0 fall into the following general categories:</p> <ol> <li>The <code>created</code> field on most models has changed from a date only (\"2023-04-06\") to being a date/time (\"2023-04-06T19:57:45.320232Z\")</li> <li>The <code>status</code> fields on various models has changed from a pseudo-enum value (containing a \"value\" and a \"label\") to referencing the related Status object in full, similar to other foreign-key fields.</li> <li>Various models that had a required <code>site</code> field and an optional <code>location</code> field now have a required <code>location</code> field.</li> </ol> Model Field Changes IPAddress parent A new foreign-key to <code>Prefix</code>. Required on creation, if <code>namespace</code> isn't provided, to find a correct parent Prefix IPAddress role Now is a foreign-key to <code>Role</code> rather than a string IPAddress status Now is a foreign-key rather than a pseudo-enum Prefix namespace New required foreign key to Namespace, defaulting to 'Global' Prefix status Now is a foreign-key rather than a pseudo-enum VLAN status Now is a foreign-key rather than a pseudo-enum VRF namespace New required foreign key to Namespace, defaulting to 'Global'"},{"location":"user-guide/administration/upgrading/from-v1/ipam/for-developers.html#renamed-serializer-fields","title":"Renamed Serializer Fields","text":"<p>Most renamed API fields in Nautobot 2.0 fall into the following general categories:</p> <ol> <li>Renaming of foreign keys and reverse relations to more consistently and specifically match the related model name or plural name (for example, <code>Circuit.type</code> to <code>Circuit.circuit_type</code>, <code>Interface.count_ipaddresses</code> to <code>Interface.ip_address_count</code>)</li> </ol> Model Renamed Field New Name IPAddress family ip_version Prefix family ip_version VLAN group vlan_group"},{"location":"user-guide/administration/upgrading/from-v1/ipam/for-developers.html#removed-serializer-fields","title":"Removed Serializer Fields","text":"<p>Most removed database fields in Nautobot 2.0 fall into the following general categories:</p> <ol> <li>Removal of references to removed models such as <code>Site</code> and <code>Region</code></li> <li>Removal of <code>slug</code> fields in preference to the use of the natural key.</li> </ol> Model/Endpoint Removed Field Comments IPAddress assigned_object Changed to many-to-many field. Use the REST API view for <code>IPAddressToInterface</code>(/api/ipam/ip-address-to-interface/) to create/modify/delete associations or <code>interfaces</code>/<code>vm_interfaces</code> on this model to retrieve a list of associated interfaces. IPAddress broadcast Use parent Prefix's broadcast instead IPAddress vrf VRF is now related to the assigned Interface(s), as well as the parent Prefix Prefix is_pool Use <code>type</code> instead Prefix vrf Prefixes are now assigned to a VRF in the same Namespace via a many-to-many relationship Prefix site Use <code>location</code> instead RouteTarget slug VLAN site Use <code>location</code> instead VLANGroup site Use <code>location</code> instead VLANGroup slug VRF enforce_unique Uniqueness of Prefixes and IPAddresses is now enforced at the database level"},{"location":"user-guide/administration/upgrading/from-v1/ipam/for-developers.html#replaced-endpoints","title":"Replaced Endpoints","text":"<p>The endpoint <code>/ipam/roles/</code> is no longer available. Instead, use the <code>/extras/roles/</code> endpoint to retrieve and manipulate <code>role</code> data.</p> Removed Endpoints Replaced With <code>/ipam/roles/</code> <code>/extras/roles/</code>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/for-developers.html#ui-graphql-and-rest-api-filter-changes","title":"UI, GraphQL, and REST API Filter Changes","text":""},{"location":"user-guide/administration/upgrading/from-v1/ipam/for-developers.html#renamed-filter-fields","title":"Renamed Filter Fields","text":"<p>Most renamed filter fields in Nautobot 2.0 fall into the following general categories:</p> <ol> <li>The <code>tag</code> filter is renamed to <code>tags</code> on all models supporting Tags.</li> <li>Renames to match renamed model/serializer fields as described earlier in this document.</li> <li>Related membership filters are renamed to <code>has_&lt;related&gt;</code> throughout, for example <code>ConsolePort.cabled</code> is renamed to <code>ConsolePort.has_cable</code>.</li> <li>Most <code>&lt;related&gt;_id</code> filters have been merged into the corresponding <code>&lt;related&gt;</code> filter (see \"Enhanced Filter Fields\" below).</li> </ol> Model Renamed Filter New Name Renamed Field IPAddress assigned_to_interface has_interface_assignments IPAddress family ip_version IPAddress parent prefix IPAddress tag tags Prefix family ip_versionip_version Prefix is_pool type Prefix tag tags RouteTarget tag tags Service tag tags VLAN group vlan_group VLAN tag tags VRF tag tags"},{"location":"user-guide/administration/upgrading/from-v1/ipam/for-developers.html#enhanced-filter-fields","title":"Enhanced Filter Fields","text":"<p>Below is a table documenting enhanced filter field changes in Nautobot 2.0. These enhancements mostly fall into the following general categories:</p> <ol> <li>Many filters are enhanced to permit filtering by UUID or by name.</li> <li>Filters that previously only supported a single filter value can now filter on multiple values.</li> </ol> Model Filter Enhancements IPAddress mask_length Filtering on multiple integer values IPAddress rir Filter by UUID or by name IPAddress tenant Filter by UUID or by name IPAddress tenant_group Filter by UUID or by name Prefix rir Filter by UUID or by name Prefix tenant Filter by UUID or by name Prefix tenant_group Filter by UUID or by name RouteTarget tenant Filter by UUID or by name RouteTarget tenant_group Filter by UUID or by name VLAN available_on_device Filtering on multiple values VLAN tenant Filter by UUID or by name VLAN tenant_group Filter by UUID or by name VLAN vlan_group Filter by UUID or by name VRF tenant Filter by UUID or by name VRF tenant_group Filter by UUID or by name"},{"location":"user-guide/administration/upgrading/from-v1/ipam/for-developers.html#corrected-filter-fields","title":"Corrected Filter Fields","text":"<p>Below is a table documenting corrected filter field changes in Nautobot 2.0. These corrections mostly involve filters that previously permitted filtering on related membership only (<code>/api/dcim/devices/?console_ports=True</code>) and have now been corrected into filters for related membership (<code>/api/dcim/devices/?has_console_ports=True</code>) as well as by actual related objects (<code>/api/dcim/devices/?console_ports=&lt;UUID&gt;</code>).</p> Model Filter Correction IPAddress parent The <code>parent</code> filter now checks for an exact match of the parent Prefix; for legacy <code>net_host_contained</code> behavior now use the new <code>prefix</code> filter instead"},{"location":"user-guide/administration/upgrading/from-v1/ipam/for-developers.html#removed-filter-fields","title":"Removed Filter Fields","text":"<p>Below is a table documenting removed filter field changes in v2.x. Most removed database fields in Nautobot 2.0 fall into the following general categories:</p> <ol> <li>Removal of <code>*_id=&lt;uuid&gt;</code> filters as they have have been merged into filters that support both uuid and name/slug (for example, instead of <code>/api/circuits/circuits/?provider_id=&lt;UUID&gt;</code>, use <code>/api/circuits/circuits/?provider=&lt;uuid&gt;</code>).</li> <li>Removal of filtering on removed models such as <code>Region</code> and <code>Site</code>. (Use <code>location</code> filters instead.)</li> <li>Removal of <code>slug</code> filters from models that no longer have a <code>slug</code> field.</li> </ol> Model Removed Filter Comments Prefix region Prefix region_id Prefix site Prefix site_id Prefix vrf_id Use vrf filter instead RouteTarget slug RouteTarget tenant_group_id VLAN group_id Use <code>vlan_group</code> filter VLAN region VLAN region_id VLAN site VLAN site_id VLAN tenant_group_id VLANGroup region VLANGroup region_id VLANGroup site VLANGroup site_id VLANGroup slug VRF tenant_group_id"},{"location":"user-guide/administration/upgrading/from-v1/ipam/whats-changed.html","title":"What's Changed","text":"<p>This section details the high-level changes as it relates to the data modeling for IPAM objects. Some of the sections are repeating content found in the release notes with detail added for improved readability. Additionally, not all changes described will be distinctly related to IPAM, but if there were changes to relationships to or from IPAM data models, the impact of those changes will be described here.</p>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/whats-changed.html#namespaces-were-introduced","title":"Namespaces were introduced","text":"<p>The new <code>Namespace</code> model expands on the functionality previously provided by <code>VRF.enforce_unique</code> and the <code>ENFORCE_GLOBAL_UNIQUE</code> setting, both of which have now been removed. Within a Namespace, all VRFs, Prefixes, and IP addresses must be unique. This enables greater flexibility in managing discrete duplicate <code>VRF</code>, <code>Prefix</code> or <code>IPAddress</code> objects, asserting that each set of duplicates will be in a distinct <code>Namespace</code>.</p> <p>For more details please refer to the Namespace model documentation.</p>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/whats-changed.html#sample-namespace-implementation-diagram","title":"Sample Namespace Implementation Diagram","text":""},{"location":"user-guide/administration/upgrading/from-v1/ipam/whats-changed.html#default-namespace","title":"Default Namespace","text":"<p>A default <code>Namespace</code> object named \"Global\" will be created for you. All objects that did not have duplicates found will be found in this Namespace. All new objects will default to this Namespace unless otherwise specified.</p>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/whats-changed.html#role-model-is-now-generic-across-nautobot","title":"Role model is now Generic across Nautobot","text":"<p>The <code>DeviceRole</code>, <code>RackRole</code>, <code>ipam.Role</code>, and <code>IPAddressRoleChoices</code> have all been removed and replaced with an <code>extras.Role</code> model. This means that all references to any of the replaced models and choices now points to this generic <code>Role</code> model.</p> <p>In addition, the <code>role</code> field of the <code>IPAddress</code> model will be changed from a choice field to a foreign key field related to the <code>extras.Role</code> model.</p> <p>For more details please refer to the documention on Roles.</p>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/whats-changed.html#prefix-parenting-concrete-relationship-was-added","title":"Prefix Parenting Concrete Relationship was added","text":"<p>The <code>Prefix</code> model was modified to have a self-referencing foreign key as the <code>parent</code> field. Parenting of prefixes is now automatically managed at the database level to greatly improve performance especially when calculating tree hierarchy and utilization.</p> <p>As a result of this change, it is no longer necessary nor possible to disable tree hierarchy using <code>settings.DISABLE_PREFIX_LIST_HIERARCHY</code> as this setting has been removed. Additionally it is no longer possible to disable global uniqueness using <code>settings.ENFORCE_GLOBAL_UNIQUE</code> as this setting has been removed.</p>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/whats-changed.html#prefix-parenting-guidance","title":"Prefix Parenting Guidance","text":"<p>The following guidance has been added for the <code>Prefix</code> model in order to ensure more accurate network modeling:</p> <ul> <li>A <code>Prefix</code> of type <code>Container</code> should only have a parent (if any) of type <code>Container</code></li> <li>A <code>Prefix</code> of type <code>Network</code> should only have a parent (if any) of type <code>Container</code></li> <li>A <code>Prefix</code> of type <code>Pool</code> should only have a parent (if any) of type <code>Network</code></li> <li>Any <code>Prefix</code> can be a root prefix (i.e. have no parent)</li> </ul> <p>In Nautobot 2.0, creating or updating prefixes that violate this guidance will result in a warning; in a future Nautobot release this will be changed to an enforced data constraint.</p>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/whats-changed.html#prefixis_pool-field-and-container-status-replaced-by-new-field-prefixtype","title":"Prefix.is_pool field and \"Container\" status replaced by new field Prefix.type","text":"<p>A new type field was added to <code>Prefix</code> to replace the <code>is_pool</code> boolean field and the \"Container\" <code>status</code>. The <code>type</code> field can be set to \"Network\", \"Pool\" or \"Container\", with \"Network\" being the default.</p> <p>Existing <code>Prefixes</code> with a <code>status</code> of \"Container\" will be migrated to the \"Container\" <code>type</code>. Existing prefixes with <code>is_pool</code> set are migrated to the \"Pool\" <code>type</code>. Prefixes with both <code>is_pool set</code> and a <code>status</code> of \"Container\" are migrated to the \"Pool\" <code>type</code>.</p> <p>The \"Container\" <code>status</code> will be removed and all prefixes will be migrated to the \"Active\" <code>status</code> if it exists. If the \"Active\" <code>status</code> does not exist, prefixes will instead be migrated to the first available <code>Prefix</code> <code>status</code> in the database that is not \"Container\".</p>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/whats-changed.html#prefix-utilization-calculations-were-revamped","title":"Prefix utilization calculations were revamped","text":"<p>The <code>get_utilization</code> method on the <code>ipam.Prefix</code> model has been updated in 2.0 to account for the <code>Prefix.type</code> field as described above under Prefix Parenting Guidance. The behavior is now as follows:</p> <ul> <li>If the <code>Prefix.type</code> is <code>Container</code>, the utilization is calculated as the sum of the total address space of all child prefixes.</li> <li>If the <code>Prefix.type</code> is <code>Pool</code>, the utilization is calculated as the sum of the total number of IP addresses within the pool's range.</li> <li>If the <code>Prefix.type</code> is <code>Network</code>:<ul> <li>The utilization is calculated as the sum of the total address space of all child <code>Pool</code> prefixes plus the total number of child IP addresses.</li> <li>For IPv4 networks with a <code>prefix_length</code> larger (lower) than <code>/31</code>, if neither the first or last address is occupied by either a pool or an IP address, they are subtracted from the total size of the prefix.</li> </ul> </li> </ul>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/whats-changed.html#example","title":"Example","text":"<ul> <li>192.168.0.0/16          <code>Container - 1024/65536 utilization</code><ul> <li>192.168.1.0/24      <code>Network - 1/254 utilization</code><ul> <li>192.168.1.1     <code>IP Address</code></li> </ul> </li> <li>192.168.2.0/24      <code>Network - 4/256 utilization</code><ul> <li>192.168.2.0/30  <code>Pool - 1/4 utilization</code><ul> <li>192.168.2.1 <code>IP Address</code></li> </ul> </li> </ul> </li> <li>192.168.3.0/24      <code>Network - 5/254 utilization</code><ul> <li>192.168.3.1     <code>IP Address</code></li> <li>192.168.3.64/30 <code>Pool - 0/4 utilization</code></li> </ul> </li> <li>192.168.4.0/24      <code>Network - 1/256 utilization</code><ul> <li>192.168.4.255   <code>IP Address</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/whats-changed.html#ipaddress-parenting-concrete-relationship-was-added","title":"IPAddress Parenting Concrete Relationship was added","text":"<p>The <code>ipam.IPAddress</code> model has been modified to have a mandatory foreign key to <code>ipam.Prefix</code> as the <code>parent</code> field. Parenting of IP addresses is now automatically managed at the database level to greatly improve performance especially when calculating tree hierarchy and utilization.</p>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/whats-changed.html#ipaddress-parenting-guidance","title":"IPAddress Parenting Guidance","text":"<p>The following guidance has been added to the <code>IPAddress</code> model:</p> <ul> <li>An <code>IPAddress</code> should have a parent <code>Prefix</code> of type <code>Network</code></li> <li>An <code>IPAddress</code> should not be created if a suitable parent <code>Prefix</code> of type <code>Network</code> does not exist</li> <li>An <code>IPAddress</code> can be a member of a <code>Pool</code> but only if the <code>Pool</code> is a child of a <code>Network</code></li> <li>If an eligible parent <code>Prefix</code> cannot be found for an <code>IPAddress</code> in a given <code>Namespace</code>, creation or update of that <code>IPAddress</code> will fail.</li> <li>If deleting a parent <code>Prefix</code> would result in any child <code>IPAddress</code> objects to become orphaned, the delete operation will fail.</li> </ul> <p>As with the <code>Prefix</code> parenting guidance above, violating this guidance in Nautobot 2.0 will result in a warning; in a future Nautobot release this will be changed to an enforced data constraint.</p>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/whats-changed.html#parenting-affinity-during-the-upgrade","title":"Parenting affinity during the upgrade","text":"<p>A best effort is made to keep <code>Prefixes</code> and <code>IPAddresses</code> together by shared attributes such as <code>Tenant</code>, but this is not always possible for various reasons such as numerous duplicates with identical or too-closely-similar criteria.</p> <p>When identifying possible ancestors for child <code>Prefix</code> or <code>IPAddress</code> objects during the reparenting phase of the upgrade process, the following sets of attributes will be compared in order:</p> <ul> <li><code>Tenant</code> assigned, <code>VRF</code> assigned</li> <li><code>Tenant</code> null, <code>VRF</code> assigned</li> <li><code>Tenant</code> assigned, <code>VRF</code> null</li> <li><code>VRF</code> assigned</li> <li><code>Tenant</code> null, <code>VRF</code> null</li> <li><code>VRF</code> null</li> <li>Default ordering</li> </ul> <p> </p> Tenant affinity decision tree"},{"location":"user-guide/administration/upgrading/from-v1/ipam/whats-changed.html#ipaddress-to-vrf-relationships-were-changed","title":"IPAddress to VRF relationships were changed","text":"<p>The foreign key relationship from <code>IPAddress</code> to <code>VRF</code> was removed. <code>IPAddress</code> objects may no longer have a <code>VRF</code> assigned to them. The <code>VRF</code> value for an <code>IPAddress</code> is now inherited from its parent <code>Prefix</code>.</p> <p>Additionally, some new constraints have been put into place to alleviate issues that existed previously which allowed an Interface to have multiple <code>IPAddress</code> assignments each with differing VRFs, which is not technically possible in real-world networking configurations.</p> <p>The <code>Interface</code>/<code>VMInterface</code> assignment constraints are as follows:</p> <ul> <li>If the <code>VRF</code> has no <code>Prefixes</code> assigned, <code>IPAddresses</code> may freely be assigned to the <code>Interface</code>/<code>VMInterface</code></li> <li>If the <code>VRF</code> has <code>Prefixes</code> assigned, only child <code>IPAddresses</code> of those <code>Prefixes</code> may be assigned to the <code>Interface</code>/<code>VMInterface</code></li> </ul>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/whats-changed.html#ipaddress-prefix_length-is-now-mask_length","title":"IPAddress prefix_length is now mask_length","text":"<p>The <code>prefix_length</code> field on <code>IPAddress</code> has been renamed to <code>mask_length</code>. This is to enforce that this field is used for documentation purposes only to indicate the mask length that may be used in practice when configuring this address for use on your network.</p> <p>The <code>mask_length</code> field is not used for the parenting algorithm when determining the appropriate parent <code>Prefix</code> within a given <code>Namespace</code>.</p>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/whats-changed.html#vrf-is-no-longer-used-for-uniqueness","title":"VRF is no longer used for uniqueness","text":"<p><code>VRF</code> objects can no longer be used for uniqueness boundaries and the <code>enforce_unique</code> field has been removed. A new uniqueness constraint has been added to the <code>VRF</code> <code>rd</code> field, which requires it to be unique for each <code>Namespace</code>.</p> <p>The foreign key relationship from <code>Prefix</code> to <code>VRF</code> has been inverted and replaced with a many-to-many relationship from <code>VRF</code> to <code>Prefix</code>. Now each <code>Prefix</code> can be assigned to one or more <code>VRF</code> object in the same <code>Namespace</code>.</p> <p>Lastly, one or more <code>Device</code>/<code>VirtualMachine</code> objects can now be assigned to a <code>VRF</code>. A <code>VRF</code> must be assigned to a <code>Device</code>/<code>VirtualMachine</code> before it may be assigned to an <code>Interface</code>/<code>VMInterface</code>. This is the modeling equivalent of creating a <code>VRF</code> in the device configuration before it may be used on an interface.</p>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/whats-changed.html#ipaddress-to-interface-relationship-was-inverted","title":"IPAddress to Interface relationship was inverted","text":"<p>In Nautobot 1.x the relationship from an <code>IPAddress</code> to an <code>Interface</code>/<code>VMInterface</code> was done by way of a foreign key to <code>Interface</code>/<code>VMInterface</code> on the <code>IPAddress</code> object. This implementation was flawed in that if a need arose to assign the same IP address to multiple interfaces, it required the creation of duplicate <code>IPAddress</code> objects with the same <code>host</code> address in order to assign each one to a different <code>Interface</code>/<code>VMInterface</code>.</p> <p>As of Nautobot 2.0, this relationship was inverted. Now an <code>Interface</code>/<code>VMInterface</code> has a many-to-many relationship to <code>IPAddresses</code>. This allows the same <code>IPAddress</code> object to be assigned to multiple <code>Interface</code>/<code>VMInterface</code> objects without the need to create duplicate <code>IPAddress</code> objects.</p>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/whats-changed.html#vrf-is-now-assigned-to-interfacevminterface-not-ipaddress","title":"VRF is now assigned to Interface/VMInterface, not IPAddress","text":"<p>A new foreign key to <code>VRF</code> has been introduced to <code>Interface/VMInterface</code>.</p> <ul> <li>A <code>VRF</code> must be assigned to a <code>Device</code> before it may be assigned to an <code>Interface</code></li> <li>A <code>VRF</code> must be assigned to a <code>VirtualMachine</code> before it may be assigned to an <code>VMInterface</code></li> </ul> <p>This addresses a fundamental flaw in which an Interface could have multiple <code>IPAddress</code> objects assigned with conflicting <code>VRFs</code>, which is impossible in practice when applied to a network device configuration.</p>"},{"location":"user-guide/administration/upgrading/from-v1/ipam/whats-changed.html#primary-ipv4ipv6-no-longer-unique","title":"Primary IPv4/IPv6 no longer unique","text":"<p>On <code>Device</code> and <code>VirtualMachine</code> objects, the <code>primary_ip4</code> and <code>primary_ip6</code> fields were changed from a one-to-one field--which is a foreign key with a uniqueness constraint--to a foreign key, dropping the uniqueness constraint.</p> <p>This was necessary to support the case where the same <code>IPAddress</code> object may be assigned to one or more <code>Interface</code>/<code>VMInterface</code> objects to share a (non-duplicated) primary <code>IPAddress</code> record, reducing the need to proliferate duplicate <code>IPAddress</code> objects merely for the purpose of facilitating <code>Interface</code>/<code>VMInterface</code> assignments.</p>"},{"location":"user-guide/core-data-model/circuits/circuit.html","title":"Circuits","text":"<p>A communications circuit represents a single physical link connecting exactly two endpoints, commonly referred to as its A and Z terminations. A circuit in Nautobot may have zero, one, or two terminations defined. It is common to have only one termination defined when you don't necessarily care about the details of the provider side of the circuit, e.g. for Internet access circuits. Both terminations would likely be modeled for circuits which connect one customer location to another.</p> <p>Each circuit is associated with a provider and a user-defined type. For example, you might have Internet access circuits delivered to each location by one provider, and private MPLS circuits delivered by another. Each circuit must be assigned a circuit ID, each of which must be unique per provider.</p> <p>Each circuit must be assigned to a <code>status</code>. The following statuses are available by default:</p> <ul> <li>Planned</li> <li>Provisioning</li> <li>Active</li> <li>Offline</li> <li>Deprovisioning</li> <li>Decommissioned</li> </ul> <p>Circuits also have optional fields for annotating their installation date and commit rate, and may be assigned to Nautobot tenants.</p> <p>Note</p> <p>Nautobot currently models only physical circuits: those which have exactly two endpoints. It is common to layer virtualized constructs (virtual circuits) such as MPLS or EVPN tunnels on top of these, however Nautobot does not yet support virtual circuit modeling.</p>"},{"location":"user-guide/core-data-model/circuits/circuittermination.html","title":"Circuit Terminations","text":"<p>The association of a circuit with a particular location and/or device is modeled separately as a circuit termination. A circuit may have up to two terminations, labeled A and Z. A single-termination circuit can be used when you don't know (or care) about the far end of a circuit (for example, an Internet access circuit which connects to a transit provider). A dual-termination circuit is useful for tracking circuits which connect two locations.</p> <p>Each circuit termination is attached to either a location or a provider network. Location terminations may optionally be connected via a cable to a specific device interface or port within that location. Each termination must be assigned a port speed, and can optionally be assigned an upstream speed if it differs from the downstream speed (a common scenario with e.g. DOCSIS cable modems). Fields are also available to track cross-connect and patch panel details.</p> <p>In adherence with Nautobot's philosophy of closely modeling the real world, a circuit may be connected only to a physical interface. For example, circuits may not terminate to LAG interfaces, which are virtual in nature. In such cases, a separate physical circuit is associated with each LAG member interface and each needs to be modeled discretely.</p> <p>Note</p> <p>A circuit in Nautobot represents a physical link, and cannot have more than two endpoints. When modeling a multi-point topology, each leg of the topology must be defined as a discrete circuit, with one end terminating within the provider's infrastructure. The provider network model is ideal for representing these networks.</p>"},{"location":"user-guide/core-data-model/circuits/circuittype.html","title":"Circuit Types","text":"<p>Circuits are classified by functional type. These types are completely customizable, and are typically used to convey the type of service being delivered over a circuit. For example, you might define circuit types for:</p> <ul> <li>Internet transit</li> <li>Out-of-band connectivity</li> <li>Peering</li> <li>Private backhaul</li> </ul>"},{"location":"user-guide/core-data-model/circuits/provider.html","title":"Providers","text":"<p>A circuit provider is any entity which provides some form of connectivity among locations or organizations within a location. While this obviously includes carriers which offer Internet and private transit service, it might also include Internet exchange (IX) points and even organizations with whom you peer directly. Each circuit within Nautobot must be assigned a provider and a circuit ID which is unique to that provider.</p> <p>Each provider may be assigned an autonomous system number (ASN), an account number, and contact information.</p>"},{"location":"user-guide/core-data-model/circuits/providernetwork.html","title":"Provider Network","text":"<p>Added in version 1.3.0</p> <p>A provider network represents an abstract portion of network topology, just like in a topology diagram. For example, a provider network may be used to represent a provider's MPLS network.</p> <p>Each provider network must be assigned to a provider. A circuit may terminate to either a provider network or to a valid location.</p>"},{"location":"user-guide/core-data-model/dcim/cable.html","title":"Cables","text":"<p>All connections between device components in Nautobot are represented using cables. A cable represents a direct physical connection between two termination points, such as between a console port and a patch panel port, or between two network interfaces.</p> <p>Each cable must have two endpoints defined. These endpoints are sometimes referenced as A and B for clarity, however cables are direction-agnostic and the order in which terminations are made has no meaning. Cables may be connected to the following objects:</p> <ul> <li>Circuit terminations</li> <li>Console ports</li> <li>Console server ports</li> <li>Interfaces</li> <li>Pass-through ports (front and rear)</li> <li>Power feeds</li> <li>Power outlets</li> <li>Power ports</li> </ul> <p>Each cable may be assigned a type, label, length, and color. Each cable must also assigned to an operational <code>status</code>. The following statuses are available by default:</p> <ul> <li>Active</li> <li>Planned</li> <li>Decommissioning</li> </ul>"},{"location":"user-guide/core-data-model/dcim/cable.html#tracing-cables","title":"Tracing Cables","text":"<p>A cable may be traced from either of its endpoints by clicking the \"trace\" button. (A REST API endpoint also provides this functionality.) Nautobot will follow the path of connected cables from this termination across the directly connected cable to the far-end termination. If the cable connects to a pass-through port, and the peer port has another cable connected, Nautobot will continue following the cable path until it encounters a non-pass-through or unconnected termination point. The entire path will be displayed to the user.</p> <p>In the example below, three individual cables comprise a path between devices A and D:</p> <p></p> <p>Traced from Interface 1 on Device A, Nautobot will show the following path:</p> <ul> <li>Cable 1: Interface 1 to Front Port 1</li> <li>Cable 2: Rear Port 1 to Rear Port 2</li> <li>Cable 3: Front Port 2 to Interface 2</li> </ul> <p>A cable can also be traced through a circuit.</p> <p></p> <p>Traced from Interface 1 on Device A, Nautobot will show the following path:</p> <ul> <li>Cable 1: Interface 1 to Side A</li> <li>Cable 2: Side Z to Interface 2</li> </ul>"},{"location":"user-guide/core-data-model/dcim/consoleport.html","title":"Console Ports","text":"<p>A console port provides connectivity to the physical console of a device. These are typically used for temporary access by someone who is physically near the device, or for remote out-of-band access provided via a networked console server. Each console port may be assigned a physical type.</p> <p>Cables can connect console ports to console server ports or pass-through ports.</p> <p>Added in version 1.4.5</p> <p>The fields <code>created</code> and <code>last_updated</code> were added to all device component models. If you upgraded from Nautobot 1.4.4 or earlier, the values for these fields will default to <code>None</code> (null).</p>"},{"location":"user-guide/core-data-model/dcim/consoleporttemplate.html","title":"Console Port Templates","text":"<p>A template for a console port that will be created on all instantiations of the parent device type. Each console port can be assigned a physical type.</p> <p>Added in version 1.4.5</p> <p>The fields <code>created</code> and <code>last_updated</code> were added to all device component template models. If you upgraded from Nautobot 1.4.4 or earlier, the values for these fields will default to <code>None</code> (null).</p>"},{"location":"user-guide/core-data-model/dcim/consoleserverport.html","title":"Console Server Ports","text":"<p>A console server is a device which provides remote access to the local consoles of connected devices. They are typically used to provide remote out-of-band access to network devices. Each console server port may be assigned a physical type.</p> <p>Cables can connect console server ports to console ports or pass-through ports.</p> <p>Added in version 1.4.5</p> <p>The fields <code>created</code> and <code>last_updated</code> were added to all device component models. If you upgraded from Nautobot 1.4.4 or earlier, the values for these fields will default to <code>None</code> (null).</p>"},{"location":"user-guide/core-data-model/dcim/consoleserverporttemplate.html","title":"Console Server Port Templates","text":"<p>A template for a console server port that will be created on all instantiations of the parent device type. Each console server port can be assigned a physical type.</p> <p>Added in version 1.4.5</p> <p>The fields <code>created</code> and <code>last_updated</code> were added to all device component template models. If you upgraded from Nautobot 1.4.4 or earlier, the values for these fields will default to <code>None</code> (null).</p>"},{"location":"user-guide/core-data-model/dcim/device.html","title":"Devices","text":"<p>Every piece of hardware which is installed within a location or rack exists in Nautobot as a device. Devices are measured in rack units (U) and can be half depth or full depth. A device may have a height of 0U: These devices do not consume vertical rack space and cannot be assigned to a particular rack unit. A common example of a 0U device is a vertically-mounted PDU.</p> <p>When assigning a multi-U device to a rack, it is considered to be mounted in the lowest-numbered rack unit which it occupies. For example, a 3U device which occupies U8 through U10 is said to be mounted in U8. This logic applies to racks with both ascending and descending unit numbering.</p> <p>A device is said to be full-depth if its installation on one rack face prevents the installation of any other device on the opposite face within the same rack unit(s). This could be either because the device is physically too deep to allow a device behind it, or because the installation of an opposing device would impede airflow.</p> <p>Each device must be instantiated from a pre-created device type, and its default components (console ports, power ports, interfaces, etc.) will be created automatically. (The device type associated with a device may be changed after its creation, however its components will not be updated retroactively.)</p> <p>Each device must be assigned a location, device role, and operational <code>status</code>, and may optionally be assigned to a rack within a location. A platform, serial number, and asset tag may optionally be assigned to each device.</p> <p>Device names must be unique within a location, unless the device has been assigned to a tenant. Devices may also be unnamed.</p> <p>When a device has one or more interfaces with IP addresses assigned, a primary IP for the device can be designated, for both IPv4 and IPv6.</p> <p>Changed in version 2.0.0</p> <p>In Nautobot 1.x, it was not possible to delete an IPAddress or an Interface that was serving as the primary IP address (<code>primary_ip4</code>/<code>primary_ip6</code>) for a Device. As of Nautobot 2.0, this is now permitted; doing so will clear out the Device's corresponding primary IP value.</p> <p>For Devices forming a group (Failover, Load-Sharing, Redundacy or similar) refer to Device Redundancy Groups model documentation.</p>"},{"location":"user-guide/core-data-model/dcim/device.html#developer-api","title":"Developer API","text":"<p>The <code>Device</code> Django model class supports a method called <code>create_components()</code>. This method is normally called during <code>device_instance.save()</code>, which is called whenever you save create a Device via the GUI or the REST API, but if you are working directly in the ORM and encounter one of the two following scenarios, <code>device_instance.save()</code> is not called:</p> <ul> <li>Usage of <code>device_instance.objects.bulk_create()</code> to perform a bulk creation of Device objects</li> <li>Usage of <code>device_instance.save()</code> during handling of the <code>nautobot_database_ready</code> signal (which uses historical models)</li> </ul> <p>In these cases you will have to manually run <code>device_instance.create_components()</code> in order to instantiate the device type's component templates (interfaces, power ports, etc.).</p>"},{"location":"user-guide/core-data-model/dcim/devicebay.html","title":"Device Bays","text":"<p>Device bays represent a space or slot within a parent device in which a child device may be installed. For example, a 2U parent chassis might house four individual blade servers. The chassis would appear in the rack elevation as a 2U device with four device bays, and each server within it would be defined as a 0U device installed in one of the device bays. Child devices do not appear within rack elevations or count as consuming rack units.</p> <p>Child devices are first-class Devices in their own right: That is, they are fully independent managed entities which don't share any control plane with the parent.  Just like normal devices, child devices have their own platform (OS), role, tags, and components.  LAG interfaces may not group interfaces belonging to different child devices.</p> <p>Note</p> <p>Device bays are not suitable for modeling line cards (such as those commonly found in chassis-based routers and switches), as these components depend on the control plane of the parent device to operate. Instead, line cards and similarly non-autonomous hardware should be modeled as inventory items within a device, with any associated interfaces or other components assigned directly to the device.</p> <p>Added in version 1.4.5</p> <p>The fields <code>created</code> and <code>last_updated</code> were added to all device component models. If you upgraded from Nautobot 1.4.4 or earlier, the values for these fields will default to <code>None</code> (null).</p>"},{"location":"user-guide/core-data-model/dcim/devicebaytemplate.html","title":"Device Bay Templates","text":"<p>A template for a device bay that will be created on all instantiations of the parent device type.</p> <p>Added in version 1.4.5</p> <p>The fields <code>created</code> and <code>last_updated</code> were added to all device component template models. If you upgraded from Nautobot 1.4.4 or earlier, the values for these fields will default to <code>None</code> (null).</p>"},{"location":"user-guide/core-data-model/dcim/deviceredundancygroup.html","title":"Device Redundancy Groups","text":"<p>Added in version 1.5.0</p> <p>Device Redundancy Groups represent logical relationships between multiple devices. Typically, a redundancy group could represent a failover pair, failover group, or a load sharing cluster. Device Redundancy Groups are created first, before the devices are assigned to the group.</p> <p>A failover strategy represents intended operation mode of the group. Supported failover strategy are: Active/Active and Active/Standby.</p> <p>Secrets groups could be used to inform store secret information used by failover or a cluster of devices.</p> <p>Device Redundancy Group Priority is a Device attribute defined during assigning a Device to a Device Redundancy Group. This field represents the priority the device has in the device redundancy group.</p>"},{"location":"user-guide/core-data-model/dcim/deviceredundancygroup.html#example-use-of-device-redundancy-groups-cisco-asa-5500-series-activestandby-failover","title":"Example use of Device Redundancy Groups - Cisco ASA 5500 Series Active/Standby Failover","text":"<p>This document provides an example of generating a Cisco ASA device's desired failover configuration based on data stored in Nautobot Device Redundancy Groups. A GraphQL query is used to retrieve the relevant data, which is then rendered through a Jinja2 template to produce the desired configuration.</p> <p>As one of the use cases for Device Redundacy Groups, introduced in Nautobot 1.5 release, is to model failover pairs, we will use the ASA 5500 Series in this example with details as follows:</p> <ul> <li>Firewall failover pair is composed of two devices named \"nyc-fw-primary\" and \"nyc-fw-secondary\"</li> <li>Each firewall device forming a failover cluster has a virtual interface dedicated for failover usage (named \"failover-link\") and addressed in 172.27.48.0/31 network</li> <li>Virtual failover interface has a physical parent interface assigned (\"gigabitethernet0/3\")</li> <li>Following redundancy group priorities are assigned in a failover pair:<ul> <li>Priority 100 for a Primary Failover unit</li> <li>Priority 50 for a Secondary Failover unit</li> </ul> </li> </ul>"},{"location":"user-guide/core-data-model/dcim/deviceredundancygroup.html#querying-for-the-data","title":"Querying for the data","text":"<p>To retrieve information about devices forming an ASA Failover pair, we will use a GraphQL query and the <code>get_gql_failover_details</code> Python method. This method takes a <code>device_name</code> as an argument.</p> <pre><code>import json\nimport pynautobot\nquery = \"\"\"\nquery ($device_name: [String]) {\n    devices(name__ie: $device_name) {\n        name\n        device_redundancy_group {\n            name\n            members {\n                name\n                device_redundancy_group_priority\n                interfaces(name__ie: \"failover-link\") {\n                    type\n                    name\n                    ip_addresses {\n                        host\n                        mask_length\n                    }\n                    parent_interface {\n                        name\n                        type\n                    }\n                }\n            }\n        }\n    }\n}\n\"\"\"\ndef get_gql_failover_details(device_name):\nvariables = {\"device_name\": device_name}\nnb = pynautobot.api(\nurl=\"http://localhost:8080\",\ntoken=\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n)\nreturn nb.graphql.query(query=query, variables=variables)\n</code></pre>"},{"location":"user-guide/core-data-model/dcim/deviceredundancygroup.html#retrieving-the-data-primary-failover-unit-nyc-fw-primary","title":"Retrieving the data - Primary Failover Unit (\"nyc-fw-primary\")","text":"<p>We will demonstrate how to execute the command for Primary Unit only, however you could repeat the process for a secondary unit. An example data returned from Nautobot is presented below.</p> <pre><code>&gt;&gt;&gt; hostname = \"nyc-fw-primary\"\n&gt;&gt;&gt; gql_data = get_gql_failover_details(hostname).json\n</code></pre> <pre><code>{\n\"data\": {\n\"devices\": [\n{\n\"name\": \"nyc-fw-primary\",\n\"device_redundancy_group\": {\n\"name\": \"nyc-firewalls\",\n\"members\": [\n{\n\"name\": \"nyc-fw-primary\",\n\"device_redundancy_group_priority\": 100,\n\"interfaces\": [\n{\n\"type\": \"VIRTUAL\",\n\"name\": \"failover-link\",\n\"ip_addresses\": [\n{\n\"host\": \"172.27.48.0\",\n\"mask_length\": 31\n}\n],\n\"parent_interface\": {\n\"name\": \"gigabitethernet0/3\",\n\"type\": \"A_1000BASE_T\"\n}\n}\n]\n},\n{\n\"name\": \"nyc-fw-secondary\",\n\"device_redundancy_group_priority\": 50,\n\"interfaces\": [\n{\n\"type\": \"VIRTUAL\",\n\"name\": \"failover-link\",\n\"ip_addresses\": [\n{\n\"host\": \"172.27.48.1\",\n\"mask_length\": 31\n}\n],\n\"parent_interface\": {\n\"name\": \"gigabitethernet0/3\",\n\"type\": \"A_1000BASE_T\"\n}\n}\n]\n}\n]\n}\n}\n]\n}\n}\n</code></pre>"},{"location":"user-guide/core-data-model/dcim/deviceredundancygroup.html#creating-cisco-asa-configuration-template-common-for-primary-and-secondary-units","title":"Creating Cisco ASA Configuration Template - Common for Primary and Secondary Units","text":"<p>The following snippet represents an example Cisco ASA failover configuration template:</p> <pre><code># Configuration Template for Cisco ASA\ntemplate_code = \"\"\"\n{% set redundancy_members = gql_data['data']['devices'][0]['device_redundancy_group']['members'] %}\n{% set failover_device_local = redundancy_members[0] if redundancy_members[0].name == device else redundancy_members[1] %}\n{% set failover_device_peer = redundancy_members[0] if redundancy_members[0].name != device else redundancy_members[1] %}\n{% set failover_local_vif = failover_device_local.interfaces | first %}\n{% set failover_peer_vif = failover_device_peer.interfaces | first %}\n!\nhostname {{ device.name }}\n!\nfailover lan unit {{ priority_mapping[failover_device_local.device_redundancy_group_priority] }}\nfailover lan interface {{ failover_local_vif.name }} {{ failover_local_vif.parent_interface.name }} \n!\nfailover interface ip {{ failover_local_vif.name }} {{ failover_local_vif.ip_addresses[0].host }}/{{ failover_local_vif.ip_addresses[0].prefix_length }} standby {{ failover_peer_vif.ip_addresses[0].host }}\ninterface {{ failover_local_vif.parent_interface.name }} \n  no shutdown\n!\nfailover link {{ failover_local_vif.name }} {{ failover_local_vif.parent_interface.name }} \n!\n!failover ipsec pre-shared-key !Nautobot Secrets\n!\nfailover\n!\n\"\"\"\n</code></pre>"},{"location":"user-guide/core-data-model/dcim/deviceredundancygroup.html#rendering-cisco-asa-configuration-template-with-the-data-retrieved-from-graphql","title":"Rendering Cisco ASA Configuration Template with the data retrieved from GraphQL","text":"<p>Following snippet represents an example Cisco ASA Failover rendered configuration:</p> <pre><code>from nautobot.core.utils.data import render_jinja2\ncontext = dict(\ndevice=hostname,\ngql_data=gql_data,\npriority_mapping={50: 'secondary', 100: 'primary'}\n)\nnyc_fw_primary_config = render_jinja2(template_code=template_code, context=context)\nprint(nyc_fw_primary_config)\n</code></pre> <pre><code>!\nhostname nyc-fw-primary\n!\nfailover lan unit\nfailover lan interface failover-link gigabitethernet0/3\n!\nfailover interface ip failover-link 172.27.48.0/31 standby 172.27.48.1\ninterface gigabitethernet0/3\n  no shutdown\n!\nfailover link failover-link gigabitethernet0/3\n!\n!failover ipsec pre-shared-key !Nautobot Secrets\n!\nfailover\n!\n</code></pre>"},{"location":"user-guide/core-data-model/dcim/deviceredundancygroup.html#example-use-of-device-redundancy-groups-spine-redundancy-in-a-leaf-and-spine-clos-topology","title":"Example use of Device Redundancy Groups - Spine Redundancy in a Leaf and Spine (Clos) Topology","text":"<p>Another example for the redundancy group use case could be a spine redundancy in the Leaf and Spine topology. Spine redundancy is important while performing the Day-2 operations, such as OS-updates.</p> <p>In this scenario, no more than 1 device participating in a Device Redundancy Group should be updated and rebooted at the same time. In order to track this, we will create a new Device custom field  named <code>upgrade_operational_state</code> and assign it one of the statues: <code>pre_upgrade</code>, <code>in_reboot</code>, <code>post_upgrade</code>. If a device with a spine role assigned is in state <code>in_reboot</code>, no other redundancy group members should be OS-upgraded at the same time.</p>"},{"location":"user-guide/core-data-model/dcim/deviceredundancygroup.html#querying-for-the-data-spine-redundancy-in-a-leaf-and-spine-clos-topology","title":"Querying for the data - Spine Redundancy in a Leaf and Spine (Clos) Topology","text":"<p>To retrieve the data about devices forming a Spine redundancy group, we will use the following GraphQL query:</p> <pre><code>query {\n    device_redundancy_groups(name__ie: \"nyc-spines\") {\n        name\n        members {\n          name\n          device_role {\n            name\n          }\n          cf_upgrade_operational_state\n        }\n    }\n}\n</code></pre>"},{"location":"user-guide/core-data-model/dcim/deviceredundancygroup.html#retrieving-the-data-spine-redundancy-in-a-leaf-and-spine-clos-topology","title":"Retrieving the data - Spine Redundancy in a Leaf and Spine (Clos) Topology","text":"<p>An example data returned from Nautobot is presented below.</p> <pre><code>{\n\"data\": {\n\"device_redundancy_groups\": [\n{\n\"name\": \"nyc-spines\",\n\"members\": [\n{\n\"name\": \"spine-1\",\n\"device_role\": {\n\"name\": \"spine\"\n},\n\"cf_upgrade_operational_state\": \"in_reboot\"\n},\n{\n\"name\": \"spine-2\",\n\"device_role\": {\n\"name\": \"spine\"\n},\n\"cf_upgrade_operational_state\": null\n},\n{\n\"name\": \"spine-3\",\n\"device_role\": {\n\"name\": \"spine\"\n},\n\"cf_upgrade_operational_state\": null\n},\n{\n\"name\": \"spine-4\",\n\"device_role\": {\n\"name\": \"spine\"\n},\n\"cf_upgrade_operational_state\": null\n}\n]\n}\n]\n}\n}\n</code></pre> <p>Based on the output, <code>spine-1</code> device is being rebooted at the moment of the GraphQL query response. This could be used by an automation system to prevent OS upgrades on <code>spine-2</code>, <code>spine-3</code>, <code>spine-4</code>.</p>"},{"location":"user-guide/core-data-model/dcim/devicetype.html","title":"Device Types","text":"<p>A device type represents a particular make and model of hardware that exists in the real world. Device types define the physical attributes of a device (rack height and depth) and its individual components (console, power, network interfaces, and so on).</p> <p>Device types are instantiated as devices installed within locations and/or equipment racks. For example, you might define a device type to represent a Juniper EX4300-48T network switch with 48 Ethernet interfaces. You can then create multiple instances of this type named \"switch1,\" \"switch2,\" and so on. Each device will automatically inherit the components (such as interfaces) of its device type at the time of creation. However, changes made to a device type will not apply to instances of that device type retroactively.</p> <p>Some devices house child devices which share physical resources, like space and power, but which functional independently from one another. A common example of this is blade server chassis. Each device type is designated as one of the following:</p> <ul> <li>A parent device (which has device bays)</li> <li>A child device (which must be installed within a device bay)</li> <li>Neither</li> </ul> <p>Note</p> <p>This parent/child relationship is not suitable for modeling chassis-based devices, wherein child members share a common control plane. Instead, line cards and similarly non-autonomous hardware should be modeled as inventory items within a device, with any associated interfaces or other components assigned directly to the device.</p>"},{"location":"user-guide/core-data-model/dcim/devicetype.html#device-component-templates","title":"Device Component Templates","text":"<p>Added in version 1.4.5</p> <p>The fields <code>created</code> and <code>last_updated</code> were added to all device component template models. If you upgraded from Nautobot 1.4.4 or earlier, the values for these fields will default to <code>None</code> (null).</p> <p>Each device type is assigned a number of component templates which define the physical components within a device. These are:</p> <ul> <li>Console ports</li> <li>Console server ports</li> <li>Power ports</li> <li>Power outlets</li> <li>Network interfaces</li> <li>Front ports</li> <li>Rear ports</li> <li>Device bays (which house child devices)</li> </ul> <p>Whenever a new device is created, its components are automatically created per the templates assigned to its device type. For example, a Juniper EX4300-48T device type might have the following component templates defined:</p> <ul> <li>One template for a console port (\"Console\")</li> <li>Two templates for power ports (\"PSU0\" and \"PSU1\")</li> <li>48 templates for 1GE interfaces (\"ge-0/0/0\" through \"ge-0/0/47\")</li> <li>Four templates for 10GE interfaces (\"xe-0/2/0\" through \"xe-0/2/3\")</li> </ul> <p>Once component templates have been created, every new device that you create as an instance of this type will automatically be assigned each of the components listed above. However, this automation occurs only when a device is first created: Adding or removing components on a device type does not automatically change existing device instances based on that device type.</p> <p>Note</p> <p>Assignment of components from templates occurs only at the time of device creation. If you modify the templates of a device type, it will not affect devices which have already been created. This is intentional and by design as device type templates may evolve over time in your organization. However, you always have the option of adding, modifying, or deleting components on existing devices.</p> <p>Consider also that automatically changing components of existing devices when a device-type changes would require Nautobot to make very dangerous assumptions. For example, suppose you had a device type which included a specific line card with a specific set of interfaces. After creating some devices, representing your existing deployment of this device type, your deployment for new devices of this type changed to include a different line card and hence different interfaces, so you decided to update the device-type templates accordingly. If Nautobot were to automatically propagate this change to all existing devices of this type, it would result in an incorrect reflection of the reality that all existing devices have not yet been retrofitted with the new line card.</p>"},{"location":"user-guide/core-data-model/dcim/frontport.html","title":"Front Ports","text":"<p>Front ports are pass-through ports used to represent physical cable connections that comprise part of a longer path. For example, the ports on the front face of a UTP patch panel would be modeled in Nautobot as front ports. Each port is assigned a physical type, and must be mapped to a specific rear port on the same device. A single rear port may be mapped to multiple rear ports, using numeric positions to annotate the specific alignment of each.</p> <p>Added in version 1.4.5</p> <p>The fields <code>created</code> and <code>last_updated</code> were added to all device component models. If you upgraded from Nautobot 1.4.4 or earlier, the values for these fields will default to <code>None</code> (null).</p>"},{"location":"user-guide/core-data-model/dcim/frontporttemplate.html","title":"Front Port Templates","text":"<p>A template for a front-facing pass-through port that will be created on all instantiations of the parent device type. Front ports may have a physical type assigned, and must be associated with a corresponding rear port and position. This association will be automatically replicated when the device type is instantiated.</p> <p>Added in version 1.4.5</p> <p>The fields <code>created</code> and <code>last_updated</code> were added to all device component template models. If you upgraded from Nautobot 1.4.4 or earlier, the values for these fields will default to <code>None</code> (null).</p>"},{"location":"user-guide/core-data-model/dcim/interface.html","title":"Interfaces","text":"<p>Interfaces in Nautobot represent network interfaces used to exchange data with connected devices. On modern networks, these are most commonly Ethernet, but other types are supported as well. Each interface must be assigned a type, an operational <code>status</code> and may optionally be assigned a MAC address, MTU, and IEEE 802.1Q mode (tagged or access). Each interface can also be enabled or disabled, and optionally designated as management-only (for out-of-band management).</p> <p>The following operational statuses are available by default:</p> <ul> <li>Planned</li> <li>Maintenance</li> <li>Active</li> <li>Decommissioning</li> <li>Failed</li> </ul> <p>Added in version 1.4.0</p> <ul> <li>Added <code>bridge</code> field.</li> <li>Added <code>parent_interface</code> field.</li> <li>Added <code>status</code> field.</li> </ul> <p>Interfaces may be physical or virtual in nature, but only physical interfaces may be connected via cables. Cables can connect interfaces to pass-through ports, circuit terminations, or other interfaces.</p> <p>Physical interfaces may be arranged into a link aggregation group (LAG) and associated with a parent LAG (virtual) interface. LAG interfaces can be recursively nested to model bonding of trunk groups. Like all virtual interfaces, LAG interfaces cannot be connected physically.</p> <p>Changed in version 2.0.0</p> <p>The relationship to IP addresses has been changed to a many-to-many relationship. This allows an IP address to be assigned to multiple interfaces, and an interface to have multiple IP addresses assigned to it.</p> <p>IP addresses can be assigned to interfaces. VLANs can also be assigned to each interface as either tagged or untagged. (An interface may have only one untagged VLAN.)</p> <p>Note</p> <p>Although devices and virtual machines both can have interfaces, a separate model is used for each. Thus, device interfaces have some properties that are not present on virtual machine interfaces and vice versa.</p> <p>Added in version 1.4.5</p> <p>The fields <code>created</code> and <code>last_updated</code> were added to all device component models. If you upgraded from Nautobot 1.4.4 or earlier, the values for these fields will default to <code>None</code> (null).</p> <p>Added in version 1.6.0</p> <p>Interfaces can now be assigned to an Interface Redundancy Group to represent redundancy protocols such as HSRP or VRRP.</p>"},{"location":"user-guide/core-data-model/dcim/interfaceredundancygroup.html","title":"Interface Redundancy Groups","text":"<p>Added in version 1.6.0</p> <p>Interface Redundancy Groups represent groups of interfaces that share a single virtual address. This model is intended to represent redundancy protocols such as HSRP or VRRP that allow multiple devices to provide a fault-tolerant default gateway for a network.</p> <p>Interface Redundancy Groups must be created before interfaces can be assigned to the group.</p> <p>Note</p> <p>While Interface Redundancy Groups were designed to represent first hop redundancy protocols, they may be used to represent any grouping of redundant interfaces.</p>"},{"location":"user-guide/core-data-model/dcim/interfaceredundancygroup.html#required-fields","title":"Required Fields","text":"<p>When adding Interfaces to the Interface Redundancy Group, a priority integer value must be set for each interface in the group. This value will depend on the redundancy protocol being used. For example, HSRP uses a priority value between 1 and 255.</p>"},{"location":"user-guide/core-data-model/dcim/interfaceredundancygroup.html#optional-fields","title":"Optional Fields","text":"<p>An IP Address can be related to an Interface Redundancy Group, which will be used as the virtual address for the group.</p> <p>Redundancy protocol can be set on the group. Supported redundancy protocols are: HSRP, VRRP, GLBP and CARP.</p> <p>Secrets groups can be used to store secret information used by the redundancy protocol. An example use case would be an HSRP authentication key.</p> <p>Protocol group ID stores the group identifier (HSRP group ID or VRRP group ID, etc.) as an integer or text label up to 50 characters long.</p>"},{"location":"user-guide/core-data-model/dcim/interfacetemplate.html","title":"Interface Templates","text":"<p>A template for a network interface that will be created on all instantiations of the parent device type. Each interface may be assigned a physical or virtual type, and may be designated as \"management-only.\"</p> <p>Added in version 1.4.5</p> <p>The fields <code>created</code> and <code>last_updated</code> were added to all device component template models. If you upgraded from Nautobot 1.4.4 or earlier, the values for these fields will default to <code>None</code> (null).</p>"},{"location":"user-guide/core-data-model/dcim/inventoryitem.html","title":"Inventory Items","text":"<p>Inventory items represent hardware components installed within a device, such as a power supply or CPU or line card. Inventory items are distinct from other device components in that they cannot be templatized on a device type, and cannot be connected by cables. They are intended to be used primarily for inventory purposes.</p> <p>Each inventory item can be assigned a manufacturer, part ID, serial number, and asset tag (all optional). A boolean toggle is also provided to indicate whether each item was entered manually or discovered automatically (by some process outside of Nautobot).</p> <p>Inventory items are hierarchical in nature, such that any individual item may be designated as the parent for other items. For example, an inventory item might be created to represent a line card which houses several SFP optics, each of which exists as a child item within the device.</p> <p>Added in version 1.4.5</p> <p>The fields <code>created</code> and <code>last_updated</code> were added to all device component models. If you upgraded from Nautobot 1.4.4 or earlier, the values for these fields will default to <code>None</code> (null).</p>"},{"location":"user-guide/core-data-model/dcim/location.html","title":"Locations","text":"<p>Added in version 1.4.0</p> <p>To locate network information more precisely than a Site defines, you can define a hierarchy of Locations within each Site. Data objects such as devices, prefixes, VLAN groups, etc. can thus be mapped or assigned to a specific building, wing, floor, room, etc. as appropriate to your needs.</p> <p>Once you have defined the hierarchy of Location Types that you wish to use, you can then define Locations. Any \"top-level\" Locations (those whose Location Type has no parent) belong directly to a Site, while \"child\" Locations belong to their immediate parent Location, rather than to the Site as a whole.</p> <p>Info</p> <p>At present, Locations fill the conceptual space between the more abstract Region and Site models and the more concrete Rack Group model. In a future Nautobot release, some or all of these other models may be collapsed into Locations. That is to say, in the future you might not deal with Regions and Sites as distinct models, but instead your Location Type hierarchy might include these higher-level categories, becoming something like Country \u2190 City \u2190 Site \u2190 Building \u2190 Floor \u2190 Room.</p> <p>Much like Sites, each Location must be assigned a name and operational <code>status</code>. The same default operational statuses are defined for Locations as for Sites, but as always, you can customize these to suit your needs. Locations can also be assigned to a tenant.</p> <p>Added in version 2.0.0</p> <p>Location now supports all properties previously present on the Site model, including the <code>asn</code>, <code>comments</code>, <code>contact_email</code> <code>contact_name</code>, <code>contact_phone</code>, <code>facility</code>, <code>latitude</code>, <code>longitude</code>, <code>physical_address</code>, <code>shipping_address</code> and <code>time_zone</code> fields.</p>"},{"location":"user-guide/core-data-model/dcim/locationtype.html","title":"Location Types","text":"<p>Added in version 1.4.0</p> <p>Before defining individual Locations, you must first define the hierarchy of Location Types that you wish to use for the organization of your network. An example hierarchy might be <code>Building \u2190 Floor \u2190 Room</code>, but you might have more or fewer distinct types depending on your specific organizational requirements.</p> <p>Each Location Type can define a set of \"content types\" that are permitted to associate to Locations of this type. For example, you might permit assigning Prefixes and VLAN Groups to an entire Building or Floor, but only allow Devices and Racks to be assigned to Rooms, never to a more abstract location. Doing so can help ensure consistency of your data.</p> <p>Added in version 1.5.0</p> <p>Location Types can now be marked as <code>nestable</code>. When this flag is set, Locations of this type may nest within one another, allowing for variable-depth hierarchies of Locations and reducing the number of distinct Location Types you may need to define. For example, with two Location Types, \"Building Group\" and \"Building\", by flagging \"Building Group\" as nestable, you could model the following hierarchy of Locations:</p> <ul> <li>Main Campus (Building Group)<ul> <li>West Campus (Building Group)<ul> <li>Building A (Building)</li> <li>Building B (Building)</li> </ul> </li> <li>East Campus (Building Group)<ul> <li>Building C (Building)</li> <li>Building D (Building)</li> </ul> </li> <li>South Campus (Building Group)<ul> <li>Western South Campus (Building Group)<ul> <li>Building G (Building)</li> </ul> </li> <li>Eastern South Campus (Building Group)<ul> <li>Building H (Building)</li> </ul> </li> </ul> </li> </ul> </li> <li>Satellite Campus (Building Group)<ul> <li>Building Z (Building)</li> </ul> </li> </ul> <p>Tip</p> <p>Although it is possible to define a \"tree\" of Location Types with multiple \"branches\", in the majority of cases doing so adds more unnecessary complexity than it's worth. Consider the following hypothetical Location Type tree:</p> <pre><code>Branch Office\n  \u21b3 Branch Floor\n      \u21b3 Branch Floor Room\n  \u21b3 Branch Basement\n      \u21b3 Branch Basement Room\nHeadquarters\n  \u21b3 Headquarters Floor\n      \u21b3 Headquarters Floor Room\n  \u21b3 Headquarters Basement\n      \u21b3 Headquarters Basement Room\n</code></pre> <p>This would complicate your life significantly when constructing queries, filters, and so forth to actually work with your data - for example, if you wanted a list of all Prefixes that are mapped to floors rather than individual rooms, you would now need to construct a query for Prefixes that are mapped to (a <code>Branch Floor</code> OR a <code>Headquarters Floor</code> OR a <code>Branch Basement</code> OR a <code>Headquarters Basement</code>). In most cases you would be better served with a far simpler \"linear\" sequence of Location Types, such as <code>Building \u2190 Floor \u2190 Room</code>; you could then use tags or custom fields to distinguish whether a given Building is a Branch Office or a Headquarters, if that distinction is even important to your network model.</p>"},{"location":"user-guide/core-data-model/dcim/manufacturer.html","title":"Manufacturers","text":"<p>A manufacturer represents the \"make\" of a device; e.g. Cisco or Dell. Each device type must be assigned to a manufacturer. (Inventory items and platforms may also be associated with manufacturers.) Each manufacturer must have a unique name and may have a description assigned to it.</p>"},{"location":"user-guide/core-data-model/dcim/platform.html","title":"Platforms","text":"<p>A platform defines the type of software running on a device or virtual machine. This can be helpful to model when it is necessary to distinguish between different versions or feature sets. Note that two devices of the same type may be assigned different platforms: For example, one Juniper MX240 might run Junos 14 while another runs Junos 15.</p> <p>Platforms may optionally be limited by manufacturer: If a platform is assigned to a particular manufacturer, it can only be assigned to devices with a type belonging to that manufacturer.</p> <p>The platform model can be used to indicate which \"network driver\" Nautobot (and Jobs, Apps, etc.) should use when connecting to a remote device running this platform. This is a generic string corresponding loosely to a Netmiko driver name. As there are many different libraries and applications for connecting to a device, rather than having a separate model field for each such connection type, Nautobot uses netutils to translate the generic network driver string into a variety of library-specific driver strings (Ansible \"collection name\", PyATS \"OS\" value, Scrapli \"platform\", etc.) which can be accessed via the UI, REST API, and GraphQL as needed. An administrator can extend or override the default translations provided by netutils by configuring the <code>NETWORK_DRIVERS</code> dictionary appropriately. (If your extensions are generally applicable, please consider making a pull request against netutils to update the package!)</p> <p>Added in version 1.6.0</p> <p>The <code>network_driver</code> database field and the <code>network_driver_mappings</code> derived property were added to the Platform data model. Support for the <code>NETWORK_DRIVERS</code> setting was added.</p> <p>Added in version 2.0.0</p> <p>Support for <code>netutils_parser</code> key was added to <code>network_driver_mappings</code>.</p> <p>For historical reasons, the NAPALM driver (<code>napalm_driver</code> field) and any associated arguments (<code>napalm_args</code> field) Nautobot should use when connecting to a remote device via NAPALM can (and must) be configured directly rather than being derived from the network driver. The name of the NAPALM driver along with optional parameters are stored with the platform.</p> <p>Apps and Jobs should transition to using the <code>network_driver_mappings[\"napalm\"]</code> property when connecting to a device via NAPALM. Nautobot may deprecate the use of the <code>napalm_driver</code> and <code>napalm_args</code> fields in a future release.</p> <p>The assignment of platforms to devices is an optional feature, and may be disregarded if not desired.</p>"},{"location":"user-guide/core-data-model/dcim/powerfeed.html","title":"Power Feed","text":"<p>A power feed represents the distribution of power from a power panel to a particular device, typically a power distribution unit (PDU). The power port (inlet) on a device can be connected via a cable to a power feed. A power feed may optionally be assigned to a rack to allow more easily tracking the distribution of power among racks.</p> <p>Each power feed is assigned an operational type (primary or redundant) and a <code>status</code>. The following statuses are available by default:</p> <ul> <li>Offline</li> <li>Active</li> <li>Planned</li> <li>Failed</li> </ul> <p>Each power feed also defines the electrical characteristics of the circuit which it represents. These include the following:</p> <ul> <li>Supply type (AC or DC)</li> <li>Phase (single or three-phase)</li> <li>Voltage</li> <li>Amperage</li> <li>Maximum utilization (percentage)</li> </ul> <p>Info</p> <p>The power utilization of a rack is calculated when one or more power feeds are assigned to the rack and connected to devices that draw power.</p>"},{"location":"user-guide/core-data-model/dcim/powerfeed.html#example-power-topology","title":"Example Power Topology","text":""},{"location":"user-guide/core-data-model/dcim/poweroutlet.html","title":"Power Outlets","text":"<p>Power outlets represent the outlets on a power distribution unit (PDU) or other device that supply power to dependent devices. Each power port may be assigned a physical type, and may be associated with a specific feed leg (where three-phase power is used) and/or a specific upstream power port. This association can be used to model the distribution of power within a device.</p> <p>For example, imagine a PDU with one power port which draws from a three-phase feed and 48 power outlets arranged into three banks of 16 outlets each. Outlets 1-16 would be associated with leg A on the port, and outlets 17-32 and 33-48 would be associated with legs B and C, respectively.</p> <p>Cables can connect power outlets only to downstream power ports. (Pass-through ports cannot be used to model power distribution.)</p> <p>Added in version 1.4.5</p> <p>The fields <code>created</code> and <code>last_updated</code> were added to all device component models. If you upgraded from Nautobot 1.4.4 or earlier, the values for these fields will default to <code>None</code> (null).</p>"},{"location":"user-guide/core-data-model/dcim/poweroutlet.html#example-power-topology","title":"Example Power Topology","text":""},{"location":"user-guide/core-data-model/dcim/poweroutlettemplate.html","title":"Power Outlet Templates","text":"<p>A template for a power outlet that will be created on all instantiations of the parent device type. Each power outlet can be assigned a physical type, and its power source may be mapped to a specific feed leg and power port template. This association will be automatically replicated when the device type is instantiated.</p> <p>Added in version 1.4.5</p> <p>The fields <code>created</code> and <code>last_updated</code> were added to all device component template models. If you upgraded from Nautobot 1.4.4 or earlier, the values for these fields will default to <code>None</code> (null).</p>"},{"location":"user-guide/core-data-model/dcim/powerpanel.html","title":"Power Panel","text":"<p>A power panel represents the origin point in Nautobot for electrical power being disseminated by one or more power feeds. In a data center environment, one power panel often serves a group of racks, with an individual power feed extending to each rack, though this is not always the case. It is common to have two sets of panels and feeds arranged in parallel to provide redundant power to each rack.</p> <p>Each power panel must be assigned to a location, and may optionally be assigned to a rack group.</p> <p>Note</p> <p>Nautobot does not model the mechanism by which power is delivered to a power panel. Power panels define the root level of the power distribution hierarchy in Nautobot.</p>"},{"location":"user-guide/core-data-model/dcim/powerpanel.html#example-power-topology","title":"Example Power Topology","text":""},{"location":"user-guide/core-data-model/dcim/powerport.html","title":"Power Ports","text":"<p>A power port represents the inlet of a device where it draws its power, i.e. the connection port(s) on a device's power supply. Each power port may be assigned a physical type, as well as allocated and maximum draw values (in watts). These values can be used to calculate the overall utilization of an upstream power feed.</p> <p>Info</p> <p>When creating a power port on a device which supplies power to downstream devices, the allocated and maximum draw numbers should be left blank. Utilization will be calculated by taking the sum of all power ports of devices connected downstream.</p> <p>Cables can connect power ports only to power outlets or power feeds. (Pass-through ports cannot be used to model power distribution.)</p> <p>Added in version 1.4.5</p> <p>The fields <code>created</code> and <code>last_updated</code> were added to all device component models. If you upgraded from Nautobot 1.4.4 or earlier, the values for these fields will default to <code>None</code> (null).</p>"},{"location":"user-guide/core-data-model/dcim/powerport.html#example-power-topology","title":"Example Power Topology","text":""},{"location":"user-guide/core-data-model/dcim/powerporttemplate.html","title":"Power Port Templates","text":"<p>A template for a power port that will be created on all instantiations of the parent device type. Each power port can be assigned a physical type, as well as a maximum and allocated draw in watts.</p> <p>Added in version 1.4.5</p> <p>The fields <code>created</code> and <code>last_updated</code> were added to all device component template models. If you upgraded from Nautobot 1.4.4 or earlier, the values for these fields will default to <code>None</code> (null).</p>"},{"location":"user-guide/core-data-model/dcim/rack.html","title":"Racks","text":"<p>The rack model represents a physical two- or four-post equipment rack in which devices can be installed. Each rack must be assigned to a location, and may optionally be assigned to a rack group and/or tenant. Racks can also be organized by user-defined functional roles.</p> <p>Rack height is measured in rack units (U); racks are commonly between 42U and 48U tall, but Nautobot allows you to define racks of arbitrary height. A toggle is provided to indicate whether rack units are in ascending (from the ground up) or descending order.</p> <p>Each rack is assigned a name and (optionally) a separate facility ID. This is helpful when leasing space in a data center your organization does not own: The facility will often assign a seemingly arbitrary ID to a rack (for example, \"M204.313\") whereas internally you refer to is simply as \"R113.\" A unique serial number and asset tag may also be associated with each rack.</p> <p>A rack must be designated as one of the following types:</p> <ul> <li>2-post frame</li> <li>4-post frame</li> <li>4-post cabinet</li> <li>Wall-mounted frame</li> <li>Wall-mounted cabinet</li> </ul> <p>Similarly, each rack must be assigned an operational <code>status</code>. The following statuses are available by default:</p> <ul> <li>Reserved</li> <li>Available</li> <li>Planned</li> <li>Active</li> <li>Deprecated</li> </ul> <p>Each rack has two faces (front and rear) on which devices can be mounted. Rail-to-rail width may be 10, 19, 21, or 23 inches. The outer width and depth of a rack or cabinet can also be annotated in millimeters or inches.</p>"},{"location":"user-guide/core-data-model/dcim/rack.html#rack-power-utilization","title":"Rack Power Utilization","text":"<p>The power utilization of a rack is calculated when one or more power feeds are assigned to the rack and connected to devices that draw power.</p> <p>Here are the typical instances required for the power utilization of a rack to be calculated and shown in the web UI:</p> <ul> <li>Power Panel in the same location as the rack</li> <li>Power Feed assigned to the power panel and to the rack</li> <li>1 Device (i.e. PDU)<ul> <li>power port connected to the power feed</li> <li>power outlet(s) connected to the power port of itself</li> </ul> </li> <li>1 or more Devices<ul> <li>power port connected to a power outlet of the PDU</li> </ul> </li> </ul> <p>The total power utilization for a rack is calculated as the sum of all allocated draw (from power ports of devices either directly connected to a power feed or connected to a power outlet of a device that is connected to a power feed) divided by the Total Power (Amps \u00d7 Volts \u00d7 Max Utilization %) for all power feeds.</p>"},{"location":"user-guide/core-data-model/dcim/rackgroup.html","title":"Rack Groups","text":"<p>Racks can be organized into groups, which can be nested into themselves similar to locations. As with locations, how you choose to designate rack groups will depend on the nature of your organization.</p> <p>Each rack group must be assigned to a parent location. Rack groups may optionally be nested within one another to model a multi-level hierarchy.</p> <p>The name and facility ID of each rack within a group must be unique. (Racks not assigned to the same rack group may have identical names and/or facility IDs.)</p>"},{"location":"user-guide/core-data-model/dcim/rackreservation.html","title":"Rack Reservations","text":"<p>Users can reserve specific units within a rack for future use. An arbitrary set of units within a rack can be associated with a single reservation, but reservations cannot span multiple racks. A description is required for each reservation, reservations may optionally be associated with a specific tenant.</p>"},{"location":"user-guide/core-data-model/dcim/rearport.html","title":"Rear Ports","text":"<p>Like front ports, rear ports are pass-through ports which represent the continuation of a path from one cable to the next. Each rear port is defined with its physical type and a number of positions: Rear ports with more than one position can be mapped to multiple front ports. This can be useful for modeling instances where multiple paths share a common cable (for example, six discrete two-strand fiber connections sharing a 12-strand MPO cable).</p> <p>Note</p> <p>Front and rear ports need not necessarily reside on the actual front or rear device face. This terminology is used primarily to distinguish between the two components in a pass-through port pairing.</p> <p>Added in version 1.4.5</p> <p>The fields <code>created</code> and <code>last_updated</code> were added to all device component models. If you upgraded from Nautobot 1.4.4 or earlier, the values for these fields will default to <code>None</code> (null).</p>"},{"location":"user-guide/core-data-model/dcim/rearporttemplate.html","title":"Rear Port Templates","text":"<p>A template for a rear-facing pass-through port that will be created on all instantiations of the parent device type. Each rear port may have a physical type and one or more front port templates assigned to it. The number of positions associated with a rear port determines how many front ports can be assigned to it (the maximum is 1024).</p> <p>Added in version 1.4.5</p> <p>The fields <code>created</code> and <code>last_updated</code> were added to all device component template models. If you upgraded from Nautobot 1.4.4 or earlier, the values for these fields will default to <code>None</code> (null).</p>"},{"location":"user-guide/core-data-model/dcim/virtualchassis.html","title":"Virtual Chassis","text":"<p>A virtual chassis represents a set of devices which share a common control plane. A common example of this is a stack of switches which are connected and configured to operate as a single device. A virtual chassis must be assigned a name and may be assigned a domain.</p> <p>Each device in the virtual chassis is referred to as a VC member, and assigned a position and (optionally) a priority. VC member devices commonly reside within the same rack, though this is not a requirement. One of the devices may be designated as the VC master: This device will typically be assigned a name, services, and other attributes related to managing the VC.</p> <p>Note</p> <p>It's important to recognize the distinction between a virtual chassis and a chassis-based device. A virtual chassis is not suitable for modeling a chassis-based switch with removable line cards (such as the Juniper EX9208), as its line cards are not physically autonomous devices.</p>"},{"location":"user-guide/core-data-model/extras/configcontext.html","title":"Configuration Contexts","text":"<p>Sometimes it is desirable to associate additional data with a group of devices or virtual machines to aid in automated configuration. For example, you might want to associate a set of syslog servers for all devices within a particular region. Context data enables the association of extra user-defined data with devices and virtual machines grouped by one or more of the following assignments:</p> <ul> <li>Location</li> <li>Role</li> <li>Device type</li> <li>Platform</li> <li>Cluster group</li> <li>Cluster</li> <li>Tenant group</li> <li>Tenant</li> <li>Tag</li> </ul> <p>Added in version 1.5.0</p> <ul> <li>Device redundancy group</li> </ul> <p>Added in version 1.5.12</p> <ul> <li>Dynamic group - Need to set <code>settings.CONFIG_CONTEXT_DYNAMIC_GROUPS_ENABLED</code> to <code>True</code>. See notes here</li> </ul> <p>Context data not specifically assigned to one or more of the above groups is by default associated with all devices and virtual machines.</p> <p>Configuration contexts may be managed within Nautobot via the UI and/or API; they may also be managed externally to Nautobot in a Git repository if desired.</p>"},{"location":"user-guide/core-data-model/extras/configcontext.html#hierarchical-rendering","title":"Hierarchical Rendering","text":"<p>Context data is arranged hierarchically, so that data with a higher weight can be entered to override lower-weight data. Multiple instances of data are automatically merged by Nautobot to present a single dictionary for each object.</p> <p>For example, suppose we want to specify a set of syslog and NTP servers for all devices within a region. We could create a config context instance with a weight of 1000 assigned to the region, with the following JSON data:</p> <pre><code>{\n\"ntp-servers\": [\n\"172.16.10.22\",\n\"172.16.10.33\"\n],\n\"syslog-servers\": [\n\"172.16.9.100\",\n\"172.16.9.101\"\n]\n}\n</code></pre> <p>But suppose there's a problem at one particular location preventing traffic from reaching the regional syslog server. Devices there need to use a local syslog server instead of the two defined above. We'll create a second config context assigned only to that site with a weight of 2000 and the following data:</p> <pre><code>{\n\"syslog-servers\": [\n\"192.168.43.107\"\n]\n}\n</code></pre> <p>When the context data for a device at this location is rendered, the second, higher-weight data overwrite the first, resulting in the following:</p> <pre><code>{\n\"ntp-servers\": [\n\"172.16.10.22\",\n\"172.16.10.33\"\n],\n\"syslog-servers\": [\n\"192.168.43.107\"\n]\n}\n</code></pre> <p>Data from the higher-weight context overwrites conflicting data from the lower-weight context, while the non-conflicting portion of the lower-weight context (the list of NTP servers) is preserved.</p> <p>Warning</p> <p>ConfigContexts can be applied to parents and descendants of TreeModels such as Locations and RackGroups. The inheritance of ConfigContext will always be determined by the value of the weight attribute. You may see unexpected behavior if you have ConfigContexts of the same weight applied to TreeModel parents and their descendants.</p>"},{"location":"user-guide/core-data-model/extras/configcontext.html#local-context-data","title":"Local Context Data","text":"<p>Devices and virtual machines may also have a local config context defined. This local context will always take precedence over any separate config context objects which apply to the device/VM. This is useful in situations where we need to call out a specific deviation in the data for a particular object.</p> <p>Warning</p> <p>If you find that you're routinely defining local context data for many individual devices or virtual machines, custom fields may offer a more effective solution.</p>"},{"location":"user-guide/core-data-model/extras/configcontextschema.html","title":"Config Context Schemas","text":"<p>Added in version 1.1.0</p> <p>While config contexts allow for arbitrary data structures to be stored within Nautobot, at scale it is desirable to apply validation constraints to that data to ensure its consistency and to avoid data entry errors. To service this need, Nautobot supports optionally backing config contexts with JSON Schemas for validation. These schema are managed via the config context schema model and are optionally linked to config context instances, in addition to devices and virtual machines for the purpose of validating their local context data.</p> <p>A JSON Schema is capable of validating the structure, format, and type of your data, and acts as a form of documentation useful in a number of automation use cases.</p> <p>A config context is linked to a single schema object and thus they are meant to model individual units of the overall context. In this way, they validate each config context object, not the fully rendered context as viewed on a particular device or virtual machine.</p> <p>When a config context schema is employed on a config or local context, the data therein is validated when the object in question is saved. Should validation against the schema fail, a relevant error message is returned to the user and they are prevented from saving the data until the validation issue has been resolved.</p> <p>Here is an example JSON Schema which can be used to validate an NTP server config context:</p> <pre><code>{\n\"type\": \"object\",\n\"properties\": {\n\"ntp-servers\": {\n\"type\": \"array\",\n\"minItems\": 2,\n\"maxItems\": 2,\n\"items\": {\n\"type\": \"string\",\n\"format\": \"ipv4\"\n}\n}\n},\n\"additionalProperties\": false\n}\n</code></pre> <p>This schema would allow a config context with this data to pass:</p> <pre><code>{\n\"ntp-servers\": [\n\"172.16.10.22\",\n\"172.16.10.33\"\n]\n}\n</code></pre> <p>However it would not allow any of these examples to be saved:</p> <pre><code>{\n\"ntp-servers\": [\n\"172.16.10.22\"\n]\n}\n</code></pre> <pre><code>{\n\"ntp\": \"172.16.10.22,172.16.10.22\"\n}\n</code></pre> <pre><code>{\n\"ntp-servers\": [\n\"172.16.10.22\",\n\"172.16.10.33\",\n\"5.5.4\"\n]\n}\n</code></pre> <p>For more information on JSON Schemas and specifically type formats for specialized objects like IP addresses, hostnames, and more see the JSON Schema docs.</p> <p>Note</p> <p>Config Context Schemas currently support the JSON Schema draft 7 specification.</p>"},{"location":"user-guide/core-data-model/ipam/ipaddress.html","title":"IP Addresses","text":"<p>An IP address comprises a single host address (either IPv4 or IPv6) and its subnet mask. Its mask should match exactly how the IP address is configured on an interface in the real world.</p> <p>IP addresses are automatically arranged under parent prefixes according to the IP hierarchy. IP addresses are not directly assigned to namespaces or VRFs on an individual basis, but instead derive their namespace and VRF(s) from their parent prefix.</p> <p>Changed in version 2.0.0</p> <p>In Nautobot 1.x, IP addresses were only loosely associated to prefixes, and it was possible to create \"orphan\" IP addresses that had no corresponding prefix record. In Nautobot 2.0 this is no longer the case; each IP address has a parent prefix, and you can no longer create IP addresses that do not belong to a defined prefix and namespace. When migrating existing data from Nautobot 1.x, parent prefixes will be automatically created where needed, but you may need to do some additional cleanup of your IPAM data after the migration in order to ensure its accuracy and correctness.</p> <p>Each IP address can also be assigned an operational <code>status</code> and a functional role.  The following statuses are available by default:</p> <ul> <li>Active</li> <li>Reserved</li> <li>Deprecated</li> </ul> <p>Roles are used to indicate some special attribute of an IP address; for example, use as a loopback or as the the virtual IP for a VRRP group. (Note that functional roles are conceptual in nature, and thus cannot be customized by the user.) Available roles include:</p> <ul> <li>Loopback</li> <li>Secondary</li> <li>Anycast</li> <li>VIP</li> <li>VRRP</li> <li>HSRP</li> <li>GLBP</li> </ul> <p>Types are used to indicate special functions of an IP address such as DHCP or SLAAC. The default is \"host\":</p> <ul> <li>Host</li> <li>DHCP</li> <li>SLAAC (IPv6 Stateless Address Autoconfiguration)</li> </ul> <p>Changed in version 2.0.0</p> <p>The relationship to device and virtual machine interfaces has been changed to a many-to-many relationship. This allows an IP address to be assigned to multiple interfaces, and an interface to have multiple IP addresses assigned to it.</p> <p>An IP address can be assigned to device or virtual machine interfaces, and an interface may have multiple IP addresses assigned to it. Further, each device and virtual machine may have one of its interface IPs designated as its primary IP per address family (one for IPv4 and one for IPv6).</p> <p>Note</p> <p>When primary IPs are set for both IPv4 and IPv6, Nautobot will prefer IPv6. This can be changed by setting the <code>PREFER_IPV4</code> configuration parameter.</p> <p>Changed in version 2.0.0</p> <p><code>prefix_length</code> becomes <code>mask_length</code> and is intended to describe the desired subnet mask of the IP addresses when configured on interface(s).</p>"},{"location":"user-guide/core-data-model/ipam/ipaddress.html#network-address-translation-nat","title":"Network Address Translation (NAT)","text":"<p>An IP address can be designated as the network address translation (NAT) inside IP address for one or more other IP addresses. This is useful primarily to denote a translation between public and private IP addresses. This relationship is followed in both directions: For example, if 10.0.0.1 is assigned as the inside IP for 192.0.2.1, 192.0.2.1 will be displayed as the outside IP for 10.0.0.1.</p> <p>Added in version 1.3.0</p> <p>Support for multiple outside NAT IP addresses was added.</p>"},{"location":"user-guide/core-data-model/ipam/ipaddress.html#ipaddress-parenting-concrete-relationship","title":"IPAddress Parenting Concrete Relationship","text":"<p>Added in version 2.0.0</p> <p>The <code>ipam.IPAddress</code> model has been modified to have a foreign key to <code>ipam.Prefix</code> as the <code>parent</code> field. Parenting of IP addresses is now automatically managed at the database level to greatly improve performance especially when calculating tree hierarchy and utilization.</p> <p>The following guidance has been added for the <code>IPAddress.parent</code> field:</p> <ul> <li>An <code>IPAddress</code> should have a parent <code>Prefix</code> of type <code>Network</code></li> <li>An <code>IPAddress</code> should not be created if a suitable parent <code>Prefix</code> of type <code>Network</code> does not exist</li> <li>An <code>IPAddress</code> can be a member of a <code>Pool</code> but only if the <code>Pool</code> is a child of a <code>Network</code> prefix</li> </ul> <p>Warning</p> <p>In a future Nautobot release, this guidance will become an enforced constraint on <code>IPAddress</code> creation and modification.</p>"},{"location":"user-guide/core-data-model/ipam/ipaddress.html#de-duplicating-ipaddresses","title":"De-duplicating IPAddresses","text":"<p>Added in version 2.0.0</p> <p>After upgrading to Nautobot v2.0, in order to satisfy new uniqueness constraints, the data migrations may duplicate <code>IP Addresses</code> across different <code>Namespaces</code>. Check out this IP Address Merge tool to collapse unnecessarily duplicated <code>IP Addresses</code>.</p>"},{"location":"user-guide/core-data-model/ipam/namespace.html","title":"Namespaces","text":"<p>Added in version 2.0.0</p> <p>A namespace groups together a set of related but distinct VRFs, prefixes, and IP addresses. Fundamentally, its purpose is to serve as a constraint or boundary for uniqueness and duplication of IPAM data. If you have a relatively straightforward network, where there are no overlapping prefixes or duplicated IP addresses, a single namespace may be sufficient to model your entire network, even if it has thousands of IPAM records; however, in the case of a managed service provider network or similar, you may need multiple namespaces to accurately model its complexities and clearly distinguish between otherwise seemingly-duplicate records.</p> <p>Each namespace has a name and a description, and can optionally be associated to a location for informational purposes.</p> <p>Within a given namespace, only a single record may exist for each distinct VRF, prefix, or IP address. Although such a record may be used in multiple locations within your network, such as a VRF being configured on multiple devices, or a virtual IP address being assigned to multiple interfaces or devices, it is fundamentally a single network object in these cases, and Nautobot models this data accordingly.</p> <p>Changed in version 2.0.0</p> <p>This is a change from the Nautobot 1.x data model, in which, for example, each instance of a virtual IP address would typically need to be stored as a distinct database record. On migrating existing data from Nautobot 1.x you may need to do some cleanup of your IPAM data to fit the new models.</p> <p>Namespaces exist in Nautobot to model the exceptions to the above case, where a similarly-named VRF, or a prefix or IP address corresponding to the same subnet or host as another, is actually a distinct entity within your network and needs to be modeled as such. Another example where this might be necessary would be during a corporate merger, where perhaps the separate networks of each company might both use parts of the RFC 1918 <code>10.0.0.0/8</code> network space and need to coexist for a time as parallel network namespaces rather than parts of a single combined namespace.</p>"},{"location":"user-guide/core-data-model/ipam/namespace.html#sample-namespace-implementation-diagram","title":"Sample Namespace Implementation Diagram","text":""},{"location":"user-guide/core-data-model/ipam/prefix.html","title":"Prefixes","text":"<p>A prefix is an IPv4 or IPv6 network and mask expressed in CIDR notation (e.g. 192.0.2.0/24). A prefix entails only the \"network portion\" of an IP address: All bits in the address not covered by the mask must be zero. (In other words, a prefix cannot be a specific IP address, except in the case of /32 IPv4 prefixes and /128 IPv6 prefixes.)</p> <p>Each prefix belongs to a specific namespace, and is unique within that namespace. Each prefix can also optionally be assigned to a particular location, as well as to zero or more virtual routing and forwarding (VRF) instances. All prefixes not assigned to a VRF are considered to be in the \"global\" VRF within their namespace.</p> <p>Changed in version 2.0.0</p> <p>In Nautobot 1.x, prior to the introduction of the namespace data model, a prefix might or might not be unique within its assigned VRF. In Nautobot 2.0, prefixes are always unique within their namespace. You may need to do some cleanup of your data after migrating from Nautobot 1.x to suit the new data requirements.</p> <p>Each prefix must be assigned a <code>status</code> and can optionally be assigned a role. These terms are often used interchangeably so it's important to recognize the difference between them. The status defines a prefix's operational state. The following statuses are provided by default:</p> <ul> <li>Active - Provisioned and in use</li> <li>Reserved - Designated for future use</li> <li>Deprecated - No longer in use</li> </ul> <p>Changed in version 2.0.0</p> <p>The \"Container\" status was removed and its functionality was replaced by the <code>Prefix.type</code> field.</p> <p>On the other hand, a prefix's role defines its function. Role assignment is optional and roles are fully customizable. For example, you might create roles to differentiate between production and development infrastructure.</p> <p>A prefix may also be assigned to a VLAN. This association is helpful for associating address space with layer two domains. A VLAN may have multiple prefixes assigned to it.</p> <p>The prefix model can be set to one of three types through the <code>type</code> field. The valid prefix types are:</p> <ul> <li>Container</li> <li>Network (default)</li> <li>Pool</li> </ul> <p>If a prefix's type is set to \"Pool\", Nautobot will treat this prefix as a range (such as a NAT pool) wherein every IP address is valid and assignable. This logic is used when identifying available IP addresses within a prefix. If type is set to \"Network\", Nautobot will assume that the first and last (network and broadcast) addresses within an IPv4 prefix are unusable.</p> <p>Changed in version 2.0.0</p> <p>The <code>is_pool</code> field was removed and its functionality was replaced by the <code>Prefix.type</code> field.</p> <p>A prefix can be assigned to an RIR to track which RIR has granted your organization permission to use the specified IP space on the public Internet.</p> <p>The <code>date_allocated</code> field can be used to track any date and time you would like to define as the \"allocated date\" for a prefix. This could be the date an RIR assigned a prefix to your organization or the date a prefix was assigned to a specific internal team.</p> <p>Added in version 2.0.0</p> <p>The <code>date_allocated</code> and <code>rir</code> fields were added, migrating data from the removed <code>Aggregate</code> model.</p>"},{"location":"user-guide/core-data-model/ipam/prefix.html#prefix-utilization-calculation","title":"Prefix utilization calculation","text":"<p>Changed in version 2.0.0</p> <p>The <code>get_utilization</code> method on the <code>ipam.Prefix</code> model has been updated in 2.0 to account for the <code>Prefix.type</code> field. The behavior is now as follows:</p> <ul> <li>If the <code>Prefix.type</code> is <code>Container</code>, the utilization is calculated as the sum of the total address space of all child prefixes.</li> <li>If the <code>Prefix.type</code> is <code>Pool</code>, the utilization is calculated as the sum of the total number of IP addresses within the pool's range.</li> <li>If the <code>Prefix.type</code> is <code>Network</code>:<ul> <li>The utilization is calculated as the sum of the total address space of all child <code>Pool</code> prefixes plus the total number of child IP addresses.</li> <li>For IPv4 networks larger than /31, if neither the first or last address is occupied by either a pool or an IP address, they are subtracted from the total size of the prefix.</li> </ul> </li> </ul>"},{"location":"user-guide/core-data-model/ipam/prefix.html#prefix-hierarchy","title":"Prefix hierarchy","text":"<p>Added in version 2.0.0</p> <p>Prefixes and IP addresses within a namespace are organized into a hierarchy using the <code>parent</code> field. There is guidance for the types of prefixes that can be assigned as parents:</p> <ul> <li>A <code>Prefix</code> of type <code>Container</code> should only have a parent (if any) of type <code>Container</code></li> <li>A <code>Prefix</code> of type <code>Network</code> should only have a parent (if any) of type <code>Container</code></li> <li>A <code>Prefix</code> of type <code>Pool</code> should only have a parent (if any) of type <code>Network</code></li> <li>Any <code>Prefix</code> can be a root prefix (i.e. have no parent)</li> </ul> <p>Warning</p> <p>In a future release of Nautobot, this guidance will become an enforced data constraint.</p>"},{"location":"user-guide/core-data-model/ipam/rir.html","title":"Regional Internet Registries (RIRs)","text":"<p>Regional Internet registries are responsible for the allocation of globally-routable address space. The five RIRs are ARIN, RIPE, APNIC, LACNIC, and AFRINIC. However, some address space has been set aside for internal use, such as defined in RFCs 1918 and 6598. Nautobot considers these RFCs as a sort of RIR as well; that is, an authority which \"owns\" certain address space. There also exist lower-tier registries which serve particular geographic areas.</p> <p>Users can create whatever RIRs they like and optionally assign prefixes to an RIR. The RIR model includes a boolean flag which indicates whether the RIR allocates only private IP space.</p> <p>For example, suppose your organization has been allocated 104.131.0.0/16 by ARIN. It also makes use of RFC 1918 addressing internally. You would first create RIRs named \"ARIN\" and \"RFC 1918,\" then create a prefix for each of these top-level networks, assigning it to its respective RIR.</p> <p>Changed in version 2.0.0</p> <p>The <code>Aggregate</code> model and its relationships to <code>RIR</code> were migrated to the <code>Prefix</code> model.</p>"},{"location":"user-guide/core-data-model/ipam/routetarget.html","title":"Route Targets","text":"<p>A route target is a particular type of extended BGP community used to control the redistribution of routes among VRF tables in a network. Route targets can be assigned to individual VRFs in Nautobot as import or export targets (or both) to model this exchange in an L3VPN. Each route target must be given a unique name, which should be in a format prescribed by RFC 4364, similar to a VR route distinguisher.</p> <p>Each route target can optionally be assigned to a tenant, and may have tags assigned to it.</p>"},{"location":"user-guide/core-data-model/ipam/service.html","title":"Services","text":"<p>A service represents a layer four TCP or UDP service available on a device or virtual machine. For example, you might want to document that an HTTP service is running on a device. Each service includes a name, protocol, and port number; for example, \"SSH (TCP/22)\" or \"DNS (UDP/53).\"</p> <p>A service may optionally be bound to one or more specific IP addresses belonging to its parent device or VM. (If no IP addresses are bound, the service is assumed to be reachable via any assigned IP address.)</p> <p>Changed in version 2.0.0</p> <ul> <li>Renamed <code>ipaddresses</code> field to <code>ip_addresses</code>.</li> </ul>"},{"location":"user-guide/core-data-model/ipam/vlan.html","title":"VLANs","text":"<p>A VLAN represents an isolated layer two domain, identified by a name and a numeric ID (1-4094) as defined in IEEE 802.1Q. Each VLAN may be assigned to a location, tenant, and/or VLAN group.</p> <p>Each VLAN must be assigned a <code>status</code>. The following statuses are available by default:</p> <ul> <li>Active</li> <li>Reserved</li> <li>Deprecated</li> </ul> <p>As with prefixes, each VLAN may also be assigned a functional role. Prefixes and VLANs share the same set of customizable roles.</p> <p>Changed in version 1.5.9</p> <p>The maximum <code>name</code> length was increased from 64 characters to 255 characters.</p> <p>Changed in version 2.0.0</p> <ul> <li>Renamed <code>group</code> field to <code>vlan_group</code>.</li> </ul>"},{"location":"user-guide/core-data-model/ipam/vlangroup.html","title":"VLAN Groups","text":"<p>VLAN groups can be used to organize VLANs within Nautobot. Each group may optionally be assigned to a specific location, but a group cannot belong to multiple locations.</p> <p>Groups can also be used to enforce uniqueness: Each VLAN within a group must have a unique ID and name. VLANs which are not assigned to a group may have overlapping names and IDs (including VLANs which belong to a common location). For example, you can create two VLANs with ID 123, but they cannot both be assigned to the same group.</p>"},{"location":"user-guide/core-data-model/ipam/vrf.html","title":"Virtual Routing and Forwarding (VRF)","text":"<p>A VRF object in Nautobot represents a virtual routing and forwarding (VRF) domain. Each VRF is essentially a separate routing table. VRFs are commonly used to isolate customers or organizations from one another within a network, or to route overlapping address space (e.g. multiple instances of the 10.0.0.0/8 space). Each VRF may be assigned to a specific tenant to aid in organizing the available IP space by customer or internal user.</p> <p>Changed in version 2.0.0</p> <p>Each VRF now belongs to a namespace, which now serves as the uniqueness boundary for address space, similar to how a VRF with the \"enforce unique\" flag set behaved in Nautobot 1.x. Prefix and address uniqueness is enforced by the namespace now (regardless of VRF association within that namespace) and the \"enforce unique\" flag has been removed from VRFs.</p> <p>Each VRF is assigned a name and an optional route distinguisher (RD). The RD is expected to take one of the forms prescribed in RFC 4364, however its formatting is not strictly enforced. Any given RD is unique within a namespace; in a future Nautobot release, VRF names will also be enforced to be unique per namespace.</p> <p>Each VRF may have one or more import and/or export route targets applied to it. Route targets are used to control the exchange of routes (prefixes) among VRFs in L3VPNs.</p> <p>Prefixes (and, implicitly, their contained IP addresses) can be assigned to zero or more VRFs in their namespace, as best suits their usage within your network. Any prefix or IP address not assigned to a VRF is said to belong to the \"global\" VRF within their namespace. It's important to distinguish this from the \"global\" namespace that you may have defined and which may contain any number of distinct VRFs.</p> <p>Changed in version 2.0.0</p> <p>In Nautobot 1.x, each prefix could only be assigned to at most one VRF, and you would have to create multiple prefix records in the database to reflect a prefix's existence in multiple VRFs. On migrating existing data to Nautobot 2.0, you may need to do some cleanup of your IPAM data to fit the new models.</p>"},{"location":"user-guide/core-data-model/tenancy/tenant.html","title":"Tenants","text":"<p>A tenant represents a discrete grouping of resources used for administrative purposes. Typically, tenants are used to represent individual customers or internal departments within an organization. The following objects can be assigned to tenants:</p> <ul> <li>Locations</li> <li>Racks</li> <li>Rack reservations</li> <li>Devices</li> <li>VRFs</li> <li>Prefixes</li> <li>IP addresses</li> <li>VLANs</li> <li>Circuits</li> <li>Clusters</li> <li>Virtual machines</li> </ul> <p>Tenant assignment is used to signify the ownership of an object in Nautobot. As such, each object may only be owned by a single tenant. For example, if you have a firewall dedicated to a particular customer, you would assign it to the tenant which represents that customer. However, if the firewall serves multiple customers, it doesn't belong to any particular customer, so tenant assignment would not be appropriate.</p> <p>Changed in version 2.0.0</p> <ul> <li>Renamed <code>group</code> field to <code>tenant_group</code>.</li> </ul>"},{"location":"user-guide/core-data-model/tenancy/tenantgroup.html","title":"Tenant Groups","text":"<p>Tenants can be organized by custom groups. For instance, you might create one group called \"Customers\" and one called \"Departments.\" The assignment of a tenant to a group is optional.</p> <p>Tenant groups may be nested recursively to achieve a multi-level hierarchy. For example, you might have a group called \"Customers\" containing subgroups of individual tenants grouped by product or account team.</p>"},{"location":"user-guide/core-data-model/virtualization/cluster.html","title":"Clusters","text":"<p>A cluster is a logical grouping of physical resources within which virtual machines run. A cluster must be assigned a type (technological classification), and may optionally be assigned to a cluster group, location, and/or tenant.</p> <p>Physical devices may be associated with clusters as hosts. This allows users to track on which host(s) a particular virtual machine may reside. However, Nautobot does not support pinning a specific VM within a cluster to a particular host device.</p>"},{"location":"user-guide/core-data-model/virtualization/clustergroup.html","title":"Cluster Groups","text":"<p>Cluster groups may be created for the purpose of organizing clusters. The arrangement of clusters into groups is optional.</p>"},{"location":"user-guide/core-data-model/virtualization/clustertype.html","title":"Cluster Types","text":"<p>A cluster type represents a technology or mechanism by which a cluster is formed. For example, you might create a cluster type named \"VMware vSphere\" for a locally hosted cluster or \"DigitalOcean NYC3\" for one hosted by a cloud provider.</p>"},{"location":"user-guide/core-data-model/virtualization/virtualmachine.html","title":"Virtual Machines","text":"<p>A virtual machine represents a virtual compute instance hosted within a cluster. Each VM must be assigned to exactly one cluster.</p> <p>Like devices, each VM can be assigned a platform and/or functional role, and an operational <code>status</code>. The following statuses are available by default:</p> <ul> <li>Active</li> <li>Offline</li> <li>Planned</li> <li>Staged</li> <li>Failed</li> <li>Decommissioning</li> </ul> <p>Additional fields are available for annotating the vCPU count, memory (GB), and disk (GB) allocated to each VM. Each VM may optionally be assigned to a tenant. Virtual machines may have virtual interfaces assigned to them, but do not support any physical component.</p> <p>Changed in version 2.0.0</p> <p>In Nautobot 1.x, it was not possible to delete an IPAddress or an VMInterface that was serving as the primary IP address (<code>primary_ip4</code>/<code>primary_ip6</code>) for a VirtualMachine. As of Nautobot 2.0, this is now permitted; doing so will clear out the VirtualMachine's corresponding primary IP value.</p>"},{"location":"user-guide/core-data-model/virtualization/vminterface.html","title":"Interfaces","text":"<p>Virtual machine interfaces behave similarly to device interfaces, and can be assigned IP addresses, VLANs, an operational <code>status</code> and services. However, given their virtual nature, they lack properties pertaining to physical attributes. For example, VM interfaces do not have a physical type and cannot have cables attached to them.</p> <p>The following operational statuses are available by default:</p> <ul> <li>Planned</li> <li>Maintenance</li> <li>Active</li> <li>Decommissioning</li> <li>Failed</li> </ul> <p>Added in version 1.4.0</p> <ul> <li>Added <code>bridge</code> field.</li> <li>Added <code>parent_interface</code> field.</li> <li>Added <code>status</code> field.</li> </ul> <p>Changed in version 2.0.0</p> <p>The relationship to IP addresses has been changed to a many-to-many relationship. This allows an IP address to be assigned to multiple VM interfaces, and a VM interface to have multiple IP addresses assigned to it.</p>"},{"location":"user-guide/feature-guides/custom-fields.html","title":"Custom Fields","text":"<p>Custom fields are a convenient method of adding new fields to existing Nautobot models without needing to modify the underlying source code or database schema. For more general information on how custom fields work, refer to the custom fields model documentation.</p>"},{"location":"user-guide/feature-guides/custom-fields.html#when-to-use-custom-fields","title":"When to use Custom Fields","text":"<p>Custom fields are commonly used for fields that need different values across individual objects. For example, a custom field on devices to reference an internal ticket number that inventories each device in Nautobot. If you need a solution for marking multiple objects with a common flag, tags may be a better fit.</p>"},{"location":"user-guide/feature-guides/custom-fields.html#create-a-custom-field","title":"Create a Custom Field","text":"<p>Navigate to the custom fields page by clicking on Extensibility -&gt; Custom Fields in the Nautobot menu. Click on Add to create a new custom field.</p>"},{"location":"user-guide/feature-guides/custom-fields.html#custom-field-attributes","title":"Custom Field Attributes","text":"<p>Changed in version 2.0.0</p> <p>CustomField model no longer has a <code>name</code> attribute in v2.0. Instead, its pre-existing <code>label</code> attribute (unique for all CustomField instances) replaced <code>name</code> to be used exclusively for display purposes in the UI.</p> <p>CustomField model's <code>slug</code> attribute was renamed to <code>key</code> (unique for all CustomField instances), which contains a GraphQL-safe string used as the key in the underlying custom field data dictionary.</p> <p>These aforementioned changes do not require users to do any manual work as they are properly handled by data migrations during the upgrade from Nautobot v1.x to v2.0. Note that if you have non-GraphQL-safe <code>slug</code> values in your database pre-migration, some of the resulting CustomField <code>key</code> values might be altered to ensure that <code>key</code> values for all CustomField instances are valid and unique.</p>"},{"location":"user-guide/feature-guides/custom-fields.html#label","title":"Label","text":"<p>The label is the human readable label of the custom field that will be displayed on the associated object detail view.</p> <p></p>"},{"location":"user-guide/feature-guides/custom-fields.html#grouping","title":"Grouping","text":"<p>The optional grouping field allows you to group custom fields into collapsible menus.</p> <p></p>"},{"location":"user-guide/feature-guides/custom-fields.html#key","title":"Key","text":"<p>The key is used as the key in the underlying custom field data dictionary. This is automatically created from the label if not supplied. The default value should be sufficient for most deployments.</p>"},{"location":"user-guide/feature-guides/custom-fields.html#type","title":"Type","text":"<p>The type of data that the custom field will store. Valid choices are documented in the custom field model documentation.</p>"},{"location":"user-guide/feature-guides/custom-fields.html#weight","title":"Weight","text":"<p>Weight determines how custom fields are sorted in forms and object detail views. Higher-weight fields will be ordered lower on the page; if multiple fields have the same weight, they will be listed alphabetically.</p>"},{"location":"user-guide/feature-guides/custom-fields.html#description","title":"Description","text":"<p>The description of a custom field is shown as a mouseover tooltip in object detail views and as help text under form fields.</p> <p></p>"},{"location":"user-guide/feature-guides/custom-fields.html#required","title":"Required","text":"<p>Check the required box if this field cannot be null on the associated objects.</p> <p>Warning</p> <p>If an associated object does not have a valid value assigned to a required custom field, that field must be updated with a valid value before the object can be saved. Try to supply a valid default value when creating required custom fields. Since automatic provisioning is only performed when the assigned content types for a custom field change, if an existing custom field is changed from optional to required the associated objects will need to be updated manually.</p>"},{"location":"user-guide/feature-guides/custom-fields.html#default","title":"Default","text":"<p>The default value for the custom field. This form field only accepts JSON data so if you want to set the field default to a string of <code>foo</code> you must supply the JSON string <code>\"foo\"</code>. Boolean field valid values are <code>true</code> and <code>false</code> (all lowercase). Date fields are strings in the format <code>\"YYYY-MM-DD\"</code>. Select and multi-select field default must match one of the field's choices.</p> <p>Note</p> <p>The default value for a select or multi-select field must match one of the existing choices. If the desired default value is not in the list of choices, the choices must be updated and saved before the default can be changed. As a result of this behavior, default values cannot be set on select and multi-select fields when a custom field is created.</p>"},{"location":"user-guide/feature-guides/custom-fields.html#filter-logic","title":"Filter Logic","text":"<p>Changed in version 1.4.0</p> <p>Custom field extended filtering introduced extended lookup expression filters for <code>exact</code> and <code>icontains</code>, duplicating the functionality of both the <code>Strict</code> and <code>Loose</code> settings.</p> <p>The filter logic setting applies to filtering on custom fields in the UI and API. For example, when filtering in the API to find a device with the custom field <code>cf1</code> set to <code>\"abc\"</code> you would query <code>/api/dcim/devices/?cf_cf1=abc</code>. If the filter logic setting is set to <code>Loose</code> this would match on <code>\"ABC\"</code> and <code>\"abcdef\"</code>. If the filter logic setting is set to <code>Strict</code> only devices with the custom field set to exactly \"abc\" (case sensitive) would be returned. If the filter logic setting is set to <code>disabled</code>, no filters will be available for this custom field, including extended lookup filters. The <code>Loose</code> and <code>Strict</code> settings only change the behavior of the default filter (<code>cf_customfieldname</code>) on <code>text</code>, <code>url</code> and <code>json</code> custom fields.</p>"},{"location":"user-guide/feature-guides/custom-fields.html#move-to-advanced-tab","title":"Move to Advanced Tab","text":"<p>When selected, the custom field will appear in the \"Advanced\" tab of the object detail view instead of the default tab.</p>"},{"location":"user-guide/feature-guides/custom-fields.html#assignment","title":"Assignment","text":""},{"location":"user-guide/feature-guides/custom-fields.html#content-types","title":"Content Types","text":"<p>The list of content types to add this custom field to. Only models that inherit from the <code>nautobot.extras.models.customfields.CustomFieldModel</code> model class can be selected.</p> <p>Note</p> <p>When a custom field is created or associated to a new content type (model), all affected existing objects will be updated to add the custom field. The initial value will be set to the <code>default</code> value of the custom field. This update runs as a background task via Celery, so it may take a few seconds or more before all objects reflect the new custom field, depending on the size of your database.</p>"},{"location":"user-guide/feature-guides/custom-fields.html#validation-rules","title":"Validation Rules","text":"<p>Validation rules are used for constraining custom fields to specific values.</p>"},{"location":"user-guide/feature-guides/custom-fields.html#minimum-value","title":"Minimum value","text":"<p>Minimum allowed value for <code>Integer</code> fields.</p>"},{"location":"user-guide/feature-guides/custom-fields.html#maximum-value","title":"Maximum value","text":"<p>Maximum allowed value for <code>Integer</code> fields.</p>"},{"location":"user-guide/feature-guides/custom-fields.html#validation-regex","title":"Validation Regex","text":"<p>Regular expression to enforce on <code>Text</code>, <code>URL</code>, <code>Selection</code> and <code>Multiple selection</code> field values. Regex validation is handled by the python re engine which uses a PCRE or perl-like regular expression syntax. Examples of common regex validations:</p> <p>Must start with companyname</p> <pre><code>^companyname\n</code></pre> <p>Must end with 5 digit zip code</p> <pre><code>[0-9]{5}$\n</code></pre> <p>Must only contain digits</p> <pre><code>^\\d+$\n</code></pre> <p>Must be exactly 8 alphanumeric characters</p> <pre><code>^[0-9a-zA-Z]{8}$\n</code></pre> <p>Must be between 8 and 10 alphanumeric characters and underscore</p> <pre><code>^\\w+{8,10}$\n</code></pre> <p>Must contain anything that is not whitespace</p> <pre><code>\\S\n</code></pre>"},{"location":"user-guide/feature-guides/custom-fields.html#custom-field-choices","title":"Custom Field Choices","text":"<p>The choices to be presented for <code>Selection</code> and <code>Multiple selection</code> custom field types. These are displayed in the order of the weight values supplied with the lowest weight on top. If regex validation is being used, these choices must match the regular expression.</p> <p></p> <p></p>"},{"location":"user-guide/feature-guides/custom-fields.html#editing-custom-fields","title":"Editing Custom Fields","text":"<p>Since automatic provisioning is only performed when a custom field's content types change, some changes made to existing custom fields are not reflected on the associated objects automatically. Some examples of cases where this might cause unexpected behavior are changes to the <code>required</code>, <code>default</code> and validation fields.</p> <p>If a custom field is created with <code>required=False</code> and then later changed to <code>required=True</code>, all of the associated objects that do not yet have a value for this field will fail validation the next time they're saved unless updated with a valid value. Similarly, changes to the validation fields for a custom field will not automatically result in changes to affected objects, but may require changes the next time those objects are edited in order to bring them into compliance with the updated validation rules.</p> <p>If a custom field's <code>default</code> value is changed, newly created objects will use the new default, but existing objects that were set to the previous default value will not automatically be updated.</p>"},{"location":"user-guide/feature-guides/custom-fields.html#deleting-custom-fields","title":"Deleting Custom Fields","text":"<p>Custom fields are removed from associated objects when a content type is removed from the custom field, including when the custom field is deleted. This update runs as a background task via Celery, so it may take a few seconds or more before the custom field data is removed from all objects, depending on the size of your database.</p>"},{"location":"user-guide/feature-guides/custom-fields.html#retrieving-custom-field-data","title":"Retrieving Custom Field Data","text":"<p>Custom fields augment an existing model so retrieving custom field values is different from native fields. All custom field data is stored as a dictionary in the model field named <code>_custom_field_data</code> but there is a property named <code>cf</code> to make accessing this field easier. Example:</p>"},{"location":"user-guide/feature-guides/custom-fields.html#retrieve-custom-field-data-in-nautobot-shell","title":"Retrieve Custom Field Data in Nautobot Shell","text":"<pre><code># retrieve all custom field data\n&gt;&gt;&gt; device.cf\n{'eol_date': '1970-01-01',\n'support_group': 'Network Operations (555-4357)',\n'dmz_device': True,\n'cmdb_id': 12345}\n# retrieve a single field\n&gt;&gt;&gt; device.cf.get(\"eol_date\")\n'1970-01-01'\n</code></pre> <p>The <code>key</code> of the custom field is used as the key for the associated object's data dictionary.</p>"},{"location":"user-guide/feature-guides/custom-fields.html#retrieve-custom-field-data-in-the-rest-api","title":"Retrieve Custom Field Data in the Rest API","text":"<p>Custom fields are returned in the API for all supported models in the <code>custom_fields</code> key:</p> <code>GET http://localhost:8080/api/dcim/devices/ffd8df99-6d1a-41c3-b19f-b8357eefc481/</code> <pre><code>{\n\"id\": \"ffd8df99-6d1a-41c3-b19f-b8357eefc481\",\n...\n\"custom_fields\": {\n\"dmz_device\": true,\n\"eol_date\": \"1970-01-01\",\n\"cmdb_id\": 12345,\n\"support_group\": \"Network Operations (555-4357)\"\n}\n}\n</code></pre>"},{"location":"user-guide/feature-guides/custom-fields.html#graphql","title":"GraphQL","text":""},{"location":"user-guide/feature-guides/custom-fields.html#retrieve-data-for-a-custom-field-in-graphql","title":"Retrieve Data for a Custom Field in GraphQL","text":"<p>Individual custom fields can be retrieved in GraphQL queries by using the <code>cf_&lt;fieldname&gt;</code> field name format:</p> <pre><code>{\n  devices {\n    cf_support_group\n    name\n    id\n  }\n}\n</code></pre> Example GraphQL output <pre><code>{\n\"data\": {\n\"devices\": [\n{\n\"name\": \"phx-leaf1-1-1\",\n\"cf_support_group\": \"Network Operations (555-4357)\",\n\"id\": \"8bd9ed2b-3774-4806-9d17-c9f21f2c73e4\"\n},\n{\n\"name\": \"stl-leaf1-2-1\",\n\"cf_support_group\": \"Network Operations (555-4357)\",\n\"id\": \"b22bb7f4-6a6d-4426-9d27-5dcb0471ed2a\"\n},\n{\n\"name\": \"Test Device\",\n\"cf_support_group\": \"Network Testing (555-8080)\",\n\"id\": \"ffd8df99-6d1a-41c3-b19f-b8357eefc481\"\n}\n]\n}\n}\n</code></pre>"},{"location":"user-guide/feature-guides/custom-fields.html#retrieve-data-for-all-custom-fields-in-graphql","title":"Retrieve Data For All Custom Fields in GraphQL","text":"<p>All custom field data can be retrieved in GraphQL queries by using the <code>_custom_field_data</code> field:</p> <pre><code>{\n  devices(id:\"8bd9ed2b-3774-4806-9d17-c9f21f2c73e4\") {\n    name\n    id\n    _custom_field_data\n  }\n}\n</code></pre> Example GraphQL output <pre><code>{\n\"data\": {\n\"devices\": [\n{\n\"name\": \"phx-leaf1-1-1\",\n\"id\": \"8bd9ed2b-3774-4806-9d17-c9f21f2c73e4\",\n\"_custom_field_data\": {\n\"eol_date\": \"1970-01-01\",\n\"support_group\": \"Network Operations (555-4357)\",\n\"dmz_device\": true,\n\"cmdb_id\": 12345,\n}\n}\n]\n}\n}\n</code></pre>"},{"location":"user-guide/feature-guides/custom-fields.html#filter-queries-on-custom-field-data-in-graphql","title":"Filter Queries on Custom Field Data in GraphQL","text":"<p>Queries can also be filtered by custom field values using any of the filters available in the UI and Rest API:</p> <pre><code># Retrieve devices where custom field support_group\n# does not contain \"Network Operations\" (case insensitive)\n{\n  devices(cf_support_group__nic: \"Network Operations\") {\n    name\n    id\n    cf_support_group\n  }\n}\n</code></pre> Example GraphQL output <pre><code>{\n\"data\": {\n\"devices\": [\n{\n\"name\": \"Test Device\",\n\"id\": \"ffd8df99-6d1a-41c3-b19f-b8357eefc481\",\n\"cf_support_group\": \"Network Testing (555-8080)\"\n}\n]\n}\n}\n</code></pre>"},{"location":"user-guide/feature-guides/custom-fields.html#modifying-custom-field-data","title":"Modifying Custom Field Data","text":""},{"location":"user-guide/feature-guides/custom-fields.html#modify-custom-field-data-in-nautobot-shell","title":"Modify Custom Field Data in Nautobot Shell","text":"<p>Custom field data behaves like a python dictionary in the Nautobot Shell. When modifying custom fields through the Nautobot Shell, make sure to use the <code>.validated_save()</code> method to save the object to ensure that custom field validation is performed.  Example:</p> <pre><code>&gt;&gt;&gt; device.cf[\"support_group\"]\n'Network Operations (555-4357)'\n&gt;&gt;&gt; device.cf[\"support_group\"] = \"Network Testing (555-8080)\"\n&gt;&gt;&gt; device.validated_save()\n&gt;&gt;&gt; device.cf[\"support_group\"]\n'Network Testing (555-8080)'\n</code></pre> <p>If you do not use <code>.validated_save()</code> when creating or updating objects, the custom field dictionary will not be populated with default values or even empty values and this can lead to unintuitive behaviour.</p>"},{"location":"user-guide/feature-guides/custom-fields.html#modify-custom-field-data-in-the-rest-api","title":"Modify Custom Field Data in the Rest API","text":"<p>Individual custom field data can be modified by sending a PATCH to the Rest API and setting the new value in the <code>custom_fields</code> key:</p> <pre><code>PATCH http://localhost:8080/api/dcim/devices/ffd8df99-6d1a-41c3-b19f-b8357eefc481/\n{\n    \"custom_fields\": {\n        \"support_group\": \"Rest API test\"\n    }\n}\n</code></pre> Example API output <pre><code>{\n\"id\": \"ffd8df99-6d1a-41c3-b19f-b8357eefc481\",\n...\n\"custom_fields\": {\n\"dmz_device\": true,\n\"eol_date\": \"1970-01-01\",\n\"cmdb_id\": 12345,\n\"support_group\": \"Rest API test\"\n}\n}\n</code></pre>"},{"location":"user-guide/feature-guides/git-data-source.html","title":"Git as a Data Source","text":"<p>The \"Git\u2122 as a Data Source\" feature was developed to provide the ability to populate existing data, templates, scripts, and much more into Nautobot; while leveraging the benefits that tools such as GitHub and GitLab already provide, including issue tracking, discussions, pipelines, and approvals.  For example having the ability to have users approve the YAML data that is used for Nautobot  <code>config context</code> along with running tests on that data, or having the users approve Jinja2 templates that are used for Nautobot <code>export templates</code>.  These examples and more can be accomplished by used Git as a Data Source.</p> <p>For more technical details on how to use this feature, please see the documentation on Git Repositories.</p>"},{"location":"user-guide/feature-guides/git-data-source.html#supported-providers","title":"Supported Providers","text":"<p>The feature uses the concept of a <code>provides</code> field to map a repository to a use case. A list of the supported options is provided below.</p>"},{"location":"user-guide/feature-guides/git-data-source.html#core-functionality","title":"Core Functionality","text":"Name Summary Export Templates Nautobot allows users to define custom templates that can be used when exporting objects. Jobs Jobs are a way for users to execute custom logic on demand from within the Nautobot UI. Jobs can interact directly with Nautobot data to accomplish various data creation, modification, and validation tasks. Config Contexts Config contexts can be used to provide additional data that you can't natively store in Nautobot. Config Context Schemas Schemas enforce data validation on config contexts."},{"location":"user-guide/feature-guides/git-data-source.html#examples-of-plugins-defining-additional-providers","title":"Examples of Plugins Defining Additional Providers","text":"<p>Additional Git providers can be added by using Nautobot's flexible plugin system.</p> Name Summary Related Plugin Backup Configs Backup configuration data. Golden Config Intended Configs Stores the intended configurations, this grabs Nautobot data and runs through Jinja Templates. Golden Config Jinja Templates Repository that holds Jinja templates to be used to generate intended configs. Golden Config"},{"location":"user-guide/feature-guides/git-data-source.html#repository-details","title":"Repository Details","text":"<p>This table defines repository parameters that are required to establish a repository connection.</p> Field Explanation Name User friendly name for the repo. Slug Computer-friendly name for the repo. Auto-generated based on the <code>name</code> provided, but you can change it if you wish. Remote URL The URL pointing to the Git repo. Current git url usage is limited to <code>http</code> or <code>https</code>. Branch The branch in the Git repo to use. Defaults to <code>main</code>. Secrets Group (Optional) Grouping containing a HTTP token and/or HTTP username as needed to access the repository. Provides Resource type(s) provided by this Git repo. <ul> <li>GitHub Personal Access Token</li> <li>GitLab Personal Access Token</li> <li>Bitbucket Personal Access Token</li> </ul> <p>Removed in version 2.0.0</p> <p>In Nautobot 1.x it was possible to configure the secrets (<code>username</code> and/or <code>token</code>) for a private Git Repository directly in Nautobot's database. Due to security concerns and maintainability challenges, this option has been removed. To access a private Git repository you now must use Secrets Groups.</p>"},{"location":"user-guide/feature-guides/git-data-source.html#using-git-data-sources","title":"Using Git Data Sources","text":"<p>This section will focus on examples and use the <code>user-guide</code> branch on the <code>demo-git-datasources</code> repo: <code>https://github.com/nautobot/demo-git-datasource/tree/user-guide</code>.</p>"},{"location":"user-guide/feature-guides/git-data-source.html#export-templates","title":"Export Templates","text":"<p>Export Templates allow a user to export Nautobot objects based on a custom template.  Export templates can change over time depending on the needs of a user.  Allowing export templates to reference a Git repo makes managing templates easier.</p> <p>A template can be used to put objects into a specific format for ingestion into another system, tool, or report.  It is possible that different templates are needed depending on specific users or teams.  This can lead to sprawl of export templates.  To keep accurate templates synced with Nautobot the Git Data Sources extensibility feature can be used.</p>"},{"location":"user-guide/feature-guides/git-data-source.html#add-a-repository","title":"Add a Repository","text":"<p>Navigate to the Data Sources Git integration. Extensibility -&gt; Git Repositories.</p> <p></p> <p>Click [+] or [Add]</p> <p>That loads a default page to add a repository.</p> <p></p> <p>Note</p> <p>By default only config contexts, export templates, and jobs are available resource types.  Others may be added when specific plugins are used.</p>"},{"location":"user-guide/feature-guides/git-data-source.html#fill-out-repository-details","title":"Fill out Repository Details","text":"<p>Fill out the details for the Git repository. More information on the inputs can be found in the fields section.</p> <p></p> <p>As soon as you click on Create &amp; Sync, Nautobot will clone and sync the repository and provide status of the job.</p> <p>Note</p> <p>If you are using a self-signed Git repository, the Server Administrator will need to ensure the <code>GIT_SSL_NO_VERIFY</code> environment variable is set to permit this.</p> <p> </p> <p>The repository will now be displayed on the main Git Repository page.</p> <p></p> <p>Once the repository is synced each template will now be available in the Export Templates section.  Extensibility -&gt; Export Templates.</p> <p></p> <p>Note</p> <p>If the templates don't populate, make sure the Git directory is named <code>export_templates</code> and the sub-directory and sub-sub-directory names correctly match the Nautobot <code>content type</code>.</p> <p>Example below:</p> <pre><code>\u25b6 tree export_templates\nexport_templates\n\u2514\u2500\u2500 dcim\n    \u2514\u2500\u2500 device\n        \u251c\u2500\u2500 markdown_export.md\n        \u251c\u2500\u2500 text_export.txt\n        \u2514\u2500\u2500 yaml_export.yml\n\n2 directories, 3 files\n</code></pre>"},{"location":"user-guide/feature-guides/git-data-source.html#modifying-a-file-and-sync-changes","title":"Modifying a File and Sync Changes","text":"<p>Now that the export templates have been loaded into Nautobot they can be utilized as normal.  For example navigate to Devices -&gt; Devices and click on Export in the top right corner, the dropdown will now include the templates loaded from the Git repository.</p> <p>The power of having export templates utilizing the Git integration comes with the native source control features that Git comes with.  To illustrate a simple Git sync within Nautobot assume the following template needs to be updated.</p> <p>Filename: <code>/export_templates/dcim/device/yaml_export.yml</code></p> <p>Current contents:</p> <pre><code>---\n{% for device in queryset %}\n{% if device.status %}\n- {{ device.name }}:\n{% endif %}\n{% endfor %}\n...\n</code></pre> <p>The template needs to be modified to provide more information than just a list of hostnames. The location needs to be added.</p> <p>The updated template is now:</p> <pre><code>---\n{% for device in queryset %}\n{% if device.status %}\n- {{ device.name }}:\n  location: {{ device.location }}\n{% endif %}\n{% endfor %}\n...\n</code></pre> <p>Once the contributor updates the Git repository via normal Git processes and it is reviewed and merged into the branch that was used, a sync process from Nautobot needs to be completed.  This can be done from the default Git view, or within a specific detailed view of a Git repository.</p> <p>From the default Git repositories view: </p> <p>From the detailed view: </p> <p>Tip</p> <p>Once the repository has been synced it's easy to check the history for the templates. Navigate to Git Repositories and select the repository in question.  Once you're in the detailed view you can look through the Synchronization Status or Change Log tabs.</p> <p>Now that the Git repository is linked for export templates it can be controlled via the normal Git operations workflow, which allows users or groups of users to perform code reviews using Pull Requests etc.</p>"},{"location":"user-guide/feature-guides/git-data-source.html#jobs","title":"Jobs","text":"<p>Jobs are a way for users to execute custom logic on demand from within the Nautobot UI. Jobs can interact directly with Nautobot data to accomplish various data creation, modification, and validation tasks.</p> <p>For technical details on jobs, please see the documentation on jobs.</p> <p>Jobs allow a user to write scripts in Python.  By integrating the scripts with Git, a user can utilize Git workflows to manage source control, versioning, and pipelines.</p> <p>Setting up the repository can be done following the same steps from Export Templates.  The only differences is the <code>provides</code> selection changes to <code>jobs</code>.</p> <p>Jobs need to be defined in <code>/jobs/</code> directory at the root of a Git repository.</p> <p>An example tree for <code>/jobs/</code>.</p> <pre><code>\u25b6 tree jobs\njobs\n\u251c\u2500\u2500 __init__.py\n\u2514\u2500\u2500 get-device-connection.py\n\n1 directory, 2 files\n</code></pre> <p>Note</p> <p>As shown in the above example, the <code>/jobs/</code> directory must contain a file called <code>__init__.py</code>. This may be an empty file, but it must exist.</p> <p>Once the repository is created in Nautobot. </p> <p>Tip</p> <p>The same repository and branch can be used for the different <code>provides</code> methods.  Nautobot Git as a data source will look for specific root directory names.</p> <p>Once the scripts have been pushed into the repository, a sync needs to be executed, after which navigating to Jobs via Jobs -&gt; Jobs will show the new jobs loaded from the Git repository.</p> <p></p> <p>Jobs now shows the job from the Git repository.</p> <p></p> <p>At this point all changes, and history can be kept using Git.  A simple <code>sync</code> operation can be done from Nautobot to pulldown any changes.</p>"},{"location":"user-guide/feature-guides/git-data-source.html#config-contexts","title":"Config Contexts","text":"<p>Detailed information on config contexts in Git Repositories.</p> <p>Config contexts may be provided as JSON or YAML files located in the <code>/config_contexts/</code> folder, which must be in the root of the Git repository.</p> <p>Config contexts can be used to provide additional details to different automation tooling.  For example Ansible variables, or any other data that you can't natively store in Nautobot.  It can also be used in the Golden Configuration Nautobot plugin to provide extra details to generate configuration templates.</p> <p>A few simple examples of Configuration Context data might be:</p> <ul> <li>DNS Servers</li> <li>NTP Servers</li> <li>ACL Data</li> <li>Routing Information such as BGP ASNs etc.</li> </ul> <p>Similar to the other data sources, the repository can be added by navigating to Extensibility -&gt; Git repositories. Click on Add, and fill out the repository details.</p> <p></p> <p>Once the repository syncs the details can be found in the Synchronization Status tab.  For example, the platform specifics were synced:</p> <p></p> <p>The repository structure is:</p> <pre><code>\u25b6 tree config_contexts\nconfig_contexts\n\u251c\u2500\u2500 devices\n\u2502   \u251c\u2500\u2500 location-a-bb-01.yml\n\u2502   \u251c\u2500\u2500 location-a-rtr-01.yml\n\u2502   \u251c\u2500\u2500 location-a-rtr-02.yml\n\u2502   \u251c\u2500\u2500 location-a-spine-01.yml\n\u2502   \u251c\u2500\u2500 location-a-spine-02.yml\n\u2502   \u251c\u2500\u2500 location-b-bb-01.yml\n\u2502   \u251c\u2500\u2500 location-b-leaf-01.yml\n\u2502   \u251c\u2500\u2500 location-b-leaf-02.yml\n\u2502   \u251c\u2500\u2500 location-b-rtr-01.yml\n\u2502   \u251c\u2500\u2500 location-b-rtr-02.yml\n\u2502   \u251c\u2500\u2500 location-b-spine-01.yml\n\u2502   \u2514\u2500\u2500 location-b-spine-02.yml\n\u251c\u2500\u2500 platform_eos.yml\n\u251c\u2500\u2500 platform_junos.yml\n\u251c\u2500\u2500 platform_nxos.yml\n\u2514\u2500\u2500 role_spine.yml\n\n1 directory, 16 files\n</code></pre> <p>Configuration Context details:</p> <ul> <li>Follows an inheritance methodology similar to what Ansible implements.  Global contexts can be overwritten by local contexts at both a group level, as well as at a device specific level.</li> <li>Nautobot UI provides a simple view to see merged config contexts.  It can be visualized by navigating to a device and clicking on the config contexts tab.</li> </ul> <p>Here's an example, with some of the details omitted for brevity.</p> <p></p> <p>There is a huge benefit to having <code>config contexts</code> managed by a Git workflow.  This type of data can be modified often, especially platform specifics, or new device roles.  Utilizing a standard Git workflow allows for all the proper reviews and approvals to be accomplished before accepting the changes into Nautobot for use.</p>"},{"location":"user-guide/feature-guides/git-data-source.html#config-context-schemas","title":"Config Context Schemas","text":"<p>Detailed information on config context schemas in Git Repositories.</p> <p>Config context schemas are used to enforce data validation on config contexts. These schema are managed via the config context schema model and are optionally linked to config context instances, in addition to devices and virtual machines for the purpose of validating their local context data.</p> <pre><code>\u25b6 tree config_contexts\nconfig_context_schemas\n\u251c\u2500\u2500 schema_1.yaml\n\u251c\u2500\u2500 schema_2.json\n</code></pre>"},{"location":"user-guide/feature-guides/git-data-source.html#additional-git-data-sources","title":"Additional Git Data Sources","text":"<p>As seen in Fill out Repository Details, the standard installation of Nautobot will come natively with export templates, jobs, and config contexts.  Additional data sources can be incorporated using the Nautobot plugin system.  For example, the nautobot-plugin-golden-config plugin implements four additional data sources.</p> <ul> <li>Config Contexts</li> <li>Backup Configs</li> <li>Intended Configs</li> <li>Jinja Templates</li> </ul> <p>For more information for the Golden Configuration specific data sources, navigate to Nautobot Golden Config Repo.</p>"},{"location":"user-guide/feature-guides/git-data-source.html#common-issues-and-troubleshooting","title":"Common Issues and Troubleshooting","text":"<ol> <li>Repository is linked, but data is not properly loaded into Nautobot.<ul> <li>Validate the root directory is set to the proper name.</li> <li>Export Templates -&gt; <code>export_templates</code>.</li> <li>Jobs -&gt; <code>jobs</code>.</li> <li>Config Contexts -&gt; <code>config_contexts</code>.</li> </ul> </li> <li>Synchronization Status Failures.<ul> <li>Validate branch is correct and exists in the remote repository. </li> <li>Validate the remote url is correct and is the <code>http(s)</code> url.  <code>ssh</code> urls are not currently supported. </li> </ul> </li> <li> <p>Authentication Issues.</p> <ul> <li>Check repository permissions.</li> <li>Ensure the password is the Personal Access Token (PAT) for the username supplied.</li> <li>Ensure the PAT permissions are setup properly.</li> <li>At a minimum the <code>repo</code> option should be checked or access.</li> </ul> <p></p> </li> </ol>"},{"location":"user-guide/feature-guides/graphql.html","title":"GraphQL User Guide","text":""},{"location":"user-guide/feature-guides/graphql.html#introduction","title":"Introduction","text":""},{"location":"user-guide/feature-guides/graphql.html#what-is-graphql","title":"What is GraphQL?","text":"<p>GraphQL is a query language for your APIs and a runtime for fulfilling those queries with your existing data.</p>"},{"location":"user-guide/feature-guides/graphql.html#how-graphql-simplifies-api-interactions","title":"How GraphQL simplifies API Interactions","text":"<p>When interacting with APIs, It's often necessary to build relationships between multiple models to achieve the result that is desired. Doing this typically requires multiple API calls to create the relationships. For example, lets assume that there are two devices in Nautobot. Each are assigned a location, region, roles, interfaces, and IP Addresses.</p> <p>Simply querying the <code>/api/dcim/devices/</code> API route provides:</p> View API Results <pre><code>{\n\"count\": 2,\n\"next\": \"https://demo.nautobot.com/api/dcim/devices/?limit=1&amp;offset=2\",\n\"previous\": \"https://demo.nautobot.com/api/dcim/devices/?limit=1\",\n\"results\": [\n{\n\"id\": \"c8886c88-6eff-4c4f-a079-4ef16b53d4f6\",\n\"url\": \"https://demo.nautobot.com/api/dcim/devices/c8886c88-6eff-4c4f-a079-4ef16b53d4f6/\",\n\"name\": \"ams-edge-02\",\n\"display\": \"ams-edge-02\",\n\"device_type\": {\n\"id\": \"244ea351-3c7a-4d23-ba80-5db6b65312cc\",\n\"url\": \"https://demo.nautobot.com/api/dcim/device-types/244ea351-3c7a-4d23-ba80-5db6b65312cc/\",\n\"manufacturer\": {\n\"id\": \"687f53d9-2c51-40fd-83aa-875e43d01a05\",\n\"url\": \"https://demo.nautobot.com/api/dcim/manufacturers/687f53d9-2c51-40fd-83aa-875e43d01a05/\",\n\"name\": \"Arista\",\n},\n\"model\": \"DCS-7280CR2-60\",\n\"display\": \"Arista DCS-7280CR2-60\"\n},\n\"role\": {\n\"id\": \"a3637471-6b4d-4f5a-a249-838d621abe60\",\n\"url\": \"https://demo.nautobot.com/api/dcim/device-roles/a3637471-6b4d-4f5a-a249-838d621abe60/\",\n\"name\": \"edge\",\n},\n\"tenant\": null,\n\"platform\": null,\n\"serial\": \"\",\n\"asset_tag\": null,\n\"location\": {\n\"id\": \"4ad439e9-4f1b-41c9-bc8c-dd7c1c921dc3\",\n\"url\": \"https://demo.nautobot.com/api/dcim/locations/4ad439e9-4f1b-41c9-bc8c-dd7c1c921dc3/\",\n\"name\": \"ams\",\n},\n\"rack\": {\n\"id\": \"bff3f7af-bd77-49b6-a57a-9c4b8fc7673a\",\n\"url\": \"https://demo.nautobot.com/api/dcim/racks/bff3f7af-bd77-49b6-a57a-9c4b8fc7673a/\",\n\"name\": \"ams-102\",\n\"display\": \"ams-102\"\n},\n\"position\": 40,\n\"face\": {\n\"value\": \"front\",\n\"label\": \"Front\"\n},\n\"parent_device\": null,\n\"status\": {\n\"value\": \"active\",\n\"label\": \"Active\"\n},\n\"primary_ip\": null,\n\"primary_ip4\": null,\n\"primary_ip6\": null,\n\"cluster\": null,\n\"virtual_chassis\": null,\n\"vc_position\": null,\n\"vc_priority\": null,\n\"comments\": \"\",\n\"local_config_context_data\": null,\n\"tags\": [],\n\"custom_fields\": {},\n\"config_context\": {},\n\"created\": \"2021-02-25T00:00:00Z\",\n\"last_updated\": \"2021-02-25T14:51:57.609598\"\n}\n]\n}\n</code></pre> <p> There is a lot of useful information in that API call, but there is also a lot of information that is missing; such as interfaces and ip addresses associated with the devices. There is also potentially a lot of information that isn't needed for the specific task. To retrieve the missing information, subsequent API calls would need to be performed; and those API results would need to be correlated to the correct device.</p> <p>GraphQL reduces the complexity of performing multiple API calls and correlating results by empowering the user to create their own query that provides the user exactly what they want and nothing that they don't, in a single API call.</p>"},{"location":"user-guide/feature-guides/graphql.html#exploring-graphql-in-nautobot","title":"Exploring GraphQL in Nautobot","text":"<p>In Nautobot, there is a link to the GraphQL web interface at the bottom right-hand side of the page. The GraphQL web interface is called GraphiQL. Navigating to the URI (<code>/graphql</code>), brings up the GraphiQL tool for creating queries. This interface is useful for exploring the possibilities of GraphQL and validating that written queries execute successfully.</p> <p></p>"},{"location":"user-guide/feature-guides/graphql.html#documentation-explorer","title":"Documentation Explorer","text":"<p>If you're new to GraphQL, take a little bit of time to explore the Documentation Explorer. This can be accomplished by clicking the <code>&lt; Docs</code> link in the GraphiQL interface. The information within Documentation Explorer is specific to creating queries in Nautobot.</p> <p></p> <p>In the Documentation Explorer, search for <code>devices</code>. The results are all of the models that utilize the <code>devices</code> model.</p> <p></p> <p>From the <code>devices</code> query, select <code>devices</code> from <code>Query.devices</code>. This will display all of the potential query fields from devices.</p> <p></p>"},{"location":"user-guide/feature-guides/graphql.html#first-query","title":"First Query","text":"<p>Now that you have a basic understanding of how to obtain information to query from the Documentation Explorer, let's craft a query. Earlier in the guide, a sample REST API call was performed to obtain device information. While the query had a lot of important information, it also lacked a lot of information. In this section, lets explore how to craft a GraphQL query that displays all of the information that we want.</p> <p>GraphQL queries are encapsulated in <code>query { }</code> flags (simply <code>{ }</code> is also acceptable). With that in mind, let's craft our query from the GraphiQL interface to inspect all devices and display their device names. To do this, let's execute:</p> <pre><code>query {\ndevices {\nname\n}\n}\n</code></pre> <p>This query will retrieve a list of all devices by their hostname.</p> View GraphQL Query Results <p> </p> <p> Now, let's modify the query to provide interface names for each device. We can do that by modifying the existing query to add <code>interfaces { name }</code> as a sub-query of <code>devices</code>. GraphiQL makes this process a bit easier, because it has syntax completion built in.</p> <p></p> <pre><code>query {\ndevices {\nname\ninterfaces {\nname\n}\n}\n}\n</code></pre> <p>The result is a list of all the devices by their hostname and associated interfaces by their names.</p> View GraphQL Query Results <p> </p> <p> We can continue iterating on the query until we get exactly what we want from the query. For example, if I wanted to iterate on the previous query to not only display the interfaces of the devices, but also display the interface description, the IP Addresses associated with the interface, and whether or not the interface was a dedicated management interface; I would structure the query like:</p> <pre><code>query {\ndevices {\nname\ninterfaces {\nname\ndescription\nmgmt_only\nip_addresses {\naddress\n}   }\n}\n}\n</code></pre> <p>The results of the query look like:</p> View GraphQL Query Results <p> </p>"},{"location":"user-guide/feature-guides/graphql.html#filtering-queries","title":"Filtering Queries","text":"<p>These queries are great, but they are displaying the interface attributes and device names for every device in the Nautobot inventory. Nautobot allows users to filter queries at any level as desired to narrow the scope of the returned data. As an example, we can filter the queried devices by their location. This is done by adding <code>(location: \"&lt;location name&gt;\")</code> after <code>devices</code>. For example: <code>query { devices(location: \"ams\") { name }}</code> will display all devices in the <code>ams</code> location.</p> <p>As an example. We can query devices by their location. This is done by adding <code>(location: \"&lt;location name&gt;\")</code> after <code>devices</code>. For example: <code>query { devices(location: \"ams\") { name }}</code> will display all devices in the <code>ams</code> location.</p> View GraphQL Query Results <p> </p> <p> GraphQL also allows you to filter by multiple attributes at once if desired. You can use the Documentation Explorer to assist you in finding criteria attributes to filter on. In this example, I add the <code>role</code> attribute in addition to <code>location</code>.</p> <pre><code>query {\ndevices(location: \"ams\", role: \"edge\") {\nname\n}\n}\n</code></pre> View GraphQL Query Results <p> </p> <p> You can also filter at deeper levels of the query. On many to one relationships you can filter the results based on an attribute of the field. Any attribute that relates to a GraphQLType can be filtered.</p> <pre><code>query {\ndevices(location: \"ams\", role: \"edge\") {\nname\ninterfaces(name: \"Ethernet1/1\") {\nname\n}\n}\n}\n</code></pre> <pre><code>query {\nlocations(name: \"ams\") {\ndevices(role: \"edge\") {\nname\ninterfaces(name: \"Ethernet1/1\") {\nname\n}\n}\n}\n}\n</code></pre> View GraphQL Query Results <p> </p> <p>Added in version 1.3.0</p> <p>You can also paginate the results returned to you when the data set gets larger. To do so, use the keywords \"limit\" and \"offset\". The \"limit\" keyword will limit the count of results returned after the \"offset\". If no \"offset\" is specified, then the default offset is zero.</p> <pre><code>query {\ndevices(location: \"ams01\", , limit: 1, offset: 1) {\nname\n}\n}\n</code></pre>"},{"location":"user-guide/feature-guides/graphql.html#using-the-graphql-api-in-nautobot","title":"Using the GraphQL API in Nautobot","text":"<p>Now that we've explored how to use the GraphiQL interface to help us create GraphQL queries, let's take our queries and call them with the REST API. This is where the real advantage is going to come in to play, because it will allow us to utilize these queries in a programmatic way.</p> <p></p> <p>From the Nautobot Swagger documentation, we can see that the API calls to <code>/api/graphql</code> require a HTTP POST method. In the HTTP POST, the <code>query</code> field is required, as it is where we specify the GraphQL query. The <code>variables</code> field is optional; it's where we can assign values to any variables included in the query, if we choose to do so.</p> <p>To simplify the process even more, we'll utilize the PyNautobot SDK.</p> <p>Here is an example Python script using the PyNautobot SDK to query GraphQL:</p> <pre><code>#!/usr/bin/env python3\nimport pynautobot\nimport json\nquery = \"\"\"\nquery {\n  devices {\n    name\n    interfaces {\n      name\n      description\n      mgmt_only\n      ip_addresses {\n        address\n      }\n    }\n  }\n}\n\"\"\"\nnb = pynautobot.api(\nurl=\"http://localhost\",\ntoken=\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n)\ngql = nb.graphql.query(query=query)\nprint(json.dumps(gql.json, indent=2))\n</code></pre> <p>The contents of the <code>query</code> variable was taken directly from the example above where we grabbed all device interfaces and associated attributes. We then take the output and print the contents as a JSON object. Now, let's iterate on the script to filter the contents with the <code>variable</code> flag. Just as we did above, we'll filter by <code>location</code>.</p> <pre><code>#!/usr/bin/env python3\nimport pynautobot\nimport json\nvariables = {\"location_name\": \"ams\"}\nquery = \"\"\"\nquery ($location_name: String!) {\n  devices (location: $location_name) {\n    name\n    interfaces {\n      name\n      mgmt_only\n      ip_addresses {\n        address\n      }\n    }\n  }\n}\n\"\"\"\nnb = pynautobot.api(\nurl=\"http://localhost\",\ntoken=\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n)\ngql = nb.graphql.query(query=query, variables=variables)\nprint(json.dumps(gql.json, indent=2))\n</code></pre> <p>In the updated script, we add the <code>variables = {\"location_name\": \"ams\"}</code> variable. We then update the query to let GraphQL know that we will be sending parameters to to filter by <code>location</code>. The updated output is still a JSON object. Instead of fetching all devices, we are filtering by devices in the <code>ams</code> location. The PyNautobot SDK has some excellent GraphQL examples. Be sure to check out the documentation.</p>"},{"location":"user-guide/feature-guides/graphql.html#saving-queries","title":"Saving Queries","text":"<p>Added in version 1.1.0</p> <p>Queries can now be stored inside of Nautobot, allowing the user to easily rerun previously defined queries.</p> <p>Inside of Extensibility -&gt; Data Management -&gt; GraphQL Queries, there are views to create and manage GraphQL queries.</p> <p>Saved queries can be executed from the detailed query view or via a REST API request. The queries can also be populated from the detailed query view into GraphiQL by using the \"Open in GraphiQL\" button. Additionally, in the GraphiQL UI, there is now a menu item, \"Queries\", which can be used to populate GraphiQL with any previously saved query.</p> <p>To execute a stored query via the REST API, a POST request can be sent to <code>/api/extras/graphql-queries/[uuid]/run/</code>. Any GraphQL variables required by the query can be passed in as JSON data within the request body.</p>"},{"location":"user-guide/feature-guides/graphql.html#closing","title":"Closing","text":"<p>GraphQL is a powerful, yet simple, tool for querying the exact information that is necessary for the task at hand. For further information about GraphQL, be sure to check out the GraphQL Docs!</p>"},{"location":"user-guide/feature-guides/ip-address-merge-tool.html","title":"Duplicate IP Address Merge Tool","text":"<p>In order to satisfy new uniqueness constraints, upgrading from Nautobot v1.x to v2.0 can create duplicate <code>IPAddress</code> objects in the existing database. This tool is designated to help users to reduce unnecessary duplicate <code>IPAddress</code> objects by merging them into a single IP Address with all the desired attributes.</p>"},{"location":"user-guide/feature-guides/ip-address-merge-tool.html#when-to-use-this-tool","title":"When to use this tool","text":"<p>After upgrading to Nautobot v2.0 and running the data migrations necessary, duplicate <code>IPAddress</code> objects might exist in your database. We define duplicate <code>IPAddress</code> objects as those which have the same <code>host</code> attribute but exist in different <code>namespaces</code>. If you have no use case to keep those duplicate <code>IPAddress</code> objects around, we recommend you to use this tool to de-duplicate those <code>IPAddress</code> objects and keep your database clean and manageable. But if you do have reasons to maintain duplicate <code>IPAddress</code> objects, this tool is not for you.</p> <p>Important</p> <p>One of the possible reasons to maintain duplicate <code>IPAddress</code> objects can be that you have use cases for duplicate <code>IPAddress</code> objects with different <code>nat_inside</code> attributes. Only one <code>nat_inside</code> IP address can be assigned per object.</p>"},{"location":"user-guide/feature-guides/ip-address-merge-tool.html#how-to-access-this-tool","title":"How to access this tool","text":"<p>To use this tool:</p> <ol> <li>Go to the <code>IPAM</code> tab on the navigation menu and click on <code>IP Addresses</code>. This will take you to the list view of all <code>IPAddress</code> objects that exist in the database.</li> <li>On the top right of the page, you will find a group of buttons representing different available actions and the first one should be <code>Find and Merge Duplicate IPs</code>.</li> <li>Click on that button to access the tool.</li> </ol> <p></p>"},{"location":"user-guide/feature-guides/ip-address-merge-tool.html#how-it-works","title":"How it works","text":"<ol> <li>If you de-select all other duplicates and attempt to merge, nothing will happen (the operation is a no-op) and the object will be skipped over as if you had clicked the <code>Skip and Go to the Next Duplicate</code> button.</li> <li>All of the selected <code>IPAddress</code> objects will be deleted and a new <code>IPAddress</code> object with all of the desired attributes will be created.</li> <li>All <code>Interface</code> assignments of the deleted <code>IPAddress</code> objects will be automatically updated to reference the newly created <code>IPAddress</code> object.</li> <li>All <code>VMInterface</code> assignments of the deleted <code>IPAddress</code> objects will be automatically updated to reference the newly created <code>IPAddress</code> object.</li> <li>The newly created <code>IPAddress</code> object will be added to <code>IPAddress</code> assignments of related <code>Service</code> objects.</li> <li><code>primary_ip4/primary_ip6</code> of <code>Devices</code> that are referencing the deleted <code>IPAddress</code> objects will be automatically updated to reference the newly created <code>IPAddress</code> object.</li> </ol>"},{"location":"user-guide/feature-guides/ip-address-merge-tool.html#how-to-use-this-tool","title":"How to use this tool","text":"<p>Clicking on the <code>Find and Merge Duplicate IPs</code> button will automatically query your database for duplicate <code>IPAddress</code> objects and group them by their respective <code>host</code> values. The tool will present the duplicate <code>IPAddress</code> objects in order from lowest to highest <code>mask_length</code> values.</p> <p></p>"},{"location":"user-guide/feature-guides/ip-address-merge-tool.html#merging-all-presented-ip-addresses","title":"Merging all presented IP addresses","text":"<p>When a set of potentially duplicate <code>IPAddress</code> objects are found, the tool will present them and all of their editable attributes as a table. Select the desired value for each attribute and click on the <code>Merge and Go to the Next Duplicate</code> button. Nautobot will combine all of the selected <code>IPAddress</code> objects into a new <code>IPAddress</code> with the attributes you selected. If more duplicate addresses are present, with a different <code>host</code> value, you will be presented with a new table showing the next set of duplicates, and can repeat this process as needed.</p> <p></p>"},{"location":"user-guide/feature-guides/ip-address-merge-tool.html#merging-a-subset-of-presented-ip-addresses","title":"Merging a subset of presented IP addresses","text":"<p>If you want to keep some of the <code>IPAddress</code> objects as distinct records but merge others, you can uncheck the check-boxes in the first column corresponding to the objects you do not wish to merge. From the remaining checked records, select the desired attributes and click on the <code>Merge and Go to the Next Duplicate</code> button. This operation will only combine the <code>IPAddress</code> objects that you have checked.</p> <p></p> <p>Note</p> <p>Unchecking a given <code>IP Address</code> prevents its attribute values from being selected for the merge. Moreover, if there are not at least two boxes checked, there is no merging to perform, and so clicking on the <code>Merge and Go to the Next Duplicate</code> button will proceed to the next set of duplicate IP addresses without making any changes to the current set.</p>"},{"location":"user-guide/feature-guides/ip-address-merge-tool.html#skip-merging-all-duplicate-ip-addresses-presented","title":"Skip Merging All Duplicate IP Addresses Presented","text":"<p>If you decide that these <code>IPAddress</code> objects presented do not need to be merged, you can click on the <code>Skip and Go to the Next Duplicate</code> button to skip merging these <code>IPAddress</code> objects and go to the next set of duplicate <code>IPAddress</code> objects with a different <code>host</code> value.</p> <p></p>"},{"location":"user-guide/feature-guides/ip-address-merge-tool.html#no-more-duplicate-ip-addresses","title":"No more Duplicate IP Addresses","text":"<p>If you have gone through all duplicate <code>IPAddress</code> objects, you will be taken back to the list view of <code>IPAddress</code> objects with a message indicating that <code>No additional duplicate IPs found.</code>.</p> <p></p>"},{"location":"user-guide/feature-guides/relationships.html","title":"Relationships","text":"<p>Relationships are defined between one (or more) objects in your source of truth to reflect business logic or other relationships that may be useful to you but that haven't been defined. Relationships define specific links between objects that might be specific to your network or data.</p> <p>For more technical details on how to use this feature, please see the documentation on Relationships.</p>"},{"location":"user-guide/feature-guides/relationships.html#relationship-details","title":"Relationship details","text":"<p>This table defines repository parameters that are required to establish a relationship.</p> Field Explanation Label Label of the relationship as displayed to users. Key Internal relationship key. Please use underscores rather than dashes. Description (Optional) Meaningful description to provide additional relationship details. Type Cardinality of this relationship. Source type The source object type to which this relationship applies. Source Label (Optional) Label for related destination objects, as displayed on the source object. Source filter (Optional) Filterset filter matching the applicable source objects of the selected type. Destination type The destination object type to which this relationship applies. Destination Label (Optional) Label for related destination objects, as displayed on the destination object. Destination filter (Optional) Filterset filter matching the applicable destination objects of the selected type. <p>Changed in version 2.0.0</p> <p>Relationship model now uses its <code>label</code> attribute (unique for all Relationship instances) exclusively for display purposes in the UI.</p> <p>Relationship's <code>slug</code> attribute was renamed to <code>key</code> (unique for all Relationship instances), which contains a GraphQL-safe string used as the key in the underlying relationship data dictionary.</p> <p>These changes do not require users to do any manual work as they are properly handled by data migrations during the upgrade from Nautobot v1.x to v2.0. If you have duplicate Relationship <code>slug</code> values in your database pre-migration, some of the Relationship <code>key</code> values might altered to ensure that <code>key</code> values for all Relationship instances are unique.</p> <p>As seen in the table above relationships offers many additional optional options for more advanced functionality, those options will be discussed further during this user guide.</p>"},{"location":"user-guide/feature-guides/relationships.html#using-a-relationship","title":"Using a Relationship","text":"<p>This section will focus on examples relationships.</p>"},{"location":"user-guide/feature-guides/relationships.html#adding-a-relationship","title":"Adding a Relationship","text":"<p>To create a relationship, navigate to Extensibility &gt; Data Management &gt; Relationships</p> <p>A simple relationship between <code>Device to VLAN</code> which is a <code>many-to-many</code> relationship. This relationship is <code>many-to-many</code> because more than one Devices can be assigned more than one VLANs. This relationship object is shown below.</p> <p></p>"},{"location":"user-guide/feature-guides/relationships.html#extensibility-of-a-relationship","title":"Extensibility of a Relationship","text":"<p>Now that this relationship is created we can navigate over to a Device detail view and we see <code>VLANs</code> is now listed under the <code>Relationships</code> section.</p> <p></p> <p>What if your business requirements or terminology differs from what you want? For example lets say you want <code>VLANs</code> to be called <code>VIDs</code>, you can simply update the relationship <code>source label</code> field based on your needs.</p> <p>You can see now the relationship name is <code>VIDs</code> instead of <code>VLANs</code>.</p> <p></p> <p>Info</p> <p>In a similar fashion the destination label can be changed to meet business requirements.</p> <p>Business requirements are one concept to take into account when making <code>labels</code>, but making the relationship data more meaningful is an option worth exploring.</p> <p>In the snippet below the source label was updated to <code>Configured VLANs</code>. The result on the device detail view is evident and provides additional context that is otherwise missing. <code>VLANs: 3 VLANs</code> doesn't give the same context as <code>Configured VLANs: 3 VLANs</code>.</p> <p></p> <p>In a similar fashion the destination label can make it move evident that these VLANs are in use on the devices. A destination label <code>In use on devices: 3 devices</code> is far superior to the default of <code>Devices: 3 devices</code>. Providing these labels makes it easier for users of the system to understand the relationships, especially if they weren't the initial implementor of the relationship.</p> <p></p> <p>Next, some of the visibility options will be discussed. The first option to be demonstrated is the ability to <code>Move to Advanced tab</code>. In some cases a particular relationship may not be relevant to the typical user (maybe it's used exclusively in automation) and so you may want the relationship data to be displayed on the <code>Advanced</code> tab instead of within the default detail view of the object.</p> <p>First the option needs to be enabled. </p> <p>Once the option is enabled you will see the relationship is now moved to the <code>Advanced</code> tab.</p> <p></p> <p>Another visibility option is the <code>Hide on Source Object</code> and <code>Hide on Destination Object</code>, these do exactly what you'd expect. If enabled (via checkbox) the relationship will not be displayed on the object under the <code>Relationships</code> section.</p> <p>Info</p> <p>If the <code>Move to Advanced tab</code> and the <code>Hide on Object</code> are both enabled, the <code>Hide on Object</code> takes precedence and the relationship is not shown on the advanced tab.</p> <p>The two options above add flexibility to how the data is visualized within the Nautobot UI, the final option to enhance the relationship feature is the ability to match source or destination objects by providing a filterset.</p> <p>To continue on this example say we want to limit the relationship on the device to be able to only relate VLANs that have specific attributes. Perhaps only VLANs with the role of server and ID of 1000.</p> <p>The filterset below can be used to accomplish this.</p> <p></p> <p>Once this has been applied you can navigate to the Device and attempt to add the relationship. As seen in the screenshot below only <code>VLANs</code> matching the filterset are shown and available to be related.</p> <p></p> <p>As detailed in the extras documentation the API can be used to determine what can be filtered on. Below is a quick example of how to do that.</p>"},{"location":"user-guide/feature-guides/relationships.html#constructing-a-relationship-filter","title":"Constructing a Relationship Filter","text":"<p>The first step is to navigate to the API documentation. This can be done by going to a browser and navigating to <code>https://&lt;server-name&gt;/api/docs</code>.</p> <p>This will load the Swagger documentation, the next step would be to navigate to the endpoint you're trying to filter.</p> <p>Info</p> <p>The easiest way to navigate the Swagger documentation for the necessary endpoint is to search using the content-type defined in your relationship object.</p> <p>In this example the <code>Destination type</code> chosen was <code>ipam | VLAN</code>. We can use that to search in the Swagger docs for <code>ipam/vlans</code>.</p> <p></p> <p>As seen above this endpoint supports all the methods, but if we dig into the <code>GET</code> method we will see the parameters that are available.</p> <p></p> <p>Warn</p> <p>The screenshot above is only a subset of the available filters.</p> <p>Info</p> <p>A great way to test a filterset before applying it to a relationship would be to use the <code>try it out</code> feature from within the API docs page.</p>"},{"location":"user-guide/feature-guides/relationships.html#additional-examples","title":"Additional Examples","text":"<p>Many relationship examples are available on the public sandbox</p> <p>These cover many of the different <code>Types</code> of relationships available in Nautobot.</p>"},{"location":"user-guide/feature-guides/getting-started/index.html","title":"Introduction and Scope","text":"<p>The audience for this user guide is users new to Nautobot. This guide will demonstrate how to use and perform common operations in Nautobot's Web UI.</p> <p>It is intended to assist the user with:</p> <ul> <li>Understanding the prerequisites for adding a new Device</li> <li>Creating the necessary prerequisite objects to add a new Device</li> <li>Adding new Devices</li> <li>Adding and understanding Location Types and Locations</li> <li>Adding and understanding Platforms</li> <li>Adding and understanding Tenants and Tenant Groups</li> <li>Adding Interfaces to a Device</li> <li>Adding VLANs and understanding VLAN Groups</li> <li>Understanding IP Address Management (IPAM) in Nautobot</li> <li>How to navigate to the object you are interested in</li> <li>How to use the Search Bar to find the object you are interested in</li> </ul> <p>This guide does not cover every possible operation in Nautobot's Web UI. However, after reading this guide and working through the included exercises, the user should have a good feel for:</p> <ul> <li>Performing basic tasks</li> <li>How to navigate to a specific object and its related objects</li> <li>The Web UI's general structure and organization</li> <li>Extrapolating to use the Web UI for almost any task</li> </ul>"},{"location":"user-guide/feature-guides/getting-started/index.html#requirements","title":"Requirements","text":"<ol> <li>A functional Nautobot installation</li> </ol>"},{"location":"user-guide/feature-guides/getting-started/creating-devices.html","title":"Creating Devices in Nautobot","text":"<p>Every piece of hardware which is installed within a location or rack exists in Nautobot as a device.</p> <p>More information on Devices can be found in the Devices section of the Nautobot documentation.</p> <p>A network Device in Nautobot has a few required attributes:</p> <ul> <li>A Device Role</li> <li>A Device Type<ul> <li>A Device Type requires a Manufacturer</li> </ul> </li> <li>A Location<ul> <li>A Location requires a Location Type</li> </ul> </li> </ul> <p>Looking at the list above, there are five objects in Nautobot that must be present prior to creating a related Device. The following sections will guide you through how to create each object type.</p>"},{"location":"user-guide/feature-guides/getting-started/creating-devices.html#creating-a-device-role","title":"Creating a Device Role","text":"<p>Devices can be organized by functional roles, which are fully customizable by the user.</p> <p>More information on Device Roles can be found in the Device Roles section of the Nautobot documentation.</p> <p>To create a new Device, you will need an existing Device Role or need to create a new Device Role instance.</p> <p>Note</p> <p>You might create roles for core switches, distribution switches, and access switches within your network.</p> <p>To create a new Device Role:</p> <ol> <li>Click on Devices in the top navigation menu</li> <li>Find Device Roles on the drop-down menu</li> <li>Select <code>+</code></li> <li>In the <code>Add a new device role</code> form, populate the <code>Name</code></li> <li>Click on Create</li> </ol> <p></p>"},{"location":"user-guide/feature-guides/getting-started/creating-devices.html#creating-a-manufacturer","title":"Creating a Manufacturer","text":"<p>A Manufacturer represents the \"make\" of a device; e.g. Cisco or Dell. Each device type must be assigned to a manufacturer.</p> <p>More information on Manufacturers is in the Manufacturers section of the Nautobot documentation.</p> <p>To create a new Device Type, you will need an existing Manufacturer or need to create a new Manufacturer instance.</p> <p>To create a new Manufacturer:</p> <ol> <li>Click on Devices in the top navigation menu</li> <li>Find Manufacturers on the drop-down</li> <li>Select +</li> <li>In the <code>Add a new manufacturer</code> form, populate the <code>Name</code></li> <li>Click on <code>Create</code></li> </ol> <p></p>"},{"location":"user-guide/feature-guides/getting-started/creating-devices.html#creating-a-device-type","title":"Creating a Device Type","text":"<p>A device type represents a particular make and model of hardware that exists in the real world. Device types define the physical attributes of a device (rack height and depth) and its individual components (console, power, network interfaces, and so on).</p> <p>More information on Device Types is in the Device Types section of the Nautobot documentation.</p> <p>To create a new Device, you will need an existing Device Type or need to create a new Device Type instance.</p> <p>To create a new Device Type:</p> <ol> <li>Click on Devices in the top navigation menu</li> <li>Find Device Types</li> <li>Select + to go to the <code>Add a new device type</code> form</li> <li>Select the <code>Manufacturer</code> from the drop-down selector</li> <li>Populate the <code>Model</code> (name)</li> <li>Click on <code>Create</code></li> </ol> <p></p>"},{"location":"user-guide/feature-guides/getting-started/creating-devices.html#creating-a-location-type","title":"Creating a Location Type","text":"<p>To create a location, you need to specify a Location Type for the location. The Location Type(s) that you define for your network may vary depending on the nature of your organization and its needs, but might include for example \"region\", \"city\", \"site\", \"building\" and/or \"room\". Take some time to think about this before you begin entering data as it will be a fundamental aspect of how you record your network in Nautobot.</p> <p>More information on Location Type is found in the Locations section of the Nautobot documentation.</p> <p>To create a new Location Type:</p> <ol> <li>Click on Organization in the top navigation menu</li> <li>Find LocationTypes</li> <li>Select + to go to the <code>Add a new location type</code> form</li> <li>Select a <code>Parent</code> LocationType if needed</li> <li>Populate the LocationType's <code>Name</code></li> <li>Select the desired <code>ContentTypes</code> for this LocationType (in this case <code>dcim.device</code>).</li> <li>Click on <code>Create</code> at the bottom of the form</li> </ol> <p></p>"},{"location":"user-guide/feature-guides/getting-started/creating-devices.html#creating-a-location","title":"Creating a Location","text":"<p>Once you've established your hierarchy of Location Types, you can begin to create the actual Locations of these types. You generally will start with the most general Locations (for example, if your base Location Type is \"Region\", you might create an \"Americas\" location of this type) and work your way down to the most specific Locations (for example, \"Room 100 in the Headquarters building\").</p> <p>More information on Locations is found in the Locations section of the Nautobot documentation.</p> <p>To create a new Device, you will need an existing Location or need to create a new Location instance.</p> <p>To create a new Location:</p> <ol> <li>Click on Organization in the top navigation menu</li> <li>Find Locations</li> <li>Select + to go to the <code>Add a new location</code> form</li> <li>Select a <code>LocationType</code></li> <li>Select a <code>Parent</code> Location if needed</li> <li>Populate the Location's <code>Name</code></li> <li>Set the <code>Status</code> to <code>Active</code> in the drop-down selector</li> <li>Click on <code>Create</code> at the bottom of the form (not shown)</li> </ol> <p></p>"},{"location":"user-guide/feature-guides/getting-started/creating-devices.html#creating-a-device","title":"Creating a Device","text":"<p>To create a new Device:</p> <ol> <li>Click on Devices in the top navigation menu</li> <li>Find Devices</li> <li>Select + to go to the <code>Add a new device</code> form</li> <li>Populate the <code>Name</code></li> <li>Select the <code>Role</code> from the drop-down selector</li> <li>Select the <code>Device Type</code> from the down-down selector</li> <li>Select the <code>Location</code> from the drop-down selector</li> <li>Set the <code>Status</code> to the appropriate value in the drop-down selector</li> <li>Click on <code>Create</code> at the bottom of the form (not shown)</li> </ol> <p></p>"},{"location":"user-guide/feature-guides/getting-started/creating-location-types-and-locations.html","title":"Location Types and Locations","text":"<p>Location Types describe the hierarchical nature of your organization's infrastructure and is used to organize Locations. They can be nested recursively. A Location Type might represent a continent, country, city, campus, or other area.</p> <p>Locations retain hierarchical nature of Location Types but are more specific. For example, a Location of Location Type continent could be Asia, Europe, Americas and etc. or a Location of Location type city could be London, Tokyo, Manhattan and etc.</p> <p>Additional information on Location Types is in the Location Type section of the Nautobot documentation. Additional information on Locations is in the Location section of the Nautobot documentation.</p> <p>In the following exercise, we will create three Location Types and their corresponding locations:</p> <p>Location Types:</p> <ul> <li>Continent<ul> <li>Intended to hold Locations that represent Countries in North America</li> </ul> </li> <li>Country<ul> <li>Intended to hold Locations that represent Markets in Canada</li> </ul> </li> <li>Market<ul> <li>Intended to hold Locations that represent Sites in the Vancouver Market</li> </ul> </li> <li>Site<ul> <li>Intended to represent Site Location Type Locations</li> </ul> </li> </ul> <p>Locations:</p> <ul> <li>North America<ul> <li>A location of Location Type Continent</li> </ul> </li> <li>Canada<ul> <li>A location of Location Type Country exists within North America</li> </ul> </li> <li>Vancouver<ul> <li>A location of Location Type Market exists within Canada</li> </ul> </li> <li>Vancouver 1<ul> <li>A location of Location Type Site exists within Vancouver</li> </ul> </li> </ul>"},{"location":"user-guide/feature-guides/getting-started/creating-location-types-and-locations.html#creating-location-types-and-locations","title":"Creating Location Types and Locations","text":"<p>To create a Location Type:</p> <ol> <li>Click on Organization in the top menu</li> <li>Click on Location Types in the Organization drop-down menu<ul> <li>From this page you can view any existing Location Types</li> </ul> </li> <li>Click on the blue <code>+ Add</code> button</li> </ol> <p></p> <p>The screenshots below show the creation of each Location Type.</p> <p>Continent:</p> <ol> <li>Leave the <code>Parent</code> blank; Continent will be a top-tier Location Type</li> <li>Populate the <code>Name</code> to be <code>Continent</code></li> <li>Click on the <code>Create and Add Another</code> button</li> </ol> <p>Country:</p> <ol> <li>Select Continent as the <code>Parent</code> from the drop-down menu selector</li> <li>Populate the <code>Name</code> to be <code>Country</code></li> <li>Click on the <code>Create and Add Another</code> button</li> </ol> <p>Market:</p> <ol> <li>Select Country as the <code>Parent</code> from the drop-down menu selector</li> <li>Populate the <code>Name</code> to be <code>Market</code></li> <li>Click on the <code>Create and Add Another</code> button</li> </ol> <p>Site:</p> <ol> <li>Select Market as the <code>Parent</code> from the drop-down menu selector</li> <li>Populate the <code>Name</code> to be <code>Site</code></li> <li>Click on the <code>Create</code> button</li> </ol> <p></p> <p>To create a Location of a certain Location Type:</p> <ol> <li>Click on Organization in the top menu</li> <li>Click on Locations in the Organization drop-down menu<ul> <li>From this page you can view any existing Locations</li> </ul> </li> <li>Click on the blue <code>+ Add</code> button</li> </ol> <p></p> <p>The screenshots below show the creation of each Location.</p> <p>North America:</p> <ol> <li>Leave the <code>Parent</code> blank; North America will be a top-tier Location</li> <li>Select Continent from the Location Type drop-down menu selector</li> <li>Populate the <code>Name</code> to be <code>North America</code></li> <li>Click on the <code>Create and Add Another</code> button</li> </ol> <p>Canada:</p> <ol> <li>Select Country from the Location Type drop-down menu selector</li> <li>Select North America as the <code>Parent</code> from the drop-down menu selector</li> <li>Populate the <code>Name</code> to be <code>Canada</code></li> <li>Click on the <code>Create and Add Another</code> button</li> </ol> <p>Vancouver:</p> <ol> <li>Select Market from the Location Type drop-down menu selector</li> <li>Select Canada as the <code>Parent</code> from the drop-down menu selector</li> <li>Populate the <code>Name</code> to be <code>Vancouver</code></li> <li>Click on the <code>Create and Add Another</code> button</li> </ol> <p>Vancouver 1:</p> <ol> <li>Select Site from the Location Type drop-down menu selector</li> <li>Select Vancouver as the <code>Parent</code> from the drop-down menu selector</li> <li>Populate the <code>Name</code> to be <code>Vancouver 1</code></li> <li>Click on the <code>Create</code> button</li> </ol> <p></p>"},{"location":"user-guide/feature-guides/getting-started/interfaces.html","title":"Interfaces","text":"<p>Interfaces in Nautobot represent network interfaces used to exchange data with connected devices.</p> <p>More information on Interfaces is in the Interfaces section of the Nautobot documentation.</p> <p>Interfaces can be added at the Device or the Device Type level:</p> <ul> <li>Interfaces added to an individual Device are for that Device only</li> <li>Interfaces added to the Device Type will be applied to all NEW implementations of that Device Type (not existing implementations)</li> </ul> <p>Which one you select depends on your use case; in some instances you will need to use both, as in the example below.</p>"},{"location":"user-guide/feature-guides/getting-started/interfaces.html#interface-add-example","title":"Interface Add Example","text":"<p>Let\u2019s take an example:</p> <ul> <li>We want to define a Device Type of <code>MX240-edge</code></li> <li>This Device Type will have 20x 10G (<code>xe-[0-1]/0/[0-9]</code>) Interfaces and one LAG (<code>ae0</code>) Interface</li> <li>The <code>xe-0/0/9</code> and <code>xe-1/0/9</code> Interfaces will be members of the <code>ae0</code> Interface</li> </ul>"},{"location":"user-guide/feature-guides/getting-started/interfaces.html#creating-a-device-type","title":"Creating a Device Type","text":"<p>We are going to use the Device Type to achieve part of this goal. Using the Device Type will also provide repeatability because the Device Type object also serves as a template. This templating feature is demonstrated in this example.</p> <p>Device Types can serve as templates for Devices, and as such the two are very similar. Here is a screenshot of a Device Type:</p> <p></p> <p>Creating a Device Type is very similar to creating a Device.</p> <p>To create a Device Type:</p> <ol> <li>Click on Devices in the top navigation menu</li> <li>Click on the Device Types option in the drop-down menu</li> <li>On the Device Types page <code>Add +</code> a new Device Type<ul> <li>A Device Type requires a Manufacturer object to be created prior to creating the Device Type</li> <li>Device Type requires Manufacturer, Model, and Height values at creation</li> <li>In this example, name the Device Type <code>MX240-edge</code></li> </ul> </li> <li>On the home page for the specific Device Type, click on <code>+Add Components</code> and select <code>Interfaces</code></li> </ol> <p></p> <p>You will now see the <code>Interface Template</code> form:</p> <ol> <li>Add the <code>ae0</code> Interface Template<ul> <li><code>Manufacturer</code> will auto-populate to the Manufacturer of the Device Type you are editing</li> <li><code>Device Type</code> will auto-populate to the Device Type you are editing</li> <li>Populate a <code>Name</code></li> <li>Select a <code>Type</code> of <code>Link Aggregation Group (LAG)</code> from the drop-down selector</li> <li>Add a <code>Description</code> and <code>Label</code> (optional)</li> </ul> </li> <li>Click <code>Create and Add More</code></li> <li>Create the <code>xe-</code> Interfaces<ul> <li>This example shows bulk creation using a range (<code>xe-[0-1]/0/[0-9]</code>) in <code>Name</code></li> <li>Select the appropriate Type from the drop-down selector</li> </ul> </li> <li>Click on <code>Create</code></li> </ol> <p></p> <p>Clicking the <code>Create</code> button will take you back to the home screen for the Device Type you are editing. There, you will see that the Interfaces tab now has the expected 21 Interfaces listed.</p> <p></p> <p>Note</p> <p>As of this writing (Nautobot 1.0.3), Interfaces cannot be assigned in to a LAG in the Device Type template; component Interfaces must be designated in the specific instantiation of a Device created from the Device Type.</p>"},{"location":"user-guide/feature-guides/getting-started/interfaces.html#creating-a-new-device-using-the-device-type","title":"Creating a New Device Using the Device Type","text":"<p>Create a new Device with these attributes:</p> <ul> <li>Name = <code>edge2.van1</code></li> <li>Device role select <code>Customer Edge</code></li> <li>Device type select <code>Juniper MX240-edge</code> (this will show up as a fusion of the Manufacturer (<code>Juniper</code>) for the Device Type and the Device Type (<code>MX240-edge</code>) Names)</li> <li>Location select <code>Vancouver 1</code></li> </ul> <p>On the main screen for the new Device, you will see an Interfaces tab with the expected Interfaces from the Device Type template:</p> <p></p> <p>Note</p> <p>Device Type properties only apply to new instantiations of Devices from the Type; Devices created prior to a modification of the Device Type will not inherit the changes retroactively</p>"},{"location":"user-guide/feature-guides/getting-started/interfaces.html#specifying-the-lag-components-on-the-device","title":"Specifying the LAG Components on the Device","text":"<p>As of this writing (Nautobot 1.0.3), LAG component Interfaces cannot be assigned in the Device Type template, so we will edit this new Device, specifying the component <code>ae0</code> Interfaces.</p> <ol> <li>On the new Device's main page, select the appropriate Interfaces (<code>xe-0/0/9</code> and <code>xe-1/0/9</code>) to be added to <code>ae0</code> and click on the <code>Edit</code> button</li> <li>On the <code>Editing Interfaces</code> form, select <code>ae0</code> in the <code>Parent LAG</code> drop-down selector</li> <li>Click on <code>Apply</code>; you will be taken back to the main page for the Device</li> </ol> <p></p> <p>On the Device's main page, notice that <code>xe-0/0/9</code> and <code>xe-1/0/9</code> are now assigned to the <code>ae0</code> LAG:</p> <p></p>"},{"location":"user-guide/feature-guides/getting-started/ipam.html","title":"IP Address Management","text":"<p>This next section will demonstrate how to:</p> <ul> <li>Create a Regional Internet Registry</li> <li>Create a Prefix</li> <li>Create assignable IP addresses</li> <li>Assign an IP address to an Interface on a Device</li> </ul> <p>These type of operations fall under an umbrella called IP Address Management (IPAM).</p>"},{"location":"user-guide/feature-guides/getting-started/ipam.html#creating-a-regional-internet-registry-rir","title":"Creating a Regional Internet Registry (RIR)","text":"<p>A RIR allocates globally-routeable IP address space. There are five top-level RIRs, each responsible for a particular section of the globe. Nautobot also considers RFCs 1918 and 6589 to be RIR-like because they allocate private IP space.</p> <p>Nautobot requires any IP allocation be attributed to a RIR.</p> <p>To create a RIR:</p> <ol> <li>Click on IPAM in the top-level navigation menu</li> <li>Find RIRs and click on the +; this takes you to the <code>Add a new RIR</code> form</li> <li>Specify the RIR <code>Name</code></li> <li>There is a checkbox to flag <code>Private</code> (internal use) only</li> <li>Click on the <code>Create</code> button</li> </ol> <p></p>"},{"location":"user-guide/feature-guides/getting-started/ipam.html#creating-a-prefix","title":"Creating a Prefix","text":"<p>A Prefix is an IPv4 or IPv6 network and mask expressed in CIDR notation (e.g. 192.0.2.0/24). Each Prefix can be assigned to a particular Location, an RIR and virtual routing and forwarding (VRF) instance.</p> <p>To create a prefix:</p> <ol> <li>Click on IPAM in the top-level navigation menu</li> <li>Look for Prefixes and click on the +<ul> <li>This will take you to the <code>Add a new prefix</code> form</li> </ul> </li> <li>Populate the <code>Prefix</code> in CIDR notation</li> <li>If all addresses in the Prefix are usable, change the type to \"Pool\"</li> <li>Select a <code>Status</code> from the drop-down selector</li> <li>Optionally select a <code>RIR</code> from the drop-down selector</li> <li>Click on the <code>Create</code> button (not shown)</li> </ol> <p></p>"},{"location":"user-guide/feature-guides/getting-started/ipam.html#creating-ip-addresses","title":"Creating IP Addresses","text":"<p>To create an IP address:</p> <ol> <li>Click on IPAM in the top-level navigation menu</li> <li>Find IP Addresses and click on the +<ul> <li>This will take you to the <code>Add a new IP address</code> form</li> </ul> </li> <li>In this example, we are going to create multiple individual addresses, so click on the <code>Bulk Create</code> tab</li> <li>Populate an Address pattern<ul> <li>This example uses <code>10.10.10.[0-1,2-3,6-7]/31</code> to create 3 non-contiguous /31's</li> <li>The specified mask should be exactly as would be configured on the Device's Interface</li> </ul> </li> <li>Select <code>Active</code> for <code>Status</code> from the drop-down selector</li> <li>Click on the <code>Create</code> button</li> </ol> <p></p>"},{"location":"user-guide/feature-guides/getting-started/ipam.html#assigning-ip-addresses","title":"Assigning IP Addresses","text":"<p>To assign an IP Address to a specific Device and Interface:</p> <ol> <li>Click on IPAM in the top-level navigation menu</li> <li>Click on IP Addresses to go to the main IP Addresses page</li> <li>Find the IP address you wish to assign to an Interface and click on it</li> <li>On the main page for the Address, click on the <code>Edit</code> button to go to the <code>Editing IP address</code> page </li> </ol> <p></p> <p>Once on the <code>Editing IP address</code> page:</p> <ol> <li>Select a <code>Device</code> from the drop-down selector</li> <li>Select an <code>Interface</code> on the Device</li> <li>Click on the <code>Update</code> button<ul> <li>This will take you back to the main page for the IP Address, where you will see the assignment shown as <code>device (interface)</code></li> </ul> </li> </ol> <p></p>"},{"location":"user-guide/feature-guides/getting-started/ipam.html#finding-an-ip-address-for-an-interface","title":"Finding an IP Address for an Interface","text":"<ol> <li>Click on Devices on the top-level navigation menu</li> <li>Click on Devices to go to the main page for Devices</li> <li>Search for the Device you are interested in (<code>edge2.van1</code> in this example) and click on the link to go to the main page for the Device</li> <li>Go to the <code>Interfaces</code> tab and look for the row with the Interface you are interested in; find the IP Address(es) in the IP Addresses column in the row</li> </ol>"},{"location":"user-guide/feature-guides/getting-started/ipam.html#finding-ip-addresses-in-a-prefix","title":"Finding IP Addresses in a Prefix","text":"<p>To find information on a particular Prefix:</p> <ol> <li>Click on IPAM in the top-level drop-down menu</li> <li>Click on Prefixes to get to the Prefixes main page</li> <li>Find the Prefix you are interested in and click on the link</li> <li>To view the available and allocated IP Addresses, click on the <code>IP Addresses</code> tab</li> </ol> <p></p> <p></p>"},{"location":"user-guide/feature-guides/getting-started/platforms.html","title":"Platforms","text":"<p>A Platform object can hold various information about a device, such as the OS, OS version, and NAPALM driver.</p> <p>Further information is available in the Platforms section of the Nautobot docs.</p> <p>While use of Platforms is optional, they provide great value in many use cases.</p>"},{"location":"user-guide/feature-guides/getting-started/platforms.html#creating-a-platform","title":"Creating a Platform","text":"<p>To create a Platform:</p> <ol> <li>Click on Devices in the top navigation menu</li> <li>Find Platforms and click on the + icon in the menu<ul> <li>This takes you to the <code>Add a new platform</code> form</li> </ul> </li> <li>Provide a <code>Name</code> (required)</li> <li>Select a <code>Manufacturer</code> from the drop-down selector (optional)</li> <li>Provide the name of the <code>NAPALM driver</code> (optional) (Note: this must be the exact name of the NAPALM driver)</li> <li>Provide <code>NAPALM arguments</code> (optional)</li> <li>Provide <code>Description</code> (optional)</li> <li>Click on the <code>Create</code> button</li> </ol> <p>Tip</p> <p>NAPALM Driver Options include:</p> <ul> <li>eos (Arista)</li> <li>ios (Cisco)</li> <li>nxos (used with <code>nxapi</code> feature)</li> <li>nxos_ssh (used for ssh login)</li> <li>junos</li> </ul> <p></p> <p>Once completed, you will be sent to the Platforms page, where all the Platform variants are shown.</p> <p>Tip</p> <p>Different use cases for Platforms may require different information. For example, to use a specific Platform with the Device Onboarding Plugin, you may be required to override the default Name value with that of the Netmiko device_type</p> <p></p>"},{"location":"user-guide/feature-guides/getting-started/platforms.html#adding-a-platform-to-an-existing-or-new-device","title":"Adding a Platform to an Existing or New Device","text":"<p>The Platform attribute is optional for a Device.</p> <p>It is quite easy to add a Platform to an existing Device or while creating a new Device.</p> <p>A Device's <code>Platform</code> is specified on the <code>Add a new device</code> or <code>Editing device</code> page, depending on whether you are adding or editing a Device.</p>"},{"location":"user-guide/feature-guides/getting-started/platforms.html#reaching-the-editing-device-page-for-an-existing-device","title":"Reaching the <code>Editing device</code> page for an Existing Device","text":"<p>The quickest way to reach the <code>Editing device</code> page for a Device is to search for the Device name in the Search Bar.</p> <p>Tip</p> <p>See the Search Bar section of this guide for more information on using the Search Bar</p> <ol> <li>Type the device name in the Search Bar in the upper-right of the page</li> <li>Click on the device name on the results page</li> <li>Click on the <code>Edit</code> button on the main page for the Device</li> </ol> <p></p>"},{"location":"user-guide/feature-guides/getting-started/platforms.html#reaching-the-add-a-new-device-page","title":"Reaching the <code>Add a new device</code> Page","text":"<p>For a new Device, follow the steps to create a new Device to reach the <code>Add a new device</code> page.</p>"},{"location":"user-guide/feature-guides/getting-started/platforms.html#specifying-the-devices-platform","title":"Specifying the Device's Platform","text":"<ol> <li>While on the Add a new device/Editing device page, scroll down to the 'Management' section</li> <li>In the <code>Platform</code> field drop-down selector, select the appropriate Platform</li> <li>Click the 'Update' (edit Device) or <code>Create</code> (add Device) button</li> </ol> <p>Tip</p> <p>The only choices that will appear in the <code>Platform</code> drop-down selector will be those Platforms that have the same Manufacturer specified in the Device's <code>Hardware</code> section.</p> <p></p>"},{"location":"user-guide/feature-guides/getting-started/search-bar.html","title":"The Search Bar","text":"<p>The exercises in the prior sections in this Getting Started Guide walked you through how to navigate to the proper objects.</p> <p>You can also use the Search Bar to find desired objects with either partial or complete alpha/numeric characters or exact UUID.</p> <p>We will show two quick examples.</p> <p>Example one:</p> <ol> <li>Type in <code>10.10.10.0</code> in the Search Bar and click on <code>Search</code><ul> <li>This takes you to a search results page</li> </ul> </li> <li>Prefix search result <code>10.10.10.0/24</code></li> <li>IP Address search result <code>10.10.10.0/31</code></li> <li>Interface related to <code>10.10.10.0/31</code></li> <li>Interface Parent (Device) for <code>10.10.10.0/31</code></li> </ol> <p>Clicking on any of these objects takes you to the main page for that object. This example shows the result of clicking on the IP Address object (4).</p> <p></p> <p>Example two shows a Device-specific search:</p> <ol> <li>Search for <code>edge</code><ul> <li>This takes you to a search results page</li> </ul> </li> <li>In the drop-down selector to the right, select <code>Devices</code></li> <li>Search results for Devices with <code>edge</code> in the name</li> <li>Tenants for each Device (if applicable)</li> <li>Device Type for each Device</li> <li>Location for each Device</li> </ol> <p>Clicking on an of the links for the results takes you to the main page for that object. For example:</p> <ul> <li>Clicking on the <code>Vancouver 1</code> Location takes you to the main page for the Location.</li> <li>Clicking on the <code>edge2.van1</code> Device takes you to the main page for the Device</li> </ul> <p></p> <p>END OF Getting Started in the Web UI GUIDE</p>"},{"location":"user-guide/feature-guides/getting-started/tenants.html","title":"Tenants","text":"<p>A 'Tenant' signifies ownership of an object in Nautobot and as such, any object may only have a single Tenant assigned.</p> <p>More information on Tenants can be found in the Tenants section of the Nautobot docs.</p>"},{"location":"user-guide/feature-guides/getting-started/tenants.html#creating-a-tenant","title":"Creating a Tenant","text":"<p>To create a Tenant:</p> <ol> <li>Click on Organization on the top navigation menu</li> <li>Find Tenants and click on the <code>+</code></li> <li>Populate the <code>Name</code> field</li> <li>Click the <code>Create</code> button</li> </ol> <p></p>"},{"location":"user-guide/feature-guides/getting-started/tenants.html#assigning-a-tenant-to-an-object","title":"Assigning a Tenant to an Object","text":"<p>It is simple to assign a Tenant to an existing object. This next example will add a Tenant to an existing Device.</p> <ol> <li>Click on Devices in the top navigation menu</li> <li>Look for the Devices option and click on it<ul> <li>This will take you to the Devices page</li> </ul> </li> <li>Click on the specific Device you want to add the Tenant to<ul> <li>This will take you to the main page for that Device</li> </ul> </li> <li>On the specific Device page, click on the <code>Edit</code> button</li> </ol> <p></p> <p>Once on the page to edit the Device:</p> <ol> <li>Make a selection from the <code>Tenant</code> drop-down menu selector</li> <li>Click the <code>Update</code> button</li> </ol> <p>This will take you back to the main page for the Device.</p> <p></p> <p>Notice that the <code>Tenant</code> field is now populated/updated.</p>"},{"location":"user-guide/feature-guides/getting-started/vlans-and-vlan-groups.html","title":"VLANS and VLAN Groups","text":"<p>Each VLAN may be assigned to a location, tenant, and/or VLAN group.</p> <p>Each VLAN must be assigned a status. The following statuses are available by default:</p> <ul> <li>Active</li> <li>Reserved</li> <li>Deprecated</li> </ul> <p>In general, VLANs can have overlapping names and IDs. The exception to this is VLANs within a VLAN Group: each VLAN within a group must have a unique ID and name. A VLAN Group may be assigned to a specific location, but a Group cannot belong to multiple locations. VLANs may be assigned to a specific location as well.</p> <p>The Nautobot documentation has more info about VLANs and VLAN Groups.</p>"},{"location":"user-guide/feature-guides/getting-started/vlans-and-vlan-groups.html#vlan-example","title":"VLAN Example","text":"<p>The following example will show:</p> <ul> <li>Creating a <code>vlan 200</code> without a location assignment (global scope)</li> <li>Creating two VLANs, each with overlapping Names and IDs: ID = <code>100</code> and Name = <code>vlan 100</code><ul> <li>Neither of the <code>vlan 100</code> instances will be assigned to a group, but each of the VLANs will be assigned to a different location (location-specific scope)</li> </ul> </li> <li>How the location-specific and global scopes affect which VLANs can be assigned on which Devices</li> </ul> <p>Note</p> <p>This example will require a Location (<code>Ottawa 1</code>) within a Parent Location (<code>Ottawa</code>) in the <code>North America</code> Parent Location in addition to the <code>Vancouver 1</code> Location and <code>Vancouver</code> Parent Location created prior. Refer back to the Create a Loaction sections to do so.</p>"},{"location":"user-guide/feature-guides/getting-started/vlans-and-vlan-groups.html#creating-the-vlans","title":"Creating the VLANs","text":"<ol> <li>Click on IPAM in the top navigation menu</li> <li>Look for the VLANS option and click on the + to go to the <code>Add a new VLAN</code> form</li> <li>Populate <code>ID</code> with <code>200</code></li> <li>Populate <code>Name</code> with <code>vlan 200</code></li> <li>Select <code>Status</code> as <code>Active</code></li> <li>Click on <code>Create and Add Another</code> to save; you will then be taken to the <code>Add a new VLAN</code> form</li> </ol> <p>Note</p> <p>The required parameters to create a new VLAN are bolded in the <code>Add a new VLAN</code> form: ID, Name, and Status</p> <p></p> <p>Now we'll create two instances of VLANs, each with ID = <code>100</code> and Name = <code>vlan 100</code> and an <code>Active</code> Status. The differentiator will be that one instance will be assigned to the <code>Vancouver 1</code> Site and the other to the <code>Ottawa 1</code> Site.</p> <p>On the <code>Add a new VLAN</code> form:</p> <ol> <li>Populate <code>ID</code> with <code>100</code></li> <li>Populate <code>Name</code> with <code>vlan 100</code></li> <li>Select <code>Status</code> as <code>Active</code></li> <li>Select <code>Vancouver 1</code> from the <code>Location</code> selector drop-down</li> <li>Click on the <code>Create and Add Another</code> button</li> </ol> <p>On the <code>Add a new VLAN</code> form:</p> <ol> <li>Populate <code>ID</code> with <code>100</code></li> <li>Populate <code>Name</code> with <code>vlan 100</code></li> <li>Select <code>Status</code> as <code>Active</code></li> <li>Select <code>Ottawa 1</code> from the <code>Location</code> selector drop-down</li> <li>Click on the <code>Create</code> button when complete with the second instance</li> </ol> <p></p> <p>Once you've created the three VLANs and then hit the <code>Create</code> button, you will be taken to the VLANs main page. On that page, you'll see the three VLANs and the Location assignment for each one. Each <code>vlan 100</code> instance will have a Location assignment, while <code>vlan 200</code> will not:</p> <p></p>"},{"location":"user-guide/feature-guides/getting-started/vlans-and-vlan-groups.html#assigning-vlans-to-an-interface","title":"Assigning VLANs to an Interface","text":"<p>To assign a VLAN to an Interface:</p> <ol> <li>Click on IPAM on the top-level navigation menu</li> <li>Select Devices to go to the Devices main page</li> <li>Click on the name of the Device you wish to add a VLAN to (<code>edge2.van1</code>) in this example</li> <li>Click on the <code>Edit</code> button for the <code>xe-0/0/0</code> Interface to go to the <code>Editing interface xe-0/0/0</code> page</li> <li>On the <code>Editing interface xe-0/0/0</code> page, set <code>802.1Q</code> Mode to <code>Access</code> (or whatever mode you need) and then click on the VLAN drop-down selector. Notice that there are two choices:<ul> <li>One choice is the <code>vlan 100</code> instance specifically assigned to the <code>Vancouver 1</code> Location</li> <li>The other choice is <code>vlan 200</code>, which was not assigned to a Location, and thus has a global scope</li> </ul> </li> </ol> <p></p> <p>Note</p> <p>The <code>vlan 100</code> instance that is assigned to the <code>Ottawa 1</code> Location does not show up as an option for the <code>Vancouver1</code> Location</p> <p></p>"},{"location":"user-guide/platform-functionality/change-logging.html","title":"Change Logging","text":"<p>Every time an object in Nautobot is created, updated, or deleted, a serialized copy of that object is saved to the database, along with meta data including the current time and the user associated with the change. These records form a persistent record of changes both for each individual object as well as Nautobot as a whole. The global change log can be viewed by navigating to Extensibility &gt; Logging &gt; Change Log.</p> <p>A serialized representation of the instance being modified is included in JSON format. This is similar to how objects are conveyed within the REST API.</p> <p>When a request is made, a UUID is generated and attached to any change records resulting from that request. For example, editing three objects in bulk will create a separate change record for each  (three in total), and each of those objects will be associated with the same UUID. This makes it easy to identify all the change records resulting from a particular request.</p> <p>Change records are exposed in the API via the read-only endpoint <code>/api/extras/object-changes/</code>. They may also be exported via the web UI in CSV format.</p> <p>Change records can also be accessed via the read-only GraphQL endpoint <code>/api/graphql/</code>. An example query to fetch change logs by action:</p> <pre><code>{ query: object_changes(action: \"created\") {\naction\nuser_name\nobject_repr\n}\n}\n</code></pre>"},{"location":"user-guide/platform-functionality/computedfield.html","title":"Computed Fields","text":"<p>Added in version 1.1.0</p> <p>Computed fields are very similar in design and implementation to custom fields. See the overview of Custom Fields. As the name suggests, computed fields serve the need for a custom field where the value is generated using data that Nautobot stores in its database and merging it into a Jinja2 template and associated filters.</p> <p>As an example, within your automation system, you may want to be able to have an automatically generated field on the Device model that combines the name of the device and the location name in uppercase. To do that, you would define a Jinja2 template for this field that looks like such:</p> <pre><code>{{ obj.name }}_{{ obj.location.name | upper }}\n</code></pre> <p>Important</p> <p>Every time an object with this computed field is loaded, the template gets re-rendered with the currently available data. These rendered values are not stored in the database; only the Jinja2 template is stored.</p> <p>Changed in version 2.0.0</p> <p>Computed field model's <code>label</code> attribute will be used exclusively for display purposes in the UI.</p> <p>Computed field model's <code>slug</code> attribute was renamed to <code>key</code> (unique for all Computed Field instances), which contains a GraphQL-safe string to be used in the API and GraphQL.</p> <p>These changes do not require users to do any manual work as they are properly handled by data migrations during the upgrade from Nautobot v1.x to v2.0.</p>"},{"location":"user-guide/platform-functionality/computedfield.html#creating-computed-fields","title":"Creating Computed Fields","text":"<p>Computed fields can be created through the Nautobot UI under Extensibility &gt; Computed Fields.</p> <p>Each computed field must have a key and a label.</p> <ul> <li>Key must be a simple, database-friendly string, e.g. <code>device_with_location</code></li> <li>Label is used as the human-friendly display name for this field in the UI, for example, <code>Device With Location</code>.</li> </ul> <p>Tip</p> <p>Because computed field data can be included in the REST API and in GraphQL, we strongly recommend that when defining a computed field, you provide a key that contains underscores rather than dashes (<code>my_field_key</code>, not <code>my-field-key</code>), as some features may not work optimally if dashes are included in the key.</p> <p>Similar to custom fields, the weight value is used to order computed fields within a form. A description can also be provided, and will appear beneath the field in a form.</p> <p>Computed fields must define a template from which to render their values. The template field must contain a valid Jinja2 template string.</p> <p>A computed field must be assigned to an object type, or model, in Nautobot. Once created, a computed field will automatically appear as part of this model's display. See notes about viewing computed fields via the REST API below.</p> <p>When creating a computed field, if \"Move to Advanced tab\" is checked, this computed field won't appear on the object's main detail tab in the UI, but will appear in the \"Advanced\" tab. This is useful when the requirement is to hide this field from the main detail tab when, for instance, it is only required for machine-to-machine communication and not user consumption.</p>"},{"location":"user-guide/platform-functionality/computedfield.html#computed-field-template-context","title":"Computed Field Template Context","text":"<p>Computed field templates can utilize the context of the object the field is being rendered on. This context is available for use in templates via the <code>obj</code> keyword. As an example, for a computed field being rendered on a Device object, the name of the location that this Device belongs to can be accessed like this:</p> <pre><code>{{ obj.location.name }}\n</code></pre> <p>Note</p> <p>To access custom fields of an object within a template, use the <code>cf</code> attribute. For example, <code>{{ obj.cf.color }}</code> will return the value (if any) for the custom field with a key of <code>color</code> on <code>obj</code>.</p>"},{"location":"user-guide/platform-functionality/computedfield.html#computed-field-template-filters","title":"Computed Field Template Filters","text":"<p>Computed field templates can also utilize built-in Jinja2 filters or custom ones that have been registered via plugins. These filters can be used by providing the name of the filter function. As an example:</p> <pre><code>{{ obj.location.name | leet_speak }}\n</code></pre> <p>See the documentation on built-in filters or registering custom Jinja2 filters in plugins.</p>"},{"location":"user-guide/platform-functionality/computedfield.html#computed-fields-and-the-rest-api","title":"Computed Fields and the REST API","text":"<p>When retrieving an object via the REST API, computed field data is not included by default in order to prevent potentially computationally expensive rendering operations that degrade the user experience. In order to retrieve computed field data, you must use the <code>include</code> query parameter.</p> <p>Take a look at an example URL that includes computed field data:</p> <pre><code>http://localhost:8080/api/dcim/locations?include=computed_fields\n</code></pre> <p>When explicitly requested as such, computed field data will be included in the <code>computed_fields</code> attribute. For example, below is the partial output of a location with one computed field defined:</p> <pre><code>{\n\"id\": 123,\n\"url\": \"http://localhost:8080/api/dcim/locations/123/\",\n\"name\": \"Raleigh 42\",\n...\n\"computed_fields\": {\n\"location_name_uppercase\": \"RALEIGH\"\n},\n...\n</code></pre> <p>Note</p> <p>The <code>key</code> value of each computed field is used as the key name for items in the <code>computed_fields</code> attribute.</p>"},{"location":"user-guide/platform-functionality/customfield.html","title":"Custom Fields","text":"<p>Each model in Nautobot is represented in the database as a discrete table, and each attribute of a model exists as a column within its table. For example, locations are stored in the <code>dcim_location</code> table, which has columns named <code>name</code>, <code>facility</code>, <code>physical_address</code>, and so on. As new attributes are added to objects throughout the development of Nautobot, tables are expanded to include new columns.</p> <p>However, some users might want to store additional object attributes that are somewhat esoteric in nature, and that would not make sense to include in the core Nautobot database schema. For instance, suppose your organization needs to associate each device with a ticket number correlating it with an internal support system record. This is certainly a legitimate use for Nautobot, but it's not a common enough need to warrant including a field for every Nautobot installation. Instead, you can create a custom field to hold this data.</p> <p>Within the database, custom fields are stored as JSON data directly alongside each object. This alleviates the need for complex queries when retrieving objects.</p>"},{"location":"user-guide/platform-functionality/customfield.html#creating-custom-fields","title":"Creating Custom Fields","text":"<p>Custom fields can be created through the UI under Extensibility &gt; Miscellaneous &gt; Custom Fields or through the REST API.</p> <p>Nautobot supports these custom field types:</p> <ul> <li>Text: Free-form text (up to 255 characters)</li> <li>Integer: A whole number (positive or negative)</li> <li>Boolean: True or false</li> <li>Date: A date in ISO 8601 format (YYYY-MM-DD)</li> <li>URL: This will be presented as a link in the web UI</li> <li>JSON: Arbitrary JSON data</li> <li>Selection: A selection of one of several pre-defined custom choices</li> <li>Multiple selection: A selection field which supports the assignment of multiple values</li> </ul> <p>Added in version 1.3.0</p> <p>Support for JSON-type custom fields was added.</p> <p>Each custom field must have a key; this should be a simple database-friendly string, e.g. <code>tps_report</code>. You may also assign a corresponding human-friendly label (e.g. \"TPS report\"); the label will be displayed on web forms. A weight is also required: Higher-weight fields will be ordered lower within a form. (The default weight is 100.) If a description is provided, it will appear beneath the field in a form.</p> <p>Changed in version 1.4.0</p> <p>Custom fields now have both a <code>name</code> and a <code>slug</code>; in older versions there was no <code>slug</code> field. When migrating existing data to Nautobot 1.4.0 or later, the <code>label</code> and <code>slug</code> will be automatically populated for existing custom fields if necessary.</p> <p>Changed in version 2.0.0</p> <p>The custom field <code>slug</code> has been renamed to <code>key</code>, and <code>name</code> to <code>label</code>, in order to provide more clarity around their usage. Existing custom fields will automatically be migrated when upgrading to Nautobot 2.0.0 or later.</p> <p>Additionally, the <code>key</code> now must be a valid GraphQL identifier, which in general means that it must start with a lowercase letter and contain only lowercase letters, numbers, and underscores.</p> <p>Note</p> <p>The <code>key</code> and <code>type</code> of a custom field cannot be modified once created, so take care in defining these fields. This helps to reduce the possibility of inconsistent data and enforces the importance of thinking about the data model when defining a new custom field.</p> <p>Marking a field as required will force the user to provide a value for the field when creating a new object or when saving an existing object. A default value for the field may also be provided. Use \"true\" or \"false\" for boolean fields, or the exact value of a choice for selection fields.</p> <p>The filter logic controls how values are matched when filtering objects by the custom field. Loose filtering (the default) matches on a partial value, whereas exact matching requires a complete match of the given string to a field's value. For example, exact filtering with the string \"red\" will only match the exact value \"red\", whereas loose filtering will match on the values \"red\", \"red-orange\", or \"bored\". Setting the filter logic to \"disabled\" disables filtering by the field entirely.</p> <p>Changed in version 1.4.0</p> <p>Custom field extended filtering introduced extended lookup expression filters for <code>exact</code> and <code>icontains</code>, duplicating the functionality of both the <code>Strict</code> and <code>Loose</code> settings.</p> <p>A custom field must be assigned to one or more object types, or models, in Nautobot. Once created, custom fields will automatically appear as part of these models in the web UI and REST API.</p> <p>When creating a custom field, if \"Move to Advanced tab\" is checked, this custom field won't appear on the object's main detail tab in the UI, but will appear in the \"Advanced\" tab. This is useful when the requirement is to hide this field from the main detail tab when, for instance, it is only required for machine-to-machine communication and not user consumption.</p>"},{"location":"user-guide/platform-functionality/customfield.html#custom-field-validation","title":"Custom Field Validation","text":"<p>Nautobot supports limited custom validation for custom field values. Following are the types of validation enforced for each field type:</p> <ul> <li>Text: Regular expression (optional)</li> <li>URL: Regular expression (optional)</li> <li>Integer: Minimum and/or maximum value (optional)</li> <li>JSON: If not empty, this field must contain valid JSON data</li> <li>Selection: Must exactly match one of the prescribed choices<ul> <li>Selection Fields: Regular expression (optional)</li> </ul> </li> </ul>"},{"location":"user-guide/platform-functionality/customfield.html#custom-selection-fields","title":"Custom Selection Fields","text":"<p>Choices are stored as independent values and are assigned a numeric weight which affects their ordering in selection lists and dropdowns. Note that choice values are saved exactly as they appear, so it's best to avoid superfluous punctuation or symbols where possible.</p> <p>A regular expression can optionally be defined on custom selection choices to validate the defined field choices in the user interface and the API.</p> <p>If a default value is specified for a selection field, it must exactly match one of the provided choices. Note that the default value can only be set on the custom field after its corresponding choice has been added.</p> <p>The value of a multiple selection field will always return a list, even if only one value is selected.</p>"},{"location":"user-guide/platform-functionality/customfield.html#filtering-on-custom-fields","title":"Filtering on Custom Fields","text":"<p>There are a number of available built-in filters for custom fields.</p> <p>Filtering on an object's list view follows the same pattern as custom field filtering on the API.</p> <p>When using the ORM, you can filter on custom fields using <code>_custom_field_data__&lt;field name&gt;</code> (note the underscore before <code>custom_field_data</code> and the double-underscore before the field name). For example, if a custom field of string type with a <code>name</code> of  <code>\"location_code\"</code> was created for Location objects, you could filter as follows:</p> <pre><code>from nautobot.dcim.models import Location\nall_locs = Location.objects.all()  # -&gt; ['Raleigh', 'Charlotte', 'Greensboro']\nfiltered_locs_1 = Location.objects.filter(_custom_field_data__location_code=\"US-NC-RAL42\")  # -&gt; ['Raleigh']\nfiltered_locs_2 = Location.objects.filter(_custom_field_data__location_code__in=[\"US-NC-RAL42\", \"US-NC-CLT22\"])  # -&gt; ['Raleigh', 'Charlotte']\n</code></pre> <p>For further ORM interaction with custom fields check out the custom fields user guide.</p>"},{"location":"user-guide/platform-functionality/customfield.html#custom-fields-and-the-rest-api","title":"Custom Fields and the REST API","text":"<p>When retrieving an object via the REST API, all of its custom field data will be included within the <code>custom_fields</code> attribute. For example, below is the partial output of a location with two custom fields defined:</p> <pre><code>{\n\"id\": 42568d63-0f8c-453f-8d13-1355f677af4e,\n\"url\": \"http://localhost:8080/api/dcim/locations/42568d63-0f8c-453f-8d13-1355f677af4e/\",\n\"name\": \"Raleigh 42\",\n...\n\"custom_fields\": {\n\"deployed\": \"2018-06-19\",\n\"location_code\": \"US-NC-RAL42\"\n},\n...\n</code></pre> <p>Changed in version 2.0.0</p> <p>In the Nautobot 1.x REST API, depending on the exact API version in use, the <code>custom_fields</code> dictionary would be keyed by either the <code>name</code> or the <code>slug</code> of each custom field. In Nautobot 2.0, this has been standardized and the dictionary keys will always correspond to the custom field's <code>key</code> strings.</p> <p>To set or change custom field values, simply include nested JSON data in your REST API POST, PATCH, or PUT request. Unchanged fields may be omitted from the data. For example, the below would set a value for the <code>deployed</code> custom field but would leave the <code>location_code</code> value unchanged:</p> <pre><code>{\n\"name\": \"New Location\",\n\"custom_fields\": {\n\"deployed\": \"2019-03-24\"\n}\n}\n</code></pre>"},{"location":"user-guide/platform-functionality/customfield.html#custom-fields-user-guide","title":"Custom Fields User Guide","text":"<p>More in depth documentation on how to use custom fields can be found in the custom fields user guide.</p>"},{"location":"user-guide/platform-functionality/customlink.html","title":"Custom Links","text":"<p>Custom links allow users to display arbitrary hyperlinks to external content within Nautobot object views. These are helpful for cross-referencing related records in systems outside of Nautobot. For example, you might create a custom link on the device view which links to the current device in a network monitoring system.</p> <p>Custom links can be created under the admin UI or web UI located in the navbar under Extensibility &gt; Miscellaneous &gt; Custom Links. Each link is associated with a particular Nautobot object type (location, device, prefix, etc.) and will be displayed on relevant views. Each link is assigned text and a URL, both of which support Jinja2 templating. The text and URL are rendered with the context variable <code>obj</code> representing the current object.</p> <p>For example, you might define a link like this:</p> <ul> <li>Text: <code>View NMS</code></li> <li>URL: <code>https://nms.example.com/nodes/?name={{ obj.name }}</code></li> </ul> <p>When viewing a device named Router4, this link would render as:</p> <pre><code>&lt;a href=\"https://nms.example.com/nodes/?name=Router4\"&gt;View NMS&lt;/a&gt;\n</code></pre> <p>Custom links appear as buttons at the top right corner of the page. Numeric weighting can be used to influence the ordering of links.</p>"},{"location":"user-guide/platform-functionality/customlink.html#context-data","title":"Context Data","text":"<p>The following context data is available within the template when rendering a custom link's text or URL.</p> Variable Description <code>obj</code> The Nautobot object being displayed <code>debug</code> A boolean indicating whether debugging is enabled <code>request</code> The current WSGI request <code>user</code> The current user (if authenticated) <code>perms</code> The permissions assigned to the user <p>All built-in Jinja2 filters are available and it's also possible to develop and register a custom Jinja2 filters.</p>"},{"location":"user-guide/platform-functionality/customlink.html#conditional-rendering","title":"Conditional Rendering","text":"<p>Only links which render with non-empty text are included on the page. You can employ conditional Jinja2 logic to control the conditions under which a link gets rendered.</p> <p>For example, if you only want to display a link for active devices, you could set the link text to</p> <pre><code>{% if obj.status.name == 'Active' %}View NMS{% endif %}\n</code></pre> <p>The link will not appear when viewing a device with any status other than \"active.\"</p> <p>As another example, if you wanted to show only devices belonging to a certain manufacturer, you could do something like this:</p> <pre><code>{% if obj.device_type.manufacturer.name == 'Cisco' %}View NMS{% endif %}\n</code></pre> <p>The link will only appear when viewing a device with a manufacturer name of \"Cisco.\"</p> <p>Note</p> <p>To access custom fields of an object within a template, use the <code>cf</code> attribute. For example, <code>{{ obj.cf.color }}</code> will return the value (if any) for the custom field with a key of <code>color</code> on <code>obj</code>.</p>"},{"location":"user-guide/platform-functionality/customlink.html#link-groups","title":"Link Groups","text":"<p>Group names can be specified to organize links into groups. Links with the same group name will render as a dropdown menu beneath a single button bearing the name of the group.</p>"},{"location":"user-guide/platform-functionality/dynamicgroup.html","title":"Dynamic Groups","text":"<p>Added in version 1.3.0</p> <p>Dynamic Groups provide a way to organize objects of the same Content Type by matching filters. A Dynamic Group can be used to create unique groups of objects matching a given filter, such as Devices for a specific location or set of locations. As indicated by the name, Dynamic Groups update in real time as potential member objects are created, updated, or deleted.</p> <p>When creating a Dynamic Group, one must select a Content Type to which it is associated, for example <code>dcim.device</code>. The filtering parameters saved to the group behave as a bi-directional search query that is used to identify members of that group, and can also be used to determine from an individual object the list of Dynamic Groups to which an individual object belongs.</p> <p>Once created the Content Type for a Dynamic Group may not be modified as this relationship is tightly-coupled to the available filtering parameters. All other fields may be updated at any time.</p>"},{"location":"user-guide/platform-functionality/dynamicgroup.html#introduction","title":"Introduction","text":""},{"location":"user-guide/platform-functionality/dynamicgroup.html#creating-dynamic-groups","title":"Creating Dynamic Groups","text":"<p>Dynamic Groups can be created through the UI under Organization &gt; Dynamic Groups and clicking the \"Add\" button, or through the REST API.</p> <p>Each Dynamic Group must have a human-readable Name string, e.g. <code>devices-location-ams01</code>. You must select a Content Type for the group that determines the kind of objects that can be members of the group and the corresponding filtering parameters available. Finally, you may also assign an optional human-friendly Description (e.g. \"Devices in location AMS01\").</p> <p>Once a new Dynamic Group is created, the group can be configured by clicking the \"Edit\" button to specify Filter Fields or Child Groups to use to narrow down the group's member objects. More on this below.</p> <p>Warning</p> <p>The content type of a Dynamic Group cannot be modified once created, so take care in selecting this initially. This is intended to prevent the possibility of inconsistent data and enforces the importance of thinking about the data model when defining a new Dynamic Group.</p>"},{"location":"user-guide/platform-functionality/dynamicgroup.html#working-with-dynamic-groups","title":"Working with Dynamic Groups","text":"<p>Once created and configured, Dynamic Groups can be accessed from the primary Dynamic Groups landing page in the web interface under the Organization &gt; Dynamic Groups menu. From there you may view the list of available groups, search or filter the list, view or edit an individual group, or bulk delete groups. Additionally if a group's filter has matching members, the number of members may be clicked to take you to the list of members for that dynamic group containing those objects.</p> <p>Dynamic Groups cannot be imported nor can they be updated in bulk, as these operations would be complex and do not make sense in most cases.</p> <p>From an individual object's detail page, if it is a member of any groups, a \"Dynamic Groups\" tab will display in the navigation tabs. Clicking that tab will display all Dynamic Groups of which this object is a member.</p>"},{"location":"user-guide/platform-functionality/dynamicgroup.html#filtering","title":"Filtering","text":"<p>Dynamic Group filtering is powered by FilterSet objects underneath the hood. Basic filtering is performed using the <code>filter</code> that is defined on a given Dynamic Group. Advanced filtering is performed by aggregating filters from multiple nested Dynamic Groups to form a combined parent Dynamic Group, which will be explained later in this document.</p> <p>An object is considered to be a member of a Dynamic Group if it is of the same Content Type and it is not excluded by way of any of the filter criteria specified for that group. By default, a freshly created group has an empty filter (<code>{}</code>), which will include all objects of the matching Content Type, just as a default list view of those objects would display prior to any filter fields being filled in the web UI.</p> <p>For example, for a Dynamic Group with Content Type of <code>dcim.device</code> and an empty filter, the list of members would be equivalent to the default Device list view, which in turn is equivalent to the queryset for <code>Device.objects.all()</code> from the database ORM.</p> <p>Changed in version 1.4.0</p> <p>In Nautobot v1.3.0 the default for a Dynamic Group with an empty filter was to \"fail closed\" and have zero members.</p> <p>As of v1.4.0, this behavior has been inverted to default to include all objects matching the Content Type, instead of matching no objects as was previously the case. This was necessary to implement the progressive layering of child filters similarly to how we use filters to reduce desired objects from basic list view filters. This will be described in more detail below.</p>"},{"location":"user-guide/platform-functionality/dynamicgroup.html#basic-filtering","title":"Basic Filtering","text":"<p>When editing a Dynamic Group, under the Filter Options section, you will find a Filter Fields tab that allows one to specify filter criteria. The filter fields available for a given Content Type are backed and validated by underlying filterset classes (for example <code>nautobot.dcim.filters.DeviceFilterSet</code>) and are represented in the web interface as a dynamically-generated filter form that corresponds to each eligible filter field.</p>"},{"location":"user-guide/platform-functionality/dynamicgroup.html#advanced-filtering","title":"Advanced Filtering","text":"<p>Added in version 1.4.0</p> <p>Advanced filtering is performed using nested Dynamic Group memberships.</p> <p>An object is considered a member of an advanced Dynamic Group if it matches the aggregated filter criteria across all descendant groups.</p> <p>When editing a Dynamic Group, under the Filter Options section, you will find a Child Groups tab that allows one to make other Dynamic Groups of the same Content Type children of the parent group.</p> <p></p>"},{"location":"user-guide/platform-functionality/dynamicgroup.html#example-workflow","title":"Example Workflow","text":"<p>Dynamic Groups are a complex topic and are perhaps best understood through a series of worked examples.</p>"},{"location":"user-guide/platform-functionality/dynamicgroup.html#basic-filtering-with-a-single-dynamic-group","title":"Basic Filtering with a single Dynamic Group","text":"<p>Let's say you want to create a Dynamic Group that contains all production Devices at your first two Locations. You can create a Dynamic Group called \"Devices at Locations A and B\" for Content Type <code>dcim | device</code>, then edit it and set the Filter Fields to match:</p> <ol> <li>a Location of either \"AMS01\" or \"BKK01\"</li> <li>a Status of \"Active\" or \"Offline\"</li> </ol> <p></p> <p>After clicking \"Update\", you will be returned to the detail view for this Dynamic Group, where you can verify the filter logic that results, and click the \"Members\" tab to see the set of Devices that it contains.</p> <p></p> <p></p> <p>A key to understand here is that generally, within a single Dynamic Group, additional values specified for the same filter field (here, \"Location\") will broaden the group to include additional objects that match those additional values, while specifying values for additional filter fields (here, \"Status\") will narrow the group to match only the objects that match this additional filter. This is expressed in the \"Filter Query Logic\" panel by the use of <code>OR</code> and <code>AND</code> operators - the logic for this Dynamic Group is:</p> <pre><code>(\n  (\n    location__name='Campus-02' OR location__name='Room-01'\n  ) AND (\n    status__name='Offline'\n  )\n)\n</code></pre>"},{"location":"user-guide/platform-functionality/dynamicgroup.html#advanced-filtering-combining-two-dynamic-groups-into-a-third","title":"Advanced Filtering - Combining Two Dynamic Groups into a Third","text":"<p>Added in version 1.4.0</p> <p>Now, let's say that you add a third location to your network. This location is currently being built out, and you don't care about Devices from this location that are Offline status at present. What you want for your \"Devices of Interest\" Dynamic Group is logic similar to:</p> <pre><code>(\n  (\n    (\n      location__name='ams01' OR location__name='bkk01'\n    ) AND (\n      status__name='Active' OR status__name='Offline'\n    )\n  ) OR (\n    location__name='can01' AND status__name='Active'\n  )\n)\n</code></pre> <p>This logic is too complex to express directly via a single Dynamic Group, but fear not! This is what combining Dynamic Groups allows you to do.</p> <p>First, you can create a new \"Devices of Interest\" group. Edit this group, and instead of specifying Filter Fields, switch to the Child Groups tab of the editor, select the operator \"Include (OR)\" and the group \"Devices at Locations A and B\", and update the group.</p> <p></p> <p>In the new group's detail view, you can see that it now contains one child group, \"Devices at Locations A and B\", and its members are exactly the same as those of that group. But we're not done yet!</p> <p></p> <p>Next, you'll create another group to represent the other part of your desired logic. Call this group \"Location C So Far\", and set its Filter Fields to match Location \"CAN01\" and Status \"Active\". Verify that it contains the expected set of Devices from Location C.</p> <p></p> <p>Now, we'll add this group into the \"Devices of Interest\" parent group. Navigate back to the Dynamic Groups list view, and edit this group. Under the Child Groups tab, add another \"Include (OR)\" operator and select group \"Location C So Far\":</p> <p></p> <p>Now things are getting interesting!</p> <p></p> <p>The \"Devices of Interest\" Dynamic Group now contains the filtered Devices from both of its child groups, and the \"Filter Query Logic\" matches our intent as we stated it earlier:</p> <pre><code>(\n  (\n    (\n      location__name='ams01' OR location__name='bkk01'\n    ) AND (\n      status__name'Active' OR status__name='Offline'\n    )\n  ) OR (\n    location__name='can01' AND status__name='Active'\n  )\n)\n</code></pre>"},{"location":"user-guide/platform-functionality/dynamicgroup.html#advanced-filtering-nested-groups-and-negation","title":"Advanced Filtering: Nested Groups and Negation","text":"<p>Added in version 1.4.0</p> <p>Next, let's say you add a fourth location to your network. This location is in bad shape, and has Devices in a wide range of statuses. You want your \"Devices of Interest\" group to include all Devices from this location, except for those in Decommissioning status. To express this logic and add these devices to our parent group, we will need to use a combination of groups and the \"Exclude (NOT)\" operator.</p> <p>First, you will create an \"Location D All Devices\" group. This will simply match Devices at Location \"DEL01\", regardless of their status.</p> <p></p> <p>Then create a \"Location D Decommissioning Devices\" group, which matches Location \"DEL01\" and Status \"Decommissioning\".</p> <p></p> <p>Next create a \"Location D Devices of Interest\" group, and set its Child Groups to:</p> <ol> <li>Operator \"Include (OR)\", group \"Location D All Devices\"</li> <li>Operator \"Exclude (NOT)\", group \"Location D Decommissioning Devices\"</li> </ol> <p></p> <p>Warning</p> <p>In general, but especially when using the AND and NOT operators, you must pay close attention to the order of the child groups. In this example, if you were to reverse the order of these two child groups, you would not get the desired final result!</p> <p>You can check this group and confirm that it contains the expected restricted subset of Devices.</p> <p></p> <p>Finally, you can edit the parent \"Devices of Interest\" group and add a third Child Groups entry, \"Include (OR)\" on \"Location D Devices of Interest\". The final result is a Dynamic Group that contains the desired set of Devices across all four of your Locations.</p> <p></p> <p>You can see the filter logic that this combination of groups results in:</p> <pre><code>(\n  (\n    (\n      location__name='ams01' OR location__name='bkk01'\n    ) AND (\n      status__name='Active' OR status__name='Offline'\n    )\n  ) OR (\n    location__name='can01' AND status__name'Active'\n  ) OR (\n    location__name='del01' AND (\n      NOT (location__name='del01' AND status__name='Decommissioning')\n    )\n  )\n)\n</code></pre> <p>You can also see the hierarchy of nested groups that are being used to derive the \"Devices of Interest\" group:</p> <p></p> <p>Most importantly, you now have a Dynamic Group that contains exactly the set of Devices you need!</p> <p></p>"},{"location":"user-guide/platform-functionality/dynamicgroup.html#technical-details","title":"Technical Details","text":""},{"location":"user-guide/platform-functionality/dynamicgroup.html#filter-generation","title":"Filter Generation","text":"<p>Filters are always processed hiearchically from the top down starting from the parent group and descending recursively to the last nested child group in order by the <code>weight</code> value assigned to that group when it was associated to its parent.</p> <p>Note</p> <p>For the purpose illustration, we will use \"left to right\" terminology since when verbally describing precedence in English, we read from left to right, so that following it will be more intuitive.</p> <p>The nesting of Dynamic Groups is performed using two advanced patterns: Sets and graphs. Rules for each child group are processed using a set <code>operator</code>, and groups are sorted hierarchically as a directed acyclic graph (DAG), where the <code>weight</code> is used for sorting child groups topologically.</p> <p>In both cases, the ordering of the tree of descendants from a parent group to its nested children is significant and critically important to how each subsequent filter or group of filters are processed to result in a final set of member objects.</p> <p>Consider an example where there is a graph from the parent group to three direct child groups, the third of which has its own nested child group:</p> <pre><code>parent\n- first-child\n- second-child\n- third-child\n  - nested-child\n</code></pre> <p>The filter generation would walk the graph: starting from the base (match-all) filter of <code>parent</code>, the filter of <code>first-child</code> would be applied, then <code>second-child</code>, as ordered by their <code>weight</code>. In the case of <code>third-child</code>, all of its children (only <code>nested-child</code> in this case) would be processed in order in the same way and the resultant filter from all of the child groups for <code>third-child</code> would be applied to the filter resulting from <code>first-child</code> and <code>second-child</code>, resulting in the final filter for <code>parent</code>.</p>"},{"location":"user-guide/platform-functionality/dynamicgroup.html#weights","title":"Weights","text":"<p>Weights are used to define the order in which a parent group's child group filters are processed. Because this ordering is significant, care must be taken when constructing nested Dynamic Groups to result in filter parameters that have the desired outcome.</p> <p>Note</p> <p>Unique weights are only considered for directly-related child groups. In other words, the weights for each child group of a parent group are unique to that parent and only affect the sorting of the children for that parent.</p> <p>In practice, weights are automatically assigned in increments of <code>10</code> when associating child groups in the web UI, and child groups may be dragged and dropped to re-order them and re-assign their weights accordingly. When using the REST API, the weights must be explicitly provided as a part of your request payload.</p> <p>Using the example group hierarchy above, the weights would be as follows:</p> <pre><code>parent\n- first-child {weight: 10}\n- second-child {weight: 20}\n- third-child {weight: 30}\n  - nested-child {weight: 10}\n</code></pre>"},{"location":"user-guide/platform-functionality/dynamicgroup.html#operators","title":"Operators","text":"<p>Set theory is applied when a new group is added as a child group. Three key concepts are at play: Intersections, Unions, and Differences.</p> <p>We have attempted to simplify working with these operators by giving them both human-readable and Boolean name mappings. They are as follows:</p> <ul> <li>Restrict (Boolean <code>AND</code>) - The Restrict operator performs a set intersection on the queryset, and is equivalent to a Boolean <code>AND</code>. The preceding filter is restricted (aka intersected) by the objects matching the child filter. All filter criteria must match between the filters for a member object to be included in the resultant filter.</li> <li>Include (Boolean <code>OR</code>) - The Include operator performs a set union on the queryset, and is equivalent to a Boolean <code>OR</code>. The preceding filter is extended to include (aka unioned with) any objects matching the child filter. Any filter criteria may match between the filters for member objects to be included in the resultant filter.</li> <li>Exclude (Boolean <code>NOT</code>) - The Exclude operator performs a set difference on the queryset, and is equivalent to a Boolean <code>NOT</code>. The preceding filter excludes (aka differences) any objects matching the child filter. Any matching objects from the child filter will be negated from the members of the resultant filter.</li> </ul> <p>The following table maps the Nautobot operator to the corresponding set operations:</p> Operator Set Operation Boolean Description Restrict Intersection AND Objects must match this child filter to be included in the parent group Include Union OR Objects may match the child filter to be included in the parent group Exclude Difference NOT Objects must not match this child filter to be included in the parent group <p>Any filters provided by the child groups are used to filter the members from the parent group using one of the three operators: Restrict (AND), Include (OR), or Exclude (NOT).</p> <p>Using the example group hierarchy from above, let's apply operators and explain how it would work:</p> <pre><code>parent {filter: None}\n- first-child {weight: 10, operator: intersection (AND), filter: location=ams01}\n- second-child {weight: 20, operator: union (OR), filter: location=ang01}\n- third-child {weight: 30, operator: difference (NOT), filter: None}\n  - nested-child {weight: 10, operator: intersectio (AND), filter: status=active}\n</code></pre> <p>Logically, the filter will be expressed like so using the hierarchy above:</p> <pre><code>((first-child OR second-child) AND (NOT nested-child))\n</code></pre> <p>Which in turn would map to the object filter:</p> <pre><code>((location=ams01 OR location=ang01) AND (NOT status=active))\n</code></pre>"},{"location":"user-guide/platform-functionality/dynamicgroup.html#how-does-this-work","title":"How does this work?","text":"<p>First, the filters for direct children for a group will always be included in a parenthetical grouping, separated by the operator. Parent groups always start from their base filter containing \"all objects\" (equivalent to an empty filter or <code>{}</code>). Therefore the filter of <code>parent</code> and the filter of <code>third-child</code> are not directly used for generating the filter and are instead passed through from <code>parent</code> left to right as the \"base\" filter.</p> <p>Similarly, by the time we get to <code>third-child</code>, the filter at that node in the graph will have already had the filter from <code>first-child</code> and <code>second-child</code> applied, and will merely be passed through to the filter generated from the children of <code>third-child</code>.</p> <p>Because <code>first-child</code> and <code>second-child</code> are \"included\" by way of the <code>union</code> set operator (Boolean <code>OR</code>), but because the filter for <code>third-child</code> is empty as explained above, its filter condition is not directly included, resulting in <code>(first-child OR second-child)</code> as the first group, representing all direct filters for the group <code>parent</code>.</p> <p>Note</p> <p>But what about the <code>AND</code> coming from the association of <code>first-child</code>, you might be asking?</p> <p>Well, that <code>AND</code> is also passed through because the default behavior when performing queryset filtering is to join all filter statements together with <code>AND</code>. For example, consider when you perform this from the Django ORM <code>Device.objects.filter(location__name=\"ams01\")</code> the outcome is in fact equivalent to <code>AND location__name=\"ams01\"</code>. Therefore, for the first child group (literally <code>first-child</code> in this case), initial <code>AND</code> will be omitted.</p> <p>Continuing on to the children of <code>third-child</code>, the same iteration rules apply. The filter from <code>nested-child</code> gets applied to the filter being passed through from its parent, <code>third-child</code>, except that the \"exclude\" (boolean <code>NOT</code>) operator is still applied from the association of <code>third-child</code> to parent resulting in <code>(NOT nested-child</code>).</p> <p>Note</p> <p>You'll see <code>NOT</code> emitted as an <code>AND NOT</code> because <code>NOT</code> is actually just shorthand for this. They are in fact interchangeable as Boolean operators. While it's technically possible to perform an <code>OR NOT</code> query from a database perspective, it is not supported by Dynamic Groups because the <code>NOT</code> operator maps directly to the \"difference\" set operation which is distinctly an <code>AND NOT</code> Boolean operation when performing underlying SQL queries at the database.</p> <p>Piecing the rules together, we ended up with two filters and by wrapping them in their own set of parentheses we get our final generated filter:</p> <pre><code>(\n  (\n    [ALL OBJECTS]\n    AND first-child\n  )\n  OR second-child\n)\nAND NOT (\n  [ALL OBJECTS]\n  AND nested-child\n)\n</code></pre>"},{"location":"user-guide/platform-functionality/dynamicgroup.html#dynamic-groups-and-the-rest-api","title":"Dynamic Groups and the REST API","text":"<p>Dynamic Groups are fully supported by the API. Two distinct endpoints are required, one each for managing Dynamic Groups and for assigning child groups using Dynamic Group Memberships.</p>"},{"location":"user-guide/platform-functionality/dynamicgroup.html#specifying-filter-conditions","title":"Specifying Filter Conditions","text":"<p>Dynamic Groups are fairly straightforward however it is important to understand how the <code>filter</code> field works before digging in.</p> <p>The <code>filter</code> is a JSON field and it must be able to be used as valid query parameters for filtering objects of the corresponding Content Type.</p> <p>It is an error to provide any value other than a JSON object (<code>{}</code> or a Python dictionary) for the <code>filter</code> field.</p>"},{"location":"user-guide/platform-functionality/dynamicgroup.html#multiple-values","title":"Multiple Values","text":"<p>Most fields within the <code>filter</code> accept multiple values and must be represented as a JSON array (Python list), for example:</p> <pre><code>{\n\"location\": [\"ams01\", \"ang01\"]\n}\n</code></pre>"},{"location":"user-guide/platform-functionality/dynamicgroup.html#single-values","title":"Single Values","text":"<p>Certain fields take Boolean values (JSON <code>true</code>/<code>false</code>) or single numeric integers or character strings.</p> <p>For example, consider this boolean filter that requires a single <code>true</code>/<code>false</code> and would result in a Dynamic Group of devices that have interfaces:</p> <pre><code>{\n\"has_interfaces\": true\n}\n</code></pre> <p>Or this character filter that requires a single string and would result in a Dynamic Group with only one member matching this <code>name</code>:</p> <pre><code>{\n\"name\": \"ams01-edge-01\"\n}\n</code></pre>"},{"location":"user-guide/platform-functionality/dynamicgroup.html#field-validation","title":"Field Validation","text":"<p>Any invalid field values for valid field names will also result in a <code>ValidationError</code>, for example providing an integer to the <code>name</code> filter is invalid:</p> <pre><code>{\n\"name\": -42\n}\n</code></pre> <p>Note</p> <p>Please refer to either the source code definition of the <code>{model_name}FilterSet</code> (e.g. for <code>Device</code> it would be <code>nautobot.dcim.filters.DeviceFilterSet</code>) or the API documentation for the list endpoint (e.g. <code>/api/dcim/devices/</code>) for a given model object, to view the available filter fields and their expectations.</p> <p>Changed in version 1.4.0</p> <p>Prior to v1.4.0, any invalid field names that are not eligible for filtering objects will be discarded upon validation.</p> <p>As of v1.4.0, strict filtering is enabled by default, which causes any invalid field names to result in a <code>ValidationError</code>.</p>"},{"location":"user-guide/platform-functionality/dynamicgroup.html#managing-dynamic-groups","title":"Managing Dynamic Groups","text":""},{"location":"user-guide/platform-functionality/dynamicgroup.html#creating-a-dynamic-group","title":"Creating a Dynamic Group","text":"<p>A Dynamic Group may be created by performing a <code>POST</code> to the Dynamic Groups list endpoint at <code>/api/extras/dynamic-groups/</code>.</p> <p>Note</p> <p>The <code>filter</code> field will default to an empty filter (<code>{}</code>) if not provided.</p> <p>Important</p> <p>It is not possible to perform a nested assignment of <code>children</code> when creating a new Dynamic Group. You must first create the new group and then use the endpoint for creating Dynamic Group Memberships as explained below under Assigning Child Groups.</p> <p>Request:</p> <pre><code>POST /api/extras/dynamic-groups/\n{\n\"name\": \"parent\",\n\"description\": \"I am a parent group with nested children.\",\n\"content-type\": \"dcim.device\",\n\"filter\": {},\n}\n</code></pre> <p>Response:</p> <pre><code>{\n\"id\": \"1f825078-b6dc-4b12-9463-be5a9189b03f\",\n\"display\": \"parent\",\n\"url\": \"http://localhost:6789/api/extras/dynamic-groups/1f825078-b6dc-4b12-9463-be5a9189b03f/\",\n\"name\": \"parent\",\n\"description\": \"I am the parent group with nested children.\",\n\"content_type\": \"dcim.device\",\n\"filter\": {},\n\"children\": [],\n\"created\": \"2022-07-06T20:17:04.305663Z\",\n\"last_updated\": \"2022-07-06T20:17:04.305663Z\",\n\"custom_fields\": {},\n\"computed_fields\": {},\n\"relationships\": {}\n}\n</code></pre>"},{"location":"user-guide/platform-functionality/dynamicgroup.html#updating-or-deleting-a-dynamic-group","title":"Updating or Deleting a Dynamic Group","text":"<p>Important</p> <p>It is not possible to perform a nested update of <code>children</code> when updating a new Dynamic Group. You must use the endpoint for creating Dynamic Group Memberships as explained below under Updating or Deleting Child Groups.</p> <p>Updating or deleting a Dynamic Group is done by sending a request to the detail endpoint for that object.</p> <p>A Dynamic Group may be updated using <code>PUT</code> or <code>PATCH</code> (for a partial update) requests. A <code>PUT</code> request requires the entire object to be updated in place. For example if you wanted to update the <code>name</code> and the <code>description</code> together, leaving every other field with their current values as provided:</p> <pre><code>PUT /api/extras/dynamic-groups/{uuid}/\n{\n\"name\": \"I am the best parent group\",\n\"description\": \"I am the best parent group with nested children.\",\n\"filter\": {}\n}\n</code></pre> <p>Performing a partial update using a <code>PATCH</code> request can allow any single field to be updated without affecting the other fields. For example, if we wanted to update only the <code>name</code> for a group:</p> <pre><code>PATCH /api/extras/dynamic-group-memberships/{uuid}/\n{\n\"name\": \"I am the best parent group\"\n}\n</code></pre> <p>To delete a Dynamic Group you would send a <code>DELETE</code> request to the detail endpoint:</p> <pre><code>DELETE /api/extras/dynamic-group-memberships/{uuid}/\n</code></pre>"},{"location":"user-guide/platform-functionality/dynamicgroup.html#managing-child-groups","title":"Managing Child Groups","text":"<p>Dynamic Groups may be nested to a parent group by creating a new Dynamic Group Membership. The act of assigning a Dynamic Group as a child to a parent group creates a Dynamic Group Membership.</p> <p>This can be done at the list endpoint found at <code>/api/extras/dynamic-group-memberships/</code>.</p>"},{"location":"user-guide/platform-functionality/dynamicgroup.html#assigning-child-groups","title":"Assigning Child Groups","text":"<p>Dynamic Group Membership objects may be created, updated, or deleted just like any other object and are represented as <code>children</code> on the parent group.</p> <p>Note</p> <p>When interacting with the REST API, the <code>operator</code> must be provided using the string representation that is stored in the database. The human-readable operator names (such as \"Exclude (AND)\" for \"intersection\") are not accepted.</p> <p>Request:</p> <pre><code>POST /api/extras/dynamic-group-memberships/\n{\n\"group\": {\"name\": \"first-child\"},\n\"parent_group\": {\"name\": \"parent\"},\n\"operator\": \"intersection\",\n\"weight\": 10\n}\n</code></pre> <p>Response:</p> <pre><code>{\n\"id\": \"4c8296de-42bc-49a6-8fed-fc1b1f6b93ca\",\n\"display\": \"parent &gt; intersection (10) &gt; first-child\",\n\"url\": \"http://localhost:6789/api/extras/dynamic-group-memberships/4c8296de-42bc-49a6-8fed-fc1b1f6b93ca/\",\n\"group\": {\n\"display\": \"first-child\",\n\"id\": \"97188a74-eddd-46d8-be41-909c1ece1d43\",\n\"url\": \"http://localhost:6789/api/extras/dynamic-groups/97188a74-eddd-46d8-be41-909c1ece1d43/\",\n\"name\": \"first-child\",\n\"content_type\": \"dcim.device\"\n},\n\"parent_group\": {\n\"display\": \"parent\",\n\"id\": \"1f825078-b6dc-4b12-9463-be5a9189b03f\",\n\"url\": \"http://localhost:6789/api/extras/dynamic-groups/1f825078-b6dc-4b12-9463-be5a9189b03f/\",\n\"name\": \"parent\",\n\"content_type\": \"dcim.device\"\n},\n\"operator\": \"intersection\",\n\"weight\": 10\n}\n</code></pre> <p>Observe that after adding this new membership object, the parent group now reflects this in its <code>children</code>:</p> <pre><code>GET /api/extras/dynamic-groups/1f825078-b6dc-4b12-9463-be5a9189b03f/\n{\n\"id\": \"1f825078-b6dc-4b12-9463-be5a9189b03f\",\n\"display\": \"parent\",\n\"url\": \"http://localhost:6789/api/extras/dynamic-groups/1f825078-b6dc-4b12-9463-be5a9189b03f/\",\n\"name\": \"parent\",\n\"description\": \"\",\n\"content_type\": \"dcim.device\",\n\"filter\": {},\n\"children\": [\n{\n\"id\": \"4c8296de-42bc-49a6-8fed-fc1b1f6b93ca\",\n\"display\": \"parent &gt; intersection (10) &gt; first-child\",\n\"url\": \"http://localhost:6789/api/extras/dynamic-group-memberships/4c8296de-42bc-49a6-8fed-fc1b1f6b93ca/\",\n\"group\": {\n\"display\": \"first-child\",\n\"id\": \"97188a74-eddd-46d8-be41-909c1ece1d43\",\n\"url\": \"http://localhost:6789/api/extras/dynamic-groups/97188a74-eddd-46d8-be41-909c1ece1d43/\",\n\"name\": \"first-child\",\n\"content_type\": \"dcim.device\"\n},\n\"parent_group\": {\n\"display\": \"parent\",\n\"id\": \"1f825078-b6dc-4b12-9463-be5a9189b03f\",\n\"url\": \"http://localhost:6789/api/extras/dynamic-groups/1f825078-b6dc-4b12-9463-be5a9189b03f/\",\n\"name\": \"parent\",\n\"content_type\": \"dcim.device\"\n},\n\"operator\": \"intersection\",\n\"weight\": 10\n}\n],\n\"created\": \"2022-07-15T00:00:00Z\",\n\"last_updated\": \"2022-07-15T16:50:45.453965Z\",\n\"notes_url\": \"http://localhost:6789/api/extras/dynamic-groups/1f825078-b6dc-4b12-9463-be5a9189b03f/notes/\",\n\"custom_fields\": {}\n}\n</code></pre>"},{"location":"user-guide/platform-functionality/dynamicgroup.html#updating-or-deleting-child-groups","title":"Updating or Deleting Child Groups","text":"<p>Updating or deleting Dynamic Group Membership is done by sending a request to the detail endpoint for that membership object.</p> <p>A Dynamic Group Membership may be updated using <code>PUT</code> or <code>PATCH</code> (for a partial update) requests. A <code>PUT</code> request requires the entire object to be updated in place. For example if you wanted to update the <code>operator</code> and the <code>weight</code> together,leaving every other field with their current values as provided:</p> <pre><code>PUT /api/extras/dynamic-group-memberships/{uuid}/\n{\n\"group\": {\"name\": \"first-child\"},\n\"parent_group\": {\"name\": \"parent\"},\n\"operator\": \"difference\",\n\"weight\": 10\n}\n</code></pre> <p>Performing a partial update using a <code>PATCH</code> request can allow any single field to be updated without affecting the other fields. For example, if we only wanted to update the <code>weight</code> for a membership:</p> <pre><code>PATCH /api/extras/dynamic-group-memberships/{uuid}/\n{\n\"weight\": 15\n}\n</code></pre> <p>To delete a Dynamic Group Membership you would send a <code>DELETE</code> request to the detail endpoint:</p> <pre><code>DELETE /api/extras/dynamic-group-memberships/{uuid}/\n</code></pre>"},{"location":"user-guide/platform-functionality/dynamicgroup.html#membership-and-caching","title":"Membership and Caching","text":"<p>Since looking up the members of a Dynamic Group can be a very expensive operation, Nautobot caches the results of these lookups for a configurable amount of time. By default this cache is disabled. You can change this default value by changing the <code>DYNAMIC_GROUPS_MEMBER_CACHE_TIMEOUT</code> in the administration panel. This value is in seconds.</p> <p>Creating, updating, or deleting a Dynamic Group will automatically invalidate the cache for that group. This means that the next time the group is evaluated, the cache will be refreshed with the new membership information.</p> <p>This greatly speeds up the reverse association of any object to any Dynamic Group(s) to which it may be associated.</p> <p>A Dynamic Group object in the ORM exposes two (2) properties for retrieving the members of that group:</p> <ul> <li><code>members</code> - The evaluated QuerySet defined by the Dynamic Group and it's potential child groups. This will always perform database queries.</li> <li><code>members_cached</code> - A cached instance of <code>members.all()</code>. This will only perform database queries if the cache is expired. You can continue to perform <code>.filter()</code> and other QuerySet operations but this will incur additional database queries.</li> </ul> <p>Additionally, a Dynamic Group has the following methods for working with group membership and caching:</p> <ul> <li><code>update_cached_members</code> - A way of forcing an update to the cached members of a Dynamic Group. This will always perform database queries. It will also return the updated <code>members_cached</code> property.</li> <li><code>has_member</code> - A way of checking if an object is a member of a Dynamic Group. The arguments are:<ul> <li><code>obj</code> - An instance of an object to check if it is a member of the given group.</li> <li><code>use_cache</code> - A boolean value to choose whether to use the cached member list (<code>use_cache=True</code>) or force the database query (<code>use_cache=False</code>, the default). This is a handy way to have Nautobot perform the ideal membership check.<ul> <li><code>DynamicGroup.members_cached.filter(pk=obj.pk).exists()</code> will re-perform a database query, where <code>DynamicGroup.has_member(obj, use_cache=False)</code> will perform <code>obj in list(DyamicGroup.members_cached)</code>, performing no additional database queries.</li> <li>In contrast <code>DynamicGroup.members.filter(pk=obj.pk).exists()</code> will always a database query but a much faster one as opposed to<code>obj in list(DyamicGroup.members)</code>.</li> </ul> </li> </ul> </li> </ul> <p>A model instance that supports Dynamic Groups will expose the following properties:</p> <ul> <li><code>dynamic_groups</code> - A QuerySet of <code>DynamicGroup</code> objects; performs the most database queries.<ul> <li>Iterates over all Dynamic Groups that are applicable to the instance's content type, resulting in a list (what is available as <code>dynamic_groups_list</code>) of applicable Dynamic Groups.</li> <li>A final query (<code>DynamicGroup.objects.filter(pk__in=dynamic_groups_list)</code>) is necessary to retrieve a QuerySet of <code>DynamicGroup</code> objects.</li> <li>Always performs <code>N+1</code> queries where <code>N</code> is the number of Dynamic Groups that are applicable to the instance's content type</li> <li>Evaluation of <code>instance_1.dynamic_groups</code> adds no benefit to <code>instance_2.dynamic_groups</code>: each instance will perform <code>N+1</code> queries.</li> </ul> </li> <li><code>dynamic_groups_cached</code> - A QuerySet of <code>DynamicGroup</code> objects; uses cached member list if available. Ideal for most use cases.<ul> <li>Uses cached member lists for each Dynamic Group that is applicable to the instance's content type. Membership check returns a list (what is available as <code>dynamic_groups_list_cached</code>) of applicable Dynamic Groups.</li> <li>A query (<code>DynamicGroup.objects.filter(pk__in=dynamic_groups_list_cached)</code>) is necessary to retrieve a QuerySet of <code>DynamicGroup</code> objects.</li> <li>Ideal for most use cases, performing only <code>1</code> query if membership lists are cached.</li> <li>Evaluation of <code>instance_1.dynamic_groups_cached</code> benefits <code>instance_2.dynamic_groups_cached</code> as all dynamic group membership lists are cached: <code>instance_1.dynamic_groups_cached</code> may perform <code>N+1</code> queries, but <code>instance_2.dynamic_groups_cached</code> will perform <code>1</code> query.</li> </ul> </li> <li><code>dynamic_groups_list</code> - List of membership to <code>DynamicGroup</code> objects; performs one less database query than <code>dynamic_groups</code>.<ul> <li>The internal list used by <code>dynamic_groups</code> to retrieve a QuerySet of <code>DynamicGroup</code> objects, but saves the final query.</li> <li>Beneficial if you don't need QuerySet instance of <code>DynamicGroup</code> objects, but want to use uncached membership lists on a large amount of objects.</li> <li>Always performs <code>N</code> queries where <code>N</code> is the number of Dynamic Groups that are applicable to the instance's content type</li> </ul> </li> <li><code>dynamic_groups_list_cached</code> - List of membership to <code>DynamicGroup</code> objects; uses cached member list if available. Performs no database queries in optimal conditions.<ul> <li>The internal list used by <code>dynamic_groups_cached</code> to retrieve a QuerySet of <code>DynamicGroup</code> objects, but saves the final query.</li> <li>The most optimal way to retrieve a list of <code>DynamicGroup</code> objects for an instance: Worst case <code>instance_1.dynamic_groups_list_cached</code> will perform <code>N</code> queries, but <code>instance_2.dynamic_groups_list_cached</code> will perform <code>0</code> queries.</li> </ul> </li> </ul>"},{"location":"user-guide/platform-functionality/dynamicgroup.html#invalidatingrefreshing-the-cache","title":"Invalidating/Refreshing the Cache","text":"<p>If you need to invalidate the membership cache for a Dynamic Group, you can do so by running the management command: <code>nautobot-server refresh_dynamic_group_member_caches</code>. This will invalidate the cache for all Dynamic Groups.</p> <p>You can also create a <code>Job</code> to run periodically to refresh the cache for particular Dynamic Groups and running on a schedule:</p> <pre><code>from nautobot.extras.jobs import Job, ObjectVar\nfrom nautobot.extras.models import DynamicGroup\nclass ExampleDynamicGroupMemberCacheRefresh(Job):\ndynamic_group = ObjectVar(\nmodel=DynamicGroup\n)\nclass Meta:\nname = \"Update Dynamic Group Member Cache\"\ndef run(self, data, commit):\nDynamicGroup.objects.get(pk=data['dynamic_group']).update_cached_members()\n</code></pre>"},{"location":"user-guide/platform-functionality/exporttemplate.html","title":"Export Templates","text":"<p>Nautobot allows users to define custom templates that can be used when exporting objects. To create an export template, navigate to Extensibility &gt; Automation &gt; Export Templates under the navigation bar. Export templates can also be managed within an external Git repository if desired.</p> <p>Each export template is associated with a certain type of object. For instance, if you create an export template for VLANs, your custom template will appear under the \"Export\" button on the VLANs list.</p> <p>Export templates must be written in Jinja2.</p> <p>The list of objects returned from the database when rendering an export template is stored in the <code>queryset</code> variable, which you'll typically want to iterate through using a <code>for</code> loop. Object properties can be access by name. For example:</p> <pre><code>{% for rack in queryset %}\nRack: {{ rack.name }}\nLocation: {{ rack.location.name }}\nHeight: {{ rack.u_height }}U\n{% endfor %}\n</code></pre> <p>Note</p> <p>To access custom fields of an object within a template, use the <code>cf</code> attribute. For example, <code>{{ obj.cf.color }}</code> will return the value (if any) for the custom field with a key of <code>color</code> on <code>obj</code>.</p> <p>A MIME type and file extension can optionally be defined for each export template. The default MIME type is <code>text/plain</code>.</p>"},{"location":"user-guide/platform-functionality/exporttemplate.html#example","title":"Example","text":"<p>Here's an example device export template that will generate a simple Nagios configuration from a list of devices.</p> <pre><code>{% for device in queryset %}{% if device.status and device.primary_ip %}define host{\n        use                     generic-switch\n        host_name               {{ device.name }}\n        address                 {{ device.primary_ip.address.ip }}\n}\n{% endif %}{% endfor %}\n</code></pre> <p>The generated output will look something like this:</p> <pre><code>define host{\n        use                     generic-switch\n        host_name               switch1\n        address                 192.0.2.1\n}\ndefine host{\n        use                     generic-switch\n        host_name               switch2\n        address                 192.0.2.2\n}\ndefine host{\n        use                     generic-switch\n        host_name               switch3\n        address                 192.0.2.3\n}\n</code></pre>"},{"location":"user-guide/platform-functionality/gitrepository.html","title":"Git Repositories","text":"<p>Some text-based content is more conveniently stored in a separate Git repository rather than internally in the Nautobot database. Such a repository may currently include any or all of the following for Nautobot to consume:</p> <ul> <li>Job source files and associated data files,</li> <li>Configuration context data</li> <li>Export templates</li> <li>Additional data types as registered by any installed plugins</li> </ul> <p>Important</p> <p>Nautobot's Git integration depends on the availability of the <code>git</code> program. If <code>git</code> is not installed, Nautobot will be unable to pull data from Git repositories.</p> <p>Changed in version 1.6.2</p> <p>To proactively avoid conflicts in data, it is no longer possible to configure multiple Git repository entries that both have the same <code>remote_url</code> and also provide the same data type(s). Configuration of multiple entries with the same <code>remote_url</code> is still permitted if they are configured to provide entirely distinct types of data.</p>"},{"location":"user-guide/platform-functionality/gitrepository.html#repository-configuration","title":"Repository Configuration","text":"<p>When defining a Git repository for Nautobot to consume, the <code>name</code>, <code>remote URL</code>, and <code>branch</code> parameters are mandatory - the name acts as a unique identifier, and the remote URL and branch are needed for Nautobot to be able to locate and access the specified repository. Additionally, if the repository is private you may specify a <code>secrets group</code> that can be used to gain access to the repository.</p> <p>Note</p> <p>Nautobot currently only supports repositories that can be cloned using the standard git command line, <code>git clone</code>. This means App-style integrations like GitHub Apps are not currently supported, as their workflow of managing files leverages a REST API.</p> <p>Removed in version 2.0.0</p> <p>In Nautobot 1.x it was possible to configure the secrets (<code>username</code> and/or <code>token</code>) for a private Git Repository directly in Nautobot's database. Due to security concerns and maintainability challenges, this option has been removed. To access a private Git repository you now must use Secrets Groups.</p> <p>The implementation of private repository access can vary from Git provider to Git provider. The following providers have been confirmed to work; in theory, additional providers using the same pattern will work, but there is currently no specific support for all providers.</p> <ul> <li>GitHub's <code>token</code> does not require a <code>username</code>.</li> <li>GitLab's <code>token</code> requires a <code>username</code>, conventions are to use the username \"oauth2\". In addition, GitLab's deploy tokens are also supported.</li> <li>For Bitbucket, there are two options: personal access tokens or OAuth2 depending on the product.</li> </ul> <p>Note</p> <p>When defining a secrets group for a Git repository, the group must contain assigned secret(s) with an access type of <code>HTTP(S)</code> and secret type(s) of <code>Token</code> (and <code>Username</code>, if required by the provider).</p> <p>Whenever a Git repository record is created, updated, or deleted, Nautobot automatically enqueues a background task that will asynchronously execute to clone, fetch, or delete a local copy of the Git repository on the filesystem (located under <code>GIT_ROOT</code>) and then create, update, and/or delete any database records managed by this repository. The progress and eventual outcome of this background task are recorded as a <code>JobResult</code> record that may be viewed from the Git repository user interface.</p> <p>Important</p> <p>The repository branch must exist and have a commit against it. At this time, Nautobot will not initialize an empty repository.</p> <p>Note</p> <p>If you are using a self-signed Git repository, you will need to set the environment variable <code>GIT_SSL_NO_VERIFY=\"1\"</code> in order for the repository to sync.</p>"},{"location":"user-guide/platform-functionality/gitrepository.html#repository-structure","title":"Repository Structure","text":""},{"location":"user-guide/platform-functionality/gitrepository.html#jobs","title":"Jobs","text":"<p>Jobs defined in Python files located in a <code>/jobs/</code> directory at the root of a Git repository will automatically be discovered by Nautobot and made available to be run as a job, just as they would be if manually installed to the <code>JOBS_ROOT</code> directory.</p> <p>Note</p> <p>There must be an <code>__init__.py</code> file in the <code>/jobs/</code> directory.</p> <p>Changed in version 2.0.0</p> <p>Jobs provided by a Git repository are loaded as real Python modules and now support inter-module relative Python imports (i.e., you can package Python \"libraries\" into a Git repository and then import them from Jobs in that repository). As a result, the top-level directory of Git repositories that provide jobs must now contain an <code>__init__.py</code> file.</p> <p>When syncing or re-syncing a Git repository, the Nautobot database records corresponding to any provided jobs will automatically be refreshed. If a job is removed as a result of the sync, the corresponding database record will not be automatically deleted, but will be marked as <code>installed = False</code> and will no longer be runnable. A user with appropriate access permissions can delete leftover <code>Job</code> database records if desired, but note that this will result in any existing <code>JobResult</code> records no longer having a direct reference back to the <code>Job</code> that they originated from.</p>"},{"location":"user-guide/platform-functionality/gitrepository.html#configuration-contexts","title":"Configuration Contexts","text":"<p>Config contexts may be provided as JSON or YAML files located in <code>/config_contexts/</code>. There are three different types of config context scopes; explicit, implicit, and local.</p> <ul> <li>Explicit: Defined as JSON or YAML files at the root of the <code>/config_contexts/</code> folder. Multiple config contexts can be specified within the each file. The metadata regarding the naming and scoping of the config context is determined by the <code>_metadata</code> key for each list element.</li> <li>Implicit: They're defined using a specific folder and file structure to apply the config context to a specific scope.</li> <li>Local: Defined at the device/virtual machine level and only being applied to the specific device/virtual machine.</li> </ul> <p>Added in version 1.5.6</p> <p>Config contexts provided in a Git repository can now be filtered by <code>locations</code> in addition to all previously supported filters.</p>"},{"location":"user-guide/platform-functionality/gitrepository.html#metadata","title":"Metadata","text":"<p>The metadata used to create the config context has the following options and is specified by the <code>_metadata</code> key.</p> Key Required Default Description name True N/A The name that will be assigned to the Config Context weight False 1000 The weight that will be assigned to the Config Context that determines precedence description False N/A The description applied to the Config Context is_active False True Whether or not the Config Context is active config_context_schema False N/A Config Context Schema that it should be validated against <p>Changed in version 2.0.0</p> <p>The key for specifying Config Context Schemas was renamed from <code>schema</code> to <code>config_context_schema</code>.</p> <p>There are several other keys that can be defined that match the scope of what the Config Context will be assigned to.</p> <p>Here is an example <code>_metadata</code> key defined:</p> <pre><code>{\n\"_metadata\": {\n\"name\": \"Location NYC servers\",\n\"weight\": 1000,\n\"description\": \"NTP and Syslog servers for location NYC\",\n\"is_active\": true,\n\"locations\": [{\"name\": \"NYC\"}],\n\"config_context_schema\": \"Config Context Schema 1\"\n},\n\"acl\": {\n\"definitions\": {\n\"named \": {\n\"PERMIT_ROUTES\": [\n\"10 permit ip any any\"\n]\n}\n}\n},\n\"route-maps\": {\n\"PERMIT_CONN_ROUTES\": {\n\"seq\": 10,\n\"statements\": [\n\"match ip address PERMIT_ROUTES\"\n],\n\"type\": \"permit\"\n}\n}\n}\n</code></pre> <p>Important</p> <p>The only config context scope that does not require any metadata defined is the local configuration context</p>"},{"location":"user-guide/platform-functionality/gitrepository.html#explicit-config-contexts","title":"Explicit Config Contexts","text":"<p>As stated above, these explicit files live at the root of <code>/config_contexts</code>. These files will be imported as described below, with no special meaning attributed to their filenames (the name of the constructed config context will be taken from the <code>_metadata</code> key within the file, not the filename). To provide a visual, the <code>context_1.json</code> and <code>context_2.yml</code> are explicit config context scopes.</p> <pre><code>config_contexts/\n  context_1.json   # JSON data will be imported as-is, with scoping explicit from its contents\ncontext_2.yaml   # YAML data will be imported as-is, with scoping explicit from its contents\n</code></pre> <p>For files in the root of the <code>/config_contexts/</code> directory, a single file may define a single config context as above, or alternatively it may contain a list of config context data definitions, as in the following example:</p> <pre><code>---\n- _metadata:\nname: \"Router hostname pattern\"\nroles:\n- name: \"Router\"\nhostname_pattern_string: \"rtr-.+\"\n- _metadata:\nname: \"Console Server hostname pattern\"\nroles:\n- name: \"Console Server\"\nhostname_pattern_string: \"cs-.+\"\n- _metadata:\nname: \"Switches hostname pattern\"\nroles:\n- name: \"Aggregation Switch\"\n- name: \"Services Switch\"\nhostname_pattern_string: \"switch-.+\"\n- _metadata:\nname: \"Appliance hostname pattern\"\nroles:\n- name: \"Security Appliance\"\nhostname_pattern_string: \"fw-.+\"\n...\n</code></pre> <p>The <code>_metadata</code> key will map to the attributes required when creating a config context via the UI or API such as name and the scope of the config context. If we take a look at the first element, the name assigned to the config context will be <code>\"Router hostname pattern\"</code> and be scoped to <code>roles</code> with a name of <code>Router</code>.</p> <p>Any key/value pair defined at the same level as <code>_metadata</code> will be converted to the config context data. Keeping with the first element, it will have a key set as <code>hostname_pattern_string</code> with a value of <code>rtr-.+</code>.</p>"},{"location":"user-guide/platform-functionality/gitrepository.html#implicit-config-contexts","title":"Implicit Config Contexts","text":"<p>Implicit config context files will have the following folder/file structure <code>/config_contexts/&lt;filter&gt;/&lt;name&gt;.[json|yaml]</code>, in which case their path and filename will be taken as an implicit scope for the context. For example:</p> <pre><code>config_contexts/\n  locations/\n    NYC.yaml       # YAML data, with implicit scoping to the Location with name \"NYC\"\nNYC 01.json    # JSON data, with implicit scoping to the Location with name \"NYC 01\"\n</code></pre> <p>Changed in version 2.0.0</p> <p>In Nautobot 1.x, the filenames were interpreted as <code>slug</code> strings for the related objects. In Nautobot 2.0 and later, the filenames are based on the <code>name</code> (or for <code>device-types</code> files, the <code>model</code>) of the related object instead.</p> <p>The implicit config contexts will be defined using dictionaries for both <code>_metadata</code> and any context data for the config context.</p>"},{"location":"user-guide/platform-functionality/gitrepository.html#json","title":"JSON","text":"<pre><code>{\n\"_metadata\": {\n\"name\": \"Region NYC servers\",\n\"weight\": 1000,\n\"description\": \"NTP and Syslog servers for region NYC\",\n\"is_active\": true,\n\"config_context_schema\": \"Config Context Schema 1\"\n},\n\"ntp-servers\": [\n\"172.16.10.22\",\n\"172.16.10.33\"\n],\n\"syslog-servers\": [\n\"172.16.9.100\",\n\"172.16.9.101\"\n]\n}\n</code></pre>"},{"location":"user-guide/platform-functionality/gitrepository.html#yaml","title":"YAML","text":"<pre><code>_metadata\":\nname: \"Region NYC servers\"\nweight: 1000\ndescription: \"NTP and Syslog servers for region NYC\"\nis_active: true\nconfig_context_schema: \"Config Context Schema 1\"\nntp-servers:\n- 172.16.10.22\n- 172.16.10.33\nsyslog-servers:\n- 172.16.9.100\n- 172.16.9.101\n</code></pre> <p>This will create a config context with two keys: <code>ntp-servers</code> and <code>syslog-servers</code>.</p>"},{"location":"user-guide/platform-functionality/gitrepository.html#local-configuration-contexts","title":"Local Configuration Contexts","text":"<p>Files in a <code>config_contexts/devices/</code> and/or <code>config_contexts/virtual_machines/</code> directory will be used to populate \"local\" config context data for individual devices or virtual machines. For these files, the device/VM name will always be taken from the filename, and the data in the file will be used precisely as-is (there is no need, or support, for a <code>_metadata</code> key in these files).</p> <pre><code>config_contexts/\n  devices/\n    rtr-01.yaml    # YAML data, local to the Device named \"rtr-01\"\nvirtual_machines/\n    vm001.json     # JSON data, local to the VirtualMachine named \"vm001\"\n</code></pre> <p>Note</p> <p>While virtual machines are always uniquely identified by their name, it is possible for devices associated with different locations and/or tenants to share an identical name. Currently, Nautobot is unable to automatically apply local config context via Git to devices that have a non-globally-unique name (or no name at all).</p>"},{"location":"user-guide/platform-functionality/gitrepository.html#configuration-context-schemas","title":"Configuration Context Schemas","text":"<p>Config context schemas may be provided as JSON or YAML files located in <code>/config_context_schemas/</code>.</p> <p>Files in the root of the <code>/config_context_schemas/</code> directory will be imported as described below, with no special meaning attributed to their filenames (the name of the constructed config context schema will be taken from the <code>_metadata</code> within the file, not the filename). Similar to config context definitions, a single file may define a single config context schema or a list of such schemas - see examples below.</p> <pre><code>config_context_schemas/\n  context_schema_1.json\n  context_schema_2.yaml\n</code></pre> <p>When loading the schema, the key <code>_metadata</code> will be extracted from the loaded data and used to define the config context schema's metadata, while the actual config context data schema will be based on the key <code>data_schema</code>.</p> <p>JSON single example:</p> <pre><code>{\n\"_metadata\": {\n\"name\": \"Config Context Schema 1\",\n\"description\": \"Schema for defining first names.\"\n},\n\"data_schema\": {\n\"title\": \"Person\",\n\"properties\": {\n\"firstName\": {\n\"type\": \"string\",\n\"description\": \"The person's first name.\"\n}\n}\n}\n}\n</code></pre> <p>JSON list example:</p> <pre><code>[\n{\n\"_metadata\": {\n\"name\": \"Config Context Schema 1\",\n\"description\": \"Schema for defining first names.\"\n},\n\"data_schema\": {\n\"title\": \"Person\",\n\"properties\": {\n\"firstName\": {\n\"type\": \"string\",\n\"description\": \"The person's first name.\"\n},\n}\n}\n},\n{\n\"_metadata\": {\n\"name\": \"Config Context Schema 2\",\n\"description\": \"Schema for defining last names.\"\n},\n\"data_schema\": {\n\"title\": \"Person\",\n\"properties\": {\n\"lastName\": {\n\"type\": \"string\",\n\"description\": \"The person's last name.\"\n},\n}\n}\n},\n]\n</code></pre> <p>YAML single example:</p> <pre><code>---\n_metadata:\nname: \"Config Context Schema 1\"\ndescription: \"Schema for defining first names.\"\ndata_schema:\ntitle: \"Person\"\nproperties:\nfirstName:\ntype: \"string\"\ndescription: \"The person's first name\"\n</code></pre> <p>YAML list example:</p> <pre><code>---\n- _metadata:\nname: \"Config Context Schema 1\"\ndescription: \"Schema for defining first names.\"\ndata_schema:\ntitle: \"Person\"\nproperties:\nfirstName:\ntype: \"string\"\ndescription: \"The person's first name\"\n- _metadata:\nname: \"Config Context Schema 2\"\ndescription: \"Schema for defining last names.\"\ndata_schema:\ntitle: \"Person\"\nproperties:\nlastName:\ntype: \"string\"\ndescription: \"The person's last name\"\n</code></pre>"},{"location":"user-guide/platform-functionality/gitrepository.html#export-templates","title":"Export Templates","text":"<p>Export templates may be provided as files located in <code>/export_templates/&lt;grouping&gt;/&lt;model&gt;/&lt;template_file&gt;</code>; for example, a JSON export template for Device records might be <code>/export_templates/dcim/device/mytemplate.json</code>.</p> <ul> <li>The name of a discovered export template will be presented in Nautobot as <code>&lt;repository name&gt;: &lt;filename&gt;</code>.</li> <li>The MIME type of a file rendered from a discovered export template will try to match the extension to <code>IANA's list</code>. If not detected, it will default to <code>text/plain</code>.</li> <li>The file extension of a file rendered from a discovered export template will match that of the template itself (so, in the above example, the extension would be <code>.json</code>)</li> </ul>"},{"location":"user-guide/platform-functionality/graphql.html","title":"GraphQL","text":"<p>Nautobot supports a Read-Only GraphQL interface that can be used to query most information present in the database. The GraphQL interface is available at the endpoint <code>graphql/</code> for a human to explore and GraphQL can be queried as an API via the endpoint <code>api/graphql/</code>. Currently the support for GraphQL is limited to <code>query</code>, other operation type like <code>mutations</code> and <code>subscriptions</code> are not supported. Additionally, GraphQL variables are supported.</p> <p>The GraphQL implementation is leveraging the <code>graphene-django</code> library and supports the standard GraphQL language.</p>"},{"location":"user-guide/platform-functionality/graphql.html#how-to-use-the-graphql-interface","title":"How to use the GraphQL interface","text":"<p>The GraphQL interface can be used to query multiple tables at once in a single request. In GraphQL, only the information requested will be returned which can be contrasted to REST APIs. In the example below, this query will return the name of all <code>interfaces</code> attached to the device <code>nyc-sw01</code> along with all <code>ip_addresses</code> attached to those interfaces.</p> <pre><code>query {\ndevices(name: \"nyc-sw01\") {\nname\ninterfaces {\nname\nip_addresses {\naddress\n}\n}\n}\n}\n</code></pre> <p>Result</p> <pre><code>{\n\"data\": {\n\"devices\": [\n{\n\"name\": \"nyc-sw01\",\n\"interfaces\": [\n{\n\"name\": \"xe-0/0/0\",\n\"ip_addresses\": [\n{\n\"address\": \"10.52.0.1/30\"\n}\n]\n},\n{\n\"name\": \"xe-0/0/1\",\n\"ip_addresses\": []\n}\n]\n}\n]\n}\n}\n</code></pre> <p>It is possible to explore the Graph and create some queries in a human friendly UI at the endpoint <code>graphql/</code>. This interface (called <code>graphqli</code>) provides a great playground to build new queries as it provides full autocompletion and type validation.</p>"},{"location":"user-guide/platform-functionality/graphql.html#querying-the-graphql-interface-over-the-rest-api","title":"Querying the GraphQL interface over the rest API","text":"<p>It is possible to query the GraphQL interface via the rest API as well, the endpoint is available at <code>api/graphql/</code> and supports the same Token based authentication as all other Nautobot APIs.</p> <p>A GraphQL Query must be encapsulated in a JSON payload with the <code>query</code> key and sent with a POST request. Optionally it is possible to provide a list of <code>variables</code> in the same payload as presented below.</p> <pre><code>{\n\"query\": \"query ($id: Int!) { device(id: $id) { name }}\",\n\"variables\": { \"id\": 3}\n}\n</code></pre>"},{"location":"user-guide/platform-functionality/graphql.html#working-with-custom-fields","title":"Working with Custom Fields","text":"<p>GraphQL custom fields data data is provided in two formats, a \"greedy\" and a \"prefixed\" format. The greedy format provides all custom field data associated with this record under a single \"custom_field_data\" key. This is helpful in situations where custom fields are likely to be added at a later date, the data will simply be added to the same root key and immediately accessible without the need to adjust the query.</p> <pre><code>query {\nlocations {\nname\ncustom_field_data\n}\n}\n</code></pre> <p>Result</p> <pre><code>{\n\"data\": {\n\"locations\": [\n{\n\"name\": \"nyc-location-01\",\n\"custom_field_data\": {\n\"location_size\": \"large\"\n}\n},\n{\n\"name\": \"nyc-location-02\",\n\"custom_field_data\": {\n\"location_size\": \"small\"\n}\n}\n]\n}\n}\n</code></pre> <p>Additionally, by default, all custom fields in GraphQL will be prefixed with <code>cf_</code>. A custom field with a <code>key</code> of <code>location_size</code> will appear in GraphQL as <code>cf_location_size</code> as an example. The prefix can be changed by setting the value of <code>GRAPHQL_CUSTOM_FIELD_PREFIX</code>.</p> <pre><code>query {\nlocations {\nname\ncf_location_size\n}\n}\n</code></pre> <p>Result</p> <pre><code>{\n\"data\": {\n\"locations\": [\n{\n\"name\": \"nyc-location-01\",\n\"cf_location_size\": \"large\"\n},\n{\n\"name\": \"nyc-location-02\",\n\"cf_location_size\": \"small\"\n}\n]\n}\n}\n</code></pre> <p>Important</p> <p>Custom Fields with the prefixed <code>cf_</code> are only available in GraphQL after the custom field is created and the web service is restarted.</p>"},{"location":"user-guide/platform-functionality/graphql.html#working-with-relationships","title":"Working with Relationships","text":"<p>Defined relationships are available in GraphQL as well. In most cases, the associated objects for a given relationship will be available under the key <code>rel_&lt;relationship_key&gt;</code>. The one exception is for relationships between objects of the same type that are not defined as symmetric; for these relationships it's important to be able to distinguish between the two \"sides\" of the relationship, and so the associated objects will be available under <code>rel_&lt;relationship_key&gt;_source</code> and/or <code>rel_&lt;relationship_key&gt;_destination</code> as appropriate.</p> <p>Important</p> <p>Relationships are only available in GraphQL after the relationship is created and the web service is restarted.</p> <pre><code>query {\nip_addresses {\naddress\nrel_peer_address {\naddress\n}\nrel_parent_child_source {\naddress\n}\nrel_parent_child_destination {\naddress\n}\n}\n}\n</code></pre> <p>Result</p> <pre><code>{\n\"data\": {\n\"ip_addresses\": [\n{\n\"address\": \"10.1.1.1/24\",\n\"rel_peer_address\": {\n\"address\": \"10.1.1.2/24\"\n},\n\"rel_parent_child_source\": null,\n\"rel_parent_child_destination\": [\n{\n\"address\": \"10.1.1.1/30\"\n},\n{\n\"address\": \"10.1.1.1/32\"\n}\n]\n},\n{\n\"address\": \"10.1.1.1/30\",\n\"rel_peer_address\": null,\n\"rel_parent_child_source\": {\n\"address\": \"10.1.1.1/24\"\n},\n\"rel_parent_child_destination\": []\n},\n{\n\"address\": \"10.1.1.1/32\",\n\"rel_peer_address\": null,\n\"rel_parent_child_source\": {\n\"address\": \"10.1.1.1/24\"\n},\n\"rel_parent_child_destination\": []\n},\n{\n\"address\": \"10.1.1.2/24\",\n\"rel_peer_address\": {\n\"address\": \"10.1.1.1/24\"\n},\n\"rel_parent_child_source\": null,\n\"rel_parent_child_destination\": []\n}\n]\n}\n}\n</code></pre>"},{"location":"user-guide/platform-functionality/graphql.html#working-with-computed-fields","title":"Working with Computed Fields","text":"<p>By default, all custom fields in GraphQL will be prefixed with <code>cpf_</code>. A computed field name <code>ip_ptr_record</code> will appear in GraphQL as <code>cpf_ip_ptr_record</code> as an example. The prefix can be changed by setting the value of <code>GRAPHQL_COMPUTED_FIELD_PREFIX</code>.</p> <pre><code>{\nip_addresses {\naddress\ndns_name\ncpf_ip_ptr_record\n}\n}\n</code></pre> <p>Result</p> <pre><code>{\n\"data\": {\n\"ip_addresses\": [\n{\n\"address\": \"10.0.0.0/32\",\n\"dns_name\": \"ip-10-0-0-0.server.atl01.atc.nautobot.com\",\n\"cpf_ip_ptr_record\": \"0.0.0.10.in-addr.arpa\"\n},\n{\n\"address\": \"10.0.1.0/32\",\n\"dns_name\": \"ip-10-0-1-0.server.atl01.atc.nautobot.com\",\n\"cpf_ip_ptr_record\": \"0.1.0.10.in-addr.arpa\"\n}\n]\n}\n}\n</code></pre> <p>Important</p> <p>Computed Fields with the prefixed <code>cpf_</code> are only available in GraphQL after the computed field is created and the web service is restarted.</p>"},{"location":"user-guide/platform-functionality/graphql.html#saved-queries","title":"Saved Queries","text":"<p>Added in version 1.1.0</p> <p>Queries can now be stored inside of Nautobot, allowing the user to easily rerun previously defined queries.</p> <p>Inside of Extensibility -&gt; Data Management -&gt; GraphQL Queries, there are views to create and manage GraphQL queries.</p> <p>Saved queries can be executed from the detailed query view or via a REST API request. The queries can also be populated from the detailed query view into GraphiQL by using the \"Open in GraphiQL\" button. Additionally, in the GraphiQL UI, there is now a menu item, \"Queries\", which can be used to populate GraphiQL with any previously saved query.</p> <p>To execute a stored query via the REST API, a POST request can be sent to <code>/api/extras/graphql-queries/[uuid]/run/</code>. Any GraphQL variables required by the query can be passed in as JSON data within the request body.</p>"},{"location":"user-guide/platform-functionality/graphqlquery.html","title":"GraphQL Queries","text":"<p>Nautobot provides the ability to store GraphQL queries in the database for simple maintaining and re-running.</p>"},{"location":"user-guide/platform-functionality/graphqlquery.html#saved-query-views","title":"Saved Query Views","text":"<p>Navigate to Extensibility &gt; Data Management &gt; GraphQL Queries under the navigation bar. Located here are the views to manage saved query objects in the database.</p> <p>When queries get saved to the database from the form, the query is first loaded into GraphQL to ensure that syntax is correct. If there is an issue with the query, an error message is displayed below the textarea.</p>"},{"location":"user-guide/platform-functionality/graphqlquery.html#graphiql-interface","title":"GraphiQL Interface","text":"<p>Modifications have been made to the GraphiQL page to allow the running, editing and saving of this model.</p> <p>A dropdown button called \"Queries\" has been added to the GraphiQL toolbar. This lists all saved queries in the database allowing the user to open them into GraphiQL.</p> <p>If a saved query has been opened, a button will appear next to the name inside the \"Queries\" dropdown called \"Save Changes\". This allows the user to save any changes to the model object.</p> <p>If the user wants to create a new query, at the bottom of the \"Queries\" tab there is an option called \"Save Current Query As...\". This will open a modal form to input data, such as the name of the query, and then save the query to the database.</p>"},{"location":"user-guide/platform-functionality/graphqlquery.html#api-endpoint","title":"API Endpoint","text":"<p>An API endpoint has be created to allow running of saved queries through a simple POST request.</p> <ul> <li>Request: <code>POST</code></li> <li>URL: <code>{server_address}/api/extras/graphql-queries/{uuid}/run/</code></li> <li>Content-type: <code>application/json</code></li> <li>Body: JSON of query variables <code>{\"variable_1\": \"value_1\", \"variable_2\": \"value_2\"}</code></li> </ul>"},{"location":"user-guide/platform-functionality/imageattachment.html","title":"Image Attachments","text":"<p>Certain objects in Nautobot support the attachment of uploaded images. These will be saved to the Nautobot server and made available whenever the object is viewed.</p> <p>The location of where image attachments are stored can be customized using the <code>MEDIA_ROOT</code> setting in your <code>nautobot_config.py</code>.</p> <p>Currently, the following types of image attachments can be stored in Nautobot:</p> <ul> <li>Device type images are stored at <code>$MEDIA_ROOT/devicetype-images</code></li> <li>Generic image attachments are stored at <code>$MEDIA_ROOT/image-attachments</code></li> </ul>"},{"location":"user-guide/platform-functionality/napalm.html","title":"NAPALM","text":"<p>Nautobot supports integration with the NAPALM automation library. NAPALM allows Nautobot to serve a proxy for operational data, fetching live data from network devices and returning it to a requester via its REST API. Note that Nautobot does not store any NAPALM data locally.</p> <p>Note</p> <p>To enable this integration, the NAPALM library must be installed. See installation steps for more information.</p> <p>Below is an example REST API request and response:</p> <pre><code>GET /api/dcim/devices/1/napalm/?method=get_environment\n\n{\n    \"get_environment\": {\n        ...\n    }\n}\n</code></pre> <p>Note</p> <p>To make NAPALM requests via the Nautobot REST API, a Nautobot user must have assigned a permission granting the <code>napalm_read</code> action for the device object type.</p>"},{"location":"user-guide/platform-functionality/napalm.html#authentication","title":"Authentication","text":"<p>As of Nautobot 1.2, there are three ways to specify the authentication credentials to use for a given device:</p> <ol> <li><code>NAPALM_USERNAME</code> and <code>NAPALM_PASSWORD</code> configuration parameters, setting global defaults to use for all devices.</li> <li>Assigning an appropriately defined secrets group to the device to specify its specific credentials.</li> <li>In a REST API call, specifying the credentials as HTTP headers.</li> </ol>"},{"location":"user-guide/platform-functionality/napalm.html#configuration-parameters","title":"Configuration Parameters","text":"<p>By default, the <code>NAPALM_USERNAME</code> and <code>NAPALM_PASSWORD</code> configuration parameters are used for NAPALM authentication.</p>"},{"location":"user-guide/platform-functionality/napalm.html#secrets-groups","title":"Secrets Groups","text":"<p>If a given device has an associated secrets group, and that secrets group contains secrets assigned as access type <code>Generic</code> and secrets types <code>Username</code> and <code>Password</code> (and optionally an additional <code>Secret</code> entry as well, which will be used for a Cisco enable secret as needed), these credentials will be used for NAPALM authentication, overriding any global defaults specified in <code>nautobot_config.py</code>.</p> <p>Note that in the case where many devices in your network share common credentials (such as a standardized service account), it's straightforward to define an appropriate secrets group and then use the device \"bulk editing\" functionality in Nautobot to quickly assign this group to a collection of devices.</p>"},{"location":"user-guide/platform-functionality/napalm.html#rest-api-http-headers","title":"REST API HTTP Headers","text":"<p>The NAPALM credentials specified by either of the above methods can be overridden for an individual REST API call by specifying the <code>X-NAPALM-Username</code> and <code>X-NAPALM-Password</code> headers.</p> <pre><code>curl \"http://localhost/api/dcim/devices/1/napalm/?method=get_environment\" \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\n-H \"X-NAPALM-Username: foo\" \\\n-H \"X-NAPALM-Password: bar\"\n</code></pre>"},{"location":"user-guide/platform-functionality/napalm.html#method-support","title":"Method Support","text":"<p>The list of supported NAPALM methods depends on the NAPALM driver configured for the platform of a device. Because there is no granular mechanism in place for limiting potentially disruptive requests, Nautobot supports only read-only get methods.</p>"},{"location":"user-guide/platform-functionality/napalm.html#multiple-methods","title":"Multiple Methods","text":"<p>It is possible to request the output of multiple NAPALM methods in a single API request by passing multiple <code>method</code> parameters. For example:</p> <pre><code>GET /api/dcim/devices/1/napalm/?method=get_ntp_servers&amp;method=get_ntp_peers\n\n{\n    \"get_ntp_servers\": {\n        ...\n    },\n    \"get_ntp_peers\": {\n        ...\n    }\n}\n</code></pre>"},{"location":"user-guide/platform-functionality/napalm.html#optional-arguments","title":"Optional Arguments","text":"<p>The behavior of NAPALM drivers can be adjusted according to the optional arguments. Nautobot exposes those arguments using headers prefixed with <code>X-NAPALM-</code>. For example, the SSH port is changed to 2222 in this API call:</p> <pre><code>curl \"http://localhost/api/dcim/devices/1/napalm/?method=get_environment\" \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\n-H \"X-NAPALM-port: 2222\"\n</code></pre>"},{"location":"user-guide/platform-functionality/note.html","title":"Note","text":"<p>Added in version 1.4.0</p> <p>Notes provide a place for you to store notes or general information on an object, such as a Device, that may not require a specific field for. This could be a note on a recent upgrade, a warning about a problematic device, or the reason the Rack was marked with the Status <code>Retired</code>.</p> <p>The note field supports Markdown Basic Syntax.</p>"},{"location":"user-guide/platform-functionality/relationship.html","title":"Relationships","text":"<p>Sometimes it is desirable to create a new kind of relationship between one (or more) objects in your source of truth to reflect business logic or other relationships that may be useful to you but that haven't been defined. This is where the Relationships feature comes in: like defining custom fields to hold attributes specific to your use cases, relationships define specific links between objects that might be specific to your network or data.</p> <p>To create a relationship, from the top-level navigation menu select Extensibility &gt; Data Management &gt; Relationships</p> <p>Tip</p> <p>Because relationship information can be included in the REST API and in GraphQL, when defining a relationship, you must provide a <code>key</code> that contains underscores rather than dashes (<code>my_relationship_key</code>, not <code>my-relationship-key</code>), as some features would not work optimally if dashes are included in the key. If not explicitly specified, the <code>key</code> attribute is derived from the <code>label</code> attribute (unique for all Relationship instances).</p>"},{"location":"user-guide/platform-functionality/relationship.html#relationship-types","title":"Relationship Types","text":"<ul> <li>Many-to-many - where both sides of the relationship connection can be connected to multiple objects. For example, VLANs can be connected to multiple devices and devices will have multiple VLANs.</li> <li>One-to-many - where one side of the connection can only have one object. For example, where a controller has many supplicants like FEX and parent switch. A FEX can be uplinked to one parent switch (in most cases), but the parent switch can have many FEX.</li> <li>One-to-one - where there can be only one object on either side of the relationship. For example, an IP address serving as a router-id for a device. Each device has at most one router-id, and each IP address can be a router-id for at most one device.</li> </ul> <p>Added in version 1.2.0</p> <p>Additionally, there are two symmetric relationship types that can be used when defining a relationship between objects of the same type. These relationship types treat the two sides of a relationship as interchangeable (much like the A/Z sides of a circuit, or the endpoints of a cable) rather than distinguishing between the source and destination of a relationship as the non-symmetric relationship types above do.</p> <ul> <li>Symmetric Many-to-many - as in Many-to-many, but acting more as an undirected graph of similar objects. For example, this could be used to define a set of devices participating in a routing topology, where each device has some number of peers and there's no distinction between source and destination peers.</li> <li>Symmetric One-to-one - as in One-to-one, but defining a relationship between exactly two objects of the same type. For example, a HSRP/VRRP pair of redundant devices, where each device has exactly one peer device.</li> </ul> <p>Note</p> <p>A symmetric many-to-many relationship can be, but is not necessarily, a complete graph or full mesh. For example, in the routing topology example above, if Device A and Device B are peers, and Device B and Device C are peers, this does not automatically imply a relationship between Devices A and C -- they might or might not also be peers, depending on how you define and populate the specific associations for this relationship.</p>"},{"location":"user-guide/platform-functionality/relationship.html#required-relationships","title":"Required Relationships","text":"<p>Added in version 1.5.0</p> <p>Relationships can be marked as being required. By default, relationships are not marked as being required.</p> <p>To mark a relationship as being required, select \"Source objects MUST implement this relationship\" or conversely \"Destination objects MUST implement this relationship\" from the \"Required on\" field when editing or creating a relationship:</p> <ul> <li>If \"Destination objects MUST implement this relationship\" is selected, objects of the type selected in \"Destination Type\" will enforce this relationship when they are created or edited.</li> <li>If \"Source objects MUST implement this relationship\" is selected, objects of the type selected in \"Source Type\" will enforce this relationship when they are created or edited.</li> </ul> <p>Required relationships are enforced in the following scenarios:</p> <ul> <li>Creating or editing an object via the API or the UI</li> <li>Bulk creating objects via the API</li> <li>Bulk editing objects via the API or the UI</li> </ul>"},{"location":"user-guide/platform-functionality/relationship.html#relationship-filters","title":"Relationship Filters","text":"<p>Filters can be defined to restrict the type or selection of objects for either side of the connection.</p> <p>An important note is that the filters have to be defined in FilterSet rather than QuerySet format. In practice this means that you can use any of the filters that are valid in the REST API for a given object type, but cannot necessarily use complex nested attribute lookups (such as <code>interfaces__ip_addresses__mask_length</code> on a Device, for example).</p> <p>As an example, let's create a relationship between Circuits and Devices. In our situation we only would terminate Circuits on Devices with the Device Role of <code>edge</code>.</p> <p>To prevent the Circuit Relationship from showing up on any other Device, use a JSON filter to limit the Relationship to only Devices with a Role named <code>Edge</code>:</p> <pre><code>{\n\"role\": [\n\"Edge\"\n]\n}\n</code></pre> <p>Note</p> <p>There are a few ways to tell what attributes are available to filter on for a given object. In the case of the Device object used in the example, the user could:</p> <ul> <li>look at the code <code>nautobot/dcim/filters.py</code> -&gt; <code>DeviceFilterSet</code> class (available options there include <code>manufacturer_id</code>, <code>manufacturer</code>, etc)</li> <li>check the filter options available in the REST API: <code>https://&lt;server-name&gt;/api/docs</code>, and in this case checking the <code>dcim_devices_list</code> API endpoint for the parameter names</li> </ul> <p>For context, here is an image of the entire Relationship:</p> <p></p> <p>Now, the Circuit Relationship field will show up on a Device with an <code>edge</code> role:</p> <p></p> <p>The Circuit Relationship field will not show up on a Device with a role <code>leaf</code>:</p> <p></p>"},{"location":"user-guide/platform-functionality/relationship.html#relationship-labels","title":"Relationship Labels","text":"<p>Relationship connections can be labeled with a friendly name so that when they are displayed in the GUI, they will have a more descriptive or friendly name. From the Devices/Circuits example above, you might label the relationship so that on the Device side the connection appears as 'Terminated Circuits' and on the Circuit side the connection appears as 'Terminating Devices'.</p>"},{"location":"user-guide/platform-functionality/relationship.html#options","title":"Options","text":"<p>It's also possible to hide the relationship from either side of the connection.</p>"},{"location":"user-guide/platform-functionality/relationship.html#creating-new-relationships","title":"Creating New Relationships","text":"<p>Relationships can be added through the UI under Extensibility &gt; Relationships</p> <p>Each relationship must have a Name, Slug, Type, Source Object(s), and Destination Object(s). Optionally, Source Labels, Source Filters, Destination Labels, and Destination Filters may be configured.</p> <p>Once a new relationship is added, the Relationship configuration section will appear under that device in the UI edit screen. Once a specific instance relationship has been configured for the object, that new relationship will appear under the Relationship section heading when viewing the object.</p> <p>When creating a relationship, if \"Move to Advanced tab\" is checked, this relationship won't appear on the object's main detail tab in the UI, but will appear in the \"Advanced\" tab. This is useful when the requirement is to hide this relationship from the main detail tab when, for instance, it is only required for machine-to-machine communication and not user consumption.</p>"},{"location":"user-guide/platform-functionality/relationship.html#rest-api","title":"REST API","text":"<p>Relationships are fully supported by the API.</p>"},{"location":"user-guide/platform-functionality/relationship.html#adding-a-new-type-of-relationship","title":"Adding a new type of Relationship","text":"<p>The API endpoint for relationship creation is <code>/extras/relationships/</code></p> <p>From our many to many example above, we would use the following data to create the relationship.</p> <pre><code>{\n\"name\": \"Device VLANs\",\n\"type\": \"many-to-many\",\n\"source_type\": \"ipam.vlan\",\n\"destination_type\": \"dcim.device\"\n}\n</code></pre>"},{"location":"user-guide/platform-functionality/relationship.html#configuring-the-relationship-between-objects","title":"Configuring the Relationship between Objects","text":""},{"location":"user-guide/platform-functionality/relationship.html#via-object-endpoints","title":"Via Object Endpoints","text":"<p>Added in version 1.4.0</p> <p>To get object relationships and associations from the REST API, you can query any object endpoint with the <code>?include=relationships</code> query parameter included, for example <code>GET /api/dcim/devices/f472bb77-7f56-4e79-ac25-2dc73eb63924/?include=relationships</code>. The API response will include a nested dictionary of relationships and associations applicable to the object(s) retrieved.</p> <p>Similarly, you can update the relationship associations for a given object via an HTTP <code>POST</code> or <code>PATCH</code> request, generally by including the nested key <code>[\"relationships\"][&lt;relationship_key&gt;][\"source\"|\"destination\"|\"peer\"][\"objects\"]</code> with a list of objects to associate.</p> <p>For more details on this feature, refer to the REST API documentation.</p>"},{"location":"user-guide/platform-functionality/relationship.html#via-relationship-associations-endpoint","title":"Via Relationship-Associations Endpoint","text":"<p>Alternatively, relationship associations may be configured by sending a request to <code>/extras/relationship-associations/</code> like the following:</p> <p>Here we specify the IDs of each object. We specify the UUID of each object in their respective fields.</p> <pre><code>{\n\"relationship\": \"bff38197-26ed-4bbd-b637-3e688acf361c\",\n\"source_type\": \"ipam.vlan\",\n\"source_id\": \"89588629-2d70-45ce-9e20-f6b159b41b0c\",\n\"destination_type\": \"dcim.device\",\n\"destination_id\": \"6e8e72da-ce6e-468d-90f9-b4473d449db7\"\n}\n</code></pre> <p>In the relationship field, you may specify a dictionary of object attributes instead:</p> <pre><code>{\n\"relationship\": {\n\"key\": \"device_vlans\"\n},\n\"source_type\": \"ipam.vlan\",\n\"source_id\": \"89588629-2d70-45ce-9e20-f6b159b41b0c\",\n\"destination_type\": \"dcim.device\",\n\"destination_id\": \"6e8e72da-ce6e-468d-90f9-b4473d449db7\"\n}\n</code></pre>"},{"location":"user-guide/platform-functionality/role.html","title":"Roles","text":"<p>The Role model represents a role that can be assigned to a device, rack, virtual machine, IP address, VLAN, or prefix. Each role is identified by a unique name and has a weight, color and content-types associated with it.</p>"},{"location":"user-guide/platform-functionality/role.html#role-basics","title":"Role Basics","text":"<p>The value of a <code>role</code> field on a model (such as <code>Device.role</code>) will be represented as a <code>nautobot.extras.models.Role</code> object.</p> <p>When created, a <code>Role</code> can be associated to one or more model content-types using a many-to-many relationship. The relationship to each model is referenced across all user interfaces using the <code>{app_label}.{model}</code> naming convention (e.g. <code>dcim.device</code>).</p> <p>Roles may be managed by navigating to Organization &gt; Roles in the navigation menu.</p>"},{"location":"user-guide/platform-functionality/role.html#importing-objects-with-a-role-field","title":"Importing Objects with a <code>role</code> Field","text":"<p>When using CSV import to reference a <code>role</code> field on an object, the <code>Role.name</code> field is used.</p> <p>Visit role-internals to learn more about working with <code>role</code> as a developer.</p>"},{"location":"user-guide/platform-functionality/secret.html","title":"Secrets","text":"<p>Added in version 1.2.0</p> <p>For security reasons, Nautobot generally does not store sensitive secrets (device access credentials, systems-integration API tokens, etc.) in its own database. There are other approaches and systems better suited to this purpose, ranging from simple solutions such as process-specific environment variables or restricted-access files on disk, all the way through to dedicated systems such as Hashicorp Vault or AWS Secrets Manager.</p> <p>However, any number of Nautobot features (including, but not limited to, device access via NAPALM, Git repository access, custom Jobs, and various plugins seeking to integrate with third-party systems) do need the ability to retrieve and make use of such secrets. Towards that end, Nautobot provides a <code>Secret</code> database model. This model does not store the secret value itself, but instead defines how Nautobot can retrieve the secret value as and when it is needed. By using this model as an abstraction of the underlying secrets storage implementation, this makes it possible for any Nautobot feature to make use of secret values without needing to know or care where or how the secret is actually stored.</p> <p>Secrets can be grouped and assigned a specific purpose as members of a Secrets Group, which can then be attached to a Git repository, device, or other data model as needed for a given purpose.</p>"},{"location":"user-guide/platform-functionality/secret.html#secrets-groups","title":"Secrets Groups","text":"<p>Added in version 1.2.0</p> <p>A Secrets Group provides a way to collect and assign a purpose to one or more Secrets. The Secrets Group can then be attached to any object that needs to reference and make use of these Secrets, such as a Git repository needing a username/token to authenticate to a private GitHub repository, or a device using a group of Secrets to drive its NAPALM integration.</p> <p>When creating or editing a Secrets Group, you can assign any number of defined Secrets to this group, assigning each secret an access type and a secret type that are unique within the context of this group. Some examples of how a Secrets Group might be populated for use by a given feature:</p> Feature Access Type Secrets Type(s) Git private repository <code>HTTP(S)</code> <code>Token</code>, possibly also <code>Username</code> Device NAPALM integration <code>Generic</code> <code>Username</code>, <code>Password</code>, possibly an enable <code>Secret</code> <p>A Secrets Group is not limited to containing secrets of a single access type either - for example, a plugin that supports both NETCONF and gNMI protocols to interact with a device could be able to make use of a Secrets Group containing distinct secrets for each protocol.</p>"},{"location":"user-guide/platform-functionality/secret.html#secrets-providers","title":"Secrets Providers","text":"<p>Each Secret is associated with a secrets provider (not to be confused with a circuit provider), which provides the functionality needed to retrieve a specific value from a particular source of secrets. Each secrets provider also defines the set of parameters that a given Secret must specify in order to retrieve a secret value from this provider. Nautobot includes the following built-in secrets providers:</p> <ul> <li>Environment Variable - for retrieving a secret value defined in an environment variable; Secrets using this provider must specify the <code>variable</code> name to retrieve.</li> <li>Text File - for retrieving a secret value stored in a text file; Secrets using this provider must specify the absolute <code>path</code> of the file to retrieve.</li> </ul> <p>Changed in version 1.4.3</p> <p>When using the Text File secrets provider, any leading and trailing whitespace or newlines will be stripped.</p> <p>When defining a new Secret, you will need to select the desired secrets provider and then fill in the specific parameters required by that provider in order to have a completely specified, usable Secret record.</p> <p>Tip</p> <p>Nautobot plugins can also implement and register additional secrets providers as desired to support other sources such as Hashicorp Vault or AWS Secrets Manager.</p>"},{"location":"user-guide/platform-functionality/secret.html#templated-secret-parameters","title":"Templated Secret Parameters","text":"<p>In some cases you may have a collection of closely related secrets values that all follow a similar retrieval pattern. For example you might have a directory of text files each containing the unique password for a specific device, or have defined a set of environment variables providing authentication tokens for each different Git repository. In this case, to reduce the need for repeated data entry, Nautobot provides an option to use Jinja2 templates to dynamically alter the provider parameters of a given Secret based on the requesting object. The relevant object is passed to Jinja2 as <code>obj</code>. Thus, for example:</p> <ul> <li>A \"Device Password\" secret could use the Text File provider and specify the file <code>path</code> as <code>\"/opt/nautobot/device_passwords/{{ obj.location.name }}/{{ obj.name }}.txt\"</code>, so that a device <code>csr1</code> at location <code>NYC</code> would be able to retrieve its password value from <code>/opt/nautobot/device_passwords/NYC/csr1.txt</code>.</li> <li>A \"Git Token\" secret could use the Environment Variable provider and specify the <code>variable</code> name as <code>\"GIT_TOKEN_{{ obj.slug | upper }}\"</code>, so that a Git repository <code>golden_config</code> would be able to retrieve its token value from <code>$GIT_TOKEN_GOLDEN_CONFIG</code>.</li> </ul> <p>Note</p> <p>To access custom fields of an object within a template, use the <code>cf</code> attribute. For example, <code>{{ obj.cf.color }}</code> will return the value (if any) for the custom field with a key of <code>color</code> on <code>obj</code>.</p>"},{"location":"user-guide/platform-functionality/secret.html#secrets-and-security","title":"Secrets and Security","text":"<p>Secrets are of course closely linked to security, and as such they pose a number of unique concerns that are worth discussing.</p>"},{"location":"user-guide/platform-functionality/secret.html#leakage-of-secret-values","title":"Leakage of Secret Values","text":"<p>By design, the UI, REST API, and GraphQL do not provide access to retrieve or report the actual value of any given Secret, as these values are only meant for use within Nautobot itself.</p> <p>Tip</p> <p>If you need to use a secret value for some other purpose (such as to manually log into a device, or query an authenticated REST API endpoint yourself), you should be retrieving the value directly from the appropriate secrets provider rather than trying to relay it through Nautobot.</p> <p>However, code is power, and with power comes responsibility.</p> <p>Warning</p> <p>Any user or process that has the ability to execute code within Nautobot has the potential to access the value of any Secret, and a user or process that has the ability to execute arbitrary code absolutely can access Secrets.</p> <p>What does this mean in practice?</p> <ul> <li>Any plugin can potentially access your Secrets, including displaying their values onscreen or even forwarding them to an external system, so only install plugins that you trust.</li> <li>Any Job can potentially access your Secrets, and can trivially log a Secret value to its JobResult, where it may be visible to users, so only install Jobs that you trust, carefully limit which users are able to execute jobs and view job results, and be aware of the potential for privilege escalation resulting from careless or malicious logging.</li> <li>Any Git repository can add new Jobs to your system, so be careful about which users you grant the ability to create/edit <code>GitRepository</code> records.</li> <li>Any user with access to <code>nautobot-server nbshell</code> can execute arbitrary code, including accessing Secrets, and will be able to bypass any Nautobot permissions restrictions as well.</li> <li>Any user with access to modify Secrets can take advantage of a leak of one Secret's information through any of the above vectors to additionally leak other secret values (except as restricted with object permissions, see below). For example, if a Job erroneously logs a username obtained from a Secret as a part of its output, a user could modify the corresponding Secret definition to make the Job log any other secret value they have access to.</li> </ul>"},{"location":"user-guide/platform-functionality/secret.html#using-object-permissions-with-secrets","title":"Using Object Permissions with Secrets","text":"<p>Tip</p> <p>In practice you will likely want to carefully restrict which users are allowed to define and edit Secrets, and may want to use object permissions to further restrict which specific Secrets they are allowed to utilize.</p> <p>The two default Secrets providers potentially allow a user to define and use a Secret corresponding to any environment variable in the Nautobot execution context and/or any file readable by the <code>nautobot</code> user. For many users and use cases, you will not want to grant this much power to define and access arbitrary secrets; fortunately Nautobot's built-in permissions model is granular enough to allow for more specifically tailored access grants.</p> <p>For example, to restrict a specific user to only be able to work with Secrets that use the <code>environment-variable</code> Secrets provider, and specifically only to access those environment variables whose names begin with <code>NAPALM_</code>, you could define a Permission with a specific constraint like:</p> <pre><code>{\n\"provider\": \"environment-variable\",\n\"parameters__variable__startswith\": \"NAPALM_\"\n}\n</code></pre> <p>Or for a Permission to work with Secrets that use <code>text-file</code>, but only files located in <code>/opt/nautobot/secrets/</code>, you could use the following constraint:</p> <pre><code>{\n\"provider\": \"text-file\",\n\"parameters__path__startswith\": \"/opt/nautobot/secrets/\"\n}\n</code></pre>"},{"location":"user-guide/platform-functionality/secret.html#accessing-secrets-in-code","title":"Accessing Secrets in Code","text":"<p>Accessing a Secret's value from code is as simple as calling its <code>get_value()</code> method. Providing an <code>obj</code> parameter for context is recommended so as to allow for proper handling of templated secret parameters:</p> <pre><code>&gt;&gt;&gt; secret = Secret.objects.get(name=\"NAPALM Username\")\n&gt;&gt;&gt; secret.get_value()\n'user'\n&gt;&gt;&gt; secret = Secret.objects.get(name=\"NAPALM Password\")\n&gt;&gt;&gt; secret.get_value(obj=device1)\n'secret-device1-password'\n</code></pre> <p>In the case where a secret's value cannot be retrieved successfully, Nautobot will raise a <code>SecretError</code> or one of its subclasses:</p> <pre><code>&gt;&gt;&gt; from nautobot.extras.secrets.exceptions import SecretError\n&gt;&gt;&gt; try:\n...     Secret.objects.get(name=\"NAPALM Secret\").get_value()\n... except SecretError as exc:\n...     print(exc)\n...\nSecretValueNotFoundError: Secret \"NAPALM Secret\" (provider \"EnvironmentVariableSecretsProvider\"): Undefined environment variable \"NAPALM_SECRET\"!\n</code></pre> <p>In many cases, rather than accessing a specific Secret directly, you will be working with a Secrets Group instead. To retrieve the value of a specific secret within a group, use the group's <code>get_secret_value()</code> method, again with the option of providing an <code>obj</code> for template context:</p> <pre><code>&gt;&gt;&gt; secrets_group = SecretsGroup.objects.get(name=\"NETCONF Credentials\")\n&gt;&gt;&gt; from nautobot.extras.choices import SecretsGroupAccessTypeChoices, SecretsGroupSecretTypeChoices\n&gt;&gt;&gt; secrets_group.get_secret_value(\n...     access_type=SecretsGroupAccessTypeChoices.TYPE_NETCONF,\n...     secret_type=SecretsGroupSecretTypeChoices.TYPE_USERNAME,\n...     obj=device1,\n... )\n\"user-device1\"\n</code></pre>"},{"location":"user-guide/platform-functionality/status.html","title":"Statuses","text":"<p>Nautobot provides the ability for custom statuses to be defined within an organization to be used on various objects to facilitate business workflows around object statuses.</p>"},{"location":"user-guide/platform-functionality/status.html#status-basics","title":"Status Basics","text":"<p>The value of a <code>status</code> field on a model (such as <code>Device.status</code>) will be represented as a <code>nautobot.extras.models.Status</code> object.</p> <p>When created, a <code>Status</code> can be associated to one or more model content-types using a many-to-many relationship. The relationship to each model is referenced across all user interfaces using the <code>{app_label}.{model}</code> naming convention (e.g. <code>dcim.device</code>).</p> <p>Statuses may be managed by navigating to Organization &gt; Statuses in the navigation menu.</p>"},{"location":"user-guide/platform-functionality/status.html#importing-objects-with-a-status-field","title":"Importing Objects with a <code>status</code> Field","text":"<p>When using CSV import to reference a <code>status</code> field on an object, the <code>Status.name</code> field is used.</p> <p>Changed in version 2.0.0</p> <p>Changed the CSV import reference for Statuses from <code>Status.slug</code> to <code>Status.name</code>.</p>"},{"location":"user-guide/platform-functionality/status.html#customizing-statuses","title":"Customizing Statuses","text":"<p>With Status as a model, statuses can be customized. This can be as simple as removing the option to configure an existing status with a particular model or to remove that status entirely.</p> <p>The real benefit of custom status is adding your own organization status and process names directly to Nautobot. An example of custom statuses would be including End of Life information for your devices. A simple End of Life status could be EOx for a device hitting any end of life milestone; more specific statuses like EOSS (End of Software Support), EOS (End of Sale), and Pre-EOS (for 1 year prior to EOS) to be more specific. Once the end of life information is tracked as a status, developing a report for Devices that have reached EOSS is trivial.</p> <p>Another example for locations is tracking the nature of a specific location's installation status. A location that is under construction could receive a status like 'Pre Production'.</p> <p>For Virtual Machines, if utilizing OpenStack, statuses in Nautobot could be customized to reflect the specific Nova virtual machine states.</p>"},{"location":"user-guide/platform-functionality/status.html#status-internals","title":"Status Internals","text":"<p>Warning</p> <p>The section below is largely intended for developers who may need to create data models of their own that implement a <code>status</code> field. Proceed at your own risk!</p> <p>Any model that is intended to have a <code>status</code> field must use a <code>nautobot.extras.models.statuses.StatusField</code> for its foreign-key to the model. This field type will automatically assign a <code>related_name</code> for the reverse relationship back to the inheriting model's verbose plural name (e.g. <code>devices</code>).</p> <p>Changed in version 2.0.0</p> <p>The related name for Statuses was changed to be based on the model's <code>verbose_name_plural</code> instead of the pattern <code>%(app_label)s_%(model)s_related</code>. For example, <code>Status.devices</code> and not <code>Status.dcim_device_related</code>. Additionally, the recommendation to inherit from <code>StatusModel</code> has been replaced with a recommendation to directly include a <code>StatusField</code>.</p>"},{"location":"user-guide/platform-functionality/status.html#statusfield-model-field","title":"<code>StatusField</code> model field","text":"<p>The <code>StatusField</code> field type subclass of a <code>django.db.models.ForeignKey</code> with extra extensions to have it behave like field with choices. Because this pattern is replacing hard-coded <code>ChoiceSets</code> (such as <code>dcim.choices.DeviceStatusChoices</code>) with database objects, it is not possible to use the <code>choices=</code> argument on a foreign key.</p> <p>Because of this, <code>StatusField</code> implements a <code>.contribute_to_class()</code> method which will automatically bind <code>.get_status_display()</code> and <code>.get_status_color()</code> methods to any model that implements this field, so that these do not need to be manually defined on each model.</p> <p>This model field also emits its own form field to eliminate the requirement for a form field to be explicitly added to model forms.</p>"},{"location":"user-guide/platform-functionality/status.html#statusfilter-filter-field","title":"<code>StatusFilter</code> filter field","text":"<p>Any filter that is intended to have a <code>status</code> field must inherit from <code>nautobot.extras.filters.StatusModelFilterSetMixin</code>. This will add a <code>nautobot.extras.filters.StatusFilter</code> to the filter, which allows filtering by the <code>name</code> of the status.</p>"},{"location":"user-guide/platform-functionality/status.html#form-fields","title":"Form fields","text":"<p>Any model form that is intended to have a <code>status</code> field must inherit from one of three mixins, depending on the use-case:</p> <ul> <li><code>nautobot.extras.forms.StatusModelFilterFormMixin</code> should be used to add a non-required, multiple-choice <code>status</code> filter field to UI filter forms. This multiple-choice field allows for multiple status values to be selected for filtering objects in list views in the web UI.</li> <li><code>nautobot.extras.forms.StatusModelBulkEditFormMixin</code> should be used to add a non-required <code>status</code> form field to a an object's model form. This field constrains status choices eligible to the object type being edited.</li> </ul> <p>Changed in version 1.4.0</p> <p>In prior Nautobot versions these mixins were named <code>StatusFilterFormMixin</code> and <code>StatusBulkEditFormMixin</code>; the old names are still available as aliases but will be removed in a future major release.</p>"},{"location":"user-guide/platform-functionality/status.html#table-field","title":"Table field","text":"<p>If you wish for a table to include a <code>status</code> field, your table must inherit from <code>nautobot.extras.tables.StatusTableMixin</code>. This includes a <code>ColorColumn</code> on the table.</p>"},{"location":"user-guide/platform-functionality/status.html#status-object-integrations","title":"Status object integrations","text":"<p>To fully integrate a model to include a <code>status</code> field, assert the following:</p>"},{"location":"user-guide/platform-functionality/status.html#model","title":"Model","text":"<ul> <li>The model must use a <code>nautobot.extras.models.statuses.StatusField</code></li> <li>Decorate the model class with <code>@extras_features('statuses')</code> (<code>from nautobot.extras.utils import extras_features</code>)</li> </ul>"},{"location":"user-guide/platform-functionality/status.html#forms","title":"Forms","text":"<ul> <li>Generic model forms will automatically include a <code>StatusField</code></li> <li>Bulk edit model forms must inherit from <code>nautobot.extras.forms.StatusModelBulkEditFormMixin</code></li> <li>Filter forms must inherit from <code>nautobot.extras.forms.StatusModelFilterFormMixin</code></li> </ul> <p>Changed in version 1.4.0</p> <p>In prior Nautobot releases the latter two mixins were named <code>StatusBulkEditFormMixin</code> and <code>StatusFilterFormMixin</code> respectively; the old names are still available as aliases but will be removed in a future major release.</p>"},{"location":"user-guide/platform-functionality/status.html#filters","title":"Filters","text":"<ul> <li>Filtersets for your model must inherit from <code>nautobot.extras.filters.StatusModelFilterSetMixin</code></li> </ul>"},{"location":"user-guide/platform-functionality/status.html#tables","title":"Tables","text":"<ul> <li>The table class for your model must inherit from <code>nautobot.extras.tables.StatusTableMixin</code></li> </ul>"},{"location":"user-guide/platform-functionality/tag.html","title":"Tags","text":"<p>Tags are user-defined labels which can be applied to a variety of objects within Nautobot. They can be used to establish dimensions of organization beyond the relationships built into Nautobot. For example, you might create a tag to identify a particular ownership or condition across several types of objects.</p> <p>Added in version 1.3.0</p> <p>When created, a <code>Tag</code> can be associated to one or more model content-types using a many-to-many relationship. The tag will then apply only to models belonging to those associated content-types.</p> <p>Each tag has a name, label, color, and permitted content-types. Each tag can also be assigned a description indicating its purpose.</p> <p>Objects can be filtered by the tags they have applied. For example, the following API request will retrieve all devices tagged as \"monitored\":</p> <pre><code>GET /api/dcim/devices/?tag=monitored\n</code></pre> <p>The <code>tag</code> filter can be specified multiple times to match only objects which have all of the specified tags assigned:</p> <pre><code>GET /api/dcim/devices/?tag=monitored&amp;tag=deprecated\n</code></pre> <p>Tags can also be created in the ORM or REST API of Nautobot. The following HEX color values in the table below correspond to the dropdown selection when building tags using the UI. Any HEX color value can be used with the ORM or REST API, but a non-standard color will cause some inconsistency when editing the tag via the UI.</p> Color HEX value Dark Red aa1409 Red f44336 Pink e91e63 Rose ffe4e1 Fuchsia ff66ff Purple 9c27b0 Dark Purple 673ab7 Indigo 3f51b5 Blue 2196f3 Light blue 03a9f4 Cyan 00bcd4 Teal 009688 Aqua 00ffff Dark green 2f6a31 Green 4caf50 Light green 8bc34a Lime cddc39 Yellow ffeb3b Amber ffc107 Orange ff9800 Dark orange ff5722 Brown 795548 Light grey c0c0c0 Grey 9e9e9e Dark grey 607d8b Black 111111 White ffffff <p>Example of ORM creation:</p> <pre><code>Tag.objects.get_or_create(\nname=\"Cisco-3650CX\",\ndescription=\"Device tag for Cisco 3650CX series\",\ncolor=\"2196f3\"\n)\n</code></pre>"},{"location":"user-guide/platform-functionality/template-filters.html","title":"Additional Template Filters","text":""},{"location":"user-guide/platform-functionality/template-filters.html#introduction","title":"Introduction","text":"<p>Nautobot uses 2 template engines internally, Django Template and Jinja2. Django Template is used to render the UI pages and Jinja2 is used for features such as computed fields, custom links, export templates, etc.</p> <p>Note</p> <p>Jinja2 and Django Template are very similar, the main difference between them is the syntax of the template. Historically, Django Template has been the go-to solution to generate webpage in Django and Jinja2 is the industry standard outside of Django.</p> <p>Both Django Template and Jinja2 can be extended with a library of functions, called <code>filters</code>, that apply formatting or transformations to a provided input. Nautobot provides many built-in <code>filters</code>, including network specific <code>filters</code> from the netutils library.</p>"},{"location":"user-guide/platform-functionality/template-filters.html#netutils-filters","title":"Netutils Filters","text":"<p>Added in version 1.2.0</p> <p>Netutils is an external library, maintained by Network to Code, that is focusing on providing a collection of functions for common network automation tasks. Please check the netutils documentation to see the list of available functions.</p> <p>These functions are available automatically in Jinja2 rendered by Nautobot. For example you could define a computed field on Circuit objects, using the Netutils <code>bits_to_name</code> function, to display the \"Commit Rate\" as a human-readable value by using the template code <code>{{ (obj.commit_rate * 1000) | bits_to_name }}</code>. (This particular example is contrived, as the Nautobot UI already humanizes the raw <code>commit_rate</code> value for display, but it demonstrates the kinds of things that these filters can be used for.)</p> <p>In general the syntax for using a netutils filter in a Jinja2 template is something like <code>{{ arg1 | function_name }}</code> for functions that take a single argument, and <code>{{ arg1 | function_name(arg_name2=arg2, arg_name3=arg3) }}</code> for functions that take multiple arguments.</p> <p>Added in version 1.5.11</p> <p>Netutils functions are also available in Django templates after using the <code>{% load netutils %}</code> directive in a template. The syntax to use these functions is then generally <code>{% function_name arg_name1=arg1 arg_name2=arg2 %}</code>.</p>"},{"location":"user-guide/platform-functionality/template-filters.html#nautobot-built-in-filters","title":"Nautobot Built-In Filters","text":"<p>The Nautobot project also provides the following built-in <code>filters</code> that can be used in both Jinja2 and Django Template.</p>"},{"location":"user-guide/platform-functionality/template-filters.html#as_range","title":"as_range","text":"<p>Given a list of n items, return a corresponding range of n integers.</p> <pre><code># Django template\n{% for i in record.parents|as_range %}\n    &lt;i class=\"mdi mdi-circle-small\"&gt;&lt;/i&gt;\n{% endfor %}\n</code></pre>"},{"location":"user-guide/platform-functionality/template-filters.html#bettertitle","title":"bettertitle","text":"<p>Alternative to the built-in <code>title</code> filter; capitalizes words without replacing letters that are already uppercase.</p> <p>For example, <code>title(\"IP address\") == \"Ip Address\"</code>, while <code>bettertitle(\"IP address\") == \"IP Address\"</code>.</p> <pre><code>{{ obj_type.name|bettertitle }}\n</code></pre>"},{"location":"user-guide/platform-functionality/template-filters.html#divide","title":"divide","text":"<p>Return x/y (rounded).</p> <pre><code># Django Template\n{{ powerfeed.available_power|divide:3 }}VA\n# Jinja\n{{ powerfeed.available_power|divide(3) }}\n</code></pre>"},{"location":"user-guide/platform-functionality/template-filters.html#fgcolor","title":"fgcolor","text":"<p>Return the ideal foreground color (black <code>\"#000000\"</code> or white <code>\"#ffffff\"</code>) given an arbitrary background color in RRGGBB format.</p> <pre><code>color: {{ object.status.color|fgcolor }}\n</code></pre>"},{"location":"user-guide/platform-functionality/template-filters.html#get_docs_url","title":"get_docs_url","text":"<p>Return the static URL of the documentation for the specified model.</p> <pre><code>{{ obj | get_docs_url }}\n</code></pre>"},{"location":"user-guide/platform-functionality/template-filters.html#get_item","title":"get_item","text":"<p>Access a specific item/key in a dictionary.</p> <pre><code># Django Template\n{{ labels|get_item:key }}\n# Jinja\n{{ labels|get_item(key) }}\n</code></pre>"},{"location":"user-guide/platform-functionality/template-filters.html#queryset_to_pks","title":"queryset_to_pks","text":"<p>Return all object's in a queryset UUIDs/pks as a string separated by a comma.</p> <pre><code># Django Template\n{{ ip.tags.all | queryset_to_pks }}\n</code></pre>"},{"location":"user-guide/platform-functionality/template-filters.html#has_one_or_more_perms","title":"has_one_or_more_perms","text":"<p>Return True if the user has at least one of the permissions in the list.</p> <pre><code># Django Template\n{{ request.user|has_one_or_more_perms:panel_details.permissions }}\n# Jinja\n{{ request.user|has_one_or_more_perms(panel_details.permissions) }}\n</code></pre>"},{"location":"user-guide/platform-functionality/template-filters.html#has_perms","title":"has_perms","text":"<p>Return True if the user has all permissions in the list.</p> <pre><code># Django Template\n{{ request.user|has_perms:group_item_details.permissions }}\n# Jinja\n{{ request.user|has_perms(group_item_details.permissions) }}\n</code></pre>"},{"location":"user-guide/platform-functionality/template-filters.html#humanize_speed","title":"humanize_speed","text":"<p>Humanize speeds given in Kbps.     1544 =&gt; \"1.544 Mbps\"     100000 =&gt; \"100 Mbps\"     10000000 =&gt; \"10 Gbps\"</p> <pre><code>{{ speed_value | humanize_speed }}\n</code></pre>"},{"location":"user-guide/platform-functionality/template-filters.html#hyperlinked_object","title":"hyperlinked_object","text":"<p>Added in version 1.4.0</p> <p>Render and link to a Django model instance, if any, or render a placeholder if not.</p> <p>Uses <code>object.display</code> if available, otherwise uses the string representation of the object. If the object defines <code>get_absolute_url()</code> this will be used to hyperlink the displayed object; additionally if there is an <code>object.description</code> this will be used as the title of the hyperlink.</p> <pre><code>{{ device|hyperlinked_object }}\n</code></pre> <p>Added in version 1.5.0</p> <p>This filter now accepts an optional <code>field</code> parameter, which allows you to use a field other than <code>object.display</code> for the object representation if desired. For example, to display the object's <code>name</code> field instead:</p> <pre><code># Django Template\n{{ location|hyperlinked_object:\"name\" }}\n# Jinja\n{{ location|hyperlinked_object(\"name\") }}\n</code></pre>"},{"location":"user-guide/platform-functionality/template-filters.html#meta","title":"meta","text":"<p>Return the specified Meta attribute of a model.</p> <pre><code>{{ obj | meta('app_label') }}\n</code></pre>"},{"location":"user-guide/platform-functionality/template-filters.html#meters_to_feet","title":"meters_to_feet","text":"<p>Convert a length from meters to feet.</p> <pre><code>{{ meter_value | meters_to_feet }}\n</code></pre>"},{"location":"user-guide/platform-functionality/template-filters.html#percentage","title":"percentage","text":"<p>Return x/y as a percentage.</p> <pre><code># Django Template\n{{ powerfeed.available_power|percentage:total_power }}VA\n# Jinja\n{{ powerfeed.available_power|percentage(total_power) }}\n</code></pre>"},{"location":"user-guide/platform-functionality/template-filters.html#placeholder","title":"placeholder","text":"<p>Render a muted placeholder (<code>&lt;span class=\"text-muted\"&gt;&amp;mdash;&lt;/span&gt;</code>) if value is falsey, else render the provided value.</p> <pre><code>{{ html | placeholder }}\n</code></pre>"},{"location":"user-guide/platform-functionality/template-filters.html#render_boolean","title":"render_boolean","text":"<p>Render HTML from a computed boolean value.</p> <p>If value is (for example) a non-empty string or True or a non-zero number, this renders <code>&lt;span class=\"text-success\"&gt;&lt;i class=\"mdi mdi-check-bold\" title=\"Yes\"&gt;&lt;/i&gt;&lt;/span&gt;</code></p> <p>If value is (for example) \"\" or 0 or False, this renders <code>&lt;span class=\"text-danger\"&gt;&lt;i class=\"mdi mdi-close-thick\" title=\"No\"&gt;&lt;/i&gt;&lt;/span&gt;</code></p> <p>If value is None this renders <code>&lt;span class=\"text-muted\"&gt;&amp;mdash;&lt;/span&gt;</code></p> <pre><code>{{ value | render_boolean }}\n</code></pre>"},{"location":"user-guide/platform-functionality/template-filters.html#render_json","title":"render_json","text":"<p>Render a dictionary as formatted JSON.</p> <pre><code>{{ data | render_json }}\n</code></pre>"},{"location":"user-guide/platform-functionality/template-filters.html#render_markdown","title":"render_markdown","text":"<p>Render text as Markdown.</p> <pre><code>{{ text | render_markdown }}\n</code></pre>"},{"location":"user-guide/platform-functionality/template-filters.html#render_yaml","title":"render_yaml","text":"<p>Render a dictionary as formatted YAML.</p> <pre><code>{{ data | render_yaml }}\n</code></pre>"},{"location":"user-guide/platform-functionality/template-filters.html#settings_or_config","title":"settings_or_config","text":"<p>Get a value from Django settings (if specified) or Constance configuration (otherwise).</p> <pre><code>{{ \"RELEASE_CHECK_URL\" | settings_or_config }}\n</code></pre> <p>Added in version 2.0.0</p> <p>This filter now accepts an optional <code>app_name</code> parameter, which allows you to use this filter for Third-Party Nautobot Apps.</p> <pre><code># Django Template\n{{ \"SAMPLE_VARIABLE\" | settings_or_config:\"example_plugin\" }}\n{{ \"lowercase_example\" | settings_or_config:\"example_plugin\" }}\n</code></pre>"},{"location":"user-guide/platform-functionality/template-filters.html#slugify","title":"slugify","text":"<p>Slugify a string.</p> <pre><code># Django Template\n{{ string | slugify }}\n# Jinja\n{{ string | slugify }}\n</code></pre>"},{"location":"user-guide/platform-functionality/template-filters.html#split","title":"split","text":"<p>Split a string by the given value (default: comma)</p> <pre><code># Django Template\n{{ string | split }}\n{{ string | split:';' }}\n# Jinja\n{{ string | split }}\n{{ string | split(';') }}\n</code></pre>"},{"location":"user-guide/platform-functionality/template-filters.html#tzoffset","title":"tzoffset","text":"<p>Returns the hour offset of a given time zone using the current time.</p> <pre><code>{{ object.time_zone|tzoffset }}\n</code></pre>"},{"location":"user-guide/platform-functionality/template-filters.html#validated_viewname","title":"validated_viewname","text":"<p>Return the view name for the given model and action if valid, or None if invalid.</p> <pre><code># Django Template\n{{ obj | validated_viewname:'list' }}\n# Jinja\n{{ obj | validated_viewname('list') }}\n</code></pre>"},{"location":"user-guide/platform-functionality/template-filters.html#viewname","title":"viewname","text":"<p>Return the view name for the given model and action. Does not perform any validation.</p> <pre><code># Django Template\n{{ obj | viewname:'list' }}\n# Jinja\n{{ obj | viewname('list') }}\n</code></pre>"},{"location":"user-guide/platform-functionality/webhook.html","title":"Webhooks","text":"<p>A webhook is a mechanism for conveying to some external system a change that took place in Nautobot. For example, you may want to notify a monitoring system whenever the status of a device is updated in Nautobot. This can be done by creating a webhook for the device model in Nautobot and identifying the webhook receiver. When Nautobot detects a change to a device, an HTTP request containing the details of the change and who made it be sent to the specified receiver. Webhooks are configured in the web UI under Extensibility &gt; Webhooks.</p>"},{"location":"user-guide/platform-functionality/webhook.html#configuration","title":"Configuration","text":"<ul> <li>Name - A unique name for the webhook. The name is not included with outbound messages.</li> <li>Object type(s) - The type or types of Nautobot object that will trigger the webhook.</li> <li>Enabled - If unchecked, the webhook will be inactive.</li> <li>Events - A webhook may trigger on any combination of create, update, and delete events. At least one event type must be selected.</li> <li>HTTP method - The type of HTTP request to send. Options include <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>PATCH</code>, and <code>DELETE</code>.</li> <li>URL - The fuly-qualified URL of the request to be sent. This may specify a destination port number if needed.</li> <li>HTTP content type - The value of the request's <code>Content-Type</code> header. (Defaults to <code>application/json</code>)</li> <li>Additional headers - Any additional headers to include with the request (optional). Add one header per line in the format <code>Name: Value</code>. Jinja2 templating is supported for this field (see below).</li> <li>Body template - The content of the request being sent (optional). Jinja2 templating is supported for this field (see below). If blank, Nautobot will populate the request body with a raw dump of the webhook context. (If the HTTP content-type is set to <code>application/json</code>, this will be formatted as a JSON object.)</li> <li>Secret - A secret string used to prove authenticity of the request (optional). This will append a <code>X-Hook-Signature</code> header to the request, consisting of a HMAC (SHA-512) hex digest of the request body using the secret as the key.</li> <li>SSL verification - Uncheck this option to disable validation of the receiver's SSL certificate. (Disable with caution!)</li> <li>CA file path - The file path to a particular certificate authority (CA) file to use when validating the receiver's SSL certificate (optional).</li> </ul>"},{"location":"user-guide/platform-functionality/webhook.html#jinja2-template-support","title":"Jinja2 Template Support","text":"<p>Jinja2 templating is supported for the <code>additional_headers</code> and <code>body_template</code> fields. This enables the user to convey object data in the request headers as well as to craft a customized request body. Request content can be crafted to enable the direct interaction with external systems by ensuring the outgoing message is in a format the receiver expects and understands.</p> <p>For example, you might create a Nautobot webhook to trigger a Slack message any time an IP address is created. You can accomplish this using the following configuration:</p> <ul> <li>Object type: IPAM &gt; IP address</li> <li>HTTP method: <code>POST</code></li> <li>URL: Slack incoming webhook URL</li> <li>HTTP content type: <code>application/json</code></li> <li>Body template: <code>{\"text\": \"IP address {{ data['address'] }} was created by {{ username }}!\"}</code></li> </ul>"},{"location":"user-guide/platform-functionality/webhook.html#available-context","title":"Available Context","text":"<p>The following data is available as context for Jinja2 templates:</p> <ul> <li><code>event</code> - The type of event which triggered the webhook: created, updated, or deleted.</li> <li><code>model</code> - The Nautobot model which triggered the change.</li> <li><code>timestamp</code> - The time at which the event occurred (in ISO 8601 format).</li> <li><code>username</code> - The name of the user account associated with the change.</li> <li><code>request_id</code> - The unique request ID. This may be used to correlate multiple changes associated with a single request.</li> <li><code>data</code> - A serialized representation of the object after the change was made. This is typically equivalent to the model's representation in Nautobot's REST API.</li> </ul> <p>Added in version 1.3.0</p> <ul> <li><code>snapshots</code> - snapshots of the serialized object state both before and after the change was made; provided as a dictionary with keys named <code>prechange</code>, <code>postchange</code> and <code>differences</code>.</li> </ul>"},{"location":"user-guide/platform-functionality/webhook.html#default-request-body","title":"Default Request Body","text":"<p>If no body template is specified, the request body will be populated with a JSON object containing the context data. For example, a newly created Location might appear as follows:</p> <pre><code>{\n    \"event\": \"created\",\n    \"timestamp\": \"2023-02-14 12:34:56.000000+00:00\",\n    \"model\": \"location\",\n    \"username\": \"admin\",\n    \"request_id\": \"fab0a4fb-52ba-4cb4-9756-4e6a3ac05332\",\n    \"data\": {\n        \"id\": \"5e4f9a91-372b-46df-a50a-c26357475bee\",\n        \"display\": \"Campus A\",\n        \"url\": \"/api/dcim/locations/5e4f9a91-372b-46df-a50a-c26357475bee/\",\n        \"name\": \"Campus A\",\n        \"status\": {\n            \"display\": \"Active\",\n            \"id\": \"363a431c-c784-40b5-8513-758cafd174ad\",\n            \"url\": \"/api/extras/statuses/363a431c-c784-40b5-8513-758cafd174ad/\",\n            \"name\": \"Active\",\n            \"created\": \"2023-02-14T00:00:00Z\",\n            \"last_updated\": \"2023-02-14T19:40:13.216150Z\"\n        },\n        ...\n    },\n    \"snapshots\": {\n        \"prechange\": null,\n        \"postchange\": {\n            \"id\": \"5e4f9a91-372b-46df-a50a-c26357475bee\",\n            \"asn\": null,\n            \"url\": \"/api/dcim/locations/5e4f9a91-372b-46df-a50a-c26357475bee/\",\n            \"name\": \"Campus A\",\n            ...\n        },\n        \"differences\": {\n            \"removed\": null,\n            \"added\": {\n                \"id\": \"5e4f9a91-372b-46df-a50a-c26357475bee\",\n                \"asn\": null,\n                \"url\": \"/api/dcim/locations/5e4f9a91-372b-46df-a50a-c26357475bee/\",\n                \"name\": \"Campus A\",\n                ...\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"user-guide/platform-functionality/webhook.html#webhook-processing","title":"Webhook Processing","text":"<p>When a change is detected, any resulting webhooks are placed into a Redis queue for processing. This allows the user's request to complete without needing to wait for the outgoing webhook(s) to be processed. The webhooks are then extracted from the queue by the <code>celery worker</code> process and HTTP requests are sent to their respective destinations.</p> <p>A request is considered successful if the response has a 2XX status code; otherwise, the request is marked as having failed. Failed requests may be retried manually via the admin UI.</p>"},{"location":"user-guide/platform-functionality/webhook.html#troubleshooting","title":"Troubleshooting","text":"<p>To assist with verifying that the content of outgoing webhooks is rendered correctly, Nautobot provides a simple HTTP listener that can be run locally to receive and display webhook requests. First, modify the target URL of the desired webhook to <code>http://localhost:9000/</code>. This will instruct Nautobot to send the request to the local server on TCP port 9000. Then, start the webhook receiver service from the Nautobot root directory:</p> <pre><code>nautobot-server webhook_receiver\n</code></pre> <p>Example output:</p> <pre><code>Listening on port http://localhost:9000. Stop with CONTROL-C.\n</code></pre> <p>You can test the receiver itself by sending any HTTP request to it. For example:</p> <pre><code>curl -X POST http://localhost:9000 --data '{\"foo\": \"bar\"}'\n</code></pre> <p>The server will print output similar to the following:</p> <pre><code>[1] Tue, 07 Apr 2020 17:44:02 GMT 127.0.0.1 \"POST / HTTP/1.1\" 200 -\nHost: localhost:9000\nUser-Agent: curl/7.58.0\nAccept: */*\nContent-Length: 14\nContent-Type: application/x-www-form-urlencoded\n\n{\"foo\": \"bar\"}\n------------\n</code></pre> <p>Note that <code>webhook_receiver</code> does not actually do anything with the information received: It merely prints the request headers and body for inspection.</p> <p>Now, when the Nautobot webhook is triggered and processed, you should see its headers and content appear in the terminal where the webhook receiver is listening. If you don't, check that the <code>celery worker</code> process is running.</p>"},{"location":"user-guide/platform-functionality/jobs/index.html","title":"Jobs","text":"<p>Jobs are a way for users to execute custom logic on demand from within the Nautobot UI. Jobs can interact directly with Nautobot data to accomplish various data creation, modification, and validation tasks, such as:</p> <ul> <li>Automatically populate new devices and cables in preparation for a new location deployment</li> <li>Create a range of new reserved prefixes or IP addresses</li> <li>Fetch data from an external source and import it to Nautobot</li> <li>Check and report whether all top-of-rack switches have a console connection</li> <li>Check and report whether every router has a loopback interface with an assigned IP address</li> <li>Check and report whether all IP addresses have a parent prefix</li> </ul> <p>...and so on. Jobs are Python code and exist outside of the official Nautobot code base, so they can be updated and changed without interfering with the core Nautobot installation. And because they're completely customizable, there's practically no limit to what a job can accomplish.</p> <p>Changed in version 2.0.0</p> <p>Backwards compatibility with NetBox scripts and reports has been removed. This includes removal of automatic calls to the <code>post_run()</code> and <code>test_*()</code> methods.</p> <p>Note</p> <p>Jobs unify and supersede the functionality previously provided in NetBox by \"custom scripts\" and \"reports\". User input is supported via job variables.</p>"},{"location":"user-guide/platform-functionality/jobs/index.html#managing-jobs","title":"Managing Jobs","text":"<p>As of Nautobot 1.3, each Job class installed in Nautobot is represented by a corresponding Job data record in the Nautobot database. These data records are refreshed when the <code>nautobot-server migrate</code> or <code>nautobot-server post_upgrade</code> command is run, or (for Jobs from a Git repository) when a Git repository is enabled or re-synced in Nautobot. These data records make it possible for an administrative user (or other user with appropriate access privileges) to exert a level of administrative control over the Jobs created and updated by Job authors.</p>"},{"location":"user-guide/platform-functionality/jobs/index.html#enabling-jobs-for-running","title":"Enabling Jobs for Running","text":"<p>When a new Job record is created for a newly discovered Job class, it defaults to <code>enabled = False</code>, which prevents the Job from being run by any user. This is intended to provide a level of security and oversight regarding the installation of new Jobs into Nautobot.</p> <p>Important</p> <p>One exception to this default is when upgrading from a Nautobot release before 1.3 to Nautobot 1.3.0 or later. In this case, at the time of the upgrade, any Job class that shows evidence of having been run or scheduled under the older Nautobot version (that is, there is at least one JobResult and/or ScheduledJob record that references this Job class) will result in the creation of a Job database record with <code>enabled = True</code>. The reasoning for this feature is the assertion that because the Job has been run or scheduled previously, it has presumably already undergone appropriate review at that time, and so it should remain possible to run it as it was possible before the upgrade.</p> <p>An administrator or user with <code>extras.change_job</code> permission can edit the Job to change it to <code>enabled = True</code>, permitting running of the Job, when they have completed any appropriate review of the new Job to ensure that it meets their standards. Similarly, an obsolete or no-longer-used Job can be prevented from inadvertent execution by changing it back to <code>enabled = False</code>.</p> <p>By default when a Job is installed into Nautobot it is installed in a disabled state. In order to enable a Job:</p> <ul> <li>Navigate to Jobs &gt; Jobs menu</li> <li>Select a job that has been installed</li> <li>Select Edit button</li> <li>In the second section titled Job, select the Enabled checkbox</li> <li>Select Update button at the bottom</li> </ul>"},{"location":"user-guide/platform-functionality/jobs/index.html#enabling-job-hooks","title":"Enabling Job Hooks","text":"<p>Job hooks are enabled in a similar fashion, but by using the default filters when navigating to the Jobs page the Job Hooks will not be visible. To enable job hooks:</p> <ul> <li>Navigate to Jobs &gt; Jobs menu</li> <li>Select the Filter button to bring up the Filter Jobs context</li> <li>Look for Is job hook receiver and change the drop down to Yes</li> <li>Select Apply button</li> <li>Select a job that has been installed</li> <li>Select Edit button</li> <li>In the second section titled Job, select the Enabled checkbox</li> <li>Select Update button at the bottom</li> </ul>"},{"location":"user-guide/platform-functionality/jobs/index.html#overriding-metadata","title":"Overriding Metadata","text":"<p>An administrator or user with <code>extras.change_job</code> permission can also edit a Job database record to optionally override any or all of the following metadata attributes defined by the Job module or class:</p> <ul> <li><code>grouping</code></li> <li><code>name</code></li> <li><code>description</code></li> <li><code>approval_required</code></li> <li><code>dryrun_default</code></li> <li><code>has_sensitive_variables</code></li> <li><code>hidden</code></li> <li><code>soft_time_limit</code></li> <li><code>time_limit</code></li> <li><code>task_queues</code></li> </ul> <p>This is done by setting the corresponding \"override\" flag (<code>grouping_override</code>, <code>name_override</code>, etc.) to <code>True</code> then providing a new value for the attribute in question. An overridden attribute will remain set to its overridden value even if the underlying Job class definition changes and <code>nautobot-server &lt;migrate|post_upgrade&gt;</code> gets run again. Conversely, clearing the \"override\" flag for an attribute and saving the database record will revert the attribute to the underlying value defined within the Job class source code.</p>"},{"location":"user-guide/platform-functionality/jobs/index.html#deleting-jobs","title":"Deleting Jobs","text":"<p>When a previously installed Job class is removed, after running <code>nautobot-server &lt;migrate|post_upgrade&gt;</code> or refreshing the providing Git repository, the Job database record will not be automatically deleted, but will be flagged as <code>installed = False</code> and can no longer be run or scheduled.</p> <p>An administrator or user with <code>extras.delete_job</code> permissions may delete such a Job database record if desired, but be aware that doing so will result in any existing JobResult or ScheduledJob records that originated from this Job losing their association to the Job; this association will not be automatically restored even if the Job is later reinstalled or reintroduced.</p>"},{"location":"user-guide/platform-functionality/jobs/index.html#running-jobs","title":"Running Jobs","text":"<p>Note</p> <p>To run any job, a user must be assigned the <code>extras.run_job</code> permission. This is achieved by assigning the user (or group) a permission on the <code>extras &gt; job</code> object and specifying the <code>run</code> action in the admin UI as shown below.</p> <p>Similarly, to approve a job request by another user, a user must be assigned the <code>extras.approve_job</code> permission via the same process. Job approvers also need the <code>extras.change_scheduledjob</code> and/or <code>extras.delete_scheduledjob</code> permissions as job approvals are implemented via the <code>ScheduledJob</code> data model.</p> <p></p>"},{"location":"user-guide/platform-functionality/jobs/index.html#jobs-and-class_path","title":"Jobs and <code>class_path</code>","text":"<p>Changed in version 2.0.0</p> <p>The <code>class_path</code> concept has been simplified compared to Nautobot 1.x.</p> <p>It is a key concept to understand the 2 <code>class_path</code> elements:</p> <ul> <li><code>module_name</code>: which is the importable Python path to the job definition (with <code>.</code> in place of <code>/</code> in the directory path, and not including the <code>.py</code> file extension, as per Python syntax standards).<ul> <li>For a plugin-provided job, this might be something like <code>my_plugin_name.jobs.my_job_filename</code> or <code>nautobot_golden_config.jobs</code></li> <li>For a locally installed job, this would match the file name, such as <code>my_job_filename</code></li> <li>For a Git-provided job, this includes the repository's defined <code>slug</code>, such as <code>my_repository.jobs.my_job_filename</code></li> </ul> </li> <li><code>JobClassName</code>: which is the name of the class inheriting from <code>nautobot.extras.jobs.Job</code> contained in the above file.</li> </ul> <p>The <code>class_path</code> is often represented as a string in the format of <code>&lt;module_name&gt;.&lt;JobClassName&gt;</code>, such as <code>example.MyJobWithNoVars</code> or <code>nautobot_golden_config.jobs.BackupJob</code>. Understanding the definitions of these elements will be important in running jobs programmatically.</p> <p>Changed in version 1.3.0</p> <p>With the addition of Job database models, it is now generally possible and preferable to refer to a job by its UUID primary key, similar to other Nautobot database models, rather than its <code>class_path</code>.</p> <p>Changed in version 2.0.0</p> <p>The Job database model <code>name</code> field is now enforced to be globally unique and so is also an option for uniquely identifying Job records.</p>"},{"location":"user-guide/platform-functionality/jobs/index.html#via-the-web-ui","title":"Via the Web UI","text":"<p>Jobs can be run via the web UI by navigating to the job, completing any required form data (if any), and clicking the \"Run Job\" button.</p> <p>Once a job has been run, the latest <code>JobResult</code> for that job will be summarized in the job list view.</p>"},{"location":"user-guide/platform-functionality/jobs/index.html#via-the-rest-api","title":"Via the REST API","text":"<p>Removed in version 2.0.0</p> <p>The <code>commit</code> parameter was removed. All job input should be provided via the <code>data</code> parameter.</p> <p>To run a job via the REST API, issue a POST request to the job's endpoint <code>/api/extras/jobs/&lt;uuid&gt;/run/</code> or <code>/api/extras/jobs/&lt;name&gt;/run/</code>. You can optionally provide JSON data to specify any required user input <code>data</code>, optional <code>task_queue</code>, and/or provide optional scheduling information as described in the section on scheduling and approvals.</p> <p>Added in version 2.0.0</p> <p>The <code>/api/extras/jobs/&lt;name&gt;/</code> REST API endpoints were added as an alternative to <code>/api/extras/jobs/&lt;uuid&gt;/</code>.</p> <p>For example, to run a job, by UUID, with no user inputs:</p> <pre><code>curl -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; version=1.3; indent=4\" \\\nhttp://nautobot/api/extras/jobs/$JOB_ID/run/\n</code></pre> <p>Or to run a job, by name, that expects user inputs:</p> <pre><code>curl -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; version=1.3; indent=4\" \\\nhttp://nautobot/api/extras/jobs/$JOB_NAME/run/ \\\n--data '{\"data\": {\"string_variable\": \"somevalue\", \"integer_variable\": 123}}'\n</code></pre> <p>When providing input data, it is possible to specify complex values contained in <code>ObjectVar</code>s, <code>MultiObjectVar</code>s, and <code>IPAddressVar</code>s.</p> <ul> <li><code>ObjectVar</code>s can be specified by either using their primary key directly as the value, or as a dictionary containing a more complicated query that gets passed into the Django ORM as keyword arguments.</li> <li><code>MultiObjectVar</code>s can be specified as a list of primary keys.</li> <li><code>IPAddressVar</code>s can be provided as strings in CIDR notation.</li> </ul>"},{"location":"user-guide/platform-functionality/jobs/index.html#jobs-with-files","title":"Jobs with Files","text":"<p>To run a job that contains <code>FileVar</code> inputs via the REST API, you must use <code>multipart/form-data</code> content type requests instead of <code>application/json</code>. This also requires a slightly different request payload than the example above. The <code>task_queue</code> and <code>schedule</code> data are flattened and prefixed with underscore to differentiate them from job-specific data. Job specific data is also flattened and not located under the top-level <code>data</code> dictionary key.</p> <p>An example of running a job with both <code>FileVar</code> (named <code>myfile</code>) and <code>StringVar</code> (named <code>interval</code>) input:</p> <pre><code>curl -X POST \\\n-H 'Authorization: Token $TOKEN' \\\n-H 'Content-Type: multipart/form-data' \\\n-H \"Accept: application/json; version=1.3; indent=4\" \\\n'http://nautobot/api/extras/jobs/$JOB_NAME/run/' \\\n-F '_schedule_interval=\"immediately\"' \\\n-F '_schedule_start_time=\"2022-10-18T17:31:23.698Z\"' \\\n-F 'interval=\"3\"' \\\n-F 'myfile=@\"/path/to/my/file.txt\"' \\\n</code></pre>"},{"location":"user-guide/platform-functionality/jobs/index.html#via-the-cli","title":"Via the CLI","text":"<p>Jobs can be run from the CLI by invoking the management command:</p> <pre><code>nautobot-server runjob [--username &lt;username&gt;] [--local] [--data &lt;data&gt;] &lt;class_path&gt;\n</code></pre> <p>Note</p> <p>See above for <code>class_path</code> definitions.</p> <p>Added in version 1.3.10</p> <p>The <code>--data</code> and <code>--local</code> parameters were added.</p> <p>The <code>--data</code> parameter must be a JSON string, e.g. <code>--data='{\"string_variable\": \"somevalue\", \"integer_variable\": 123}'</code></p> <p>Using the same example shown in the API:</p> <pre><code>nautobot-server runjob --username myusername example.MyJobWithNoVars\n</code></pre> <p>Warning</p> <p>The <code>--username &lt;username&gt;</code> must be supplied to specify the user that will be identified as the requester of the job.</p> <p>Note that <code>nautobot-server</code> commands, like all management commands and other direct interactions with the Django database, are not gated by the usual Nautobot user authentication flow. It is possible to specify any existing <code>--username</code> with the <code>nautobot-server runjob</code> command in order to impersonate any defined user in Nautobot. Use this power wisely and be cautious who you allow to access it.</p>"},{"location":"user-guide/platform-functionality/jobs/job-scheduling-and-approvals.html","title":"Job Scheduling and Approvals","text":"<p>Added in version 1.2.0</p> <p>Oftentimes jobs will need to be run at a later date or periodically, or require approval from someone before they can be started. To this end, Nautobot offers facilities for scheduling and approving jobs.</p>"},{"location":"user-guide/platform-functionality/jobs/job-scheduling-and-approvals.html#job-scheduling","title":"Job Scheduling","text":"<p>Jobs can be scheduled to be run immediately, at some point in the future, or at an interval.</p> <p>Jobs can be scheduled through the UI or the API.</p> <p>Warning</p> <p>A Job must be enabled and cannot have has_sensitive_variables set to <code>True</code> in order to be scheduled. If these requirements are not met, a warning banner will appear on the run Job view with the reason why Job Scheduling is not an option.</p>"},{"location":"user-guide/platform-functionality/jobs/job-scheduling-and-approvals.html#scheduling-via-the-ui","title":"Scheduling via the UI","text":"<p>The Job Scheduling views can be accessed via the navigation at <code>Jobs &gt; Jobs</code>, selecting a Job as appropriate.</p> <p>The UI allows you to select a scheduling type. Further fields will be displayed as appropriate for that schedule type.</p> <p>If <code>Recurring custom</code> is chosen, you can schedule the recurrence in the <code>Crontab</code> field in crontab syntax.</p> <p>If the job requires no approval, it will then be added to the queue of scheduled jobs or run immediately. Otherwise, the job will be added to the approval queue where it can be approved by other users.</p>"},{"location":"user-guide/platform-functionality/jobs/job-scheduling-and-approvals.html#scheduling-via-the-api","title":"Scheduling via the API","text":"<p>Jobs can also be scheduled via the REST API. The endpoint used for this is the regular job endpoint; specifying the optional <code>schedule</code> parameter will act just as scheduling in the UI.</p> <pre><code>curl -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; version=1.3; indent=4\" \\\nhttp://nautobot/api/extras/jobs/$JOB_ID/run/ \\\n--data '{\"schedule\": {\"name\": \"test\", \"interval\": \"future\", \"start_time\": \"2030-01-01T01:00:00.000Z\"}}'\n</code></pre> <p>For custom interval, a <code>crontab</code> parameter must be added.</p> <p><code>start_time</code> becomes optional when <code>interval</code> is set to <code>custom</code>.</p> <p><code>--data '{\"schedule\": {\"name\": \"test\", \"interval\": \"custom\", \"start_time\": \"2030-01-01T01:00:00.000Z\", \"crontab\": \"*/15 * * * *\"}}'</code></p>"},{"location":"user-guide/platform-functionality/jobs/job-scheduling-and-approvals.html#job-approvals","title":"Job Approvals","text":"<p>Jobs that have <code>approval_required</code> set to <code>True</code> on their <code>Meta</code> object require another user to approve a scheduled job.</p> <p>Warning</p> <p>Requiring approval for execution of Job Hooks by setting the <code>Meta.approval_required</code> attribute to <code>True</code> on your <code>JobHookReceiver</code> subclass is not supported. The value of this attribute will be ignored. Support for requiring approval of Job Hooks will be added in a future release.</p> <p>Scheduled jobs can be approved or denied via the UI and API by any user that has the <code>extras.approve_job</code> permission for the job in question, as well as the appropriate <code>extras.change_scheduledjob</code> and/or <code>extras.delete_scheduledjob</code> permissions.</p> <p>Changed in version 1.3.0</p> <p>The <code>extras.approve_job</code> permission is now required for job approvers.</p> <p>Note</p> <p>Jobs that are past their scheduled run date can still be approved, but the approver will be asked to confirm the operation.</p>"},{"location":"user-guide/platform-functionality/jobs/job-scheduling-and-approvals.html#approval-via-the-ui","title":"Approval via the UI","text":"<p>The queue of jobs that need approval can be found under <code>Jobs &gt; Job Approval Queue</code>. This view lists all currently requested jobs that need approval before they are run. To approve a job, select it and click the button to approve. Please note that you will be  asked for confirmation if a job is being approved that is past its scheduled date and time.</p> <p>If the approver is unsure what a job would do, a dry run can also be started via that same view.</p>"},{"location":"user-guide/platform-functionality/jobs/job-scheduling-and-approvals.html#approval-via-the-api","title":"Approval via the API","text":"<p>Approvals can also be given via the REST API. The endpoints to approve, deny, and dry run a scheduled job are found on the scheduled job endpoint under <code>approve</code>, <code>deny</code>, and <code>dry-run</code>, respectively.</p> <pre><code>curl -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; version=1.3; indent=4\" \\\nhttp://nautobot/api/extras/scheduled-jobs/$JOB_ID/approve?force=true\n</code></pre> <p>The approval endpoint additionally provides a <code>force</code> query parameter that needs to be set if a job is past its scheduled datetime. This mimics the confirmation dialog in the UI.</p>"},{"location":"user-guide/platform-functionality/jobs/jobbutton.html","title":"Job Buttons","text":"<p>Added in version 1.5.14</p> <p>Job Buttons are predefined buttons that allow users to run jobs directly from within Nautobot object views. It uses the object where the button was pressed as the only input to the job. These are helpful when you want to start a job that requires minimal or no input without having to use the standard job form. For example, you may have a job that only requires a user to select a device. Instead, they can now go to that device in the web UI and click the associated Job Button instead.</p> <p>Job Buttons can be created in web UI located in the navbar under Jobs &gt; Job Buttons. Each button can be associated with multiple Nautobot object types (location, device, prefix, etc.) and will be displayed on all of the associated object detail views. The text displayed on the button supports Jinja2 templating which allows for using context data to dynamically update or even be hidden under certain conditions.</p> <p>The buttons appear at the top right corner of an object's individual detail page for each object type they are associated to. They can be either individual buttons or grouped together in a dropdown for better organization. Buttons will be sorted from left to right based on their <code>weight</code> with the lowest <code>weight</code> button on the left. Any groups of buttons will be displayed to the right of all ungrouped buttons. Group dropdown buttons will inherit the button class from the button with the lowest <code>weight</code> in the group and will be sorted from top to bottom with the lowest <code>weight</code> button on top.</p>"},{"location":"user-guide/platform-functionality/jobs/jobbutton.html#configuration","title":"Configuration","text":"<ul> <li>Name - A unique name for the Job Button.</li> <li>Object type(s) - The type or types of Nautobot object that the button will be associated to.</li> <li>Text - The text that will be displayed on the button.</li> <li>Job - The Job Button Receiver that this button will run.</li> <li>Weight - The number used for determining the order the buttons will appear.</li> <li>Group - The name of the dropdown group to add this button into (optional).</li> <li>Button Class - The button CSS class, which dictates the color.</li> <li>Confirmation - Should the button pop up a confirmation dialog before running.</li> </ul> <p>Warning</p> <p>As you can see, there is no <code>commit</code> option for a Job Button like there is for a normal Job. All Job Buttons will run with <code>commit=True</code> implicitly.</p> <p></p> <p>For any Job that is loaded into Nautobot, the Job must be enabled to run. See Enabling Jobs for Running for more details.</p>"},{"location":"user-guide/platform-functionality/jobs/jobbutton.html#required-permissions","title":"Required Permissions","text":"<p>Note</p> <p>In order to run any job via a Job Button, a user must be assigned the <code>extras.run_job</code> as well as the <code>extras.run_jobbutton</code> permissions. This is achieved by assigning the user (or group) a permission on the <code>extras &gt; job</code> and <code>extras &gt; jobbutton</code> objects and specifying the <code>run</code> action in the Additional actions section. Any user lacking these permissions may still see the button on the respective page(s) - if not using conditional rendering - but they will be disabled.</p>"},{"location":"user-guide/platform-functionality/jobs/jobbutton.html#context-data","title":"Context Data","text":"<p>The following context data is available within the template when rendering a Job Button's text.</p> Variable Description <code>obj</code> The Nautobot object being displayed <code>debug</code> A boolean indicating whether debugging is enabled <code>request</code> The current WSGI request <code>user</code> The current user (if authenticated) <code>perms</code> The permissions assigned to the user <p>All built-in Jinja2 filters are available and it's also possible to develop and register custom Jinja2 filters.</p>"},{"location":"user-guide/platform-functionality/jobs/jobbutton.html#conditional-rendering","title":"Conditional Rendering","text":"<p>Only buttons which render with non-empty text are included on the page. You can employ conditional Jinja2 logic to control the conditions under which a button gets rendered.</p> <p>For example, if you only want to display a button for active devices, you could set the button text to</p> <pre><code>{% if obj.status.name == 'Active' %}Provision{% endif %}\n</code></pre> <p>The button will not appear when viewing a device with any status other than <code>Active</code>.</p> <p>As another example, if you wanted to show only devices belonging to a certain manufacturer, you could do something like this:</p> <pre><code>{% if obj.device_type.manufacturer.name == 'Cisco' %}Provision{% endif %}\n</code></pre> <p>The button will only appear when viewing a device with a manufacturer name of <code>Cisco</code>.</p> <p>As a last example, you can hide the button for users that lack the proper permissions to run a job like this:</p> <pre><code>{% if perms.extras.run_job %}Provision{% endif %}\n</code></pre> <p>The button will only appear if they have the permission to run jobs.</p> <p></p> <p>Note</p> <p>To access custom fields of an object within a template, use the <code>cf</code> attribute. For example, <code>{{ obj.cf.color }}</code> will return the value (if any) for the custom field with a key of <code>color</code> on <code>obj</code>.</p>"},{"location":"user-guide/platform-functionality/jobs/jobhook.html","title":"Job Hooks","text":"<p>Added in version 1.4.0</p> <p>A Job Hook is a mechanism for automatically starting a job when an object is changed. Job Hooks are similar to webhooks except that an object change event initiates a <code>JobHookReceiver</code> job instead of a web request. Job hooks are configured in the web UI under Jobs &gt; Job Hooks.</p>"},{"location":"user-guide/platform-functionality/jobs/jobhook.html#configuration","title":"Configuration","text":"<ul> <li>Name - A unique name for the job hook.</li> <li>Content type(s) - The type or types of Nautobot object that will trigger the job hook.</li> <li>Job - The job hook receiver that this job hook will run.</li> <li>Enabled - If unchecked, the job hook will be inactive.</li> <li>Events - A job hook may trigger on any combination of create, update, and delete events. At least one event type must be selected.</li> </ul> <p>For any Job that is loaded into Nautobot, the Job must be enabled to run. See Enabling Jobs for Running for more details.</p>"},{"location":"user-guide/platform-functionality/jobs/models.html","title":"Job Models","text":""},{"location":"user-guide/platform-functionality/jobs/models.html#job","title":"Job","text":"<p>Added in version 1.3.0</p> <p>The Job data model provides a database representation of metadata describing a specific installed Job. It also serves as an anchor point for other data models (JobResult and ScheduledJob in particular) to link against.</p> <p>For any given Job record, most of its fields are populated initially from data defined in the source code of the corresponding job class. These fields may be explicitly overridden by editing the Job record via the Nautobot UI or REST API if desired. This is generally accomplished by setting a value for the desired field (e.g. <code>grouping</code>) and also setting the corresponding <code>override</code> flag (e.g. <code>grouping_override</code>) to <code>True</code>. If the <code>override</code> flag for a field is cleared (set back to <code>False</code>) then the corresponding flag will automatically revert to the original value defined by the Job class source code when the record is saved.</p> <p>Note</p> <p>For metadata fields that are not explicitly overridden, changes in the job source code will be detected and reflected in the corresponding database records when <code>nautobot-server migrate</code> or <code>nautobot-server post_upgrade</code> is next run; changes are not detected \"live\" while the server is running.</p> <p>For jobs stored in Git repositories, re-syncing the Git repository will also refresh the Job records corresponding to this repository.</p> <p>Records of this type store the following data as read-only (not modifiable via the UI or REST API):</p> <ul> <li>The source of the job (local installation, Git repository, plugin)</li> <li>The name of the module containing the Job</li> <li>The name of the Job class</li> <li>Whether the job is installed presently</li> <li>Whether the job is read-only</li> <li>Whether the job is a Job Hook Receiver</li> <li>Whether the job is a Job Button Receiver</li> </ul> <p>Note</p> <p>As presently implemented, after a job is uninstalled, when the database is next refreshed, the corresponding Job database record will not be deleted - only its <code>installed</code> flag will be set to False. This allows existing <code>JobResult</code> and <code>ScheduledJob</code> records to continue to reference the Job that they originated from.</p> <p>An administrator or sufficiently privileged user can manually delete uninstalled Job records if desired, though this will result in the foreign-key from the corresponding <code>JobResult</code> and <code>ScheduledJob</code> records (if any exist) becoming null. In any case, for tracking and auditing purposes, deleting a Job does not automatically delete its related <code>JobResult</code> and <code>ScheduledJob</code> records.</p> <p>For any Job that is loaded into Nautobot, the Job must be enabled to run. See Enabling Jobs for Running for more details.</p>"},{"location":"user-guide/platform-functionality/jobs/models.html#job-log-entry","title":"Job Log Entry","text":"<p>Added in version 1.2.0</p> <p>Log messages from Jobs are stored in as <code>JobLogEntry</code> objects. This allows more performant querying of log messages and even allows viewing of logs while the job is still running.</p> <p>Records of this type store the following data:</p> <ul> <li>A reference to the <code>JobResult</code> object that created the log.</li> <li>Timestamps indicating when the log message was created.</li> <li>The logging level of the log message.</li> <li>The log message.</li> <li>If provided, the string format of the logged object and it's absolute url.</li> </ul> <p>Added in version 1.2.2</p> <p>REST API and GraphQL support for querying <code>JobLogEntry</code> records were added.</p>"},{"location":"user-guide/platform-functionality/jobs/models.html#job-results","title":"Job Results","text":"<p>Nautobot provides a generic data model for storing and reporting the results of background tasks, such as the execution of custom jobs or the synchronization of data from a Git repository.</p> <p>Records of this type store the following data:</p> <ul> <li>A reference to the job model that the task was associated with</li> <li>A reference to the user who initiated the task</li> <li>If initiated by a scheduled job, a reference to that scheduled job instance</li> <li>The arguments that were passed to the task (allowing for later queuing of the task for re-execution if desired)</li> <li>Timestamps indicating when the task was created and when it completed</li> <li>An overall status such as \"pending\", \"running\", \"errored\", or \"completed\".</li> <li>A block of structured data representing the return value from the <code>.run()</code> method (often rendered as JSON).</li> </ul> <p>Changed in version 1.2.0</p> <p>Note that prior to Nautobot 1.2, job log records were stored in the <code>data</code> field; they are now stored as distinct <code>JobLogEntry</code> records instead.</p>"},{"location":"user-guide/platform-functionality/rest-api/authentication.html","title":"REST API Authentication","text":"<p>The Nautobot REST API primarily employs token-based authentication. For convenience, cookie-based authentication can also be used when navigating the browseable API.</p> <p>See the documentation on the token model.</p>"},{"location":"user-guide/platform-functionality/rest-api/authentication.html#authenticating-to-the-api","title":"Authenticating to the API","text":"<p>An authentication token is attached to a request by setting the <code>Authorization</code> header to the string <code>Token</code> followed by a space and the user's token:</p> <pre><code>curl -H \"Authorization: Token $TOKEN\" \\\n-H \"Accept: application/json; indent=4\" \\\nhttp://nautobot/api/dcim/locations/\n</code></pre> <pre><code>{\n\"count\": 10,\n\"next\": null,\n\"previous\": null,\n\"results\": [...]\n}\n</code></pre> <p>A token is not required for read-only operations which have been exempted from permissions enforcement (using the <code>EXEMPT_VIEW_PERMISSIONS</code> configuration parameter). However, if a token is required but not present in a request, the API will return a 403 (Forbidden) response:</p> <pre><code>curl http://nautobot/api/dcim/locations/\n</code></pre> <pre><code>{\n\"detail\": \"Authentication credentials were not provided.\"\n}\n</code></pre>"},{"location":"user-guide/platform-functionality/rest-api/authentication.html#initial-token-provisioning","title":"Initial Token Provisioning","text":"<p>Added in version 1.3.0</p> <p>Ideally, each user should provision his or her own REST API token(s) via the web UI. However, you may encounter where a token must be created by a user via the REST API itself. Nautobot provides a special endpoint to provision tokens using a valid username and password combination.</p> <p>To provision a token via the REST API, make a <code>POST</code> request to the <code>/api/users/tokens/</code> endpoint:</p> <pre><code>curl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\n-u \"hankhill:I&lt;3C3H8\" \\\nhttps://nautobot/api/users/tokens/\n</code></pre> <p>Note that we are not passing an existing REST API token with this request. If the supplied credentials are valid, a new REST API token will be automatically created for the user. Note that the key will be automatically generated, and write ability will be enabled.</p> <pre><code>{\n\"id\": \"e87e6ee9-1ab2-46c6-ad7f-3d4697c33d13\",\n\"url\": \"https://nautobot/api/users/tokens/e87e6ee9-1ab2-46c6-ad7f-3d4697c33d13/\",\n\"display\": \"3c9cb9 (hankhill)\",\n\"created\": \"2021-06-11T20:09:13.339367Z\",\n\"expires\": null,\n\"key\": \"9fc9b897abec9ada2da6aec9dbc34596293c9cb9\",\n\"write_enabled\": true,\n\"description\": \"\"\n}\n</code></pre>"},{"location":"user-guide/platform-functionality/rest-api/filtering.html","title":"REST API Filtering","text":""},{"location":"user-guide/platform-functionality/rest-api/filtering.html#filtering-objects","title":"Filtering Objects","text":"<p>The objects returned by an API list endpoint can be filtered by attaching one or more query parameters to the request URL. For example, <code>GET /api/dcim/locations/?status=active</code> will return only locations with a status of \"active.\"</p> <p>Multiple parameters can be joined to further narrow results. For example, <code>GET /api/dcim/locations/?status=active&amp;parent=europe&amp;location_type=country</code> will return only active \"country\" type locations in Europe.</p> <p>Generally, passing multiple values for a single parameter will result in a logical OR operation. For example, <code>GET /api/dcim/locations/?parent=north-america&amp;parent=south-america&amp;location_type=country</code> will return \"country\" type locations in North America or South America. However, a logical AND operation will be used in instances where a field may have multiple values, such as tags. For example, <code>GET /api/dcim/locations/?tag=foo&amp;tag=bar</code> will return only locations which have both the \"foo\" and \"bar\" tags applied.</p> <p>Changed in version 1.4.0</p> <p>If STRICT_FILTERING is True (its default value), unrecognized filter parameters now result in a 400 Bad Request response instead of being silently ignored.</p>"},{"location":"user-guide/platform-functionality/rest-api/filtering.html#filtering-by-choice-field","title":"Filtering by Choice Field","text":"<p>Some models have fields which are limited to specific choices, such as the <code>type</code> field on the Interface model. To find all available choices for this field, make an authenticated <code>OPTIONS</code> request to the model's list endpoint, and use <code>jq</code> to extract the relevant parameters:</p> <pre><code>curl -s -X OPTIONS \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\nhttp://nautobot/api/dcim/interfaces/ | jq \".actions.POST.type.choices\"\n</code></pre> <p>Example output:</p> <pre><code>[\n{\n\"value\": \"virtual\",\n\"display\": \"Virtual\"\n},\n{\n\"value\": \"bridge\",\n\"display\": \"Bridge\"\n},\n{\n\"value\": \"lag\",\n\"display\": \"Link Aggregation Group (LAG)\"\n},\n{\n\"value\": \"100base-tx\",\n\"display\": \"100BASE-TX (10/100ME)\"\n},\n{\n\"value\": \"1000base-t\",\n\"display\": \"1000BASE-T (1GE)\"\n},\n...\n</code></pre> <p>Note</p> <p>The above works only if the API token used to authenticate the request has permission to make a <code>POST</code> request to this endpoint.</p>"},{"location":"user-guide/platform-functionality/rest-api/filtering.html#filtering-by-custom-field","title":"Filtering by Custom Field","text":"<p>To filter results by a custom field value, prepend <code>cf_</code> to the custom field key. For example, the following query will return only locations where a custom field with key <code>foo</code> is equal to 123:</p> <pre><code>GET /api/dcim/locations/?cf_foo=123\n</code></pre> <p>Note</p> <p>For custom field filters, due to historical details of implementation, only a single filter value can be specified when matching a given field. In other words, in the above example, you could not add <code>&amp;cf_foo=456</code> to the query in order to get all locations where custom field <code>foo</code> is 123 or 456; instead you would need to run two separate queries. This restriction does not apply to custom field filters using lookup expressions (next section) and will likely be changed in a future major version of Nautobot.</p> <p>Custom fields can be mixed with built-in fields to further narrow results. When creating a custom string field, the type of filtering selected (loose versus exact) determines whether partial or full matching is used.</p> <p>Added in version 1.4.0</p> <p>Custom fields can use the lookup expressions listed in the next section by prepending <code>cf_</code> to the custom field <code>name</code> (not the <code>slug</code>) followed by the required lookup type (see below).</p> <p>Changed in version 2.0.0</p> <p>Custom field filters are now based on the custom field <code>key</code> string.</p>"},{"location":"user-guide/platform-functionality/rest-api/filtering.html#lookup-expressions","title":"Lookup Expressions","text":"<p>Certain model fields (including, in Nautobot 1.4.0 and later, custom fields of type <code>text</code>, <code>url</code>, <code>select</code>, <code>integer</code>, and <code>date</code>) also support filtering using additional lookup expressions. This allows for negation and other context-specific filtering.</p> <p>These lookup expressions can be applied by adding a suffix to the desired field's name, e.g. <code>mac_address__n</code>. In this case, the filter expression is for negation and it is separated by two underscores. Below are the lookup expressions that are supported across different field types.</p>"},{"location":"user-guide/platform-functionality/rest-api/filtering.html#numeric-fields","title":"Numeric Fields","text":"<p>Numeric-based fields (ASN, VLAN ID, etc.) support these lookup expressions:</p> <ul> <li><code>n</code> - not equal to (negation)</li> <li><code>lt</code> - less than</li> <li><code>lte</code> - less than or equal</li> <li><code>gt</code> - greater than</li> <li><code>gte</code> - greater than or equal</li> </ul>"},{"location":"user-guide/platform-functionality/rest-api/filtering.html#string-fields","title":"String Fields","text":"<p>String-based (char) fields (Name, Address, etc.) support these lookup expressions:</p> <ul> <li><code>n</code> - not equal to (negation)</li> <li><code>ic</code> - case-insensitive contains</li> <li><code>nic</code> - negated case-insensitive contains</li> <li><code>isw</code> - case-insensitive starts-with</li> <li><code>nisw</code> - negated case-insensitive starts-with</li> <li><code>iew</code> - case-insensitive ends-with</li> <li><code>niew</code> - negated case-insensitive ends-with</li> <li><code>ie</code> - case-insensitive exact match</li> <li><code>nie</code> - negated case-insensitive exact match</li> </ul> <p>Added in version 1.3.0</p> <ul> <li><code>re</code> - case-sensitive regular expression match</li> <li><code>nre</code> - negated case-sensitive regular expression match</li> <li><code>ire</code> - case-insensitive regular expression match</li> <li><code>nire</code> - negated case-insensitive regular expression match</li> </ul>"},{"location":"user-guide/platform-functionality/rest-api/filtering.html#foreign-keys-other-fields","title":"Foreign Keys &amp; Other Fields","text":"<p>Certain other fields, namely foreign key relationships support just the negation expression: <code>n</code>.</p>"},{"location":"user-guide/platform-functionality/rest-api/filtering.html#network-and-host-fields","title":"Network and Host Fields","text":"<p>There are Custom Lookups built for the <code>VarbinaryIPField</code> field types. While the <code>VarbinaryIPField</code> is applied to fields for network, host, and broadcast, the below filters only apply to network and host. The design makes an assumption that there is in fact a broadcast (of type <code>VarbinaryIPField</code>) and prefix_length (of type <code>Integer</code>) within the same model. This assumption is used to understand the relevant scope of the network in question and is important to note when extending the Nautobot core or plugin data model.</p> <ul> <li><code>**</code> <code>exact</code> - An exact match of an IP or network address, e.g. <code>host__exact=\"10.0.0.1\"</code></li> <li><code>**</code> <code>iexact</code> - An exact match of an IP or network address, e.g. <code>host__iexact=\"10.0.0.1\"</code></li> <li><code>**</code> <code>startswith</code> - Determine if IP or network starts with the value provided, e.g. <code>host__startswith=\"10.0.0.\"</code></li> <li><code>**</code> <code>istartswith</code> - Determine if IP or network starts with the value provided, e.g. <code>host__istartswith=\"10.0.0.\"</code></li> <li><code>**</code> <code>endswith</code> - Determine if IP or network ends with the value provided, e.g. <code>host__endswith=\"0.1\"</code></li> <li><code>**</code> <code>iendswith</code> - Determine if IP or network ends with the value provided, e.g. <code>host__iendswith=\"0.1\"</code></li> <li><code>**</code> <code>regex</code> - Determine if IP or network matches the pattern provided, e.g. <code>host__regex=r\"10\\.(.*)\\.1</code></li> <li><code>**</code> <code>iregex</code> - Determine if IP or network matches the pattern provided, e.g. <code>host__iregex=r\"10\\.(.*)\\.1</code></li> <li><code>net_contained</code> - Given a network, determine which networks are contained within the provided e.g. <code>network__net_contained=\"192.0.0.0/8\"</code> would include 192.168.0.0/24 in the result</li> <li><code>net_contained_or_equal</code> - Given a network, determine which networks are contained or is within the provided e.g. <code>network__net_contained_or_equal=\"192.0.0.0/8\"</code> would include 192.168.0.0/24 and 192.0.0.0/8 in the result</li> <li><code>net_contains</code> - Given a network, determine which networks contain the provided network e.g. <code>network__net_contains=\"192.168.0.0/16\"</code> would include 192.0.0.0/8 in the result</li> <li><code>net_contains_or_equals</code> - Given a network, determine which networks contain or is the provided network e.g. <code>network__net_contains=\"192.168.0.0/16\"</code> would include 192.0.0.0/8 and 192.168.0.0/16 in the result</li> <li><code>net_equals</code> - Given a network, determine which which networks are an exact match. e.g. <code>network__net_equals=\"192.168.0.0/16\"</code> would include only 192.168.0.0/16 in the result</li> <li><code>net_host</code> - Determine which networks are parent of the provided IP, e.g. <code>host__net_host=\"10.0.0.1\"</code> would include 10.0.0.1/32 and 10.0.0.0/24 in the result</li> <li><code>net_host_contained</code> - Given a network, select IPs whose host address (regardless of its subnet mask) falls within that network , e.g. <code>host__net_host_contained=\"10.0.0.0/24\"</code> would include hosts 10.0.0.1/8 and 10.0.0.254/32 in the result</li> <li><code>net_in</code> - Given a list of networks, select addresses (regardless of their subnet masks) within those networks, e.g. <code>host__net_in=[\"10.0.0.0/24\", \"2001:db8::/64\"]</code> would include hosts 10.0.0.1/16 and 2001:db8::1/65 in the result</li> <li><code>family</code> - Given an IP address family of 4 or 6, provide hosts or networks that are that IP version type, e.g. <code>host__family=6</code> would include 2001:db8::1 in the result</li> </ul> <p>Note: The fields denoted with <code>**</code> are only supported in the MySQL dialect (and not Postgresql) at the current time.</p>"},{"location":"user-guide/platform-functionality/rest-api/overview.html","title":"REST API Overview","text":""},{"location":"user-guide/platform-functionality/rest-api/overview.html#what-is-a-rest-api","title":"What is a REST API?","text":"<p>REST stands for representational state transfer. It's a particular type of API which employs HTTP requests and JavaScript Object Notation (JSON) to facilitate create, retrieve, update, and delete (CRUD) operations on objects within an application. Each type of operation is associated with a particular HTTP verb:</p> <ul> <li><code>GET</code>: Retrieve an object or list of objects</li> <li><code>POST</code>: Create an object</li> <li><code>PUT</code> / <code>PATCH</code>: Modify an existing object. <code>PUT</code> requires all mandatory fields to be specified, while <code>PATCH</code> only expects the field that is being modified to be specified.</li> <li><code>DELETE</code>: Delete an existing object</li> </ul> <p>Additionally, the <code>OPTIONS</code> verb can be used to inspect a particular REST API endpoint and return all supported actions and their available parameters.</p> <p>One of the primary benefits of a REST API is its human-friendliness. Because it utilizes HTTP and JSON, it's very easy to interact with Nautobot data on the command line using common tools. For example, we can request an IP address from Nautobot and output the JSON using <code>curl</code> and <code>jq</code>. The following command makes an HTTP <code>GET</code> request for information about a particular IP address, identified by its primary key, and uses <code>jq</code> to present the raw JSON data returned in a more human-friendly format. (Piping the output through <code>jq</code> isn't strictly required but makes it much easier to read.)</p> <pre><code>curl -s http://nautobot/api/ipam/ip-addresses/83445aa3-bbd3-4ab4-86f5-36942ce9df60/ | jq '.'\n</code></pre> <pre><code>{\n\"id\": \"83445aa3-bbd3-4ab4-86f5-36942ce9df60\",\n\"url\": \"http://nautobot/api/ipam/ip-addresses/83445aa3-bbd3-4ab4-86f5-36942ce9df60/\",\n\"display\": \"10.0.60.39/32\",\n\"custom_fields\": {},\n\"notes_url\": \"http://nautobot/api/ipam/ip-addresses/83445aa3-bbd3-4ab4-86f5-36942ce9df60/notes/\",\n\"family\": {\n\"value\": 4,\n\"label\": \"IPv4\"\n},\n\"address\": \"10.0.60.39/32\",\n\"nat_outside_list\": [\n{\n\"id\": \"a7569104-ed58-4938-ab6f-cb6a9e584f14\",\n\"object_type\": \"ipam.ipaddress\",\n\"url\": \"http://nautobot/api/ipam/ip-addresses/a7569104-ed58-4938-ab6f-cb6a9e584f14/\"\n}\n],\n\"created\": \"2023-04-25T12:46:09.152507Z\",\n\"last_updated\": \"2023-04-25T12:46:09.163545Z\",\n\"host\": \"10.0.60.39\",\n\"mask_length\": 32,\n\"dns_name\": \"desktop-08.cook.biz\",\n\"description\": \"This is an IP Address\",\n\"role\": {\n\"id\": \"e7a815b0-2c48-499a-84b8-f20350abe415\",\n\"object_type\": \"extras.role\",\n\"url\": \"http://nautobot/api/extras/roles/e7a815b0-2c48-499a-84b8-f20350abe415/\",\n},\n\"status\": {\n\"id\": \"b7f6a447-5616-4533-a6d5-a4ece50cd08c\",\n\"object_type\": \"extras.status\",\n\"url\": \"http://nautobot/api/extras/statuses/b7f6a447-5616-4533-a6d5-a4ece50cd08c/\",\n},\n\"vrf\": null,\n\"tenant\": {\n\"id\": \"501fffe7-5302-40ae-b9e4-27d5e3ff2108\",\n\"object_type\": \"tenancy.tenant\",\n\"url\": \"http://nautobot/api/tenancy/tenants/501fffe7-5302-40ae-b9e4-27d5e3ff2108/\",\n},\n\"nat_inside\": null,\n\"tags\": []\n}\n</code></pre> <p>Each attribute of the IP address is expressed as an attribute of the JSON object. Related objects are identified by their own URLs that may be accessed to retrieve more details of the related object, as in the case of the <code>role</code> and <code>status</code> fields above. Every object includes a primary key named <code>id</code> which uniquely identifies it in the database.</p>"},{"location":"user-guide/platform-functionality/rest-api/overview.html#interactive-documentation","title":"Interactive Documentation","text":"<p>Comprehensive, interactive documentation of all REST API endpoints is available on a running Nautobot instance at <code>/api/docs/</code>. This interface provides a convenient sandbox for researching and experimenting with specific endpoints and request types. The API itself can also be explored using a web browser by navigating to its root at <code>/api/</code>.</p> <p>Added in version 1.3.0</p> <p>You can view or explore a specific REST API version by adding the API version as a query parameter, for example <code>/api/docs/?api_version=2.0</code> or <code>/api/?api_version=2.0</code></p>"},{"location":"user-guide/platform-functionality/rest-api/overview.html#endpoint-hierarchy","title":"Endpoint Hierarchy","text":"<p>Nautobot's entire REST API is housed under the API root at <code>https://&lt;hostname&gt;/api/</code>. The URL structure is divided at the root level by application: circuits, DCIM, extras, IPAM, plugins, tenancy, users, and virtualization. Within each application exists a separate path for each model. For example, the provider and circuit objects are located under the \"circuits\" application:</p> <ul> <li><code>/api/circuits/providers/</code></li> <li><code>/api/circuits/circuits/</code></li> </ul> <p>Likewise, the location, rack, and device objects are located under the \"DCIM\" application:</p> <ul> <li><code>/api/dcim/locations/</code></li> <li><code>/api/dcim/racks/</code></li> <li><code>/api/dcim/devices/</code></li> </ul> <p>The full hierarchy of available endpoints can be viewed by navigating to the API root in a web browser.</p> <p>Each model generally has two views associated with it: a list view and a detail view. The list view is used to retrieve a list of multiple objects and to create new objects. The detail view is used to retrieve, update, or delete an single existing object. All objects are referenced by their UUID primary key (<code>id</code>).</p> <ul> <li><code>/api/dcim/devices/</code> - List existing devices or create a new device</li> <li><code>/api/dcim/devices/6a522ebb-5739-4c5c-922f-ab4a2dc12eb0/</code> - Retrieve, update, or delete the device with ID 6a522ebb-5739-4c5c-922f-ab4a2dc12eb0</li> </ul> <p>Lists of objects can be filtered using a set of query parameters. For example, to find all interfaces belonging to the device with ID 6a522ebb-5739-4c5c-922f-ab4a2dc12eb0:</p> <pre><code>GET /api/dcim/interfaces/?device=6a522ebb-5739-4c5c-922f-ab4a2dc12eb0\n</code></pre> <p>See the filtering documentation for more details.</p>"},{"location":"user-guide/platform-functionality/rest-api/overview.html#versioning","title":"Versioning","text":"<p>Added in version 1.3.0</p> <p>As of Nautobot 1.3, the REST API supports multiple versions. A REST API client may request a given API version by including a <code>major.minor</code> Nautobot version number in its request in one of two ways:</p> <ol> <li>A client may include a <code>version</code> in its HTTP Accept header, for example <code>Accept: application/json; version=2.0</code></li> <li>A client may include an <code>api_version</code> as a URL query parameter, for example <code>/api/extras/jobs/?api_version=2.0</code></li> </ol> <p>Generally the former approach is recommended when writing automated API integrations, as it can be set as a general request header alongside the authentication token and re-used across a series of REST API interactions, while the latter approach may be more convenient when initially exploring the REST API via the interactive documentation as described above.</p>"},{"location":"user-guide/platform-functionality/rest-api/overview.html#default-versions","title":"Default Versions","text":"<p>By default, a REST API request that does not specify an API version number will default to compatibility with the current Nautobot version.</p> <p>Added in version 1.3.0</p> <p>For Nautobot 1.x, the default API behavior is to be compatible with the REST API of Nautobot version 1.2, in other words, for all Nautobot 1.x versions (beginning with Nautobot 1.2.0), <code>Accept: application/json</code> is functionally equivalent to <code>Accept: application/json; version=1.2</code>.</p> <p>Changed in version 2.0.0</p> <p>As of Nautobot 2.0, the default API behavior is changed to use the latest available REST API version. In other words, the default REST API version for Nautobot 2.0.y will be <code>2.0</code>, for Nautobot 2.1.y will be <code>2.1</code>, etc. This means that REST API clients that do not explicitly request a particular REST API version may encounter potentially breaking changes in the REST API when Nautobot is upgraded to a new minor or major version.</p> <p>Important</p> <p>As a best practice, it is recommended that a REST API client should always request the exact Nautobot REST API version that it is compatible with, rather than relying on the default behavior to remain constant.</p> <p>Tip</p> <p>Any successful REST API response will include an <code>API-Version</code> header showing the API version that is in use for the specific API request being handled.</p>"},{"location":"user-guide/platform-functionality/rest-api/overview.html#non-breaking-changes","title":"Non-Breaking Changes","text":"<p>Non-breaking (forward- and backward-compatible) REST API changes may be introduced in major or minor Nautobot releases. Since these changes are non-breaking, they will not correspond to the introduction of a new API version, but will be added seamlessly to the existing API version, and so will immediately be available to existing REST API clients. Examples would include:</p> <ul> <li>Addition of new fields in GET responses</li> <li>Added support for new, optional fields in POST/PUT/PATCH requests</li> <li>Deprecation (but not removal) of existing fields</li> </ul> <p>Important</p> <p>There is no way to \"opt out\" of backwards-compatible enhancements to the REST API; because they are fully backwards-compatible there should never be a need to do so. Thus, for example, a client requesting API version <code>1.2</code> from a Nautobot 1.3 server may actually receive the (updated but still backwards-compatible) <code>1.3</code> API version as a response. For this reason, clients should always default to ignoring additional fields in an API response that they do not understand, rather than reporting an error.</p>"},{"location":"user-guide/platform-functionality/rest-api/overview.html#breaking-changes","title":"Breaking Changes","text":"<p>Breaking (non-backward-compatible) REST API changes also may be introduced in major or minor Nautobot releases. Examples would include:</p> <ul> <li>Removal of deprecated fields</li> <li>Addition of new, required fields in POST/PUT/PATCH requests or changing an existing field from optional to required</li> <li>Changed field types (for example, changing a single value to a list of values)</li> <li>Redesigned API (for example, listing and accessing Job instances by UUID primary-key instead of by class-path string)</li> </ul> <p>Per Nautobot's feature-deprecation policy, the previous REST API version(s) will continue to be supported until the next major release. Upon the next major release, previously deprecated API versions will be removed and the newest behavior will become the default. You will no longer be able to request API versions from the previous major version.</p> <p>Important</p> <p>Again, REST API clients are strongly encouraged to always specify the REST API version they are expecting, as otherwise unexpected breaking changes may be encountered when Nautobot is upgraded to a new major or minor release.</p>"},{"location":"user-guide/platform-functionality/rest-api/overview.html#example-of-api-version-behavior","title":"Example of API Version Behavior","text":"<p>As an example, let us say that Nautobot 2.1 introduced a new, non-backwards-compatible REST API for the <code>/api/extras/jobs/</code> endpoint, and also introduced a new, backwards-compatible set of additional fields on the <code>/api/dcim/locations/</code> endpoint. Depending on what API version a REST client interacting with Nautobot 2.1 specified (or didn't specify), it would see the following responses from the server:</p> API endpoint Requested API version Response <code>/api/extras/jobs/</code> (unspecified) Updated 2.1 REST API (not backwards compatible) <code>/api/extras/jobs/</code> <code>2.0</code> Deprecated 2.0-compatible REST API <code>/api/extras/jobs/</code> <code>2.1</code> New/updated 2.1-compatible REST API <p>Changed in version 2.0.0</p> <p>The default behavior when the API version is unspecified is changed from Nautobot 1.x.</p> API endpoint Requested API version Response <code>/api/dcim/locations/</code> (unspecified) 2.1-updated, 2.0-compatible REST API <code>/api/dcim/locations/</code> <code>2.0</code> 2.1-updated, 2.0-compatible REST API <code>/api/dcim/locations/</code> <code>2.1</code> 2.1-updated, 2.0-compatible REST API API endpoint Requested API version Response <code>/api/dcim/racks/</code> (unspecified) 2.1-compatible REST API (unchanged from 2.0) <code>/api/dcim/racks/</code> <code>2.0</code> 2.1-compatible REST API (unchanged from 2.0) <code>/api/dcim/racks/</code> <code>2.1</code> 2.1-compatible REST API (unchanged from 2.0)"},{"location":"user-guide/platform-functionality/rest-api/overview.html#apiselect-with-versioning-capability","title":"APISelect with versioning capability","text":"<p>Added in version 1.3.0</p> <p>The constructor for Nautobot's <code>APISelect</code>/<code>APISelectMultiple</code> UI widgets now includes an optional <code>api_version</code> argument which if set overrides the default API version of the request.</p>"},{"location":"user-guide/platform-functionality/rest-api/overview.html#serialization","title":"Serialization","text":"<p>The REST API employs \"serializers\" to represent model data. The representation produced by a serializer typically includes all relevant database table fields which comprise the model, and may also include additional metadata such as information about other relevant objects in the database. Much like the database model itself, a serializer typically will represent information about \"parent\" objects (those objects that needed to exist in order to define the current object, such as <code>DeviceType</code> and <code>Location</code> for a <code>DeviceSerializer</code>) but typically will not include information about \"child\" objects (those objects that depend on the current object in order to be defined, such as <code>Interface</code> objects for a <code>DeviceSerializer</code>).</p>"},{"location":"user-guide/platform-functionality/rest-api/overview.html#related-objects","title":"Related Objects","text":"<p>Related objects (e.g. <code>ForeignKey</code> fields) are representable in several different ways. By default, when retrieving an object via the REST API, related objects are represented by URLs, or by a JSON <code>null</code> if no such related object exists. These URLs may be accessed in order to retrieve the full details of such related objects if needed/desired. For example, when retrieving an <code>IPAddress</code>, you might see:</p> <pre><code>{\n\"id\": \"83445aa3-bbd3-4ab4-86f5-36942ce9df60\",\n\"url\": \"http://localhost:8080/api/ipam/ip-addresses/83445aa3-bbd3-4ab4-86f5-36942ce9df60/\",\n\"display\": \"10.0.60.39/32\",\n\"address\": \"10.0.60.39/32\",\n...\n\"role\": {\n\"id\": \"e7a815b0-2c48-499a-84b8-f20350abe415\",\n\"object_type\": \"extras.role\",\n\"url\": \"http://localhost:8080/api/extras/roles/e7a815b0-2c48-499a-84b8-f20350abe415/\",\n},\n\"status\": {\n\"id\": \"b7f6a447-5616-4533-a6d5-a4ece50cd08c\",\n\"object_type\": \"extras.status\",\n\"url\": \"http://localhost:8080/api/extras/statuses/b7f6a447-5616-4533-a6d5-a4ece50cd08c/\",\n},\n\"vrf\": null,\n\"tenant\": {\n\"id\": \"501fffe7-5302-40ae-b9e4-27d5e3ff2108\",\n\"object_type\": \"tenancy.tenant\",\n\"url\": \"http://localhost:8080/api/tenancy/tenants/501fffe7-5302-40ae-b9e4-27d5e3ff2108/\",\n},\n\"nat_inside\": null,\n\"tags\": []\n}\n</code></pre> <p>Here, the <code>role</code>, <code>status</code>, <code>vrf</code>, <code>tenant</code>, and <code>nat_outside</code> fields represent objects related to this <code>IPAddress</code>, and the <code>tags</code> field is a list of such objects (no tags in this example).</p> <p>Changed in version 2.0.0</p> <p>The representation of related objects on retrieval has changed from Nautobot 1.x. The <code>brief</code> query parameter has been removed, and distinct \"nested\" serializers no longer exist. Instead, the <code>depth</code> parameter controls whether related objects are represented by URLs or as nested objects. Please see Depth Query Parameter for more details.</p> <p>When performing write API actions (<code>POST</code>, <code>PUT</code>, and <code>PATCH</code>), related objects may be specified by either UUID (primary key), or by a set of attributes sufficiently unique to return the desired object, or by their natural key.</p> <p>Added in version 2.0.0</p> <p>Support for specifying a related object by composite-key was added.</p> <p>For example, when creating a new device, its rack can be specified by Nautobot ID (PK):</p> <pre><code>{\n\"name\": \"MyNewDevice\",\n\"rack\": \"7f3ca431-8103-45cc-a9ce-b94c1f784a1d\",\n...\n}\n</code></pre> <p>Or by a set of nested attributes which uniquely identify the rack:</p> <pre><code>{\n\"name\": \"MyNewDevice\",\n\"rack\": {\n\"location\": {\n\"name\": \"Equinix DC6\"\n},\n\"name\": \"R204\"\n},\n...\n}\n</code></pre> <p>Or by the natural key of the rack (for the Rack model, this is just its name, but this will vary by object type - you can always find this information under the Advanced tab of an object's detail view):</p> <pre><code>{\n\"name\": \"MyNewDevice\",\n\"rack\": \"R204\",\n...\n}\n</code></pre> <p>Note that if the provided parameters do not match exactly one object, a validation error will be raised.</p>"},{"location":"user-guide/platform-functionality/rest-api/overview.html#generic-relations","title":"Generic Relations","text":"<p>Some objects within Nautobot have attributes which can reference an object of multiple types, known as generic relations. For example, a <code>Cable</code> can be terminated (connected) to an <code>Interface</code>, or a <code>FrontPort</code>, or a <code>RearPort</code>, etc. For such generic relations, when making this assignment via the REST API, we must specify two attributes, typically an <code>object_type</code> and an <code>object_id</code>, and by convention in Nautobot's API:</p> <ul> <li>the <code>object_type</code> is the type of assigned object, typically represented as <code>&lt;app_label&gt;.&lt;model_name&gt;</code></li> <li>the <code>object_id</code> is the UUID (primary key) of the assigned object.</li> </ul> <p>For example, the two ends of a Cable are identified by <code>termination_a_type</code>/<code>termination_a_id</code> and <code>termination_b_type</code>/<code>termination_b_id</code>, and might be specified on creation as something like:</p> <pre><code>curl -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; version=2.0; indent=4\" \\\nhttp://nautobot/api/dcim/cables/ \\\n--data '{\n    \"termination_a_type\": \"dcim.interface\",\n    \"termination_a_id\": \"96ee6c25-d689-46f4-b552-eb72977c27b8\",\n    \"termination_b_type\": \"dcim.frontport\",\n    \"termination_b_id\": \"ca54e2cc-d1b5-46e2-bb7d-85b1a9e3c1d0\",\n    ...\n}'\n</code></pre> <p>On retrieval, the REST API will include the <code>object_type</code> and <code>object_id</code> fields, but will also typically for convenience include an <code>object</code> field containing the URL or nested details of the object identified by the type/id fields. For the above <code>Cable</code> example, the retrieval response might look something like:</p> <pre><code>{\n\"id\": \"549dae0d-3345-4bd1-8626-085e46a36ded\",\n\"url\": \"http://localhost:8080/api/dcim/cables/549dae0d-3345-4bd1-8626-085e46a36ded/\",\n...\n\"termination_a_type\": \"dcim.interface\",\n\"termination_b_type\": \"dcim.frontport\",\n\"termination_a_id\": \"96ee6c25-d689-46f4-b552-eb72977c27b8\",\n\"termination_b_id\": \"ca54e2cc-d1b5-46e2-bb7d-85b1a9e3c1d0\",\n\"termination_a\": \"http://localhost:8080/api/dcim/interfaces/96ee6c25-d689-46f4-b552-eb72977c27b8/\",\n\"termination_b\": \"http://localhost:8080/api/dcim/front-ports/ca54e2cc-d1b5-46e2-bb7d-85b1a9e3c1d0/\",\n...\n}\n</code></pre>"},{"location":"user-guide/platform-functionality/rest-api/overview.html#many-to-many-relationships","title":"Many-To-Many Relationships","text":"<p>Added in version 2.0.0</p> <p>Many-to-many relationships differ from one-to-many and one-to-one relationships because they utilize a separate database table called a \"through table\" to track the relationships instead of a single field in an existing table. In Nautobot 2.0, some relationships such as <code>IPAddress</code> to <code>Interface</code>/<code>VMInterface</code>, <code>Prefix</code> to <code>VRF</code>, and <code>VRF</code> to <code>Device</code>/<code>VirtualMachine</code> are represented as many-to-many relationships. The REST API represents these relationships as nested objects for retrieval, but in order to create, update or delete these relationships, the through table endpoint must be used. Currently, the only through table endpoint available is the <code>IPAddress</code> to <code>Interface</code>/<code>VMInterface</code> at <code>/api/ipam/ip-address-to-interface/</code>.</p>"},{"location":"user-guide/platform-functionality/rest-api/overview.html#pagination","title":"Pagination","text":"<p>API responses which contain a list of many objects will be paginated for efficiency. The root JSON object returned by a list endpoint contains the following attributes:</p> <ul> <li><code>count</code>: The total number of all objects matching the query</li> <li><code>next</code>: A hyperlink to the next page of results (if applicable)</li> <li><code>previous</code>: A hyperlink to the previous page of results (if applicable)</li> <li><code>results</code>: The list of objects on the current page</li> </ul> <p>Here is an example of a paginated response:</p> <pre><code>HTTP 200 OK\nAllow: GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS\nAPI-Version: 1.2\nContent-Type: application/json\nVary: Accept\n{\n\"count\": 2861,\n\"next\": \"http://nautobot/api/dcim/devices/?limit=50&amp;offset=50\",\n\"previous\": null,\n\"results\": [\n{\n\"id\": \"fa069c4b-4f6e-4349-88ac-8b6baf9d70c5\",\n\"name\": \"Device1\",\n...\n},\n{\n\"id\": \"a37df58c-8bf3-4b97-bad5-301ef3880bea\",\n\"name\": \"Device2\",\n...\n},\n...\n]\n}\n</code></pre> <p>The default page is determined by the <code>PAGINATE_COUNT</code> configuration parameter, which defaults to 50. However, this can be overridden per request by specifying the desired <code>offset</code> and <code>limit</code> query parameters. For example, if you wish to retrieve a hundred devices at a time, you would make a request for:</p> <pre><code>http://nautobot/api/dcim/devices/?limit=100\n</code></pre> <p>The response will return devices 1 through 100. The URL provided in the <code>next</code> attribute of the response will return devices 101 through 200:</p> <pre><code>{\n\"count\": 2861,\n\"next\": \"http://nautobot/api/dcim/devices/?limit=100&amp;offset=100\",\n\"previous\": null,\n\"results\": [...]\n}\n</code></pre> <p>The maximum number of objects that can be returned is limited by the <code>MAX_PAGE_SIZE</code> configuration parameter, which is 1000 by default. Setting this to <code>0</code> or <code>None</code> will remove the maximum limit. An API consumer can then pass <code>?limit=0</code> to retrieve all matching objects with a single request.</p> <p>Warning</p> <p>Disabling the page size limit introduces a potential for very resource-intensive requests, since one API request can effectively retrieve an entire table from the database.</p>"},{"location":"user-guide/platform-functionality/rest-api/overview.html#sorting","title":"Sorting","text":"<p>By default, objects are sorted by their model-defined ordering property. However, this can be overridden by specifying the <code>?sort</code> query parameter. For example, to retrieve devices sorted by their rack position:</p> <pre><code>http://nautobot/api/dcim/devices/?sort=position\n</code></pre> <p>To sort in descending order, prefix the field name with a minus sign (<code>-</code>):</p> <pre><code>http://nautobot/api/dcim/devices/?sort=-position\n</code></pre> <p>Currently only direct model attributes are validated to be sorted as expected.</p>"},{"location":"user-guide/platform-functionality/rest-api/overview.html#interacting-with-objects","title":"Interacting with Objects","text":""},{"location":"user-guide/platform-functionality/rest-api/overview.html#retrieving-multiple-objects","title":"Retrieving Multiple Objects","text":"<p>To query Nautobot for a list of objects, make a <code>GET</code> request to the model's list endpoint. Objects are listed under the response object's <code>results</code> parameter. Specifying the <code>Accept</code> header with the Nautobot API version is not required, but is strongly recommended.</p> <pre><code>curl -s -X GET \\\n-H \"Accept: application/json; version=2.0\" \\\nhttp://nautobot/api/ipam/ip-addresses/ | jq '.'\n</code></pre> <pre><code>{\n\"count\": 42031,\n\"next\": \"http://nautobot/api/ipam/ip-addresses/?limit=50&amp;offset=50\",\n\"previous\": null,\n\"results\": [\n{\n\"id\": \"bd307eca-de34-4bda-9195-d69ca52206d6\",\n\"address\": \"192.0.2.1/24\",\n...\n},\n{\n\"id\": \"6c52e918-4f0c-4c50-ae49-6bef22c97fd5\",\n\"address\": \"192.0.2.2/24\",\n...\n},\n{\n\"id\": \"b8cde1ee-1b86-4ea4-a884-041c472d8999\",\n\"address\": \"192.0.2.3/24\",\n...\n},\n...\n]\n}\n</code></pre>"},{"location":"user-guide/platform-functionality/rest-api/overview.html#retrieving-a-single-object","title":"Retrieving a Single Object","text":"<p>To query Nautobot for a single object, make a <code>GET</code> request to the model's detail endpoint specifying its UUID.</p> <p>Note</p> <p>Note that the trailing slash is required. Omitting this will return a 302 redirect.</p> <pre><code>curl -s -X GET \\\n-H \"Accept: application/json; version=2.0\" \\\nhttp://nautobot/api/ipam/ip-addresses/bd307eca-de34-4bda-9195-d69ca52206d6/ | jq '.'\n</code></pre> <pre><code>{\n\"id\": \"bd307eca-de34-4bda-9195-d69ca52206d6\",\n\"address\": \"192.0.2.1/24\",\n...\n}\n</code></pre>"},{"location":"user-guide/platform-functionality/rest-api/overview.html#depth-query-parameter","title":"Depth Query Parameter","text":"<p>Added in version 2.0.0</p> <p>A <code>?depth</code> query parameter is introduced in Nautobot 2.0 to replace the <code>?brief</code> parameter. It enables nested serialization functionality and offers a more dynamic and comprehensive browsable API. It is available for both retrieving a single object and a list of objects. This parameter is an positive integer value that can range from 0 to 10. In most use cases, you will only need a maximum <code>depth</code> of 2 to get all the information you need.</p> <p>Note</p> <p>The <code>?brief</code> query parameter is removed for Nautobot v2.x. Use <code>?depth=0</code> instead.</p> <p>Important</p> <p>The <code>?depth</code> query parameter should only be used for <code>GET</code> operations in the API. It should not be used in <code>POST</code>, <code>PATCH</code> and <code>DELETE</code> requests. For these requests, only <code>?depth=0</code> should be used.</p>"},{"location":"user-guide/platform-functionality/rest-api/overview.html#defaultdepth0","title":"Default/?depth=0","text":"<p><code>?depth</code> parameter defaults to 0 and offers a very lightweight view of the API where all object-related fields are represented by a simple object, containing only the <code>id</code>, <code>object_type</code> and <code>url</code> attributes.</p> <pre><code>curl -s -X GET \\\n-H \"Accept: application/json; version=2.0\" \\\nhttp://nautobot/api/dcim/locations/0e19e475-89c9-4cf4-8b5f-a0589f0950cd/ | jq '.'\n</code></pre> <pre><code>{\n\"id\": \"0e19e475-89c9-4cf4-8b5f-a0589f0950cd\",\n\"display\": \"Campus-01\",\n\"url\": \"http://nautobot/api/dcim/locations/0e19e475-89c9-4cf4-8b5f-a0589f0950cd/\",\n\"tree_depth\": 0,\n\"time_zone\": \"Asia/Baghdad\",\n\"circuit_count\": 7,\n\"device_count\": 0,\n\"prefix_count\": 0,\n\"rack_count\": 0,\n\"virtual_machine_count\": 0,\n\"vlan_count\": 0,\n\"created\": \"2023-04-12T19:29:06.884754Z\",\n\"last_updated\": \"2023-04-12T19:29:06.906503Z\",\n\"name\": \"Campus-01\",\n\"description\": \"Local take each compare court exactly.\",\n\"facility\": \"328\",\n\"asn\": null,\n\"physical_address\": \"\",\n\"shipping_address\": \"\",\n\"latitude\": null,\n\"longitude\": \"104.200000\",\n\"contact_name\": \"Frances Hernandez\",\n\"contact_phone\": \"\",\n\"contact_email\": \"\",\n\"comments\": \"Sort share road candidate.\",\n\"status\": {\n\"id\": \"28eb334b-4171-4da4-a03a-fa6d0c6a9442\",\n\"object_type\": \"extras.status\",\n\"url\": \"http://nautobot/api/extras/statuses/28eb334b-4171-4da4-a03a-fa6d0c6a9442/\",\n},\n\"parent\": null,\n\"location_type\": {\n\"id\": \"e3d4a9af-c6c1-4582-b483-a13301eb6e28\",\n\"object_type\": \"dcim.locationtype\",\n\"url\": \"http://nautobot/api/dcim/location-types/e3d4a9af-c6c1-4582-b483-a13301eb6e28/\",\n},\n\"tenant\": {\n\"id\": \"5b1feadb-fab0-4f81-a53f-5192d83b0216\",\n\"object_type\": \"tenancy.tenant\",\n\"url\": \"http://nautobot/api/tenancy/tenants/5b1feadb-fab0-4f81-a53f-5192d83b0216/\",\n},\n\"tags\": [\n{\n\"id\": \"a50d4568-27ae-4743-87ac-ffdc22b7f5d2\",\n\"object_type\": \"extras.tag\",\n\"url\": \"http://nautobot/api/extras/tags/a50d4568-27ae-4743-87ac-ffdc22b7f5d2/\",\n}\n],\n\"notes_url\": \"http://nautobot/api/dcim/locations/0e19e475-89c9-4cf4-8b5f-a0589f0950cd/notes/\",\n\"custom_fields\": {\n\"example_plugin_auto_custom_field\": null\n}\n}\n</code></pre>"},{"location":"user-guide/platform-functionality/rest-api/overview.html#depth1","title":"?depth=1","text":"<p>When <code>?depth=1</code> is added to the query parameters, all object-related fields, instead of being represented as light-weight objects as they are when <code>?depth=0</code>, will be represented as fully-detailed nested objects, similar (but not necessarily identical!) to the objects that would be retrieved when querying the API directly for those related objects.</p> <p>Important</p> <p>Nested objects retrieved with a greater-than-zero <code>depth</code> parameter do not necessarily include all fields that would be included on the fully detailed object that can be retrieved by querying their <code>url</code> directly. In particular:</p> <ul> <li>Nested objects will not include a field for <code>tags</code> or any other many-to-many relations on the object (such as a <code>Status</code> object's <code>content_types</code> relation).</li> <li>Nested objects will not include the <code>relationships</code> or <code>computed_fields</code> keys, even if those are opted-in on the request.</li> <li>Nested objects may omit any derived (non-database) attributes, such as related object counts, tree-depth information, etc.</li> </ul> <p>For example, retrieving a <code>Location</code> with <code>?depth=1</code> would provide nested objects for the <code>status</code>, <code>parent</code>, <code>location_type</code>, <code>tenant</code>, and <code>tags</code> fields:</p> <pre><code>curl -s -X GET \\\n-H \"Accept: application/json; version=2.0\" \\\nhttp://nautobot/api/dcim/locations/ce69530e-6a4a-4d3c-9f95-fc326ec39abf/?depth=1 | jq '.'\n</code></pre> <pre><code>{\n...\n\"status\": {\n\"id\": \"91a53d61-4180-4820-835d-533b34dbb5b4\",\n\"display\": \"Active\",\n\"url\": \"http://nautobot/api/extras/statuses/91a53d61-4180-4820-835d-533b34dbb5b4/\",\n\"custom_fields\": {},\n\"notes_url\": \"http://nautobot/api/extras/statuses/91a53d61-4180-4820-835d-533b34dbb5b4/notes/\",\n\"created\": \"2023-04-12T00:00:00Z\",\n\"last_updated\": \"2023-04-12T19:25:51.413824Z\",\n\"name\": \"Active\",\n\"color\": \"4caf50\",\n\"description\": \"Unit is active\"\n},\n\"parent\": {\n\"id\": \"0e19e475-89c9-4cf4-8b5f-a0589f0950cd\",\n\"display\": \"Campus-01\",\n\"url\": \"http://nautobot/api/dcim/locations/0e19e475-89c9-4cf4-8b5f-a0589f0950cd/\",\n\"custom_fields\": {\n\"example_plugin_auto_custom_field\": null\n},\n\"notes_url\": \"http://nautobot/api/dcim/locations/0e19e475-89c9-4cf4-8b5f-a0589f0950cd/notes/\",\n\"tree_depth\": null,\n\"time_zone\": \"Asia/Baghdad\",\n\"created\": \"2023-04-12T19:29:06.884754Z\",\n\"last_updated\": \"2023-04-12T19:29:06.906503Z\",\n\"name\": \"Campus-01\",\n\"description\": \"Local take each compare court exactly.\",\n\"facility\": \"328\",\n\"asn\": null,\n\"physical_address\": \"\",\n\"shipping_address\": \"\",\n\"latitude\": null,\n\"longitude\": \"104.200000\",\n\"contact_name\": \"Frances Hernandez\",\n\"contact_phone\": \"\",\n\"contact_email\": \"\",\n\"comments\": \"Sort share road candidate.\",\n\"status\": \"http://nautobot/api/extras/statuses/28eb334b-4171-4da4-a03a-fa6d0c6a9442/\",\n\"parent\": null,\n\"location_type\": \"http://nautobot/api/extras/location-types/e3d4a9af-c6c1-4582-b483-a13301eb6e28/\",\n\"tenant\": \"http://nautobot/api/tenancy/tenants/5b1feadb-fab0-4f81-a53f-5192d83b0216/\",\n},\n\"location_type\": {\n\"id\": \"4edcc111-e3f7-4309-ab0e-eb34c001874e\",\n\"display\": \"Campus \u2192 Building\",\n\"url\": \"http://nautobot/api/dcim/location-types/4edcc111-e3f7-4309-ab0e-eb34c001874e/\",\n\"custom_fields\": {},\n\"notes_url\": \"http://nautobot/api/dcim/location-types/4edcc111-e3f7-4309-ab0e-eb34c001874e/notes/\",\n\"tree_depth\": null,\n\"created\": \"2023-04-12T19:29:06.707759Z\",\n\"last_updated\": \"2023-04-12T19:29:06.716482Z\",\n\"name\": \"Building\",\n\"description\": \"Protect growth bill all hair along.\",\n\"nestable\": false,\n\"parent\": \"http://nautobot/api/dcim/location-types/e3d4a9af-c6c1-4582-b483-a13301eb6e28/\"\n},\n\"tenant\": {\n\"id\": \"d043b6bc-6892-45f9-b460-4b006eb68016\",\n\"display\": \"Page Inc\",\n\"url\": \"http://nautobot/api/tenancy/tenants/d043b6bc-6892-45f9-b460-4b006eb68016/\",\n\"custom_fields\": {},\n\"notes_url\": \"http://nautobot/api/tenancy/tenants/d043b6bc-6892-45f9-b460-4b006eb68016/notes/\",\n\"created\": \"2023-04-12T19:29:06.257345Z\",\n\"last_updated\": \"2023-04-12T19:29:06.262563Z\",\n\"name\": \"Page Inc\",\n\"description\": \"Citizen father policy door science light. Glass improve place understand against ground.\\nLarge firm per sing. Item they side walk test open tend.\",\n\"comments\": \"\",\n\"tenant_group\": null,\n},\n\"tags\": [\n{\n\"id\": \"a50d4568-27ae-4743-87ac-ffdc22b7f5d2\",\n\"display\": \"Light blue\",\n\"url\": \"http://nautobot/api/extras/tags/a50d4568-27ae-4743-87ac-ffdc22b7f5d2/\",\n\"custom_fields\": {},\n\"notes_url\": \"http://nautobot/api/extras/tags/a50d4568-27ae-4743-87ac-ffdc22b7f5d2/notes/\",\n\"name\": \"Light blue\",\n\"created\": \"2023-04-12T19:29:05.753433Z\",\n\"last_updated\": \"2023-04-12T19:29:05.770752Z\",\n\"color\": \"03a9f4\",\n\"description\": \"Want task generation. Commercial candidate performance financial guess modern.\\nEarly toward adult black. Join black land sit. It smile standard possible reach.\"\n}\n]\n}\n</code></pre> <p>Note</p> <p>As previously explained, note that the <code>status</code> nested object included in this response does not include the <code>content_types</code> many-to-many relation that exists on all Status objects. If this information is needed, you would need to directly query the URL of the status object itself (above, <code>http://nautobot/api/extras/statuses/91a53d61-4180-4820-835d-533b34dbb5b4/</code>) to get a fully detailed response. Similarly, the <code>parent</code> and <code>tenant</code> nested objects do not include their <code>tags</code> relations, the <code>parent</code> object does not include its derived <code>tree_depth</code> and related object counters, and the <code>tags</code> nested object list does not include the <code>content_types</code> for each <code>Tag</code>.</p>"},{"location":"user-guide/platform-functionality/rest-api/overview.html#depth2-and-beyond","title":"?depth=2 and beyond","text":"<p>A higher <code>depth</code> parameter in the query presents you with more insight to the object and can be useful in situations that demand information of an indirectly related field of the object.</p> <p>Important</p> <p>Using higher <code>depth</code> values may substantially increase the amount of time it takes for the REST API to respond to your query when there are a large number of related objects. In some cases it may be more efficient to initially query with a lower <code>depth</code> and then follow the <code>url</code> values that the REST API response provides for specific related objects to query those objects directly as a more narrowly focused query approach.</p> <p>For example, if you need information on the <code>parent</code> of a <code>location</code> instance's <code>parent</code>.</p> <pre><code>curl -s -X GET \\\n-H \"Accept: application/json; version=2.0\" \\\nhttp://nautobot/api/dcim/locations/3b71a669-faa4-4f8d-a72a-8c94d121b793/?depth=2 | jq '.'\n</code></pre> <pre><code>{\n...\n\"parent\": {\n...\n\"status\": {\n\"id\": \"39ea1ea4-3028-4a81-81e0-24a5743d3657\",\n\"url\": \"http://nautobot/api/extras/statuses/39ea1ea4-3028-4a81-81e0-24a5743d3657/\",\n\"display\": \"Retired\",\n\"object_type\": \"extras.status\",\n\"notes_url\": \"http://nautobot/api/extras/statuses/39ea1ea4-3028-4a81-81e0-24a5743d3657/notes/\",\n\"created\": \"2023-04-12T00:00:00Z\",\n\"last_updated\": \"2023-04-12T19:26:16.982697Z\",\n\"name\": \"Retired\",\n\"color\": \"f44336\",\n\"description\": \"Location has been retired\",\n\"custom_fields\": {}\n},\n\"parent\": {\n\"id\": \"0e19e475-89c9-4cf4-8b5f-a0589f0950cd\",\n\"url\": \"http://nautobot/api/dcim/locations/0e19e475-89c9-4cf4-8b5f-a0589f0950cd/\",\n\"display\": \"Campus-01\",\n\"object_type\": \"dcim.location\",\n\"time_zone\": \"Asia/Baghdad\",\n\"created\": \"2023-04-12T19:29:06.884754Z\",\n\"last_updated\": \"2023-04-12T19:29:06.906503Z\",\n\"name\": \"Campus-01\",\n\"description\": \"Local take each compare court exactly.\",\n\"facility\": \"328\",\n\"asn\": null,\n\"physical_address\": \"\",\n\"shipping_address\": \"\",\n\"latitude\": null,\n\"longitude\": \"104.200000\",\n\"contact_name\": \"Frances Hernandez\",\n\"contact_phone\": \"\",\n\"contact_email\": \"\",\n\"comments\": \"Sort share road candidate.\",\n\"status\": \"http://nautobot/api/extras/statuses/28eb334b-4171-4da4-a03a-fa6d0c6a9442/\",\n\"parent\": null,\n\"location_type\": \"http://nautobot/api/dcim/location-types/e3d4a9af-c6c1-4582-b483-a13301eb6e28/\",\n\"tenant\": \"http://nautobot/api/tenancy/tenants/5b1feadb-fab0-4f81-a53f-5192d83b0216/\",\n\"notes_url\": \"http://nautobot/api/dcim/locations/0e19e475-89c9-4cf4-8b5f-a0589f0950cd/notes/\",\n\"custom_fields\": {\n\"example_plugin_auto_custom_field\": null\n}\n},\n\"location_type\": {\n\"id\": \"4edcc111-e3f7-4309-ab0e-eb34c001874e\",\n\"display\": \"Campus \u2192 Building\",\n\"url\": \"http://nautobot/api/dcim/location-types/4edcc111-e3f7-4309-ab0e-eb34c001874e/\",\n\"created\": \"2023-04-12T19:29:06.707759Z\",\n\"last_updated\": \"2023-04-12T19:29:06.716482Z\",\n\"name\": \"Building\",\n\"description\": \"Protect growth bill all hair along.\",\n\"nestable\": false,\n\"parent\": \"http://nautobot/api/dcim/location-types/e3d4a9af-c6c1-4582-b483-a13301eb6e28/\",\n\"notes_url\": \"http://nautobot/api/dcim/location-types/4edcc111-e3f7-4309-ab0e-eb34c001874e/notes/\",\n\"custom_fields\": {}\n},\n\"tenant\": null,\n},\n\"location_type\": {\n...\n\"parent\": {\n\"id\": \"4edcc111-e3f7-4309-ab0e-eb34c001874e\",\n\"display\": \"Campus \u2192 Building\",\n\"url\": \"http://nautobot/api/dcim/location-types/4edcc111-e3f7-4309-ab0e-eb34c001874e/\",\n\"created\": \"2023-04-12T19:29:06.707759Z\",\n\"last_updated\": \"2023-04-12T19:29:06.716482Z\",\n\"name\": \"Building\",\n\"description\": \"Protect growth bill all hair along.\",\n\"nestable\": false,\n\"parent\": \"http://nautobot/api/dcim/location-types/e3d4a9af-c6c1-4582-b483-a13301eb6e28/\",\n\"notes_url\": \"http://nautobot/api/dcim/location-types/4edcc111-e3f7-4309-ab0e-eb34c001874e/notes/\",\n\"custom_fields\": {}\n}\n},\n...\n}\n</code></pre>"},{"location":"user-guide/platform-functionality/rest-api/overview.html#retrieving-object-relationships-and-relationship-associations","title":"Retrieving Object Relationships and Relationship Associations","text":"<p>Added in version 1.4.0</p> <p>Objects that are associated with another object by a custom Relationship are also retrievable and modifiable via the REST API. Due to the additional processing overhead involved in retrieving and representing these relationships, they are not included in default REST API <code>GET</code> responses. To include relationships data, pass <code>include=relationships</code> as a query parameter; in this case an additional key, <code>\"relationships\"</code>, will be included in the API response, as seen below:</p> <pre><code>GET /api/dcim/locations/f472bb77-7f56-4e79-ac25-2dc73eb63924/?include=relationships\n</code></pre> <pre><code>{\n\"id\": \"f472bb77-7f56-4e79-ac25-2dc73eb63924\",\n\"display\": \"alpha\",\n\"url\": \"http://nautobot/api/dcim/locations/f472bb77-7f56-4e79-ac25-2dc73eb63924/\",\n...\n\"relationships\": {\n\"site-to-vrf\": {\n\"id\": \"e74cb7f7-15b0-499d-9401-a0f01cb96a9a\",\n\"url\": \"/api/extras/relationships/e74cb7f7-15b0-499d-9401-a0f01cb96a9a/\",\n\"name\": \"Single Site to Single VRF\",\n\"type\": \"one-to-one\",\n\"destination\": {\n\"label\": \"VRF\",\n\"object_type\": \"ipam.vrf\",\n\"objects\": [\n{\n\"id\": \"36641ba0-50d6-43be-b9b5-86aa992402e0\",\n\"url\": \"http://nautobot/api/ipam/vrfs/36641ba0-50d6-43be-b9b5-86aa992402e0/\",\n\"name\": \"red\",\n\"rd\": null,\n\"display\": \"red\"\n}\n]\n}\n},\n\"vrfs-to-locations\": {\n\"id\": \"e39c53e4-78cf-4572-b116-1d8830b81b2e\",\n\"url\": \"/api/extras/relationships/e39c53e4-78cf-4572-b116-1d8830b81b2e/\",\n\"name\": \"VRFs to Locations\",\n\"type\": \"many-to-many\",\n\"source\": {\n\"label\": \"VRFs\",\n\"object_type\": \"ipam.vrf\",\n\"objects\": []\n}\n},\n}\n}\n</code></pre> <ul> <li>Under the <code>\"relationships\"</code> key, there will be one key per Relationship that applies to this model, corresponding to the <code>key</code> of that Relationship.<ul> <li>Under each key, there will be information about the Relationship itself, plus any of <code>\"source\"</code>, <code>\"destination\"</code>, or <code>\"peer\"</code> keys (depending on the type and directionality of the Relationship).<ul> <li>Under the <code>\"source\"</code>, <code>\"destination\"</code>, or <code>\"peer\"</code> keys, there are the following keys:<ul> <li><code>\"label\"</code> - a human-readable description of the related objects</li> <li><code>\"object_type\"</code> - the content-type of the related objects</li> <li><code>\"objects\"</code> - a list of all related objects, each represented in nested-serializer form as described under Related Objects above.</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>In the example above we can see that a single VRF, <code>green</code>, is a destination for the <code>site-to-vrf</code> Relationship from this Site, while there are currently no VRFs associated as sources for the <code>vrfs-to-locations</code> Relationship to this Site.</p>"},{"location":"user-guide/platform-functionality/rest-api/overview.html#including-config-contexts","title":"Including Config Contexts","text":"<p>When retrieving Devices and Virtual Machines via the REST API, it is possible to also retrive the rendered configuration context data for each such object if desired. Because rendering this data can be time consuming, it is not included in the REST API responses by default. If you wish to include config context data in the response, you must opt in by specifying the query parameter <code>include=config_context</code> as a part of your request.</p> <p>Changed in version 2.0.0</p> <p>In Nautobot 1.x, the rendered configuration context was included by default in the REST API response unless specifically excluded with the query parameter <code>exclude=config_context</code>. This behavior has been reversed in Nautobot 2.0 and the <code>exclude</code> query parameter is no longer supported.</p>"},{"location":"user-guide/platform-functionality/rest-api/overview.html#creating-a-new-object","title":"Creating a New Object","text":"<p>To create a new object, make a <code>POST</code> request to the model's list endpoint with JSON data pertaining to the object being created. Note that a REST API token is required for all write operations; see the authentication documentation for more information. Also be sure to set the <code>Content-Type</code> HTTP header to <code>application/json</code>. As always, it's a good practice to also set the <code>Accept</code> HTTP header to include the requested REST API version.</p> <pre><code>curl -s -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; version=2.0\" \\\nhttp://nautobot/api/ipam/prefixes/ \\\n--data '{\"prefix\": \"192.0.2.0/24\", \"status\": \"fc32b83f-2448-4602-9d43-fecc6735e4e5\", \"location\": \"8df9e629-4338-438b-8ea9-06114f7be08e\", \"namespace\": \"1fa6a1a9-84a3-4cf3-a9ad-7e4e7baa134a\"}' | jq '.'\n</code></pre> <pre><code>{\n\"id\": \"48df6965-0fcb-4155-b5f8-00fe8b9b01af\",\n\"url\": \"http://nautobot/api/ipam/prefixes/48df6965-0fcb-4155-b5f8-00fe8b9b01af/\",\n\"family\": {\n\"value\": 4,\n\"label\": \"IPv4\"\n},\n\"prefix\": \"192.0.2.0/24\",\n\"location\": {\n\"id\": \"8df9e629-4338-438b-8ea9-06114f7be08e\",\n\"object_type\": \"dcim.location\",\n\"url\": \"http://nautobot/api/dcim/locations/8df9e629-4338-438b-8ea9-06114f7be08e/\",\n},\n\"namespace\": {\n\"id\": \"1fa6a1a9-84a3-4cf3-a9ad-7e4e7baa134a\",\n\"object_type\": \"ipam.namespace\",\n\"url\": \"http://nautobot/api/ipam/namespaces/1fa6a1a9-84a3-4cf3-a9ad-7e4e7baa134a/\",\n},\n\"tenant\": null,\n\"vlan\": null,\n\"status\": {\n\"id\": \"fc32b83f-2448-4602-9d43-fecc6735e4e5\",\n\"object_type\": \"extras.status\",\n\"url\": \"http://nautobot/api/extras/statuses/fc32b83f-2448-4602-9d43-fecc6735e4e5/\",\n},\n\"role\": null,\n\"type\": \"network\",\n\"description\": \"\",\n\"tags\": [],\n\"custom_fields\": {},\n\"created\": \"2020-08-04T20:08:39.007125Z\",\n\"last_updated\": \"2020-08-04T20:08:39.007125Z\"\n}\n</code></pre> <p>Related fields can be specified using either the primary key, the URL of the related object, or a nested representation similar to what is returned in the <code>?depth=0</code> response. For example, the following request is equivalent to the one above:</p> <pre><code>curl -s -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; version=2.0\" \\\nhttp://nautobot/api/ipam/prefixes/ \\\n--data '{\"prefix\": \"192.0.2.0/24\", \"status\": {\"id\": \"fc32b83f-2448-4602-9d43-fecc6735e4e5\", \"object_type\": \"extras.status\"}, \"location\": {\"id\": \"8df9e629-4338-438b-8ea9-06114f7be08e\", \"object_type\": \"dcim.location\"}, \"namespace\": { \"id\": \"1fa6a1a9-84a3-4cf3-a9ad-7e4e7baa134a\", \"object_type\": \"ipam.namespace\"} }' | jq '.'\n</code></pre>"},{"location":"user-guide/platform-functionality/rest-api/overview.html#creating-multiple-objects","title":"Creating Multiple Objects","text":"<p>To create multiple instances of a model using a single request, make a <code>POST</code> request to the model's list endpoint with a list of JSON objects representing each instance to be created. If successful, the response will contain a list of the newly created instances. The example below illustrates the creation of three new locations.</p> <pre><code>curl -X POST -H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; version=2.0; indent=4\" \\\nhttp://nautobot/api/dcim/locations/ \\\n--data '[\n{\"name\": \"Location 1\", \"parent\": {\"name\": \"United States\"}, \"location_type\": {\"name\": \"City\"}},\n{\"name\": \"Location 2\", \"parent\": {\"name\": \"United States\"}, \"location_type\": {\"name\": \"City\"}},\n{\"name\": \"Location 3\", \"parent\": {\"name\": \"United States\"}, \"location_type\": {\"name\": \"City\"}},\n]'\n</code></pre> <pre><code>[\n{\n\"id\": \"0238a4e3-66f2-455a-831f-5f177215de0f\",\n\"url\": \"http://nautobot/api/dcim/locations/0238a4e3-66f2-455a-831f-5f177215de0f/\",\n\"name\": \"Location 1\",\n...\n},\n{\n\"id\": \"33ac3a3b-0ee7-49b7-bf2a-244096051dc0\",\n\"url\": \"http://nautobot/api/dcim/locations/33ac3a3b-0ee7-49b7-bf2a-244096051dc0/\",\n\"name\": \"Location 2\",\n...\n},\n{\n\"id\": \"10b3134d-960b-4794-ad18-0e73edd357c4\",\n\"url\": \"http://nautobot/api/dcim/locations/10b3134d-960b-4794-ad18-0e73edd357c4/\",\n\"name\": \"Location 3\",\n...\n}\n]\n</code></pre>"},{"location":"user-guide/platform-functionality/rest-api/overview.html#updating-an-object","title":"Updating an Object","text":"<p>To modify an object which has already been created, make a <code>PATCH</code> request to the model's detail endpoint specifying its UUID. Include any data which you wish to update on the object. As with object creation, the <code>Authorization</code> and <code>Content-Type</code> headers must also be specified, and specifying the <code>Accept</code> header is also strongly recommended.</p> <pre><code>curl -s -X PATCH \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; version=2.0\" \\\nhttp://nautobot/api/ipam/prefixes/b484b0ac-12e3-484a-84c0-aa17955eaedc/ \\\n--data '{\"status\": \"fc32b83f-2448-4602-9d43-fecc6735e4e5\"}' | jq '.'\n</code></pre> <pre><code>{\n\"id\": \"48df6965-0fcb-4155-b5f8-00fe8b9b01af\",\n\"url\": \"http://nautobot/api/ipam/prefixes/48df6965-0fcb-4155-b5f8-00fe8b9b01af/\",\n\"family\": {\n\"value\": 4,\n\"label\": \"IPv4\"\n},\n\"prefix\": \"192.0.2.0/24\",\n\"site\": \"http://nautobot/api/dcim/locations/8df9e629-4338-438b-8ea9-06114f7be08e/\",\n\"vrf\": null,\n\"tenant\": null,\n\"vlan\": null,\n\"status\": \"http://nautobot/api/extras/statuses/fc32b83f-2448-4602-9d43-fecc6735e4e5/\",\n\"role\": null,\n\"type\": \"network\",\n\"description\": \"\",\n\"tags\": [],\n\"custom_fields\": {},\n\"created\": \"2020-08-04T00:00:00Z\",\n\"last_updated\": \"2020-08-04T20:14:55.709430Z\"\n}\n</code></pre> <p>PUT versus PATCH</p> <p>The Nautobot REST API support the use of either <code>PUT</code> or <code>PATCH</code> to modify an existing object. The difference is that a <code>PUT</code> request requires the user to specify a complete representation of the object being modified, whereas a <code>PATCH</code> request need include only the attributes that are being updated. For most purposes, using <code>PATCH</code> is recommended.</p>"},{"location":"user-guide/platform-functionality/rest-api/overview.html#updating-relationship-associations","title":"Updating Relationship Associations","text":"<p>Added in version 1.4.0</p> <p>It is possible to modify the objects associated via Relationship with an object as part of a REST API <code>PATCH</code> request by specifying the <code>\"relationships\"</code> key, any or all of the relevant Relationships, and the list of desired related objects for each such Relationship. Since nested serializers are used for the related objects, they can be identified by ID (primary key) or by one or more attributes in a dictionary. For example, either of the following requests would be valid:</p> <pre><code>{\n\"relationships\": {\n\"site_to_vrf\": {\n\"destination\": {\n\"objects\": [\n{\"name\": \"blue\"}\n]\n}\n},\n\"vrfs_to_locations\": {\n\"source\": {\n\"objects\": [\n{\"name\": \"green\"},\n{\"name\": \"red\"},\n]\n}\n}\n}\n}\n</code></pre> <pre><code>{\n\"relationships\": {\n\"site_to_vrf\": {\n\"destination\": {\n\"objects\": [\"3e3c58f9-4f63-44ba-acee-f0c42430eba7\"]\n}\n}\n}\n}\n</code></pre> <p>Note</p> <p>Relationship keys can be omitted from the <code>\"relationships\"</code> dictionary, in which case the associations for that Relationship will be left unmodified. In the second example above, the existing association for the <code>\"site_to_vrf\"</code> Relationship would be replaced, but the <code>\"vrfs_to_locations\"</code> Relationship's associations would remain as-is.</p>"},{"location":"user-guide/platform-functionality/rest-api/overview.html#updating-multiple-objects","title":"Updating Multiple Objects","text":"<p>Multiple objects can be updated simultaneously by issuing a <code>PUT</code> or <code>PATCH</code> request to a model's list endpoint with a list of dictionaries specifying the UUID of each object to be deleted and the attributes to be updated. For example, to update locations with UUIDs 18de055e-3ea9-4cc3-ba78-b7eef6f0d589 and 1a414273-3d68-4586-ba22-6ae0a5702b8f to a status of \"Active\", issue the following request:</p> <pre><code>curl -s -X PATCH \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; version=2.0\" \\\nhttp://nautobot/api/dcim/locations/ \\\n--data '[{\"id\": \"18de055e-3ea9-4cc3-ba78-b7eef6f0d589\", \"status\": {\"name\": \"Active\"}}, {\"id\": \"1a414273-3d68-4586-ba22-6ae0a5702b8f\", \"status\": {\"name\": \"Active\"}}]'\n</code></pre> <p>Note that there is no requirement for the attributes to be identical among objects. For instance, it's possible to update the status of one site along with the name of another in the same request.</p> <p>Note</p> <p>The bulk update of objects is an all-or-none operation, meaning that if Nautobot fails to successfully update any of the specified objects (e.g. due a validation error), the entire operation will be aborted and none of the objects will be updated.</p>"},{"location":"user-guide/platform-functionality/rest-api/overview.html#deleting-an-object","title":"Deleting an Object","text":"<p>To delete an object from Nautobot, make a <code>DELETE</code> request to the model's detail endpoint specifying its UUID. The <code>Authorization</code> header must be included to specify an authorization token, however this type of request does not support passing any data in the body.</p> <pre><code>curl -s -X DELETE \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Accept: application/json; version=2.0\" \\\nhttp://nautobot/api/ipam/prefixes/48df6965-0fcb-4155-b5f8-00fe8b9b01af/\n</code></pre> <p>Note that <code>DELETE</code> requests do not return any data: If successful, the API will return a 204 (No Content) response.</p> <p>Note</p> <p>You can run <code>curl</code> with the verbose (<code>-v</code>) flag to inspect the HTTP response codes.</p>"},{"location":"user-guide/platform-functionality/rest-api/overview.html#deleting-multiple-objects","title":"Deleting Multiple Objects","text":"<p>Nautobot supports the simultaneous deletion of multiple objects of the same type by issuing a <code>DELETE</code> request to the model's list endpoint with a list of dictionaries specifying the UUID of each object to be deleted. For example, to delete locations with UUIDs 18de055e-3ea9-4cc3-ba78-b7eef6f0d589, 1a414273-3d68-4586-ba22-6ae0a5702b8f, and c2516019-caf6-41f0-98a6-4276c1a73fa3, issue the following request:</p> <pre><code>curl -s -X DELETE \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; version=2.0\" \\\nhttp://nautobot/api/dcim/locations/ \\\n--data '[{\"id\": \"18de055e-3ea9-4cc3-ba78-b7eef6f0d589\"}, {\"id\": \"1a414273-3d68-4586-ba22-6ae0a5702b8f\"}, {\"id\": \"c2516019-caf6-41f0-98a6-4276c1a73fa3\"}]'\n</code></pre> <p>Note</p> <p>The bulk deletion of objects is an all-or-none operation, meaning that if Nautobot fails to delete any of the specified objects (e.g. due a dependency by a related object), the entire operation will be aborted and none of the objects will be deleted.</p>"},{"location":"user-guide/platform-functionality/rest-api/overview.html#csv-format","title":"CSV Format","text":"<p>Added in version 2.0.0</p> <p>In addition to the standard JSON format for REST APIs, Nautobot's REST API also supports most (but not all) REST operations in CSV format when specifying a <code>?format=csv</code> query parameter or an <code>Accept: text/csv</code> header on requests, allowing Nautobot object data to be created, retrieved, and updated in this format as an alternative to JSON.</p> <p>Tip</p> <p>Nautobot's JSON support in the REST API is more fully-featured than its CSV support; not all data can be populated, retrieved, or modified by CSV at this time due to limitations of the CSV format in describing certain types of data. When in doubt, prefer JSON over CSV when interacting with the REST API.</p>"},{"location":"user-guide/platform-functionality/rest-api/ui-related-endpoints.html","title":"UI Related API Endpoints","text":"<p>Added in version 2.0.0</p> <p>Nautobot now retrieves its UI component information from API endpoints.</p> <p>Important</p> <p>These UI-related API endpoints serve a very different purpose from the rest. While we encourage users to utilize other API endpoints whenever possilbe in custom development, these API endpoints are not for external users and for internal use only. Therefore, they are not subject to Semantic Versioning and can change at any time to fit Nautobot UI needs until we decide that we are ready to support UI specific endpoints. Note that these API endpoints are hidden from OpenAPI schema as well.</p>"},{"location":"user-guide/platform-functionality/users/objectpermission.html","title":"Object Permissions","text":"<p>A permission in Nautobot represents a relationship shared by several components:</p> <ul> <li>Object type(s) - One or more types of object in Nautobot</li> <li>User(s)/Group(s) - One or more users or groups of users</li> <li>Action(s) - The action(s) that can be performed on an object</li> <li>Constraints - An arbitrary filter used to limit the granted action(s) to a specific subset of objects</li> </ul> <p>At a minimum, a permission assignment must specify one object type, one user or group, and one action. The specification of constraints is optional: A permission without any constraints specified will apply to all instances of the selected model(s).</p>"},{"location":"user-guide/platform-functionality/users/objectpermission.html#actions","title":"Actions","text":"<p>There are four core actions that can be permitted for each type of object within Nautobot, roughly analogous to the CRUD convention (create, read, update, and delete):</p> <ul> <li>View - Retrieve an object from the database</li> <li>Add - Create a new object</li> <li>Change - Modify an existing object</li> <li>Delete - Delete an existing object</li> </ul> <p>In addition to these, permissions can also grant custom actions that may be required by a specific model or plugin. For example, the <code>napalm_read</code> permission on the device model allows a user to execute NAPALM queries on a device via Nautobot's REST API. These can be specified when granting a permission in the \"additional actions\" field.</p> <p>Note</p> <p>Internally, all actions granted by a permission (both built-in and custom) are stored as strings in an array field named <code>actions</code>.</p>"},{"location":"user-guide/platform-functionality/users/objectpermission.html#constraints","title":"Constraints","text":"<p>Constraints are expressed as a JSON object or list representing a Django query filter. This is the same syntax that you would pass to the QuerySet <code>filter()</code> method when performing a query using the Django ORM. As with query filters, double underscores can be used to traverse related objects or invoke lookup expressions. Some example queries and their corresponding definitions are shown below.</p> <p>All attributes defined within a single JSON object are applied with a logical AND. For example, suppose you assign a permission for the location model with the following constraints.</p> <pre><code>{\n\"status__name\": \"Active\",\n\"parent__location_type__name\": \"Continent\",\n\"parent__name\": \"Americas\"\n}\n</code></pre> <p>The permission will grant access only to location which have a status of \"Active\" and which are assigned to the \"Americas\" continent.</p> <p>To achieve a logical OR with a different set of constraints, define multiple objects within a list. For example, if you want to constrain the permission to VLANs with an ID between 100 and 199 or a status of \"reserved,\" do the following:</p> <pre><code>[\n{\n\"vid__gte\": 100,\n\"vid__lt\": 200\n},\n{\n\"status__name\": \"Reserved\"\n}\n]\n</code></pre> <p>Additionally, where multiple permissions have been assigned for an object type, their collective constraints will be merged using a logical \"OR\" operation.</p>"},{"location":"user-guide/platform-functionality/users/token.html","title":"Tokens","text":"<p>A token is a unique identifier mapped to a Nautobot user account. Each user may have one or more tokens which he or she can use for authentication when making REST API requests. To create a token, navigate to the API tokens page under your user profile.</p> <ol> <li>Sign into Nautobot</li> <li>On the upper right hand corner, select your username, then Profile</li> <li>On the left hand side, under User Profile, select API Tokens</li> <li>Select +Add a token</li> <li>Leave Key blank to automatically create a token, or fill one in for yourself</li> <li>Check or uncheck \"Write enabled\", as desired</li> <li>(Optional) Set an expiration date for this token</li> <li>(Optional) Add a description</li> </ol> <p>Note</p> <p>The creation and modification of API tokens can be restricted per user by an administrator. If you don't see an option to create an API token, ask an administrator to grant you access.</p> <p>Each token contains a 160-bit key represented as 40 hexadecimal characters. When creating a token, you'll typically leave the key field blank so that a random key will be automatically generated. However, Nautobot allows you to specify a key in case you need to restore a previously deleted token to operation.</p> <p>By default, a token can be used to perform all actions via the API that a user would be permitted to do via the web UI. Deselecting the \"write enabled\" option will restrict API requests made with the token to read operations (e.g. GET) only.</p> <p>Additionally, a token can be set to expire at a specific time. This can be useful if an external client needs to be granted temporary access to Nautobot.</p>"}]}